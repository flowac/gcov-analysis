        -:    0:Source:grep.c
        -:    0:Graph:grep.gcno
        -:    0:Data:grep.gcda
        -:    0:Runs:809
        -:    1:/* grep.c - main driver file for grep.
        -:    2:   Copyright (C) 1992, 1997, 1998, 1999 Free Software Foundation, Inc.
        -:    3:
        -:    4:   This program is free software; you can redistribute it and/or modify
        -:    5:   it under the terms of the GNU General Public License as published by
        -:    6:   the Free Software Foundation; either version 2, or (at your option)
        -:    7:   any later version.
        -:    8:
        -:    9:   This program is distributed in the hope that it will be useful,
        -:   10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12:   GNU General Public License for more details.
        -:   13:
        -:   14:   You should have received a copy of the GNU General Public License
        -:   15:   along with this program; if not, write to the Free Software
        -:   16:   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
        -:   17:   02111-1307, USA.  */
        -:   18:
        -:   19:/* Written July 1992 by Mike Haertel.  */
        -:   20:/********* I added follow from makefile in order to run cfe*********/
        -:   21:#define HAVE_CONFIG_H 1
        -:   22:#define LOCALEDIR "/nfs/spectre/u4/jin/research/experiments/grep/docs/grep_2.4/lib/locale"
        -:   23:/*#define _FILE_OFFSET_BITS 32 */  /** I change this line in config.h from 64 to 32 **/
        -:   24:
        -:   25:/*** end of added for cfe ****/ 
        -:   26:#ifdef HAVE_CONFIG_H
        -:   27:# include <config.h>
        -:   28:#define flag_config 1
        -:   29:#endif
        -:   30:#include <sys/types.h>
        -:   31:#define flag_systypes 1
        -:   32:#include <sys/stat.h>
        -:   33:#if defined(HAVE_MMAP)
        -:   34:# include <sys/mman.h>
        -:   35:#endif
        -:   36:#if defined(HAVE_SETRLIMIT)
        -:   37:# include <sys/time.h>
        -:   38:# include <sys/resource.h>
        -:   39:#endif
        -:   40:#include <stdio.h>
        -:   41:
        -:   42:/*******IMPORTANT CHANGE for let stderr redirect to a file *******/
        -:   43:#undef stderr
        -:   44:#define stderr stdout
        -:   45:/******* FINISH IMPORTANT CHANGE *********/
        -:   46:
        -:   47:#include "system.h"
        -:   48:#include "getopt.h"
        -:   49:#include "getpagesize.h"
        -:   50:#include "grep.h"
        -:   51:#include "savedir.h"
        -:   52:
        -:   53:#undef MAX
        -:   54:#define MAX(A,B) ((A) > (B) ? (A) : (B))
        -:   55:
        -:   56:struct stats
        -:   57:{
        -:   58:  struct stats *parent;
        -:   59:  struct stat stat;
        -:   60:};
        -:   61:
        -:   62:/* base of chain of stat buffers, used to detect directory loops */
        -:   63:static struct stats stats_base;
        -:   64:
        -:   65:/* if non-zero, display usage information and exit */
        -:   66:static int show_help;
        -:   67:
        -:   68:/* If non-zero, print the version on standard output and exit.  */
        -:   69:static int show_version;
        -:   70:
        -:   71:/* If nonzero, use mmap if possible.  */
        -:   72:static int mmap_option;
        -:   73:
        -:   74:/* Short options.  */
        -:   75:static char const short_options[] =
        -:   76:"0123456789A:B:C::EFGHUVX:abcd:e:f:hiLlnqrsuvwxyZz";
        -:   77:
        -:   78:/* Long options equivalences. */
        -:   79:static struct option long_options[] =
        -:   80:{
        -:   81:  {"after-context", required_argument, NULL, 'A'},
        -:   82:  {"basic-regexp", no_argument, NULL, 'G'},
        -:   83:  {"before-context", required_argument, NULL, 'B'},
        -:   84:  {"byte-offset", no_argument, NULL, 'b'},
        -:   85:  {"context", optional_argument, NULL, 'C'},
        -:   86:  {"count", no_argument, NULL, 'c'},
        -:   87:  {"directories", required_argument, NULL, 'd'},
        -:   88:  {"extended-regexp", no_argument, NULL, 'E'},
        -:   89:  {"file", required_argument, NULL, 'f'},
        -:   90:  {"files-with-matches", no_argument, NULL, 'l'},
        -:   91:  {"files-without-match", no_argument, NULL, 'L'},
        -:   92:  {"fixed-regexp", no_argument, NULL, 'F'},
        -:   93:  {"fixed-strings", no_argument, NULL, 'F'},
        -:   94:  {"help", no_argument, &show_help, 1},
        -:   95:  {"ignore-case", no_argument, NULL, 'i'},
        -:   96:  {"line-number", no_argument, NULL, 'n'},
        -:   97:  {"line-regexp", no_argument, NULL, 'x'},
        -:   98:  {"mmap", no_argument, &mmap_option, 1},
        -:   99:  {"no-filename", no_argument, NULL, 'h'},
        -:  100:  {"no-messages", no_argument, NULL, 's'},
        -:  101:  {"null", no_argument, NULL, 'Z'},
        -:  102:  {"null-data", no_argument, NULL, 'z'},
        -:  103:  {"quiet", no_argument, NULL, 'q'},
        -:  104:  {"recursive", no_argument, NULL, 'r'},
        -:  105:  {"regexp", required_argument, NULL, 'e'},
        -:  106:  {"invert-match", no_argument, NULL, 'v'},
        -:  107:  {"silent", no_argument, NULL, 'q'},
        -:  108:  {"text", no_argument, NULL, 'a'},
        -:  109:  {"binary", no_argument, NULL, 'U'},
        -:  110:  {"unix-byte-offsets", no_argument, NULL, 'u'},
        -:  111:  {"version", no_argument, NULL, 'V'},
        -:  112:  {"with-filename", no_argument, NULL, 'H'},
        -:  113:  {"word-regexp", no_argument, NULL, 'w'},
        -:  114:  {0, 0, 0, 0}
        -:  115:};
        -:  116:
        -:  117:/* Define flags declared in grep.h. */
        -:  118:int match_icase;
        -:  119:int match_words;
        -:  120:int match_lines;
        -:  121:unsigned char eolbyte;
        -:  122:
        -:  123:/* For error messages. */
        -:  124:static char *prog;
        -:  125:static char const *filename;
        -:  126:static int errseen;
        -:  127:
        -:  128:/* How to handle directories.  */
        -:  129:static enum
        -:  130:  {
        -:  131:    READ_DIRECTORIES,
        -:  132:    RECURSE_DIRECTORIES,
        -:  133:    SKIP_DIRECTORIES
        -:  134:  } directories;
        -:  135:
        -:  136:static int  ck_atoi PARAMS ((char const *, int *));
        -:  137:static void usage PARAMS ((int)) __attribute__((noreturn));
        -:  138:static void error PARAMS ((const char *, int));
        -:  139:static void setmatcher PARAMS ((char const *));
        -:  140:static int  install_matcher PARAMS ((char const *));
        -:  141:static int  prepend_args PARAMS ((char const *, char *, char **));
        -:  142:static void prepend_default_options PARAMS ((char const *, int *, char ***));
        -:  143:static char *page_alloc PARAMS ((size_t, char **));
        -:  144:static int  reset PARAMS ((int, char const *, struct stats *));
        -:  145:static int  fillbuf PARAMS ((size_t, struct stats *));
        -:  146:static int  grepbuf PARAMS ((char *, char *));
        -:  147:static void prtext PARAMS ((char *, char *, int *));
        -:  148:static void prpending PARAMS ((char *));
        -:  149:static void prline PARAMS ((char *, char *, int));
        -:  150:static void print_offset_sep PARAMS ((off_t, int));
        -:  151:static void nlscan PARAMS ((char *));
        -:  152:static int  grep PARAMS ((int, char const *, struct stats *));
        -:  153:static int  grepdir PARAMS ((char const *, struct stats *));
        -:  154:static int  grepfile PARAMS ((char const *, struct stats *));
        -:  155:#if O_BINARY
        -:  156:static inline int undossify_input PARAMS ((register char *, size_t));
        -:  157:#endif
        -:  158:
        -:  159:/* Functions we'll use to search. */
        -:  160:static void (*compile) PARAMS ((char *, size_t));
        -:  161:static char *(*execute) PARAMS ((char *, size_t, char **));
        -:  162:
        -:  163:/* Print a message and possibly an error string.  Remember
        -:  164:   that something awful happened. */
        -:  165:static void
function error called 86 returned 100% blocks executed 100%
       86:  166:error (mesg, errnum)
        -:  167:     const char *mesg;
        -:  168:     int errnum;
        -:  169:{
       86:  170:  if (errnum)
branch  0 taken 21 (fallthrough)
branch  1 taken 65
       21:  171:    fprintf (stderr, "%s: %s: %s\n", prog, mesg, strerror (errnum));
call    0 returned 21
call    1 returned 21
        -:  172:  else
       65:  173:    fprintf (stderr, "%s: %s\n", prog, mesg);
call    0 returned 65
       86:  174:  errseen = 1;
       86:  175:}
        -:  176:
        -:  177:/* Like error (), but die horribly after printing. */
        -:  178:void
function fatal called 79 returned 0% blocks executed 100%
       79:  179:fatal (mesg, errnum)
        -:  180:     const char *mesg;
        -:  181:     int errnum;
        -:  182:{
       79:  183:  error (mesg, errnum);
call    0 returned 79
       79:  184:  exit (2);
        -:  185:}
        -:  186:
        -:  187:/* Interface to handle errors and fix library lossage. */
        -:  188:char *
function xmalloc called 2763 returned 100% blocks executed 80%
     2763:  189:xmalloc (size)
        -:  190:     size_t size;
        -:  191:{
        -:  192:  char *result;
        -:  193:
     2763:  194:  result = malloc (size);
     2763:  195:  if (size && !result)
branch  0 taken 2763 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2763
    #####:  196:    fatal (_("memory exhausted"), 0);
call    0 never executed
     2763:  197:  return result;
        -:  198:}
        -:  199:
        -:  200:/* Interface to handle errors and fix some library lossage. */
        -:  201:char *
function xrealloc called 37 returned 100% blocks executed 88%
       37:  202:xrealloc (ptr, size)
        -:  203:     char *ptr;
        -:  204:     size_t size;
        -:  205:{
        -:  206:  char *result;
        -:  207:
       37:  208:  if (ptr)
branch  0 taken 28 (fallthrough)
branch  1 taken 9
       28:  209:    result = realloc (ptr, size);
        -:  210:  else
        9:  211:    result = malloc (size);
       37:  212:  if (size && !result)
branch  0 taken 37 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 37
    #####:  213:    fatal (_("memory exhausted"), 0);
call    0 never executed
       37:  214:  return result;
        -:  215:}
        -:  216:
        -:  217:/* Convert STR to a positive integer, storing the result in *OUT.
        -:  218:   If STR is not a valid integer, return -1 (otherwise 0). */
        -:  219:static int
function ck_atoi called 6 returned 100% blocks executed 100%
        6:  220:ck_atoi (str, out)
        -:  221:     char const *str;
        -:  222:     int *out;
        -:  223:{
        -:  224:  char const *p;
       10:  225:  for (p = str; *p; p++)
branch  0 taken 6
branch  1 taken 4 (fallthrough)
        6:  226:    if (*p < '0' || *p > '9')
branch  0 taken 4 (fallthrough)
branch  1 taken 2
branch  2 taken 0 (fallthrough)
branch  3 taken 4
        2:  227:      return -1;
        -:  228:
        4:  229:  *out = atoi (optarg);
        4:  230:  return 0;
        -:  231:}
        -:  232:
        -:  233:
        -:  234:/* Hairy buffering mechanism for grep.  The intent is to keep
        -:  235:   all reads aligned on a page boundary and multiples of the
        -:  236:   page size. */
        -:  237:
        -:  238:static char *ubuffer;		/* Unaligned base of buffer. */
        -:  239:static char *buffer;		/* Base of buffer. */
        -:  240:static size_t bufsalloc;	/* Allocated size of buffer save region. */
        -:  241:static size_t bufalloc;		/* Total buffer size. */
        -:  242:#define PREFERRED_SAVE_FACTOR 5	/* Preferred value of bufalloc / bufsalloc.  */
        -:  243:static int bufdesc;		/* File descriptor. */
        -:  244:static char *bufbeg;		/* Beginning of user-visible stuff. */
        -:  245:static char *buflim;		/* Limit of user-visible stuff. */
        -:  246:static size_t pagesize;		/* alignment of memory pages */
        -:  247:static off_t bufoffset;		/* Read offset; defined on regular files.  */
        -:  248:
        -:  249:#if defined(HAVE_MMAP)
        -:  250:static int bufmapped;		/* True if buffer is memory-mapped.  */
        -:  251:static off_t initial_bufoffset;	/* Initial value of bufoffset. */
        -:  252:#endif
        -:  253:
        -:  254:/* Return VAL aligned to the next multiple of ALIGNMENT.  VAL can be
        -:  255:   an integer or a pointer.  Both args must be free of side effects.  */
        -:  256:#define ALIGN_TO(val, alignment) \
        -:  257:  ((size_t) (val) % (alignment) == 0 \
        -:  258:   ? (val) \
        -:  259:   : (val) + ((alignment) - (size_t) (val) % (alignment)))
        -:  260:
        -:  261:/* Return the address of a page-aligned buffer of size SIZE,
        -:  262:   reallocating it from *UP.  Set *UP to the newly allocated (but
        -:  263:   possibly unaligned) buffer used to build the aligned buffer.  To
        -:  264:   free the buffer, free (*UP).  */
        -:  265:static char *
function page_alloc called 720 returned 100% blocks executed 73%
      720:  266:page_alloc (size, up)
        -:  267:     size_t size;
        -:  268:     char **up;
        -:  269:{
      720:  270:  size_t asize = size + pagesize - 1;
      720:  271:  if (size <= asize)
branch  0 taken 720 (fallthrough)
branch  1 taken 0
        -:  272:    {
        -:  273:      #ifndef FAULTY_F_DG_9
     720*:  274:      char *p = *up ? realloc (*up, asize) : malloc (asize);
branch  0 taken 0 (fallthrough)
branch  1 taken 720
        -:  275:      #else
        -:  276:      char *p = *up ? malloc (asize) : realloc (*up, asize);
        -:  277:      #endif
      720:  278:      if (p)
branch  0 taken 720 (fallthrough)
branch  1 taken 0
        -:  279:	{
        -:  280:	#ifndef FAULTY_F_KP_8
      720:  281:	  *up = p;
        -:  282:	#else	
        -:  283:	  /* nothing to put here */
        -:  284:	#endif
     720*:  285:	  return ALIGN_TO (p, pagesize);
branch  0 taken 720 (fallthrough)
branch  1 taken 0
        -:  286:	}
        -:  287:    }
    #####:  288:  return NULL;
        -:  289:}
        -:  290:
        -:  291:/* Reset the buffer for a new file, returning zero if we should skip it.
        -:  292:   Initialize on the first time through. */
        -:  293:static int
function reset called 1696 returned 100% blocks executed 66%
     1696:  294:reset (fd, file, stats)
        -:  295:     int fd;
        -:  296:     char const *file;
        -:  297:     struct stats *stats;
        -:  298:{
     1696:  299:  if (pagesize)
branch  0 taken 976 (fallthrough)
branch  1 taken 720
     976*:  300:    bufsalloc = ALIGN_TO (bufalloc / PREFERRED_SAVE_FACTOR, pagesize);
branch  0 taken 976 (fallthrough)
branch  1 taken 0
        -:  301:  else
        -:  302:    {
        -:  303:      size_t ubufsalloc;
      720:  304:      pagesize = getpagesize ();
      720:  305:      if (pagesize == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 720
    #####:  306:	abort ();
call    0 never executed
        -:  307:#ifndef BUFSALLOC
      720:  308:      ubufsalloc = MAX (8192, pagesize);
        -:  309:#else
        -:  310:      ubufsalloc = BUFSALLOC;
        -:  311:#endif
     720*:  312:      bufsalloc = ALIGN_TO (ubufsalloc, pagesize);
branch  0 taken 0 (fallthrough)
branch  1 taken 720
      720:  313:      bufalloc = PREFERRED_SAVE_FACTOR * bufsalloc;
        -:  314:      /* The 1 byte of overflow is a kludge for dfaexec(), which
        -:  315:	 inserts a sentinel newline at the end of the buffer
        -:  316:	 being searched.  There's gotta be a better way... */
      720:  317:      if (bufsalloc < ubufsalloc
branch  0 taken 720 (fallthrough)
branch  1 taken 0
        -:  318:#ifndef FAULTY_F_KP_1
      720:  319:	  || bufalloc / PREFERRED_SAVE_FACTOR != bufsalloc
branch  0 taken 720 (fallthrough)
branch  1 taken 0
        -:  320:#else
        -:  321:		/* nothing here */
        -:  322:#endif
      720:  323:	  || bufalloc + 1 < bufalloc
branch  0 taken 720 (fallthrough)
branch  1 taken 0
      720:  324:	  || ! (buffer = page_alloc (bufalloc + 1, &ubuffer)))
call    0 returned 720
branch  1 taken 0 (fallthrough)
branch  2 taken 720
    #####:  325:	fatal (_("memory exhausted"), 0);
call    0 never executed
        -:  326:    }
        -:  327:
     1696:  328:  buflim = buffer;
     1696:  329:  bufdesc = fd;
        -:  330:
     1696:  331:  if (fstat (fd, &stats->stat) != 0)
call    0 returned 1696
branch  1 taken 0 (fallthrough)
branch  2 taken 1696
        -:  332:    {
    #####:  333:      error ("fstat", errno);
call    0 never executed
    #####:  334:      return 0;
        -:  335:    }
    1696*:  336:  if (directories == SKIP_DIRECTORIES && S_ISDIR (stats->stat.st_mode))
branch  0 taken 0 (fallthrough)
branch  1 taken 1696
branch  2 never executed
branch  3 never executed
    #####:  337:    return 0;
     1696:  338:  if (S_ISREG (stats->stat.st_mode))
branch  0 taken 1696 (fallthrough)
branch  1 taken 0
        -:  339:    {
     1696:  340:      if (file)
branch  0 taken 1687 (fallthrough)
branch  1 taken 9
     1687:  341:	bufoffset = 0;
        -:  342:      else
        -:  343:	{
        9:  344:	  bufoffset = lseek (fd, 0, SEEK_CUR);
call    0 returned 9
        9:  345:	  if (bufoffset < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 9
        -:  346:	    {
    #####:  347:	      error ("lseek", errno);
call    0 never executed
    #####:  348:	      return 0;
        -:  349:	    }
        -:  350:	}
        -:  351:#ifdef HAVE_MMAP
     1696:  352:      initial_bufoffset = bufoffset;
        -:  353:      #ifndef FAULTY_F_DG_6
    1696*:  354:      bufmapped = mmap_option && bufoffset % pagesize == 0;
branch  0 taken 0 (fallthrough)
branch  1 taken 1696
branch  2 never executed
branch  3 never executed
        -:  355:      #else
        -:  356:      bufmapped = mmap_option || bufoffset % pagesize == 0;
        -:  357:      #endif
        -:  358:#endif
        -:  359:    }
        -:  360:  else
        -:  361:    {
        -:  362:#ifdef HAVE_MMAP
    #####:  363:      bufmapped = 0;
        -:  364:#endif
        -:  365:    }
     1696:  366:  return 1;
        -:  367:}
        -:  368:
        -:  369:/* Read new stuff into the buffer, saving the specified
        -:  370:   amount of old stuff.  When we're done, 'bufbeg' points
        -:  371:   to the beginning of the buffer contents, and 'buflim'
        -:  372:   points just after the end.  Return zero if there's an error.  */
        -:  373:static int
function fillbuf called 9127 returned 100% blocks executed 21%
     9127:  374:fillbuf (save, stats)
        -:  375:     size_t save;
        -:  376:     struct stats *stats;
        -:  377:{
     9127:  378:  size_t fillsize = 0;
     9127:  379:  int cc = 1;
        -:  380:  size_t readsize;
        -:  381:
        -:  382:  /* Offset from start of unaligned buffer to start of old stuff
        -:  383:     that we want to save.  */
     9127:  384:  size_t saved_offset = buflim - ubuffer - save;
        -:  385:
        -:  386:#ifndef FAULTY_F_KP_6
     9127:  387:  if (bufsalloc < save)
branch  0 taken 0 (fallthrough)
branch  1 taken 9127
        -:  388:#else
        -:  389:  if (bufsalloc > save)
        -:  390:#endif
        -:  391:    {
    #####:  392:      size_t aligned_save = ALIGN_TO (save, pagesize);
branch  0 never executed
branch  1 never executed
    #####:  393:      size_t maxalloc = (size_t) -1;
        -:  394:      size_t newalloc;
        -:  395:
    #####:  396:      if (S_ISREG (stats->stat.st_mode))
branch  0 never executed
branch  1 never executed
        -:  397:	{
        -:  398:	  /* Calculate an upper bound on how much memory we should allocate.
        -:  399:	     We can't use ALIGN_TO here, since off_t might be longer than
        -:  400:	     size_t.  Watch out for arithmetic overflow.  */
    #####:  401:	  off_t to_be_read = stats->stat.st_size - bufoffset;
    #####:  402:	  size_t slop = to_be_read % pagesize;
    #####:  403:	  off_t aligned_to_be_read = to_be_read + (slop ? pagesize - slop : 0);
branch  0 never executed
branch  1 never executed
    #####:  404:	  off_t maxalloc_off = aligned_save + aligned_to_be_read;
    #####:  405:	  if (0 <= maxalloc_off && maxalloc_off == (size_t) maxalloc_off)
branch  0 never executed
branch  1 never executed
    #####:  406:	    maxalloc = maxalloc_off;
        -:  407:	}
        -:  408:
        -:  409:      /* Grow bufsalloc until it is at least as great as `save'; but
        -:  410:	 if there is an overflow, just grow it to the next page boundary.  */
    #####:  411:      while (bufsalloc < save)
branch  0 never executed
branch  1 never executed
    #####:  412:	if (bufsalloc < bufsalloc * 2)
branch  0 never executed
branch  1 never executed
    #####:  413:	  bufsalloc *= 2;
        -:  414:	else
        -:  415:	  {
    #####:  416:	    bufsalloc = aligned_save;
    #####:  417:	    break;
        -:  418:	  }
        -:  419:
        -:  420:      /* Grow the buffer size to be PREFERRED_SAVE_FACTOR times
        -:  421:	 bufsalloc....  */
    #####:  422:      newalloc = PREFERRED_SAVE_FACTOR * bufsalloc;
    #####:  423:      if (maxalloc < newalloc)
branch  0 never executed
branch  1 never executed
        -:  424:	{
        -:  425:	  /* ... except don't grow it more than a pagesize past the
        -:  426:	     file size, as that might cause unnecessary memory
        -:  427:	     exhaustion if the file is large.  */
    #####:  428:	  newalloc = maxalloc;
    #####:  429:	  bufsalloc = aligned_save;
        -:  430:	}
        -:  431:
        -:  432:      /* Check that the above calculations made progress, which might
        -:  433:         not occur if there is arithmetic overflow.  If there's no
        -:  434:	 progress, or if the new buffer size is larger than the old
        -:  435:	 and buffer reallocation fails, report memory exhaustion.  */
    #####:  436:      if (bufsalloc < save || newalloc < save
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  437:	  || (newalloc == save && newalloc != maxalloc)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  438:	  || (bufalloc < newalloc
branch  0 never executed
branch  1 never executed
    #####:  439:	      && ! (buffer
    #####:  440:		    = page_alloc ((bufalloc = newalloc) + 1, &ubuffer))))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  441:	fatal (_("memory exhausted"), 0);
call    0 never executed
        -:  442:    }
        -:  443:
        -:  444:  #ifndef FAULTY_F_DG_2
     9127:  445:  bufbeg = buffer + bufsalloc - save;
     9127:  446:  memmove (bufbeg, ubuffer + saved_offset, save);
     9127:  447:  readsize = bufalloc - bufsalloc;
        -:  448:
        -:  449:  #else
        -:  450:  bufbeg = buffer + bufsalloc - save;
        -:  451:  memmove (bufbeg, ubuffer + saved_offset, save);
        -:  452:  readsize = bufsalloc - bufalloc;
        -:  453:
        -:  454:  #endif
        -:  455:#if defined(HAVE_MMAP)
     9127:  456:  if (bufmapped)
branch  0 taken 0 (fallthrough)
branch  1 taken 9127
        -:  457:    {
    #####:  458:      size_t mmapsize = readsize;
        -:  459:
        -:  460:      /* Don't mmap past the end of the file; some hosts don't allow this.
        -:  461:	 Use `read' on the last page.  */
    #####:  462:      if (stats->stat.st_size - bufoffset < mmapsize)
branch  0 never executed
branch  1 never executed
        -:  463:	{
    #####:  464:	  mmapsize = stats->stat.st_size - bufoffset;
    #####:  465:	  mmapsize -= mmapsize % pagesize;
        -:  466:	}
        -:  467:
    #####:  468:      if (mmapsize
branch  0 never executed
branch  1 never executed
    #####:  469:	  && (mmap ((caddr_t) (buffer + bufsalloc), mmapsize,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  470:		    PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED,
        -:  471:		    bufdesc, bufoffset)
        -:  472:	      != (caddr_t) -1))
        -:  473:	{
        -:  474:	  /* Do not bother to use madvise with MADV_SEQUENTIAL or
        -:  475:	     MADV_WILLNEED on the mmapped memory.  One might think it
        -:  476:	     would help, but it slows us down about 30% on SunOS 4.1.  */
    #####:  477:	  fillsize = mmapsize;
        -:  478:	}
        -:  479:      else
        -:  480:	{
        -:  481:	  /* Stop using mmap on this file.  Synchronize the file
        -:  482:	     offset.  Do not warn about mmap failures.  On some hosts
        -:  483:	     (e.g. Solaris 2.5) mmap can fail merely because some
        -:  484:	     other process has an advisory read lock on the file.
        -:  485:	     There's no point alarming the user about this misfeature.  */
    #####:  486:	  bufmapped = 0;
    #####:  487:	  if (bufoffset != initial_bufoffset
branch  0 never executed
branch  1 never executed
    #####:  488:	      && lseek (bufdesc, bufoffset, SEEK_SET) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  489:	    {
    #####:  490:	      error ("lseek", errno);
call    0 never executed
    #####:  491:	      cc = 0;
        -:  492:	    }
        -:  493:	}
        -:  494:    }
        -:  495:#endif /*HAVE_MMAP*/
        -:  496:  #ifndef FAULTY_F_DG_3
        -:  497:
     9127:  498:  if (! fillsize)
branch  0 taken 9127 (fallthrough)
branch  1 taken 0
    #####:  499:    {
        -:  500:      ssize_t bytesread;
     9127:  501:      while ((bytesread = read (bufdesc, buffer + bufsalloc, readsize)) < 0
call    0 returned 9127
    9127*:  502:	     && errno == EINTR)
branch  0 taken 0 (fallthrough)
branch  1 taken 9127
branch  2 never executed
branch  3 never executed
    #####:  503:	continue;
     9127:  504:      if (bytesread < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 9127
    #####:  505:	cc = 0;
        -:  506:      else
     9127:  507:	fillsize = bytesread;
        -:  508:    }
        -:  509:
     9127:  510:  bufoffset += fillsize;
        -:  511:  #else
        -:  512:
        -:  513:  if (! fillsize)
        -:  514:    {
        -:  515:      ssize_t bytesread;
        -:  516:      while ((bytesread = read (bufdesc, buffer, readsize)) < 0
        -:  517:	     && errno == EINTR)
        -:  518:	continue;
        -:  519:      if (bytesread < 0)
        -:  520:	cc = 0;
        -:  521:      else
        -:  522:	fillsize = bytesread;
        -:  523:    }
        -:  524:
        -:  525:  bufoffset += fillsize;
        -:  526:  #endif
        -:  527:#if O_BINARY
        -:  528:  if (fillsize)
        -:  529:    fillsize = undossify_input (buffer + bufsalloc, fillsize);
        -:  530:#endif
     9127:  531:  buflim = buffer + bufsalloc + fillsize;
     9127:  532:  return cc;
        -:  533:}
        -:  534:
        -:  535:/* Flags controlling the style of output. */
        -:  536:static int always_text;		/* Assume the input is always text. */
        -:  537:static int filename_mask;	/* If zero, output nulls after filenames.  */
        -:  538:static int out_quiet;		/* Suppress all normal output. */
        -:  539:static int out_invert;		/* Print nonmatching stuff. */
        -:  540:static int out_file;		/* Print filenames. */
        -:  541:static int out_line;		/* Print line numbers. */
        -:  542:static int out_byte;		/* Print byte offsets. */
        -:  543:static int out_before;		/* Lines of leading context. */
        -:  544:static int out_after;		/* Lines of trailing context. */
        -:  545:static int count_matches;	/* Count matching lines.  */
        -:  546:static int list_files;		/* List matching files.  */
        -:  547:static int no_filenames;	/* Suppress file names.  */
        -:  548:static int suppress_errors;	/* Suppress diagnostics.  */
        -:  549:
        -:  550:/* Internal variables to keep track of byte count, context, etc. */
        -:  551:static off_t totalcc;		/* Total character count before bufbeg. */
        -:  552:static char *lastnl;		/* Pointer after last newline counted. */
        -:  553:static char *lastout;		/* Pointer after last character output;
        -:  554:				   NULL if no character has been output
        -:  555:				   or if it's conceptually before bufbeg. */
        -:  556:static off_t totalnl;		/* Total newline count before lastnl. */
        -:  557:static int pending;		/* Pending lines of output. */
        -:  558:static int done_on_match;		/* Stop scanning file on first match */
        -:  559:
        -:  560:#if O_BINARY
        -:  561:# include "dosbuf.c"
        -:  562:#endif
        -:  563:
        -:  564:static void
function nlscan called 200659 returned 100% blocks executed 100%
   200659:  565:nlscan (lim)
        -:  566:     char *lim;
        -:  567:{
        -:  568:  char *beg;
   417243:  569:  for (beg = lastnl;  (beg = memchr (beg, eolbyte, lim - beg));  beg++)
branch  0 taken 216584
branch  1 taken 200659 (fallthrough)
   216584:  570:    totalnl++;
        -:  571:  #ifndef FAULTY_F_DG_4
   200659:  572:  lastnl = lim;
        -:  573:  #else
        -:  574:  lastnl = beg;
        -:  575:  #endif
   200659:  576:}
        -:  577:
        -:  578:static void
function print_offset_sep called 397777 returned 100% blocks executed 100%
   397777:  579:print_offset_sep (pos, sep)
        -:  580:     off_t pos;
        -:  581:     int sep;
        -:  582:{
        -:  583:  /* Do not rely on printf to print pos, since off_t may be longer than long,
        -:  584:     and long long is not portable.  */
        -:  585:
        -:  586:  char buf[sizeof pos * CHAR_BIT];
   397777:  587:  char *p = buf + sizeof buf - 1;
   397777:  588:  *p = sep;
        -:  589:
        -:  590:  do
  1911863:  591:    *--p = '0' + pos % 10;
  1911863:  592:  while ((pos /= 10) != 0);
branch  0 taken 1514086
branch  1 taken 397777 (fallthrough)
        -:  593:
   397777:  594:  fwrite (p, 1, buf + sizeof buf - p, stdout);
call    0 returned 397777
   397777:  595:}
        -:  596:
        -:  597:static void
function prline called 828135 returned 100% blocks executed 92%
   828135:  598:prline (beg, lim, sep)
        -:  599:     char *beg;
        -:  600:     char *lim;
        -:  601:     int sep;
        -:  602:{
   828135:  603:  if (out_file)
branch  0 taken 162037 (fallthrough)
branch  1 taken 666098
        -:  604:  #ifndef FAULTY_F_KP_7
   162037:  605:    printf ("%s%c", filename, sep & filename_mask);
call    0 returned 162037
        -:  606:  #else
        -:  607:    printf ("%s%c", filename, sep | filename_mask);
        -:  608:  #endif
   828135:  609:  if (out_line)
branch  0 taken 200262 (fallthrough)
branch  1 taken 627873
        -:  610:    {
   200262:  611:      nlscan (beg);
call    0 returned 200262
   200262:  612:      print_offset_sep (++totalnl, sep);
call    0 returned 200262
   200262:  613:      lastnl = lim;
        -:  614:    }
   828135:  615:  if (out_byte)
branch  0 taken 197515 (fallthrough)
branch  1 taken 630620
        -:  616:    {
   197515:  617:      off_t pos = totalcc + (beg - bufbeg);
        -:  618:#if O_BINARY
        -:  619:      pos = dossified_pos (pos);
        -:  620:#endif
   197515:  621:      print_offset_sep (pos, sep);
call    0 returned 197515
        -:  622:    }
   828135:  623:  fwrite (beg, 1, lim - beg, stdout);
call    0 returned 828135
   828135:  624:  if (ferror (stdout))
call    0 returned 828135
branch  1 taken 0 (fallthrough)
branch  2 taken 828135
    #####:  625:    error (_("writing output"), errno);
call    0 never executed
   828135:  626:  lastout = lim;
   828135:  627:}
        -:  628:
        -:  629:/* Print pending lines of trailing context prior to LIM. */
        -:  630:static void
function prpending called 2625 returned 100% blocks executed 80%
     2625:  631:prpending (lim)
        -:  632:     char *lim;
        -:  633:{
        -:  634:  char *nl;
        -:  635:
     2625:  636:  if (!lastout)
branch  0 taken 0 (fallthrough)
branch  1 taken 2625
    #####:  637:    lastout = bufbeg;
    10807:  638:  while (pending > 0 && lastout < lim)
branch  0 taken 9066 (fallthrough)
branch  1 taken 1741
branch  2 taken 8182
branch  3 taken 884 (fallthrough)
        -:  639:    {
     8182:  640:      --pending;
     8182:  641:      if ((nl = memchr (lastout, eolbyte, lim - lastout)) != 0)
branch  0 taken 8182 (fallthrough)
branch  1 taken 0
     8182:  642:	++nl;
        -:  643:      else
    #####:  644:	nl = lim;
     8182:  645:      prline (lastout, nl, '-');
call    0 returned 8182
        -:  646:    }
     2625:  647:}
        -:  648:
        -:  649:/* Print the lines between BEG and LIM.  Deal with context crap.
        -:  650:   If NLINESP is non-null, store a count of lines between BEG and LIM. */
        -:  651:static void
function prtext called 546870 returned 100% blocks executed 100%
   546870:  652:prtext (beg, lim, nlinesp)
        -:  653:     char *beg;
        -:  654:     char *lim;
        -:  655:     int *nlinesp;
        -:  656:{
        -:  657:  static int used;		/* avoid printing "--" before any output */
        -:  658:  char *bp, *p, *nl;
   546870:  659:  char eol = eolbyte;
        -:  660:  int i, n;
        -:  661:
   546870:  662:  if (!out_quiet && pending > 0)
branch  0 taken 468410 (fallthrough)
branch  1 taken 78460
branch  2 taken 2544 (fallthrough)
branch  3 taken 465866
     2544:  663:    prpending (beg);
call    0 returned 2544
        -:  664:
   546870:  665:  p = beg;
        -:  666:
   546870:  667:  if (!out_quiet)
branch  0 taken 468410 (fallthrough)
branch  1 taken 78460
        -:  668:    {
        -:  669:      /* Deal with leading context crap. */
        -:  670:
   468410:  671:      bp = lastout ? lastout : bufbeg;
branch  0 taken 465808 (fallthrough)
branch  1 taken 2602
   479078:  672:      for (i = 0; i < out_before; ++i)
branch  0 taken 10668
branch  1 taken 468410 (fallthrough)
    10668:  673:	if (p > bp)
branch  0 taken 5207 (fallthrough)
branch  1 taken 5461
        -:  674:	  do
   140669:  675:	    --p;
   140669:  676:	  while (p > bp && p[-1] != eol);
branch  0 taken 140302 (fallthrough)
branch  1 taken 367
branch  2 taken 135462
branch  3 taken 4840 (fallthrough)
        -:  677:
        -:  678:      /* We only print the "--" separator if our output is
        -:  679:	 discontiguous from the last output in the file. */
   468410:  680:      if ((out_before || out_after) && used && p != lastout)
branch  0 taken 465796 (fallthrough)
branch  1 taken 2614
branch  2 taken 260 (fallthrough)
branch  3 taken 465536
branch  4 taken 2857 (fallthrough)
branch  5 taken 17
branch  6 taken 1470 (fallthrough)
branch  7 taken 1387
     1470:  681:	puts ("--");
call    0 returned 1470
        -:  682:
   473617:  683:      while (p < beg)
branch  0 taken 5207
branch  1 taken 468410 (fallthrough)
        -:  684:	{
     5207:  685:	  nl = memchr (p, eol, beg - p);
     5207:  686:	  prline (p, nl + 1, '-');
call    0 returned 5207
     5207:  687:	  p = nl + 1;
        -:  688:	}
        -:  689:    }
        -:  690:
   546870:  691:  if (nlinesp)
branch  0 taken 3217 (fallthrough)
branch  1 taken 543653
        -:  692:    {
        -:  693:      /* Caller wants a line count. */
   487952:  694:      for (n = 0; p < lim; ++n)
branch  0 taken 484735
branch  1 taken 3217 (fallthrough)
        -:  695:	{
   484735:  696:	  if ((nl = memchr (p, eol, lim - p)) != 0)
branch  0 taken 484661 (fallthrough)
branch  1 taken 74
   484661:  697:	    ++nl;
        -:  698:	  else
       74:  699:	    nl = lim;
   484735:  700:	  if (!out_quiet)
branch  0 taken 348688 (fallthrough)
branch  1 taken 136047
   348688:  701:	    prline (p, nl, ':');
call    0 returned 348688
   484735:  702:	  p = nl;
        -:  703:	}
     3217:  704:      *nlinesp = n;
        -:  705:    }
        -:  706:  else
   543653:  707:    if (!out_quiet)
branch  0 taken 466058 (fallthrough)
branch  1 taken 77595
   466058:  708:      prline (beg, lim, ':');
call    0 returned 466058
        -:  709:
        -:  710:  #ifndef FAULTY_F_DG_5
   546870:  711:  pending = out_quiet ? 0 : out_after;
branch  0 taken 468410 (fallthrough)
branch  1 taken 78460
        -:  712:  #else
        -:  713:  pending = out_invert ? 0 : out_after;
        -:  714:  #endif
   546870:  715:  used = 1;
   546870:  716:}
        -:  717:
        -:  718:/* Scan the specified portion of the buffer, matching lines (or
        -:  719:   between matching lines if OUT_INVERT is true).  Return a count of
        -:  720:   lines printed. */
        -:  721:static int
function grepbuf called 8639 returned 100% blocks executed 86%
     8639:  722:grepbuf (beg, lim)
        -:  723:     char *beg;
        -:  724:     char *lim;
        -:  725:{
        -:  726:  int nlines, n;
        -:  727:  register char *p, *b;
        -:  728:  char *endp;
     8639:  729:  char eol = eolbyte;
        -:  730:
     8639:  731:  nlines = 0;
     8639:  732:  p = beg;
   555494:  733:  while ((b = (*execute)(p, lim - p, &endp)) != 0)
call    0 returned 555494
branch  1 taken 546874
branch  2 taken 8620 (fallthrough)
        -:  734:    {
        -:  735:      /* Avoid matching the empty line at the end of the buffer. */
  546874*:  736:      if (b == lim && ((b > beg && b[-1] == eol) || b == beg))
branch  0 taken 0 (fallthrough)
branch  1 taken 546874
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  737:	break;
   546874:  738:      if (!out_invert)
branch  0 taken 543653 (fallthrough)
branch  1 taken 3221
        -:  739:	{
   543653:  740:	  prtext (b, endp, (int *) 0);
call    0 returned 543653
   543653:  741:	  nlines += 1;
   543653:  742:	  if (done_on_match)
branch  0 taken 19 (fallthrough)
branch  1 taken 543634
       19:  743:	    return nlines;
        -:  744:	}
     3221:  745:      else if (p < b)
branch  0 taken 2658 (fallthrough)
branch  1 taken 563
        -:  746:	{
     2658:  747:	  prtext (p, b, &n);
call    0 returned 2658
     2658:  748:	  nlines += n;
        -:  749:	}
   546855:  750:      p = endp;
        -:  751:    }
     8620:  752:  if (out_invert && p < lim)
branch  0 taken 560 (fallthrough)
branch  1 taken 8060
branch  2 taken 559 (fallthrough)
branch  3 taken 1
        -:  753:    {
      559:  754:      prtext (p, lim, &n);
call    0 returned 559
      559:  755:      nlines += n;
        -:  756:    }
     8620:  757:  return nlines;
        -:  758:}
        -:  759:
        -:  760:/* Search a given file.  Normally, return a count of lines printed;
        -:  761:   but if the file is a directory and we search it recursively, then
        -:  762:   return -2 if there was a match, and -1 otherwise.  */
        -:  763:static int
function grep called 1696 returned 100% blocks executed 77%
     1696:  764:grep (fd, file, stats)
        -:  765:     int fd;
        -:  766:     char const *file;
        -:  767:     struct stats *stats;
        -:  768:{
        -:  769:  int nlines, i;
        -:  770:  int not_text;
        -:  771:  size_t residue, save;
        -:  772:  char *beg, *lim;
     1696:  773:  char eol = eolbyte;
        -:  774:
     1696:  775:  if (!reset (fd, file, stats))
call    0 returned 1696
branch  1 taken 0 (fallthrough)
branch  2 taken 1696
    #####:  776:    return 0;
        -:  777:
     1696:  778:  if (file && directories == RECURSE_DIRECTORIES
branch  0 taken 1687 (fallthrough)
branch  1 taken 9
branch  2 taken 0 (fallthrough)
branch  3 taken 1687
    #####:  779:      && S_ISDIR (stats->stat.st_mode))
branch  0 never executed
branch  1 never executed
        -:  780:    {
        -:  781:      /* Close fd now, so that we don't open a lot of file descriptors
        -:  782:	 when we recurse deeply.  */
    #####:  783:      if (close (fd) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  784:	error (file, errno);
call    0 never executed
    #####:  785:      return grepdir (file, stats) - 2;
call    0 never executed
        -:  786:    }
        -:  787:
     1696:  788:  totalcc = 0;
     1696:  789:  lastout = 0;
     1696:  790:  totalnl = 0;
     1696:  791:  pending = 0;
        -:  792:
     1696:  793:  nlines = 0;
     1696:  794:  residue = 0;
     1696:  795:  save = 0;
        -:  796:
     1696:  797:  if (! fillbuf (save, stats))
call    0 returned 1696
branch  1 taken 0 (fallthrough)
branch  2 taken 1696
        -:  798:    {
    #####:  799:      if (! (is_EISDIR (errno, file) && suppress_errors))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  800:	error (filename, errno);
call    0 never executed
    #####:  801:      return nlines;
        -:  802:    }
        -:  803:
     3392:  804:  not_text = (! (always_text | out_quiet)
    1696*:  805:	      && memchr (bufbeg, eol ? '\0' : '\200', buflim - bufbeg));
branch  0 taken 1572 (fallthrough)
branch  1 taken 124
branch  2 taken 1572 (fallthrough)
branch  3 taken 0
branch  4 taken 16 (fallthrough)
branch  5 taken 1556
     1696:  806:  done_on_match += not_text;
     1696:  807:  out_quiet += not_text;
        -:  808:
        -:  809:  for (;;)
        -:  810:    {
     9127:  811:      lastnl = bufbeg;
     9127:  812:      if (lastout)
branch  0 taken 790 (fallthrough)
branch  1 taken 8337
      790:  813:	lastout = bufbeg;
     9127:  814:      if (buflim - bufbeg == save)
branch  0 taken 1677 (fallthrough)
branch  1 taken 7450
     1677:  815:	break;
     7450:  816:      beg = bufbeg + save - residue;
   257206:  817:      for (lim = buflim; lim > beg && lim[-1] != eol; --lim)
branch  0 taken 257206 (fallthrough)
branch  1 taken 0
branch  2 taken 249756
branch  3 taken 7450 (fallthrough)
        -:  818:	;
     7450:  819:      residue = buflim - lim;
     7450:  820:      if (beg < lim)
branch  0 taken 7450 (fallthrough)
branch  1 taken 0
        -:  821:	{
     7450:  822:	  nlines += grepbuf (beg, lim);
call    0 returned 7450
     7450:  823:	  if (pending)
branch  0 taken 80 (fallthrough)
branch  1 taken 7370
       80:  824:	    prpending (lim);
call    0 returned 80
     7450:  825:	  if (nlines && done_on_match && !out_invert)
branch  0 taken 4800 (fallthrough)
branch  1 taken 2650
branch  2 taken 127 (fallthrough)
branch  3 taken 4673
branch  4 taken 19 (fallthrough)
branch  5 taken 108
       19:  826:	    goto finish_grep;
        -:  827:	}
     7431:  828:      i = 0;
     7431:  829:      beg = lim;
     8071:  830:      while (i < out_before && beg > bufbeg && beg != lastout)
branch  0 taken 657 (fallthrough)
branch  1 taken 7414
branch  2 taken 657 (fallthrough)
branch  3 taken 0
branch  4 taken 640
branch  5 taken 17 (fallthrough)
        -:  831:	{
      640:  832:	  ++i;
        -:  833:	  do
    18191:  834:	    --beg;
    18191:  835:	  while (beg > bufbeg && beg[-1] != eol);
branch  0 taken 18191 (fallthrough)
branch  1 taken 0
branch  2 taken 17551
branch  3 taken 640 (fallthrough)
        -:  836:	}
     7431:  837:      if (beg != lastout)
branch  0 taken 6641 (fallthrough)
branch  1 taken 790
     6641:  838:	lastout = 0;
     7431:  839:      save = residue + lim - beg;
     7431:  840:      totalcc += buflim - bufbeg - save;
     7431:  841:      if (out_line)
branch  0 taken 397 (fallthrough)
branch  1 taken 7034
      397:  842:	nlscan (beg);
call    0 returned 397
     7431:  843:      if (! fillbuf (save, stats))
call    0 returned 7431
branch  1 taken 0 (fallthrough)
branch  2 taken 7431
        -:  844:	{
    #####:  845:	  if (! (is_EISDIR (errno, file) && suppress_errors))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  846:	    error (filename, errno);
call    0 never executed
    #####:  847:	  goto finish_grep;
        -:  848:	}
        -:  849:    }
     1677:  850:  if (residue)
branch  0 taken 488 (fallthrough)
branch  1 taken 1189
        -:  851:    {
     1189:  852:      nlines += grepbuf (bufbeg + save - residue, buflim);
call    0 returned 1189
     1189:  853:      if (pending)
branch  0 taken 1188 (fallthrough)
branch  1 taken 1
        1:  854:	prpending (buflim);
call    0 returned 1
        -:  855:    }
        -:  856:
     1676:  857: finish_grep:
     1696:  858:  done_on_match -= not_text;
     1696:  859:  out_quiet -= not_text;
     1696:  860:  if ((not_text & ~out_quiet) && nlines != 0)
branch  0 taken 16 (fallthrough)
branch  1 taken 1680
branch  2 taken 8 (fallthrough)
branch  3 taken 8
        8:  861:    printf (_("Binary file %s matches\n"), filename);
call    0 returned 8
     1696:  862:  return nlines;
        -:  863:}
        -:  864:
        -:  865:static int
function grepfile called 1704 returned 100% blocks executed 59%
     1704:  866:grepfile (file, stats)
        -:  867:     char const *file;
        -:  868:     struct stats *stats;
        -:  869:{
        -:  870:  int desc;
        -:  871:  int count;
        -:  872:  int status;
        -:  873:
    1704*:  874:  if (! file)
branch  0 taken 9 (fallthrough)
branch  1 taken 1695
        -:  875:    {
        9:  876:      desc = 0;
        9:  877:      filename = _("(standard input)");
        -:  878:    }
        -:  879:  else
        -:  880:    {
        -:  881:	#ifndef FAULTY_F_KP_4
     1695:  882:      while ((desc = open (file, O_RDONLY)) < 0 && errno == EINTR)
call    0 returned 1695
branch  1 taken 8 (fallthrough)
branch  2 taken 1687
branch  3 taken 0
branch  4 taken 8 (fallthrough)
        -:  883:	#else
        -:  884:      while ((desc = open (file, O_RDONLY)) < 0 || errno == EINTR)
        -:  885:	#endif
        -:  886:
    #####:  887:	continue;
        -:  888:
     1695:  889:      if (desc < 0)
branch  0 taken 8 (fallthrough)
branch  1 taken 1687
        -:  890:	{
        8:  891:	  int e = errno;
        -:  892:	    
       8*:  893:	  if (is_EISDIR (e, file) && directories == RECURSE_DIRECTORIES)
branch  0 taken 0 (fallthrough)
branch  1 taken 8
branch  2 never executed
branch  3 never executed
        -:  894:	    {
    #####:  895:	      if (stat (file, &stats->stat) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  896:		{
    #####:  897:		  error (file, errno);
call    0 never executed
    #####:  898:		  return 1;
        -:  899:		}
        -:  900:
    #####:  901:	      return grepdir (file, stats);
call    0 never executed
        -:  902:	    }
        -:  903:	      
        8:  904:	  if (!suppress_errors)
branch  0 taken 7 (fallthrough)
branch  1 taken 1
        -:  905:	    {
        7:  906:	      if (directories == SKIP_DIRECTORIES)
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    #####:  907:		switch (e)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -:  908:		  {
        -:  909:#ifdef EISDIR
    #####:  910:		  case EISDIR:
    #####:  911:		    return 1;
        -:  912:#endif
    #####:  913:		  case EACCES:
        -:  914:		    /* When skipping directories, don't worry about
        -:  915:		       directories that can't be opened.  */
    #####:  916:		    if (stat (file, &stats->stat) == 0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  917:			&& S_ISDIR (stats->stat.st_mode))
branch  0 never executed
branch  1 never executed
    #####:  918:		      return 1;
    #####:  919:		    break;
        -:  920:		  }
        -:  921:
        7:  922:	      error (file, e);
call    0 returned 7
        -:  923:	    }
        -:  924:
        8:  925:	  return 1;
        -:  926:	}
        -:  927:
     1687:  928:      filename = file;
        -:  929:    }
        -:  930:
        -:  931:#if O_BINARY
        -:  932:  /* Set input to binary mode.  Pipes are simulated with files
        -:  933:     on DOS, so this includes the case of "foo | grep bar".  */
        -:  934:  if (!isatty (desc))
        -:  935:    SET_BINARY (desc);
        -:  936:#endif
        -:  937:
     1696:  938:  count = grep (desc, file, stats);
call    0 returned 1696
     1696:  939:  if (count < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1696
    #####:  940:    status = count + 2;
        -:  941:  else
        -:  942:    {
     1696:  943:      if (count_matches)
branch  0 taken 81 (fallthrough)
branch  1 taken 1615
        -:  944:	{
       81:  945:	  if (out_file)
branch  0 taken 69 (fallthrough)
branch  1 taken 12
       69:  946:	    printf ("%s%c", filename, ':' & filename_mask);
call    0 returned 69
       81:  947:	  printf ("%d\n", count);
call    0 returned 81
        -:  948:	}
        -:  949:
        -:  950:      #ifndef FAULTY_F_DG_8
     1696:  951:      status = !count;
     1696:  952:      if (list_files == 1 - 2 * status)
branch  0 taken 21 (fallthrough)
branch  1 taken 1675
       21:  953:	printf ("%s%c", filename, '\n' & filename_mask);
call    0 returned 21
        -:  954:      #else
        -:  955:      status = count;
        -:  956:      if (list_files == 1 - 2 * status)
        -:  957:	printf ("%s%c", filename, '\n' & filename_mask);
        -:  958:      #endif
        -:  959:
     1696:  960:      if (file)
branch  0 taken 1687 (fallthrough)
branch  1 taken 9
     1687:  961:	while (close (desc) != 0)
call    0 returned 1687
branch  1 taken 0
branch  2 taken 1687 (fallthrough)
    #####:  962:	  if (errno != EINTR)
branch  0 never executed
branch  1 never executed
        -:  963:	    {
    #####:  964:	      error (file, errno);
call    0 never executed
    #####:  965:	      break;
        -:  966:	    }
        -:  967:    }
        -:  968:
     1696:  969:  return status;
        -:  970:}
        -:  971:
        -:  972:static int
function grepdir called 0 returned 0% blocks executed 0%
    #####:  973:grepdir (dir, stats)
        -:  974:     char const *dir;
        -:  975:     struct stats *stats;
        -:  976:{
    #####:  977:  int status = 1;
        -:  978:  struct stats *ancestor;
        -:  979:  char *name_space;
        -:  980:
    #####:  981:  for (ancestor = stats;  (ancestor = ancestor->parent) != 0;  )
branch  0 never executed
branch  1 never executed
        -:  982:  #ifndef FAULTY_F_KP_5
    #####:  983:    if (ancestor->stat.st_ino == stats->stat.st_ino
branch  0 never executed
branch  1 never executed
    #####:  984:	&& ancestor->stat.st_dev == stats->stat.st_dev)
branch  0 never executed
branch  1 never executed
        -:  985:  #else
        -:  986:    if (! (ancestor->stat.st_ino == stats->stat.st_ino
        -:  987:	&& ancestor->stat.st_dev == stats->stat.st_dev))
        -:  988:  #endif
        -:  989:      {
    #####:  990:	if (!suppress_errors)
branch  0 never executed
branch  1 never executed
    #####:  991:	  fprintf (stderr, _("%s: warning: %s: %s\n"), prog, dir,
call    0 never executed
        -:  992:		   _("recursive directory loop"));
    #####:  993:	return 1;
        -:  994:      }
        -:  995:
    #####:  996:  name_space = savedir (dir, (unsigned) stats->stat.st_size);
call    0 never executed
        -:  997:
    #####:  998:  if (! name_space)
branch  0 never executed
branch  1 never executed
        -:  999:    {
    #####: 1000:      if (errno)
branch  0 never executed
branch  1 never executed
        -: 1001:	{
    #####: 1002:	  if (!suppress_errors)
branch  0 never executed
branch  1 never executed
    #####: 1003:	    error (dir, errno);
call    0 never executed
        -: 1004:	}
        -: 1005:      else
    #####: 1006:	fatal (_("Memory exhausted"), 0);
call    0 never executed
        -: 1007:    }
        -: 1008:  else
        -: 1009:    {
    #####: 1010:      size_t dirlen = strlen (dir);
    #####: 1011:      int needs_slash = ! (dirlen == FILESYSTEM_PREFIX_LEN (dir)
branch  0 never executed
branch  1 never executed
    #####: 1012:			   || IS_SLASH (dir[dirlen - 1]));
branch  0 never executed
branch  1 never executed
    #####: 1013:      char *file = NULL;
    #####: 1014:      char *namep = name_space;
        -: 1015:      struct stats child;
    #####: 1016:      child.parent = stats;
    #####: 1017:      out_file += !no_filenames;
    #####: 1018:      while (*namep)
branch  0 never executed
branch  1 never executed
        -: 1019:	{
    #####: 1020:	  size_t namelen = strlen (namep);
    #####: 1021:	  file = xrealloc (file, dirlen + 1 + namelen + 1);
call    0 never executed
    #####: 1022:	  strcpy (file, dir);
    #####: 1023:	  file[dirlen] = '/';
    #####: 1024:	  strcpy (file + dirlen + needs_slash, namep);
    #####: 1025:	  namep += namelen + 1;
    #####: 1026:	  status &= grepfile (file, &child);
call    0 never executed
        -: 1027:	}
    #####: 1028:      out_file -= !no_filenames;
    #####: 1029:      if (file)
branch  0 never executed
branch  1 never executed
    #####: 1030:        free (file);
    #####: 1031:      free (name_space);
        -: 1032:    }
        -: 1033:
    #####: 1034:  return status;
        -: 1035:}
        -: 1036:
        -: 1037:static void
function usage called 2 returned 0% blocks executed 33%
        2: 1038:usage(status)
        -: 1039:int status;
        -: 1040:{
        2: 1041:  if (status != 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -: 1042:    {
        2: 1043:      fprintf (stderr, _("Usage: %s [OPTION]... PATTERN [FILE]...\n"), prog);
call    0 returned 2
        2: 1044:      fprintf (stderr, _("Try `%s --help' for more information.\n"), prog);
call    0 returned 2
        -: 1045:    }
        -: 1046:  else
        -: 1047:    {
    #####: 1048:      printf (_("Usage: %s [OPTION]... PATTERN [FILE] ...\n"), prog);
call    0 never executed
    #####: 1049:      printf (_("\
call    0 never executed
        -: 1050:Search for PATTERN in each FILE or standard input.\n\
        -: 1051:Example: %s -i 'hello.*world' menu.h main.c\n\
        -: 1052:\n\
        -: 1053:Regexp selection and interpretation:\n"), prog);
    #####: 1054:      printf (_("\
call    0 never executed
        -: 1055:  -E, --extended-regexp     PATTERN is an extended regular expression\n\
        -: 1056:  -F, --fixed-strings       PATTERN is a set of newline-separated strings\n\
        -: 1057:  -G, --basic-regexp        PATTERN is a basic regular expression\n"));
    #####: 1058:      printf (_("\
call    0 never executed
        -: 1059:  -e, --regexp=PATTERN      use PATTERN as a regular expression\n\
        -: 1060:  -f, --file=FILE           obtain PATTERN from FILE\n\
        -: 1061:  -i, --ignore-case         ignore case distinctions\n\
        -: 1062:  -w, --word-regexp         force PATTERN to match only whole words\n\
        -: 1063:  -x, --line-regexp         force PATTERN to match only whole lines\n\
        -: 1064:  -z, --null-data           a data line ends in 0 byte, not newline\n"));
    #####: 1065:      printf (_("\
call    0 never executed
        -: 1066:\n\
        -: 1067:Miscellaneous:\n\
        -: 1068:  -s, --no-messages         suppress error messages\n\
        -: 1069:  -v, --invert-match        select non-matching lines\n\
        -: 1070:  -V, --version             print version information and exit\n\
        -: 1071:      --help                display this help and exit\n\
        -: 1072:      --mmap                use memory-mapped input if possible\n"));
    #####: 1073:      printf (_("\
call    0 never executed
        -: 1074:\n\
        -: 1075:Output control:\n\
        -: 1076:  -b, --byte-offset         print the byte offset with output lines\n\
        -: 1077:  -n, --line-number         print line number with output lines\n\
        -: 1078:  -H, --with-filename       print the filename for each match\n\
        -: 1079:  -h, --no-filename         suppress the prefixing filename on output\n\
        -: 1080:  -q, --quiet, --silent     suppress all normal output\n\
        -: 1081:  -a, --text                do not suppress binary output\n\
        -: 1082:  -d, --directories=ACTION  how to handle directories\n\
        -: 1083:                            ACTION is 'read', 'recurse', or 'skip'.\n\
        -: 1084:  -r, --recursive           equivalent to --directories=recurse.\n\
        -: 1085:  -L, --files-without-match only print FILE names containing no match\n\
        -: 1086:  -l, --files-with-matches  only print FILE names containing matches\n\
        -: 1087:  -c, --count               only print a count of matching lines per FILE\n\
        -: 1088:  -Z, --null                print 0 byte after FILE name\n"));
    #####: 1089:      printf (_("\
call    0 never executed
        -: 1090:\n\
        -: 1091:Context control:\n\
        -: 1092:  -B, --before-context=NUM  print NUM lines of leading context\n\
        -: 1093:  -A, --after-context=NUM   print NUM lines of trailing context\n\
        -: 1094:  -C, --context[=NUM]       print NUM (default 2) lines of output context\n\
        -: 1095:                            unless overridden by -A or -B\n\
        -: 1096:  -NUM                      same as --context=NUM\n\
        -: 1097:  -U, --binary              do not strip CR characters at EOL (MSDOS)\n\
        -: 1098:  -u, --unix-byte-offsets   report offsets as if CRs were not there (MSDOS)\n\
        -: 1099:\n\
        -: 1100:`egrep' means `grep -E'.  `fgrep' means `grep -F'.\n\
        -: 1101:With no FILE, or when FILE is -, read standard input.  If less than\n\
        -: 1102:two FILEs given, assume -h.  Exit status is 0 if match, 1 if no match,\n\
        -: 1103:and 2 if trouble.\n"));
    #####: 1104:      printf (_("\nReport bugs to <bug-gnu-utils@gnu.org>.\n"));
call    0 never executed
        -: 1105:    }
        2: 1106:  exit (status);
        -: 1107:}
        -: 1108:
        -: 1109:/* Set the matcher to M, reporting any conflicts.  */
        -: 1110:static void
function setmatcher called 442 returned 99% blocks executed 100%
      442: 1111:setmatcher (m)
        -: 1112:     char const *m;
        -: 1113:{
      442: 1114:  if (matcher && strcmp (matcher, m) != 0)
branch  0 taken 4 (fallthrough)
branch  1 taken 438
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        4: 1115:    fatal (_("conflicting matchers specified"), 0);
call    0 returned 0
      438: 1116:  matcher = m;
      438: 1117:}
        -: 1118:
        -: 1119:/* Go through the matchers vector and look for the specified matcher.
        -: 1120:   If we find it, install it in compile and execute, and return 1.  */
        -: 1121:static int
function install_matcher called 786 returned 100% blocks executed 86%
      786: 1122:install_matcher (name)
        -: 1123:     char const *name;
        -: 1124:{
        -: 1125:  int i;
        -: 1126:#ifdef HAVE_SETRLIMIT
        -: 1127:  struct rlimit rlim;
        -: 1128:#endif
        -: 1129:
     1833: 1130:  for (i = 0; matchers[i].name; ++i)
branch  0 taken 1833
branch  1 taken 0 (fallthrough)
     1833: 1131:    if (strcmp (name, matchers[i].name) == 0)
branch  0 taken 786 (fallthrough)
branch  1 taken 1047
        -: 1132:      {
      786: 1133:	compile = matchers[i].compile;
      786: 1134:	execute = matchers[i].execute;
        -: 1135:#if HAVE_SETRLIMIT && defined(RLIMIT_STACK)
        -: 1136:	/* I think every platform needs to do this, so that regex.c
        -: 1137:	   doesn't oveflow the stack.  The default value of
        -: 1138:	   `re_max_failures' is too large for some platforms: it needs
        -: 1139:	   more than 3MB-large stack.
        -: 1140:
        -: 1141:	   The test for HAVE_SETRLIMIT should go into `configure'.  */
        -: 1142:	if (!getrlimit (RLIMIT_STACK, &rlim))
        -: 1143:	  {
        -: 1144:	    long newlim;
        -: 1145:	    extern long int re_max_failures; /* from regex.c */
        -: 1146:
        -: 1147:	    /* Approximate the amount regex.c needs, plus some more.  */
        -: 1148:	    newlim = re_max_failures * 2 * 20 * sizeof (char *);
        -: 1149:	    if (newlim > rlim.rlim_max)
        -: 1150:	      {
        -: 1151:		newlim = rlim.rlim_max;
        -: 1152:		re_max_failures = newlim / (2 * 20 * sizeof (char *));
        -: 1153:	      }
        -: 1154:	    if (rlim.rlim_cur < newlim)
        -: 1155:	      rlim.rlim_cur = newlim;
        -: 1156:
        -: 1157:	    setrlimit (RLIMIT_STACK, &rlim);
        -: 1158:	  }
        -: 1159:#endif
      786: 1160:	return 1;
        -: 1161:      }
    #####: 1162:  return 0;
        -: 1163:}
        -: 1164:
        -: 1165:/* Find the white-space-separated options specified by OPTIONS, and
        -: 1166:   using BUF to store copies of these options, set ARGV[0], ARGV[1],
        -: 1167:   etc. to the option copies.  Return the number N of options found.
        -: 1168:   Do not set ARGV[N] to NULL.  If ARGV is NULL, do not store ARGV[0]
        -: 1169:   etc.  Backslash can be used to escape whitespace (and backslashes).  */
        -: 1170:static int
function prepend_args called 0 returned 0% blocks executed 0%
    #####: 1171:prepend_args (options, buf, argv)
        -: 1172:     char const *options;
        -: 1173:     char *buf;
        -: 1174:     char **argv;
        -: 1175:{
    #####: 1176:  char const *o = options;
    #####: 1177:  char *b = buf;
    #####: 1178:  int n = 0;
        -: 1179:
        -: 1180:  for (;;)
        -: 1181:    {
    #####: 1182:      while (ISSPACE ((unsigned char) *o))
branch  0 never executed
branch  1 never executed
    #####: 1183:	o++;
    #####: 1184:      if (!*o)
branch  0 never executed
branch  1 never executed
    #####: 1185:	return n;
    #####: 1186:      if (argv)
branch  0 never executed
branch  1 never executed
    #####: 1187:	argv[n] = b;
    #####: 1188:      n++;
        -: 1189:
        -: 1190:      do
    #####: 1191:	if ((*b++ = *o++) == '\\' && *o)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1192:	  b[-1] = *o++;
    #####: 1193:      while (*o && ! ISSPACE ((unsigned char) *o));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1194:
    #####: 1195:      *b++ = '\0';
        -: 1196:    }
        -: 1197:}
        -: 1198:
        -: 1199:/* Prepend the whitespace-separated options in OPTIONS to the argument
        -: 1200:   vector of a main program with argument count *PARGC and argument
        -: 1201:   vector *PARGV.  */
        -: 1202:static void
function prepend_default_options called 809 returned 100% blocks executed 22%
      809: 1203:prepend_default_options (options, pargc, pargv)
        -: 1204:     char const *options;
        -: 1205:     int *pargc;
        -: 1206:     char ***pargv;
        -: 1207:{
      809: 1208:  if (options)
branch  0 taken 0 (fallthrough)
branch  1 taken 809
    #####: 1209:    {
    #####: 1210:      char *buf = xmalloc (strlen (options) + 1);
call    0 never executed
    #####: 1211:      int prepended = prepend_args (options, buf, (char **) NULL);
call    0 never executed
    #####: 1212:      int argc = *pargc;
    #####: 1213:      char * const *argv = *pargv;
    #####: 1214:      char **pp = (char **) xmalloc ((prepended + argc + 1) * sizeof *pp);
call    0 never executed
    #####: 1215:      *pargc = prepended + argc;
    #####: 1216:      *pargv = pp;
    #####: 1217:      *pp++ = *argv++;
    #####: 1218:      pp += prepend_args (options, buf, pp);
call    0 never executed
    #####: 1219:      while ((*pp++ = *argv++))
branch  0 never executed
branch  1 never executed
    #####: 1220:	continue;
        -: 1221:    }
      809: 1222:}
        -: 1223:
        -: 1224:int
function main called 809 returned 0% blocks executed 80%
      809: 1225:main (argc, argv)
        -: 1226:     int argc;
        -: 1227:     char *argv[];
        -: 1228:{
        -: 1229:  char *keys;
        -: 1230:  size_t keycc, oldcc, keyalloc;
        -: 1231:  int with_filenames;
        -: 1232:  int opt, cc, status;
        -: 1233:  unsigned digit_args_val, default_context;
        -: 1234:  FILE *fp;
        -: 1235:  extern char *optarg;
        -: 1236:  extern int optind;
        -: 1237:
        -: 1238:  initialize_main (&argc, &argv);
        -: 1239:  /* add this line for diff between *.c and *.int.c */
      809: 1240:  argv[0] = "target3";
        -: 1241:  
      809: 1242:  prog = argv[0];
      809: 1243:  if (prog && strrchr (prog, '/'))
branch  0 taken 809 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 809
    #####: 1244:    prog = strrchr (prog, '/') + 1;
        -: 1245:
        -: 1246:#if defined(__MSDOS__) || defined(_WIN32)
        -: 1247:  /* DOS and MS-Windows use backslashes as directory separators, and usually
        -: 1248:     have an .exe suffix.  They also have case-insensitive filesystems.  */
        -: 1249:  if (prog)
        -: 1250:    {
        -: 1251:      char *p = prog;
        -: 1252:      char *bslash = strrchr (argv[0], '\\');
        -: 1253:
        -: 1254:      if (bslash && bslash >= prog) /* for mixed forward/backslash case */
        -: 1255:	prog = bslash + 1;
        -: 1256:      else if (prog == argv[0]
        -: 1257:	       && argv[0][0] && argv[0][1] == ':') /* "c:progname" */
        -: 1258:	prog = argv[0] + 2;
        -: 1259:
        -: 1260:      /* Collapse the letter-case, so `strcmp' could be used hence.  */
        -: 1261:      for ( ; *p; p++)
        -: 1262:	if (*p >= 'A' && *p <= 'Z')
        -: 1263:	  *p += 'a' - 'A';
        -: 1264:
        -: 1265:      /* Remove the .exe extension, if any.  */
        -: 1266:      if ((p = strrchr (prog, '.')) && strcmp (p, ".exe") == 0)
        -: 1267:	*p = '\0';
        -: 1268:    }
        -: 1269:#endif
        -: 1270:
      809: 1271:  keys = NULL;
      809: 1272:  keycc = 0;
      809: 1273:  with_filenames = 0;
      809: 1274:  eolbyte = '\n';
      809: 1275:  filename_mask = ~0;
        -: 1276:
        -: 1277:  /* The value -1 means to use DEFAULT_CONTEXT. */
      809: 1278:  out_after = out_before = -1;
        -: 1279:  /* Default before/after context: chaged by -C/-NUM options */
      809: 1280:  default_context = 0;
        -: 1281:  /* Accumulated value of individual digits in a -NUM option */
      809: 1282:  digit_args_val = 0;
        -: 1283:
        -: 1284:
        -: 1285:/* Internationalization. */
        -: 1286:#if HAVE_SETLOCALE
      809: 1287:  setlocale (LC_ALL, "");
call    0 returned 809
        -: 1288:#endif
        -: 1289:#if ENABLE_NLS
      809: 1290:  bindtextdomain (PACKAGE, LOCALEDIR);
call    0 returned 809
      809: 1291:  textdomain (PACKAGE);
call    0 returned 809
        -: 1292:#endif
        -: 1293:
      809: 1294:  prepend_default_options (getenv ("GREP_OPTIONS"), &argc, &argv);
call    0 returned 809
call    1 returned 809
        -: 1295:
     1587: 1296:  while ((opt = getopt_long (argc, argv, short_options, long_options, NULL))
call    0 returned 1587
     1587: 1297:	 != -1)
branch  0 taken 800
branch  1 taken 787 (fallthrough)
      800: 1298:    switch (opt)
branch  0 taken 14
branch  1 taken 3
branch  2 taken 3
branch  3 taken 1
branch  4 taken 249
branch  5 taken 7
branch  6 taken 182
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 1
branch 11 taken 4
branch 12 taken 0
branch 13 taken 44
branch 14 taken 36
branch 15 taken 0
branch 16 taken 18
branch 17 taken 15
branch 18 taken 43
branch 19 taken 59
branch 20 taken 12
branch 21 taken 11
branch 22 taken 39
branch 23 taken 1
branch 24 taken 0
branch 25 taken 1
branch 26 taken 53
branch 27 taken 1
branch 28 taken 1
branch 29 taken 0
branch 30 taken 0
branch 31 taken 0
branch 32 taken 2
        -: 1299:      {
       14: 1300:      case '0':
        -: 1301:      case '1':
        -: 1302:      case '2':
        -: 1303:      case '3':
        -: 1304:      case '4':
        -: 1305:      case '5':
        -: 1306:      case '6':
        -: 1307:      case '7':
        -: 1308:      case '8':
        -: 1309:      case '9':
       14: 1310:	digit_args_val = 10 * digit_args_val + opt - '0';
       14: 1311:	default_context = digit_args_val;
       14: 1312:	break;
        3: 1313:      case 'A':
        3: 1314:	if (optarg)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 1315:	  {
        3: 1316:	    if (ck_atoi (optarg, &out_after))
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1: 1317:	      fatal (_("invalid context length argument"), 0);
call    0 returned 0
        -: 1318:	  }
        2: 1319:	break;
        3: 1320:      case 'B':
        3: 1321:	if (optarg)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 1322:	  {
        3: 1323:	    if (ck_atoi (optarg, &out_before))
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1: 1324:	      fatal (_("invalid context length argument"), 0);
call    0 returned 0
        -: 1325:	  }
        2: 1326:	break;
        1: 1327:      case 'C':
        -: 1328:	/* Set output match context, but let any explicit leading or
        -: 1329:	   trailing amount specified with -A or -B stand. */
        1: 1330:	if (optarg)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1331:	  {
    #####: 1332:	    if (ck_atoi (optarg, &default_context))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1333:	      fatal (_("invalid context length argument"), 0);
call    0 never executed
        -: 1334:	  }
        -: 1335:	else
        1: 1336:	  default_context = 2;
        1: 1337:	break;
      249: 1338:      case 'E':
      249: 1339:	setmatcher ("egrep");
call    0 returned 248
      248: 1340:	break;
        7: 1341:      case 'F':
        7: 1342:	setmatcher ("fgrep");
call    0 returned 6
        6: 1343:	break;
      182: 1344:      case 'G':
      182: 1345:	setmatcher ("grep");
call    0 returned 181
      181: 1346:	break;
    #####: 1347:      case 'H':
    #####: 1348:	with_filenames = 1;
    #####: 1349:	break;
    #####: 1350:      case 'U':
        -: 1351:#if O_BINARY
        -: 1352:	dos_use_file_type = DOS_BINARY;
        -: 1353:#endif
    #####: 1354:	break;
    #####: 1355:      case 'u':
        -: 1356:#if O_BINARY
        -: 1357:	dos_report_unix_offset = 1;
        -: 1358:#endif
    #####: 1359:	break;
        1: 1360:      case 'V':
        1: 1361:	show_version = 1;
        1: 1362:	break;
        4: 1363:      case 'X':
        4: 1364:	setmatcher (optarg);
call    0 returned 3
        3: 1365:	break;
    #####: 1366:      case 'a':
    #####: 1367:	always_text = 1;
    #####: 1368:	break;
       44: 1369:      case 'b':
       44: 1370:	out_byte = 1;
       44: 1371:	break;
       36: 1372:      case 'c':
       36: 1373:	out_quiet = 1;
       36: 1374:	count_matches = 1;
       36: 1375:	break;
    #####: 1376:      case 'd':
    #####: 1377:	if (strcmp (optarg, "read") == 0)
branch  0 never executed
branch  1 never executed
    #####: 1378:	  directories = READ_DIRECTORIES;
    #####: 1379:	else if (strcmp (optarg, "skip") == 0)
branch  0 never executed
branch  1 never executed
    #####: 1380:	  directories = SKIP_DIRECTORIES;
    #####: 1381:	else if (strcmp (optarg, "recurse") == 0)
branch  0 never executed
branch  1 never executed
    #####: 1382:	  directories = RECURSE_DIRECTORIES;
        -: 1383:	else
    #####: 1384:	  fatal (_("unknown directories method"), 0);
call    0 never executed
    #####: 1385:	break;
       18: 1386:      case 'e':
       18: 1387:	cc = strlen (optarg);
       18: 1388:	keys = xrealloc (keys, keycc + cc + 1);
call    0 returned 18
       18: 1389:	strcpy (&keys[keycc], optarg);
       18: 1390:	keycc += cc;
       18: 1391:	keys[keycc++] = '\n';
       18: 1392:	break;
       15: 1393:      case 'f':
      15*: 1394:	fp = strcmp (optarg, "-") != 0 ? fopen (optarg, "r") : stdin;
branch  0 taken 15 (fallthrough)
branch  1 taken 0
call    2 returned 15
       15: 1395:	if (!fp)
branch  0 taken 14 (fallthrough)
branch  1 taken 1
       14: 1396:	  fatal (optarg, errno);
call    0 returned 0
        2: 1397:	for (keyalloc = 1; keyalloc <= keycc + 1; keyalloc *= 2)
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        -: 1398:	  ;
        1: 1399:	keys = xrealloc (keys, keyalloc);
call    0 returned 1
        1: 1400:	oldcc = keycc;
       20: 1401:	while (!feof (fp)
call    0 returned 20
       20: 1402:	       && (cc = fread (keys + keycc, 1, keyalloc - 1 - keycc, fp)) > 0)
branch  0 taken 19 (fallthrough)
branch  1 taken 1
call    2 returned 19
branch  3 taken 19
branch  4 taken 0 (fallthrough)
        -: 1403:	  {
       19: 1404:	    keycc += cc;
       19: 1405:	    if (keycc == keyalloc - 1)
branch  0 taken 18 (fallthrough)
branch  1 taken 1
       18: 1406:	      keys = xrealloc (keys, keyalloc *= 2);
call    0 returned 18
        -: 1407:	  }
        1: 1408:	if (fp != stdin)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1409:	  fclose(fp);
call    0 returned 1
        -: 1410:	/* Append final newline if file ended in non-newline. */
        1: 1411:	if (oldcc != keycc && keys[keycc - 1] != '\n')
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1412:	  keys[keycc++] = '\n';
        1: 1413:	break;
       43: 1414:      case 'h':
       43: 1415:	no_filenames = 1;
       43: 1416:	break;
       59: 1417:      case 'i':
        -: 1418:      case 'y':			/* For old-timers . . . */
       59: 1419:	match_icase = 1;
       59: 1420:	break;
       12: 1421:      case 'L':
        -: 1422:	/* Like -l, except list files that don't contain matches.
        -: 1423:	   Inspired by the same option in Hume's gre. */
       12: 1424:	out_quiet = 1;
       12: 1425:	list_files = -1;
       12: 1426:	done_on_match = 1;
       12: 1427:	break;
       11: 1428:      case 'l':
       11: 1429:	out_quiet = 1;
       11: 1430:	list_files = 1;
       11: 1431:	done_on_match = 1;
       11: 1432:	break;
       39: 1433:      case 'n':
       39: 1434:	out_line = 1;
       39: 1435:	break;
        1: 1436:      case 'q':
        1: 1437:	done_on_match = 1;
        1: 1438:	out_quiet = 1;
        1: 1439:	break;
    #####: 1440:      case 'r':
    #####: 1441:	directories = RECURSE_DIRECTORIES;
    #####: 1442:	break;
        1: 1443:      case 's':
        1: 1444:	suppress_errors = 1;
        1: 1445:	break;
       53: 1446:      case 'v':
       53: 1447:	out_invert = 1;
       53: 1448:	break;
        1: 1449:      case 'w':
        1: 1450:	match_words = 1;
        1: 1451:	break;
        1: 1452:      case 'x':
        1: 1453:	match_lines = 1;
        1: 1454:	break;
    #####: 1455:      case 'Z':
    #####: 1456:	filename_mask = 0;
    #####: 1457:	break;
    #####: 1458:      case 'z':
    #####: 1459:	eolbyte = '\0';
    #####: 1460:	break;
    #####: 1461:      case 0:
        -: 1462:	/* long options */
    #####: 1463:	break;
        2: 1464:      default:
        2: 1465:	usage (2);
call    0 returned 0
        -: 1466:	break;
        -: 1467:      }
        -: 1468:
      787: 1469:  if (out_after < 0)
branch  0 taken 785 (fallthrough)
branch  1 taken 2
      785: 1470:    out_after = default_context;
      787: 1471:  if (out_before < 0)
branch  0 taken 785 (fallthrough)
branch  1 taken 2
      785: 1472:    out_before = default_context;
        -: 1473:
      787: 1474:  if (! matcher)
branch  0 taken 353 (fallthrough)
branch  1 taken 434
      353: 1475:    matcher = "grep";
        -: 1476:
      787: 1477:  if (show_version)
branch  0 taken 1 (fallthrough)
branch  1 taken 786
        -: 1478:    {
        1: 1479:      printf (_("%s (GNU grep) %s\n"), matcher, VERSION);
call    0 returned 1
        1: 1480:      printf ("\n");
call    0 returned 1
        1: 1481:      printf (_("\
call    0 returned 1
        -: 1482:Copyright (C) 1988, 1992-1998, 1999 Free Software Foundation, Inc.\n"));
        1: 1483:      printf (_("\
call    0 returned 1
        -: 1484:This is free software; see the source for copying conditions. There is NO\n\
        -: 1485:warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n"));
        1: 1486:      printf ("\n");
call    0 returned 1
        1: 1487:      exit (0);
call    0 returned 0
        -: 1488:    }
        -: 1489:
      786: 1490:  if (show_help)
branch  0 taken 0 (fallthrough)
branch  1 taken 786
    #####: 1491:    usage (0);
call    0 never executed
        -: 1492:
      786: 1493:  if (keys)
branch  0 taken 6 (fallthrough)
branch  1 taken 780
        -: 1494:    {
        6: 1495:      if (keycc == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1496:	/* No keys were specified (e.g. -f /dev/null).  Match nothing.  */
    #####: 1497:        out_invert ^= 1;
        -: 1498:      else
        -: 1499:	/* Strip trailing newline. */
        6: 1500:        --keycc;
        -: 1501:    }
        -: 1502:  else
      780: 1503:    if (optind < argc)
branch  0 taken 780 (fallthrough)
branch  1 taken 0
        -: 1504:      {
      780: 1505:	keys = argv[optind++];
      780: 1506:	keycc = strlen (keys);
        -: 1507:      }
        -: 1508:    else
    #####: 1509:      usage (2);
call    0 never executed
        -: 1510:
     786*: 1511:  if (!install_matcher (matcher) && !install_matcher ("default"))
call    0 returned 786
branch  1 taken 0 (fallthrough)
branch  2 taken 786
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1512:    abort ();
call    0 never executed
        -: 1513:
      786: 1514:  (*compile)(keys, keycc);
call    0 returned 727
        -: 1515:
      727: 1516:  if ((argc - optind > 1 && !no_filenames) || with_filenames)
branch  0 taken 489 (fallthrough)
branch  1 taken 238
branch  2 taken 17 (fallthrough)
branch  3 taken 472
branch  4 taken 0 (fallthrough)
branch  5 taken 255
      472: 1517:    out_file = 1;
        -: 1518:
        -: 1519:#if O_BINARY
        -: 1520:  /* Output is set to binary mode because we shouldn't convert
        -: 1521:     NL to CR-LF pairs, especially when grepping binary files.  */
        -: 1522:  if (!isatty (1))
        -: 1523:    SET_BINARY (1);
        -: 1524:#endif
        -: 1525:
        -: 1526:
      727: 1527:  if (optind < argc)
branch  0 taken 719 (fallthrough)
branch  1 taken 8
        -: 1528:    {
      719: 1529:	status = 1;
        -: 1530:	do
        -: 1531:	{
     1696: 1532:	  char *file = argv[optind];
     1696: 1533:	  status &= grepfile (strcmp (file, "-") == 0 ? (char *) NULL : file,
branch  0 taken 1695 (fallthrough)
branch  1 taken 1
call    2 returned 1696
        -: 1534:			      &stats_base);
        -: 1535:	}
     1696: 1536:	while ( ++optind < argc);
branch  0 taken 977
branch  1 taken 719
        -: 1537:    }
        -: 1538:  else
        8: 1539:    status = grepfile ((char *) NULL, &stats_base);
call    0 returned 8
        -: 1540:
      727: 1541:  if (fclose (stdout) == EOF)
call    0 returned 727
branch  1 taken 0 (fallthrough)
branch  2 taken 727
    #####: 1542:    error (_("writing output"), errno);
call    0 never executed
        -: 1543:
      727: 1544:  exit (errseen ? 2 : status);
branch  0 taken 720 (fallthrough)
branch  1 taken 7
        -: 1545:}
        -: 1546:/* dfa.c - deterministic extended regexp routines for GNU
        -: 1547:   Copyright (C) 1988, 1998 Free Software Foundation, Inc.
        -: 1548:
        -: 1549:   This program is free software; you can redistribute it and/or modify
        -: 1550:   it under the terms of the GNU General Public License as published by
        -: 1551:   the Free Software Foundation; either version 2, or (at your option)
        -: 1552:   any later version.
        -: 1553:
        -: 1554:   This program is distributed in the hope that it will be useful,
        -: 1555:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 1556:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 1557:   GNU General Public License for more details.
        -: 1558:
        -: 1559:   You should have received a copy of the GNU General Public License
        -: 1560:   along with this program; if not, write to the Free Software
        -: 1561:   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA */
        -: 1562:
        -: 1563:/* Written June, 1988 by Mike Haertel
        -: 1564:   Modified July, 1988 by Arthur David Olson to assist BMG speedups  */
        -: 1565:
        -: 1566:#ifdef HAVE_CONFIG_H
        -: 1567:#if flag_config==0
        -: 1568:#include <config.h>
        -: 1569:#define flag_config 1
        -: 1570:#endif
        -: 1571:#endif
        -: 1572:
        -: 1573:#include <assert.h>
        -: 1574:#include <ctype.h>
        -: 1575:/*#include <stdio.h>*/
        -: 1576:
        -: 1577:/*#include <sys/types.h>*/
        -: 1578:#ifdef STDC_HEADERS
        -: 1579:#include <stdlib.h>
        -: 1580:#define flag_stdlib 1
        -: 1581:#else
        -: 1582:extern char *calloc(), *malloc(), *realloc();
        -: 1583:extern void free();
        -: 1584:#endif
        -: 1585:
        -: 1586:#if defined(HAVE_STRING_H) || defined(STDC_HEADERS)
        -: 1587:#include <string.h>
        -: 1588:#define flag_string 1
        -: 1589:#undef index
        -: 1590:#define index strchr
        -: 1591:#else
        -: 1592:#include <strings.h>
        -: 1593:#define flag_strings 1
        -: 1594:#endif
        -: 1595:
        -: 1596:#ifndef DEBUG	/* use the same approach as regex.c */
        -: 1597:#undef assert
        -: 1598:#define assert(e)
        -: 1599:#endif /* DEBUG */
        -: 1600:
        -: 1601:#ifndef isgraph
        -: 1602:#define isgraph(C) (isprint(C) && !isspace(C))
        -: 1603:#endif
        -: 1604:#undef ISALPHA
        -: 1605:#undef ISUPPER
        -: 1606:#undef ISLOWER
        -: 1607:#undef ISDIGIT
        -: 1608:#undef ISXDIGIT
        -: 1609:#undef ISSPACE
        -: 1610:#undef ISPUNCT
        -: 1611:#undef ISALNUM
        -: 1612:#undef ISPRINT
        -: 1613:#undef ISGRAPH
        -: 1614:#undef ISCNTRL
        -: 1615:
        -: 1616:#if defined (STDC_HEADERS) || (!defined (isascii) && !defined (HAVE_ISASCII))
        -: 1617:#define ISALPHA(C) isalpha(C)
        -: 1618:#define ISUPPER(C) isupper(C)
        -: 1619:#define ISLOWER(C) islower(C)
        -: 1620:#define ISDIGIT(C) isdigit(C)
        -: 1621:#define ISXDIGIT(C) isxdigit(C)
        -: 1622:#define ISSPACE(C) isspace(C)
        -: 1623:#define ISPUNCT(C) ispunct(C)
        -: 1624:#define ISALNUM(C) isalnum(C)
        -: 1625:#define ISPRINT(C) isprint(C)
        -: 1626:#define ISGRAPH(C) isgraph(C)
        -: 1627:#define ISCNTRL(C) iscntrl(C)
        -: 1628:#else
        -: 1629:#define ISALPHA(C) (isascii(C) && isalpha(C))
        -: 1630:#define ISUPPER(C) (isascii(C) && isupper(C))
        -: 1631:#define ISLOWER(C) (isascii(C) && islower(C))
        -: 1632:#define ISDIGIT(C) (isascii(C) && isdigit(C))
        -: 1633:#define ISXDIGIT(C) (isascii(C) && isxdigit(C))
        -: 1634:#define ISSPACE(C) (isascii(C) && isspace(C))
        -: 1635:#define ISPUNCT(C) (isascii(C) && ispunct(C))
        -: 1636:#define ISALNUM(C) (isascii(C) && isalnum(C))
        -: 1637:#define ISPRINT(C) (isascii(C) && isprint(C))
        -: 1638:#define ISGRAPH(C) (isascii(C) && isgraph(C))
        -: 1639:#define ISCNTRL(C) (isascii(C) && iscntrl(C))
        -: 1640:#endif
        -: 1641:
        -: 1642:/* If we (don't) have I18N.  */
        -: 1643:/* glibc defines _ */
        -: 1644:#ifndef _
        -: 1645:# ifdef HAVE_LIBINTL_H
        -: 1646:#  include <libintl.h>
        -: 1647:#define flag_libintl 1
        -: 1648:#  ifndef _
        -: 1649:#   define _(Str) gettext (Str)
        -: 1650:#  endif
        -: 1651:# else
        -: 1652:#  define _(Str) (Str)
        -: 1653:# endif
        -: 1654:#endif
        -: 1655:
        -: 1656:#include "regex.h"
        -: 1657:#include "dfa.h"
        -: 1658:
        -: 1659:/* HPUX, define those as macros in sys/param.h */
        -: 1660:#ifdef setbit
        -: 1661:# undef setbit
        -: 1662:#endif
        -: 1663:#ifdef clrbit
        -: 1664:# undef clrbit
        -: 1665:#endif
        -: 1666:
        -: 1667:static void dfamust PARAMS ((struct dfa *dfa));
        -: 1668:
        -: 1669:static ptr_t xcalloc PARAMS ((size_t n, size_t s));
        -: 1670:static ptr_t xmalloc_1 PARAMS ((size_t n));
        -: 1671:static ptr_t xrealloc_1 PARAMS ((ptr_t p, size_t n));
        -: 1672:#ifdef DEBUG
        -: 1673:static void prtok PARAMS ((token t));
        -: 1674:#endif
        -: 1675:static int tstbit PARAMS ((int b, charclass c));
        -: 1676:static void setbit PARAMS ((int b, charclass c));
        -: 1677:static void clrbit PARAMS ((int b, charclass c));
        -: 1678:static void copyset PARAMS ((charclass src, charclass dst));
        -: 1679:static void zeroset PARAMS ((charclass s));
        -: 1680:static void notset PARAMS ((charclass s));
        -: 1681:static int equal PARAMS ((charclass s1, charclass s2));
        -: 1682:static int charclass_index PARAMS ((charclass s));
        -: 1683:static int looking_at PARAMS ((const char *s));
        -: 1684:static token lex PARAMS ((void));
        -: 1685:static void addtok PARAMS ((token t));
        -: 1686:static void atom PARAMS ((void));
        -: 1687:static int nsubtoks PARAMS ((int tindex));
        -: 1688:static void copytoks PARAMS ((int tindex, int ntokens));
        -: 1689:static void closure PARAMS ((void));
        -: 1690:static void branch PARAMS ((void));
        -: 1691:static void regexp PARAMS ((int toplevel));
        -: 1692:static void copy PARAMS ((position_set *src, position_set *dst));
        -: 1693:static void insert PARAMS ((position p, position_set *s));
        -: 1694:static void merge PARAMS ((position_set *s1, position_set *s2, position_set *m));
        -: 1695:static void delete PARAMS ((position p, position_set *s));
        -: 1696:static int state_index PARAMS ((struct dfa *d, position_set *s,
        -: 1697:			  int newline, int letter));
        -: 1698:static void build_state PARAMS ((int s, struct dfa *d));
        -: 1699:static void build_state_zero PARAMS ((struct dfa *d));
        -: 1700:static char *icatalloc PARAMS ((char *old, char *new));
        -: 1701:static char *icpyalloc PARAMS ((char *string));
        -: 1702:static char *istrstr PARAMS ((char *lookin, char *lookfor));
        -: 1703:static void ifree PARAMS ((char *cp));
        -: 1704:static void freelist PARAMS ((char **cpp));
        -: 1705:static char **enlist PARAMS ((char **cpp, char *new, size_t len));
        -: 1706:static char **comsubs PARAMS ((char *left, char *right));
        -: 1707:static char **addlists PARAMS ((char **old, char **new));
        -: 1708:static char **inboth PARAMS ((char **left, char **right));
        -: 1709:
        -: 1710:static ptr_t
function xcalloc called 1730 returned 100% blocks executed 75%
     1730: 1711:xcalloc(n, s)
        -: 1712:     size_t n;
        -: 1713:     size_t s;
        -: 1714:{
     1730: 1715:  ptr_t r = calloc(n, s);
        -: 1716:
     1730: 1717:  if (!r)
branch  0 taken 0 (fallthrough)
branch  1 taken 1730
    #####: 1718:    dfaerror(_("Memory exhausted"));
call    0 never executed
     1730: 1719:  return r;
        -: 1720:}
        -: 1721:
        -: 1722:static ptr_t
function xmalloc_1 called 46507 returned 100% blocks executed 75%
    46507: 1723:xmalloc_1(n)
        -: 1724:     size_t n;
        -: 1725:{
    46507: 1726:  ptr_t r = malloc(n);
        -: 1727:
        -: 1728:  assert(n != 0);
    46507: 1729:  if (!r)
branch  0 taken 0 (fallthrough)
branch  1 taken 46507
    #####: 1730:    dfaerror(_("Memory exhausted"));
call    0 never executed
    46507: 1731:  return r;
        -: 1732:}
        -: 1733:
        -: 1734:static ptr_t
function xrealloc_1 called 11917 returned 100% blocks executed 75%
    11917: 1735:xrealloc_1(p, n)
        -: 1736:     ptr_t p;
        -: 1737:     size_t n;
        -: 1738:{
    11917: 1739:  ptr_t r = realloc(p, n);
        -: 1740:
        -: 1741:  assert(n != 0);
    11917: 1742:  if (!r)
branch  0 taken 0 (fallthrough)
branch  1 taken 11917
    #####: 1743:    dfaerror(_("Memory exhausted"));
call    0 never executed
    11917: 1744:  return r;
        -: 1745:}
        -: 1746:
        -: 1747:#define CALLOC(p, t, n) ((p) = (t *) xcalloc((size_t)(n), sizeof (t)))
        -: 1748:#define MALLOC(p, t, n) ((p) = (t *) xmalloc_1((n) * sizeof (t)))
        -: 1749:#define REALLOC(p, t, n) ((p) = (t *) xrealloc_1((ptr_t) (p), (n) * sizeof (t)))
        -: 1750:
        -: 1751:/* Reallocate an array of type t if nalloc is too small for index. */
        -: 1752:#define REALLOC_IF_NECESSARY(p, t, nalloc, index) \
        -: 1753:  if ((index) >= (nalloc))			  \
        -: 1754:    {						  \
        -: 1755:      while ((index) >= (nalloc))		  \
        -: 1756:	(nalloc) *= 2;				  \
        -: 1757:      REALLOC(p, t, nalloc);			  \
        -: 1758:    }
        -: 1759:
        -: 1760:#ifdef DEBUG
        -: 1761:
        -: 1762:static void
        -: 1763:prtok(t)
        -: 1764:     token t;
        -: 1765:{
        -: 1766:  char *s;
        -: 1767:
        -: 1768:  if (t < 0)
        -: 1769:    fprintf(stderr, "END");
        -: 1770:  else if (t < NOTCHAR)
        -: 1771:    fprintf(stderr, "%c", t);
        -: 1772:  else
        -: 1773:    {
        -: 1774:      switch (t)
        -: 1775:	{
        -: 1776:	case EMPTY: s = "EMPTY"; break;
        -: 1777:	case BACKREF: s = "BACKREF"; break;
        -: 1778:	case BEGLINE: s = "BEGLINE"; break;
        -: 1779:	case ENDLINE: s = "ENDLINE"; break;
        -: 1780:	case BEGWORD: s = "BEGWORD"; break;
        -: 1781:	case ENDWORD: s = "ENDWORD"; break;
        -: 1782:	case LIMWORD: s = "LIMWORD"; break;
        -: 1783:	case NOTLIMWORD: s = "NOTLIMWORD"; break;
        -: 1784:	case QMARK: s = "QMARK"; break;
        -: 1785:	case STAR: s = "STAR"; break;
        -: 1786:	case PLUS: s = "PLUS"; break;
        -: 1787:	case CAT: s = "CAT"; break;
        -: 1788:	case OR: s = "OR"; break;
        -: 1789:	case ORTOP: s = "ORTOP"; break;
        -: 1790:	case LPAREN: s = "LPAREN"; break;
        -: 1791:	case RPAREN: s = "RPAREN"; break;
        -: 1792:	default: s = "CSET"; break;
        -: 1793:	}
        -: 1794:      fprintf(stderr, "%s", s);
        -: 1795:    }
        -: 1796:}
        -: 1797:#endif /* DEBUG */
        -: 1798:
        -: 1799:/* Stuff pertaining to charclasses. */
        -: 1800:
        -: 1801:static int
function tstbit called 13595 returned 100% blocks executed 100%
    13595: 1802:tstbit(b, c)
        -: 1803:     int b;
        -: 1804:     charclass c;
        -: 1805:{
    13595: 1806:  return c[b / INTBITS] & 1 << b % INTBITS;
        -: 1807:}
        -: 1808:
        -: 1809:static void
function setbit called 45157 returned 100% blocks executed 100%
    45157: 1810:setbit(b, c)
        -: 1811:     int b;
        -: 1812:     charclass c;
        -: 1813:{
    45157: 1814:  c[b / INTBITS] |= 1 << b % INTBITS;
    45157: 1815:}
        -: 1816:
        -: 1817:static void
function clrbit called 1108 returned 100% blocks executed 100%
     1108: 1818:clrbit(b, c)
        -: 1819:     int b;
        -: 1820:     charclass c;
        -: 1821:{
     1108: 1822:  c[b / INTBITS] &= ~(1 << b % INTBITS);
     1108: 1823:}
        -: 1824:
        -: 1825:static void
function copyset called 8482 returned 100% blocks executed 100%
     8482: 1826:copyset(src, dst)
        -: 1827:     charclass src;
        -: 1828:     charclass dst;
        -: 1829:{
        -: 1830:  int i;
        -: 1831:
    76338: 1832:  for (i = 0; i < CHARCLASS_INTS; ++i)
branch  0 taken 67856
branch  1 taken 8482 (fallthrough)
    67856: 1833:    dst[i] = src[i];
     8482: 1834:}
        -: 1835:
        -: 1836:static void
function zeroset called 11482 returned 100% blocks executed 100%
    11482: 1837:zeroset(s)
        -: 1838:     charclass s;
        -: 1839:{
        -: 1840:  int i;
        -: 1841:
   103338: 1842:  for (i = 0; i < CHARCLASS_INTS; ++i)
branch  0 taken 91856
branch  1 taken 11482 (fallthrough)
    91856: 1843:    s[i] = 0;
    11482: 1844:}
        -: 1845:
        -: 1846:static void
function notset called 103 returned 100% blocks executed 100%
      103: 1847:notset(s)
        -: 1848:     charclass s;
        -: 1849:{
        -: 1850:  int i;
        -: 1851:
      927: 1852:  for (i = 0; i < CHARCLASS_INTS; ++i)
branch  0 taken 824
branch  1 taken 103 (fallthrough)
      824: 1853:    s[i] = ~s[i];
      103: 1854:}
        -: 1855:
        -: 1856:static int
function equal called 999 returned 100% blocks executed 100%
      999: 1857:equal(s1, s2)
        -: 1858:     charclass s1;
        -: 1859:     charclass s2;
        -: 1860:{
        -: 1861:  int i;
        -: 1862:
     3175: 1863:  for (i = 0; i < CHARCLASS_INTS; ++i)
branch  0 taken 3145
branch  1 taken 30 (fallthrough)
     3145: 1864:    if (s1[i] != s2[i])
branch  0 taken 969 (fallthrough)
branch  1 taken 2176
      969: 1865:      return 0;
       30: 1866:  return 1;
        -: 1867:}
        -: 1868:
        -: 1869:/* A pointer to the current dfa is kept here during parsing. */
        -: 1870:static struct dfa *dfa;
        -: 1871:
        -: 1872:/* Find the index of charclass s in dfa->charclasses, or allocate a new charclass. */
        -: 1873:static int
function charclass_index called 516 returned 100% blocks executed 100%
      516: 1874:charclass_index(s)
        -: 1875:     charclass s;
        -: 1876:{
        -: 1877:  int i;
        -: 1878:
     1485: 1879:  for (i = 0; i < dfa->cindex; ++i)
branch  0 taken 999
branch  1 taken 486 (fallthrough)
      999: 1880:    if (equal(s, dfa->charclasses[i]))
call    0 returned 999
branch  1 taken 30 (fallthrough)
branch  2 taken 969
       30: 1881:      return i;
      632: 1882:  REALLOC_IF_NECESSARY(dfa->charclasses, charclass, dfa->calloc, dfa->cindex);
branch  0 taken 146 (fallthrough)
branch  1 taken 340
branch  2 taken 146
branch  3 taken 146 (fallthrough)
call    4 returned 146
      486: 1883:  ++dfa->cindex;
      486: 1884:  copyset(s, dfa->charclasses[i]);
call    0 returned 486
      486: 1885:  return i;
        -: 1886:}
        -: 1887:
        -: 1888:/* Syntax bits controlling the behavior of the lexical analyzer. */
        -: 1889:static reg_syntax_t syntax_bits, syntax_bits_set;
        -: 1890:
        -: 1891:/* Flag for case-folding letters into sets. */
        -: 1892:static int case_fold;
        -: 1893:
        -: 1894:/* End-of-line byte in data.  */
        -: 1895:static unsigned char eolbyte_1;
        -: 1896:
        -: 1897:/* Entry point to set syntax options. */
        -: 1898:void
function dfasyntax called 781 returned 100% blocks executed 100%
      781: 1899:dfasyntax(bits, fold, eol)
        -: 1900:     reg_syntax_t bits;
        -: 1901:     int fold;
        -: 1902:     int eol;
        -: 1903:{
      781: 1904:  syntax_bits_set = 1;
      781: 1905:  syntax_bits = bits;
      781: 1906:  case_fold = fold;
      781: 1907:  eolbyte_1 = eol;
      781: 1908:}
        -: 1909:
        -: 1910:/* Lexical analyzer.  All the dross that deals with the obnoxious
        -: 1911:   GNU Regex syntax bits is located here.  The poor, suffering
        -: 1912:   reader is referred to the GNU Regex documentation for the
        -: 1913:   meaning of the @#%!@#%^!@ syntax bits. */
        -: 1914:
        -: 1915:static char *lexstart;		/* Pointer to beginning of input string. */
        -: 1916:static char *lexptr;		/* Pointer to next input character. */
        -: 1917:static int lexleft;		/* Number of characters remaining. */
        -: 1918:static token lasttok;		/* Previous token returned; initially END. */
        -: 1919:static int laststart;		/* True if we're separated from beginning or (, |
        -: 1920:				   only by zero-width characters. */
        -: 1921:static int parens;		/* Count of outstanding left parens. */
        -: 1922:static int minrep, maxrep;	/* Repeat counts for {m,n}. */
        -: 1923:
        -: 1924:/* Note that characters become unsigned here. */
        -: 1925:#define FETCH(c, eoferr)   	      \
        -: 1926:  {			   	      \
        -: 1927:    if (! lexleft)	   	      \
        -: 1928:      if (eoferr != 0)	   	      \
        -: 1929:	dfaerror(eoferr);  	      \
        -: 1930:      else		   	      \
        -: 1931:	return lasttok = END;	      \
        -: 1932:    (c) = (unsigned char) *lexptr++;  \
        -: 1933:    --lexleft;		   	      \
        -: 1934:  }
        -: 1935:
        -: 1936:#ifdef __STDC__
        -: 1937:#define FUNC(F, P) static int F(int c) { return P(c); }
        -: 1938:#else
        -: 1939:#define FUNC(F, P) static int F(c) int c; { return P(c); }
        -: 1940:#endif
        -: 1941:
function is_alpha called 256 returned 100% blocks executed 100%
      256: 1942:FUNC(is_alpha, ISALPHA)
function is_upper called 256 returned 100% blocks executed 100%
      256: 1943:FUNC(is_upper, ISUPPER)
function is_lower called 256 returned 100% blocks executed 100%
      256: 1944:FUNC(is_lower, ISLOWER)
function is_digit called 256 returned 100% blocks executed 100%
      256: 1945:FUNC(is_digit, ISDIGIT)
function is_xdigit called 256 returned 100% blocks executed 100%
      256: 1946:FUNC(is_xdigit, ISXDIGIT)
function is_space called 256 returned 100% blocks executed 100%
      256: 1947:FUNC(is_space, ISSPACE)
function is_punct called 256 returned 100% blocks executed 100%
      256: 1948:FUNC(is_punct, ISPUNCT)
function is_alnum called 2816 returned 100% blocks executed 100%
     2816: 1949:FUNC(is_alnum, ISALNUM)
function is_print called 256 returned 100% blocks executed 100%
      256: 1950:FUNC(is_print, ISPRINT)
function is_graph called 256 returned 100% blocks executed 100%
      256: 1951:FUNC(is_graph, ISGRAPH)
function is_cntrl called 256 returned 100% blocks executed 100%
      256: 1952:FUNC(is_cntrl, ISCNTRL)
        -: 1953:
function is_blank called 0 returned 0% blocks executed 0%
    #####: 1954:static int is_blank(c)
        -: 1955:int c;
        -: 1956:{
    #####: 1957:   return (c == ' ' || c == '\t');
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1958:}
        -: 1959:
        -: 1960:/* The following list maps the names of the Posix named character classes
        -: 1961:   to predicate functions that determine whether a given character is in
        -: 1962:   the class.  The leading [ has already been eaten by the lexical analyzer. */
        -: 1963:static struct {
        -: 1964:  const char *name;
        -: 1965:  int (*pred) PARAMS ((int));
        -: 1966:} prednames[] = {
        -: 1967:  { ":alpha:]", is_alpha },
        -: 1968:  { ":upper:]", is_upper },
        -: 1969:  { ":lower:]", is_lower },
        -: 1970:  { ":digit:]", is_digit },
        -: 1971:  { ":xdigit:]", is_xdigit },
        -: 1972:  { ":space:]", is_space },
        -: 1973:  { ":punct:]", is_punct },
        -: 1974:  { ":alnum:]", is_alnum },
        -: 1975:  { ":print:]", is_print },
        -: 1976:  { ":graph:]", is_graph },
        -: 1977:  { ":cntrl:]", is_cntrl },
        -: 1978:  { ":blank:]", is_blank },
        -: 1979:  { 0 }
        -: 1980:};
        -: 1981:
        -: 1982:/* Return non-zero if C is a `word-constituent' byte; zero otherwise.  */
        -: 1983:#define IS_WORD_CONSTITUENT(C) (ISALNUM(C) || (C) == '_')
        -: 1984:
        -: 1985:static int
function looking_at called 146 returned 100% blocks executed 75%
      146: 1986:looking_at(s)
        -: 1987:     const char *s;
        -: 1988:{
        -: 1989:  size_t len;
        -: 1990:
      146: 1991:  len = strlen(s);
      146: 1992:  if (lexleft < len)
branch  0 taken 0 (fallthrough)
branch  1 taken 146
    #####: 1993:    return 0;
      146: 1994:  return strncmp(s, lexptr, len) == 0;
        -: 1995:}
        -: 1996:
        -: 1997:static token
function lex called 8019 returned 100% blocks executed 75%
     8019: 1998:lex()
        -: 1999:{
        -: 2000:  token c, c1, c2;
     8019: 2001:  int backslash = 0, invert;
        -: 2002:  charclass ccl;
        -: 2003:  int i;
        -: 2004:
        -: 2005:  /* Basic plan: We fetch a character.  If it's a backslash,
        -: 2006:     we set the backslash flag and go through the loop again.
        -: 2007:     On the plus side, this avoids having a duplicate of the
        -: 2008:     main switch inside the backslash case.  On the minus side,
        -: 2009:     it means that just about every case begins with
        -: 2010:     "if (backslash) ...".  */
     8970: 2011:  for (i = 0; i < 2; ++i)
branch  0 taken 8970
branch  1 taken 0 (fallthrough)
        -: 2012:    {
     8970: 2013:      FETCH(c, 0);
branch  0 taken 780 (fallthrough)
branch  1 taken 8190
     8190: 2014:      switch (c)
branch  0 taken 951
branch  1 taken 122
branch  2 taken 15
branch  3 taken 132
branch  4 taken 3
branch  5 taken 7
branch  6 taken 115
branch  7 taken 4
branch  8 taken 159
branch  9 taken 3
branch 10 taken 247
branch 11 taken 40
branch 12 taken 183
branch 13 taken 185
branch 14 taken 287
branch 15 taken 3
branch 16 taken 283
branch 17 taken 112
branch 18 taken 94
branch 19 taken 9
branch 20 taken 65
branch 21 taken 5171
        -: 2015:	{
      951: 2016:	case '\\':
      951: 2017:	  if (backslash)
branch  0 taken 0 (fallthrough)
branch  1 taken 951
    #####: 2018:	    goto normal_char;
      951: 2019:	  if (lexleft == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 951
    #####: 2020:	    dfaerror(_("Unfinished \\ escape"));
call    0 never executed
      951: 2021:	  backslash = 1;
      951: 2022:	  break;
        -: 2023:
      122: 2024:	case '^':
      122: 2025:	  if (backslash)
branch  0 taken 3 (fallthrough)
branch  1 taken 119
        3: 2026:	    goto normal_char;
      119: 2027:	  if (syntax_bits & RE_CONTEXT_INDEP_ANCHORS
branch  0 taken 59 (fallthrough)
branch  1 taken 60
       59: 2028:	      || lasttok == END
branch  0 taken 28 (fallthrough)
branch  1 taken 31
       28: 2029:	      || lasttok == LPAREN
branch  0 taken 21 (fallthrough)
branch  1 taken 7
       21: 2030:	      || lasttok == OR)
branch  0 taken 20 (fallthrough)
branch  1 taken 1
      118: 2031:	    return lasttok = BEGLINE;
        1: 2032:	  goto normal_char;
        -: 2033:
       15: 2034:	case '$':
       15: 2035:	  if (backslash)
branch  0 taken 3 (fallthrough)
branch  1 taken 12
        3: 2036:	    goto normal_char;
       12: 2037:	  if (syntax_bits & RE_CONTEXT_INDEP_ANCHORS
branch  0 taken 11 (fallthrough)
branch  1 taken 1
       11: 2038:	      || lexleft == 0
branch  0 taken 6 (fallthrough)
branch  1 taken 5
      12*: 2039:	      || (syntax_bits & RE_NO_BK_PARENS
branch  0 taken 0 (fallthrough)
branch  1 taken 6
branch  2 never executed
branch  3 never executed
branch  4 taken 5 (fallthrough)
branch  5 taken 1
    #####: 2040:		  ? lexleft > 0 && *lexptr == ')'
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        6: 2041:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')')
branch  0 taken 5 (fallthrough)
branch  1 taken 1
branch  2 taken 1 (fallthrough)
branch  3 taken 4
branch  4 taken 1 (fallthrough)
branch  5 taken 0
      10*: 2042:	      || (syntax_bits & RE_NO_BK_VBAR
branch  0 taken 0 (fallthrough)
branch  1 taken 5
branch  2 never executed
branch  3 never executed
branch  4 taken 5 (fallthrough)
branch  5 taken 0
    #####: 2043:		  ? lexleft > 0 && *lexptr == '|'
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
       5*: 2044:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|')
branch  0 taken 4 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
branch  4 never executed
branch  5 never executed
        5: 2045:	      || ((syntax_bits & RE_NEWLINE_ALT)
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 2046:	          && lexleft > 0 && *lexptr == '\n'))
branch  0 taken 5 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 5
        7: 2047:	    return lasttok = ENDLINE;
        5: 2048:	  goto normal_char;
        -: 2049:
      132: 2050:	case '1':
        -: 2051:	case '2':
        -: 2052:	case '3':
        -: 2053:	case '4':
        -: 2054:	case '5':
        -: 2055:	case '6':
        -: 2056:	case '7':
        -: 2057:	case '8':
        -: 2058:	case '9':
     132*: 2059:	  if (backslash && !(syntax_bits & RE_NO_BK_REFS))
branch  0 taken 0 (fallthrough)
branch  1 taken 132
branch  2 never executed
branch  3 never executed
        -: 2060:	    {
    #####: 2061:	      laststart = 0;
    #####: 2062:	      return lasttok = BACKREF;
        -: 2063:	    }
      132: 2064:	  goto normal_char;
        -: 2065:
        3: 2066:	case '`':
        3: 2067:	  if (backslash && !(syntax_bits & RE_NO_GNU_OPS))
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3: 2068:	    return lasttok = BEGLINE;	/* FIXME: should be beginning of string */
    #####: 2069:	  goto normal_char;
        -: 2070:
        7: 2071:	case '\'':
        7: 2072:	  if (backslash && !(syntax_bits & RE_NO_GNU_OPS))
branch  0 taken 3 (fallthrough)
branch  1 taken 4
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3: 2073:	    return lasttok = ENDLINE;	/* FIXME: should be end of string */
        4: 2074:	  goto normal_char;
        -: 2075:
      115: 2076:	case '<':
      115: 2077:	  if (backslash && !(syntax_bits & RE_NO_GNU_OPS))
branch  0 taken 114 (fallthrough)
branch  1 taken 1
branch  2 taken 114 (fallthrough)
branch  3 taken 0
      114: 2078:	    return lasttok = BEGWORD;
        1: 2079:	  goto normal_char;
        -: 2080:
        4: 2081:	case '>':
        4: 2082:	  if (backslash && !(syntax_bits & RE_NO_GNU_OPS))
branch  0 taken 1 (fallthrough)
branch  1 taken 3
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 2083:	    return lasttok = ENDWORD;
        3: 2084:	  goto normal_char;
        -: 2085:
      159: 2086:	case 'b':
      159: 2087:	  if (backslash && !(syntax_bits & RE_NO_GNU_OPS))
branch  0 taken 140 (fallthrough)
branch  1 taken 19
branch  2 taken 140 (fallthrough)
branch  3 taken 0
      140: 2088:	    return lasttok = LIMWORD;
       19: 2089:	  goto normal_char;
        -: 2090:
        3: 2091:	case 'B':
        3: 2092:	  if (backslash && !(syntax_bits & RE_NO_GNU_OPS))
branch  0 taken 1 (fallthrough)
branch  1 taken 2
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 2093:	    return lasttok = NOTLIMWORD;
        2: 2094:	  goto normal_char;
        -: 2095:
      247: 2096:	case '?':
      247: 2097:	  if (syntax_bits & RE_LIMITED_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 247
    #####: 2098:	    goto normal_char;
      247: 2099:	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
branch  0 taken 72 (fallthrough)
branch  1 taken 175
       72: 2100:	    goto normal_char;
      175: 2101:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
branch  0 taken 87 (fallthrough)
branch  1 taken 88
branch  2 taken 1 (fallthrough)
branch  3 taken 86
        1: 2102:	    goto normal_char;
      174: 2103:	  return lasttok = QMARK;
        -: 2104:
       40: 2105:	case '*':
       40: 2106:	  if (backslash)
branch  0 taken 26 (fallthrough)
branch  1 taken 14
       26: 2107:	    goto normal_char;
       14: 2108:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
branch  0 taken 13 (fallthrough)
branch  1 taken 1
branch  2 taken 3 (fallthrough)
branch  3 taken 10
        3: 2109:	    goto normal_char;
       11: 2110:	  return lasttok = STAR;
        -: 2111:
      183: 2112:	case '+':
      183: 2113:	  if (syntax_bits & RE_LIMITED_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 183
    #####: 2114:	    goto normal_char;
      183: 2115:	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
branch  0 taken 3 (fallthrough)
branch  1 taken 180
        3: 2116:	    goto normal_char;
      180: 2117:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
branch  0 taken 92 (fallthrough)
branch  1 taken 88
branch  2 taken 1 (fallthrough)
branch  3 taken 91
        1: 2118:	    goto normal_char;
      179: 2119:	  return lasttok = PLUS;
        -: 2120:
      185: 2121:	case '{':
      185: 2122:	  if (!(syntax_bits & RE_INTERVALS))
branch  0 taken 0 (fallthrough)
branch  1 taken 185
    #####: 2123:	    goto normal_char;
      185: 2124:	  if (backslash != ((syntax_bits & RE_NO_BK_BRACES) == 0))
branch  0 taken 3 (fallthrough)
branch  1 taken 182
        3: 2125:	    goto normal_char;
      182: 2126:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
branch  0 taken 91 (fallthrough)
branch  1 taken 91
branch  2 taken 1 (fallthrough)
branch  3 taken 90
        1: 2127:	    goto normal_char;
        -: 2128:
      181: 2129:	  if (syntax_bits & RE_NO_BK_BRACES)
branch  0 taken 91 (fallthrough)
branch  1 taken 90
        -: 2130:	    {
        -: 2131:	      /* Scan ahead for a valid interval; if it's not valid,
        -: 2132:		 treat it as a literal '{'.  */
       91: 2133:	      int lo = -1, hi = -1;
       91: 2134:	      char const *p = lexptr;
       91: 2135:	      char const *lim = p + lexleft;
      181: 2136:	      for (;  p != lim && ISDIGIT (*p);  p++)
branch  0 taken 181 (fallthrough)
branch  1 taken 0
branch  2 taken 90
branch  3 taken 91 (fallthrough)
      90*: 2137:		lo = (lo < 0 ? 0 : lo * 10) + *p - '0';
branch  0 taken 0 (fallthrough)
branch  1 taken 90
       91: 2138:	      if (p != lim && *p == ',')
branch  0 taken 91 (fallthrough)
branch  1 taken 0
branch  2 taken 3 (fallthrough)
branch  3 taken 88
        -: 2139:		#ifndef FAULTY_F_DG_7
        5: 2140:		while (++p != lim && ISDIGIT (*p))
branch  0 taken 5 (fallthrough)
branch  1 taken 0
branch  2 taken 2
branch  3 taken 3 (fallthrough)
       2*: 2141:		  hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 2142:		#else
        -: 2143:		while (++p <= lim && ISDIGIT (*p))
        -: 2144:		  hi = (hi < 0 ? 0 : hi * 10) + *p - '0';
        -: 2145:		#endif
        -: 2146:	      else
       88: 2147:		hi = lo;
        -: 2148:              #ifndef FAULTY_F_DG_10
       91: 2149:	      if (p == lim || *p != '}'
branch  0 taken 91 (fallthrough)
branch  1 taken 0
branch  2 taken 91 (fallthrough)
branch  3 taken 0
       91: 2150:		  || lo < 0 || RE_DUP_MAX < hi || (0 <= hi && hi < lo))
branch  0 taken 90 (fallthrough)
branch  1 taken 1
branch  2 taken 90 (fallthrough)
branch  3 taken 0
branch  4 taken 89 (fallthrough)
branch  5 taken 1
branch  6 taken 0 (fallthrough)
branch  7 taken 89
        1: 2151:		goto normal_char;
        -: 2152:              #else
        -: 2153:	      if (p == lim || *p != '}'
        -: 2154:		  || lo < 0 || RE_DUP_MAX < hi || (0 <= hi && hi <= lo))
        -: 2155:		goto normal_char;
        -: 2156:              #endif
        -: 2157:	    }
        -: 2158:
      180: 2159:	  minrep = 0;
        -: 2160:	  /* Cases:
        -: 2161:	     {M} - exact count
        -: 2162:	     {M,} - minimum count, maximum is infinity
        -: 2163:	     {M,N} - M through N */
     180*: 2164:	  FETCH(c, _("unfinished repeat count"));
branch  0 taken 0 (fallthrough)
branch  1 taken 180
branch  2 never executed
branch  3 never executed
call    4 never executed
      180: 2165:	  if (ISDIGIT(c))
branch  0 taken 180 (fallthrough)
branch  1 taken 0
        -: 2166:	    {
      180: 2167:	      minrep = c - '0';
        -: 2168:	      for (;;)
        -: 2169:		{
     183*: 2170:		  FETCH(c, _("unfinished repeat count"));
branch  0 taken 0 (fallthrough)
branch  1 taken 183
branch  2 never executed
branch  3 never executed
call    4 never executed
      183: 2171:		  if (!ISDIGIT(c))
branch  0 taken 180 (fallthrough)
branch  1 taken 3
      180: 2172:		    break;
        3: 2173:		  minrep = 10 * minrep + c - '0';
        -: 2174:		}
        -: 2175:	    }
        -: 2176:#ifndef FAULTY_F_KP_2
        -: 2177:	  else
        -: 2178:#else
        -: 2179:	/* nothing here */
        -: 2180:#endif
    #####: 2181:	    dfaerror(_("malformed repeat count"));
call    0 never executed
      180: 2182:	  if (c == ',')
branch  0 taken 8 (fallthrough)
branch  1 taken 172
        -: 2183:	    {
       8*: 2184:	      FETCH (c, _("unfinished repeat count"));
branch  0 taken 0 (fallthrough)
branch  1 taken 8
branch  2 never executed
branch  3 never executed
call    4 never executed
        8: 2185:	      if (! ISDIGIT (c))
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        1: 2186:		maxrep = -1;
        -: 2187:	      else
        -: 2188:		{
        7: 2189:		  maxrep = c - '0';
        -: 2190:		  for (;;)
        -: 2191:		    {
      10*: 2192:		      FETCH (c, _("unfinished repeat count"));
branch  0 taken 0 (fallthrough)
branch  1 taken 10
branch  2 never executed
branch  3 never executed
call    4 never executed
       10: 2193:		      if (! ISDIGIT (c))
branch  0 taken 7 (fallthrough)
branch  1 taken 3
        7: 2194:			break;
        3: 2195:		      maxrep = 10 * maxrep + c - '0';
        -: 2196:		    }
        7: 2197:		  if (0 <= maxrep && maxrep < minrep)
branch  0 taken 7 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 7
    #####: 2198:		    dfaerror (_("malformed repeat count"));
call    0 never executed
        -: 2199:		}
        -: 2200:	    }
        -: 2201:	  else
      172: 2202:	    maxrep = minrep;
      180: 2203:	  if (!(syntax_bits & RE_NO_BK_BRACES))
branch  0 taken 90 (fallthrough)
branch  1 taken 90
        -: 2204:	    {
       90: 2205:	      if (c != '\\')
branch  0 taken 0 (fallthrough)
branch  1 taken 90
    #####: 2206:		dfaerror(_("malformed repeat count"));
call    0 never executed
      90*: 2207:	      FETCH(c, _("unfinished repeat count"));
branch  0 taken 0 (fallthrough)
branch  1 taken 90
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 2208:	    }
      180: 2209:	  if (c != '}')
branch  0 taken 0 (fallthrough)
branch  1 taken 180
    #####: 2210:	    dfaerror(_("malformed repeat count"));
call    0 never executed
      180: 2211:	  laststart = 0;
      180: 2212:	  return lasttok = REPMN;
        -: 2213:
      287: 2214:	case '|':
      287: 2215:	  if (syntax_bits & RE_LIMITED_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 287
    #####: 2216:	    goto normal_char;
      287: 2217:	  if (backslash != ((syntax_bits & RE_NO_BK_VBAR) == 0))
branch  0 taken 8 (fallthrough)
branch  1 taken 279
        8: 2218:	    goto normal_char;
      279: 2219:	  laststart = 1;
      279: 2220:	  return lasttok = OR;
        -: 2221:
        3: 2222:	case '\n':
        3: 2223:	  if (syntax_bits & RE_LIMITED_OPS
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 2224:	      || backslash
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 2225:	      || !(syntax_bits & RE_NEWLINE_ALT))
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 2226:	    goto normal_char;
        3: 2227:	  laststart = 1;
        3: 2228:	  return lasttok = OR;
        -: 2229:
      283: 2230:	case '(':
      283: 2231:	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
branch  0 taken 173 (fallthrough)
branch  1 taken 110
      173: 2232:	    goto normal_char;
      110: 2233:	  ++parens;
      110: 2234:	  laststart = 1;
      110: 2235:	  return lasttok = LPAREN;
        -: 2236:
      112: 2237:	case ')':
      112: 2238:	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
branch  0 taken 2 (fallthrough)
branch  1 taken 110
        2: 2239:	    goto normal_char;
     110*: 2240:	  if (parens == 0 && syntax_bits & RE_UNMATCHED_RIGHT_PAREN_ORD)
branch  0 taken 0 (fallthrough)
branch  1 taken 110
branch  2 never executed
branch  3 never executed
    #####: 2241:	    goto normal_char;
      110: 2242:	  --parens;
      110: 2243:	  laststart = 0;
      110: 2244:	  return lasttok = RPAREN;
        -: 2245:
       94: 2246:	case '.':
       94: 2247:	  if (backslash)
branch  0 taken 3 (fallthrough)
branch  1 taken 91
        3: 2248:	    goto normal_char;
       91: 2249:	  zeroset(ccl);
call    0 returned 91
       91: 2250:	  notset(ccl);
call    0 returned 91
       91: 2251:	  if (!(syntax_bits & RE_DOT_NEWLINE))
branch  0 taken 91 (fallthrough)
branch  1 taken 0
       91: 2252:	    clrbit(eolbyte_1, ccl);
call    0 returned 91
       91: 2253:	  if (syntax_bits & RE_DOT_NOT_NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 91
    #####: 2254:	    clrbit('\0', ccl);
call    0 never executed
       91: 2255:	  laststart = 0;
       91: 2256:	  return lasttok = CSET + charclass_index(ccl);
call    0 returned 91
        -: 2257:
        9: 2258:	case 'w':
        -: 2259:	case 'W':
        9: 2260:	  if (!backslash || (syntax_bits & RE_NO_GNU_OPS))
branch  0 taken 4 (fallthrough)
branch  1 taken 5
branch  2 taken 0 (fallthrough)
branch  3 taken 4
        5: 2261:	    goto normal_char;
        4: 2262:	  zeroset(ccl);
call    0 returned 4
     1028: 2263:	  for (c2 = 0; c2 < NOTCHAR; ++c2)
branch  0 taken 1024
branch  1 taken 4 (fallthrough)
     1024: 2264:	    if (IS_WORD_CONSTITUENT(c2))
branch  0 taken 776 (fallthrough)
branch  1 taken 248
branch  2 taken 4 (fallthrough)
branch  3 taken 772
      252: 2265:	      setbit(c2, ccl);
call    0 returned 252
        4: 2266:	  if (c == 'W')
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3: 2267:	    notset(ccl);
call    0 returned 3
        4: 2268:	  laststart = 0;
        4: 2269:	  return lasttok = CSET + charclass_index(ccl);
call    0 returned 4
        -: 2270:
       65: 2271:	case '[':
       65: 2272:	  if (backslash)
branch  0 taken 3 (fallthrough)
branch  1 taken 62
        3: 2273:	    goto normal_char;
       62: 2274:	  zeroset(ccl);
call    0 returned 62
      62*: 2275:	  FETCH(c, _("Unbalanced ["));
branch  0 taken 0 (fallthrough)
branch  1 taken 62
branch  2 never executed
branch  3 never executed
call    4 never executed
       62: 2276:	  if (c == '^')
branch  0 taken 9 (fallthrough)
branch  1 taken 53
        -: 2277:	    {
       9*: 2278:	      FETCH(c, _("Unbalanced ["));
branch  0 taken 0 (fallthrough)
branch  1 taken 9
branch  2 never executed
branch  3 never executed
call    4 never executed
        9: 2279:	      invert = 1;
        -: 2280:	    }
        -: 2281:	  else
       53: 2282:	    invert = 0;
        -: 2283:	  do
        -: 2284:	    {
        -: 2285:	      /* Nobody ever said this had to be fast. :-)
        -: 2286:		 Note that if we're looking at some other [:...:]
        -: 2287:		 construct, we just treat it as a bunch of ordinary
        -: 2288:		 characters.  We can do this because we assume
        -: 2289:		 regex has checked for syntax errors before
        -: 2290:		 dfa is ever called. */
      105: 2291:	      if (c == '[' && (syntax_bits & RE_CHAR_CLASSES))
branch  0 taken 21 (fallthrough)
branch  1 taken 84
branch  2 taken 21 (fallthrough)
branch  3 taken 0
      146: 2292:		for (c1 = 0; prednames[c1].name; ++c1)
branch  0 taken 146
branch  1 taken 0 (fallthrough)
      146: 2293:		  if (looking_at(prednames[c1].name))
call    0 returned 146
branch  1 taken 21 (fallthrough)
branch  2 taken 125
        -: 2294:		    {
       21: 2295:			int (*pred)() = prednames[c1].pred;
       21: 2296:			if (case_fold
branch  0 taken 0 (fallthrough)
branch  1 taken 21
    #####: 2297:			    && (pred == is_upper || pred == is_lower))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2298:				pred = is_alpha;
        -: 2299:
     5397: 2300:		      for (c2 = 0; c2 < NOTCHAR; ++c2)
branch  0 taken 5376
branch  1 taken 21 (fallthrough)
     5376: 2301:			if ((*pred)(c2))
call    0 returned 5376
branch  1 taken 1078 (fallthrough)
branch  2 taken 4298
     1078: 2302:			  setbit(c2, ccl);
call    0 returned 1078
       21: 2303:		      lexptr += strlen(prednames[c1].name);
       21: 2304:		      lexleft -= strlen(prednames[c1].name);
      21*: 2305:		      FETCH(c1, _("Unbalanced ["));
branch  0 taken 0 (fallthrough)
branch  1 taken 21
branch  2 never executed
branch  3 never executed
call    4 never executed
       21: 2306:		      goto skip;
        -: 2307:		    }
      84*: 2308:	      if (c == '\\' && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
branch  0 taken 0 (fallthrough)
branch  1 taken 84
branch  2 never executed
branch  3 never executed
    #####: 2309:		FETCH(c, _("Unbalanced ["));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
      84*: 2310:	      FETCH(c1, _("Unbalanced ["));
branch  0 taken 0 (fallthrough)
branch  1 taken 84
branch  2 never executed
branch  3 never executed
call    4 never executed
       84: 2311:	      if (c1 == '-')
branch  0 taken 20 (fallthrough)
branch  1 taken 64
        -: 2312:		{
      20*: 2313:		  FETCH(c2, _("Unbalanced ["));
branch  0 taken 0 (fallthrough)
branch  1 taken 20
branch  2 never executed
branch  3 never executed
call    4 never executed
       20: 2314:		  if (c2 == ']')
branch  0 taken 4 (fallthrough)
branch  1 taken 16
        -: 2315:		    {
        -: 2316:		      /* In the case [x-], the - is an ordinary hyphen,
        -: 2317:			 which is left in c1, the lookahead character. */
        4: 2318:		      --lexptr;
        4: 2319:		      ++lexleft;
        4: 2320:		      c2 = c;
        -: 2321:		    }
        -: 2322:		  else
        -: 2323:		    {
       16: 2324:		      if (c2 == '\\'
branch  0 taken 0 (fallthrough)
branch  1 taken 16
    #####: 2325:			  && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
branch  0 never executed
branch  1 never executed
    #####: 2326:			FETCH(c2, _("Unbalanced ["));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
      16*: 2327:		      FETCH(c1, _("Unbalanced ["));
branch  0 taken 0 (fallthrough)
branch  1 taken 16
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 2328:		    }
        -: 2329:		}
        -: 2330:	      else
       64: 2331:		c2 = c;
      437: 2332:	      while (c <= c2)
branch  0 taken 353
branch  1 taken 84 (fallthrough)
        -: 2333:		{
      353: 2334:		  setbit(c, ccl);
call    0 returned 353
      353: 2335:		  if (case_fold)
branch  0 taken 117 (fallthrough)
branch  1 taken 236
      117: 2336:		    if (ISUPPER(c))
branch  0 taken 51 (fallthrough)
branch  1 taken 66
       51: 2337:		      setbit(tolower(c), ccl);
call    0 returned 51
       66: 2338:		    else if (ISLOWER(c))
branch  0 taken 51 (fallthrough)
branch  1 taken 15
       51: 2339:		      setbit(toupper(c), ccl);
call    0 returned 51
      353: 2340:		  ++c;
        -: 2341:		}
       84: 2342:	    skip:
        -: 2343:	      ;
        -: 2344:	    }
      105: 2345:	  while ((c = c1) != ']');
branch  0 taken 43
branch  1 taken 62 (fallthrough)
       62: 2346:	  if (invert)
branch  0 taken 9 (fallthrough)
branch  1 taken 53
        -: 2347:	    {
        9: 2348:	      notset(ccl);
call    0 returned 9
        9: 2349:	      if (syntax_bits & RE_HAT_LISTS_NOT_NEWLINE)
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9: 2350:		clrbit(eolbyte_1, ccl);
call    0 returned 9
        -: 2351:	    }
       62: 2352:	  laststart = 0;
       62: 2353:	  return lasttok = CSET + charclass_index(ccl);
call    0 returned 62
        -: 2354:
        -: 2355:	default:
     5649: 2356:	normal_char:
     5649: 2357:	  laststart = 0;
     5649: 2358:	  if (case_fold && ISALPHA(c))
branch  0 taken 369 (fallthrough)
branch  1 taken 5280
branch  2 taken 359 (fallthrough)
branch  3 taken 10
        -: 2359:	    {
      359: 2360:	      zeroset(ccl);
call    0 returned 359
      359: 2361:	      setbit(c, ccl);
call    0 returned 359
      359: 2362:	      if (isupper(c))
branch  0 taken 24 (fallthrough)
branch  1 taken 335
       24: 2363:		setbit(tolower(c), ccl);
call    0 returned 24
        -: 2364:	      else
      335: 2365:		setbit(toupper(c), ccl);
call    0 returned 335
      359: 2366:	      return lasttok = CSET + charclass_index(ccl);
call    0 returned 359
        -: 2367:	    }
     5290: 2368:	  return c;
        -: 2369:	}
        -: 2370:    }
        -: 2371:
        -: 2372:  /* The above loop should consume at most a backslash
        -: 2373:     and some other character. */
    #####: 2374:  abort();
call    0 never executed
        -: 2375:  return END;	/* keeps pedantic compilers happy. */
        -: 2376:}
        -: 2377:
        -: 2378:/* Recursive descent parser for regular expressions. */
        -: 2379:
        -: 2380:static token tok;		/* Lookahead token. */
        -: 2381:static int depth;		/* Current depth of a hypothetical stack
        -: 2382:				   holding deferred productions.  This is
        -: 2383:				   used to determine the depth that will be
        -: 2384:				   required of the real stack later on in
        -: 2385:				   dfaanalyze(). */
        -: 2386:
        -: 2387:/* Add the given token to the parse tree, maintaining the depth count and
        -: 2388:   updating the maximum depth if necessary. */
        -: 2389:static void
function addtok called 13764 returned 100% blocks executed 100%
    13764: 2390:addtok(t)
        -: 2391:     token t;
        -: 2392:{
    16841: 2393:  REALLOC_IF_NECESSARY(dfa->tokens, token, dfa->talloc, dfa->tindex);
branch  0 taken 3077 (fallthrough)
branch  1 taken 10687
branch  2 taken 3077
branch  3 taken 3077 (fallthrough)
call    4 returned 3077
    13764: 2394:  dfa->tokens[dfa->tindex++] = t;
        -: 2395:
    13764: 2396:  switch (t)
branch  0 taken 378
branch  1 taken 6303
branch  2 taken 7011
branch  3 taken 72
        -: 2397:    {
      378: 2398:    case QMARK:
        -: 2399:    case STAR:
        -: 2400:    case PLUS:
      378: 2401:      break;
        -: 2402:
     6303: 2403:    case CAT:
        -: 2404:    case OR:
        -: 2405:    case ORTOP:
     6303: 2406:      --depth;
     6303: 2407:      break;
        -: 2408:
     7011: 2409:    default:
     7011: 2410:      ++dfa->nleaves;
     7083: 2411:    case EMPTY:
     7083: 2412:      ++depth;
     7083: 2413:      break;
        -: 2414:    }
    13764: 2415:  if (depth > dfa->depth)
branch  0 taken 1868 (fallthrough)
branch  1 taken 11896
     1868: 2416:    dfa->depth = depth;
    13764: 2417:}
        -: 2418:
        -: 2419:/* The grammar understood by the parser is as follows.
        -: 2420:
        -: 2421:   regexp:
        -: 2422:     regexp OR branch
        -: 2423:     branch
        -: 2424:
        -: 2425:   branch:
        -: 2426:     branch closure
        -: 2427:     closure
        -: 2428:
        -: 2429:   closure:
        -: 2430:     closure QMARK
        -: 2431:     closure STAR
        -: 2432:     closure PLUS
        -: 2433:     atom
        -: 2434:
        -: 2435:   atom:
        -: 2436:     <normal character>
        -: 2437:     CSET
        -: 2438:     BACKREF
        -: 2439:     BEGLINE
        -: 2440:     ENDLINE
        -: 2441:     BEGWORD
        -: 2442:     ENDWORD
        -: 2443:     LIMWORD
        -: 2444:     NOTLIMWORD
        -: 2445:     <empty>
        -: 2446:
        -: 2447:   The parser builds a parse tree in postfix form in an array of tokens. */
        -: 2448:
        -: 2449:static void
function atom called 6375 returned 100% blocks executed 95%
     6375: 2450:atom()
        -: 2451:{
     6375: 2452:  if ((tok >= 0 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
branch  0 taken 6366 (fallthrough)
branch  1 taken 9
branch  2 taken 1076 (fallthrough)
branch  3 taken 5290
branch  4 taken 569 (fallthrough)
branch  5 taken 516
branch  6 taken 569 (fallthrough)
branch  7 taken 0
      569: 2453:      || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD
branch  0 taken 448 (fallthrough)
branch  1 taken 121
branch  2 taken 438 (fallthrough)
branch  3 taken 10
branch  4 taken 324 (fallthrough)
branch  5 taken 114
      324: 2454:      || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD)
branch  0 taken 323 (fallthrough)
branch  1 taken 1
branch  2 taken 183 (fallthrough)
branch  3 taken 140
branch  4 taken 1 (fallthrough)
branch  5 taken 182
        -: 2455:    {
     6193: 2456:      addtok(tok);
call    0 returned 6193
     6193: 2457:      tok = lex();
call    0 returned 6193
        -: 2458:    }
      182: 2459:  else if (tok == LPAREN)
branch  0 taken 110 (fallthrough)
branch  1 taken 72
        -: 2460:    {
      110: 2461:      tok = lex();
call    0 returned 110
      110: 2462:      regexp(0);
call    0 returned 110
      110: 2463:      if (tok != RPAREN)
branch  0 taken 0 (fallthrough)
branch  1 taken 110
    #####: 2464:	dfaerror(_("Unbalanced ("));
call    0 never executed
      110: 2465:      tok = lex();
call    0 returned 110
        -: 2466:    }
        -: 2467:  else
       72: 2468:    addtok(EMPTY);
call    0 returned 72
     6375: 2469:}
        -: 2470:
        -: 2471:/* Return the number of tokens in the given subexpression. */
        -: 2472:static int
function nsubtoks called 255 returned 100% blocks executed 100%
      255: 2473:nsubtoks(tindex)
        -: 2474:int tindex;
        -: 2475:{
        -: 2476:  int ntoks1;
        -: 2477:
      255: 2478:  switch (dfa->tokens[tindex - 1])
branch  0 taken 213
branch  1 taken 9
branch  2 taken 33
        -: 2479:    {
      213: 2480:    default:
      213: 2481:      return 1;
        9: 2482:    case QMARK:
        -: 2483:    case STAR:
        -: 2484:    case PLUS:
        9: 2485:      return 1 + nsubtoks(tindex - 1);
call    0 returned 9
       33: 2486:    case CAT:
        -: 2487:    case OR:
        -: 2488:    case ORTOP:
       33: 2489:      ntoks1 = nsubtoks(tindex - 1);
call    0 returned 33
       33: 2490:      return 1 + ntoks1 + nsubtoks(tindex - 1 - ntoks1);
call    0 returned 33
        -: 2491:    }
        -: 2492:}
        -: 2493:
        -: 2494:/* Copy the given subexpression to the top of the tree. */
        -: 2495:static void
function copytoks called 38 returned 100% blocks executed 100%
       38: 2496:copytoks(tindex, ntokens)
        -: 2497:     int tindex, ntokens;
        -: 2498:{
        -: 2499:  int i;
        -: 2500:
       76: 2501:  for (i = 0; i < ntokens; ++i)
branch  0 taken 38
branch  1 taken 38 (fallthrough)
       38: 2502:    addtok(dfa->tokens[tindex + i]);
call    0 returned 38
       38: 2503:}
        -: 2504:
        -: 2505:static void
function closure called 6375 returned 100% blocks executed 100%
     6375: 2506:closure()
        -: 2507:{
        -: 2508:  int tindex, ntokens, i;
        -: 2509:
     6375: 2510:  atom();
call    0 returned 6375
     6919: 2511:  while (tok == QMARK || tok == STAR || tok == PLUS || tok == REPMN)
branch  0 taken 174
branch  1 taken 6745 (fallthrough)
branch  2 taken 11
branch  3 taken 6734 (fallthrough)
branch  4 taken 179
branch  5 taken 6555 (fallthrough)
branch  6 taken 180
branch  7 taken 6375 (fallthrough)
      544: 2512:    if (tok == REPMN)
branch  0 taken 180 (fallthrough)
branch  1 taken 364
        -: 2513:      {
      180: 2514:	ntokens = nsubtoks(dfa->tindex);
call    0 returned 180
      180: 2515:	tindex = dfa->tindex - ntokens;
        -: 2516:	#ifndef FAULTY_F_KP_9
      180: 2517:	if (maxrep < 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 179
        -: 2518:	#else
        -: 2519:	if (maxrep > 0)
        -: 2520:	#endif
        1: 2521:	  addtok(PLUS);
call    0 returned 1
      180: 2522:	if (minrep == 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 177
        3: 2523:	  addtok(QMARK);
call    0 returned 3
      208: 2524:	for (i = 1; i < minrep; ++i)
branch  0 taken 28
branch  1 taken 180 (fallthrough)
        -: 2525:	  {
       28: 2526:	    copytoks(tindex, ntokens);
call    0 returned 28
       28: 2527:	    addtok(CAT);
call    0 returned 28
        -: 2528:	  }
      190: 2529:	for (; i < maxrep; ++i)
branch  0 taken 10
branch  1 taken 180 (fallthrough)
        -: 2530:	  {
       10: 2531:	    copytoks(tindex, ntokens);
call    0 returned 10
       10: 2532:	    addtok(QMARK);
call    0 returned 10
       10: 2533:	    addtok(CAT);
call    0 returned 10
        -: 2534:	  }
      180: 2535:	tok = lex();
call    0 returned 180
        -: 2536:      }
        -: 2537:    else
        -: 2538:      {
      364: 2539:	addtok(tok);
call    0 returned 364
      364: 2540:	tok = lex();
call    0 returned 364
        -: 2541:      }
     6375: 2542:}
        -: 2543:
        -: 2544:static void
function branch called 1172 returned 100% blocks executed 100%
     1172: 2545:branch()
        -: 2546:{
     1172: 2547:  closure();
call    0 returned 1172
     6375: 2548:  while (tok != RPAREN && tok != OR && tok >= 0)
branch  0 taken 6265 (fallthrough)
branch  1 taken 110
branch  2 taken 5983 (fallthrough)
branch  3 taken 282
branch  4 taken 5203
branch  5 taken 780 (fallthrough)
        -: 2549:    {
     5203: 2550:      closure();
call    0 returned 5203
     5203: 2551:      addtok(CAT);
call    0 returned 5203
        -: 2552:    }
     1172: 2553:}
        -: 2554:
        -: 2555:static void
function regexp called 890 returned 100% blocks executed 100%
      890: 2556:regexp(toplevel)
        -: 2557:     int toplevel;
        -: 2558:{
      890: 2559:  branch();
call    0 returned 890
     1172: 2560:  while (tok == OR)
branch  0 taken 282
branch  1 taken 890 (fallthrough)
        -: 2561:    {
      282: 2562:      tok = lex();
call    0 returned 282
      282: 2563:      branch();
call    0 returned 282
      282: 2564:      if (toplevel)
branch  0 taken 239 (fallthrough)
branch  1 taken 43
      239: 2565:	addtok(ORTOP);
call    0 returned 239
        -: 2566:      else
       43: 2567:	addtok(OR);
call    0 returned 43
        -: 2568:    }
      890: 2569:}
        -: 2570:
        -: 2571:/* Main entry point for the parser.  S is a string to be parsed, len is the
        -: 2572:   length of the string, so s can include NUL characters.  D is a pointer to
        -: 2573:   the struct dfa to parse into. */
        -: 2574:void
function dfaparse called 780 returned 100% blocks executed 73%
      780: 2575:dfaparse(s, len, d)
        -: 2576:     char *s;
        -: 2577:     size_t len;
        -: 2578:     struct dfa *d;
        -: 2579:
        -: 2580:{
      780: 2581:  dfa = d;
      780: 2582:  lexstart = lexptr = s;
      780: 2583:  lexleft = len;
      780: 2584:  lasttok = END;
      780: 2585:  laststart = 1;
      780: 2586:  parens = 0;
        -: 2587:
      780: 2588:  if (! syntax_bits_set)
branch  0 taken 0 (fallthrough)
branch  1 taken 780
    #####: 2589:    dfaerror(_("No syntax specified"));
call    0 never executed
        -: 2590:
      780: 2591:  tok = lex();
call    0 returned 780
      780: 2592:  depth = d->depth;
        -: 2593:
      780: 2594:  regexp(1);
call    0 returned 780
        -: 2595:
      780: 2596:  if (tok != END)
branch  0 taken 0 (fallthrough)
branch  1 taken 780
    #####: 2597:    dfaerror(_("Unbalanced )"));
call    0 never executed
        -: 2598:
      780: 2599:  addtok(END - d->nregexps);
call    0 returned 780
      780: 2600:  addtok(CAT);
call    0 returned 780
        -: 2601:
      780: 2602:  if (d->nregexps)
branch  0 taken 0 (fallthrough)
branch  1 taken 780
    #####: 2603:    addtok(ORTOP);
call    0 never executed
        -: 2604:
      780: 2605:  ++d->nregexps;
      780: 2606:}
        -: 2607:
        -: 2608:/* Some primitives for operating on sets of positions. */
        -: 2609:
        -: 2610:/* Copy one set to another; the destination must be large enough. */
        -: 2611:static void
function copy called 28335 returned 100% blocks executed 100%
    28335: 2612:copy(src, dst)
        -: 2613:     position_set *src;
        -: 2614:     position_set *dst;
        -: 2615:{
        -: 2616:  int i;
        -: 2617:
    68736: 2618:  for (i = 0; i < src->nelem; ++i)
branch  0 taken 40401
branch  1 taken 28335 (fallthrough)
    40401: 2619:    dst->elems[i] = src->elems[i];
    28335: 2620:  dst->nelem = src->nelem;
    28335: 2621:}
        -: 2622:
        -: 2623:/* Insert a position in a set.  Position sets are maintained in sorted
        -: 2624:   order according to index.  If position already exists in the set with
        -: 2625:   the same index then their constraints are logically or'd together.
        -: 2626:   S->elems must point to an array large enough to hold the resulting set. */
        -: 2627:static void
function insert called 24771 returned 100% blocks executed 100%
    24771: 2628:insert(p, s)
        -: 2629:     position p;
        -: 2630:     position_set *s;
    24311: 2631:{
        -: 2632:  int i;
        -: 2633:  position t1, t2;
        -: 2634:
    49082: 2635:  for (i = 0; i < s->nelem && p.index < s->elems[i].index; ++i)
branch  0 taken 27936 (fallthrough)
branch  1 taken 21146
branch  2 taken 24311
branch  3 taken 3625 (fallthrough)
    24311: 2636:    continue;
    24771: 2637:  if (i < s->nelem && p.index == s->elems[i].index)
branch  0 taken 3625 (fallthrough)
branch  1 taken 21146
branch  2 taken 704 (fallthrough)
branch  3 taken 2921
      704: 2638:    s->elems[i].constraint |= p.constraint;
        -: 2639:  else
        -: 2640:    {
    24067: 2641:      t1 = p;
    24067: 2642:      ++s->nelem;
    51247: 2643:      while (i < s->nelem)
branch  0 taken 27180
branch  1 taken 24067 (fallthrough)
        -: 2644:	{
    27180: 2645:	  t2 = s->elems[i];
    27180: 2646:	  s->elems[i++] = t1;
    27180: 2647:	  t1 = t2;
        -: 2648:	}
        -: 2649:    }
    24771: 2650:}
        -: 2651:
        -: 2652:/* Merge two sets of positions into a third.  The result is exactly as if
        -: 2653:   the positions of both sets were inserted into an initially empty set. */
        -: 2654:static void
function merge called 6172 returned 100% blocks executed 93%
     6172: 2655:merge(s1, s2, m)
        -: 2656:     position_set *s1;
        -: 2657:     position_set *s2;
        -: 2658:     position_set *m;
        -: 2659:{
     6172: 2660:  int i = 0, j = 0;
        -: 2661:
     6172: 2662:  m->nelem = 0;
     6485: 2663:  while (i < s1->nelem && j < s2->nelem)
branch  0 taken 6172 (fallthrough)
branch  1 taken 313
branch  2 taken 313
branch  3 taken 5859 (fallthrough)
      313: 2664:    if (s1->elems[i].index > s2->elems[j].index)
branch  0 taken 312 (fallthrough)
branch  1 taken 1
      312: 2665:      m->elems[m->nelem++] = s1->elems[i++];
        1: 2666:    else if (s1->elems[i].index < s2->elems[j].index)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 2667:      m->elems[m->nelem++] = s2->elems[j++];
        -: 2668:    else
        -: 2669:      {
        1: 2670:	m->elems[m->nelem] = s1->elems[i++];
        1: 2671:	m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
        -: 2672:      }
    12032: 2673:  while (i < s1->nelem)
branch  0 taken 5860
branch  1 taken 6172 (fallthrough)
     5860: 2674:    m->elems[m->nelem++] = s1->elems[i++];
     6503: 2675:  while (j < s2->nelem)
branch  0 taken 331
branch  1 taken 6172 (fallthrough)
      331: 2676:    m->elems[m->nelem++] = s2->elems[j++];
     6172: 2677:}
        -: 2678:
        -: 2679:/* Delete a position from a set. */
        -: 2680:static void
function delete called 390 returned 100% blocks executed 100%
      390: 2681:delete(p, s)
        -: 2682:     position p;
        -: 2683:     position_set *s;
        -: 2684:{
        -: 2685:  int i;
        -: 2686:
      534: 2687:  for (i = 0; i < s->nelem; ++i)
branch  0 taken 534
branch  1 taken 0 (fallthrough)
      534: 2688:    if (p.index == s->elems[i].index)
branch  0 taken 390 (fallthrough)
branch  1 taken 144
      390: 2689:      break;
      390: 2690:  if (i < s->nelem)
branch  0 taken 390 (fallthrough)
branch  1 taken 0
      501: 2691:    for (--s->nelem; i < s->nelem; ++i)
branch  0 taken 111
branch  1 taken 390 (fallthrough)
      111: 2692:      s->elems[i] = s->elems[i + 1];
      390: 2693:}
        -: 2694:
        -: 2695:/* Find the index of the state corresponding to the given position set with
        -: 2696:   the given preceding context, or create a new state if there is no such
        -: 2697:   state.  Newline and letter tell whether we got here on a newline or
        -: 2698:   letter, respectively. */
        -: 2699:static int
function state_index called 16111 returned 100% blocks executed 91%
    16111: 2700:state_index(d, s, newline, letter)
        -: 2701:     struct dfa *d;
        -: 2702:     position_set *s;
        -: 2703:     int newline;
        -: 2704:     int letter;
        -: 2705:{
    16111: 2706:  int hash = 0;
        -: 2707:  int constraint;
        -: 2708:  int i, j;
        -: 2709:
    16111: 2710:  newline = newline ? 1 : 0;
    16111: 2711:  letter = letter ? 1 : 0;
        -: 2712:
    55883: 2713:  for (i = 0; i < s->nelem; ++i)
branch  0 taken 39772
branch  1 taken 16111 (fallthrough)
    39772: 2714:    hash ^= s->elems[i].index + s->elems[i].constraint;
        -: 2715:
        -: 2716:  /* Try to find a state that exactly matches the proposed one. */
    64615: 2717:  for (i = 0; i < d->sindex; ++i)
branch  0 taken 59213
branch  1 taken 5402 (fallthrough)
        -: 2718:    {
    59213: 2719:      if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem
branch  0 taken 15006 (fallthrough)
branch  1 taken 44207
branch  2 taken 15002 (fallthrough)
branch  3 taken 4
    15002: 2720:	  || newline != d->states[i].newline || letter != d->states[i].letter)
branch  0 taken 14202 (fallthrough)
branch  1 taken 800
branch  2 taken 3362 (fallthrough)
branch  3 taken 10840
    48373: 2721:	continue;
    35596: 2722:      for (j = 0; j < s->nelem; ++j)
branch  0 taken 24887
branch  1 taken 10709 (fallthrough)
    24887: 2723:	if (s->elems[j].constraint
    24887: 2724:	    != d->states[i].elems.elems[j].constraint
branch  0 taken 24879 (fallthrough)
branch  1 taken 8
    24879: 2725:	    || s->elems[j].index != d->states[i].elems.elems[j].index)
branch  0 taken 24756 (fallthrough)
branch  1 taken 123
        -: 2726:	  break;
    10840: 2727:      if (j == s->nelem)
branch  0 taken 10709 (fallthrough)
branch  1 taken 131
    10709: 2728:	return i;
        -: 2729:    }
        -: 2730:
        -: 2731:  /* We'll have to create a new state. */
     7121: 2732:  REALLOC_IF_NECESSARY(d->states, dfa_state, d->salloc, d->sindex);
branch  0 taken 1719 (fallthrough)
branch  1 taken 3683
branch  2 taken 1719
branch  3 taken 1719 (fallthrough)
call    4 returned 1719
     5402: 2733:  d->states[i].hash = hash;
     5402: 2734:  MALLOC(d->states[i].elems.elems, position, s->nelem);
call    0 returned 5402
     5402: 2735:  copy(s, &d->states[i].elems);
call    0 returned 5402
     5402: 2736:  d->states[i].newline = newline;
     5402: 2737:  d->states[i].letter = letter;
     5402: 2738:  d->states[i].backref = 0;
     5402: 2739:  d->states[i].constraint = 0;
     5402: 2740:  d->states[i].first_end = 0;
    20418: 2741:  for (j = 0; j < s->nelem; ++j)
branch  0 taken 15016
branch  1 taken 5402 (fallthrough)
    15016: 2742:    if (d->tokens[s->elems[j].index] < 0)
branch  0 taken 771 (fallthrough)
branch  1 taken 14245
        -: 2743:      {
      771: 2744:	constraint = s->elems[j].constraint;
      771: 2745:	if (SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 768
branch  2 taken 759 (fallthrough)
branch  3 taken 12
branch  4 taken 179 (fallthrough)
branch  5 taken 580
branch  6 taken 37 (fallthrough)
branch  7 taken 722
      49*: 2746:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 49
branch  2 taken 37 (fallthrough)
branch  3 taken 12
branch  4 taken 1 (fallthrough)
branch  5 taken 36
branch  6 taken 1 (fallthrough)
branch  7 taken 36
      13*: 2747:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
branch  2 taken 9 (fallthrough)
branch  3 taken 4
branch  4 taken 0 (fallthrough)
branch  5 taken 9
branch  6 taken 1 (fallthrough)
branch  7 taken 8
       5*: 2748:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 1))
branch  0 taken 0 (fallthrough)
branch  1 taken 5
branch  2 taken 1 (fallthrough)
branch  3 taken 4
branch  4 taken 0 (fallthrough)
branch  5 taken 1
branch  6 taken 0 (fallthrough)
branch  7 taken 1
      766: 2749:	  d->states[i].constraint |= constraint;
      771: 2750:	if (! d->states[i].first_end)
branch  0 taken 771 (fallthrough)
branch  1 taken 0
      771: 2751:	  d->states[i].first_end = d->tokens[s->elems[j].index];
        -: 2752:      }
    14245: 2753:    else if (d->tokens[s->elems[j].index] == BACKREF)
branch  0 taken 0 (fallthrough)
branch  1 taken 14245
        -: 2754:      {
    #####: 2755:	d->states[i].constraint = NO_CONSTRAINT;
    #####: 2756:	d->states[i].backref = 1;
        -: 2757:      }
        -: 2758:
     5402: 2759:  ++d->sindex;
        -: 2760:
     5402: 2761:  return i;
        -: 2762:}
        -: 2763:
        -: 2764:/* Find the epsilon closure of a set of positions.  If any position of the set
        -: 2765:   contains a symbol that matches the empty string in some context, replace
        -: 2766:   that position with the elements of its follow labeled with an appropriate
        -: 2767:   constraint.  Repeat exhaustively until no funny positions are left.
        -: 2768:   S->elems must be large enough to hold the result. */
        -: 2769:static void epsclosure PARAMS ((position_set *s, struct dfa *d));
        -: 2770:
        -: 2771:static void
function epsclosure called 6916 returned 100% blocks executed 96%
     6916: 2772:epsclosure(s, d)
        -: 2773:     position_set *s;
        -: 2774:     struct dfa *d;
        -: 2775:{
        -: 2776:  int i, j;
        -: 2777:  int *visited;
        -: 2778:  position p, old;
        -: 2779:
     6916: 2780:  MALLOC(visited, int, d->tindex);
call    0 returned 6916
   189596: 2781:  for (i = 0; i < d->tindex; ++i)
branch  0 taken 182680
branch  1 taken 6916 (fallthrough)
   182680: 2782:    visited[i] = 0;
        -: 2783:
    14281: 2784:  for (i = 0; i < s->nelem; ++i)
branch  0 taken 7365
branch  1 taken 6916 (fallthrough)
     7365: 2785:    if (d->tokens[s->elems[i].index] >= NOTCHAR
branch  0 taken 923 (fallthrough)
branch  1 taken 6442
      923: 2786:	&& d->tokens[s->elems[i].index] != BACKREF
branch  0 taken 923 (fallthrough)
branch  1 taken 0
      923: 2787:	&& d->tokens[s->elems[i].index] < CSET)
branch  0 taken 390 (fallthrough)
branch  1 taken 533
        -: 2788:      {
      390: 2789:	old = s->elems[i];
      390: 2790:	p.constraint = old.constraint;
      390: 2791:	delete(s->elems[i], s);
call    0 returned 390
      390: 2792:	if (visited[old.index])
branch  0 taken 3 (fallthrough)
branch  1 taken 387
        -: 2793:	  {
        3: 2794:	    --i;
        3: 2795:	    continue;
        -: 2796:	  }
      387: 2797:	visited[old.index] = 1;
      387: 2798:	switch (d->tokens[old.index])
branch  0 taken 121
branch  1 taken 10
branch  2 taken 114
branch  3 taken 1
branch  4 taken 140
branch  5 taken 1
branch  6 taken 0
        -: 2799:	  {
      121: 2800:	  case BEGLINE:
      121: 2801:	    p.constraint &= BEGLINE_CONSTRAINT;
      121: 2802:	    break;
       10: 2803:	  case ENDLINE:
       10: 2804:	    p.constraint &= ENDLINE_CONSTRAINT;
       10: 2805:	    break;
      114: 2806:	  case BEGWORD:
      114: 2807:	    p.constraint &= BEGWORD_CONSTRAINT;
      114: 2808:	    break;
        1: 2809:	  case ENDWORD:
        1: 2810:	    p.constraint &= ENDWORD_CONSTRAINT;
        1: 2811:	    break;
      140: 2812:	  case LIMWORD:
      140: 2813:	    p.constraint &= LIMWORD_CONSTRAINT;
      140: 2814:	    break;
        1: 2815:	  case NOTLIMWORD:
        1: 2816:	    p.constraint &= NOTLIMWORD_CONSTRAINT;
        1: 2817:	    break;
    #####: 2818:	  default:
    #####: 2819:	    break;
        -: 2820:	  }
      777: 2821:	for (j = 0; j < d->follows[old.index].nelem; ++j)
branch  0 taken 390
branch  1 taken 387 (fallthrough)
        -: 2822:	  {
      390: 2823:	    p.index = d->follows[old.index].elems[j].index;
      390: 2824:	    insert(p, s);
call    0 returned 390
        -: 2825:	  }
        -: 2826:	/* Force rescan to start at the beginning. */
      387: 2827:	i = -1;
        -: 2828:      }
        -: 2829:
     6916: 2830:  free(visited);
     6916: 2831:}
        -: 2832:
        -: 2833:/* Perform bottom-up analysis on the parse tree, computing various functions.
        -: 2834:   Note that at this point, we're pretending constructs like \< are real
        -: 2835:   characters rather than constraints on what can follow them.
        -: 2836:
        -: 2837:   Nullable:  A node is nullable if it is at the root of a regexp that can
        -: 2838:   match the empty string.
        -: 2839:   *  EMPTY leaves are nullable.
        -: 2840:   * No other leaf is nullable.
        -: 2841:   * A QMARK or STAR node is nullable.
        -: 2842:   * A PLUS node is nullable if its argument is nullable.
        -: 2843:   * A CAT node is nullable if both its arguments are nullable.
        -: 2844:   * An OR node is nullable if either argument is nullable.
        -: 2845:
        -: 2846:   Firstpos:  The firstpos of a node is the set of positions (nonempty leaves)
        -: 2847:   that could correspond to the first character of a string matching the
        -: 2848:   regexp rooted at the given node.
        -: 2849:   * EMPTY leaves have empty firstpos.
        -: 2850:   * The firstpos of a nonempty leaf is that leaf itself.
        -: 2851:   * The firstpos of a QMARK, STAR, or PLUS node is the firstpos of its
        -: 2852:     argument.
        -: 2853:   * The firstpos of a CAT node is the firstpos of the left argument, union
        -: 2854:     the firstpos of the right if the left argument is nullable.
        -: 2855:   * The firstpos of an OR node is the union of firstpos of each argument.
        -: 2856:
        -: 2857:   Lastpos:  The lastpos of a node is the set of positions that could
        -: 2858:   correspond to the last character of a string matching the regexp at
        -: 2859:   the given node.
        -: 2860:   * EMPTY leaves have empty lastpos.
        -: 2861:   * The lastpos of a nonempty leaf is that leaf itself.
        -: 2862:   * The lastpos of a QMARK, STAR, or PLUS node is the lastpos of its
        -: 2863:     argument.
        -: 2864:   * The lastpos of a CAT node is the lastpos of its right argument, union
        -: 2865:     the lastpos of the left if the right argument is nullable.
        -: 2866:   * The lastpos of an OR node is the union of the lastpos of each argument.
        -: 2867:
        -: 2868:   Follow:  The follow of a position is the set of positions that could
        -: 2869:   correspond to the character following a character matching the node in
        -: 2870:   a string matching the regexp.  At this point we consider special symbols
        -: 2871:   that match the empty string in some context to be just normal characters.
        -: 2872:   Later, if we find that a special symbol is in a follow set, we will
        -: 2873:   replace it with the elements of its follow, labeled with an appropriate
        -: 2874:   constraint.
        -: 2875:   * Every node in the firstpos of the argument of a STAR or PLUS node is in
        -: 2876:     the follow of every node in the lastpos.
        -: 2877:   * Every node in the firstpos of the second argument of a CAT node is in
        -: 2878:     the follow of every node in the lastpos of the first argument.
        -: 2879:
        -: 2880:   Because of the postfix representation of the parse tree, the depth-first
        -: 2881:   analysis is conveniently done by a linear scan with the aid of a stack.
        -: 2882:   Sets are stored as arrays of the elements, obeying a stack-like allocation
        -: 2883:   scheme; the number of elements in each set deeper in the stack can be
        -: 2884:   used to determine the address of a particular set's array. */
        -: 2885:void
function dfaanalyze called 722 returned 100% blocks executed 91%
      722: 2886:dfaanalyze(d, searchflag)
        -: 2887:     struct dfa *d;
        -: 2888:     int searchflag;
        -: 2889:{
        -: 2890:  int *nullable;		/* Nullable stack. */
        -: 2891:  int *nfirstpos;		/* Element count stack for firstpos sets. */
        -: 2892:  position *firstpos;		/* Array where firstpos elements are stored. */
        -: 2893:  int *nlastpos;		/* Element count stack for lastpos sets. */
        -: 2894:  position *lastpos;		/* Array where lastpos elements are stored. */
        -: 2895:  int *nalloc;			/* Sizes of arrays allocated to follow sets. */
        -: 2896:  position_set tmp;		/* Temporary set for merging sets. */
        -: 2897:  position_set merged;		/* Result of merging sets. */
        -: 2898:  int wants_newline;		/* True if some position wants newline info. */
        -: 2899:  int *o_nullable;
        -: 2900:  int *o_nfirst, *o_nlast;
        -: 2901:  position *o_firstpos, *o_lastpos;
        -: 2902:  int i, j;
        -: 2903:  position *pos;
        -: 2904:
        -: 2905:#ifdef DEBUG
        -: 2906:  fprintf(stderr, "dfaanalyze:\n");
        -: 2907:  for (i = 0; i < d->tindex; ++i)
        -: 2908:    {
        -: 2909:      fprintf(stderr, " %d:", i);
        -: 2910:      prtok(d->tokens[i]);
        -: 2911:    }
        -: 2912:  putc('\n', stderr);
        -: 2913:#endif
        -: 2914:
      722: 2915:  d->searchflag = searchflag;
        -: 2916:
      722: 2917:  MALLOC(nullable, int, d->depth);
call    0 returned 722
      722: 2918:  o_nullable = nullable;
      722: 2919:  MALLOC(nfirstpos, int, d->depth);
call    0 returned 722
      722: 2920:  o_nfirst = nfirstpos;
      722: 2921:  MALLOC(firstpos, position, d->nleaves);
call    0 returned 722
      722: 2922:  o_firstpos = firstpos, firstpos += d->nleaves;
      722: 2923:  MALLOC(nlastpos, int, d->depth);
call    0 returned 722
      722: 2924:  o_nlast = nlastpos;
      722: 2925:  MALLOC(lastpos, position, d->nleaves);
call    0 returned 722
      722: 2926:  o_lastpos = lastpos, lastpos += d->nleaves;
      722: 2927:  MALLOC(nalloc, int, d->tindex);
call    0 returned 722
    13684: 2928:  for (i = 0; i < d->tindex; ++i)
branch  0 taken 12962
branch  1 taken 722 (fallthrough)
    12962: 2929:    nalloc[i] = 0;
      722: 2930:  MALLOC(merged.elems, position, d->nleaves);
call    0 returned 722
        -: 2931:
      722: 2932:  CALLOC(d->follows, position_set, d->tindex);
call    0 returned 722
        -: 2933:
    13684: 2934:  for (i = 0; i < d->tindex; ++i)
branch  0 taken 12962
branch  1 taken 722 (fallthrough)
        -: 2935:#ifdef DEBUG
        -: 2936:    {				/* Nonsyntactic #ifdef goo... */
        -: 2937:#endif
    12962: 2938:    switch (d->tokens[i])
branch  0 taken 72
branch  1 taken 191
branch  2 taken 187
branch  3 taken 5649
branch  4 taken 282
branch  5 taken 6581
        -: 2939:      {
       72: 2940:      case EMPTY:
        -: 2941:	/* The empty set is nullable. */
       72: 2942:	*nullable++ = 1;
        -: 2943:
        -: 2944:	/* The firstpos and lastpos of the empty leaf are both empty. */
       72: 2945:	*nfirstpos++ = *nlastpos++ = 0;
       72: 2946:	break;
        -: 2947:
      191: 2948:      case STAR:
        -: 2949:      case PLUS:
        -: 2950:	/* Every element in the firstpos of the argument is in the follow
        -: 2951:	   of every element in the lastpos. */
      191: 2952:	tmp.nelem = nfirstpos[-1];
      191: 2953:	tmp.elems = firstpos;
      191: 2954:	pos = lastpos;
      362: 2955:	for (j = 0; j < nlastpos[-1]; ++j)
branch  0 taken 171
branch  1 taken 191 (fallthrough)
        -: 2956:	  {
      171: 2957:	    merge(&tmp, &d->follows[pos[j].index], &merged);
call    0 returned 171
     171*: 2958:	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
branch  0 taken 0 (fallthrough)
branch  1 taken 171
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 2959:				 nalloc[pos[j].index], merged.nelem - 1);
      171: 2960:	    copy(&merged, &d->follows[pos[j].index]);
call    0 returned 171
        -: 2961:	  }
        -: 2962:
        -: 2963:      case QMARK:
        -: 2964:	/* A QMARK or STAR node is automatically nullable. */
      378: 2965:	if (d->tokens[i] != PLUS)
branch  0 taken 198 (fallthrough)
branch  1 taken 180
      198: 2966:	  nullable[-1] = 1;
      378: 2967:	break;
        -: 2968:
     5649: 2969:      case CAT:
        -: 2970:	/* Every element in the firstpos of the second argument is in the
        -: 2971:	   follow of every element in the lastpos of the first argument. */
     5649: 2972:	tmp.nelem = nfirstpos[-1];
     5649: 2973:	tmp.elems = firstpos;
     5649: 2974:	pos = lastpos + nlastpos[-1];
    11650: 2975:	for (j = 0; j < nlastpos[-2]; ++j)
branch  0 taken 6001
branch  1 taken 5649 (fallthrough)
        -: 2976:	  {
     6001: 2977:	    merge(&tmp, &d->follows[pos[j].index], &merged);
call    0 returned 6001
     6312: 2978:	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
branch  0 taken 311 (fallthrough)
branch  1 taken 5690
branch  2 taken 311
branch  3 taken 311 (fallthrough)
call    4 returned 311
        -: 2979:				 nalloc[pos[j].index], merged.nelem - 1);
     6001: 2980:	    copy(&merged, &d->follows[pos[j].index]);
call    0 returned 6001
        -: 2981:	  }
        -: 2982:
        -: 2983:	/* The firstpos of a CAT node is the firstpos of the first argument,
        -: 2984:	   union that of the second argument if the first is nullable. */
     5649: 2985:	if (nullable[-2])
branch  0 taken 123 (fallthrough)
branch  1 taken 5526
      123: 2986:	  nfirstpos[-2] += nfirstpos[-1];
        -: 2987:	else
     5526: 2988:	  firstpos += nfirstpos[-1];
     5649: 2989:	--nfirstpos;
        -: 2990:
        -: 2991:	/* The lastpos of a CAT node is the lastpos of the second argument,
        -: 2992:	   union that of the first argument if the second is nullable. */
     5649: 2993:	if (nullable[-1])
branch  0 taken 127 (fallthrough)
branch  1 taken 5522
      127: 2994:	  nlastpos[-2] += nlastpos[-1];
        -: 2995:	else
        -: 2996:	  {
     5522: 2997:	    pos = lastpos + nlastpos[-2];
    11046: 2998:	    for (j = nlastpos[-1] - 1; j >= 0; --j)
branch  0 taken 5524
branch  1 taken 5522 (fallthrough)
     5524: 2999:	      pos[j] = lastpos[j];
     5522: 3000:	    lastpos += nlastpos[-2];
     5522: 3001:	    nlastpos[-2] = nlastpos[-1];
        -: 3002:	  }
     5649: 3003:	--nlastpos;
        -: 3004:
        -: 3005:	/* A CAT node is nullable if both arguments are nullable. */
    5649*: 3006:	nullable[-2] = nullable[-1] && nullable[-2];
branch  0 taken 127 (fallthrough)
branch  1 taken 5522
branch  2 taken 0 (fallthrough)
branch  3 taken 127
     5649: 3007:	--nullable;
     5649: 3008:	break;
        -: 3009:
      282: 3010:      case OR:
        -: 3011:      case ORTOP:
        -: 3012:	/* The firstpos is the union of the firstpos of each argument. */
      282: 3013:	nfirstpos[-2] += nfirstpos[-1];
      282: 3014:	--nfirstpos;
        -: 3015:
        -: 3016:	/* The lastpos is the union of the lastpos of each argument. */
      282: 3017:	nlastpos[-2] += nlastpos[-1];
      282: 3018:	--nlastpos;
        -: 3019:
        -: 3020:	/* An OR node is nullable if either argument is nullable. */
      282: 3021:	nullable[-2] = nullable[-1] || nullable[-2];
branch  0 taken 275 (fallthrough)
branch  1 taken 7
branch  2 taken 3 (fallthrough)
branch  3 taken 272
      282: 3022:	--nullable;
      282: 3023:	break;
        -: 3024:
     6581: 3025:      default:
        -: 3026:	/* Anything else is a nonempty position.  (Note that special
        -: 3027:	   constructs like \< are treated as nonempty strings here;
        -: 3028:	   an "epsilon closure" effectively makes them nullable later.
        -: 3029:	   Backreferences have to get a real position so we can detect
        -: 3030:	   transitions on them later.  But they are nullable. */
     6581: 3031:	*nullable++ = d->tokens[i] == BACKREF;
        -: 3032:
        -: 3033:	/* This position is in its own firstpos and lastpos. */
     6581: 3034:	*nfirstpos++ = *nlastpos++ = 1;
     6581: 3035:	--firstpos, --lastpos;
     6581: 3036:	firstpos->index = lastpos->index = i;
     6581: 3037:	firstpos->constraint = lastpos->constraint = NO_CONSTRAINT;
        -: 3038:
        -: 3039:	/* Allocate the follow set for this position. */
     6581: 3040:	nalloc[i] = 1;
     6581: 3041:	MALLOC(d->follows[i].elems, position, nalloc[i]);
call    0 returned 6581
     6581: 3042:	break;
        -: 3043:      }
        -: 3044:#ifdef DEBUG
        -: 3045:    /* ... balance the above nonsyntactic #ifdef goo... */
        -: 3046:      fprintf(stderr, "node %d:", i);
        -: 3047:      prtok(d->tokens[i]);
        -: 3048:      putc('\n', stderr);
        -: 3049:      fprintf(stderr, nullable[-1] ? " nullable: yes\n" : " nullable: no\n");
        -: 3050:      fprintf(stderr, " firstpos:");
        -: 3051:      for (j = nfirstpos[-1] - 1; j >= 0; --j)
        -: 3052:	{
        -: 3053:	  fprintf(stderr, " %d:", firstpos[j].index);
        -: 3054:	  prtok(d->tokens[firstpos[j].index]);
        -: 3055:	}
        -: 3056:      fprintf(stderr, "\n lastpos:");
        -: 3057:      for (j = nlastpos[-1] - 1; j >= 0; --j)
        -: 3058:	{
        -: 3059:	  fprintf(stderr, " %d:", lastpos[j].index);
        -: 3060:	  prtok(d->tokens[lastpos[j].index]);
        -: 3061:	}
        -: 3062:      putc('\n', stderr);
        -: 3063:    }
        -: 3064:#endif
        -: 3065:
        -: 3066:  /* For each follow set that is the follow set of a real position, replace
        -: 3067:     it with its epsilon closure. */
    13684: 3068:  for (i = 0; i < d->tindex; ++i)
branch  0 taken 12962
branch  1 taken 722 (fallthrough)
    12962: 3069:    if (d->tokens[i] < NOTCHAR || d->tokens[i] == BACKREF
branch  0 taken 7282 (fallthrough)
branch  1 taken 5680
branch  2 taken 7282 (fallthrough)
branch  3 taken 0
     7282: 3070:	|| d->tokens[i] >= CSET)
branch  0 taken 514 (fallthrough)
branch  1 taken 6768
        -: 3071:      {
        -: 3072:#ifdef DEBUG
        -: 3073:	fprintf(stderr, "follows(%d:", i);
        -: 3074:	prtok(d->tokens[i]);
        -: 3075:	fprintf(stderr, "):");
        -: 3076:	for (j = d->follows[i].nelem - 1; j >= 0; --j)
        -: 3077:	  {
        -: 3078:	    fprintf(stderr, " %d:", d->follows[i].elems[j].index);
        -: 3079:	    prtok(d->tokens[d->follows[i].elems[j].index]);
        -: 3080:	  }
        -: 3081:	putc('\n', stderr);
        -: 3082:#endif
     6194: 3083:	copy(&d->follows[i], &merged);
call    0 returned 6194
     6194: 3084:	epsclosure(&merged, d);
call    0 returned 6194
     6194: 3085:	if (d->follows[i].nelem < merged.nelem)
branch  0 taken 0 (fallthrough)
branch  1 taken 6194
    #####: 3086:	  REALLOC(d->follows[i].elems, position, merged.nelem);
call    0 never executed
     6194: 3087:	copy(&merged, &d->follows[i]);
call    0 returned 6194
        -: 3088:      }
        -: 3089:
        -: 3090:  /* Get the epsilon closure of the firstpos of the regexp.  The result will
        -: 3091:     be the set of positions of state 0. */
      722: 3092:  merged.nelem = 0;
     1776: 3093:  for (i = 0; i < nfirstpos[-1]; ++i)
branch  0 taken 1054
branch  1 taken 722 (fallthrough)
     1054: 3094:    insert(firstpos[i], &merged);
call    0 returned 1054
      722: 3095:  epsclosure(&merged, d);
call    0 returned 722
        -: 3096:
        -: 3097:  /* Check if any of the positions of state 0 will want newline context. */
      722: 3098:  wants_newline = 0;
     1775: 3099:  for (i = 0; i < merged.nelem; ++i)
branch  0 taken 1053
branch  1 taken 722 (fallthrough)
     1053: 3100:    if (PREV_NEWLINE_DEPENDENT(merged.elems[i].constraint))
branch  0 taken 120 (fallthrough)
branch  1 taken 933
      120: 3101:      wants_newline = 1;
        -: 3102:
        -: 3103:  /* Build the initial state. */
      722: 3104:  d->salloc = 1;
      722: 3105:  d->sindex = 0;
      722: 3106:  MALLOC(d->states, dfa_state, d->salloc);
call    0 returned 722
      722: 3107:  state_index(d, &merged, wants_newline, 0);
call    0 returned 722
        -: 3108:
      722: 3109:  free(o_nullable);
      722: 3110:  free(o_nfirst);
      722: 3111:  free(o_firstpos);
      722: 3112:  free(o_nlast);
      722: 3113:  free(o_lastpos);
      722: 3114:  free(nalloc);
      722: 3115:  free(merged.elems);
      722: 3116:}
        -: 3117:
        -: 3118:/* Find, for each character, the transition out of state s of d, and store
        -: 3119:   it in the appropriate slot of trans.
        -: 3120:
        -: 3121:   We divide the positions of s into groups (positions can appear in more
        -: 3122:   than one group).  Each group is labeled with a set of characters that
        -: 3123:   every position in the group matches (taking into account, if necessary,
        -: 3124:   preceding context information of s).  For each group, find the union
        -: 3125:   of the its elements' follows.  This set is the set of positions of the
        -: 3126:   new state.  For each character in the group's label, set the transition
        -: 3127:   on this character to be to a state corresponding to the set's positions,
        -: 3128:   and its associated backward context information, if necessary.
        -: 3129:
        -: 3130:   If we are building a searching matcher, we include the positions of state
        -: 3131:   0 in every state.
        -: 3132:
        -: 3133:   The collection of groups is constructed by building an equivalence-class
        -: 3134:   partition of the positions of s.
        -: 3135:
        -: 3136:   For each position, find the set of characters C that it matches.  Eliminate
        -: 3137:   any characters from C that fail on grounds of backward context.
        -: 3138:
        -: 3139:   Search through the groups, looking for a group whose label L has nonempty
        -: 3140:   intersection with C.  If L - C is nonempty, create a new group labeled
        -: 3141:   L - C and having the same positions as the current group, and set L to
        -: 3142:   the intersection of L and C.  Insert the position in this group, set
        -: 3143:   C = C - L, and resume scanning.
        -: 3144:
        -: 3145:   If after comparing with every group there are characters remaining in C,
        -: 3146:   create a new group labeled with the characters of C and insert this
        -: 3147:   position in that group. */
        -: 3148:void
function dfastate called 4041 returned 100% blocks executed 97%
     4041: 3149:dfastate(s, d, trans)
        -: 3150:     int s;
        -: 3151:     struct dfa *d;
        -: 3152:     int trans[];
        -: 3153:{
        -: 3154:  position_set grps[NOTCHAR];	/* As many as will ever be needed. */
        -: 3155:  charclass labels[NOTCHAR];	/* Labels corresponding to the groups. */
     4041: 3156:  int ngrps = 0;		/* Number of groups actually used. */
        -: 3157:  position pos;			/* Current position being considered. */
        -: 3158:  charclass matches;		/* Set of matching characters. */
        -: 3159:  int matchesf;			/* True if matches is nonempty. */
        -: 3160:  charclass intersect;		/* Intersection with some label set. */
        -: 3161:  int intersectf;		/* True if intersect is nonempty. */
        -: 3162:  charclass leftovers;		/* Stuff in the label that didn't match. */
        -: 3163:  int leftoversf;		/* True if leftovers is nonempty. */
        -: 3164:  static charclass letters;	/* Set of characters considered letters. */
        -: 3165:  static charclass newline;	/* Set of characters that aren't newline. */
        -: 3166:  position_set follows;		/* Union of the follows of some group. */
        -: 3167:  position_set tmp;		/* Temporary space for merging sets. */
        -: 3168:  int state;			/* New state. */
        -: 3169:  int wants_newline;		/* New state wants to know newline context. */
        -: 3170:  int state_newline;		/* New state on a newline transition. */
        -: 3171:  int wants_letter;		/* New state wants to know letter context. */
        -: 3172:  int state_letter;		/* New state on a letter transition. */
        -: 3173:  static int initialized;	/* Flag for static initialization. */
        -: 3174:  int i, j, k;
        -: 3175:
        -: 3176:  /* Initialize the set of letters, if necessary. */
     4041: 3177:  if (! initialized)
branch  0 taken 504 (fallthrough)
branch  1 taken 3537
        -: 3178:    {
      504: 3179:      initialized = 1;
   129528: 3180:      for (i = 0; i < NOTCHAR; ++i)
branch  0 taken 129024
branch  1 taken 504 (fallthrough)
   129024: 3181:	if (IS_WORD_CONSTITUENT(i))
branch  0 taken 97776 (fallthrough)
branch  1 taken 31248
branch  2 taken 504 (fallthrough)
branch  3 taken 97272
    31752: 3182:	  setbit(i, letters);
call    0 returned 31752
      504: 3183:      setbit(eolbyte_1, newline);
call    0 returned 504
        -: 3184:    }
        -: 3185:
     4041: 3186:  zeroset(matches);
call    0 returned 4041
        -: 3187:
    15395: 3188:  for (i = 0; i < d->states[s].elems.nelem; ++i)
branch  0 taken 11354
branch  1 taken 4041 (fallthrough)
        -: 3189:    {
    11354: 3190:      pos = d->states[s].elems.elems[i];
    11354: 3191:      if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR)
branch  0 taken 10805 (fallthrough)
branch  1 taken 549
branch  2 taken 10398 (fallthrough)
branch  3 taken 407
    10398: 3192:	setbit(d->tokens[pos.index], matches);
call    0 returned 10398
      956: 3193:      else if (d->tokens[pos.index] >= CSET)
branch  0 taken 407 (fallthrough)
branch  1 taken 549
      407: 3194:	copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
call    0 returned 407
        -: 3195:      else
      549: 3196:	continue;
        -: 3197:
        -: 3198:      /* Some characters may need to be eliminated from matches because
        -: 3199:	 they fail in the current context. */
    10805: 3200:      if (pos.constraint != 0xFF)
branch  0 taken 3295 (fallthrough)
branch  1 taken 7510
        -: 3201:	{
     3295: 3202:	  if (! MATCHES_NEWLINE_CONTEXT(pos.constraint,
branch  0 taken 117 (fallthrough)
branch  1 taken 3178
branch  2 taken 1008 (fallthrough)
branch  3 taken 2287
        -: 3203:					 d->states[s].newline, 1))
     1008: 3204:	    clrbit(eolbyte_1, matches);
call    0 returned 1008
     3295: 3205:	  if (! MATCHES_NEWLINE_CONTEXT(pos.constraint,
branch  0 taken 117 (fallthrough)
branch  1 taken 3178
branch  2 taken 1009 (fallthrough)
branch  3 taken 2286
        -: 3206:					 d->states[s].newline, 0))
     9081: 3207:	    for (j = 0; j < CHARCLASS_INTS; ++j)
branch  0 taken 8072
branch  1 taken 1009 (fallthrough)
     8072: 3208:	      matches[j] &= newline[j];
     3295: 3209:	  if (! MATCHES_LETTER_CONTEXT(pos.constraint,
branch  0 taken 1577 (fallthrough)
branch  1 taken 1718
branch  2 taken 1577 (fallthrough)
branch  3 taken 1718
        -: 3210:					d->states[s].letter, 1))
    14193: 3211:	    for (j = 0; j < CHARCLASS_INTS; ++j)
branch  0 taken 12616
branch  1 taken 1577 (fallthrough)
    12616: 3212:	      matches[j] &= ~letters[j];
     3295: 3213:	  if (! MATCHES_LETTER_CONTEXT(pos.constraint,
branch  0 taken 1577 (fallthrough)
branch  1 taken 1718
branch  2 taken 1405 (fallthrough)
branch  3 taken 1890
        -: 3214:					d->states[s].letter, 0))
    12645: 3215:	    for (j = 0; j < CHARCLASS_INTS; ++j)
branch  0 taken 11240
branch  1 taken 1405 (fallthrough)
    11240: 3216:	      matches[j] &= letters[j];
        -: 3217:
        -: 3218:	  /* If there are no characters left, there's no point in going on. */
    26108: 3219:	  for (j = 0; j < CHARCLASS_INTS && !matches[j]; ++j)
branch  0 taken 23522 (fallthrough)
branch  1 taken 2586
branch  2 taken 22813
branch  3 taken 709 (fallthrough)
    22813: 3220:	    continue;
     3295: 3221:	  if (j == CHARCLASS_INTS)
branch  0 taken 2586 (fallthrough)
branch  1 taken 709
     2586: 3222:	    continue;
        -: 3223:	}
        -: 3224:
    13558: 3225:      for (j = 0; j < ngrps; ++j)
branch  0 taken 6633
branch  1 taken 6925 (fallthrough)
        -: 3226:	{
        -: 3227:	  /* If matches contains a single character only, and the current
        -: 3228:	     group's label doesn't contain that character, go on to the
        -: 3229:	     next group. */
     6633: 3230:	  if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR
branch  0 taken 6633 (fallthrough)
branch  1 taken 0
branch  2 taken 6338 (fallthrough)
branch  3 taken 295
     6338: 3231:	      && !tstbit(d->tokens[pos.index], labels[j]))
call    0 returned 6338
branch  1 taken 5046 (fallthrough)
branch  2 taken 1292
     5046: 3232:	    continue;
        -: 3233:
        -: 3234:	  /* Check if this group's label has a nonempty intersection with
        -: 3235:	     matches. */
     1587: 3236:	  intersectf = 0;
    14283: 3237:	  for (k = 0; k < CHARCLASS_INTS; ++k)
branch  0 taken 12696
branch  1 taken 1587 (fallthrough)
    12696: 3238:	    (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 0;
branch  0 taken 1459 (fallthrough)
branch  1 taken 11237
     1587: 3239:	  if (! intersectf)
branch  0 taken 135 (fallthrough)
branch  1 taken 1452
      135: 3240:	    continue;
        -: 3241:
        -: 3242:	  /* It does; now find the set differences both ways. */
     1452: 3243:	  leftoversf = matchesf = 0;
    13068: 3244:	  for (k = 0; k < CHARCLASS_INTS; ++k)
branch  0 taken 11616
branch  1 taken 1452 (fallthrough)
        -: 3245:	    {
        -: 3246:	      /* Even an optimizing compiler can't know this for sure. */
    11616: 3247:	      int match = matches[k], label = labels[j][k];
        -: 3248:
    11616: 3249:	      (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0;
branch  0 taken 2636 (fallthrough)
branch  1 taken 8980
    11616: 3250:	      (matches[k] = match & ~label) ? (matchesf = 1) : 0;
branch  0 taken 1264 (fallthrough)
branch  1 taken 10352
        -: 3251:	    }
        -: 3252:
        -: 3253:	  /* If there were leftovers, create a new group labeled with them. */
     1452: 3254:	  if (leftoversf)
branch  0 taken 332 (fallthrough)
branch  1 taken 1120
        -: 3255:	    {
      332: 3256:	      copyset(leftovers, labels[ngrps]);
call    0 returned 332
      332: 3257:	      copyset(intersect, labels[j]);
call    0 returned 332
      332: 3258:	      MALLOC(grps[ngrps].elems, position, d->nleaves);
call    0 returned 332
      332: 3259:	      copy(&grps[j], &grps[ngrps]);
call    0 returned 332
      332: 3260:	      ++ngrps;
        -: 3261:	    }
        -: 3262:
        -: 3263:	  /* Put the position in the current group.  Note that there is no
        -: 3264:	     reason to call insert() here. */
     1452: 3265:	  grps[j].elems[grps[j].nelem++] = pos;
        -: 3266:
        -: 3267:	  /* If every character matching the current position has been
        -: 3268:	     accounted for, we're done. */
     1452: 3269:	  if (! matchesf)
branch  0 taken 1294 (fallthrough)
branch  1 taken 158
     1294: 3270:	    break;
        -: 3271:	}
        -: 3272:
        -: 3273:      /* If we've passed the last group, and there are still characters
        -: 3274:	 unaccounted for, then we'll have to create a new group. */
     8219: 3275:      if (j == ngrps)
branch  0 taken 6925 (fallthrough)
branch  1 taken 1294
        -: 3276:	{
     6925: 3277:	  copyset(matches, labels[ngrps]);
call    0 returned 6925
     6925: 3278:	  zeroset(matches);
call    0 returned 6925
     6925: 3279:	  MALLOC(grps[ngrps].elems, position, d->nleaves);
call    0 returned 6925
     6925: 3280:	  grps[ngrps].nelem = 1;
     6925: 3281:	  grps[ngrps].elems[0] = pos;
     6925: 3282:	  ++ngrps;
        -: 3283:	}
        -: 3284:    }
        -: 3285:
     4041: 3286:  MALLOC(follows.elems, position, d->nleaves);
call    0 returned 4041
     4041: 3287:  MALLOC(tmp.elems, position, d->nleaves);
call    0 returned 4041
        -: 3288:
        -: 3289:  /* If we are a searching matcher, the default transition is to a state
        -: 3290:     containing the positions of state 0, otherwise the default transition
        -: 3291:     is to fail miserably. */
     4041: 3292:  if (d->searchflag)
branch  0 taken 4041 (fallthrough)
branch  1 taken 0
        -: 3293:    {
     4041: 3294:      wants_newline = 0;
     4041: 3295:      wants_letter = 0;
    11027: 3296:      for (i = 0; i < d->states[0].elems.nelem; ++i)
branch  0 taken 6986
branch  1 taken 4041 (fallthrough)
        -: 3297:	{
     6986: 3298:	  if (PREV_NEWLINE_DEPENDENT(d->states[0].elems.elems[i].constraint))
branch  0 taken 1130 (fallthrough)
branch  1 taken 5856
     1130: 3299:	    wants_newline = 1;
     6986: 3300:	  if (PREV_LETTER_DEPENDENT(d->states[0].elems.elems[i].constraint))
branch  0 taken 2169 (fallthrough)
branch  1 taken 4817
     2169: 3301:	    wants_letter = 1;
        -: 3302:	}
     4041: 3303:      copy(&d->states[0].elems, &follows);
call    0 returned 4041
     4041: 3304:      state = state_index(d, &follows, 0, 0);
call    0 returned 4041
     4041: 3305:      if (wants_newline)
branch  0 taken 800 (fallthrough)
branch  1 taken 3241
      800: 3306:	state_newline = state_index(d, &follows, 1, 0);
call    0 returned 800
        -: 3307:      else
     3241: 3308:	state_newline = state;
     4041: 3309:      if (wants_letter)
branch  0 taken 1557 (fallthrough)
branch  1 taken 2484
     1557: 3310:	state_letter = state_index(d, &follows, 0, 1);
call    0 returned 1557
        -: 3311:      else
     2484: 3312:	state_letter = state;
  1038537: 3313:      for (i = 0; i < NOTCHAR; ++i)
branch  0 taken 1034496
branch  1 taken 4041 (fallthrough)
  1034496: 3314:	trans[i] = (IS_WORD_CONSTITUENT(i)) ? state_letter : state;
branch  0 taken 783954 (fallthrough)
branch  1 taken 250542
branch  2 taken 4041 (fallthrough)
branch  3 taken 779913
     4041: 3315:      trans[eolbyte_1] = state_newline;
        -: 3316:    }
        -: 3317:  else
    #####: 3318:    for (i = 0; i < NOTCHAR; ++i)
branch  0 never executed
branch  1 never executed
    #####: 3319:      trans[i] = -1;
        -: 3320:
    11298: 3321:  for (i = 0; i < ngrps; ++i)
branch  0 taken 7257
branch  1 taken 4041 (fallthrough)
        -: 3322:    {
     7257: 3323:      follows.nelem = 0;
        -: 3324:
        -: 3325:      /* Find the union of the follows of the positions of the group.
        -: 3326:	 This is a hideously inefficient loop.  Fix it someday. */
    15966: 3327:      for (j = 0; j < grps[i].nelem; ++j)
branch  0 taken 8709
branch  1 taken 7257 (fallthrough)
    18227: 3328:	for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k)
branch  0 taken 9518
branch  1 taken 8709 (fallthrough)
     9518: 3329:	  insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
call    0 returned 9518
        -: 3330:
        -: 3331:      /* If we are building a searching matcher, throw in the positions
        -: 3332:	 of state 0 as well. */
     7257: 3333:      if (d->searchflag)
branch  0 taken 7257 (fallthrough)
branch  1 taken 0
    21066: 3334:	for (j = 0; j < d->states[0].elems.nelem; ++j)
branch  0 taken 13809
branch  1 taken 7257 (fallthrough)
    13809: 3335:	  insert(d->states[0].elems.elems[j], &follows);
call    0 returned 13809
        -: 3336:
        -: 3337:      /* Find out if the new state will want any context information. */
     7257: 3338:      wants_newline = 0;
     7257: 3339:      if (tstbit(eolbyte_1, labels[i]))
call    0 returned 7257
branch  1 taken 37 (fallthrough)
branch  2 taken 7220
      144: 3340:	for (j = 0; j < follows.nelem; ++j)
branch  0 taken 107
branch  1 taken 37 (fallthrough)
      107: 3341:	  if (PREV_NEWLINE_DEPENDENT(follows.elems[j].constraint))
branch  0 taken 0 (fallthrough)
branch  1 taken 107
    #####: 3342:	    wants_newline = 1;
        -: 3343:
     7257: 3344:      wants_letter = 0;
    33928: 3345:      for (j = 0; j < CHARCLASS_INTS; ++j)
branch  0 taken 32682
branch  1 taken 1246 (fallthrough)
    32682: 3346:	if (labels[i][j] & letters[j])
branch  0 taken 6011 (fallthrough)
branch  1 taken 26671
     6011: 3347:	  break;
     7257: 3348:      if (j < CHARCLASS_INTS)
branch  0 taken 6011 (fallthrough)
branch  1 taken 1246
    24625: 3349:	for (j = 0; j < follows.nelem; ++j)
branch  0 taken 18614
branch  1 taken 6011 (fallthrough)
    18614: 3350:	  if (PREV_LETTER_DEPENDENT(follows.elems[j].constraint))
branch  0 taken 2358 (fallthrough)
branch  1 taken 16256
     2358: 3351:	    wants_letter = 1;
        -: 3352:
        -: 3353:      /* Find the state(s) corresponding to the union of the follows. */
     7257: 3354:      state = state_index(d, &follows, 0, 0);
call    0 returned 7257
     7257: 3355:      if (wants_newline)
branch  0 taken 0 (fallthrough)
branch  1 taken 7257
    #####: 3356:	state_newline = state_index(d, &follows, 1, 0);
call    0 never executed
        -: 3357:      else
     7257: 3358:	state_newline = state;
     7257: 3359:      if (wants_letter)
branch  0 taken 1734 (fallthrough)
branch  1 taken 5523
     1734: 3360:	state_letter = state_index(d, &follows, 0, 1);
call    0 returned 1734
        -: 3361:      else
     5523: 3362:	state_letter = state;
        -: 3363:
        -: 3364:      /* Set the transitions for each character in the current label. */
    65313: 3365:      for (j = 0; j < CHARCLASS_INTS; ++j)
branch  0 taken 58056
branch  1 taken 7257 (fallthrough)
  1915848: 3366:	for (k = 0; k < INTBITS; ++k)
branch  0 taken 1857792
branch  1 taken 58056 (fallthrough)
  1857792: 3367:	  if (labels[i][j] & 1 << k)
branch  0 taken 72978 (fallthrough)
branch  1 taken 1784814
        -: 3368:	    {
    72978: 3369:	      int c = j * INTBITS + k;
        -: 3370:
    72978: 3371:	      if (c == eolbyte_1)
branch  0 taken 37 (fallthrough)
branch  1 taken 72941
       37: 3372:		trans[c] = state_newline;
    72941: 3373:	      else if (IS_WORD_CONSTITUENT(c))
branch  0 taken 54129 (fallthrough)
branch  1 taken 18812
branch  2 taken 246 (fallthrough)
branch  3 taken 53883
    19058: 3374:		trans[c] = state_letter;
    53883: 3375:	      else if (c < NOTCHAR)
branch  0 taken 53883 (fallthrough)
branch  1 taken 0
    53883: 3376:		trans[c] = state;
        -: 3377:	    }
        -: 3378:    }
        -: 3379:
    11298: 3380:  for (i = 0; i < ngrps; ++i)
branch  0 taken 7257
branch  1 taken 4041 (fallthrough)
     7257: 3381:    free(grps[i].elems);
     4041: 3382:  free(follows.elems);
     4041: 3383:  free(tmp.elems);
     4041: 3384:}
        -: 3385:
        -: 3386:/* Some routines for manipulating a compiled dfa's transition tables.
        -: 3387:   Each state may or may not have a transition table; if it does, and it
        -: 3388:   is a non-accepting state, then d->trans[state] points to its table.
        -: 3389:   If it is an accepting state then d->fails[state] points to its table.
        -: 3390:   If it has no table at all, then d->trans[state] is NULL.
        -: 3391:   TODO: Improve this comment, get rid of the unnecessary redundancy. */
        -: 3392:
        -: 3393:static void
function build_state called 4041 returned 100% blocks executed 86%
     4041: 3394:build_state(s, d)
        -: 3395:     int s;
        -: 3396:     struct dfa *d;
        -: 3397:{
        -: 3398:  int *trans;			/* The new transition table. */
        -: 3399:  int i;
        -: 3400:
        -: 3401:  /* Set an upper limit on the number of transition tables that will ever
        -: 3402:     exist at once.  1024 is arbitrary.  The idea is that the frequently
        -: 3403:     used transition tables will be quickly rebuilt, whereas the ones that
        -: 3404:     were only needed once or twice will be cleared away. */
     4041: 3405:  if (d->trcount >= 1024)
branch  0 taken 0 (fallthrough)
branch  1 taken 4041
        -: 3406:    {
    #####: 3407:      for (i = 0; i < d->tralloc; ++i)
branch  0 never executed
branch  1 never executed
    #####: 3408:	if (d->trans[i])
branch  0 never executed
branch  1 never executed
        -: 3409:	  {
    #####: 3410:	    free((ptr_t) d->trans[i]);
    #####: 3411:	    d->trans[i] = NULL;
        -: 3412:	  }
    #####: 3413:	else if (d->fails[i])
branch  0 never executed
branch  1 never executed
        -: 3414:	  {
    #####: 3415:	    free((ptr_t) d->fails[i]);
    #####: 3416:	    d->fails[i] = NULL;
        -: 3417:	  }
    #####: 3418:      d->trcount = 0;
        -: 3419:    }
        -: 3420:
     4041: 3421:  ++d->trcount;
        -: 3422:
        -: 3423:  /* Set up the success bits for this state. */
     4041: 3424:  d->success[s] = 0;
     4041: 3425:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 1, d->states[s].letter, 0,
branch  0 taken 84 (fallthrough)
branch  1 taken 3957
branch  2 taken 548 (fallthrough)
branch  3 taken 3493
branch  4 taken 178 (fallthrough)
branch  5 taken 370
branch  6 taken 546 (fallthrough)
branch  7 taken 2
        -: 3426:      s, *d))
      546: 3427:    d->success[s] |= 4;
     4041: 3428:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 1,
branch  0 taken 84 (fallthrough)
branch  1 taken 3957
branch  2 taken 540 (fallthrough)
branch  3 taken 3501
branch  4 taken 178 (fallthrough)
branch  5 taken 362
branch  6 taken 505 (fallthrough)
branch  7 taken 35
        -: 3429:      s, *d))
      505: 3430:    d->success[s] |= 2;
     4041: 3431:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 0,
branch  0 taken 84 (fallthrough)
branch  1 taken 3957
branch  2 taken 540 (fallthrough)
branch  3 taken 3501
branch  4 taken 178 (fallthrough)
branch  5 taken 362
branch  6 taken 538 (fallthrough)
branch  7 taken 2
        -: 3432:      s, *d))
      538: 3433:    d->success[s] |= 1;
        -: 3434:
     4041: 3435:  MALLOC(trans, int, NOTCHAR);
call    0 returned 4041
     4041: 3436:  dfastate(s, d, trans);
call    0 returned 4041
        -: 3437:
        -: 3438:  /* Now go through the new transition table, and make sure that the trans
        -: 3439:     and fail arrays are allocated large enough to hold a pointer for the
        -: 3440:     largest state mentioned in the table. */
  1038537: 3441:  for (i = 0; i < NOTCHAR; ++i)
branch  0 taken 1034496
branch  1 taken 4041 (fallthrough)
  1034496: 3442:    if (trans[i] >= d->tralloc)
branch  0 taken 1666 (fallthrough)
branch  1 taken 1032830
        -: 3443:      {
     1666: 3444:	int oldalloc = d->tralloc;
        -: 3445:
     3382: 3446:	while (trans[i] >= d->tralloc)
branch  0 taken 1716
branch  1 taken 1666 (fallthrough)
     1716: 3447:	  d->tralloc *= 2;
     1666: 3448:	REALLOC(d->realtrans, int *, d->tralloc + 1);
call    0 returned 1666
     1666: 3449:	d->trans = d->realtrans + 1;
     1666: 3450:	REALLOC(d->fails, int *, d->tralloc);
call    0 returned 1666
     1666: 3451:	REALLOC(d->success, int, d->tralloc);
call    0 returned 1666
     1666: 3452:	REALLOC(d->newlines, int, d->tralloc);
call    0 returned 1666
     8267: 3453:	while (oldalloc < d->tralloc)
branch  0 taken 6601
branch  1 taken 1666 (fallthrough)
        -: 3454:	  {
     6601: 3455:	    d->trans[oldalloc] = NULL;
     6601: 3456:	    d->fails[oldalloc++] = NULL;
        -: 3457:	  }
        -: 3458:      }
        -: 3459:
        -: 3460:  /* Keep the newline transition in a special place so we can use it as
        -: 3461:     a sentinel. */
     4041: 3462:  d->newlines[s] = trans[eolbyte_1];
     4041: 3463:  trans[eolbyte_1] = -1;
        -: 3464:
     4041: 3465:  if (ACCEPTING(s, *d))
branch  0 taken 548 (fallthrough)
branch  1 taken 3493
      548: 3466:    d->fails[s] = trans;
        -: 3467:  else
     3493: 3468:    d->trans[s] = trans;
     4041: 3469:}
        -: 3470:
        -: 3471:static void
function build_state_zero called 504 returned 100% blocks executed 100%
      504: 3472:build_state_zero(d)
        -: 3473:     struct dfa *d;
        -: 3474:{
      504: 3475:  d->tralloc = 1;
      504: 3476:  d->trcount = 0;
      504: 3477:  CALLOC(d->realtrans, int *, d->tralloc + 1);
call    0 returned 504
      504: 3478:  d->trans = d->realtrans + 1;
      504: 3479:  CALLOC(d->fails, int *, d->tralloc);
call    0 returned 504
      504: 3480:  MALLOC(d->success, int, d->tralloc);
call    0 returned 504
      504: 3481:  MALLOC(d->newlines, int, d->tralloc);
call    0 returned 504
      504: 3482:  build_state(0, d);
call    0 returned 504
      504: 3483:}
        -: 3484:
        -: 3485:/* Search through a buffer looking for a match to the given struct dfa.
        -: 3486:   Find the first occurrence of a string matching the regexp in the buffer,
        -: 3487:   and the shortest possible version thereof.  Return a pointer to the first
        -: 3488:   character after the match, or NULL if none is found.  Begin points to
        -: 3489:   the beginning of the buffer, and end points to the first character after
        -: 3490:   its end.  We store a newline in *end to act as a sentinel, so end had
        -: 3491:   better point somewhere valid.  Newline is a flag indicating whether to
        -: 3492:   allow newlines to be in the matching string.  If count is non-
        -: 3493:   NULL it points to a place we're supposed to increment every time we
        -: 3494:   see a newline.  Finally, if backref is non-NULL it points to a place
        -: 3495:   where we're supposed to store a 1 if backreferencing happened and the
        -: 3496:   match needs to be verified by a backtracking matcher.  Otherwise
        -: 3497:   we store a 0 in *backref. */
        -: 3498:char *
function dfaexec called 725580 returned 100% blocks executed 90%
   725580: 3499:dfaexec(d, begin, end, newline, count, backref)
        -: 3500:     struct dfa *d;
        -: 3501:     char *begin;
        -: 3502:     char *end;
        -: 3503:     int newline;
        -: 3504:     int *count;
        -: 3505:     int *backref;
        -: 3506:{
        -: 3507:  register int s, s1, tmp;	/* Current state. */
        -: 3508:  register unsigned char *p;	/* Current input character. */
        -: 3509:  register int **trans, *t;	/* Copy of d->trans so it can be optimized
        -: 3510:				   into a register. */
   725580: 3511:  register unsigned char eol = eolbyte_1;	/* Likewise for eolbyte.  */
        -: 3512:  static int sbit[NOTCHAR];	/* Table for anding with d->success. */
        -: 3513:  static int sbit_init;
        -: 3514:
   725580: 3515:  if (! sbit_init)
branch  0 taken 504 (fallthrough)
branch  1 taken 725076
        -: 3516:    {
        -: 3517:      int i;
        -: 3518:
      504: 3519:      sbit_init = 1;
   129528: 3520:      for (i = 0; i < NOTCHAR; ++i)
branch  0 taken 129024
branch  1 taken 504 (fallthrough)
   129024: 3521:	sbit[i] = (IS_WORD_CONSTITUENT(i)) ? 2 : 1;
branch  0 taken 97776 (fallthrough)
branch  1 taken 31248
branch  2 taken 504 (fallthrough)
branch  3 taken 97272
      504: 3522:      sbit[eol] = 4;
        -: 3523:    }
        -: 3524:
   725580: 3525:  if (! d->tralloc)
branch  0 taken 504 (fallthrough)
branch  1 taken 725076
      504: 3526:    build_state_zero(d);
call    0 returned 504
        -: 3527:
   725580: 3528:  s = s1 = 0;
   725580: 3529:  p = (unsigned char *) begin;
   725580: 3530:  trans = d->trans;
   725580: 3531:  *end = eol;
        -: 3532:
        -: 3533:  for (;;)
        -: 3534:    {
 18341481: 3535:      while ((t = trans[s]) != 0) { /* hand-optimized loop */
branch  0 taken 16846439
branch  1 taken 1495042 (fallthrough)
 16846439: 3536:	s1 = t[*p++];
 16846439: 3537:        if ((t = trans[s1]) == 0) {
branch  0 taken 752997 (fallthrough)
branch  1 taken 16093442
   752997: 3538:           tmp = s ; s = s1 ; s1 = tmp ; /* swap */
   752997: 3539:           break;
        -: 3540:        }
 16093442: 3541:	s = t[*p++];
        -: 3542:      }
        -: 3543:
  2248039: 3544:      if (s >= 0 && p <= (unsigned char *) end && d->fails[s])
branch  0 taken 1198226 (fallthrough)
branch  1 taken 1049813
branch  2 taken 1198226 (fallthrough)
branch  3 taken 0
branch  4 taken 1194689 (fallthrough)
branch  5 taken 3537
        -: 3545:	{
  1194689: 3546:	  if (d->success[s] & sbit[*p])
branch  0 taken 522455 (fallthrough)
branch  1 taken 672234
        -: 3547:	    {
   522455: 3548:	      if (backref)
branch  0 taken 522455 (fallthrough)
branch  1 taken 0
   522455: 3549:		*backref = (d->states[s].backref != 0);
   522455: 3550:	      return (char *) p;
        -: 3551:	    }
        -: 3552:
   672234: 3553:	  s1 = s;
   672234: 3554:	  s = d->fails[s][*p++];
   672234: 3555:	  continue;
        -: 3556:	}
        -: 3557:
        -: 3558:      /* If the previous character was a newline, count it. */
 1053350*: 3559:      if (count && (char *) p <= end && p[-1] == eol)
branch  0 taken 0 (fallthrough)
branch  1 taken 1053350
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3560:	++*count;
        -: 3561:
        -: 3562:      /* Check if we've run off the end of the buffer. */
  1053350: 3563:      if ((char *) p > end)
branch  0 taken 203125 (fallthrough)
branch  1 taken 850225
   203125: 3564:	return NULL;
        -: 3565:
   850225: 3566:      if (s >= 0)
branch  0 taken 3537 (fallthrough)
branch  1 taken 846688
        -: 3567:	{
     3537: 3568:	  build_state(s, d);
call    0 returned 3537
     3537: 3569:	  trans = d->trans;
     3537: 3570:	  continue;
        -: 3571:	}
        -: 3572:
  846688*: 3573:      if (p[-1] == eol && newline)
branch  0 taken 846688 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 846688
        -: 3574:	{
    #####: 3575:	  s = d->newlines[s1];
    #####: 3576:	  continue;
        -: 3577:	}
        -: 3578:
   846688: 3579:      s = 0;
        -: 3580:    }
        -: 3581:}
        -: 3582:
        -: 3583:/* Initialize the components of a dfa that the other routines don't
        -: 3584:   initialize for themselves. */
        -: 3585:void
function dfainit called 722 returned 100% blocks executed 100%
      722: 3586:dfainit(d)
        -: 3587:     struct dfa *d;
        -: 3588:{
      722: 3589:  d->calloc = 1;
      722: 3590:  MALLOC(d->charclasses, charclass, d->calloc);
call    0 returned 722
      722: 3591:  d->cindex = 0;
        -: 3592:
      722: 3593:  d->talloc = 1;
      722: 3594:  MALLOC(d->tokens, token, d->talloc);
call    0 returned 722
      722: 3595:  d->tindex = d->depth = d->nleaves = d->nregexps = 0;
        -: 3596:
      722: 3597:  d->searchflag = 0;
      722: 3598:  d->tralloc = 0;
        -: 3599:
      722: 3600:  d->musts = 0;
      722: 3601:}
        -: 3602:
        -: 3603:/* Parse and analyze a single string of the given length. */
        -: 3604:void
function dfacomp called 722 returned 100% blocks executed 95%
      722: 3605:dfacomp(s, len, d, searchflag)
        -: 3606:     char *s;
        -: 3607:     size_t len;
        -: 3608:     struct dfa *d;
        -: 3609:     int searchflag;
        -: 3610:{
      722: 3611:  if (case_fold)	/* dummy folding in service of dfamust() */
branch  0 taken 58 (fallthrough)
branch  1 taken 664
        -: 3612:    {
        -: 3613:      char *lcopy;
        -: 3614:      int i;
        -: 3615:
       58: 3616:      lcopy = malloc(len);
       58: 3617:      if (!lcopy)
branch  0 taken 0 (fallthrough)
branch  1 taken 58
    #####: 3618:	dfaerror(_("out of memory"));
call    0 never executed
        -: 3619:
        -: 3620:      /* This is a kludge. */
       58: 3621:      case_fold = 0;
      444: 3622:      for (i = 0; i < len; ++i)
branch  0 taken 386
branch  1 taken 58 (fallthrough)
      386: 3623:	if (ISUPPER ((unsigned char) s[i]))
branch  0 taken 27 (fallthrough)
branch  1 taken 359
       27: 3624:	  lcopy[i] = tolower ((unsigned char) s[i]);
        -: 3625:	else
      359: 3626:	  lcopy[i] = s[i];
        -: 3627:
       58: 3628:      dfainit(d);
call    0 returned 58
       58: 3629:      dfaparse(lcopy, len, d);
call    0 returned 58
       58: 3630:      free(lcopy);
       58: 3631:      dfamust(d);
call    0 returned 58
       58: 3632:      d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
       58: 3633:      case_fold = 1;
       58: 3634:      dfaparse(s, len, d);
call    0 returned 58
       58: 3635:      dfaanalyze(d, searchflag);
call    0 returned 58
        -: 3636:    }
        -: 3637:  else
        -: 3638:    {
      664: 3639:        dfainit(d);
call    0 returned 664
      664: 3640:        dfaparse(s, len, d);
call    0 returned 664
      664: 3641:	dfamust(d);
call    0 returned 664
      664: 3642:        dfaanalyze(d, searchflag);
call    0 returned 664
        -: 3643:    }
      722: 3644:}
        -: 3645:
        -: 3646:/* Free the storage held by the components of a dfa. */
        -: 3647:void
function dfafree called 0 returned 0% blocks executed 0%
    #####: 3648:dfafree(d)
        -: 3649:     struct dfa *d;
        -: 3650:{
        -: 3651:  int i;
        -: 3652:  struct dfamust *dm, *ndm;
        -: 3653:
    #####: 3654:  free((ptr_t) d->charclasses);
    #####: 3655:  free((ptr_t) d->tokens);
    #####: 3656:  for (i = 0; i < d->sindex; ++i)
branch  0 never executed
branch  1 never executed
    #####: 3657:    free((ptr_t) d->states[i].elems.elems);
    #####: 3658:  free((ptr_t) d->states);
    #####: 3659:  for (i = 0; i < d->tindex; ++i)
branch  0 never executed
branch  1 never executed
    #####: 3660:    if (d->follows[i].elems)
branch  0 never executed
branch  1 never executed
    #####: 3661:      free((ptr_t) d->follows[i].elems);
    #####: 3662:  free((ptr_t) d->follows);
    #####: 3663:  for (i = 0; i < d->tralloc; ++i)
branch  0 never executed
branch  1 never executed
    #####: 3664:    if (d->trans[i])
branch  0 never executed
branch  1 never executed
    #####: 3665:      free((ptr_t) d->trans[i]);
    #####: 3666:    else if (d->fails[i])
branch  0 never executed
branch  1 never executed
    #####: 3667:      free((ptr_t) d->fails[i]);
    #####: 3668:  if (d->realtrans) free((ptr_t) d->realtrans);
branch  0 never executed
branch  1 never executed
    #####: 3669:  if (d->fails) free((ptr_t) d->fails);
branch  0 never executed
branch  1 never executed
    #####: 3670:  if (d->newlines) free((ptr_t) d->newlines);
branch  0 never executed
branch  1 never executed
    #####: 3671:  if (d->success) free((ptr_t) d->success);
branch  0 never executed
branch  1 never executed
    #####: 3672:  for (dm = d->musts; dm; dm = ndm)
branch  0 never executed
branch  1 never executed
        -: 3673:    {
    #####: 3674:      ndm = dm->next;
    #####: 3675:      free(dm->must);
    #####: 3676:      free((ptr_t) dm);
        -: 3677:    }
    #####: 3678:}
        -: 3679:
        -: 3680:/* Having found the postfix representation of the regular expression,
        -: 3681:   try to find a long sequence of characters that must appear in any line
        -: 3682:   containing the r.e.
        -: 3683:   Finding a "longest" sequence is beyond the scope here;
        -: 3684:   we take an easy way out and hope for the best.
        -: 3685:   (Take "(ab|a)b"--please.)
        -: 3686:
        -: 3687:   We do a bottom-up calculation of sequences of characters that must appear
        -: 3688:   in matches of r.e.'s represented by trees rooted at the nodes of the postfix
        -: 3689:   representation:
        -: 3690:	sequences that must appear at the left of the match ("left")
        -: 3691:	sequences that must appear at the right of the match ("right")
        -: 3692:	lists of sequences that must appear somewhere in the match ("in")
        -: 3693:	sequences that must constitute the match ("is")
        -: 3694:
        -: 3695:   When we get to the root of the tree, we use one of the longest of its
        -: 3696:   calculated "in" sequences as our answer.  The sequence we find is returned in
        -: 3697:   d->must (where "d" is the single argument passed to "dfamust");
        -: 3698:   the length of the sequence is returned in d->mustn.
        -: 3699:
        -: 3700:   The sequences calculated for the various types of node (in pseudo ANSI c)
        -: 3701:   are shown below.  "p" is the operand of unary operators (and the left-hand
        -: 3702:   operand of binary operators); "q" is the right-hand operand of binary
        -: 3703:   operators.
        -: 3704:
        -: 3705:   "ZERO" means "a zero-length sequence" below.
        -: 3706:
        -: 3707:	Type	left		right		is		in
        -: 3708:	----	----		-----		--		--
        -: 3709:	char c	# c		# c		# c		# c
        -: 3710:
        -: 3711:	CSET	ZERO		ZERO		ZERO		ZERO
        -: 3712:
        -: 3713:	STAR	ZERO		ZERO		ZERO		ZERO
        -: 3714:
        -: 3715:	QMARK	ZERO		ZERO		ZERO		ZERO
        -: 3716:
        -: 3717:	PLUS	p->left		p->right	ZERO		p->in
        -: 3718:
        -: 3719:	CAT	(p->is==ZERO)?	(q->is==ZERO)?	(p->is!=ZERO &&	p->in plus
        -: 3720:		p->left :	q->right :	q->is!=ZERO) ?	q->in plus
        -: 3721:		p->is##q->left	p->right##q->is	p->is##q->is :	p->right##q->left
        -: 3722:						ZERO
        -: 3723:
        -: 3724:	OR	longest common	longest common	(do p->is and	substrings common to
        -: 3725:		leading		trailing	q->is have same	p->in and q->in
        -: 3726:		(sub)sequence	(sub)sequence	length and
        -: 3727:		of p->left	of p->right	content) ?
        -: 3728:		and q->left	and q->right	p->is : NULL
        -: 3729:
        -: 3730:   If there's anything else we recognize in the tree, all four sequences get set
        -: 3731:   to zero-length sequences.  If there's something we don't recognize in the tree,
        -: 3732:   we just return a zero-length sequence.
        -: 3733:
        -: 3734:   Break ties in favor of infrequent letters (choosing 'zzz' in preference to
        -: 3735:   'aaa')?
        -: 3736:
        -: 3737:   And. . .is it here or someplace that we might ponder "optimizations" such as
        -: 3738:	egrep 'psi|epsilon'	->	egrep 'psi'
        -: 3739:	egrep 'pepsi|epsilon'	->	egrep 'epsi'
        -: 3740:					(Yes, we now find "epsi" as a "string
        -: 3741:					that must occur", but we might also
        -: 3742:					simplify the *entire* r.e. being sought)
        -: 3743:	grep '[c]'		->	grep 'c'
        -: 3744:	grep '(ab|a)b'		->	grep 'ab'
        -: 3745:	grep 'ab*'		->	grep 'a'
        -: 3746:	grep 'a*b'		->	grep 'b'
        -: 3747:
        -: 3748:   There are several issues:
        -: 3749:
        -: 3750:   Is optimization easy (enough)?
        -: 3751:
        -: 3752:   Does optimization actually accomplish anything,
        -: 3753:   or is the automaton you get from "psi|epsilon" (for example)
        -: 3754:   the same as the one you get from "psi" (for example)?
        -: 3755:
        -: 3756:   Are optimizable r.e.'s likely to be used in real-life situations
        -: 3757:   (something like 'ab*' is probably unlikely; something like is
        -: 3758:   'psi|epsilon' is likelier)? */
        -: 3759:
        -: 3760:static char *
function icatalloc called 31613 returned 100% blocks executed 94%
    31613: 3761:icatalloc(old, new)
        -: 3762:     char *old;
        -: 3763:     char *new;
        -: 3764:{
        -: 3765:  char *result;
        -: 3766:  size_t oldsize, newsize;
        -: 3767:
   31613*: 3768:  newsize = (new == NULL) ? 0 : strlen(new);
branch  0 taken 31613 (fallthrough)
branch  1 taken 0
    31613: 3769:  if (old == NULL)
branch  0 taken 18960 (fallthrough)
branch  1 taken 12653
    18960: 3770:    oldsize = 0;
    12653: 3771:  else if (newsize == 0)
branch  0 taken 390 (fallthrough)
branch  1 taken 12263
      390: 3772:    return old;
    12263: 3773:  else	oldsize = strlen(old);
    31223: 3774:  if (old == NULL)
branch  0 taken 18960 (fallthrough)
branch  1 taken 12263
    18960: 3775:    result = (char *) malloc(newsize + 1);
        -: 3776:  else
    12263: 3777:    result = (char *) realloc((void *) old, oldsize + newsize + 1);
    31223: 3778:  if (result != NULL && new != NULL)
branch  0 taken 31223 (fallthrough)
branch  1 taken 0
branch  2 taken 31223 (fallthrough)
branch  3 taken 0
    31223: 3779:    (void) strcpy(result + oldsize, new);
    31223: 3780:  return result;
        -: 3781:}
        -: 3782:
        -: 3783:static char *
function icpyalloc called 18960 returned 100% blocks executed 100%
    18960: 3784:icpyalloc(string)
        -: 3785:     char *string;
        -: 3786:{
    18960: 3787:  return icatalloc((char *) NULL, string);
call    0 returned 18960
        -: 3788:}
        -: 3789:
        -: 3790:static char *
function istrstr called 25874 returned 100% blocks executed 100%
    25874: 3791:istrstr(lookin, lookfor)
        -: 3792:     char *lookin;
        -: 3793:     char *lookfor;
        -: 3794:{
        -: 3795:  char *cp;
        -: 3796:  size_t len;
        -: 3797:
    25874: 3798:  len = strlen(lookfor);
    85329: 3799:  for (cp = lookin; *cp != '\0'; ++cp)
branch  0 taken 67824
branch  1 taken 17505 (fallthrough)
    67824: 3800:    if (strncmp(cp, lookfor, len) == 0)
branch  0 taken 8369 (fallthrough)
branch  1 taken 59455
     8369: 3801:      return cp;
    17505: 3802:  return NULL;
        -: 3803:}
        -: 3804:
        -: 3805:static void
function ifree called 54736 returned 100% blocks executed 100%
    54736: 3806:ifree(cp)
        -: 3807:     char *cp;
        -: 3808:{
    54736: 3809:  if (cp != NULL)
branch  0 taken 54736 (fallthrough)
branch  1 taken 0
    54736: 3810:    free(cp);
    54736: 3811:}
        -: 3812:
        -: 3813:static void
function freelist called 20632 returned 100% blocks executed 83%
    20632: 3814:freelist(cpp)
        -: 3815:     char **cpp;
        -: 3816:{
        -: 3817:  int i;
        -: 3818:
    20632: 3819:  if (cpp == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 20632
    #####: 3820:    return;
    27263: 3821:  for (i = 0; cpp[i] != NULL; ++i)
branch  0 taken 6631
branch  1 taken 20632 (fallthrough)
        -: 3822:    {
     6631: 3823:      free(cpp[i]);
     6631: 3824:      cpp[i] = NULL;
        -: 3825:    }
        -: 3826:}
        -: 3827:
        -: 3828:static char **
function enlist called 15000 returned 100% blocks executed 83%
    15000: 3829:enlist(cpp, new, len)
        -: 3830:     char **cpp;
        -: 3831:     char *new;
        -: 3832:     size_t len;
        -: 3833:{
        -: 3834:  int i, j;
        -: 3835:
    15000: 3836:  if (cpp == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 15000
    #####: 3837:    return NULL;
    15000: 3838:  if ((new = icpyalloc(new)) == NULL)
call    0 returned 15000
branch  1 taken 0 (fallthrough)
branch  2 taken 15000
        -: 3839:    {
    #####: 3840:      freelist(cpp);
call    0 never executed
    #####: 3841:      return NULL;
        -: 3842:    }
    15000: 3843:  new[len] = '\0';
        -: 3844:  /* Is there already something in the list that's new (or longer)? */
    27534: 3845:  for (i = 0; cpp[i] != NULL; ++i)
branch  0 taken 13341
branch  1 taken 14193 (fallthrough)
    13341: 3846:    if (istrstr(cpp[i], new) != NULL)
call    0 returned 13341
branch  1 taken 807 (fallthrough)
branch  2 taken 12534
        -: 3847:      {
      807: 3848:	free(new);
      807: 3849:	return cpp;
        -: 3850:      }
        -: 3851:  /* Eliminate any obsoleted strings. */
    14193: 3852:  j = 0;
    22766: 3853:  while (cpp[j] != NULL)
branch  0 taken 12533
branch  1 taken 10233 (fallthrough)
    12533: 3854:    if (istrstr(new, cpp[j]) == NULL)
call    0 returned 12533
branch  1 taken 4971 (fallthrough)
branch  2 taken 7562
     4971: 3855:      ++j;
        -: 3856:    else
        -: 3857:      {
     7562: 3858:	free(cpp[j]);
     7562: 3859:	if (--i == j)
branch  0 taken 3960 (fallthrough)
branch  1 taken 3602
     3960: 3860:	  break;
     3602: 3861:	cpp[j] = cpp[i];
     3602: 3862:	cpp[i] = NULL;
        -: 3863:      }
        -: 3864:  /* Add the new string. */
    14193: 3865:  cpp = (char **) realloc((char *) cpp, (i + 2) * sizeof *cpp);
    14193: 3866:  if (cpp == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 14193
    #####: 3867:    return NULL;
    14193: 3868:  cpp[i] = new;
    14193: 3869:  cpp[i + 1] = NULL;
    14193: 3870:  return cpp;
        -: 3871:}
        -: 3872:
        -: 3873:/* Given pointers to two strings, return a pointer to an allocated
        -: 3874:   list of their distinct common substrings. Return NULL if something
        -: 3875:   seems wild. */
        -: 3876:static char **
function comsubs called 537 returned 100% blocks executed 88%
      537: 3877:comsubs(left, right)
        -: 3878:     char *left;
        -: 3879:     char *right;
      853: 3880:{
        -: 3881:  char **cpp;
        -: 3882:  char *lcp;
        -: 3883:  char *rcp;
        -: 3884:  size_t i, len;
        -: 3885:
      537: 3886:  if (left == NULL || right == NULL)
branch  0 taken 537 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 537
    #####: 3887:    return NULL;
      537: 3888:  cpp = (char **) malloc(sizeof *cpp);
      537: 3889:  if (cpp == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 537
    #####: 3890:    return NULL;
      537: 3891:  cpp[0] = NULL;
     2474: 3892:  for (lcp = left; *lcp != '\0'; ++lcp)
branch  0 taken 1937
branch  1 taken 537 (fallthrough)
        -: 3893:    {
     1937: 3894:      len = 0;
     1937: 3895:      rcp = index(right, *lcp);
     2699: 3896:      while (rcp != NULL)
branch  0 taken 762
branch  1 taken 1937 (fallthrough)
        -: 3897:	{
     1615: 3898:	  for (i = 1; lcp[i] != '\0' && lcp[i] == rcp[i]; ++i)
branch  0 taken 1247 (fallthrough)
branch  1 taken 368
branch  2 taken 853
branch  3 taken 394 (fallthrough)
      853: 3899:	    continue;
      762: 3900:	  if (i > len)
branch  0 taken 762 (fallthrough)
branch  1 taken 0
      762: 3901:	    len = i;
      762: 3902:	  rcp = index(rcp + 1, *lcp);
        -: 3903:	}
     1937: 3904:      if (len == 0)
branch  0 taken 1175 (fallthrough)
branch  1 taken 762
     1175: 3905:	continue;
      762: 3906:      if ((cpp = enlist(cpp, lcp, len)) == NULL)
call    0 returned 762
branch  1 taken 0 (fallthrough)
branch  2 taken 762
    #####: 3907:	break;
        -: 3908:    }
      537: 3909:  return cpp;
        -: 3910:}
        -: 3911:
        -: 3912:static char **
function addlists called 5464 returned 100% blocks executed 82%
     5464: 3913:addlists(old, new)
        -: 3914:char **old;
        -: 3915:char **new;
        -: 3916:{
        -: 3917:  int i;
        -: 3918:
     5464: 3919:  if (old == NULL || new == NULL)
branch  0 taken 5464 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 5464
    #####: 3920:    return NULL;
    10425: 3921:  for (i = 0; new[i] != NULL; ++i)
branch  0 taken 4961
branch  1 taken 5464 (fallthrough)
        -: 3922:    {
     4961: 3923:      old = enlist(old, new[i], strlen(new[i]));
call    0 returned 4961
     4961: 3924:      if (old == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 4961
    #####: 3925:	break;
        -: 3926:    }
     5464: 3927:  return old;
        -: 3928:}
        -: 3929:
        -: 3930:/* Given two lists of substrings, return a new list giving substrings
        -: 3931:   common to both. */
        -: 3932:static char **
function inboth called 282 returned 100% blocks executed 76%
      282: 3933:inboth(left, right)
        -: 3934:     char **left;
        -: 3935:     char **right;
        -: 3936:{
        -: 3937:  char **both;
        -: 3938:  char **temp;
        -: 3939:  int lnum, rnum;
        -: 3940:
      282: 3941:  if (left == NULL || right == NULL)
branch  0 taken 282 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 282
    #####: 3942:    return NULL;
      282: 3943:  both = (char **) malloc(sizeof *both);
      282: 3944:  if (both == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 282
    #####: 3945:    return NULL;
      282: 3946:  both[0] = NULL;
      675: 3947:  for (lnum = 0; left[lnum] != NULL; ++lnum)
branch  0 taken 393
branch  1 taken 282 (fallthrough)
        -: 3948:    {
      930: 3949:      for (rnum = 0; right[rnum] != NULL; ++rnum)
branch  0 taken 537
branch  1 taken 393 (fallthrough)
        -: 3950:	{
      537: 3951:	  temp = comsubs(left[lnum], right[rnum]);
call    0 returned 537
      537: 3952:	  if (temp == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 537
        -: 3953:	    {
    #####: 3954:	      freelist(both);
call    0 never executed
    #####: 3955:	      return NULL;
        -: 3956:	    }
      537: 3957:	  both = addlists(both, temp);
call    0 returned 537
      537: 3958:	  freelist(temp);
call    0 returned 537
      537: 3959:	  free(temp);
      537: 3960:	  if (both == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 537
    #####: 3961:	    return NULL;
        -: 3962:	}
        -: 3963:    }
      282: 3964:  return both;
        -: 3965:}
        -: 3966:
        -: 3967:typedef struct
        -: 3968:{
        -: 3969:  char **in;
        -: 3970:  char *left;
        -: 3971:  char *right;
        -: 3972:  char *is;
        -: 3973:} must;
        -: 3974:
        -: 3975:static void
function resetmust called 6129 returned 100% blocks executed 100%
     6129: 3976:resetmust(mp)
        -: 3977:must *mp;
        -: 3978:{
     6129: 3979:  mp->left[0] = mp->right[0] = mp->is[0] = '\0';
     6129: 3980:  freelist(mp->in);
call    0 returned 6129
     6129: 3981:}
        -: 3982:
        -: 3983:static void
function dfamust called 722 returned 100% blocks executed 82%
      722: 3984:dfamust(dfa)
        -: 3985:struct dfa *dfa;
        -: 3986:{
        -: 3987:  must *musts;
        -: 3988:  must *mp;
        -: 3989:  char *result;
        -: 3990:  int ri;
        -: 3991:  int i;
        -: 3992:  int exact;
        -: 3993:  token t;
        -: 3994:  static must must0;
        -: 3995:  struct dfamust *dm;
        -: 3996:  static char empty_string[] = "";
        -: 3997:
      722: 3998:  result = empty_string;
      722: 3999:  exact = 0;
      722: 4000:  musts = (must *) malloc((dfa->tindex + 1) * sizeof *musts);
      722: 4001:  if (musts == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 722
    #####: 4002:    return;
      722: 4003:  mp = musts;
    14406: 4004:  for (i = 0; i <= dfa->tindex; ++i)
branch  0 taken 13684
branch  1 taken 722 (fallthrough)
    13684: 4005:    mp[i] = must0;
    14406: 4006:  for (i = 0; i <= dfa->tindex; ++i)
branch  0 taken 13684
branch  1 taken 722 (fallthrough)
        -: 4007:    {
    13684: 4008:      mp[i].in = (char **) malloc(sizeof *mp[i].in);
    13684: 4009:      mp[i].left = malloc(2);
    13684: 4010:      mp[i].right = malloc(2);
    13684: 4011:      mp[i].is = malloc(2);
    13684: 4012:      if (mp[i].in == NULL || mp[i].left == NULL ||
branch  0 taken 13684 (fallthrough)
branch  1 taken 0
branch  2 taken 13684 (fallthrough)
branch  3 taken 0
    13684: 4013:	  mp[i].right == NULL || mp[i].is == NULL)
branch  0 taken 13684 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 13684
    #####: 4014:	goto done;
    13684: 4015:      mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\0';
    13684: 4016:      mp[i].in[0] = NULL;
        -: 4017:    }
        -: 4018:#ifdef DEBUG
        -: 4019:  fprintf(stderr, "dfamust:\n");
        -: 4020:  for (i = 0; i < dfa->tindex; ++i)
        -: 4021:    {
        -: 4022:      fprintf(stderr, " %d:", i);
        -: 4023:      prtok(dfa->tokens[i]);
        -: 4024:    }
        -: 4025:  putc('\n', stderr);
        -: 4026:#endif
    12240: 4027:  for (ri = 0; ri < dfa->tindex; ++ri)
branch  0 taken 12240
branch  1 taken 0 (fallthrough)
        -: 4028:    {
    12240: 4029:      switch (t = dfa->tokens[ri])
branch  0 taken 0
branch  1 taken 459
branch  2 taken 198
branch  3 taken 282
branch  4 taken 180
branch  5 taken 722
branch  6 taken 4927
branch  7 taken 5472
        -: 4030:	{
    #####: 4031:	case LPAREN:
        -: 4032:	case RPAREN:
    #####: 4033:	  goto done;		/* "cannot happen" */
      459: 4034:	case EMPTY:
        -: 4035:	case BEGLINE:
        -: 4036:	case ENDLINE:
        -: 4037:	case BEGWORD:
        -: 4038:	case ENDWORD:
        -: 4039:	case LIMWORD:
        -: 4040:	case NOTLIMWORD:
        -: 4041:	case BACKREF:
      459: 4042:	  resetmust(mp);
call    0 returned 459
      459: 4043:	  break;
      198: 4044:	case STAR:
        -: 4045:	case QMARK:
      198: 4046:	  if (mp <= musts)
branch  0 taken 0 (fallthrough)
branch  1 taken 198
    #####: 4047:	    goto done;		/* "cannot happen" */
      198: 4048:	  --mp;
      198: 4049:	  resetmust(mp);
call    0 returned 198
      198: 4050:	  break;
      282: 4051:	case OR:
        -: 4052:	case ORTOP:
      282: 4053:	  if (mp < &musts[2])
branch  0 taken 0 (fallthrough)
branch  1 taken 282
    #####: 4054:	    goto done;		/* "cannot happen" */
        -: 4055:	  {
        -: 4056:	    char **new;
        -: 4057:	    must *lmp;
        -: 4058:	    must *rmp;
        -: 4059:	    int j, ln, rn, n;
        -: 4060:
      282: 4061:	    rmp = --mp;
      282: 4062:	    lmp = --mp;
        -: 4063:	    /* Guaranteed to be.  Unlikely, but. . . */
      282: 4064:	    if (strcmp(lmp->is, rmp->is) != 0)
branch  0 taken 121 (fallthrough)
branch  1 taken 161
      121: 4065:	      lmp->is[0] = '\0';
        -: 4066:	    /* Left side--easy */
      282: 4067:	    i = 0;
      282: 4068:	    while (lmp->left[i] != '\0' && lmp->left[i] == rmp->left[i])
branch  0 taken 130 (fallthrough)
branch  1 taken 152
branch  2 taken 0
branch  3 taken 130 (fallthrough)
    #####: 4069:	      ++i;
      282: 4070:	    lmp->left[i] = '\0';
        -: 4071:	    /* Right side */
      282: 4072:	    ln = strlen(lmp->right);
      282: 4073:	    rn = strlen(rmp->right);
      282: 4074:	    n = ln;
      282: 4075:	    if (n > rn)
branch  0 taken 136 (fallthrough)
branch  1 taken 146
      136: 4076:	      n = rn;
      331: 4077:	    for (i = 0; i < n; ++i)
branch  0 taken 263
branch  1 taken 68 (fallthrough)
      263: 4078:	      if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
branch  0 taken 214 (fallthrough)
branch  1 taken 49
      214: 4079:		break;
      331: 4080:	    for (j = 0; j < i; ++j)
branch  0 taken 49
branch  1 taken 282 (fallthrough)
       49: 4081:	      lmp->right[j] = lmp->right[(ln - i) + j];
      282: 4082:	    lmp->right[j] = '\0';
      282: 4083:	    new = inboth(lmp->in, rmp->in);
call    0 returned 282
      282: 4084:	    if (new == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 282
    #####: 4085:	      goto done;
      282: 4086:	    freelist(lmp->in);
call    0 returned 282
      282: 4087:	    free((char *) lmp->in);
      282: 4088:	    lmp->in = new;
        -: 4089:	  }
      282: 4090:	  break;
      180: 4091:	case PLUS:
      180: 4092:	  if (mp <= musts)
branch  0 taken 0 (fallthrough)
branch  1 taken 180
    #####: 4093:	    goto done;		/* "cannot happen" */
      180: 4094:	  --mp;
      180: 4095:	  mp->is[0] = '\0';
      180: 4096:	  break;
      722: 4097:	case END:
      722: 4098:	  if (mp != &musts[1])
branch  0 taken 0 (fallthrough)
branch  1 taken 722
    #####: 4099:	    goto done;		/* "cannot happen" */
     1461: 4100:	  for (i = 0; musts[0].in[i] != NULL; ++i)
branch  0 taken 739
branch  1 taken 722 (fallthrough)
      739: 4101:	    if (strlen(musts[0].in[i]) > strlen(result))
branch  0 taken 681 (fallthrough)
branch  1 taken 58
      681: 4102:	      result = musts[0].in[i];
      722: 4103:	  if (strcmp(result, musts[0].is) == 0)
branch  0 taken 337 (fallthrough)
branch  1 taken 385
      337: 4104:	    exact = 1;
      722: 4105:	  goto done;
     4927: 4106:	case CAT:
     4927: 4107:	  if (mp < &musts[2])
branch  0 taken 0 (fallthrough)
branch  1 taken 4927
    #####: 4108:	    goto done;		/* "cannot happen" */
        -: 4109:	  {
        -: 4110:	    must *lmp;
        -: 4111:	    must *rmp;
        -: 4112:
     4927: 4113:	    rmp = --mp;
     4927: 4114:	    lmp = --mp;
        -: 4115:	    /* In.  Everything in left, plus everything in
        -: 4116:	       right, plus catenation of
        -: 4117:	       left's right and right's left. */
     4927: 4118:	    lmp->in = addlists(lmp->in, rmp->in);
call    0 returned 4927
     4927: 4119:	    if (lmp->in == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 4927
    #####: 4120:	      goto done;
     4927: 4121:	    if (lmp->right[0] != '\0' &&
branch  0 taken 4253 (fallthrough)
branch  1 taken 674
     4253: 4122:		rmp->left[0] != '\0')
branch  0 taken 3960 (fallthrough)
branch  1 taken 293
        -: 4123:	      {
        -: 4124:		char *tp;
        -: 4125:
     3960: 4126:		tp = icpyalloc(lmp->right);
call    0 returned 3960
     3960: 4127:		if (tp == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 3960
    #####: 4128:		  goto done;
     3960: 4129:		tp = icatalloc(tp, rmp->left);
call    0 returned 3960
     3960: 4130:		if (tp == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 3960
    #####: 4131:		  goto done;
     3960: 4132:		lmp->in = enlist(lmp->in, tp,
call    0 returned 3960
        -: 4133:				 strlen(tp));
     3960: 4134:		free(tp);
     3960: 4135:		if (lmp->in == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 3960
    #####: 4136:		  goto done;
        -: 4137:	      }
        -: 4138:	    /* Left-hand */
     4927: 4139:	    if (lmp->is[0] != '\0')
branch  0 taken 1953 (fallthrough)
branch  1 taken 2974
        -: 4140:	      {
     1953: 4141:		lmp->left = icatalloc(lmp->left,
call    0 returned 1953
        -: 4142:				      rmp->left);
     1953: 4143:		if (lmp->left == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 1953
    #####: 4144:		  goto done;
        -: 4145:	      }
        -: 4146:	    /* Right-hand */
     4927: 4147:	    if (rmp->is[0] == '\0')
branch  0 taken 437 (fallthrough)
branch  1 taken 4490
      437: 4148:	      lmp->right[0] = '\0';
     4927: 4149:	    lmp->right = icatalloc(lmp->right, rmp->right);
call    0 returned 4927
     4927: 4150:	    if (lmp->right == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 4927
    #####: 4151:	      goto done;
        -: 4152:	    /* Guaranteed to be */
     4927: 4153:	    if (lmp->is[0] != '\0' && rmp->is[0] != '\0')
branch  0 taken 1953 (fallthrough)
branch  1 taken 2974
branch  2 taken 1813 (fallthrough)
branch  3 taken 140
        -: 4154:	      {
     1813: 4155:		lmp->is = icatalloc(lmp->is, rmp->is);
call    0 returned 1813
     1813: 4156:		if (lmp->is == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 1813
    #####: 4157:		  goto done;
        -: 4158:	      }
        -: 4159:	    else
     3114: 4160:	      lmp->is[0] = '\0';
        -: 4161:	  }
     4927: 4162:	  break;
     5472: 4163:	default:
     5472: 4164:	  if (t < END)
branch  0 taken 0 (fallthrough)
branch  1 taken 5472
        -: 4165:	    {
        -: 4166:	      /* "cannot happen" */
    #####: 4167:	      goto done;
        -: 4168:	    }
     5472: 4169:	  else if (t == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 5472
        -: 4170:	    {
        -: 4171:	      /* not on *my* shift */
    #####: 4172:	      goto done;
        -: 4173:	    }
     5472: 4174:	  else if (t >= CSET)
branch  0 taken 155 (fallthrough)
branch  1 taken 5317
        -: 4175:	    {
        -: 4176:	      /* easy enough */
      155: 4177:	      resetmust(mp);
call    0 returned 155
        -: 4178:	    }
        -: 4179:	  else
        -: 4180:	    {
        -: 4181:	      /* plain character */
     5317: 4182:	      resetmust(mp);
call    0 returned 5317
     5317: 4183:	      mp->is[0] = mp->left[0] = mp->right[0] = t;
     5317: 4184:	      mp->is[1] = mp->left[1] = mp->right[1] = '\0';
     5317: 4185:	      mp->in = enlist(mp->in, mp->is, (size_t)1);
call    0 returned 5317
     5317: 4186:	      if (mp->in == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 5317
    #####: 4187:		goto done;
        -: 4188:	    }
     5472: 4189:	  break;
        -: 4190:	}
        -: 4191:#ifdef DEBUG
        -: 4192:      fprintf(stderr, " node: %d:", ri);
        -: 4193:      prtok(dfa->tokens[ri]);
        -: 4194:      fprintf(stderr, "\n  in:");
        -: 4195:      for (i = 0; mp->in[i]; ++i)
        -: 4196:	fprintf(stderr, " \"%s\"", mp->in[i]);
        -: 4197:      fprintf(stderr, "\n  is: \"%s\"\n", mp->is);
        -: 4198:      fprintf(stderr, "  left: \"%s\"\n", mp->left);
        -: 4199:      fprintf(stderr, "  right: \"%s\"\n", mp->right);
        -: 4200:#endif
    11518: 4201:      ++mp;
        -: 4202:    }
    #####: 4203: done:
      722: 4204:  if (strlen(result))
branch  0 taken 593 (fallthrough)
branch  1 taken 129
        -: 4205:    {
      593: 4206:      dm = (struct dfamust *) malloc(sizeof (struct dfamust));
      593: 4207:      dm->exact = exact;
      593: 4208:      dm->must = malloc(strlen(result) + 1);
      593: 4209:      strcpy(dm->must, result);
      593: 4210:      dm->next = dfa->musts;
      593: 4211:      dfa->musts = dm;
        -: 4212:    }
      722: 4213:  mp = musts;
    14406: 4214:  for (i = 0; i <= dfa->tindex; ++i)
branch  0 taken 13684
branch  1 taken 722 (fallthrough)
        -: 4215:    {
    13684: 4216:      freelist(mp[i].in);
call    0 returned 13684
    13684: 4217:      ifree((char *) mp[i].in);
call    0 returned 13684
    13684: 4218:      ifree(mp[i].left);
call    0 returned 13684
    13684: 4219:      ifree(mp[i].right);
call    0 returned 13684
    13684: 4220:      ifree(mp[i].is);
call    0 returned 13684
        -: 4221:    }
      722: 4222:  free((char *) mp);
        -: 4223:}
        -: 4224:/* kwset.c - search for any of a set of keywords.
        -: 4225:   Copyright (C) 1989, 1998 Free Software Foundation, Inc.
        -: 4226:
        -: 4227:   This program is free software; you can redistribute it and/or modify
        -: 4228:   it under the terms of the GNU General Public License as published by
        -: 4229:   the Free Software Foundation; either version 2, or (at your option)
        -: 4230:   any later version.
        -: 4231:
        -: 4232:   This program is distributed in the hope that it will be useful,
        -: 4233:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 4234:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 4235:   GNU General Public License for more details.
        -: 4236:
        -: 4237:   You should have received a copy of the GNU General Public License
        -: 4238:   along with this program; if not, write to the Free Software
        -: 4239:   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
        -: 4240:   02111-1307, USA.  */
        -: 4241:
        -: 4242:/* Written August 1989 by Mike Haertel.
        -: 4243:   The author may be reached (Email) at the address mike@ai.mit.edu,
        -: 4244:   or (US mail) as Mike Haertel c/o Free Software Foundation. */
        -: 4245:
        -: 4246:/* The algorithm implemented by these routines bears a startling resemblence
        -: 4247:   to one discovered by Beate Commentz-Walter, although it is not identical.
        -: 4248:   See "A String Matching Algorithm Fast on the Average," Technical Report,
        -: 4249:   IBM-Germany, Scientific Center Heidelberg, Tiergartenstrasse 15, D-6900
        -: 4250:   Heidelberg, Germany.  See also Aho, A.V., and M. Corasick, "Efficient
        -: 4251:   String Matching:  An Aid to Bibliographic Search," CACM June 1975,
        -: 4252:   Vol. 18, No. 6, which describes the failure function used below. */
        -: 4253:
        -: 4254:#ifdef HAVE_CONFIG_H
        -: 4255:#if flag_config==0
        -: 4256:# include <config.h>
        -: 4257:#define flag_config 1
        -: 4258:#endif 
        -: 4259:#endif
        -: 4260:/*#include <sys/types.h>*/
        -: 4261:/*#include "system.h"*/
        -: 4262:#include "kwset.h"
        -: 4263:#include "obstack.h"
        -: 4264:
        -: 4265:#ifdef GREP
        -: 4266:extern char *xmalloc();
        -: 4267:# undef malloc
        -: 4268:# define malloc xmalloc
        -: 4269:#endif
        -: 4270:
        -: 4271:#define NCHAR (UCHAR_MAX + 1)
        -: 4272:#define obstack_chunk_alloc malloc
        -: 4273:#define obstack_chunk_free free
        -: 4274:
        -: 4275:/* Balanced tree of edges and labels leaving a given trie node. */
        -: 4276:struct tree
        -: 4277:{
        -: 4278:  struct tree *llink;		/* Left link; MUST be first field. */
        -: 4279:  struct tree *rlink;		/* Right link (to larger labels). */
        -: 4280:  struct trie *trie;		/* Trie node pointed to by this edge. */
        -: 4281:  unsigned char label;		/* Label on this edge. */
        -: 4282:  char balance;			/* Difference in depths of subtrees. */
        -: 4283:};
        -: 4284:
        -: 4285:/* Node of a trie representing a set of reversed keywords. */
        -: 4286:struct trie
        -: 4287:{
        -: 4288:  unsigned int accepting;	/* Word index of accepted word, or zero. */
        -: 4289:  struct tree *links;		/* Tree of edges leaving this node. */
        -: 4290:  struct trie *parent;		/* Parent of this node. */
        -: 4291:  struct trie *next;		/* List of all trie nodes in level order. */
        -: 4292:  struct trie *fail;		/* Aho-Corasick failure function. */
        -: 4293:  int depth;			/* Depth of this node from the root. */
        -: 4294:  int shift;			/* Shift function for search failures. */
        -: 4295:  int maxshift;			/* Max shift of self and descendents. */
        -: 4296:};
        -: 4297:
        -: 4298:/* Structure returned opaquely to the caller, containing everything. */
        -: 4299:struct kwset
        -: 4300:{
        -: 4301:  struct obstack obstack;	/* Obstack for node allocation. */
        -: 4302:  int words;			/* Number of words in the trie. */
        -: 4303:  struct trie *trie;		/* The trie itself. */
        -: 4304:  int mind;			/* Minimum depth of an accepting node. */
        -: 4305:  int maxd;			/* Maximum depth of any node. */
        -: 4306:  unsigned char delta[NCHAR];	/* Delta table for rapid search. */
        -: 4307:  struct trie *next[NCHAR];	/* Table of children of the root. */
        -: 4308:  char *target;			/* Target string if there's only one. */
        -: 4309:  int mind2;			/* Used in Boyer-Moore search for one string. */
        -: 4310:  char *trans;			/* Character translation table. */
        -: 4311:};
        -: 4312:
        -: 4313:/* prototypes */
        -: 4314:static void enqueue PARAMS((struct tree *, struct trie **));
        -: 4315:static void treefails PARAMS((register struct tree *, struct trie *, struct trie *));
        -: 4316:static void treedelta PARAMS((register struct tree *,register unsigned int, unsigned char *));
        -: 4317:static int  hasevery PARAMS((register struct tree *, register struct tree *));
        -: 4318:static void treenext PARAMS((struct tree *, struct trie **));
        -: 4319:static char * bmexec PARAMS((kwset_t, char *, size_t));
        -: 4320:static char * cwexec PARAMS((kwset_t, char *, size_t, struct kwsmatch *));
        -: 4321:
        -: 4322:/* Allocate and initialize a keyword set object, returning an opaque
        -: 4323:   pointer to it.  Return NULL if memory is not available. */
        -: 4324:kwset_t
function kwsalloc called 598 returned 100% blocks executed 60%
      598: 4325:kwsalloc(trans)
        -: 4326:     char *trans;
        -: 4327:{
        -: 4328:  struct kwset *kwset;
        -: 4329:
      598: 4330:  kwset = (struct kwset *) malloc(sizeof (struct kwset));
call    0 returned 598
      598: 4331:  if (!kwset)
branch  0 taken 0 (fallthrough)
branch  1 taken 598
    #####: 4332:    return 0;
        -: 4333:
      598: 4334:  obstack_init(&kwset->obstack);
call    0 returned 598
      598: 4335:  kwset->words = 0;
        -: 4336:  kwset->trie
     598*: 4337:    = (struct trie *) obstack_alloc(&kwset->obstack, sizeof (struct trie));
branch  0 taken 0 (fallthrough)
branch  1 taken 598
call    2 never executed
branch  3 taken 0 (fallthrough)
branch  4 taken 598
branch  5 taken 0 (fallthrough)
branch  6 taken 598
      598: 4338:  if (!kwset->trie)
branch  0 taken 0 (fallthrough)
branch  1 taken 598
        -: 4339:    {
    #####: 4340:      kwsfree((kwset_t) kwset);
call    0 never executed
    #####: 4341:      return 0;
        -: 4342:    }
      598: 4343:  kwset->trie->accepting = 0;
      598: 4344:  kwset->trie->links = 0;
      598: 4345:  kwset->trie->parent = 0;
      598: 4346:  kwset->trie->next = 0;
      598: 4347:  kwset->trie->fail = 0;
      598: 4348:  kwset->trie->depth = 0;
      598: 4349:  kwset->trie->shift = 0;
      598: 4350:  kwset->mind = INT_MAX;
      598: 4351:  kwset->maxd = -1;
      598: 4352:  kwset->target = 0;
      598: 4353:  kwset->trans = trans;
        -: 4354:
      598: 4355:  return (kwset_t) kwset;
        -: 4356:}
        -: 4357:
        -: 4358:/* Add the given string to the contents of the keyword set.  Return NULL
        -: 4359:   for success, an error message otherwise. */
        -: 4360:char *
function kwsincr called 598 returned 100% blocks executed 43%
      598: 4361:kwsincr(kws, text, len)
        -: 4362:     kwset_t kws;
        -: 4363:     char *text;
        -: 4364:     size_t len;
        -: 4365:{
        -: 4366:  struct kwset *kwset;
        -: 4367:  register struct trie *trie;
        -: 4368:  register unsigned char label;
        -: 4369:  register struct tree *link;
        -: 4370:  register int depth;
        -: 4371:  struct tree *links[12];
        -: 4372:  enum { L, R } dirs[12];
        -: 4373:  struct tree *t, *r, *l, *rl, *lr;
        -: 4374:
      598: 4375:  kwset = (struct kwset *) kws;
      598: 4376:  trie = kwset->trie;
      598: 4377:  text += len;
        -: 4378:
        -: 4379:  /* Descend the trie (built of reversed keywords) character-by-character,
        -: 4380:     installing new nodes when necessary. */
     3420: 4381:  while (len--)
branch  0 taken 2822
branch  1 taken 598 (fallthrough)
        -: 4382:    {
     2822: 4383:      label = kwset->trans ? kwset->trans[(unsigned char) *--text] : *--text;
branch  0 taken 369 (fallthrough)
branch  1 taken 2453
        -: 4384:
        -: 4385:      /* Descend the tree of outgoing links for this trie node,
        -: 4386:	 looking for the current character and keeping track
        -: 4387:	 of the path followed. */
     2822: 4388:      link = trie->links;
     2822: 4389:      links[0] = (struct tree *) &trie->links;
     2822: 4390:      dirs[0] = L;
     2822: 4391:      depth = 1;
        -: 4392:
    2822*: 4393:      while (link && label != link->label)
branch  0 taken 0 (fallthrough)
branch  1 taken 2822
branch  2 never executed
branch  3 never executed
        -: 4394:	{
    #####: 4395:	  links[depth] = link;
    #####: 4396:	  if (label < link->label)
branch  0 never executed
branch  1 never executed
    #####: 4397:	    dirs[depth++] = L, link = link->llink;
        -: 4398:	  else
    #####: 4399:	    dirs[depth++] = R, link = link->rlink;
        -: 4400:	}
        -: 4401:
        -: 4402:      /* The current character doesn't have an outgoing link at
        -: 4403:	 this trie node, so build a new trie node and install
        -: 4404:	 a link in the current trie node's tree. */
     2822: 4405:      if (!link)
branch  0 taken 2822 (fallthrough)
branch  1 taken 0
        -: 4406:	{
    2822*: 4407:	  link = (struct tree *) obstack_alloc(&kwset->obstack,
branch  0 taken 0 (fallthrough)
branch  1 taken 2822
call    2 never executed
branch  3 taken 0 (fallthrough)
branch  4 taken 2822
branch  5 taken 0 (fallthrough)
branch  6 taken 2822
        -: 4408:					       sizeof (struct tree));
     2822: 4409:	  if (!link)
branch  0 taken 0 (fallthrough)
branch  1 taken 2822
    #####: 4410:	    return _("memory exhausted");
     2822: 4411:	  link->llink = 0;
     2822: 4412:	  link->rlink = 0;
    2822*: 4413:	  link->trie = (struct trie *) obstack_alloc(&kwset->obstack,
branch  0 taken 3 (fallthrough)
branch  1 taken 2819
call    2 returned 3
branch  3 taken 0 (fallthrough)
branch  4 taken 2822
branch  5 taken 0 (fallthrough)
branch  6 taken 2822
        -: 4414:						     sizeof (struct trie));
     2822: 4415:	  if (!link->trie)
branch  0 taken 0 (fallthrough)
branch  1 taken 2822
    #####: 4416:	    return _("memory exhausted");
     2822: 4417:	  link->trie->accepting = 0;
     2822: 4418:	  link->trie->links = 0;
     2822: 4419:	  link->trie->parent = trie;
     2822: 4420:	  link->trie->next = 0;
     2822: 4421:	  link->trie->fail = 0;
     2822: 4422:	  link->trie->depth = trie->depth + 1;
     2822: 4423:	  link->trie->shift = 0;
     2822: 4424:	  link->label = label;
     2822: 4425:	  link->balance = 0;
        -: 4426:
        -: 4427:	  /* Install the new tree node in its parent. */
     2822: 4428:	  if (dirs[--depth] == L)
branch  0 taken 2822 (fallthrough)
branch  1 taken 0
     2822: 4429:	    links[depth]->llink = link;
        -: 4430:	  else
    #####: 4431:	    links[depth]->rlink = link;
        -: 4432:
        -: 4433:	  /* Back up the tree fixing the balance flags. */
    2822*: 4434:	  while (depth && !links[depth]->balance)
branch  0 taken 0 (fallthrough)
branch  1 taken 2822
branch  2 never executed
branch  3 never executed
        -: 4435:	    {
    #####: 4436:	      if (dirs[depth] == L)
branch  0 never executed
branch  1 never executed
    #####: 4437:		--links[depth]->balance;
        -: 4438:	      else
    #####: 4439:		++links[depth]->balance;
    #####: 4440:	      --depth;
        -: 4441:	    }
        -: 4442:
        -: 4443:	  /* Rebalance the tree by pointer rotations if necessary. */
    2822*: 4444:	  if (depth && ((dirs[depth] == L && --links[depth]->balance)
branch  0 taken 0 (fallthrough)
branch  1 taken 2822
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4445:			|| (dirs[depth] == R && ++links[depth]->balance)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 4446:	    {
    #####: 4447:	      switch (links[depth]->balance)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -: 4448:		{
    #####: 4449:		case (char) -2:
    #####: 4450:		  switch (dirs[depth + 1])
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -: 4451:		    {
    #####: 4452:		    case L:
    #####: 4453:		      r = links[depth], t = r->llink, rl = t->rlink;
    #####: 4454:		      t->rlink = r, r->llink = rl;
    #####: 4455:		      t->balance = r->balance = 0;
    #####: 4456:		      break;
    #####: 4457:		    case R:
    #####: 4458:		      r = links[depth], l = r->llink, t = l->rlink;
    #####: 4459:		      rl = t->rlink, lr = t->llink;
    #####: 4460:		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
    #####: 4461:		      l->balance = t->balance != 1 ? 0 : -1;
branch  0 never executed
branch  1 never executed
    #####: 4462:		      r->balance = t->balance != (char) -1 ? 0 : 1;
    #####: 4463:		      t->balance = 0;
    #####: 4464:		      break;
    #####: 4465:		    default:
    #####: 4466:		      abort ();
call    0 never executed
        -: 4467:		    }
    #####: 4468:		  break;
    #####: 4469:		case 2:
    #####: 4470:		  switch (dirs[depth + 1])
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -: 4471:		    {
    #####: 4472:		    case R:
    #####: 4473:		      l = links[depth], t = l->rlink, lr = t->llink;
    #####: 4474:		      t->llink = l, l->rlink = lr;
    #####: 4475:		      t->balance = l->balance = 0;
    #####: 4476:		      break;
    #####: 4477:		    case L:
    #####: 4478:		      l = links[depth], r = l->rlink, t = r->llink;
    #####: 4479:		      lr = t->llink, rl = t->rlink;
    #####: 4480:		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
    #####: 4481:		      l->balance = t->balance != 1 ? 0 : -1;
branch  0 never executed
branch  1 never executed
    #####: 4482:		      r->balance = t->balance != (char) -1 ? 0 : 1;
    #####: 4483:		      t->balance = 0;
    #####: 4484:		      break;
    #####: 4485:		    default:
    #####: 4486:		      abort ();
call    0 never executed
        -: 4487:		    }
    #####: 4488:		  break;
    #####: 4489:		default:
    #####: 4490:		  abort ();
call    0 never executed
        -: 4491:		}
        -: 4492:
    #####: 4493:	      if (dirs[depth - 1] == L)
branch  0 never executed
branch  1 never executed
    #####: 4494:		links[depth - 1]->llink = t;
        -: 4495:	      else
    #####: 4496:		links[depth - 1]->rlink = t;
        -: 4497:	    }
        -: 4498:	}
        -: 4499:
     2822: 4500:      trie = link->trie;
        -: 4501:    }
        -: 4502:
        -: 4503:  /* Mark the node we finally reached as accepting, encoding the
        -: 4504:     index number of this word in the keyword set so far. */
      598: 4505:  if (!trie->accepting)
branch  0 taken 598 (fallthrough)
branch  1 taken 0
      598: 4506:    trie->accepting = 1 + 2 * kwset->words;
      598: 4507:  ++kwset->words;
        -: 4508:
        -: 4509:  /* Keep track of the longest and shortest string of the keyword set. */
      598: 4510:  if (trie->depth < kwset->mind)
branch  0 taken 598 (fallthrough)
branch  1 taken 0
      598: 4511:    kwset->mind = trie->depth;
      598: 4512:  if (trie->depth > kwset->maxd)
branch  0 taken 598 (fallthrough)
branch  1 taken 0
      598: 4513:    kwset->maxd = trie->depth;
        -: 4514:
      598: 4515:  return 0;
        -: 4516:}
        -: 4517:
        -: 4518:/* Enqueue the trie nodes referenced from the given tree in the
        -: 4519:   given queue. */
        -: 4520:static void
function enqueue called 1163 returned 100% blocks executed 100%
     1163: 4521:enqueue(tree, last)
        -: 4522:     struct tree *tree;
        -: 4523:     struct trie **last;
        -: 4524:{
     1163: 4525:  if (!tree)
branch  0 taken 794 (fallthrough)
branch  1 taken 369
      794: 4526:    return;
      369: 4527:  enqueue(tree->llink, last);
call    0 returned 369
      369: 4528:  enqueue(tree->rlink, last);
call    0 returned 369
      369: 4529:  (*last) = (*last)->next = tree->trie;
        -: 4530:}
        -: 4531:
        -: 4532:/* Compute the Aho-Corasick failure function for the trie nodes referenced
        -: 4533:   from the given tree, given the failure function for their parent as
        -: 4534:   well as a last resort failure node. */
        -: 4535:static void
function treefails called 1163 returned 100% blocks executed 100%
     1163: 4536:treefails(tree, fail, recourse)
        -: 4537:     register struct tree *tree;
        -: 4538:     struct trie *fail;
        -: 4539:     struct trie *recourse;
        -: 4540:{
        -: 4541:  register struct tree *link;
        -: 4542:
     1163: 4543:  if (!tree)
branch  0 taken 794 (fallthrough)
branch  1 taken 369
      794: 4544:    return;
        -: 4545:
      369: 4546:  treefails(tree->llink, fail, recourse);
call    0 returned 369
      369: 4547:  treefails(tree->rlink, fail, recourse);
call    0 returned 369
        -: 4548:
        -: 4549:  /* Find, in the chain of fails going back to the root, the first
        -: 4550:     node that has a descendent on the current label. */
      682: 4551:  while (fail)
branch  0 taken 337
branch  1 taken 345 (fallthrough)
        -: 4552:    {
      337: 4553:      link = fail->links;
      650: 4554:      while (link && tree->label != link->label)
branch  0 taken 337 (fallthrough)
branch  1 taken 313
branch  2 taken 313
branch  3 taken 24 (fallthrough)
      313: 4555:	if (tree->label < link->label)
branch  0 taken 100 (fallthrough)
branch  1 taken 213
      100: 4556:	  link = link->llink;
        -: 4557:	else
      213: 4558:	  link = link->rlink;
      337: 4559:      if (link)
branch  0 taken 24 (fallthrough)
branch  1 taken 313
        -: 4560:	{
       24: 4561:	  tree->trie->fail = link->trie;
       24: 4562:	  return;
        -: 4563:	}
      313: 4564:      fail = fail->fail;
        -: 4565:    }
        -: 4566:
      345: 4567:  tree->trie->fail = recourse;
        -: 4568:}
        -: 4569:
        -: 4570:/* Set delta entries for the links of the given tree such that
        -: 4571:   the preexisting delta value is larger than the current depth. */
        -: 4572:static void
function treedelta called 1163 returned 100% blocks executed 100%
     1163: 4573:treedelta(tree, depth, delta)
        -: 4574:     register struct tree *tree;
        -: 4575:     register unsigned int depth;
        -: 4576:     unsigned char delta[];
        -: 4577:{
     1163: 4578:  if (!tree)
branch  0 taken 794 (fallthrough)
branch  1 taken 369
      794: 4579:    return;
      369: 4580:  treedelta(tree->llink, depth, delta);
call    0 returned 369
      369: 4581:  treedelta(tree->rlink, depth, delta);
call    0 returned 369
      369: 4582:  if (depth < delta[tree->label])
branch  0 taken 340 (fallthrough)
branch  1 taken 29
      340: 4583:    delta[tree->label] = depth;
        -: 4584:}
        -: 4585:
        -: 4586:/* Return true if A has every label in B. */
        -: 4587:static int
function hasevery called 1139 returned 100% blocks executed 88%
     1139: 4588:hasevery(a, b)
        -: 4589:     register struct tree *a;
        -: 4590:     register struct tree *b;
        -: 4591:{
     1139: 4592:  if (!b)
branch  0 taken 778 (fallthrough)
branch  1 taken 361
      778: 4593:    return 1;
      361: 4594:  if (!hasevery(a, b->llink))
call    0 returned 361
branch  1 taken 0 (fallthrough)
branch  2 taken 361
    #####: 4595:    return 0;
      361: 4596:  if (!hasevery(a, b->rlink))
call    0 returned 361
branch  1 taken 0 (fallthrough)
branch  2 taken 361
    #####: 4597:    return 0;
      674: 4598:  while (a && b->label != a->label)
branch  0 taken 361 (fallthrough)
branch  1 taken 313
branch  2 taken 313
branch  3 taken 48 (fallthrough)
      313: 4599:    if (b->label < a->label)
branch  0 taken 100 (fallthrough)
branch  1 taken 213
      100: 4600:      a = a->llink;
        -: 4601:    else
      213: 4602:      a = a->rlink;
      361: 4603:  return !!a;
        -: 4604:}
        -: 4605:
        -: 4606:/* Compute a vector, indexed by character code, of the trie nodes
        -: 4607:   referenced from the given tree. */
        -: 4608:static void
function treenext called 168 returned 100% blocks executed 100%
      168: 4609:treenext(tree, next)
        -: 4610:     struct tree *tree;
        -: 4611:     struct trie *next[];
        -: 4612:{
      168: 4613:  if (!tree)
branch  0 taken 112 (fallthrough)
branch  1 taken 56
      112: 4614:    return;
       56: 4615:  treenext(tree->llink, next);
call    0 returned 56
       56: 4616:  treenext(tree->rlink, next);
call    0 returned 56
       56: 4617:  next[tree->label] = tree->trie;
        -: 4618:}
        -: 4619:
        -: 4620:/* Compute the shift for each trie node, as well as the delta
        -: 4621:   table and next cache for the given keyword set. */
        -: 4622:char *
function kwsprep called 598 returned 100% blocks executed 83%
      598: 4623:kwsprep(kws)
        -: 4624:     kwset_t kws;
        -: 4625:{
        -: 4626:  register struct kwset *kwset;
        -: 4627:  register int i;
        -: 4628:  register struct trie *curr, *fail;
        -: 4629:  register char *trans;
        -: 4630:  unsigned char delta[NCHAR];
        -: 4631:  struct trie *last, *next[NCHAR];
        -: 4632:
      598: 4633:  kwset = (struct kwset *) kws;
        -: 4634:
        -: 4635:  /* Initial values for the delta table; will be changed later.  The
        -: 4636:     delta entry for a given character is the smallest depth of any
        -: 4637:     node at which an outgoing edge is labeled by that character. */
      598: 4638:  if (kwset->mind < 256)
branch  0 taken 598 (fallthrough)
branch  1 taken 0
   153686: 4639:    for (i = 0; i < NCHAR; ++i)
branch  0 taken 153088
branch  1 taken 598
   153088: 4640:      delta[i] = kwset->mind;
        -: 4641:  else
    #####: 4642:    for (i = 0; i < NCHAR; ++i)
branch  0 never executed
branch  1 never executed
    #####: 4643:      delta[i] = 255;
        -: 4644:
        -: 4645:  /* Check if we can use the simple boyer-moore algorithm, instead
        -: 4646:     of the hairy commentz-walter algorithm. */
      598: 4647:  if (kwset->words == 1 && kwset->trans == 0)
branch  0 taken 598 (fallthrough)
branch  1 taken 0
branch  2 taken 542 (fallthrough)
branch  3 taken 56
        -: 4648:    {
        -: 4649:      /* Looking for just one string.  Extract it from the trie. */
     542*: 4650:      kwset->target = obstack_alloc(&kwset->obstack, kwset->mind);
branch  0 taken 0 (fallthrough)
branch  1 taken 542
call    2 never executed
branch  3 taken 0 (fallthrough)
branch  4 taken 542
branch  5 taken 0 (fallthrough)
branch  6 taken 542
     2995: 4651:      for (i = kwset->mind - 1, curr = kwset->trie; i >= 0; --i)
branch  0 taken 2453
branch  1 taken 542 (fallthrough)
        -: 4652:	{
     2453: 4653:	  kwset->target[i] = curr->links->label;
     2453: 4654:	  curr = curr->links->trie;
        -: 4655:	}
        -: 4656:      /* Build the Boyer Moore delta.  Boy that's easy compared to CW. */
     2995: 4657:      for (i = 0; i < kwset->mind; ++i)
branch  0 taken 2453
branch  1 taken 542 (fallthrough)
     2453: 4658:	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i + 1);
      542: 4659:      kwset->mind2 = kwset->mind;
        -: 4660:      /* Find the minimal delta2 shift that we might make after
        -: 4661:	 a backwards match has failed. */
     2453: 4662:      for (i = 0; i < kwset->mind - 1; ++i)
branch  0 taken 1911
branch  1 taken 542 (fallthrough)
     1911: 4663:	if (kwset->target[i] == kwset->target[kwset->mind - 1])
branch  0 taken 71 (fallthrough)
branch  1 taken 1840
       71: 4664:	  kwset->mind2 = kwset->mind - (i + 1);
        -: 4665:    }
        -: 4666:  else
        -: 4667:    {
        -: 4668:      /* Traverse the nodes of the trie in level order, simultaneously
        -: 4669:	 computing the delta table, failure function, and shift function. */
      481: 4670:      for (curr = last = kwset->trie; curr; curr = curr->next)
branch  0 taken 425
branch  1 taken 56 (fallthrough)
        -: 4671:	{
        -: 4672:	  /* Enqueue the immediate descendents in the level order queue. */
      425: 4673:	  enqueue(curr->links, &last);
call    0 returned 425
        -: 4674:
      425: 4675:	  curr->shift = kwset->mind;
      425: 4676:	  curr->maxshift = kwset->mind;
        -: 4677:
        -: 4678:	  /* Update the delta table for the descendents of this node. */
      425: 4679:	  treedelta(curr->links, curr->depth, delta);
call    0 returned 425
        -: 4680:
        -: 4681:	  /* Compute the failure function for the decendents of this node. */
      425: 4682:	  treefails(curr->links, curr->fail, kwset->trie);
call    0 returned 425
        -: 4683:
        -: 4684:	  /* Update the shifts at each node in the current node's chain
        -: 4685:	     of fails back to the root. */
      842: 4686:	  for (fail = curr->fail; fail; fail = fail->fail)
branch  0 taken 417
branch  1 taken 425 (fallthrough)
        -: 4687:	    {
        -: 4688:	      /* If the current node has some outgoing edge that the fail
        -: 4689:		 doesn't, then the shift at the fail should be no larger
        -: 4690:		 than the difference of their depths. */
      417: 4691:	      if (!hasevery(fail->links, curr->links))
call    0 returned 417
branch  1 taken 313 (fallthrough)
branch  2 taken 104
      313: 4692:		if (curr->depth - fail->depth < fail->shift)
branch  0 taken 80 (fallthrough)
branch  1 taken 233
       80: 4693:		  fail->shift = curr->depth - fail->depth;
        -: 4694:
        -: 4695:	      /* If the current node is accepting then the shift at the
        -: 4696:		 fail and its descendents should be no larger than the
        -: 4697:		 difference of their depths. */
      417: 4698:	      if (curr->accepting && fail->maxshift > curr->depth - fail->depth)
branch  0 taken 56 (fallthrough)
branch  1 taken 361
branch  2 taken 0 (fallthrough)
branch  3 taken 56
    #####: 4699:		fail->maxshift = curr->depth - fail->depth;
        -: 4700:	    }
        -: 4701:	}
        -: 4702:
        -: 4703:      /* Traverse the trie in level order again, fixing up all nodes whose
        -: 4704:	 shift exceeds their inherited maxshift. */
      425: 4705:      for (curr = kwset->trie->next; curr; curr = curr->next)
branch  0 taken 369
branch  1 taken 56 (fallthrough)
        -: 4706:	{
      369: 4707:	  if (curr->maxshift > curr->parent->maxshift)
branch  0 taken 0 (fallthrough)
branch  1 taken 369
    #####: 4708:	    curr->maxshift = curr->parent->maxshift;
      369: 4709:	  if (curr->shift > curr->maxshift)
branch  0 taken 0 (fallthrough)
branch  1 taken 369
    #####: 4710:	    curr->shift = curr->maxshift;
        -: 4711:	}
        -: 4712:
        -: 4713:      /* Create a vector, indexed by character code, of the outgoing links
        -: 4714:	 from the root node. */
    14392: 4715:      for (i = 0; i < NCHAR; ++i)
branch  0 taken 14336
branch  1 taken 56 (fallthrough)
    14336: 4716:	next[i] = 0;
       56: 4717:      treenext(kwset->trie->links, next);
call    0 returned 56
        -: 4718:
       56: 4719:      if ((trans = kwset->trans) != 0)
branch  0 taken 56 (fallthrough)
branch  1 taken 0
    14392: 4720:	for (i = 0; i < NCHAR; ++i)
branch  0 taken 14336
branch  1 taken 56
    14336: 4721:	  kwset->next[i] = next[(unsigned char) trans[i]];
        -: 4722:      else
    #####: 4723:	for (i = 0; i < NCHAR; ++i)
branch  0 never executed
branch  1 never executed
    #####: 4724:	  kwset->next[i] = next[i];
        -: 4725:    }
        -: 4726:
        -: 4727:  /* Fix things up for any translation table. */
      598: 4728:  if ((trans = kwset->trans) != 0)
branch  0 taken 56 (fallthrough)
branch  1 taken 542
    14392: 4729:    for (i = 0; i < NCHAR; ++i)
branch  0 taken 14336
branch  1 taken 56
    14336: 4730:      kwset->delta[i] = delta[(unsigned char) trans[i]];
        -: 4731:  else
   139294: 4732:    for (i = 0; i < NCHAR; ++i)
branch  0 taken 138752
branch  1 taken 542 (fallthrough)
   138752: 4733:      kwset->delta[i] = delta[i];
        -: 4734:
      598: 4735:  return 0;
        -: 4736:}
        -: 4737:
        -: 4738:#define U(C) ((unsigned char) (C))
        -: 4739:
        -: 4740:/* Fast boyer-moore search. */
        -: 4741:static char *
function bmexec called 259260 returned 100% blocks executed 98%
   259260: 4742:bmexec(kws, text, size)
        -: 4743:     kwset_t kws;
        -: 4744:     char *text;
        -: 4745:     size_t size;
        -: 4746:{
        -: 4747:  struct kwset *kwset;
        -: 4748:  register unsigned char *d1;
        -: 4749:  register char *ep, *sp, *tp;
        -: 4750:  register int d, gc, i, len, md2;
        -: 4751:
   259260: 4752:  kwset = (struct kwset *) kws;
   259260: 4753:  len = kwset->mind;
        -: 4754:
   259260: 4755:  if (len == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 259260
    #####: 4756:    return text;
   259260: 4757:  if (len > size)
branch  0 taken 713 (fallthrough)
branch  1 taken 258547
      713: 4758:    return 0;
   258547: 4759:  if (len == 1)
branch  0 taken 110422 (fallthrough)
branch  1 taken 148125
   110422: 4760:    return memchr(text, kwset->target[0], size);
        -: 4761:
   148125: 4762:  d1 = kwset->delta;
   148125: 4763:  sp = kwset->target + len;
   148125: 4764:  gc = U(sp[-2]);
   148125: 4765:  md2 = kwset->mind2;
   148125: 4766:  tp = text + len;
        -: 4767:
        -: 4768:  /* Significance of 12: 1 (initial offset) + 10 (skip loop) + 1 (md2). */
   148125: 4769:  if (size > 12 * len)
branch  0 taken 147276 (fallthrough)
branch  1 taken 849
        -: 4770:    /* 11 is not a bug, the initial offset happens only once. */
   147276: 4771:    for (ep = text + size - 11 * len;;)
        -: 4772:      {
  6091626: 4773:	while (tp <= ep)
branch  0 taken 6086797
branch  1 taken 4829 (fallthrough)
        -: 4774:	  {
  6086797: 4775:	    d = d1[U(tp[-1])], tp += d;
  6086797: 4776:	    d = d1[U(tp[-1])], tp += d;
  6086797: 4777:	    if (d == 0)
branch  0 taken 1577748 (fallthrough)
branch  1 taken 4509049
  1577748: 4778:	      goto found;
  4509049: 4779:	    d = d1[U(tp[-1])], tp += d;
  4509049: 4780:	    d = d1[U(tp[-1])], tp += d;
  4509049: 4781:	    d = d1[U(tp[-1])], tp += d;
  4509049: 4782:	    if (d == 0)
branch  0 taken 789006 (fallthrough)
branch  1 taken 3720043
   789006: 4783:	      goto found;
  3720043: 4784:	    d = d1[U(tp[-1])], tp += d;
  3720043: 4785:	    d = d1[U(tp[-1])], tp += d;
  3720043: 4786:	    d = d1[U(tp[-1])], tp += d;
  3720043: 4787:	    if (d == 0)
branch  0 taken 508032 (fallthrough)
branch  1 taken 3212011
   508032: 4788:	      goto found;
  3212011: 4789:	    d = d1[U(tp[-1])], tp += d;
  3212011: 4790:	    d = d1[U(tp[-1])], tp += d;
        -: 4791:	  }
     4829: 4792:	break;
  2874786: 4793:      found:
  2874786: 4794:	if (U(tp[-2]) == gc)
branch  0 taken 326126 (fallthrough)
branch  1 taken 2548660
        -: 4795:	  {
   533498: 4796:	    for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
branch  0 taken 391051 (fallthrough)
branch  1 taken 142447
branch  2 taken 207372
branch  3 taken 183679 (fallthrough)
        -: 4797:	      ;
   326126: 4798:	    if (i > len)
branch  0 taken 142447 (fallthrough)
branch  1 taken 183679
   142447: 4799:	      return tp - len;
        -: 4800:	  }
  2732339: 4801:	tp += md2;
        -: 4802:      }
        -: 4803:
        -: 4804:  /* Now we have only a few characters left to search.  We
        -: 4805:     carefully avoid ever producing an out-of-bounds pointer. */
     5678: 4806:  ep = text + size;
     5678: 4807:  d = d1[U(tp[-1])];
    46030: 4808:  while (d <= ep - tp)
branch  0 taken 40970
branch  1 taken 5060 (fallthrough)
        -: 4809:    {
    40970: 4810:      d = d1[U((tp += d)[-1])];
    40970: 4811:      if (d != 0)
branch  0 taken 37141 (fallthrough)
branch  1 taken 3829
    37141: 4812:	continue;
     3829: 4813:      if (U(tp[-2]) == gc)
branch  0 taken 915 (fallthrough)
branch  1 taken 2914
        -: 4814:	{
     2105: 4815:	  for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
branch  0 taken 1487 (fallthrough)
branch  1 taken 618
branch  2 taken 1190
branch  3 taken 297 (fallthrough)
        -: 4816:	    ;
      915: 4817:	  if (i > len)
branch  0 taken 618 (fallthrough)
branch  1 taken 297
      618: 4818:	    return tp - len;
        -: 4819:	}
     3211: 4820:      d = md2;
        -: 4821:    }
        -: 4822:
     5060: 4823:  return 0;
        -: 4824:}
        -: 4825:
        -: 4826:/* Hairy multiple string search. */
        -: 4827:static char *
function cwexec called 4960 returned 100% blocks executed 60%
     4960: 4828:cwexec(kws, text, len, kwsmatch)
        -: 4829:     kwset_t kws;
        -: 4830:     char *text;
        -: 4831:     size_t len;
        -: 4832:     struct kwsmatch *kwsmatch;
        -: 4833:{
        -: 4834:  struct kwset *kwset;
        -: 4835:  struct trie **next, *trie, *accept;
        -: 4836:  char *beg, *lim, *mch, *lmch;
        -: 4837:  register unsigned char c, *delta;
        -: 4838:  register int d;
        -: 4839:  register char *end, *qlim;
        -: 4840:  register struct tree *tree;
        -: 4841:  register char *trans;
        -: 4842:
        -: 4843:#ifdef lint
        -: 4844:  accept = NULL;
        -: 4845:#endif
        -: 4846:
        -: 4847:  /* Initialize register copies and look for easy ways out. */
     4960: 4848:  kwset = (struct kwset *) kws;
     4960: 4849:  if (len < kwset->mind)
branch  0 taken 63 (fallthrough)
branch  1 taken 4897
       63: 4850:    return 0;
     4897: 4851:  next = kwset->next;
     4897: 4852:  delta = kwset->delta;
     4897: 4853:  trans = kwset->trans;
     4897: 4854:  lim = text + len;
     4897: 4855:  end = text;
     4897: 4856:  if ((d = kwset->mind) != 0)
branch  0 taken 4897 (fallthrough)
branch  1 taken 0
     4897: 4857:    mch = 0;
        -: 4858:  else
        -: 4859:    {
    #####: 4860:      mch = text, accept = kwset->trie;
    #####: 4861:      goto match;
        -: 4862:    }
        -: 4863:
     4897: 4864:  if (len >= 4 * kwset->mind)
branch  0 taken 4876 (fallthrough)
branch  1 taken 21
     4876: 4865:    qlim = lim - 4 * kwset->mind;
        -: 4866:  else
       21: 4867:    qlim = 0;
        -: 4868:
   145648: 4869:  while (lim - end >= d)
branch  0 taken 145177
branch  1 taken 471 (fallthrough)
        -: 4870:    {
   145177: 4871:      if (qlim && end <= qlim)
branch  0 taken 145155 (fallthrough)
branch  1 taken 22
branch  2 taken 144142 (fallthrough)
branch  3 taken 1013
        -: 4872:	{
   144142: 4873:	  end += d - 1;
   895176: 4874:	  while ((d = delta[c = *end]) && end < qlim)
branch  0 taken 751446 (fallthrough)
branch  1 taken 143730
branch  2 taken 751034
branch  3 taken 412 (fallthrough)
        -: 4875:	    {
   751034: 4876:	      end += d;
   751034: 4877:	      end += delta[(unsigned char) *end];
   751034: 4878:	      end += delta[(unsigned char) *end];
        -: 4879:	    }
   144142: 4880:	  ++end;
        -: 4881:	}
        -: 4882:      else
     1035: 4883:	d = delta[c = (end += d)[-1]];
   145177: 4884:      if (d)
branch  0 taken 1444 (fallthrough)
branch  1 taken 143733
     1444: 4885:	continue;
   143733: 4886:      beg = end - 1;
   143733: 4887:      trie = next[c];
   143733: 4888:      if (trie->accepting)
branch  0 taken 0 (fallthrough)
branch  1 taken 143733
        -: 4889:	{
    #####: 4890:	  mch = beg;
    #####: 4891:	  accept = trie;
        -: 4892:	}
   143733: 4893:      d = trie->shift;
   179943: 4894:      while (beg > text)
branch  0 taken 179933
branch  1 taken 10 (fallthrough)
        -: 4895:	{
  179933*: 4896:	  c = trans ? trans[(unsigned char) *--beg] : *--beg;
branch  0 taken 179933 (fallthrough)
branch  1 taken 0
   179933: 4897:	  tree = trie->links;
   319240: 4898:	  while (tree && c != tree->label)
branch  0 taken 175517 (fallthrough)
branch  1 taken 143723
branch  2 taken 139307
branch  3 taken 36210 (fallthrough)
   139307: 4899:	    if (c < tree->label)
branch  0 taken 34755 (fallthrough)
branch  1 taken 104552
    34755: 4900:	      tree = tree->llink;
        -: 4901:	    else
   104552: 4902:	      tree = tree->rlink;
   179933: 4903:	  if (tree)
branch  0 taken 36210 (fallthrough)
branch  1 taken 143723
        -: 4904:	    {
    36210: 4905:	      trie = tree->trie;
    36210: 4906:	      if (trie->accepting)
branch  0 taken 4426 (fallthrough)
branch  1 taken 31784
        -: 4907:		{
     4426: 4908:		  mch = beg;
     4426: 4909:		  accept = trie;
        -: 4910:		}
        -: 4911:	    }
        -: 4912:	  else
   143723: 4913:	    break;
    36210: 4914:	  d = trie->shift;
        -: 4915:	}
   143733: 4916:      if (mch)
branch  0 taken 4426 (fallthrough)
branch  1 taken 139307
     4426: 4917:	goto match;
        -: 4918:    }
      471: 4919:  return 0;
        -: 4920:
     4426: 4921: match:
        -: 4922:  /* Given a known match, find the longest possible match anchored
        -: 4923:     at or before its starting point.  This is nearly a verbatim
        -: 4924:     copy of the preceding main search loops. */
     4426: 4925:  if (lim - mch > kwset->maxd)
branch  0 taken 4426 (fallthrough)
branch  1 taken 0
     4426: 4926:    lim = mch + kwset->maxd;
     4426: 4927:  lmch = 0;
     4426: 4928:  d = 1;
     4426: 4929:  while (lim - end >= d)
branch  0 taken 0
branch  1 taken 4426 (fallthrough)
        -: 4930:    {
    #####: 4931:      if ((d = delta[c = (end += d)[-1]]) != 0)
branch  0 never executed
branch  1 never executed
    #####: 4932:	continue;
    #####: 4933:      beg = end - 1;
    #####: 4934:      if (!(trie = next[c]))
branch  0 never executed
branch  1 never executed
        -: 4935:	{
    #####: 4936:	  d = 1;
    #####: 4937:	  continue;
        -: 4938:	}
    #####: 4939:      if (trie->accepting && beg <= mch)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 4940:	{
    #####: 4941:	  lmch = beg;
    #####: 4942:	  accept = trie;
        -: 4943:	}
    #####: 4944:      d = trie->shift;
    #####: 4945:      while (beg > text)
branch  0 never executed
branch  1 never executed
        -: 4946:	{
    #####: 4947:	  c = trans ? trans[(unsigned char) *--beg] : *--beg;
branch  0 never executed
branch  1 never executed
    #####: 4948:	  tree = trie->links;
    #####: 4949:	  while (tree && c != tree->label)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4950:	    if (c < tree->label)
branch  0 never executed
branch  1 never executed
    #####: 4951:	      tree = tree->llink;
        -: 4952:	    else
    #####: 4953:	      tree = tree->rlink;
    #####: 4954:	  if (tree)
branch  0 never executed
branch  1 never executed
        -: 4955:	    {
    #####: 4956:	      trie = tree->trie;
    #####: 4957:	      if (trie->accepting && beg <= mch)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 4958:		{
    #####: 4959:		  lmch = beg;
    #####: 4960:		  accept = trie;
        -: 4961:		}
        -: 4962:	    }
        -: 4963:	  else
    #####: 4964:	    break;
    #####: 4965:	  d = trie->shift;
        -: 4966:	}
    #####: 4967:      if (lmch)
branch  0 never executed
branch  1 never executed
        -: 4968:	{
    #####: 4969:	  mch = lmch;
    #####: 4970:	  goto match;
        -: 4971:	}
    #####: 4972:      if (!d)
branch  0 never executed
branch  1 never executed
    #####: 4973:	d = 1;
        -: 4974:    }
        -: 4975:
     4426: 4976:  if (kwsmatch)
branch  0 taken 4426 (fallthrough)
branch  1 taken 0
        -: 4977:    {
     4426: 4978:      kwsmatch->index = accept->accepting / 2;
     4426: 4979:      kwsmatch->beg[0] = mch;
     4426: 4980:      kwsmatch->size[0] = accept->depth;
        -: 4981:    }
     4426: 4982:  return mch;
        -: 4983:}
        -: 4984:
        -: 4985:/* Search through the given text for a match of any member of the
        -: 4986:   given keyword set.  Return a pointer to the first character of
        -: 4987:   the matching substring, or NULL if no match is found.  If FOUNDLEN
        -: 4988:   is non-NULL store in the referenced location the length of the
        -: 4989:   matching substring.  Similarly, if FOUNDIDX is non-NULL, store
        -: 4990:   in the referenced location the index number of the particular
        -: 4991:   keyword matched. */
        -: 4992:char *
function kwsexec called 264220 returned 100% blocks executed 100%
   264220: 4993:kwsexec(kws, text, size, kwsmatch)
        -: 4994:     kwset_t kws;
        -: 4995:     char *text;
        -: 4996:     size_t size;
        -: 4997:     struct kwsmatch *kwsmatch;
        -: 4998:{
        -: 4999:  struct kwset *kwset;
        -: 5000:  char *ret;
        -: 5001:
   264220: 5002:  kwset = (struct kwset *) kws;
   264220: 5003:  if (kwset->words == 1 && kwset->trans == 0)
branch  0 taken 264220 (fallthrough)
branch  1 taken 0
branch  2 taken 259260 (fallthrough)
branch  3 taken 4960
        -: 5004:    {
   259260: 5005:      ret = bmexec(kws, text, size);
call    0 returned 259260
   259260: 5006:      if (kwsmatch != 0 && ret != 0)
branch  0 taken 259260 (fallthrough)
branch  1 taken 0
branch  2 taken 252852 (fallthrough)
branch  3 taken 6408
        -: 5007:	{
   252852: 5008:	  kwsmatch->index = 0;
   252852: 5009:	  kwsmatch->beg[0] = ret;
   252852: 5010:	  kwsmatch->size[0] = kwset->mind;
        -: 5011:	}
   259260: 5012:      return ret;
        -: 5013:    }
        -: 5014:  else
     4960: 5015:    return cwexec(kws, text, size, kwsmatch);
call    0 returned 4960
        -: 5016:}
        -: 5017:
        -: 5018:/* Free the components of the given keyword set. */
        -: 5019:void
function kwsfree called 0 returned 0% blocks executed 0%
    #####: 5020:kwsfree(kws)
        -: 5021:     kwset_t kws;
        -: 5022:{
        -: 5023:  struct kwset *kwset;
        -: 5024:
    #####: 5025:  kwset = (struct kwset *) kws;
    #####: 5026:  obstack_free(&kwset->obstack, 0);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 5027:  free(kws);
    #####: 5028:}
        -: 5029:/* obstack.h - object stack macros
        -: 5030:   Copyright (C) 1988,89,90,91,92,93,94,96,97, 98 Free Software Foundation, Inc.
        -: 5031:
        -: 5032:   the C library, however.  The master source lives in /gd/gnu/lib.
        -: 5033:
        -: 5034:NOTE: The canonical source of this file is maintained with the
        -: 5035:GNU C Library.  Bugs can be reported to bug-glibc@prep.ai.mit.edu.
        -: 5036:
        -: 5037:This program is free software; you can redistribute it and/or modify it
        -: 5038:under the terms of the GNU General Public License as published by the
        -: 5039:Free Software Foundation; either version 2, or (at your option) any
        -: 5040:later version.
        -: 5041:
        -: 5042:This program is distributed in the hope that it will be useful,
        -: 5043:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 5044:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 5045:GNU General Public License for more details.
        -: 5046:
        -: 5047:You should have received a copy of the GNU General Public License
        -: 5048:along with this program; if not, write to the Free Software Foundation,
        -: 5049:Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
        -: 5050:
        -: 5051:#ifdef HAVE_CONFIG_H
        -: 5052:#if flag_config==0
        -: 5053:#include <config.h>
        -: 5054:#define flag_config 1
        -: 5055:#endif
        -: 5056:#endif
        -: 5057:
        -: 5058:/*#include "obstack.h"*/
        -: 5059:
        -: 5060:/* NOTE BEFORE MODIFYING THIS FILE: This version number must be
        -: 5061:   incremented whenever callers compiled using an old obstack.h can no
        -: 5062:   longer properly call the functions in this obstack.c.  */
        -: 5063:#define OBSTACK_INTERFACE_VERSION 1
        -: 5064:
        -: 5065:/* Comment out all this code if we are using the GNU C Library, and are not
        -: 5066:   actually compiling the library itself, and the installed library
        -: 5067:   supports the same library interface we do.  This code is part of the GNU
        -: 5068:   C Library, but also included in many other GNU distributions.  Compiling
        -: 5069:   and linking in this code is a waste when using the GNU C library
        -: 5070:   (especially if it is a shared library).  Rather than having every GNU
        -: 5071:   program understand `configure --with-gnu-libc' and omit the object
        -: 5072:   files, it is simpler to just do this in the source for each such file.  */
        -: 5073:
        -: 5074:/*#include <stdio.h>*/		/* Random thing to get __GNU_LIBRARY__.  */
        -: 5075:#if !defined (_LIBC) && defined (__GNU_LIBRARY__) && __GNU_LIBRARY__ > 1
        -: 5076:#include <gnu-versions.h>
        -: 5077:#define flag_gnuversions 1
        -: 5078:#if _GNU_OBSTACK_INTERFACE_VERSION == OBSTACK_INTERFACE_VERSION
        -: 5079:#define ELIDE_CODE
        -: 5080:#endif
        -: 5081:#endif
        -: 5082:
        -: 5083:
        -: 5084:#ifndef ELIDE_CODE
        -: 5085:
        -: 5086:
        -: 5087:#if defined (__STDC__) && __STDC__
        -: 5088:#define POINTER void *
        -: 5089:#else
        -: 5090:#define POINTER char *
        -: 5091:#endif
        -: 5092:
        -: 5093:/* Determine default alignment.  */
        -: 5094:struct fooalign {char x; double d;};
        -: 5095:#define DEFAULT_ALIGNMENT  \
        -: 5096:  ((PTR_INT_TYPE) ((char *) &((struct fooalign *) 0)->d - (char *) 0))
        -: 5097:/* If malloc were really smart, it would round addresses to DEFAULT_ALIGNMENT.
        -: 5098:   But in fact it might be less smart and round addresses to as much as
        -: 5099:   DEFAULT_ROUNDING.  So we prepare for it to do that.  */
        -: 5100:union fooround {long x; double d;};
        -: 5101:#define DEFAULT_ROUNDING (sizeof (union fooround))
        -: 5102:
        -: 5103:/* When we copy a long block of data, this is the unit to do it with.
        -: 5104:   On some machines, copying successive ints does not work;
        -: 5105:   in such a case, redefine COPYING_UNIT to `long' (if that works)
        -: 5106:   or `char' as a last resort.  */
        -: 5107:#ifndef COPYING_UNIT
        -: 5108:#define COPYING_UNIT int
        -: 5109:#endif
        -: 5110:
        -: 5111:
        -: 5112:/* The functions allocating more room by calling `obstack_chunk_alloc'
        -: 5113:   jump to the handler pointed to by `obstack_alloc_failed_handler'.
        -: 5114:   This variable by default points to the internal function
        -: 5115:   `print_and_abort'.  */
        -: 5116:#if defined (__STDC__) && __STDC__
        -: 5117:static void print_and_abort (void);
        -: 5118:void (*obstack_alloc_failed_handler) (void) = print_and_abort;
        -: 5119:#else
        -: 5120:static void print_and_abort ();
        -: 5121:void (*obstack_alloc_failed_handler) () = print_and_abort;
        -: 5122:#endif
        -: 5123:
        -: 5124:/* Exit value used when `print_and_abort' is used.  */
        -: 5125:#if defined __GNU_LIBRARY__ || defined HAVE_STDLIB_H
        -: 5126:#if flag_stdlib==0
        -: 5127:#include <stdlib.h>
        -: 5128:#define flag_stdlib 1
        -: 5129:#endif
        -: 5130:#endif
        -: 5131:#ifndef EXIT_FAILURE
        -: 5132:#define EXIT_FAILURE 1
        -: 5133:#endif
        -: 5134:int obstack_exit_failure = EXIT_FAILURE;
        -: 5135:
        -: 5136:/* The non-GNU-C macros copy the obstack into this global variable
        -: 5137:   to avoid multiple evaluation.  */
        -: 5138:
        -: 5139:struct obstack *_obstack;
        -: 5140:
        -: 5141:/* Define a macro that either calls functions with the traditional malloc/free
        -: 5142:   calling interface, or calls functions with the mmalloc/mfree interface
        -: 5143:   (that adds an extra first argument), based on the state of use_extra_arg.
        -: 5144:   For free, do not use ?:, since some compilers, like the MIPS compilers,
        -: 5145:   do not allow (expr) ? void : void.  */
        -: 5146:
        -: 5147:#if defined (__STDC__) && __STDC__
        -: 5148:#define CALL_CHUNKFUN(h, size) \
        -: 5149:  (((h) -> use_extra_arg) \
        -: 5150:   ? (*(h)->chunkfun) ((h)->extra_arg, (size)) \
        -: 5151:   : (*(struct _obstack_chunk *(*) (long)) (h)->chunkfun) ((size)))
        -: 5152:
        -: 5153:#define CALL_FREEFUN(h, old_chunk) \
        -: 5154:  do { \
        -: 5155:    if ((h) -> use_extra_arg) \
        -: 5156:      obstack_chunk_free((h)->extra_arg/*, (old_chunk)*/); \
        -: 5157:    else \
        -: 5158:     obstack_chunk_free((old_chunk)); \
        -: 5159:  } while (0)
        -: 5160:
        -: 5161:#define CALL_FREEFUN(h, old_chunk) \
        -: 5162:  do { \
        -: 5163:      free ((old_chunk)); \
        -: 5164:  } while (0)
        -: 5165:
        -: 5166:/*
        -: 5167:#define CALL_FREEFUN(h, old_chunk) \
        -: 5168:  do { \
        -: 5169:    if ((h) -> use_extra_arg) \
        -: 5170:      (*(h)->freefun) ((h)->extra_arg, (old_chunk)); \
        -: 5171:    else \
        -: 5172:      (*(void (*) (void *)) (h)->freefun) ((old_chunk)); \
        -: 5173:  } while (0)
        -: 5174:*/
        -: 5175:#else
        -: 5176:#define CALL_CHUNKFUN(h, size) \
        -: 5177:  (((h) -> use_extra_arg) \
        -: 5178:   ? (*(h)->chunkfun) ((h)->extra_arg, (size)) \
        -: 5179:   : (*(struct _obstack_chunk *(*) ()) (h)->chunkfun) ((size)))
        -: 5180:
        -: 5181:#define CALL_FREEFUN(h, old_chunk) \
        -: 5182:  do { \
        -: 5183:    if ((h) -> use_extra_arg) \
        -: 5184:      (*(h)->freefun) ((h)->extra_arg, (old_chunk)); \
        -: 5185:    else \
        -: 5186:      (*(void (*) ()) (h)->freefun) ((old_chunk)); \
        -: 5187:  } while (0)
        -: 5188:#endif
        -: 5189:
        -: 5190:
        -: 5191:/* Initialize an obstack H for use.  Specify chunk size SIZE (0 means default).
        -: 5192:   Objects start on multiples of ALIGNMENT (0 means use default).
        -: 5193:   CHUNKFUN is the function to use to allocate chunks,
        -: 5194:   and FREEFUN the function to free them.
        -: 5195:
        -: 5196:   Return nonzero if successful, zero if out of memory.
        -: 5197:   To recover from an out of memory error,
        -: 5198:   free up some memory, then call this again.  */
        -: 5199:
        -: 5200:int
        -: 5201:_obstack_begin (h, size, alignment, chunkfun, freefun)
        -: 5202:     struct obstack *h;
        -: 5203:     int size;
        -: 5204:     int alignment;
        -: 5205:#if defined (__STDC__) && __STDC__
        -: 5206:     POINTER (*chunkfun) (long);
        -: 5207:     void (*freefun) (void *);
        -: 5208:#else
        -: 5209:     POINTER (*chunkfun) ();
        -: 5210:     void (*freefun) ();
        -: 5211:#endif
        -: 5212:{
        -: 5213:  register struct _obstack_chunk *chunk; /* points to new chunk */
        -: 5214:
        -: 5215:  if (alignment == 0)
        -: 5216:    alignment = (int) DEFAULT_ALIGNMENT;
        -: 5217:  if (size == 0)
        -: 5218:    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
        -: 5219:    {
        -: 5220:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
        -: 5221:	 Use the values for range checking, because if range checking is off,
        -: 5222:	 the extra bytes won't be missed terribly, but if range checking is on
        -: 5223:	 and we used a larger request, a whole extra 4096 bytes would be
        -: 5224:	 allocated.
        -: 5225:
        -: 5226:	 These number are irrelevant to the new GNU malloc.  I suspect it is
        -: 5227:	 less sensitive to the size of the request.  */
        -: 5228:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
        -: 5229:		    + 4 + DEFAULT_ROUNDING - 1)
        -: 5230:		   & ~(DEFAULT_ROUNDING - 1));
        -: 5231:      size = 4096 - extra;
        -: 5232:    }
        -: 5233:
        -: 5234:#if defined (__STDC__) && __STDC__
        -: 5235:  h->chunkfun = (struct _obstack_chunk * (*)(void *, long)) chunkfun;
        -: 5236:  h->freefun = (void (*) (void *, struct _obstack_chunk *)) freefun;
        -: 5237:#else
        -: 5238:  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
        -: 5239:  h->freefun = freefun;
        -: 5240:#endif
        -: 5241:  h->chunk_size = size;
        -: 5242:  h->alignment_mask = alignment - 1;
        -: 5243:  h->use_extra_arg = 0;
        -: 5244:
        -: 5245:  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
        -: 5246:  if (!chunk)
        -: 5247:    (*obstack_alloc_failed_handler) ();
        -: 5248:  h->next_free = h->object_base = chunk->contents;
        -: 5249:  h->chunk_limit = chunk->limit
        -: 5250:    = (char *) chunk + h->chunk_size;
        -: 5251:  chunk->prev = 0;
        -: 5252:  /* The initial chunk now contains no empty object.  */
        -: 5253:  h->maybe_empty_object = 0;
        -: 5254:  h->alloc_failed = 0;
        -: 5255:  return 1;
        -: 5256:}
        -: 5257:
        -: 5258:int
        -: 5259:_obstack_begin_1 (h, size, alignment, chunkfun, freefun, arg)
        -: 5260:     struct obstack *h;
        -: 5261:     int size;
        -: 5262:     int alignment;
        -: 5263:#if defined (__STDC__) && __STDC__
        -: 5264:     POINTER (*chunkfun) (POINTER, long);
        -: 5265:     void (*freefun) (POINTER, POINTER);
        -: 5266:#else
        -: 5267:     POINTER (*chunkfun) ();
        -: 5268:     void (*freefun) ();
        -: 5269:#endif
        -: 5270:     POINTER arg;
        -: 5271:{
        -: 5272:  register struct _obstack_chunk *chunk; /* points to new chunk */
        -: 5273:
        -: 5274:  if (alignment == 0)
        -: 5275:    alignment = (int) DEFAULT_ALIGNMENT;
        -: 5276:  if (size == 0)
        -: 5277:    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
        -: 5278:    {
        -: 5279:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
        -: 5280:	 Use the values for range checking, because if range checking is off,
        -: 5281:	 the extra bytes won't be missed terribly, but if range checking is on
        -: 5282:	 and we used a larger request, a whole extra 4096 bytes would be
        -: 5283:	 allocated.
        -: 5284:
        -: 5285:	 These number are irrelevant to the new GNU malloc.  I suspect it is
        -: 5286:	 less sensitive to the size of the request.  */
        -: 5287:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
        -: 5288:		    + 4 + DEFAULT_ROUNDING - 1)
        -: 5289:		   & ~(DEFAULT_ROUNDING - 1));
        -: 5290:      size = 4096 - extra;
        -: 5291:    }
        -: 5292:
        -: 5293:#if defined(__STDC__) && __STDC__
        -: 5294:  h->chunkfun = (struct _obstack_chunk * (*)(void *,long)) chunkfun;
        -: 5295:  h->freefun = (void (*) (void *, struct _obstack_chunk *)) freefun;
        -: 5296:#else
        -: 5297:  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
        -: 5298:  h->freefun = freefun;
        -: 5299:#endif
        -: 5300:  h->chunk_size = size;
        -: 5301:  h->alignment_mask = alignment - 1;
        -: 5302:  h->extra_arg = arg;
        -: 5303:  h->use_extra_arg = 1;
        -: 5304:
        -: 5305:  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
        -: 5306:  if (!chunk)
        -: 5307:    (*obstack_alloc_failed_handler) ();
        -: 5308:  h->next_free = h->object_base = chunk->contents;
        -: 5309:  h->chunk_limit = chunk->limit
        -: 5310:    = (char *) chunk + h->chunk_size;
        -: 5311:  chunk->prev = 0;
        -: 5312:  /* The initial chunk now contains no empty object.  */
        -: 5313:  h->maybe_empty_object = 0;
        -: 5314:  h->alloc_failed = 0;
        -: 5315:  return 1;
        -: 5316:}
        -: 5317:
        -: 5318:/* Allocate a new current chunk for the obstack *H
        -: 5319:   on the assumption that LENGTH bytes need to be added
        -: 5320:   to the current object, or a new object of length LENGTH allocated.
        -: 5321:   Copies any partial object from the end of the old chunk
        -: 5322:   to the beginning of the new one.  */
        -: 5323:
        -: 5324:void
        -: 5325:_obstack_newchunk (h, length)
        -: 5326:     struct obstack *h;
        -: 5327:     int length;
        -: 5328:{
        -: 5329:  register struct _obstack_chunk *old_chunk = h->chunk;
        -: 5330:  register struct _obstack_chunk *new_chunk;
        -: 5331:  register long	new_size;
        -: 5332:  register long obj_size = h->next_free - h->object_base;
        -: 5333:  register long i;
        -: 5334:  long already;
        -: 5335:
        -: 5336:  /* Compute size for new chunk.  */
        -: 5337:  new_size = (obj_size + length) + (obj_size >> 3) + 100;
        -: 5338:  if (new_size < h->chunk_size)
        -: 5339:    new_size = h->chunk_size;
        -: 5340:
        -: 5341:  /* Allocate and initialize the new chunk.  */
        -: 5342:  new_chunk = CALL_CHUNKFUN (h, new_size);
        -: 5343:  if (!new_chunk)
        -: 5344:    (*obstack_alloc_failed_handler) ();
        -: 5345:  h->chunk = new_chunk;
        -: 5346:  new_chunk->prev = old_chunk;
        -: 5347:  new_chunk->limit = h->chunk_limit = (char *) new_chunk + new_size;
        -: 5348:
        -: 5349:  /* Move the existing object to the new chunk.
        -: 5350:     Word at a time is fast and is safe if the object
        -: 5351:     is sufficiently aligned.  */
        -: 5352:  if (h->alignment_mask + 1 >= DEFAULT_ALIGNMENT)
        -: 5353:    {
        -: 5354:      for (i = obj_size / sizeof (COPYING_UNIT) - 1;
        -: 5355:	   i >= 0; i--)
        -: 5356:	((COPYING_UNIT *)new_chunk->contents)[i]
        -: 5357:	  = ((COPYING_UNIT *)h->object_base)[i];
        -: 5358:      /* We used to copy the odd few remaining bytes as one extra COPYING_UNIT,
        -: 5359:	 but that can cross a page boundary on a machine
        -: 5360:	 which does not do strict alignment for COPYING_UNITS.  */
        -: 5361:      already = obj_size / sizeof (COPYING_UNIT) * sizeof (COPYING_UNIT);
        -: 5362:    }
        -: 5363:  else
        -: 5364:    already = 0;
        -: 5365:  /* Copy remaining bytes one by one.  */
        -: 5366:  for (i = already; i < obj_size; i++)
        -: 5367:    new_chunk->contents[i] = h->object_base[i];
        -: 5368:
        -: 5369:  /* If the object just copied was the only data in OLD_CHUNK,
        -: 5370:     free that chunk and remove it from the chain.
        -: 5371:     But not if that chunk might contain an empty object.  */
        -: 5372:  if (h->object_base == old_chunk->contents && ! h->maybe_empty_object)
        -: 5373:    {
        -: 5374:      new_chunk->prev = old_chunk->prev;
        -: 5375:      CALL_FREEFUN (h, old_chunk);
        -: 5376:    }
        -: 5377:
        -: 5378:  h->object_base = new_chunk->contents;
        -: 5379:  h->next_free = h->object_base + obj_size;
        -: 5380:  /* The new chunk certainly contains no empty object yet.  */
        -: 5381:  h->maybe_empty_object = 0;
        -: 5382:}
        -: 5383:
        -: 5384:/* Return nonzero if object OBJ has been allocated from obstack H.
        -: 5385:   This is here for debugging.
        -: 5386:   If you use it in a program, you are probably losing.  */
        -: 5387:
        -: 5388:#if defined (__STDC__) && __STDC__
        -: 5389:/* Suppress -Wmissing-prototypes warning.  We don't want to declare this in
        -: 5390:   obstack.h because it is just for debugging.  */
        -: 5391:int _obstack_allocated_p (struct obstack *h, POINTER obj);
        -: 5392:#endif
        -: 5393:
        -: 5394:int
        -: 5395:_obstack_allocated_p (h, obj)
        -: 5396:     struct obstack *h;
        -: 5397:     POINTER obj;
        -: 5398:{
        -: 5399:  register struct _obstack_chunk *lp;	/* below addr of any objects in this chunk */
        -: 5400:  register struct _obstack_chunk *plp;	/* point to previous chunk if any */
        -: 5401:
        -: 5402:  lp = (h)->chunk;
        -: 5403:  /* We use >= rather than > since the object cannot be exactly at
        -: 5404:     the beginning of the chunk but might be an empty object exactly
        -: 5405:     at the end of an adjacent chunk.  */
        -: 5406:  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
        -: 5407:    {
        -: 5408:      plp = lp->prev;
        -: 5409:      lp = plp;
        -: 5410:    }
        -: 5411:  return lp != 0;
        -: 5412:}
        -: 5413:
        -: 5414:/* Free objects in obstack H, including OBJ and everything allocate
        -: 5415:   more recently than OBJ.  If OBJ is zero, free everything in H.  */
        -: 5416:
        -: 5417:#undef obstack_free
        -: 5418:
        -: 5419:/* This function has two names with identical definitions.
        -: 5420:   This is the first one, called from non-ANSI code.  */
        -: 5421:
        -: 5422:void
        -: 5423:_obstack_free (h, obj)
        -: 5424:     struct obstack *h;
        -: 5425:     POINTER obj;
        -: 5426:{
        -: 5427:  register struct _obstack_chunk *lp;	/* below addr of any objects in this chunk */
        -: 5428:  register struct _obstack_chunk *plp;	/* point to previous chunk if any */
        -: 5429:
        -: 5430:  lp = h->chunk;
        -: 5431:  /* We use >= because there cannot be an object at the beginning of a chunk.
        -: 5432:     But there can be an empty object at that address
        -: 5433:     at the end of another chunk.  */
        -: 5434:  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
        -: 5435:    {
        -: 5436:      plp = lp->prev;
        -: 5437:      CALL_FREEFUN (h, lp);
        -: 5438:      lp = plp;
        -: 5439:      /* If we switch chunks, we can't tell whether the new current
        -: 5440:	 chunk contains an empty object, so assume that it may.  */
        -: 5441:      h->maybe_empty_object = 1;
        -: 5442:    }
        -: 5443:  if (lp)
        -: 5444:    {
        -: 5445:      h->object_base = h->next_free = (char *) (obj);
        -: 5446:      h->chunk_limit = lp->limit;
        -: 5447:      h->chunk = lp;
        -: 5448:    }
        -: 5449:  else if (obj != 0)
        -: 5450:    /* obj is not in any of the chunks! */
        -: 5451:    abort ();
        -: 5452:}
        -: 5453:
        -: 5454:/* This function is used from ANSI code.  */
        -: 5455:
        -: 5456:void
        -: 5457:obstack_free (h, obj)
        -: 5458:     struct obstack *h;
        -: 5459:     POINTER obj;
        -: 5460:{
        -: 5461:  register struct _obstack_chunk *lp;	/* below addr of any objects in this chunk */
        -: 5462:  register struct _obstack_chunk *plp;	/* point to previous chunk if any */
        -: 5463:
        -: 5464:  lp = h->chunk;
        -: 5465:  /* We use >= because there cannot be an object at the beginning of a chunk.
        -: 5466:     But there can be an empty object at that address
        -: 5467:     at the end of another chunk.  */
        -: 5468:  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
        -: 5469:    {
        -: 5470:      plp = lp->prev;
        -: 5471:      CALL_FREEFUN (h, lp);
        -: 5472:      lp = plp;
        -: 5473:      /* If we switch chunks, we can't tell whether the new current
        -: 5474:	 chunk contains an empty object, so assume that it may.  */
        -: 5475:      h->maybe_empty_object = 1;
        -: 5476:    }
        -: 5477:  if (lp)
        -: 5478:    {
        -: 5479:      h->object_base = h->next_free = (char *) (obj);
        -: 5480:      h->chunk_limit = lp->limit;
        -: 5481:      h->chunk = lp;
        -: 5482:    }
        -: 5483:  else if (obj != 0)
        -: 5484:    /* obj is not in any of the chunks! */
        -: 5485:    abort ();
        -: 5486:}
        -: 5487:
        -: 5488:int
        -: 5489:_obstack_memory_used (h)
        -: 5490:     struct obstack *h;
        -: 5491:{
        -: 5492:  register struct _obstack_chunk* lp;
        -: 5493:  register int nbytes = 0;
        -: 5494:
        -: 5495:  for (lp = h->chunk; lp != 0; lp = lp->prev)
        -: 5496:    {
        -: 5497:      nbytes += lp->limit - (char *) lp;
        -: 5498:    }
        -: 5499:  return nbytes;
        -: 5500:}
        -: 5501:
        -: 5502:/* Define the error handler.  */
        -: 5503:#ifndef _
        -: 5504:# ifdef HAVE_LIBINTL_H
        -: 5505:#if flag_libintl==0
        -: 5506:#  include <libintl.h>
        -: 5507:#define flag_libintl 1
        -: 5508:#endif
        -: 5509:#  ifndef _
        -: 5510:#   define _(Str) gettext (Str)
        -: 5511:#  endif
        -: 5512:# else
        -: 5513:#  define _(Str) (Str)
        -: 5514:# endif
        -: 5515:#endif
        -: 5516:
        -: 5517:static void
        -: 5518:print_and_abort ()
        -: 5519:{
        -: 5520:  fputs (_("memory exhausted\n"), stderr);
        -: 5521:  exit (obstack_exit_failure);
        -: 5522:}
        -: 5523:
        -: 5524:#if 0
        -: 5525:/* These are now turned off because the applications do not use it
        -: 5526:   and it uses bcopy via obstack_grow, which causes trouble on sysV.  */
        -: 5527:
        -: 5528:/* Now define the functional versions of the obstack macros.
        -: 5529:   Define them to simply use the corresponding macros to do the job.  */
        -: 5530:
        -: 5531:#if defined (__STDC__) && __STDC__
        -: 5532:/* These function definitions do not work with non-ANSI preprocessors;
        -: 5533:   they won't pass through the macro names in parentheses.  */
        -: 5534:
        -: 5535:/* The function names appear in parentheses in order to prevent
        -: 5536:   the macro-definitions of the names from being expanded there.  */
        -: 5537:
        -: 5538:POINTER (obstack_base) (obstack)
        -: 5539:     struct obstack *obstack;
        -: 5540:{
        -: 5541:  return obstack_base (obstack);
        -: 5542:}
        -: 5543:
        -: 5544:POINTER (obstack_next_free) (obstack)
        -: 5545:     struct obstack *obstack;
        -: 5546:{
        -: 5547:  return obstack_next_free (obstack);
        -: 5548:}
        -: 5549:
        -: 5550:int (obstack_object_size) (obstack)
        -: 5551:     struct obstack *obstack;
        -: 5552:{
        -: 5553:  return obstack_object_size (obstack);
        -: 5554:}
        -: 5555:
        -: 5556:int (obstack_room) (obstack)
        -: 5557:     struct obstack *obstack;
        -: 5558:{
        -: 5559:  return obstack_room (obstack);
        -: 5560:}
        -: 5561:
        -: 5562:int (obstack_make_room) (obstack, length)
        -: 5563:     struct obstack *obstack;
        -: 5564:     int length;
        -: 5565:{
        -: 5566:  return obstack_make_room (obstack, length);
        -: 5567:}
        -: 5568:
        -: 5569:void (obstack_grow) (obstack, pointer, length)
        -: 5570:     struct obstack *obstack;
        -: 5571:     POINTER pointer;
        -: 5572:     int length;
        -: 5573:{
        -: 5574:  obstack_grow (obstack, pointer, length);
        -: 5575:}
        -: 5576:
        -: 5577:void (obstack_grow0) (obstack, pointer, length)
        -: 5578:     struct obstack *obstack;
        -: 5579:     POINTER pointer;
        -: 5580:     int length;
        -: 5581:{
        -: 5582:  obstack_grow0 (obstack, pointer, length);
        -: 5583:}
        -: 5584:
        -: 5585:void (obstack_1grow) (obstack, character)
        -: 5586:     struct obstack *obstack;
        -: 5587:     int character;
        -: 5588:{
        -: 5589:  obstack_1grow (obstack, character);
        -: 5590:}
        -: 5591:
        -: 5592:void (obstack_blank) (obstack, length)
        -: 5593:     struct obstack *obstack;
        -: 5594:     int length;
        -: 5595:{
        -: 5596:  obstack_blank (obstack, length);
        -: 5597:}
        -: 5598:
        -: 5599:void (obstack_1grow_fast) (obstack, character)
        -: 5600:     struct obstack *obstack;
        -: 5601:     int character;
        -: 5602:{
        -: 5603:  obstack_1grow_fast (obstack, character);
        -: 5604:}
        -: 5605:
        -: 5606:void (obstack_blank_fast) (obstack, length)
        -: 5607:     struct obstack *obstack;
        -: 5608:     int length;
        -: 5609:{
        -: 5610:  obstack_blank_fast (obstack, length);
        -: 5611:}
        -: 5612:
        -: 5613:POINTER (obstack_finish) (obstack)
        -: 5614:     struct obstack *obstack;
        -: 5615:{
        -: 5616:  return obstack_finish (obstack);
        -: 5617:}
        -: 5618:
        -: 5619:POINTER (obstack_alloc) (obstack, length)
        -: 5620:     struct obstack *obstack;
        -: 5621:     int length;
        -: 5622:{
        -: 5623:  return obstack_alloc (obstack, length);
        -: 5624:}
        -: 5625:
        -: 5626:POINTER (obstack_copy) (obstack, pointer, length)
        -: 5627:     struct obstack *obstack;
        -: 5628:     POINTER pointer;
        -: 5629:     int length;
        -: 5630:{
        -: 5631:  return obstack_copy (obstack, pointer, length);
        -: 5632:}
        -: 5633:
        -: 5634:POINTER (obstack_copy0) (obstack, pointer, length)
        -: 5635:     struct obstack *obstack;
        -: 5636:     POINTER pointer;
        -: 5637:     int length;
        -: 5638:{
        -: 5639:  return obstack_copy0 (obstack, pointer, length);
        -: 5640:}
        -: 5641:
        -: 5642:#endif /* __STDC__ */
        -: 5643:
        -: 5644:#endif /* 0 */
        -: 5645:
        -: 5646:#endif	/* !ELIDE_CODE */
        -: 5647:/* Extended regular expression matching and search library,
        -: 5648:   version 0.12.
        -: 5649:   (Implements POSIX draft P1003.2/D11.2, except for some of the
        -: 5650:   internationalization features.)
        -: 5651:   Copyright (C) 1993, 94, 95, 96, 97, 98, 99 Free Software Foundation, Inc.
        -: 5652:
        -: 5653:   The GNU C Library is free software; you can redistribute it and/or
        -: 5654:   modify it under the terms of the GNU Library General Public License as
        -: 5655:   published by the Free Software Foundation; either version 2 of the
        -: 5656:   License, or (at your option) any later version.
        -: 5657:
        -: 5658:   The GNU C Library is distributed in the hope that it will be useful,
        -: 5659:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 5660:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -: 5661:   Library General Public License for more details.
        -: 5662:
        -: 5663:   You should have received a copy of the GNU Library General Public
        -: 5664:   License along with the GNU C Library; see the file COPYING.LIB.  If not,
        -: 5665:   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
        -: 5666:   Boston, MA 02111-1307, USA.  */
        -: 5667:
        -: 5668:/* AIX requires this to be the first thing in the file. */
        -: 5669:#if defined _AIX && !defined REGEX_MALLOC
        -: 5670:  #pragma alloca
        -: 5671:#endif
        -: 5672:
        -: 5673:#undef	_GNU_SOURCE
        -: 5674:#define _GNU_SOURCE
        -: 5675:
        -: 5676:#ifdef HAVE_CONFIG_H
        -: 5677:#if flag_config==0
        -: 5678:# include <config.h>
        -: 5679:#define flag_config 1
        -: 5680:#endif
        -: 5681:#endif
        -: 5682:
        -: 5683:#ifndef PARAMS
        -: 5684:# if defined __GNUC__ || (defined __STDC__ && __STDC__)
        -: 5685:#  define PARAMS(args) args
        -: 5686:# else
        -: 5687:#  define PARAMS(args) ()
        -: 5688:# endif  /* GCC.  */
        -: 5689:#endif  /* Not PARAMS.  */
        -: 5690:
        -: 5691:#if defined STDC_HEADERS && !defined emacs
        -: 5692:# include <stddef.h>
        -: 5693:#else
        -: 5694:/* We need this for `regex.h', and perhaps for the Emacs include files.  */
        -: 5695:#if flag_systypes==0
        -: 5696:# include <sys/types.h>
        -: 5697:#define flag_systypes 1
        -: 5698:#endif
        -: 5699:#endif
        -: 5700:
        -: 5701:#define WIDE_CHAR_SUPPORT (HAVE_WCTYPE_H && HAVE_WCHAR_H && HAVE_BTOWC)
        -: 5702:
        -: 5703:/* For platform which support the ISO C amendement 1 functionality we
        -: 5704:   support user defined character classes.  */
        -: 5705:#if defined _LIBC || WIDE_CHAR_SUPPORT
        -: 5706:/* Solaris 2.5 has a bug: <wchar.h> must be included before <wctype.h>.  */
        -: 5707:# include <wchar.h>
        -: 5708:# include <wctype.h>
        -: 5709:#endif
        -: 5710:
        -: 5711:#ifdef _LIBC
        -: 5712:/* We have to keep the namespace clean.  */
        -: 5713:# define regfree(preg) __regfree (preg)
        -: 5714:# define regexec(pr, st, nm, pm, ef) __regexec (pr, st, nm, pm, ef)
        -: 5715:# define regcomp(preg, pattern, cflags) __regcomp (preg, pattern, cflags)
        -: 5716:# define regerror(errcode, preg, errbuf, errbuf_size) \
        -: 5717:	__regerror(errcode, preg, errbuf, errbuf_size)
        -: 5718:# define re_set_registers(bu, re, nu, st, en) \
        -: 5719:	__re_set_registers (bu, re, nu, st, en)
        -: 5720:# define re_match_2(bufp, string1, size1, string2, size2, pos, regs, stop) \
        -: 5721:	__re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)
        -: 5722:# define re_match(bufp, string, size, pos, regs) \
        -: 5723:	__re_match (bufp, string, size, pos, regs)
        -: 5724:# define re_search(bufp, string, size, startpos, range, regs) \
        -: 5725:	__re_search (bufp, string, size, startpos, range, regs)
        -: 5726:# define re_compile_pattern(pattern, length, bufp) \
        -: 5727:	__re_compile_pattern (pattern, length, bufp)
        -: 5728:# define re_set_syntax(syntax) __re_set_syntax (syntax)
        -: 5729:# define re_search_2(bufp, st1, s1, st2, s2, startpos, range, regs, stop) \
        -: 5730:	__re_search_2 (bufp, st1, s1, st2, s2, startpos, range, regs, stop)
        -: 5731:# define re_compile_fastmap(bufp) __re_compile_fastmap (bufp)
        -: 5732:
        -: 5733:#define btowc __btowc
        -: 5734:#endif
        -: 5735:
        -: 5736:/* This is for other GNU distributions with internationalized messages.  */
        -: 5737:#if HAVE_LIBINTL_H || defined _LIBC
        -: 5738:#if flag_libintl==0
        -: 5739:# include <libintl.h>
        -: 5740:#define flag_libintl 1
        -: 5741:#endif
        -: 5742:#else
        -: 5743:# define gettext(msgid) (msgid)
        -: 5744:#endif
        -: 5745:
        -: 5746:#ifndef gettext_noop
        -: 5747:/* This define is so xgettext can find the internationalizable
        -: 5748:   strings.  */
        -: 5749:# define gettext_noop(String) String
        -: 5750:#endif
        -: 5751:
        -: 5752:/* The `emacs' switch turns on certain matching commands
        -: 5753:   that make sense only in Emacs. */
        -: 5754:#ifdef emacs
        -: 5755:
        -: 5756:# include "lisp.h"
        -: 5757:# include "buffer.h"
        -: 5758:# include "syntax.h"
        -: 5759:
        -: 5760:#else  /* not emacs */
        -: 5761:
        -: 5762:/* If we are not linking with Emacs proper,
        -: 5763:   we can't use the relocating allocator
        -: 5764:   even if config.h says that we can.  */
        -: 5765:# undef REL_ALLOC
        -: 5766:
        -: 5767:# if defined STDC_HEADERS || defined _LIBC
        -: 5768:#if flag_stdlib==0
        -: 5769:#  include <stdlib.h>
        -: 5770:#define flag_stdlib 1
        -: 5771:#endif
        -: 5772:# else
        -: 5773:char *malloc ();
        -: 5774:char *realloc ();
        -: 5775:# endif
        -: 5776:
        -: 5777:/* When used in Emacs's lib-src, we need to get bzero and bcopy somehow.
        -: 5778:   If nothing else has been done, use the method below.  */
        -: 5779:# ifdef INHIBIT_STRING_HEADER
        -: 5780:#  if !(defined HAVE_BZERO && defined HAVE_BCOPY)
        -: 5781:#   if !defined bzero && !defined bcopy
        -: 5782:#    undef INHIBIT_STRING_HEADER
        -: 5783:#   endif
        -: 5784:#  endif
        -: 5785:# endif
        -: 5786:
        -: 5787:/* This is the normal way of making sure we have a bcopy and a bzero.
        -: 5788:   This is used in most programs--a few other programs avoid this
        -: 5789:   by defining INHIBIT_STRING_HEADER.  */
        -: 5790:# ifndef INHIBIT_STRING_HEADER
        -: 5791:#  if defined HAVE_STRING_H || defined STDC_HEADERS || defined _LIBC
        -: 5792:#if flag_string==0
        -: 5793:#   include <string.h>
        -: 5794:#define flag_string 1
        -: 5795:#endif
        -: 5796:#   ifndef bzero
        -: 5797:#    ifndef _LIBC
        -: 5798:#     define bzero(s, n)	(memset (s, '\0', n), (s))
        -: 5799:#    else
        -: 5800:#     define bzero(s, n)	__bzero (s, n)
        -: 5801:#    endif
        -: 5802:#   endif
        -: 5803:#  else
        -: 5804:#if flag_strings==0
        -: 5805:#   include <strings.h>
        -: 5806:#define flag_strings 1
        -: 5807:#endif
        -: 5808:#   ifndef memcmp
        -: 5809:#    define memcmp(s1, s2, n)	bcmp (s1, s2, n)
        -: 5810:#   endif
        -: 5811:#   ifndef memcpy
        -: 5812:#    define memcpy(d, s, n)	(bcopy (s, d, n), (d))
        -: 5813:#   endif
        -: 5814:#  endif
        -: 5815:# endif
        -: 5816:
        -: 5817:/* Define the syntax stuff for \<, \>, etc.  */
        -: 5818:
        -: 5819:/* This must be nonzero for the wordchar and notwordchar pattern
        -: 5820:   commands in re_match_2.  */
        -: 5821:# ifndef Sword
        -: 5822:#  define Sword 1
        -: 5823:# endif
        -: 5824:
        -: 5825:# ifdef SWITCH_ENUM_BUG
        -: 5826:#  define SWITCH_ENUM_CAST(x) ((int)(x))
        -: 5827:# else
        -: 5828:#  define SWITCH_ENUM_CAST(x) (x)
        -: 5829:# endif
        -: 5830:
        -: 5831:#endif /* not emacs */
        -: 5832:
        -: 5833:/* Get the interface, including the syntax bits.  */
        -: 5834:/*#include "regex.h"*/
        -: 5835:
        -: 5836:/* isalpha etc. are used for the character classes.  */
        -: 5837:/*#include <ctype.h>*/
        -: 5838:
        -: 5839:/* Jim Meyering writes:
        -: 5840:
        -: 5841:   "... Some ctype macros are valid only for character codes that
        -: 5842:   isascii says are ASCII (SGI's IRIX-4.0.5 is one such system --when
        -: 5843:   using /bin/cc or gcc but without giving an ansi option).  So, all
        -: 5844:   ctype uses should be through macros like ISPRINT...  If
        -: 5845:   STDC_HEADERS is defined, then autoconf has verified that the ctype
        -: 5846:   macros don't need to be guarded with references to isascii. ...
        -: 5847:   Defining isascii to 1 should let any compiler worth its salt
        -: 5848:   eliminate the && through constant folding."
        -: 5849:   Solaris defines some of these symbols so we must undefine them first.  */
        -: 5850:
        -: 5851:#undef ISASCII
        -: 5852:#if defined STDC_HEADERS || (!defined isascii && !defined HAVE_ISASCII)
        -: 5853:# define ISASCII(c) 1
        -: 5854:#else
        -: 5855:# define ISASCII(c) isascii(c)
        -: 5856:#endif
        -: 5857:
        -: 5858:#ifdef isblank
        -: 5859:# define ISBLANK(c) (ISASCII (c) && isblank (c))
        -: 5860:#else
        -: 5861:# define ISBLANK(c) ((c) == ' ' || (c) == '\t')
        -: 5862:#endif
        -: 5863:
        -: 5864:#undef ISGRAPH
        -: 5865:#undef ISDIGIT
        -: 5866:#undef  ISALNUM
        -: 5867:#undef ISALPHA
        -: 5868:#undef ISCNTRL
        -: 5869:#undef ISLOWER
        -: 5870:#undef ISPUNCT
        -: 5871:#undef  ISSPACE
        -: 5872:#undef  ISUPPER
        -: 5873:#undef ISXDIGIT
        -: 5874:
        -: 5875:
        -: 5876:
        -: 5877:#ifdef isgraph
        -: 5878:# define ISGRAPH(c) (ISASCII (c) && isgraph (c))
        -: 5879:#else
        -: 5880:# define ISGRAPH(c) (ISASCII (c) && isprint (c) && !isspace (c))
        -: 5881:#endif
        -: 5882:
        -: 5883:#undef ISPRINT
        -: 5884:#define ISPRINT(c) (ISASCII (c) && isprint (c))
        -: 5885:#define ISDIGIT(c) (ISASCII (c) && isdigit (c))
        -: 5886:#define ISALNUM(c) (ISASCII (c) && isalnum (c))
        -: 5887:#define ISALPHA(c) (ISASCII (c) && isalpha (c))
        -: 5888:#define ISCNTRL(c) (ISASCII (c) && iscntrl (c))
        -: 5889:#define ISLOWER(c) (ISASCII (c) && islower (c))
        -: 5890:#define ISPUNCT(c) (ISASCII (c) && ispunct (c))
        -: 5891:#define ISSPACE(c) (ISASCII (c) && isspace (c))
        -: 5892:#define ISUPPER(c) (ISASCII (c) && isupper (c))
        -: 5893:#define ISXDIGIT(c) (ISASCII (c) && isxdigit (c))
        -: 5894:
        -: 5895:#ifndef NULL
        -: 5896:# define NULL (void *)0
        -: 5897:#endif
        -: 5898:
        -: 5899:/* We remove any previous definition of `SIGN_EXTEND_CHAR',
        -: 5900:   since ours (we hope) works properly with all combinations of
        -: 5901:   machines, compilers, `char' and `unsigned char' argument types.
        -: 5902:   (Per Bothner suggested the basic approach.)  */
        -: 5903:#undef SIGN_EXTEND_CHAR
        -: 5904:#if __STDC__
        -: 5905:# define SIGN_EXTEND_CHAR(c) ((signed char) (c))
        -: 5906:#else  /* not __STDC__ */
        -: 5907:/* As in Harbison and Steele.  */
        -: 5908:# define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - 128)
        -: 5909:#endif
        -: 5910:
        -: 5911:#ifndef emacs
        -: 5912:/* How many characters in the character set.  */
        -: 5913:#define CHAR_SET_SIZE 256
        -: 5914:
        -: 5915:#ifdef SYNTAX_TABLE
        -: 5916:
        -: 5917:extern char *re_syntax_table;
        -: 5918:
        -: 5919:#else /* not SYNTAX_TABLE */
        -: 5920:
        -: 5921:static char re_syntax_table[CHAR_SET_SIZE];
        -: 5922:
        -: 5923:static void
function init_syntax_once called 781 returned 100% blocks executed 89%
      781: 5924:init_syntax_once ()
        -: 5925:{
        -: 5926:    register int c;
        -: 5927:    static int done = 0;
        -: 5928:
      781: 5929:    if (done)
branch  0 taken 0 (fallthrough)
branch  1 taken 781
    #####: 5930:	return;
      781: 5931:    bzero (re_syntax_table, sizeof re_syntax_table);
        -: 5932:
        -: 5933:#ifndef FAULTY_F_KP_3
   200717: 5934:    for (c = 0; c < CHAR_SET_SIZE; c++)
branch  0 taken 199936
branch  1 taken 781 (fallthrough)
        -: 5935:
   199936: 5936:	if (ISALNUM (c))
branch  0 taken 48422 (fallthrough)
branch  1 taken 151514
        -: 5937:#else
        -: 5938:	if (ISALNUM (c++))
        -: 5939:#endif
        -: 5940:
    48422: 5941:	    re_syntax_table[c] = Sword;
        -: 5942:
      781: 5943:    re_syntax_table['_'] = Sword;
        -: 5944:
      781: 5945:    done = 1;
        -: 5946:}
        -: 5947:
        -: 5948:#endif /* not SYNTAX_TABLE */
        -: 5949:
        -: 5950:#define SYNTAX(c) re_syntax_table[((c) & 0xFF)]
        -: 5951:
        -: 5952:#endif /* emacs */
        -: 5953:
        -: 5954:/* Should we use malloc or alloca?  If REGEX_MALLOC is not defined, we
        -: 5955:   use `alloca' instead of `malloc'.  This is because using malloc in
        -: 5956:   re_search* or re_match* could cause memory leaks when C-g is used in
        -: 5957:   Emacs; also, malloc is slower and causes storage fragmentation.  On
        -: 5958:   the other hand, malloc is more portable, and easier to debug.
        -: 5959:
        -: 5960:   Because we sometimes use alloca, some routines have to be macros,
        -: 5961:   not functions -- `alloca'-allocated space disappears at the end of the
        -: 5962:   function it is called in.  */
        -: 5963:
        -: 5964:#ifdef REGEX_MALLOC
        -: 5965:
        -: 5966:# define REGEX_ALLOCATE malloc
        -: 5967:# define REGEX_REALLOCATE(source, osize, nsize) realloc (source, nsize)
        -: 5968:# define REGEX_FREE free
        -: 5969:
        -: 5970:#else /* not REGEX_MALLOC  */
        -: 5971:
        -: 5972:/* Emacs already defines alloca, sometimes.  */
        -: 5973:# ifndef alloca
        -: 5974:
        -: 5975:/* Make alloca work the best possible way.  */
        -: 5976:#  ifdef __GNUC__
        -: 5977:#   define alloca __builtin_alloca
        -: 5978:#  else /* not __GNUC__ */
        -: 5979:#   if HAVE_ALLOCA_H
        -: 5980:#    include <alloca.h>
        -: 5981:#   endif /* HAVE_ALLOCA_H */
        -: 5982:#  endif /* not __GNUC__ */
        -: 5983:
        -: 5984:# endif /* not alloca */
        -: 5985:
        -: 5986:# define REGEX_ALLOCATE alloca
        -: 5987:
        -: 5988:/* Assumes a `char *destination' variable.  */
        -: 5989:# define REGEX_REALLOCATE(source, osize, nsize)				\
        -: 5990:  (destination = (char *) alloca (nsize),				\
        -: 5991:   memcpy (destination, source, osize))
        -: 5992:
        -: 5993:/* No need to do anything to free, after alloca.  */
        -: 5994:# define REGEX_FREE(arg) ((void)0) /* Do nothing!  But inhibit gcc warning.  */
        -: 5995:
        -: 5996:#endif /* not REGEX_MALLOC */
        -: 5997:
        -: 5998:/* Define how to allocate the failure stack.  */
        -: 5999:
        -: 6000:#if defined REL_ALLOC && defined REGEX_MALLOC
        -: 6001:
        -: 6002:# define REGEX_ALLOCATE_STACK(size)				\
        -: 6003:  r_alloc (&failure_stack_ptr, (size))
        -: 6004:# define REGEX_REALLOCATE_STACK(source, osize, nsize)		\
        -: 6005:  r_re_alloc (&failure_stack_ptr, (nsize))
        -: 6006:# define REGEX_FREE_STACK(ptr)					\
        -: 6007:  r_alloc_free (&failure_stack_ptr)
        -: 6008:
        -: 6009:#else /* not using relocating allocator */
        -: 6010:
        -: 6011:# ifdef REGEX_MALLOC
        -: 6012:
        -: 6013:#  define REGEX_ALLOCATE_STACK malloc
        -: 6014:#  define REGEX_REALLOCATE_STACK(source, osize, nsize) realloc (source, nsize)
        -: 6015:#  define REGEX_FREE_STACK free
        -: 6016:
        -: 6017:# else /* not REGEX_MALLOC */
        -: 6018:
        -: 6019:#  define REGEX_ALLOCATE_STACK alloca
        -: 6020:
        -: 6021:#  define REGEX_REALLOCATE_STACK(source, osize, nsize)			\
        -: 6022:   REGEX_REALLOCATE (source, osize, nsize)
        -: 6023:/* No need to explicitly free anything.  */
        -: 6024:#  define REGEX_FREE_STACK(arg)
        -: 6025:
        -: 6026:# endif /* not REGEX_MALLOC */
        -: 6027:#endif /* not using relocating allocator */
        -: 6028:
        -: 6029:
        -: 6030:/* True if `size1' is non-NULL and PTR is pointing anywhere inside
        -: 6031:   `string1' or just past its end.  This works if PTR is NULL, which is
        -: 6032:   a good thing.  */
        -: 6033:#define FIRST_STRING_P(ptr) 					\
        -: 6034:  (size1 && string1 <= (ptr) && (ptr) <= string1 + size1)
        -: 6035:
        -: 6036:/* (Re)Allocate N items of type T using malloc, or fail.  */
        -: 6037:#define TALLOC(n, t) ((t *) malloc ((n) * sizeof (t)))
        -: 6038:#define RETALLOC(addr, n, t) ((addr) = (t *) realloc (addr, (n) * sizeof (t)))
        -: 6039:#define RETALLOC_IF(addr, n, t) \
        -: 6040:  if (addr) RETALLOC((addr), (n), t); else (addr) = TALLOC ((n), t)
        -: 6041:#define REGEX_TALLOC(n, t) ((t *) REGEX_ALLOCATE ((n) * sizeof (t)))
        -: 6042:
        -: 6043:#define BYTEWIDTH 8 /* In bits.  */
        -: 6044:
        -: 6045:#define STREQ(s1, s2) ((strcmp (s1, s2) == 0))
        -: 6046:
        -: 6047:#undef MAX
        -: 6048:#undef MIN
        -: 6049:#define MAX(a, b) ((a) > (b) ? (a) : (b))
        -: 6050:#define MIN(a, b) ((a) < (b) ? (a) : (b))
        -: 6051:
        -: 6052:typedef char boolean;
        -: 6053:#define false 0
        -: 6054:#define true 1
        -: 6055:
        -: 6056:static int re_match_2_internal PARAMS ((struct re_pattern_buffer *bufp,
        -: 6057:					const char *string1, int size1,
        -: 6058:					const char *string2, int size2,
        -: 6059:					int pos,
        -: 6060:					struct re_registers *regs,
        -: 6061:					int stop));
        -: 6062:
        -: 6063:/* These are the command codes that appear in compiled regular
        -: 6064:   expressions.  Some opcodes are followed by argument bytes.  A
        -: 6065:   command code can specify any interpretation whatsoever for its
        -: 6066:   arguments.  Zero bytes may appear in the compiled regular expression.  */
        -: 6067:
        -: 6068:typedef enum
        -: 6069:{
        -: 6070:  no_op = 0,
        -: 6071:
        -: 6072:  /* Succeed right away--no more backtracking.  */
        -: 6073:  succeed,
        -: 6074:
        -: 6075:        /* Followed by one byte giving n, then by n literal bytes.  */
        -: 6076:  exactn,
        -: 6077:
        -: 6078:        /* Matches any (more or less) character.  */
        -: 6079:  anychar,
        -: 6080:
        -: 6081:        /* Matches any one char belonging to specified set.  First
        -: 6082:           following byte is number of bitmap bytes.  Then come bytes
        -: 6083:           for a bitmap saying which chars are in.  Bits in each byte
        -: 6084:           are ordered low-bit-first.  A character is in the set if its
        -: 6085:           bit is 1.  A character too large to have a bit in the map is
        -: 6086:           automatically not in the set.  */
        -: 6087:  charset,
        -: 6088:
        -: 6089:        /* Same parameters as charset, but match any character that is
        -: 6090:           not one of those specified.  */
        -: 6091:  charset_not,
        -: 6092:
        -: 6093:        /* Start remembering the text that is matched, for storing in a
        -: 6094:           register.  Followed by one byte with the register number, in
        -: 6095:           the range 0 to one less than the pattern buffer's re_nsub
        -: 6096:           field.  Then followed by one byte with the number of groups
        -: 6097:           inner to this one.  (This last has to be part of the
        -: 6098:           start_memory only because we need it in the on_failure_jump
        -: 6099:           of re_match_2.)  */
        -: 6100:  start_memory,
        -: 6101:
        -: 6102:        /* Stop remembering the text that is matched and store it in a
        -: 6103:           memory register.  Followed by one byte with the register
        -: 6104:           number, in the range 0 to one less than `re_nsub' in the
        -: 6105:           pattern buffer, and one byte with the number of inner groups,
        -: 6106:           just like `start_memory'.  (We need the number of inner
        -: 6107:           groups here because we don't have any easy way of finding the
        -: 6108:           corresponding start_memory when we're at a stop_memory.)  */
        -: 6109:  stop_memory,
        -: 6110:
        -: 6111:        /* Match a duplicate of something remembered. Followed by one
        -: 6112:           byte containing the register number.  */
        -: 6113:  duplicate,
        -: 6114:
        -: 6115:        /* Fail unless at beginning of line.  */
        -: 6116:  begline,
        -: 6117:
        -: 6118:        /* Fail unless at end of line.  */
        -: 6119:  endline,
        -: 6120:
        -: 6121:        /* Succeeds if at beginning of buffer (if emacs) or at beginning
        -: 6122:           of string to be matched (if not).  */
        -: 6123:  begbuf,
        -: 6124:
        -: 6125:        /* Analogously, for end of buffer/string.  */
        -: 6126:  endbuf,
        -: 6127:
        -: 6128:        /* Followed by two byte relative address to which to jump.  */
        -: 6129:  jump,
        -: 6130:
        -: 6131:	/* Same as jump, but marks the end of an alternative.  */
        -: 6132:  jump_past_alt,
        -: 6133:
        -: 6134:        /* Followed by two-byte relative address of place to resume at
        -: 6135:           in case of failure.  */
        -: 6136:  on_failure_jump,
        -: 6137:
        -: 6138:        /* Like on_failure_jump, but pushes a placeholder instead of the
        -: 6139:           current string position when executed.  */
        -: 6140:  on_failure_keep_string_jump,
        -: 6141:
        -: 6142:        /* Throw away latest failure point and then jump to following
        -: 6143:           two-byte relative address.  */
        -: 6144:  pop_failure_jump,
        -: 6145:
        -: 6146:        /* Change to pop_failure_jump if know won't have to backtrack to
        -: 6147:           match; otherwise change to jump.  This is used to jump
        -: 6148:           back to the beginning of a repeat.  If what follows this jump
        -: 6149:           clearly won't match what the repeat does, such that we can be
        -: 6150:           sure that there is no use backtracking out of repetitions
        -: 6151:           already matched, then we change it to a pop_failure_jump.
        -: 6152:           Followed by two-byte address.  */
        -: 6153:  maybe_pop_jump,
        -: 6154:
        -: 6155:        /* Jump to following two-byte address, and push a dummy failure
        -: 6156:           point. This failure point will be thrown away if an attempt
        -: 6157:           is made to use it for a failure.  A `+' construct makes this
        -: 6158:           before the first repeat.  Also used as an intermediary kind
        -: 6159:           of jump when compiling an alternative.  */
        -: 6160:  dummy_failure_jump,
        -: 6161:
        -: 6162:	/* Push a dummy failure point and continue.  Used at the end of
        -: 6163:	   alternatives.  */
        -: 6164:  push_dummy_failure,
        -: 6165:
        -: 6166:        /* Followed by two-byte relative address and two-byte number n.
        -: 6167:           After matching N times, jump to the address upon failure.  */
        -: 6168:  succeed_n,
        -: 6169:
        -: 6170:        /* Followed by two-byte relative address, and two-byte number n.
        -: 6171:           Jump to the address N times, then fail.  */
        -: 6172:  jump_n,
        -: 6173:
        -: 6174:        /* Set the following two-byte relative address to the
        -: 6175:           subsequent two-byte number.  The address *includes* the two
        -: 6176:           bytes of number.  */
        -: 6177:  set_number_at,
        -: 6178:
        -: 6179:  wordchar,	/* Matches any word-constituent character.  */
        -: 6180:  notwordchar,	/* Matches any char that is not a word-constituent.  */
        -: 6181:
        -: 6182:  wordbeg,	/* Succeeds if at word beginning.  */
        -: 6183:  wordend,	/* Succeeds if at word end.  */
        -: 6184:
        -: 6185:  wordbound,	/* Succeeds if at a word boundary.  */
        -: 6186:  notwordbound	/* Succeeds if not at a word boundary.  */
        -: 6187:
        -: 6188:#ifdef emacs
        -: 6189:  ,before_dot,	/* Succeeds if before point.  */
        -: 6190:  at_dot,	/* Succeeds if at point.  */
        -: 6191:  after_dot,	/* Succeeds if after point.  */
        -: 6192:
        -: 6193:	/* Matches any character whose syntax is specified.  Followed by
        -: 6194:           a byte which contains a syntax code, e.g., Sword.  */
        -: 6195:  syntaxspec,
        -: 6196:
        -: 6197:	/* Matches any character whose syntax is not that specified.  */
        -: 6198:  notsyntaxspec
        -: 6199:#endif /* emacs */
        -: 6200:} re_opcode_t;
        -: 6201:
        -: 6202:/* Common operations on the compiled pattern.  */
        -: 6203:
        -: 6204:/* Store NUMBER in two contiguous bytes starting at DESTINATION.  */
        -: 6205:
        -: 6206:#define STORE_NUMBER(destination, number)				\
        -: 6207:  do {									\
        -: 6208:    (destination)[0] = (number) & 0377;					\
        -: 6209:    (destination)[1] = (number) >> 8;					\
        -: 6210:  } while (0)
        -: 6211:
        -: 6212:/* Same as STORE_NUMBER, except increment DESTINATION to
        -: 6213:   the byte after where the number is stored.  Therefore, DESTINATION
        -: 6214:   must be an lvalue.  */
        -: 6215:
        -: 6216:#define STORE_NUMBER_AND_INCR(destination, number)			\
        -: 6217:  do {									\
        -: 6218:    STORE_NUMBER (destination, number);					\
        -: 6219:    (destination) += 2;							\
        -: 6220:  } while (0)
        -: 6221:
        -: 6222:/* Put into DESTINATION a number stored in two contiguous bytes starting
        -: 6223:   at SOURCE.  */
        -: 6224:
        -: 6225:#define EXTRACT_NUMBER(destination, source)				\
        -: 6226:  do {									\
        -: 6227:    (destination) = *(source) & 0377;					\
        -: 6228:    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << 8;		\
        -: 6229:  } while (0)
        -: 6230:
        -: 6231:#ifdef DEBUG
        -: 6232:static void extract_number _RE_ARGS ((int *dest, unsigned char *source));
        -: 6233:static void
        -: 6234:extract_number (dest, source)
        -: 6235:    int *dest;
        -: 6236:    unsigned char *source;
        -: 6237:{
        -: 6238:  int temp = SIGN_EXTEND_CHAR (*(source + 1));
        -: 6239:  *dest = *source & 0377;
        -: 6240:  *dest += temp << 8;
        -: 6241:}
        -: 6242:
        -: 6243:# ifndef EXTRACT_MACROS /* To debug the macros.  */
        -: 6244:#  undef EXTRACT_NUMBER
        -: 6245:#  define EXTRACT_NUMBER(dest, src) extract_number (&dest, src)
        -: 6246:# endif /* not EXTRACT_MACROS */
        -: 6247:
        -: 6248:#endif /* DEBUG */
        -: 6249:
        -: 6250:/* Same as EXTRACT_NUMBER, except increment SOURCE to after the number.
        -: 6251:   SOURCE must be an lvalue.  */
        -: 6252:
        -: 6253:#define EXTRACT_NUMBER_AND_INCR(destination, source)			\
        -: 6254:  do {									\
        -: 6255:    EXTRACT_NUMBER (destination, source);				\
        -: 6256:    (source) += 2; 							\
        -: 6257:  } while (0)
        -: 6258:
        -: 6259:#ifdef DEBUG
        -: 6260:static void extract_number_and_incr _RE_ARGS ((int *destination,
        -: 6261:					       unsigned char **source));
        -: 6262:static void
        -: 6263:extract_number_and_incr (destination, source)
        -: 6264:    int *destination;
        -: 6265:    unsigned char **source;
        -: 6266:{
        -: 6267:  extract_number (destination, *source);
        -: 6268:  *source += 2;
        -: 6269:}
        -: 6270:
        -: 6271:# ifndef EXTRACT_MACROS
        -: 6272:#  undef EXTRACT_NUMBER_AND_INCR
        -: 6273:#  define EXTRACT_NUMBER_AND_INCR(dest, src) \
        -: 6274:  extract_number_and_incr (&dest, &src)
        -: 6275:# endif /* not EXTRACT_MACROS */
        -: 6276:
        -: 6277:#endif /* DEBUG */
        -: 6278:
        -: 6279:/* If DEBUG is defined, Regex prints many voluminous messages about what
        -: 6280:   it is doing (if the variable `debug' is nonzero).  If linked with the
        -: 6281:   main program in `iregex.c', you can enter patterns and strings
        -: 6282:   interactively.  And if linked with the main program in `main.c' and
        -: 6283:   the other test files, you can run the already-written tests.  */
        -: 6284:
        -: 6285:#ifdef DEBUG
        -: 6286:
        -: 6287:/* We use standard I/O for debugging.  */
        -: 6288:/*# include <stdio.h>*/
        -: 6289:
        -: 6290:/* It is useful to test things that ``must'' be true when debugging.  */
        -: 6291:/*# include <assert.h>*/
        -: 6292:
        -: 6293:static int debug;
        -: 6294:
        -: 6295:# define DEBUG_STATEMENT(e) e
        -: 6296:# define DEBUG_PRINT1(x) if (debug) printf (x)
        -: 6297:# define DEBUG_PRINT2(x1, x2) if (debug) printf (x1, x2)
        -: 6298:# define DEBUG_PRINT3(x1, x2, x3) if (debug) printf (x1, x2, x3)
        -: 6299:# define DEBUG_PRINT4(x1, x2, x3, x4) if (debug) printf (x1, x2, x3, x4)
        -: 6300:# define DEBUG_PRINT_COMPILED_PATTERN(p, s, e) 				\
        -: 6301:  if (debug) print_partial_compiled_pattern (s, e)
        -: 6302:# define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)			\
        -: 6303:  if (debug) print_double_string (w, s1, sz1, s2, sz2)
        -: 6304:
        -: 6305:
        -: 6306:/* Print the fastmap in human-readable form.  */
        -: 6307:
        -: 6308:void
        -: 6309:print_fastmap (fastmap)
        -: 6310:    char *fastmap;
        -: 6311:{
        -: 6312:  unsigned was_a_range = 0;
        -: 6313:  unsigned i = 0;
        -: 6314:
        -: 6315:  while (i < (1 << BYTEWIDTH))
        -: 6316:    {
        -: 6317:      if (fastmap[i++])
        -: 6318:	{
        -: 6319:	  was_a_range = 0;
        -: 6320:          putchar (i - 1);
        -: 6321:          while (i < (1 << BYTEWIDTH)  &&  fastmap[i])
        -: 6322:            {
        -: 6323:              was_a_range = 1;
        -: 6324:              i++;
        -: 6325:            }
        -: 6326:	  if (was_a_range)
        -: 6327:            {
        -: 6328:              printf ("-");
        -: 6329:              putchar (i - 1);
        -: 6330:            }
        -: 6331:        }
        -: 6332:    }
        -: 6333:  putchar ('\n');
        -: 6334:}
        -: 6335:
        -: 6336:
        -: 6337:/* Print a compiled pattern string in human-readable form, starting at
        -: 6338:   the START pointer into it and ending just before the pointer END.  */
        -: 6339:
        -: 6340:void
        -: 6341:print_partial_compiled_pattern (start, end)
        -: 6342:    unsigned char *start;
        -: 6343:    unsigned char *end;
        -: 6344:{
        -: 6345:  int mcnt, mcnt2;
        -: 6346:  unsigned char *p1;
        -: 6347:  unsigned char *p = start;
        -: 6348:  unsigned char *pend = end;
        -: 6349:
        -: 6350:  if (start == NULL)
        -: 6351:    {
        -: 6352:      printf ("(null)\n");
        -: 6353:      return;
        -: 6354:    }
        -: 6355:
        -: 6356:  /* Loop over pattern commands.  */
        -: 6357:  while (p < pend)
        -: 6358:    {
        -: 6359:      printf ("%d:\t", p - start);
        -: 6360:
        -: 6361:      switch ((re_opcode_t) *p++)
        -: 6362:	{
        -: 6363:        case no_op:
        -: 6364:          printf ("/no_op");
        -: 6365:          break;
        -: 6366:
        -: 6367:	case exactn:
        -: 6368:	  mcnt = *p++;
        -: 6369:          printf ("/exactn/%d", mcnt);
        -: 6370:          do
        -: 6371:	    {
        -: 6372:              putchar ('/');
        -: 6373:	      putchar (*p++);
        -: 6374:            }
        -: 6375:          while (--mcnt);
        -: 6376:          break;
        -: 6377:
        -: 6378:	case start_memory:
        -: 6379:          mcnt = *p++;
        -: 6380:          printf ("/start_memory/%d/%d", mcnt, *p++);
        -: 6381:          break;
        -: 6382:
        -: 6383:	case stop_memory:
        -: 6384:          mcnt = *p++;
        -: 6385:	  printf ("/stop_memory/%d/%d", mcnt, *p++);
        -: 6386:          break;
        -: 6387:
        -: 6388:	case duplicate:
        -: 6389:	  printf ("/duplicate/%d", *p++);
        -: 6390:	  break;
        -: 6391:
        -: 6392:	case anychar:
        -: 6393:	  printf ("/anychar");
        -: 6394:	  break;
        -: 6395:
        -: 6396:	case charset:
        -: 6397:        case charset_not:
        -: 6398:          {
        -: 6399:            register int c, last = -100;
        -: 6400:	    register int in_range = 0;
        -: 6401:
        -: 6402:	    printf ("/charset [%s",
        -: 6403:	            (re_opcode_t) *(p - 1) == charset_not ? "^" : "");
        -: 6404:
        -: 6405:            assert (p + *p < pend);
        -: 6406:
        -: 6407:            for (c = 0; c < 256; c++)
        -: 6408:	      if (c / 8 < *p
        -: 6409:		  && (p[1 + (c/8)] & (1 << (c % 8))))
        -: 6410:		{
        -: 6411:		  /* Are we starting a range?  */
        -: 6412:		  if (last + 1 == c && ! in_range)
        -: 6413:		    {
        -: 6414:		      putchar ('-');
        -: 6415:		      in_range = 1;
        -: 6416:		    }
        -: 6417:		  /* Have we broken a range?  */
        -: 6418:		  else if (last + 1 != c && in_range)
        -: 6419:              {
        -: 6420:		      putchar (last);
        -: 6421:		      in_range = 0;
        -: 6422:		    }
        -: 6423:
        -: 6424:		  if (! in_range)
        -: 6425:		    putchar (c);
        -: 6426:
        -: 6427:		  last = c;
        -: 6428:              }
        -: 6429:
        -: 6430:	    if (in_range)
        -: 6431:	      putchar (last);
        -: 6432:
        -: 6433:	    putchar (']');
        -: 6434:
        -: 6435:	    p += 1 + *p;
        -: 6436:	  }
        -: 6437:	  break;
        -: 6438:
        -: 6439:	case begline:
        -: 6440:	  printf ("/begline");
        -: 6441:          break;
        -: 6442:
        -: 6443:	case endline:
        -: 6444:          printf ("/endline");
        -: 6445:          break;
        -: 6446:
        -: 6447:	case on_failure_jump:
        -: 6448:          extract_number_and_incr (&mcnt, &p);
        -: 6449:  	  printf ("/on_failure_jump to %d", p + mcnt - start);
        -: 6450:          break;
        -: 6451:
        -: 6452:	case on_failure_keep_string_jump:
        -: 6453:          extract_number_and_incr (&mcnt, &p);
        -: 6454:  	  printf ("/on_failure_keep_string_jump to %d", p + mcnt - start);
        -: 6455:          break;
        -: 6456:
        -: 6457:	case dummy_failure_jump:
        -: 6458:          extract_number_and_incr (&mcnt, &p);
        -: 6459:  	  printf ("/dummy_failure_jump to %d", p + mcnt - start);
        -: 6460:          break;
        -: 6461:
        -: 6462:	case push_dummy_failure:
        -: 6463:          printf ("/push_dummy_failure");
        -: 6464:          break;
        -: 6465:
        -: 6466:        case maybe_pop_jump:
        -: 6467:          extract_number_and_incr (&mcnt, &p);
        -: 6468:  	  printf ("/maybe_pop_jump to %d", p + mcnt - start);
        -: 6469:	  break;
        -: 6470:
        -: 6471:        case pop_failure_jump:
        -: 6472:	  extract_number_and_incr (&mcnt, &p);
        -: 6473:  	  printf ("/pop_failure_jump to %d", p + mcnt - start);
        -: 6474:	  break;
        -: 6475:
        -: 6476:        case jump_past_alt:
        -: 6477:	  extract_number_and_incr (&mcnt, &p);
        -: 6478:  	  printf ("/jump_past_alt to %d", p + mcnt - start);
        -: 6479:	  break;
        -: 6480:
        -: 6481:        case jump:
        -: 6482:	  extract_number_and_incr (&mcnt, &p);
        -: 6483:  	  printf ("/jump to %d", p + mcnt - start);
        -: 6484:	  break;
        -: 6485:
        -: 6486:        case succeed_n:
        -: 6487:          extract_number_and_incr (&mcnt, &p);
        -: 6488:	  p1 = p + mcnt;
        -: 6489:          extract_number_and_incr (&mcnt2, &p);
        -: 6490:	  printf ("/succeed_n to %d, %d times", p1 - start, mcnt2);
        -: 6491:          break;
        -: 6492:
        -: 6493:        case jump_n:
        -: 6494:          extract_number_and_incr (&mcnt, &p);
        -: 6495:	  p1 = p + mcnt;
        -: 6496:          extract_number_and_incr (&mcnt2, &p);
        -: 6497:	  printf ("/jump_n to %d, %d times", p1 - start, mcnt2);
        -: 6498:          break;
        -: 6499:
        -: 6500:        case set_number_at:
        -: 6501:          extract_number_and_incr (&mcnt, &p);
        -: 6502:	  p1 = p + mcnt;
        -: 6503:          extract_number_and_incr (&mcnt2, &p);
        -: 6504:	  printf ("/set_number_at location %d to %d", p1 - start, mcnt2);
        -: 6505:          break;
        -: 6506:
        -: 6507:        case wordbound:
        -: 6508:	  printf ("/wordbound");
        -: 6509:	  break;
        -: 6510:
        -: 6511:	case notwordbound:
        -: 6512:	  printf ("/notwordbound");
        -: 6513:          break;
        -: 6514:
        -: 6515:	case wordbeg:
        -: 6516:	  printf ("/wordbeg");
        -: 6517:	  break;
        -: 6518:
        -: 6519:	case wordend:
        -: 6520:	  printf ("/wordend");
        -: 6521:
        -: 6522:# ifdef emacs
        -: 6523:	case before_dot:
        -: 6524:	  printf ("/before_dot");
        -: 6525:          break;
        -: 6526:
        -: 6527:	case at_dot:
        -: 6528:	  printf ("/at_dot");
        -: 6529:          break;
        -: 6530:
        -: 6531:	case after_dot:
        -: 6532:	  printf ("/after_dot");
        -: 6533:          break;
        -: 6534:
        -: 6535:	case syntaxspec:
        -: 6536:          printf ("/syntaxspec");
        -: 6537:	  mcnt = *p++;
        -: 6538:	  printf ("/%d", mcnt);
        -: 6539:          break;
        -: 6540:
        -: 6541:	case notsyntaxspec:
        -: 6542:          printf ("/notsyntaxspec");
        -: 6543:	  mcnt = *p++;
        -: 6544:	  printf ("/%d", mcnt);
        -: 6545:	  break;
        -: 6546:# endif /* emacs */
        -: 6547:
        -: 6548:	case wordchar:
        -: 6549:	  printf ("/wordchar");
        -: 6550:          break;
        -: 6551:
        -: 6552:	case notwordchar:
        -: 6553:	  printf ("/notwordchar");
        -: 6554:          break;
        -: 6555:
        -: 6556:	case begbuf:
        -: 6557:	  printf ("/begbuf");
        -: 6558:          break;
        -: 6559:
        -: 6560:	case endbuf:
        -: 6561:	  printf ("/endbuf");
        -: 6562:          break;
        -: 6563:
        -: 6564:        default:
        -: 6565:          printf ("?%d", *(p-1));
        -: 6566:	}
        -: 6567:
        -: 6568:      putchar ('\n');
        -: 6569:    }
        -: 6570:
        -: 6571:  printf ("%d:\tend of pattern.\n", p - start);
        -: 6572:}
        -: 6573:
        -: 6574:
        -: 6575:void
        -: 6576:print_compiled_pattern (bufp)
        -: 6577:    struct re_pattern_buffer *bufp;
        -: 6578:{
        -: 6579:  unsigned char *buffer = bufp->buffer;
        -: 6580:
        -: 6581:  print_partial_compiled_pattern (buffer, buffer + bufp->used);
        -: 6582:  printf ("%ld bytes used/%ld bytes allocated.\n",
        -: 6583:	  bufp->used, bufp->allocated);
        -: 6584:
        -: 6585:  if (bufp->fastmap_accurate && bufp->fastmap)
        -: 6586:    {
        -: 6587:      printf ("fastmap: ");
        -: 6588:      print_fastmap (bufp->fastmap);
        -: 6589:    }
        -: 6590:
        -: 6591:  printf ("re_nsub: %d\t", bufp->re_nsub);
        -: 6592:  printf ("regs_alloc: %d\t", bufp->regs_allocated);
        -: 6593:  printf ("can_be_null: %d\t", bufp->can_be_null);
        -: 6594:  printf ("newline_anchor: %d\n", bufp->newline_anchor);
        -: 6595:  printf ("no_sub: %d\t", bufp->no_sub);
        -: 6596:  printf ("not_bol: %d\t", bufp->not_bol);
        -: 6597:  printf ("not_eol: %d\t", bufp->not_eol);
        -: 6598:  printf ("syntax: %lx\n", bufp->syntax);
        -: 6599:  /* Perhaps we should print the translate table?  */
        -: 6600:}
        -: 6601:
        -: 6602:
        -: 6603:void
        -: 6604:print_double_string (where, string1, size1, string2, size2)
        -: 6605:    const char *where;
        -: 6606:    const char *string1;
        -: 6607:    const char *string2;
        -: 6608:    int size1;
        -: 6609:    int size2;
        -: 6610:{
        -: 6611:  int this_char;
        -: 6612:
        -: 6613:  if (where == NULL)
        -: 6614:    printf ("(null)");
        -: 6615:  else
        -: 6616:    {
        -: 6617:      if (FIRST_STRING_P (where))
        -: 6618:        {
        -: 6619:          for (this_char = where - string1; this_char < size1; this_char++)
        -: 6620:            putchar (string1[this_char]);
        -: 6621:
        -: 6622:          where = string2;
        -: 6623:        }
        -: 6624:
        -: 6625:      for (this_char = where - string2; this_char < size2; this_char++)
        -: 6626:        putchar (string2[this_char]);
        -: 6627:    }
        -: 6628:}
        -: 6629:
        -: 6630:void
        -: 6631:printchar (c)
        -: 6632:     int c;
        -: 6633:{
        -: 6634:  putc (c, stderr);
        -: 6635:}
        -: 6636:
        -: 6637:#else /* not DEBUG */
        -: 6638:
        -: 6639:# undef assert
        -: 6640:# define assert(e)
        -: 6641:
        -: 6642:# define DEBUG_STATEMENT(e)
        -: 6643:# define DEBUG_PRINT1(x)
        -: 6644:# define DEBUG_PRINT2(x1, x2)
        -: 6645:# define DEBUG_PRINT3(x1, x2, x3)
        -: 6646:# define DEBUG_PRINT4(x1, x2, x3, x4)
        -: 6647:# define DEBUG_PRINT_COMPILED_PATTERN(p, s, e)
        -: 6648:# define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)
        -: 6649:
        -: 6650:#endif /* not DEBUG */
        -: 6651:
        -: 6652:/* Set by `re_set_syntax' to the current regexp syntax to recognize.  Can
        -: 6653:   also be assigned to arbitrarily: each pattern buffer stores its own
        -: 6654:   syntax, so it can be changed between regex compilations.  */
        -: 6655:/* This has no initializer because initialized variables in Emacs
        -: 6656:   become read-only after dumping.  */
        -: 6657:reg_syntax_t re_syntax_options;
        -: 6658:
        -: 6659:
        -: 6660:/* Specify the precise syntax of regexps for compilation.  This provides
        -: 6661:   for compatibility for various utilities which historically have
        -: 6662:   different, incompatible syntaxes.
        -: 6663:
        -: 6664:   The argument SYNTAX is a bit mask comprised of the various bits
        -: 6665:   defined in regex.h.  We return the old syntax.  */
        -: 6666:
        -: 6667:reg_syntax_t
function re_set_syntax called 781 returned 100% blocks executed 100%
      781: 6668:re_set_syntax (syntax)
        -: 6669:    reg_syntax_t syntax;
        -: 6670:{
      781: 6671:  reg_syntax_t ret = re_syntax_options;
        -: 6672:
      781: 6673:  re_syntax_options = syntax;
        -: 6674:#ifdef DEBUG
        -: 6675:  if (syntax & RE_DEBUG)
        -: 6676:    debug = 1;
        -: 6677:  else if (debug) /* was on but now is not */
        -: 6678:    debug = 0;
        -: 6679:#endif /* DEBUG */
      781: 6680:  return ret;
        -: 6681:}
        -: 6682:#ifdef _LIBC
        -: 6683:weak_alias (__re_set_syntax, re_set_syntax)
        -: 6684:#endif
        -: 6685:
        -: 6686:/* This table gives an error message for each of the error codes listed
        -: 6687:   in regex.h.  Obviously the order here has to be same as there.
        -: 6688:   POSIX doesn't require that we do anything for REG_NOERROR,
        -: 6689:   but why not be nice?  */
        -: 6690:
        -: 6691:static const char *re_error_msgid[] =
        -: 6692:  {
        -: 6693:    gettext_noop ("Success"),	/* REG_NOERROR */
        -: 6694:    gettext_noop ("No match"),	/* REG_NOMATCH */
        -: 6695:    gettext_noop ("Invalid regular expression"), /* REG_BADPAT */
        -: 6696:    gettext_noop ("Invalid collation character"), /* REG_ECOLLATE */
        -: 6697:    gettext_noop ("Invalid character class name"), /* REG_ECTYPE */
        -: 6698:    gettext_noop ("Trailing backslash"), /* REG_EESCAPE */
        -: 6699:    gettext_noop ("Invalid back reference"), /* REG_ESUBREG */
        -: 6700:    gettext_noop ("Unmatched [ or [^"),	/* REG_EBRACK */
        -: 6701:    gettext_noop ("Unmatched ( or \\("), /* REG_EPAREN */
        -: 6702:    gettext_noop ("Unmatched \\{"), /* REG_EBRACE */
        -: 6703:    gettext_noop ("Invalid content of \\{\\}"), /* REG_BADBR */
        -: 6704:    gettext_noop ("Invalid range end"),	/* REG_ERANGE */
        -: 6705:    gettext_noop ("Memory exhausted"), /* REG_ESPACE */
        -: 6706:    gettext_noop ("Invalid preceding regular expression"), /* REG_BADRPT */
        -: 6707:    gettext_noop ("Premature end of regular expression"), /* REG_EEND */
        -: 6708:    gettext_noop ("Regular expression too big"), /* REG_ESIZE */
        -: 6709:    gettext_noop ("Unmatched ) or \\)"), /* REG_ERPAREN */
        -: 6710:  };
        -: 6711:
        -: 6712:/* Avoiding alloca during matching, to placate r_alloc.  */
        -: 6713:
        -: 6714:/* Define MATCH_MAY_ALLOCATE unless we need to make sure that the
        -: 6715:   searching and matching functions should not call alloca.  On some
        -: 6716:   systems, alloca is implemented in terms of malloc, and if we're
        -: 6717:   using the relocating allocator routines, then malloc could cause a
        -: 6718:   relocation, which might (if the strings being searched are in the
        -: 6719:   ralloc heap) shift the data out from underneath the regexp
        -: 6720:   routines.
        -: 6721:
        -: 6722:   Here's another reason to avoid allocation: Emacs
        -: 6723:   processes input from X in a signal handler; processing X input may
        -: 6724:   call malloc; if input arrives while a matching routine is calling
        -: 6725:   malloc, then we're scrod.  But Emacs can't just block input while
        -: 6726:   calling matching routines; then we don't notice interrupts when
        -: 6727:   they come in.  So, Emacs blocks input around all regexp calls
        -: 6728:   except the matching calls, which it leaves unprotected, in the
        -: 6729:   faith that they will not malloc.  */
        -: 6730:
        -: 6731:/* Normally, this is fine.  */
        -: 6732:#define MATCH_MAY_ALLOCATE
        -: 6733:
        -: 6734:/* When using GNU C, we are not REALLY using the C alloca, no matter
        -: 6735:   what config.h may say.  So don't take precautions for it.  */
        -: 6736:#ifdef __GNUC__
        -: 6737:# undef C_ALLOCA
        -: 6738:#endif
        -: 6739:
        -: 6740:/* The match routines may not allocate if (1) they would do it with malloc
        -: 6741:   and (2) it's not safe for them to use malloc.
        -: 6742:   Note that if REL_ALLOC is defined, matching would not use malloc for the
        -: 6743:   failure stack, but we would still use it for the register vectors;
        -: 6744:   so REL_ALLOC should not affect this.  */
        -: 6745:#if (defined C_ALLOCA || defined REGEX_MALLOC) && defined emacs
        -: 6746:# undef MATCH_MAY_ALLOCATE
        -: 6747:#endif
        -: 6748:
        -: 6749:
        -: 6750:/* Failure stack declarations and macros; both re_compile_fastmap and
        -: 6751:   re_match_2 use a failure stack.  These have to be macros because of
        -: 6752:   REGEX_ALLOCATE_STACK.  */
        -: 6753:
        -: 6754:
        -: 6755:/* Number of failure points for which to initially allocate space
        -: 6756:   when matching.  If this number is exceeded, we allocate more
        -: 6757:   space, so it is not a hard limit.  */
        -: 6758:#ifndef INIT_FAILURE_ALLOC
        -: 6759:# define INIT_FAILURE_ALLOC 5
        -: 6760:#endif
        -: 6761:
        -: 6762:/* Roughly the maximum number of failure points on the stack.  Would be
        -: 6763:   exactly that if always used MAX_FAILURE_ITEMS items each time we failed.
        -: 6764:   This is a variable only so users of regex can assign to it; we never
        -: 6765:   change it ourselves.  */
        -: 6766:
        -: 6767:#ifdef INT_IS_16BIT
        -: 6768:
        -: 6769:# if defined MATCH_MAY_ALLOCATE
        -: 6770:/* 4400 was enough to cause a crash on Alpha OSF/1,
        -: 6771:   whose default stack limit is 2mb.  */
        -: 6772:long int re_max_failures = 4000;
        -: 6773:# else
        -: 6774:long int re_max_failures = 2000;
        -: 6775:# endif
        -: 6776:
        -: 6777:union fail_stack_elt
        -: 6778:{
        -: 6779:  unsigned char *pointer;
        -: 6780:  long int integer;
        -: 6781:};
        -: 6782:
        -: 6783:typedef union fail_stack_elt fail_stack_elt_t;
        -: 6784:
        -: 6785:typedef struct
        -: 6786:{
        -: 6787:  fail_stack_elt_t *stack;
        -: 6788:  unsigned long int size;
        -: 6789:  unsigned long int avail;		/* Offset of next open position.  */
        -: 6790:} fail_stack_type;
        -: 6791:
        -: 6792:#else /* not INT_IS_16BIT */
        -: 6793:
        -: 6794:# if defined MATCH_MAY_ALLOCATE
        -: 6795:/* 4400 was enough to cause a crash on Alpha OSF/1,
        -: 6796:   whose default stack limit is 2mb.  */
        -: 6797:int re_max_failures = 20000;
        -: 6798:# else
        -: 6799:int re_max_failures = 2000;
        -: 6800:# endif
        -: 6801:
        -: 6802:union fail_stack_elt
        -: 6803:{
        -: 6804:  unsigned char *pointer;
        -: 6805:  int integer;
        -: 6806:};
        -: 6807:
        -: 6808:typedef union fail_stack_elt fail_stack_elt_t;
        -: 6809:
        -: 6810:typedef struct
        -: 6811:{
        -: 6812:  fail_stack_elt_t *stack;
        -: 6813:  unsigned size;
        -: 6814:  unsigned avail;			/* Offset of next open position.  */
        -: 6815:} fail_stack_type;
        -: 6816:
        -: 6817:#endif /* INT_IS_16BIT */
        -: 6818:
        -: 6819:#define FAIL_STACK_EMPTY()     (fail_stack.avail == 0)
        -: 6820:#define FAIL_STACK_PTR_EMPTY() (fail_stack_ptr->avail == 0)
        -: 6821:#define FAIL_STACK_FULL()      (fail_stack.avail == fail_stack.size)
        -: 6822:
        -: 6823:
        -: 6824:/* Define macros to initialize and free the failure stack.
        -: 6825:   Do `return -2' if the alloc fails.  */
        -: 6826:
        -: 6827:#ifdef MATCH_MAY_ALLOCATE
        -: 6828:# define INIT_FAIL_STACK()						\
        -: 6829:  do {									\
        -: 6830:    fail_stack.stack = (fail_stack_elt_t *)				\
        -: 6831:      REGEX_ALLOCATE_STACK (INIT_FAILURE_ALLOC * sizeof (fail_stack_elt_t)); \
        -: 6832:									\
        -: 6833:    if (fail_stack.stack == NULL)					\
        -: 6834:      return -2;							\
        -: 6835:									\
        -: 6836:    fail_stack.size = INIT_FAILURE_ALLOC;				\
        -: 6837:    fail_stack.avail = 0;						\
        -: 6838:  } while (0)
        -: 6839:
        -: 6840:# define RESET_FAIL_STACK()  REGEX_FREE_STACK (fail_stack.stack)
        -: 6841:#else
        -: 6842:# define INIT_FAIL_STACK()						\
        -: 6843:  do {									\
        -: 6844:    fail_stack.avail = 0;						\
        -: 6845:  } while (0)
        -: 6846:
        -: 6847:# define RESET_FAIL_STACK()
        -: 6848:#endif
        -: 6849:
        -: 6850:
        -: 6851:/* Double the size of FAIL_STACK, up to approximately `re_max_failures' items.
        -: 6852:
        -: 6853:   Return 1 if succeeds, and 0 if either ran out of memory
        -: 6854:   allocating space for it or it was already too large.
        -: 6855:
        -: 6856:   REGEX_REALLOCATE_STACK requires `destination' be declared.   */
        -: 6857:
        -: 6858:#define DOUBLE_FAIL_STACK(fail_stack)					\
        -: 6859:  ((fail_stack).size > (unsigned) (re_max_failures * MAX_FAILURE_ITEMS)	\
        -: 6860:   ? 0									\
        -: 6861:   : ((fail_stack).stack = (fail_stack_elt_t *)				\
        -: 6862:        REGEX_REALLOCATE_STACK ((fail_stack).stack, 			\
        -: 6863:          (fail_stack).size * sizeof (fail_stack_elt_t),		\
        -: 6864:          ((fail_stack).size << 1) * sizeof (fail_stack_elt_t)),	\
        -: 6865:									\
        -: 6866:      (fail_stack).stack == NULL					\
        -: 6867:      ? 0								\
        -: 6868:      : ((fail_stack).size <<= 1, 					\
        -: 6869:         1)))
        -: 6870:
        -: 6871:
        -: 6872:/* Push pointer POINTER on FAIL_STACK.
        -: 6873:   Return 1 if was able to do so and 0 if ran out of memory allocating
        -: 6874:   space to do so.  */
        -: 6875:#define PUSH_PATTERN_OP(POINTER, FAIL_STACK)				\
        -: 6876:  ((FAIL_STACK_FULL ()							\
        -: 6877:    && !DOUBLE_FAIL_STACK (FAIL_STACK))					\
        -: 6878:   ? 0									\
        -: 6879:   : ((FAIL_STACK).stack[(FAIL_STACK).avail++].pointer = POINTER,	\
        -: 6880:      1))
        -: 6881:
        -: 6882:/* Push a pointer value onto the failure stack.
        -: 6883:   Assumes the variable `fail_stack'.  Probably should only
        -: 6884:   be called from within `PUSH_FAILURE_POINT'.  */
        -: 6885:#define PUSH_FAILURE_POINTER(item)					\
        -: 6886:  fail_stack.stack[fail_stack.avail++].pointer = (unsigned char *) (item)
        -: 6887:
        -: 6888:/* This pushes an integer-valued item onto the failure stack.
        -: 6889:   Assumes the variable `fail_stack'.  Probably should only
        -: 6890:   be called from within `PUSH_FAILURE_POINT'.  */
        -: 6891:#define PUSH_FAILURE_INT(item)					\
        -: 6892:  fail_stack.stack[fail_stack.avail++].integer = (item)
        -: 6893:
        -: 6894:/* Push a fail_stack_elt_t value onto the failure stack.
        -: 6895:   Assumes the variable `fail_stack'.  Probably should only
        -: 6896:   be called from within `PUSH_FAILURE_POINT'.  */
        -: 6897:#define PUSH_FAILURE_ELT(item)					\
        -: 6898:  fail_stack.stack[fail_stack.avail++] =  (item)
        -: 6899:
        -: 6900:/* These three POP... operations complement the three PUSH... operations.
        -: 6901:   All assume that `fail_stack' is nonempty.  */
        -: 6902:#define POP_FAILURE_POINTER() fail_stack.stack[--fail_stack.avail].pointer
        -: 6903:#define POP_FAILURE_INT() fail_stack.stack[--fail_stack.avail].integer
        -: 6904:#define POP_FAILURE_ELT() fail_stack.stack[--fail_stack.avail]
        -: 6905:
        -: 6906:/* Used to omit pushing failure point id's when we're not debugging.  */
        -: 6907:#ifdef DEBUG
        -: 6908:# define DEBUG_PUSH PUSH_FAILURE_INT
        -: 6909:# define DEBUG_POP(item_addr) *(item_addr) = POP_FAILURE_INT ()
        -: 6910:#else
        -: 6911:# define DEBUG_PUSH(item)
        -: 6912:# define DEBUG_POP(item_addr)
        -: 6913:#endif
        -: 6914:
        -: 6915:
        -: 6916:/* Push the information about the state we will need
        -: 6917:   if we ever fail back to it.
        -: 6918:
        -: 6919:   Requires variables fail_stack, regstart, regend, reg_info, and
        -: 6920:   num_regs_pushed be declared.  DOUBLE_FAIL_STACK requires `destination'
        -: 6921:   be declared.
        -: 6922:
        -: 6923:   Does `return FAILURE_CODE' if runs out of memory.  */
        -: 6924:
        -: 6925:#define PUSH_FAILURE_POINT(pattern_place, string_place, failure_code)	\
        -: 6926:  do {									\
        -: 6927:    char *destination;							\
        -: 6928:    /* Must be int, so when we don't save any registers, the arithmetic	\
        -: 6929:       of 0 + -1 isn't done as unsigned.  */				\
        -: 6930:    /* Can't be int, since there is not a shred of a guarantee that int	\
        -: 6931:       is wide enough to hold a value of something to which pointer can	\
        -: 6932:       be assigned */							\
        -: 6933:    active_reg_t this_reg;						\
        -: 6934:    									\
        -: 6935:    DEBUG_STATEMENT (failure_id++);					\
        -: 6936:    DEBUG_STATEMENT (nfailure_points_pushed++);				\
        -: 6937:    DEBUG_PRINT2 ("\nPUSH_FAILURE_POINT #%u:\n", failure_id);		\
        -: 6938:    DEBUG_PRINT2 ("  Before push, next avail: %d\n", (fail_stack).avail);\
        -: 6939:    DEBUG_PRINT2 ("                     size: %d\n", (fail_stack).size);\
        -: 6940:									\
        -: 6941:    DEBUG_PRINT2 ("  slots needed: %ld\n", NUM_FAILURE_ITEMS);		\
        -: 6942:    DEBUG_PRINT2 ("     available: %d\n", REMAINING_AVAIL_SLOTS);	\
        -: 6943:									\
        -: 6944:    /* Ensure we have enough space allocated for what we will push.  */	\
        -: 6945:    while (REMAINING_AVAIL_SLOTS < NUM_FAILURE_ITEMS)			\
        -: 6946:      {									\
        -: 6947:        if (!DOUBLE_FAIL_STACK (fail_stack))				\
        -: 6948:          return failure_code;						\
        -: 6949:									\
        -: 6950:        DEBUG_PRINT2 ("\n  Doubled stack; size now: %d\n",		\
        -: 6951:		       (fail_stack).size);				\
        -: 6952:        DEBUG_PRINT2 ("  slots available: %d\n", REMAINING_AVAIL_SLOTS);\
        -: 6953:      }									\
        -: 6954:									\
        -: 6955:    /* Push the info, starting with the registers.  */			\
        -: 6956:    DEBUG_PRINT1 ("\n");						\
        -: 6957:									\
        -: 6958:    if (1)								\
        -: 6959:      for (this_reg = lowest_active_reg; this_reg <= highest_active_reg; \
        -: 6960:	   this_reg++)							\
        -: 6961:	{								\
        -: 6962:	  DEBUG_PRINT2 ("  Pushing reg: %lu\n", this_reg);		\
        -: 6963:	  DEBUG_STATEMENT (num_regs_pushed++);				\
        -: 6964:									\
        -: 6965:	  DEBUG_PRINT2 ("    start: %p\n", regstart[this_reg]);		\
        -: 6966:	  PUSH_FAILURE_POINTER (regstart[this_reg]);			\
        -: 6967:									\
        -: 6968:	  DEBUG_PRINT2 ("    end: %p\n", regend[this_reg]);		\
        -: 6969:	  PUSH_FAILURE_POINTER (regend[this_reg]);			\
        -: 6970:									\
        -: 6971:	  DEBUG_PRINT2 ("    info: %p\n      ",				\
        -: 6972:			reg_info[this_reg].word.pointer);		\
        -: 6973:	  DEBUG_PRINT2 (" match_null=%d",				\
        -: 6974:			REG_MATCH_NULL_STRING_P (reg_info[this_reg]));	\
        -: 6975:	  DEBUG_PRINT2 (" active=%d", IS_ACTIVE (reg_info[this_reg]));	\
        -: 6976:	  DEBUG_PRINT2 (" matched_something=%d",			\
        -: 6977:			MATCHED_SOMETHING (reg_info[this_reg]));	\
        -: 6978:	  DEBUG_PRINT2 (" ever_matched=%d",				\
        -: 6979:			EVER_MATCHED_SOMETHING (reg_info[this_reg]));	\
        -: 6980:	  DEBUG_PRINT1 ("\n");						\
        -: 6981:	  PUSH_FAILURE_ELT (reg_info[this_reg].word);			\
        -: 6982:	}								\
        -: 6983:									\
        -: 6984:    DEBUG_PRINT2 ("  Pushing  low active reg: %ld\n", lowest_active_reg);\
        -: 6985:    PUSH_FAILURE_INT (lowest_active_reg);				\
        -: 6986:									\
        -: 6987:    DEBUG_PRINT2 ("  Pushing high active reg: %ld\n", highest_active_reg);\
        -: 6988:    PUSH_FAILURE_INT (highest_active_reg);				\
        -: 6989:									\
        -: 6990:    DEBUG_PRINT2 ("  Pushing pattern %p:\n", pattern_place);		\
        -: 6991:    DEBUG_PRINT_COMPILED_PATTERN (bufp, pattern_place, pend);		\
        -: 6992:    PUSH_FAILURE_POINTER (pattern_place);				\
        -: 6993:									\
        -: 6994:    DEBUG_PRINT2 ("  Pushing string %p: `", string_place);		\
        -: 6995:    DEBUG_PRINT_DOUBLE_STRING (string_place, string1, size1, string2,   \
        -: 6996:				 size2);				\
        -: 6997:    DEBUG_PRINT1 ("'\n");						\
        -: 6998:    PUSH_FAILURE_POINTER (string_place);				\
        -: 6999:									\
        -: 7000:    DEBUG_PRINT2 ("  Pushing failure id: %u\n", failure_id);		\
        -: 7001:    DEBUG_PUSH (failure_id);						\
        -: 7002:  } while (0)
        -: 7003:
        -: 7004:/* This is the number of items that are pushed and popped on the stack
        -: 7005:   for each register.  */
        -: 7006:#define NUM_REG_ITEMS  3
        -: 7007:
        -: 7008:/* Individual items aside from the registers.  */
        -: 7009:#ifdef DEBUG
        -: 7010:# define NUM_NONREG_ITEMS 5 /* Includes failure point id.  */
        -: 7011:#else
        -: 7012:# define NUM_NONREG_ITEMS 4
        -: 7013:#endif
        -: 7014:
        -: 7015:/* We push at most this many items on the stack.  */
        -: 7016:/* We used to use (num_regs - 1), which is the number of registers
        -: 7017:   this regexp will save; but that was changed to 5
        -: 7018:   to avoid stack overflow for a regexp with lots of parens.  */
        -: 7019:#define MAX_FAILURE_ITEMS (5 * NUM_REG_ITEMS + NUM_NONREG_ITEMS)
        -: 7020:
        -: 7021:/* We actually push this many items.  */
        -: 7022:#define NUM_FAILURE_ITEMS				\
        -: 7023:  (((0							\
        -: 7024:     ? 0 : highest_active_reg - lowest_active_reg + 1)	\
        -: 7025:    * NUM_REG_ITEMS)					\
        -: 7026:   + NUM_NONREG_ITEMS)
        -: 7027:
        -: 7028:/* How many items can still be added to the stack without overflowing it.  */
        -: 7029:#define REMAINING_AVAIL_SLOTS ((fail_stack).size - (fail_stack).avail)
        -: 7030:
        -: 7031:
        -: 7032:/* Pops what PUSH_FAIL_STACK pushes.
        -: 7033:
        -: 7034:   We restore into the parameters, all of which should be lvalues:
        -: 7035:     STR -- the saved data position.
        -: 7036:     PAT -- the saved pattern position.
        -: 7037:     LOW_REG, HIGH_REG -- the highest and lowest active registers.
        -: 7038:     REGSTART, REGEND -- arrays of string positions.
        -: 7039:     REG_INFO -- array of information about each subexpression.
        -: 7040:
        -: 7041:   Also assumes the variables `fail_stack' and (if debugging), `bufp',
        -: 7042:   `pend', `string1', `size1', `string2', and `size2'.  */
        -: 7043:
        -: 7044:#define POP_FAILURE_POINT(str, pat, low_reg, high_reg, regstart, regend, reg_info)\
        -: 7045:{									\
        -: 7046:  DEBUG_STATEMENT (unsigned failure_id;)				\
        -: 7047:  active_reg_t this_reg;						\
        -: 7048:  const unsigned char *string_temp;					\
        -: 7049:									\
        -: 7050:  assert (!FAIL_STACK_EMPTY ());					\
        -: 7051:									\
        -: 7052:  /* Remove failure points and point to how many regs pushed.  */	\
        -: 7053:  DEBUG_PRINT1 ("POP_FAILURE_POINT:\n");				\
        -: 7054:  DEBUG_PRINT2 ("  Before pop, next avail: %d\n", fail_stack.avail);	\
        -: 7055:  DEBUG_PRINT2 ("                    size: %d\n", fail_stack.size);	\
        -: 7056:									\
        -: 7057:  assert (fail_stack.avail >= NUM_NONREG_ITEMS);			\
        -: 7058:									\
        -: 7059:  DEBUG_POP (&failure_id);						\
        -: 7060:  DEBUG_PRINT2 ("  Popping failure id: %u\n", failure_id);		\
        -: 7061:									\
        -: 7062:  /* If the saved string location is NULL, it came from an		\
        -: 7063:     on_failure_keep_string_jump opcode, and we want to throw away the	\
        -: 7064:     saved NULL, thus retaining our current position in the string.  */	\
        -: 7065:  string_temp = POP_FAILURE_POINTER ();					\
        -: 7066:  if (string_temp != NULL)						\
        -: 7067:    str = (const char *) string_temp;					\
        -: 7068:									\
        -: 7069:  DEBUG_PRINT2 ("  Popping string %p: `", str);				\
        -: 7070:  DEBUG_PRINT_DOUBLE_STRING (str, string1, size1, string2, size2);	\
        -: 7071:  DEBUG_PRINT1 ("'\n");							\
        -: 7072:									\
        -: 7073:  pat = (unsigned char *) POP_FAILURE_POINTER ();			\
        -: 7074:  DEBUG_PRINT2 ("  Popping pattern %p:\n", pat);			\
        -: 7075:  DEBUG_PRINT_COMPILED_PATTERN (bufp, pat, pend);			\
        -: 7076:									\
        -: 7077:  /* Restore register info.  */						\
        -: 7078:  high_reg = (active_reg_t) POP_FAILURE_INT ();				\
        -: 7079:  DEBUG_PRINT2 ("  Popping high active reg: %ld\n", high_reg);		\
        -: 7080:									\
        -: 7081:  low_reg = (active_reg_t) POP_FAILURE_INT ();				\
        -: 7082:  DEBUG_PRINT2 ("  Popping  low active reg: %ld\n", low_reg);		\
        -: 7083:									\
        -: 7084:  if (1)								\
        -: 7085:    for (this_reg = high_reg; this_reg >= low_reg; this_reg--)		\
        -: 7086:      {									\
        -: 7087:	DEBUG_PRINT2 ("    Popping reg: %ld\n", this_reg);		\
        -: 7088:									\
        -: 7089:	reg_info[this_reg].word = POP_FAILURE_ELT ();			\
        -: 7090:	DEBUG_PRINT2 ("      info: %p\n",				\
        -: 7091:		      reg_info[this_reg].word.pointer);			\
        -: 7092:									\
        -: 7093:	regend[this_reg] = (const char *) POP_FAILURE_POINTER ();	\
        -: 7094:	DEBUG_PRINT2 ("      end: %p\n", regend[this_reg]);		\
        -: 7095:									\
        -: 7096:	regstart[this_reg] = (const char *) POP_FAILURE_POINTER ();	\
        -: 7097:	DEBUG_PRINT2 ("      start: %p\n", regstart[this_reg]);		\
        -: 7098:      }									\
        -: 7099:  else									\
        -: 7100:    {									\
        -: 7101:      for (this_reg = highest_active_reg; this_reg > high_reg; this_reg--) \
        -: 7102:	{								\
        -: 7103:	  reg_info[this_reg].word.integer = 0;				\
        -: 7104:	  regend[this_reg] = 0;						\
        -: 7105:	  regstart[this_reg] = 0;					\
        -: 7106:	}								\
        -: 7107:      highest_active_reg = high_reg;					\
        -: 7108:    }									\
        -: 7109:									\
        -: 7110:  set_regs_matched_done = 0;						\
        -: 7111:  DEBUG_STATEMENT (nfailure_points_popped++);				\
        -: 7112:} /* POP_FAILURE_POINT */
        -: 7113:
        -: 7114:
        -: 7115:
        -: 7116:/* Structure for per-register (a.k.a. per-group) information.
        -: 7117:   Other register information, such as the
        -: 7118:   starting and ending positions (which are addresses), and the list of
        -: 7119:   inner groups (which is a bits list) are maintained in separate
        -: 7120:   variables.
        -: 7121:
        -: 7122:   We are making a (strictly speaking) nonportable assumption here: that
        -: 7123:   the compiler will pack our bit fields into something that fits into
        -: 7124:   the type of `word', i.e., is something that fits into one item on the
        -: 7125:   failure stack.  */
        -: 7126:
        -: 7127:
        -: 7128:/* Declarations and macros for re_match_2.  */
        -: 7129:
        -: 7130:typedef union
        -: 7131:{
        -: 7132:  fail_stack_elt_t word;
        -: 7133:  struct
        -: 7134:  {
        -: 7135:      /* This field is one if this group can match the empty string,
        -: 7136:         zero if not.  If not yet determined,  `MATCH_NULL_UNSET_VALUE'.  */
        -: 7137:#define MATCH_NULL_UNSET_VALUE 3
        -: 7138:    unsigned match_null_string_p : 2;
        -: 7139:    unsigned is_active : 1;
        -: 7140:    unsigned matched_something : 1;
        -: 7141:    unsigned ever_matched_something : 1;
        -: 7142:  } bits;
        -: 7143:} register_info_type;
        -: 7144:
        -: 7145:#define REG_MATCH_NULL_STRING_P(R)  ((R).bits.match_null_string_p)
        -: 7146:#define IS_ACTIVE(R)  ((R).bits.is_active)
        -: 7147:#define MATCHED_SOMETHING(R)  ((R).bits.matched_something)
        -: 7148:#define EVER_MATCHED_SOMETHING(R)  ((R).bits.ever_matched_something)
        -: 7149:
        -: 7150:
        -: 7151:/* Call this when have matched a real character; it sets `matched' flags
        -: 7152:   for the subexpressions which we are currently inside.  Also records
        -: 7153:   that those subexprs have matched.  */
        -: 7154:#define SET_REGS_MATCHED()						\
        -: 7155:  do									\
        -: 7156:    {									\
        -: 7157:      if (!set_regs_matched_done)					\
        -: 7158:	{								\
        -: 7159:	  active_reg_t r;						\
        -: 7160:	  set_regs_matched_done = 1;					\
        -: 7161:	  for (r = lowest_active_reg; r <= highest_active_reg; r++)	\
        -: 7162:	    {								\
        -: 7163:	      MATCHED_SOMETHING (reg_info[r])				\
        -: 7164:		= EVER_MATCHED_SOMETHING (reg_info[r])			\
        -: 7165:		= 1;							\
        -: 7166:	    }								\
        -: 7167:	}								\
        -: 7168:    }									\
        -: 7169:  while (0)
        -: 7170:
        -: 7171:/* Registers are set to a sentinel when they haven't yet matched.  */
        -: 7172:static char reg_unset_dummy;
        -: 7173:#define REG_UNSET_VALUE (&reg_unset_dummy)
        -: 7174:#define REG_UNSET(e) ((e) == REG_UNSET_VALUE)
        -: 7175:
        -: 7176:/* Subroutine declarations and macros for regex_compile.  */
        -: 7177:
        -: 7178:static reg_errcode_t regex_compile _RE_ARGS ((const char *pattern, size_t size,
        -: 7179:					      reg_syntax_t syntax,
        -: 7180:					      struct re_pattern_buffer *bufp));
        -: 7181:static void store_op1 _RE_ARGS ((re_opcode_t op, unsigned char *loc, int arg));
        -: 7182:static void store_op2 _RE_ARGS ((re_opcode_t op, unsigned char *loc,
        -: 7183:				 int arg1, int arg2));
        -: 7184:static void insert_op1 _RE_ARGS ((re_opcode_t op, unsigned char *loc,
        -: 7185:				  int arg, unsigned char *end));
        -: 7186:static void insert_op2 _RE_ARGS ((re_opcode_t op, unsigned char *loc,
        -: 7187:				  int arg1, int arg2, unsigned char *end));
        -: 7188:static boolean at_begline_loc_p _RE_ARGS ((const char *pattern, const char *p,
        -: 7189:					   reg_syntax_t syntax));
        -: 7190:static boolean at_endline_loc_p _RE_ARGS ((const char *p, const char *pend,
        -: 7191:					   reg_syntax_t syntax));
        -: 7192:static reg_errcode_t compile_range _RE_ARGS ((const char **p_ptr,
        -: 7193:					      const char *pend,
        -: 7194:					      char *translate,
        -: 7195:					      reg_syntax_t syntax,
        -: 7196:					      unsigned char *b));
        -: 7197:
        -: 7198:/* Fetch the next character in the uncompiled pattern---translating it
        -: 7199:   if necessary.  Also cast from a signed character in the constant
        -: 7200:   string passed to us by the user to an unsigned char that we can use
        -: 7201:   as an array index (in, e.g., `translate').  */
        -: 7202:#ifndef PATFETCH
        -: 7203:# define PATFETCH(c)							\
        -: 7204:  do {if (p == pend) return REG_EEND;					\
        -: 7205:    c = (unsigned char) *p++;						\
        -: 7206:    if (translate) c = (unsigned char) translate[c];			\
        -: 7207:  } while (0)
        -: 7208:#endif
        -: 7209:
        -: 7210:/* Fetch the next character in the uncompiled pattern, with no
        -: 7211:   translation.  */
        -: 7212:#define PATFETCH_RAW(c)							\
        -: 7213:  do {if (p == pend) return REG_EEND;					\
        -: 7214:    c = (unsigned char) *p++; 						\
        -: 7215:  } while (0)
        -: 7216:
        -: 7217:/* Go backwards one character in the pattern.  */
        -: 7218:#define PATUNFETCH p--
        -: 7219:
        -: 7220:
        -: 7221:/* If `translate' is non-null, return translate[D], else just D.  We
        -: 7222:   cast the subscript to translate because some data is declared as
        -: 7223:   `char *', to avoid warnings when a string constant is passed.  But
        -: 7224:   when we use a character as a subscript we must make it unsigned.  */
        -: 7225:#ifndef TRANSLATE
        -: 7226:# define TRANSLATE(d) \
        -: 7227:  (translate ? (char) translate[(unsigned char) (d)] : (d))
        -: 7228:#endif
        -: 7229:
        -: 7230:
        -: 7231:/* Macros for outputting the compiled pattern into `buffer'.  */
        -: 7232:
        -: 7233:/* If the buffer isn't allocated when it comes in, use this.  */
        -: 7234:#define INIT_BUF_SIZE  32
        -: 7235:
        -: 7236:/* Make sure we have at least N more bytes of space in buffer.  */
        -: 7237:#define GET_BUFFER_SPACE(n)						\
        -: 7238:    while ((unsigned long) (b - bufp->buffer + (n)) > bufp->allocated)	\
        -: 7239:      EXTEND_BUFFER ()
        -: 7240:
        -: 7241:/* Make sure we have one more byte of buffer space and then add C to it.  */
        -: 7242:#define BUF_PUSH(c)							\
        -: 7243:  do {									\
        -: 7244:    GET_BUFFER_SPACE (1);						\
        -: 7245:    *b++ = (unsigned char) (c);						\
        -: 7246:  } while (0)
        -: 7247:
        -: 7248:
        -: 7249:/* Ensure we have two more bytes of buffer space and then append C1 and C2.  */
        -: 7250:#define BUF_PUSH_2(c1, c2)						\
        -: 7251:  do {									\
        -: 7252:    GET_BUFFER_SPACE (2);						\
        -: 7253:    *b++ = (unsigned char) (c1);					\
        -: 7254:    *b++ = (unsigned char) (c2);					\
        -: 7255:  } while (0)
        -: 7256:
        -: 7257:
        -: 7258:/* As with BUF_PUSH_2, except for three bytes.  */
        -: 7259:#define BUF_PUSH_3(c1, c2, c3)						\
        -: 7260:  do {									\
        -: 7261:    GET_BUFFER_SPACE (3);						\
        -: 7262:    *b++ = (unsigned char) (c1);					\
        -: 7263:    *b++ = (unsigned char) (c2);					\
        -: 7264:    *b++ = (unsigned char) (c3);					\
        -: 7265:  } while (0)
        -: 7266:
        -: 7267:
        -: 7268:/* Store a jump with opcode OP at LOC to location TO.  We store a
        -: 7269:   relative address offset by the three bytes the jump itself occupies.  */
        -: 7270:#define STORE_JUMP(op, loc, to) \
        -: 7271:  store_op1 (op, loc, (int) ((to) - (loc) - 3))
        -: 7272:
        -: 7273:/* Likewise, for a two-argument jump.  */
        -: 7274:#define STORE_JUMP2(op, loc, to, arg) \
        -: 7275:  store_op2 (op, loc, (int) ((to) - (loc) - 3), arg)
        -: 7276:
        -: 7277:/* Like `STORE_JUMP', but for inserting.  Assume `b' is the buffer end.  */
        -: 7278:#define INSERT_JUMP(op, loc, to) \
        -: 7279:  insert_op1 (op, loc, (int) ((to) - (loc) - 3), b)
        -: 7280:
        -: 7281:/* Like `STORE_JUMP2', but for inserting.  Assume `b' is the buffer end.  */
        -: 7282:#define INSERT_JUMP2(op, loc, to, arg) \
        -: 7283:  insert_op2 (op, loc, (int) ((to) - (loc) - 3), arg, b)
        -: 7284:
        -: 7285:
        -: 7286:/* This is not an arbitrary limit: the arguments which represent offsets
        -: 7287:   into the pattern are two bytes long.  So if 2^16 bytes turns out to
        -: 7288:   be too small, many things would have to change.  */
        -: 7289:/* Any other compiler which, like MSC, has allocation limit below 2^16
        -: 7290:   bytes will have to use approach similar to what was done below for
        -: 7291:   MSC and drop MAX_BUF_SIZE a bit.  Otherwise you may end up
        -: 7292:   reallocating to 0 bytes.  Such thing is not going to work too well.
        -: 7293:   You have been warned!!  */
        -: 7294:#undef   REALLOC  
        -: 7295:#if defined _MSC_VER  && !defined WIN32
        -: 7296:/* Microsoft C 16-bit versions limit malloc to approx 65512 bytes.
        -: 7297:   The REALLOC define eliminates a flurry of conversion warnings,
        -: 7298:   but is not required. */
        -: 7299:# define MAX_BUF_SIZE  65500L
        -: 7300:# define REALLOC(p,s) realloc ((p), (size_t) (s))
        -: 7301:#else
        -: 7302:# define MAX_BUF_SIZE (1L << 16)
        -: 7303:# define REALLOC(p,s) realloc ((p), (s))
        -: 7304:#endif
        -: 7305:
        -: 7306:/* Extend the buffer by twice its current size via realloc and
        -: 7307:   reset the pointers that pointed into the old block to point to the
        -: 7308:   correct places in the new one.  If extending the buffer results in it
        -: 7309:   being larger than MAX_BUF_SIZE, then flag memory exhausted.  */
        -: 7310:#define EXTEND_BUFFER()							\
        -: 7311:  do { 									\
        -: 7312:    unsigned char *old_buffer = bufp->buffer;				\
        -: 7313:    if (bufp->allocated == MAX_BUF_SIZE) 				\
        -: 7314:      return REG_ESIZE;							\
        -: 7315:    bufp->allocated <<= 1;						\
        -: 7316:    if (bufp->allocated > MAX_BUF_SIZE)					\
        -: 7317:      bufp->allocated = MAX_BUF_SIZE; 					\
        -: 7318:    bufp->buffer = (unsigned char *) REALLOC (bufp->buffer, bufp->allocated);\
        -: 7319:    if (bufp->buffer == NULL)						\
        -: 7320:      return REG_ESPACE;						\
        -: 7321:    /* If the buffer moved, move all the pointers into it.  */		\
        -: 7322:    if (old_buffer != bufp->buffer)					\
        -: 7323:      {									\
        -: 7324:        b = (b - old_buffer) + bufp->buffer;				\
        -: 7325:        begalt = (begalt - old_buffer) + bufp->buffer;			\
        -: 7326:        if (fixup_alt_jump)						\
        -: 7327:          fixup_alt_jump = (fixup_alt_jump - old_buffer) + bufp->buffer;\
        -: 7328:        if (laststart)							\
        -: 7329:          laststart = (laststart - old_buffer) + bufp->buffer;		\
        -: 7330:        if (pending_exact)						\
        -: 7331:          pending_exact = (pending_exact - old_buffer) + bufp->buffer;	\
        -: 7332:      }									\
        -: 7333:  } while (0)
        -: 7334:
        -: 7335:
        -: 7336:/* Since we have one byte reserved for the register number argument to
        -: 7337:   {start,stop}_memory, the maximum number of groups we can report
        -: 7338:   things about is what fits in that byte.  */
        -: 7339:#define MAX_REGNUM 255
        -: 7340:
        -: 7341:/* But patterns can have more than `MAX_REGNUM' registers.  We just
        -: 7342:   ignore the excess.  */
        -: 7343:typedef unsigned regnum_t;
        -: 7344:
        -: 7345:
        -: 7346:/* Macros for the compile stack.  */
        -: 7347:
        -: 7348:/* Since offsets can go either forwards or backwards, this type needs to
        -: 7349:   be able to hold values from -(MAX_BUF_SIZE - 1) to MAX_BUF_SIZE - 1.  */
        -: 7350:/* int may be not enough when sizeof(int) == 2.  */
        -: 7351:typedef long pattern_offset_t;
        -: 7352:
        -: 7353:typedef struct
        -: 7354:{
        -: 7355:  pattern_offset_t begalt_offset;
        -: 7356:  pattern_offset_t fixup_alt_jump;
        -: 7357:  pattern_offset_t inner_group_offset;
        -: 7358:  pattern_offset_t laststart_offset;
        -: 7359:  regnum_t regnum;
        -: 7360:} compile_stack_elt_t;
        -: 7361:
        -: 7362:
        -: 7363:typedef struct
        -: 7364:{
        -: 7365:  compile_stack_elt_t *stack;
        -: 7366:  unsigned size;
        -: 7367:  unsigned avail;			/* Offset of next open position.  */
        -: 7368:} compile_stack_type;
        -: 7369:
        -: 7370:
        -: 7371:#define INIT_COMPILE_STACK_SIZE 32
        -: 7372:
        -: 7373:#define COMPILE_STACK_EMPTY  (compile_stack.avail == 0)
        -: 7374:#define COMPILE_STACK_FULL  (compile_stack.avail == compile_stack.size)
        -: 7375:
        -: 7376:/* The next available element.  */
        -: 7377:#define COMPILE_STACK_TOP (compile_stack.stack[compile_stack.avail])
        -: 7378:
        -: 7379:
        -: 7380:/* Set the bit for character C in a list.  */
        -: 7381:#define SET_LIST_BIT(c)                               \
        -: 7382:  (b[((unsigned char) (c)) / BYTEWIDTH]               \
        -: 7383:   |= 1 << (((unsigned char) c) % BYTEWIDTH))
        -: 7384:
        -: 7385:
        -: 7386:/* Get the next unsigned number in the uncompiled pattern.  */
        -: 7387:#define GET_UNSIGNED_NUMBER(num) 					\
        -: 7388:  { if (p != pend)							\
        -: 7389:     {									\
        -: 7390:       PATFETCH (c); 							\
        -: 7391:       while (ISDIGIT (c)) 						\
        -: 7392:         { 								\
        -: 7393:           if (num < 0)							\
        -: 7394:              num = 0;							\
        -: 7395:           num = num * 10 + c - '0'; 					\
        -: 7396:           if (p == pend) 						\
        -: 7397:              break; 							\
        -: 7398:           PATFETCH (c);						\
        -: 7399:         } 								\
        -: 7400:       } 								\
        -: 7401:    }
        -: 7402:
        -: 7403:#if defined _LIBC || WIDE_CHAR_SUPPORT
        -: 7404:/* The GNU C library provides support for user-defined character classes
        -: 7405:   and the functions from ISO C amendement 1.  */
        -: 7406:# ifdef CHARCLASS_NAME_MAX
        -: 7407:#  define CHAR_CLASS_MAX_LENGTH CHARCLASS_NAME_MAX
        -: 7408:# else
        -: 7409:/* This shouldn't happen but some implementation might still have this
        -: 7410:   problem.  Use a reasonable default value.  */
        -: 7411:#  define CHAR_CLASS_MAX_LENGTH 256
        -: 7412:# endif
        -: 7413:
        -: 7414:# ifdef _LIBC
        -: 7415:#  define IS_CHAR_CLASS(string) __wctype (string)
        -: 7416:# else
        -: 7417:#  define IS_CHAR_CLASS(string) wctype (string)
        -: 7418:# endif
        -: 7419:#else
        -: 7420:# define CHAR_CLASS_MAX_LENGTH  6 /* Namely, `xdigit'.  */
        -: 7421:
        -: 7422:# define IS_CHAR_CLASS(string)						\
        -: 7423:   (STREQ (string, "alpha") || STREQ (string, "upper")			\
        -: 7424:    || STREQ (string, "lower") || STREQ (string, "digit")		\
        -: 7425:    || STREQ (string, "alnum") || STREQ (string, "xdigit")		\
        -: 7426:    || STREQ (string, "space") || STREQ (string, "print")		\
        -: 7427:    || STREQ (string, "punct") || STREQ (string, "graph")		\
        -: 7428:    || STREQ (string, "cntrl") || STREQ (string, "blank"))
        -: 7429:#endif
        -: 7430:
        -: 7431:#ifndef MATCH_MAY_ALLOCATE
        -: 7432:
        -: 7433:/* If we cannot allocate large objects within re_match_2_internal,
        -: 7434:   we make the fail stack and register vectors global.
        -: 7435:   The fail stack, we grow to the maximum size when a regexp
        -: 7436:   is compiled.
        -: 7437:   The register vectors, we adjust in size each time we
        -: 7438:   compile a regexp, according to the number of registers it needs.  */
        -: 7439:
        -: 7440:static fail_stack_type fail_stack;
        -: 7441:
        -: 7442:/* Size with which the following vectors are currently allocated.
        -: 7443:   That is so we can make them bigger as needed,
        -: 7444:   but never make them smaller.  */
        -: 7445:static int regs_allocated_size;
        -: 7446:
        -: 7447:static const char **     regstart, **     regend;
        -: 7448:static const char ** old_regstart, ** old_regend;
        -: 7449:static const char **best_regstart, **best_regend;
        -: 7450:static register_info_type *reg_info;
        -: 7451:static const char **reg_dummy;
        -: 7452:static register_info_type *reg_info_dummy;
        -: 7453:
        -: 7454:/* Make the register vectors big enough for NUM_REGS registers,
        -: 7455:   but don't make them smaller.  */
        -: 7456:
        -: 7457:static
        -: 7458:regex_grow_registers (num_regs)
        -: 7459:     int num_regs;
        -: 7460:{
        -: 7461:  if (num_regs > regs_allocated_size)
        -: 7462:    {
        -: 7463:      RETALLOC_IF (regstart,	 num_regs, const char *);
        -: 7464:      RETALLOC_IF (regend,	 num_regs, const char *);
        -: 7465:      RETALLOC_IF (old_regstart, num_regs, const char *);
        -: 7466:      RETALLOC_IF (old_regend,	 num_regs, const char *);
        -: 7467:      RETALLOC_IF (best_regstart, num_regs, const char *);
        -: 7468:      RETALLOC_IF (best_regend,	 num_regs, const char *);
        -: 7469:      RETALLOC_IF (reg_info,	 num_regs, register_info_type);
        -: 7470:      RETALLOC_IF (reg_dummy,	 num_regs, const char *);
        -: 7471:      RETALLOC_IF (reg_info_dummy, num_regs, register_info_type);
        -: 7472:
        -: 7473:      regs_allocated_size = num_regs;
        -: 7474:    }
        -: 7475:}
        -: 7476:
        -: 7477:#endif /* not MATCH_MAY_ALLOCATE */
        -: 7478:
        -: 7479:static boolean group_in_compile_stack _RE_ARGS ((compile_stack_type
        -: 7480:						 compile_stack,
        -: 7481:						 regnum_t regnum));
        -: 7482:
        -: 7483:/* `regex_compile' compiles PATTERN (of length SIZE) according to SYNTAX.
        -: 7484:   Returns one of error codes defined in `regex.h', or zero for success.
        -: 7485:
        -: 7486:   Assumes the `allocated' (and perhaps `buffer') and `translate'
        -: 7487:   fields are set in BUFP on entry.
        -: 7488:
        -: 7489:   If it succeeds, results are put in BUFP (if it returns an error, the
        -: 7490:   contents of BUFP are undefined):
        -: 7491:     `buffer' is the compiled pattern;
        -: 7492:     `syntax' is set to SYNTAX;
        -: 7493:     `used' is set to the length of the compiled pattern;
        -: 7494:     `fastmap_accurate' is zero;
        -: 7495:     `re_nsub' is the number of subexpressions in PATTERN;
        -: 7496:     `not_bol' and `not_eol' are zero;
        -: 7497:
        -: 7498:   The `fastmap' and `newline_anchor' fields are neither
        -: 7499:   examined nor set.  */
        -: 7500:
        -: 7501:/* Return, freeing storage we allocated.  */
        -: 7502:#define FREE_STACK_RETURN(value)		\
        -: 7503:  return (free (compile_stack.stack), value)
        -: 7504:
        -: 7505:static reg_errcode_t
function regex_compile called 781 returned 100% blocks executed 52%
      781: 7506:regex_compile (pattern, size, syntax, bufp)
        -: 7507:     const char *pattern;
        -: 7508:     size_t size;
        -: 7509:     reg_syntax_t syntax;
        -: 7510:     struct re_pattern_buffer *bufp;
        -: 7511:{
        -: 7512:  /* We fetch characters from PATTERN here.  Even though PATTERN is
        -: 7513:     `char *' (i.e., signed), we declare these variables as unsigned, so
        -: 7514:     they can be reliably used as array indices.  */
        -: 7515:  register unsigned char c, c1;
        -: 7516:
        -: 7517:  /* A random temporary spot in PATTERN.  */
        -: 7518:  const char *p1;
        -: 7519:
        -: 7520:  /* Points to the end of the buffer, where we should append.  */
        -: 7521:  register unsigned char *b;
        -: 7522:
        -: 7523:  /* Keeps track of unclosed groups.  */
        -: 7524:  compile_stack_type compile_stack;
        -: 7525:
        -: 7526:  /* Points to the current (ending) position in the pattern.  */
      781: 7527:  const char *p = pattern;
      781: 7528:  const char *pend = pattern + size;
        -: 7529:
        -: 7530:  /* How to translate the characters in the pattern.  */
      781: 7531:  RE_TRANSLATE_TYPE translate = bufp->translate;
        -: 7532:
        -: 7533:  /* Address of the count-byte of the most recently inserted `exactn'
        -: 7534:     command.  This makes it possible to tell if a new exact-match
        -: 7535:     character can be added to that command or if the character requires
        -: 7536:     a new `exactn' command.  */
      781: 7537:  unsigned char *pending_exact = 0;
        -: 7538:
        -: 7539:  /* Address of start of the most recently finished expression.
        -: 7540:     This tells, e.g., postfix * where to find the start of its
        -: 7541:     operand.  Reset at the beginning of groups and alternatives.  */
      781: 7542:  unsigned char *laststart = 0;
        -: 7543:
        -: 7544:  /* Address of beginning of regexp, or inside of last group.  */
        -: 7545:  unsigned char *begalt;
        -: 7546:
        -: 7547:  /* Place in the uncompiled pattern (i.e., the {) to
        -: 7548:     which to go back if the interval is invalid.  */
        -: 7549:  const char *beg_interval;
        -: 7550:
        -: 7551:  /* Address of the place where a forward jump should go to the end of
        -: 7552:     the containing expression.  Each alternative of an `or' -- except the
        -: 7553:     last -- ends with a forward jump of this sort.  */
      781: 7554:  unsigned char *fixup_alt_jump = 0;
        -: 7555:
        -: 7556:  /* Counts open-groups as they are encountered.  Remembered for the
        -: 7557:     matching close-group on the compile stack, so the same register
        -: 7558:     number is put in the stop_memory as the start_memory.  */
      781: 7559:  regnum_t regnum = 0;
        -: 7560:
        -: 7561:#ifdef DEBUG
        -: 7562:  DEBUG_PRINT1 ("\nCompiling pattern: ");
        -: 7563:  if (debug)
        -: 7564:    {
        -: 7565:      unsigned debug_count;
        -: 7566:
        -: 7567:      for (debug_count = 0; debug_count < size; debug_count++)
        -: 7568:        putchar (pattern[debug_count]);
        -: 7569:      putchar ('\n');
        -: 7570:    }
        -: 7571:#endif /* DEBUG */
        -: 7572:
        -: 7573:  /* Initialize the compile stack.  */
      781: 7574:  compile_stack.stack = TALLOC (INIT_COMPILE_STACK_SIZE, compile_stack_elt_t);
call    0 returned 781
      781: 7575:  if (compile_stack.stack == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 781
    #####: 7576:    return REG_ESPACE;
        -: 7577:
      781: 7578:  compile_stack.size = INIT_COMPILE_STACK_SIZE;
      781: 7579:  compile_stack.avail = 0;
        -: 7580:
        -: 7581:  /* Initialize the pattern buffer.  */
      781: 7582:  bufp->syntax = syntax;
      781: 7583:  bufp->fastmap_accurate = 0;
      781: 7584:  bufp->not_bol = bufp->not_eol = 0;
        -: 7585:
        -: 7586:  /* Set `used' to zero, so that if we return an error, the pattern
        -: 7587:     printer (for debugging) will think there's no pattern.  We reset it
        -: 7588:     at the end.  */
      781: 7589:  bufp->used = 0;
        -: 7590:
        -: 7591:  /* Always count groups, whether or not bufp->no_sub is set.  */
      781: 7592:  bufp->re_nsub = 0;
        -: 7593:
        -: 7594:#if !defined emacs && !defined SYNTAX_TABLE
        -: 7595:  /* Initialize the syntax table.  */
      781: 7596:   init_syntax_once ();
call    0 returned 781
        -: 7597:#endif
        -: 7598:
      781: 7599:  if (bufp->allocated == 0)
branch  0 taken 781 (fallthrough)
branch  1 taken 0
        -: 7600:    {
      781: 7601:      if (bufp->buffer)
branch  0 taken 0 (fallthrough)
branch  1 taken 781
        -: 7602:	{ /* If zero allocated, but buffer is non-null, try to realloc
        -: 7603:             enough space.  This loses if buffer's address is bogus, but
        -: 7604:             that is the user's responsibility.  */
    #####: 7605:          RETALLOC (bufp->buffer, INIT_BUF_SIZE, unsigned char);
        -: 7606:        }
        -: 7607:      else
        -: 7608:        { /* Caller did not allocate a buffer.  Do it for them.  */
      781: 7609:          bufp->buffer = TALLOC (INIT_BUF_SIZE, unsigned char);
call    0 returned 781
        -: 7610:        }
     781*: 7611:      if (!bufp->buffer) FREE_STACK_RETURN (REG_ESPACE);
branch  0 taken 0 (fallthrough)
branch  1 taken 781
        -: 7612:
      781: 7613:      bufp->allocated = INIT_BUF_SIZE;
        -: 7614:    }
        -: 7615:
      781: 7616:  begalt = b = bufp->buffer;
        -: 7617:
        -: 7618:  /* Loop through the uncompiled pattern until we're at the end.  */
    54845: 7619:  while (p != pend)
branch  0 taken 54120
branch  1 taken 725 (fallthrough)
        -: 7620:    {
   54120*: 7621:      PATFETCH (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 54120
branch  2 taken 0 (fallthrough)
branch  3 taken 54120
        -: 7622:
    54120: 7623:      switch (c)
branch  0 taken 118
branch  1 taken 10
branch  2 taken 354
branch  3 taken 468
branch  4 taken 415
branch  5 taken 183
branch  6 taken 721
branch  7 taken 642
branch  8 taken 1881
branch  9 taken 188
branch 10 taken 186
branch 11 taken 1024
branch 12 taken 47930
        -: 7624:        {
      118: 7625:        case '^':
        -: 7626:          {
      118: 7627:            if (   /* If at start of pattern, it's an operator.  */
      118: 7628:                   p == pattern + 1
branch  0 taken 46 (fallthrough)
branch  1 taken 72
        -: 7629:                   /* If context independent, it's an operator.  */
       46: 7630:                || syntax & RE_CONTEXT_INDEP_ANCHORS
branch  0 taken 28 (fallthrough)
branch  1 taken 18
        -: 7631:                   /* Otherwise, depends on what's come before.  */
       28: 7632:                || at_begline_loc_p (pattern, p, syntax))
call    0 returned 28
branch  1 taken 26 (fallthrough)
branch  2 taken 2
     116*: 7633:              BUF_PUSH (begline);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 116 (fallthrough)
        -: 7634:            else
        2: 7635:              goto normal_char;
        -: 7636:          }
      116: 7637:          break;
        -: 7638:
        -: 7639:
       10: 7640:        case '$':
        -: 7641:          {
       10: 7642:            if (   /* If at end of pattern, it's an operator.  */
       10: 7643:                   p == pend
branch  0 taken 5 (fallthrough)
branch  1 taken 5
        -: 7644:                   /* If context independent, it's an operator.  */
        5: 7645:                || syntax & RE_CONTEXT_INDEP_ANCHORS
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        -: 7646:                   /* Otherwise, depends on what's next.  */
        5: 7647:                || at_endline_loc_p (p, pend, syntax))
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
       5*: 7648:               BUF_PUSH (endline);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 5 (fallthrough)
        -: 7649:             else
        5: 7650:               goto normal_char;
        -: 7651:           }
        5: 7652:           break;
        -: 7653:
        -: 7654:
      354: 7655:	case '+':
        -: 7656:        case '?':
      354: 7657:          if ((syntax & RE_BK_PLUS_QM)
branch  0 taken 176 (fallthrough)
branch  1 taken 178
      176: 7658:              || (syntax & RE_LIMITED_OPS))
branch  0 taken 0 (fallthrough)
branch  1 taken 176
      178: 7659:            goto normal_char;
      352: 7660:        handle_plus:
      820: 7661:        case '*':
        -: 7662:          /* If there is no previous pattern... */
      820: 7663:          if (!laststart)
branch  0 taken 45 (fallthrough)
branch  1 taken 775
        -: 7664:            {
       45: 7665:              if (syntax & RE_CONTEXT_INVALID_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 45
    #####: 7666:                FREE_STACK_RETURN (REG_BADRPT);
       45: 7667:              else if (!(syntax & RE_CONTEXT_INDEP_OPS))
branch  0 taken 5 (fallthrough)
branch  1 taken 40
        5: 7668:                goto normal_char;
        -: 7669:            }
        -: 7670:
        -: 7671:          {
        -: 7672:            /* Are we optimizing this jump?  */
      815: 7673:            boolean keep_string_p = false;
        -: 7674:
        -: 7675:            /* 1 means zero (many) matches is allowed.  */
      815: 7676:            char zero_times_ok = 0, many_times_ok = 0;
        -: 7677:
        -: 7678:            /* If there is a sequence of repetition chars, collapse it
        -: 7679:               down to just one (the right one).  We can't combine
        -: 7680:               interval operators with these because of, e.g., `a{2}*',
        -: 7681:               which should only match an even number of `a's.  */
        -: 7682:
        -: 7683:            for (;;)
        -: 7684:              {
      835: 7685:                zero_times_ok |= c != '+';
      835: 7686:                many_times_ok |= c != '?';
        -: 7687:
      835: 7688:                if (p == pend)
branch  0 taken 20 (fallthrough)
branch  1 taken 815
       20: 7689:                  break;
        -: 7690:
     815*: 7691:                PATFETCH (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 815
branch  2 taken 0 (fallthrough)
branch  3 taken 815
        -: 7692:
      815: 7693:                if (c == '*'
branch  0 taken 798 (fallthrough)
branch  1 taken 17
      798: 7694:                    || (!(syntax & RE_BK_PLUS_QM) && (c == '+' || c == '?')))
branch  0 taken 172 (fallthrough)
branch  1 taken 626
branch  2 taken 172 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 172
        -: 7695:                  ;
        -: 7696:
      798: 7697:                else if (syntax & RE_BK_PLUS_QM  &&  c == '\\')
branch  0 taken 626 (fallthrough)
branch  1 taken 172
branch  2 taken 29 (fallthrough)
branch  3 taken 597
        -: 7698:                  {
      29*: 7699:                    if (p == pend) FREE_STACK_RETURN (REG_EESCAPE);
branch  0 taken 0 (fallthrough)
branch  1 taken 29
        -: 7700:
      29*: 7701:                    PATFETCH (c1);
branch  0 taken 0 (fallthrough)
branch  1 taken 29
branch  2 taken 0 (fallthrough)
branch  3 taken 29
       29: 7702:                    if (!(c1 == '+' || c1 == '?'))
branch  0 taken 27 (fallthrough)
branch  1 taken 2
branch  2 taken 26 (fallthrough)
branch  3 taken 1
        -: 7703:                      {
       26: 7704:                        PATUNFETCH;
       26: 7705:                        PATUNFETCH;
       26: 7706:                        break;
        -: 7707:                      }
        -: 7708:
        3: 7709:                    c = c1;
        -: 7710:                  }
        -: 7711:                else
        -: 7712:                  {
      769: 7713:                    PATUNFETCH;
      769: 7714:                    break;
        -: 7715:                  }
        -: 7716:
        -: 7717:                /* If we get here, we found another repeat character.  */
        -: 7718:               }
        -: 7719:
        -: 7720:            /* Star, etc. applied to an empty pattern is equivalent
        -: 7721:               to an empty pattern.  */
      815: 7722:            if (!laststart)
branch  0 taken 40 (fallthrough)
branch  1 taken 775
       40: 7723:              break;
        -: 7724:
        -: 7725:            /* Now we know whether or not zero matches is allowed
        -: 7726:               and also whether or not two or more matches is allowed.  */
      775: 7727:            if (many_times_ok)
branch  0 taken 623 (fallthrough)
branch  1 taken 152
        -: 7728:              { /* More than one repetition is allowed, so put in at the
        -: 7729:                   end a backward relative jump from `b' to before the next
        -: 7730:                   jump we're going to put in below (which jumps from
        -: 7731:                   laststart to after this jump).
        -: 7732:
        -: 7733:                   But if we are at the `*' in the exact sequence `.*\n',
        -: 7734:                   insert an unconditional jump backwards to the .,
        -: 7735:                   instead of the beginning of the loop.  This way we only
        -: 7736:                   push a failure point once, instead of every time
        -: 7737:                   through the loop.  */
        -: 7738:                assert (p - 1 > pattern);
        -: 7739:
        -: 7740:                /* Allocate the space for the jump.  */
     624*: 7741:                GET_BUFFER_SPACE (3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
branch  6 taken 0 (fallthrough)
branch  7 taken 1
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 1
branch 15 taken 623 (fallthrough)
        -: 7742:
        -: 7743:                /* We know we are not at the first character of the pattern,
        -: 7744:                   because laststart was nonzero.  And we've already
        -: 7745:                   incremented `p', by the way, to be the character after
        -: 7746:                   the `*'.  Do we have to do something analogous here
        -: 7747:                   for null bytes, because of RE_DOT_NOT_NULL?  */
     623*: 7748:                if (TRANSLATE (*(p - 2)) == TRANSLATE ('.')
branch  0 taken 0 (fallthrough)
branch  1 taken 623
branch  2 taken 0 (fallthrough)
branch  3 taken 623
branch  4 taken 0 (fallthrough)
branch  5 taken 623
    #####: 7749:		    && zero_times_ok
branch  0 never executed
branch  1 never executed
    #####: 7750:                    && p < pend && TRANSLATE (*p) == TRANSLATE ('\n')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7751:                    && !(syntax & RE_DOT_NEWLINE))
branch  0 never executed
branch  1 never executed
        -: 7752:                  { /* We have .*\n.  */
    #####: 7753:                    STORE_JUMP (jump, b, laststart);
call    0 never executed
    #####: 7754:                    keep_string_p = true;
        -: 7755:                  }
        -: 7756:                else
        -: 7757:                  /* Anything else.  */
      623: 7758:                  STORE_JUMP (maybe_pop_jump, b, laststart - 3);
call    0 returned 623
        -: 7759:
        -: 7760:                /* We've added more stuff to the buffer.  */
      623: 7761:                b += 3;
        -: 7762:              }
        -: 7763:
        -: 7764:            /* On failure, jump from laststart to b + 3, which will be the
        -: 7765:               end of the buffer after this jump is inserted.  */
     788*: 7766:            GET_BUFFER_SPACE (3);
branch  0 taken 0 (fallthrough)
branch  1 taken 13
branch  2 taken 0 (fallthrough)
branch  3 taken 13
branch  4 taken 0 (fallthrough)
branch  5 taken 13
branch  6 taken 0 (fallthrough)
branch  7 taken 13
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 13
branch 15 taken 775 (fallthrough)
     775*: 7767:            INSERT_JUMP (keep_string_p ? on_failure_keep_string_jump
branch  0 taken 0 (fallthrough)
branch  1 taken 775
call    2 returned 775
        -: 7768:                                       : on_failure_jump,
        -: 7769:                         laststart, b + 3);
      775: 7770:            pending_exact = 0;
      775: 7771:            b += 3;
        -: 7772:
      775: 7773:            if (!zero_times_ok)
branch  0 taken 156 (fallthrough)
branch  1 taken 619
        -: 7774:              {
        -: 7775:                /* At least one repetition is required, so insert a
        -: 7776:                   `dummy_failure_jump' before the initial
        -: 7777:                   `on_failure_jump' instruction of the loop. This
        -: 7778:                   effects a skip over that instruction the first time
        -: 7779:                   we hit that loop.  */
     156*: 7780:                GET_BUFFER_SPACE (3);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 156 (fallthrough)
      156: 7781:                INSERT_JUMP (dummy_failure_jump, laststart, laststart + 6);
call    0 returned 156
      156: 7782:                b += 3;
        -: 7783:              }
        -: 7784:            }
      775: 7785:	  break;
        -: 7786:
        -: 7787:
      415: 7788:	case '.':
      415: 7789:          laststart = b;
     415*: 7790:          BUF_PUSH (anychar);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 415 (fallthrough)
      415: 7791:          break;
        -: 7792:
        -: 7793:
      183: 7794:        case '[':
        -: 7795:          {
      183: 7796:            boolean had_char_class = false;
        -: 7797:
      183: 7798:            if (p == pend) FREE_STACK_RETURN (REG_EBRACK);
branch  0 taken 3 (fallthrough)
branch  1 taken 180
        -: 7799:
        -: 7800:            /* Ensure that we have enough space to push a charset: the
        -: 7801:               opcode, the length count, and the bitset; 34 bytes in all.  */
     264*: 7802:	    GET_BUFFER_SPACE (34);
branch  0 taken 0 (fallthrough)
branch  1 taken 84
branch  2 taken 0 (fallthrough)
branch  3 taken 84
branch  4 taken 0 (fallthrough)
branch  5 taken 84
branch  6 taken 0 (fallthrough)
branch  7 taken 84
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 84
branch 15 taken 180 (fallthrough)
        -: 7803:
      180: 7804:            laststart = b;
        -: 7805:
        -: 7806:            /* We test `*p == '^' twice, instead of using an if
        -: 7807:               statement, so we only need one BUF_PUSH.  */
     180*: 7808:            BUF_PUSH (*p == '^' ? charset_not : charset);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 180 (fallthrough)
branch 16 taken 7 (fallthrough)
branch 17 taken 173
      180: 7809:            if (*p == '^')
branch  0 taken 7 (fallthrough)
branch  1 taken 173
        7: 7810:              p++;
        -: 7811:
        -: 7812:            /* Remember the first position in the bracket expression.  */
      180: 7813:            p1 = p;
        -: 7814:
        -: 7815:            /* Push the number of bytes in the bitmap.  */
     180*: 7816:            BUF_PUSH ((1 << BYTEWIDTH) / BYTEWIDTH);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 180 (fallthrough)
        -: 7817:
        -: 7818:            /* Clear the whole map.  */
      180: 7819:            bzero (b, (1 << BYTEWIDTH) / BYTEWIDTH);
        -: 7820:
        -: 7821:            /* charset_not matches newline according to a syntax bit.  */
      180: 7822:            if ((re_opcode_t) b[-2] == charset_not
branch  0 taken 7 (fallthrough)
branch  1 taken 173
        7: 7823:                && (syntax & RE_HAT_LISTS_NOT_NEWLINE))
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7: 7824:              SET_LIST_BIT ('\n');
        -: 7825:
        -: 7826:            /* Read in characters and ranges, setting map bits.  */
        -: 7827:            for (;;)
        -: 7828:              {
     1652: 7829:                if (p == pend) FREE_STACK_RETURN (REG_EBRACK);
branch  0 taken 3 (fallthrough)
branch  1 taken 1649
        -: 7830:
    1649*: 7831:                PATFETCH (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 1649
branch  2 taken 0 (fallthrough)
branch  3 taken 1649
        -: 7832:
        -: 7833:                /* \ might escape characters inside [...] and [^...].  */
    1649*: 7834:                if ((syntax & RE_BACKSLASH_ESCAPE_IN_LISTS) && c == '\\')
branch  0 taken 0 (fallthrough)
branch  1 taken 1649
branch  2 never executed
branch  3 never executed
        -: 7835:                  {
    #####: 7836:                    if (p == pend) FREE_STACK_RETURN (REG_EESCAPE);
branch  0 never executed
branch  1 never executed
        -: 7837:
    #####: 7838:                    PATFETCH (c1);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7839:                    SET_LIST_BIT (c1);
    #####: 7840:                    continue;
        -: 7841:                  }
        -: 7842:
        -: 7843:                /* Could be the end of the bracket expression.  If it's
        -: 7844:                   not (i.e., when the bracket expression is `[]' so
        -: 7845:                   far), the ']' character bit gets set way below.  */
     1649: 7846:                if (c == ']' && p != p1 + 1)
branch  0 taken 168 (fallthrough)
branch  1 taken 1481
branch  2 taken 156 (fallthrough)
branch  3 taken 12
      156: 7847:                  break;
        -: 7848:
        -: 7849:                /* Look ahead to see if it's a range when the last thing
        -: 7850:                   was a character class.  */
     1493: 7851:                if (had_char_class && c == '-' && *p != ']')
branch  0 taken 6 (fallthrough)
branch  1 taken 1487
branch  2 taken 6 (fallthrough)
branch  3 taken 0
branch  4 taken 6 (fallthrough)
branch  5 taken 0
        6: 7852:                  FREE_STACK_RETURN (REG_ERANGE);
        -: 7853:
        -: 7854:                /* Look ahead to see if it's a range when the last thing
        -: 7855:                   was a character: if this is a hyphen not at the
        -: 7856:                   beginning or the end of a list, then it's the range
        -: 7857:                   operator.  */
     1487: 7858:                if (c == '-'
branch  0 taken 16 (fallthrough)
branch  1 taken 1471
       16: 7859:                    && !(p - 2 >= pattern && p[-2] == '[')
branch  0 taken 16 (fallthrough)
branch  1 taken 0
branch  2 taken 10 (fallthrough)
branch  3 taken 6
       10: 7860:                    && !(p - 3 >= pattern && p[-3] == '[' && p[-2] == '^')
branch  0 taken 10 (fallthrough)
branch  1 taken 0
branch  2 taken 3 (fallthrough)
branch  3 taken 7
branch  4 taken 3 (fallthrough)
branch  5 taken 0
       10: 7861:                    && *p != ']')
branch  0 taken 6 (fallthrough)
branch  1 taken 4
        3: 7862:                  {
        -: 7863:                    reg_errcode_t ret
        6: 7864:                      = compile_range (&p, pend, translate, syntax, b);
call    0 returned 6
        6: 7865:                    if (ret != REG_NOERROR) FREE_STACK_RETURN (ret);
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        -: 7866:                  }
        -: 7867:
     1481: 7868:                else if (p[0] == '-' && p[1] != ']')
branch  0 taken 38 (fallthrough)
branch  1 taken 1443
branch  2 taken 34 (fallthrough)
branch  3 taken 4
       31: 7869:                  { /* This handles ranges made up of characters only.  */
        -: 7870:                    reg_errcode_t ret;
        -: 7871:
        -: 7872:		    /* Move past the `-'.  */
      34*: 7873:                    PATFETCH (c1);
branch  0 taken 0 (fallthrough)
branch  1 taken 34
branch  2 taken 0 (fallthrough)
branch  3 taken 34
        -: 7874:
       34: 7875:                    ret = compile_range (&p, pend, translate, syntax, b);
call    0 returned 34
       34: 7876:                    if (ret != REG_NOERROR) FREE_STACK_RETURN (ret);
branch  0 taken 3 (fallthrough)
branch  1 taken 31
        -: 7877:                  }
        -: 7878:
        -: 7879:                /* See if we're at the beginning of a possible character
        -: 7880:                   class.  */
        -: 7881:
     1447: 7882:                else if (syntax & RE_CHAR_CLASSES && c == '[' && *p == ':')
branch  0 taken 1447 (fallthrough)
branch  1 taken 0
branch  2 taken 41 (fallthrough)
branch  3 taken 1406
branch  4 taken 34 (fallthrough)
branch  5 taken 7
       25: 7883:                  { /* Leave room for the null.  */
        -: 7884:                    char str[CHAR_CLASS_MAX_LENGTH + 1];
        -: 7885:
      43*: 7886:                    PATFETCH (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 34
branch  2 taken 0 (fallthrough)
branch  3 taken 34
       34: 7887:                    c1 = 0;
        -: 7888:
        -: 7889:                    /* If pattern is `[[:'.  */
       34: 7890:                    if (p == pend) FREE_STACK_RETURN (REG_EBRACK);
branch  0 taken 3 (fallthrough)
branch  1 taken 31
        -: 7891:
        -: 7892:                    for (;;)
        -: 7893:                      {
     181*: 7894:                        PATFETCH (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 181
branch  2 taken 0 (fallthrough)
branch  3 taken 181
      181: 7895:                        if ((c == ':' && *p == ']') || p == pend)
branch  0 taken 31 (fallthrough)
branch  1 taken 150
branch  2 taken 0 (fallthrough)
branch  3 taken 31
branch  4 taken 150 (fallthrough)
branch  5 taken 0
        -: 7896:                          break;
      150: 7897:			if (c1 < CHAR_CLASS_MAX_LENGTH)
branch  0 taken 149 (fallthrough)
branch  1 taken 1
      149: 7898:			  str[c1++] = c;
        -: 7899:			else
        -: 7900:			  /* This is in any case an invalid class name.  */
        1: 7901:			  str[0] = '\0';
        -: 7902:                      }
       31: 7903:                    str[c1] = '\0';
        -: 7904:
        -: 7905:                    /* If isn't a word bracketed by `[:' and `:]':
        -: 7906:                       undo the ending character, the letters, and leave
        -: 7907:                       the leading `:' and `[' (but set bits for them).  */
       31: 7908:                    if (c == ':' && *p == ']')
branch  0 taken 31 (fallthrough)
branch  1 taken 0
branch  2 taken 31 (fallthrough)
branch  3 taken 0
       25: 7909:                      {
        -: 7910:#if defined _LIBC || WIDE_CHAR_SUPPORT
        -: 7911:                        boolean is_lower = STREQ (str, "lower");
        -: 7912:                        boolean is_upper = STREQ (str, "upper");
        -: 7913:			wctype_t wt;
        -: 7914:                        int ch;
        -: 7915:
        -: 7916:			wt = IS_CHAR_CLASS (str);
        -: 7917:			if (wt == 0)
        -: 7918:			  FREE_STACK_RETURN (REG_ECTYPE);
        -: 7919:
        -: 7920:                        /* Throw away the ] at the end of the character
        -: 7921:                           class.  */
        -: 7922:                        PATFETCH (c);
        -: 7923:
        -: 7924:                        if (p == pend) FREE_STACK_RETURN (REG_EBRACK);
        -: 7925:
        -: 7926:                        for (ch = 0; ch < 1 << BYTEWIDTH; ++ch)
        -: 7927:			  {
        -: 7928:# ifdef _LIBC
        -: 7929:			    if (__iswctype (__btowc (ch), wt))
        -: 7930:			      SET_LIST_BIT (ch);
        -: 7931:# else
        -: 7932:			    if (iswctype (btowc (ch), wt))
        -: 7933:			      SET_LIST_BIT (ch);
        -: 7934:# endif
        -: 7935:
        -: 7936:			    if (translate && (is_upper || is_lower)
        -: 7937:				&& (ISUPPER (ch) || ISLOWER (ch)))
        -: 7938:			      SET_LIST_BIT (ch);
        -: 7939:			  }
        -: 7940:
        -: 7941:                        had_char_class = true;
        -: 7942:#else
        -: 7943:                        int ch;
       31: 7944:                        boolean is_alnum = STREQ (str, "alnum");
       31: 7945:                        boolean is_alpha = STREQ (str, "alpha");
       31: 7946:                        boolean is_blank = STREQ (str, "blank");
       31: 7947:                        boolean is_cntrl = STREQ (str, "cntrl");
       31: 7948:                        boolean is_digit = STREQ (str, "digit");
       31: 7949:                        boolean is_graph = STREQ (str, "graph");
       31: 7950:                        boolean is_lower = STREQ (str, "lower");
       31: 7951:                        boolean is_print = STREQ (str, "print");
       31: 7952:                        boolean is_punct = STREQ (str, "punct");
       31: 7953:                        boolean is_space = STREQ (str, "space");
       31: 7954:                        boolean is_upper = STREQ (str, "upper");
       31: 7955:                        boolean is_xdigit = STREQ (str, "xdigit");
        -: 7956:
       31: 7957:                        if (!IS_CHAR_CLASS (str))
branch  0 taken 28 (fallthrough)
branch  1 taken 3
branch  2 taken 27 (fallthrough)
branch  3 taken 1
branch  4 taken 26 (fallthrough)
branch  5 taken 1
branch  6 taken 20 (fallthrough)
branch  7 taken 6
branch  8 taken 9 (fallthrough)
branch  9 taken 11
branch 10 taken 8 (fallthrough)
branch 11 taken 1
branch 12 taken 7 (fallthrough)
branch 13 taken 1
branch 14 taken 6 (fallthrough)
branch 15 taken 1
branch 16 taken 5 (fallthrough)
branch 17 taken 1
branch 18 taken 4 (fallthrough)
branch 19 taken 1
branch 20 taken 3 (fallthrough)
branch 21 taken 1
branch 22 taken 3 (fallthrough)
branch 23 taken 0
        3: 7958:			  FREE_STACK_RETURN (REG_ECTYPE);
        -: 7959:
        -: 7960:                        /* Throw away the ] at the end of the character
        -: 7961:                           class.  */
      28*: 7962:                        PATFETCH (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 28
branch  2 taken 0 (fallthrough)
branch  3 taken 28
        -: 7963:
       28: 7964:                        if (p == pend) FREE_STACK_RETURN (REG_EBRACK);
branch  0 taken 3 (fallthrough)
branch  1 taken 25
        -: 7965:
     6425: 7966:                        for (ch = 0; ch < 1 << BYTEWIDTH; ch++)
branch  0 taken 6400
branch  1 taken 25 (fallthrough)
        -: 7967:                          {
        -: 7968:			    /* This was split into 3 if's to
        -: 7969:			       avoid an arbitrary limit in some compiler.  */
     6400: 7970:                            if (   (is_alnum  && ISALNUM (ch))
branch  0 taken 2560 (fallthrough)
branch  1 taken 3840
branch  2 taken 1940 (fallthrough)
branch  3 taken 620
     5780: 7971:                                || (is_alpha  && ISALPHA (ch))
branch  0 taken 512 (fallthrough)
branch  1 taken 5268
branch  2 taken 408 (fallthrough)
branch  3 taken 104
    5676*: 7972:                                || (is_blank  && ISBLANK (ch))
branch  0 taken 0 (fallthrough)
branch  1 taken 5676
branch  2 never executed
branch  3 never executed
     5676: 7973:                                || (is_cntrl  && ISCNTRL (ch)))
branch  0 taken 256 (fallthrough)
branch  1 taken 5420
branch  2 taken 33 (fallthrough)
branch  3 taken 223
      757: 7974:			      SET_LIST_BIT (ch);
     6400: 7975:			    if (   (is_digit  && ISDIGIT (ch))
branch  0 taken 1280 (fallthrough)
branch  1 taken 5120
branch  2 taken 1230 (fallthrough)
branch  3 taken 50
     6350: 7976:                                || (is_graph  && ISGRAPH (ch))
branch  0 taken 256 (fallthrough)
branch  1 taken 6094
branch  2 taken 162 (fallthrough)
branch  3 taken 94
     6256: 7977:                                || (is_lower  && ISLOWER (ch))
branch  0 taken 256 (fallthrough)
branch  1 taken 6000
branch  2 taken 230 (fallthrough)
branch  3 taken 26
     6230: 7978:                                || (is_print  && ISPRINT (ch)))
branch  0 taken 256 (fallthrough)
branch  1 taken 5974
branch  2 taken 95 (fallthrough)
branch  3 taken 161
      265: 7979:			      SET_LIST_BIT (ch);
     6400: 7980:			    if (   (is_punct  && ISPUNCT (ch))
branch  0 taken 256 (fallthrough)
branch  1 taken 6144
branch  2 taken 224 (fallthrough)
branch  3 taken 32
     6368: 7981:                                || (is_space  && ISSPACE (ch))
branch  0 taken 256 (fallthrough)
branch  1 taken 6112
branch  2 taken 250 (fallthrough)
branch  3 taken 6
     6362: 7982:                                || (is_upper  && ISUPPER (ch))
branch  0 taken 256 (fallthrough)
branch  1 taken 6106
branch  2 taken 230 (fallthrough)
branch  3 taken 26
     6336: 7983:                                || (is_xdigit && ISXDIGIT (ch)))
branch  0 taken 256 (fallthrough)
branch  1 taken 6080
branch  2 taken 22 (fallthrough)
branch  3 taken 234
       86: 7984:			      SET_LIST_BIT (ch);
    6400*: 7985:			    if (   translate && (is_upper || is_lower)
branch  0 taken 0 (fallthrough)
branch  1 taken 6400
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7986:				&& (ISUPPER (ch) || ISLOWER (ch)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7987:			      SET_LIST_BIT (ch);
        -: 7988:                          }
       25: 7989:                        had_char_class = true;
        -: 7990:#endif	/* libc || wctype.h */
        -: 7991:                      }
        -: 7992:                    else
        -: 7993:                      {
    #####: 7994:                        c1++;
    #####: 7995:                        while (c1--)
branch  0 never executed
branch  1 never executed
    #####: 7996:                          PATUNFETCH;
    #####: 7997:                        SET_LIST_BIT ('[');
    #####: 7998:                        SET_LIST_BIT (':');
    #####: 7999:                        had_char_class = false;
        -: 8000:                      }
        -: 8001:                  }
        -: 8002:                else
        -: 8003:                  {
     1413: 8004:                    had_char_class = false;
     1413: 8005:                    SET_LIST_BIT (c);
        -: 8006:                  }
        -: 8007:              }
        -: 8008:
        -: 8009:            /* Discard any (non)matching list bytes that are all 0 at the
        -: 8010:               end of the map.  Decrease the map-length byte too.  */
     3292: 8011:            while ((int) b[-1] > 0 && b[b[-1] - 1] == 0)
branch  0 taken 3289 (fallthrough)
branch  1 taken 3
branch  2 taken 3136
branch  3 taken 153 (fallthrough)
     3136: 8012:              b[-1]--;
      156: 8013:            b += b[-1];
        -: 8014:          }
      156: 8015:          break;
        -: 8016:
        -: 8017:
      721: 8018:	case '(':
      721: 8019:          if (syntax & RE_NO_BK_PARENS)
branch  0 taken 60 (fallthrough)
branch  1 taken 661
       60: 8020:            goto handle_open;
        -: 8021:          else
      661: 8022:            goto normal_char;
        -: 8023:
        -: 8024:
      642: 8025:        case ')':
      642: 8026:          if (syntax & RE_NO_BK_PARENS)
branch  0 taken 60 (fallthrough)
branch  1 taken 582
       60: 8027:            goto handle_close;
        -: 8028:          else
      582: 8029:            goto normal_char;
        -: 8030:
        -: 8031:
     1881: 8032:        case '\n':
     1881: 8033:          if (syntax & RE_NEWLINE_ALT)
branch  0 taken 1881 (fallthrough)
branch  1 taken 0
     1881: 8034:            goto handle_alt;
        -: 8035:          else
    #####: 8036:            goto normal_char;
        -: 8037:
        -: 8038:
      188: 8039:	case '|':
      188: 8040:          if (syntax & RE_NO_BK_VBAR)
branch  0 taken 130 (fallthrough)
branch  1 taken 58
      130: 8041:            goto handle_alt;
        -: 8042:          else
       58: 8043:            goto normal_char;
        -: 8044:
        -: 8045:
      186: 8046:        case '{':
      186: 8047:           if (syntax & RE_INTERVALS && syntax & RE_NO_BK_BRACES)
branch  0 taken 186 (fallthrough)
branch  1 taken 0
branch  2 taken 91 (fallthrough)
branch  3 taken 95
       91: 8048:             goto handle_interval;
        -: 8049:           else
       95: 8050:             goto normal_char;
        -: 8051:
        -: 8052:
     1024: 8053:        case '\\':
     1024: 8054:          if (p == pend) FREE_STACK_RETURN (REG_EESCAPE);
branch  0 taken 6 (fallthrough)
branch  1 taken 1018
        -: 8055:
        -: 8056:          /* Do not translate the character after the \, so that we can
        -: 8057:             distinguish, e.g., \B from \b, even if we normally would
        -: 8058:             translate, e.g., B to b.  */
    1018*: 8059:          PATFETCH_RAW (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 1018
        -: 8060:
     1018: 8061:          switch (c)
branch  0 taken 139
branch  1 taken 49
branch  2 taken 147
branch  3 taken 101
branch  4 taken 1
branch  5 taken 3
branch  6 taken 115
branch  7 taken 2
branch  8 taken 140
branch  9 taken 1
branch 10 taken 3
branch 11 taken 3
branch 12 taken 9
branch 13 taken 211
branch 14 taken 94
        -: 8062:            {
      139: 8063:            case '(':
      139: 8064:              if (syntax & RE_NO_BK_PARENS)
branch  0 taken 90 (fallthrough)
branch  1 taken 49
       90: 8065:                goto normal_backslash;
        -: 8066:
       49: 8067:            handle_open:
      109: 8068:              bufp->re_nsub++;
      109: 8069:              regnum++;
        -: 8070:
      109: 8071:              if (COMPILE_STACK_FULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 109
        -: 8072:                {
    #####: 8073:                  RETALLOC (compile_stack.stack, compile_stack.size << 1,
        -: 8074:                            compile_stack_elt_t);
    #####: 8075:                  if (compile_stack.stack == NULL) return REG_ESPACE;
branch  0 never executed
branch  1 never executed
        -: 8076:
    #####: 8077:                  compile_stack.size <<= 1;
        -: 8078:                }
        -: 8079:
        -: 8080:              /* These are the values to restore when we hit end of this
        -: 8081:                 group.  They are all relative offsets, so that if the
        -: 8082:                 whole pattern moves because of realloc, they will still
        -: 8083:                 be valid.  */
      109: 8084:              COMPILE_STACK_TOP.begalt_offset = begalt - bufp->buffer;
      109: 8085:              COMPILE_STACK_TOP.fixup_alt_jump
      109: 8086:                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + 1 : 0;
branch  0 taken 33 (fallthrough)
branch  1 taken 76
      109: 8087:              COMPILE_STACK_TOP.laststart_offset = b - bufp->buffer;
      109: 8088:              COMPILE_STACK_TOP.regnum = regnum;
        -: 8089:
        -: 8090:              /* We will eventually replace the 0 with the number of
        -: 8091:                 groups inner to this one.  But do not push a
        -: 8092:                 start_memory for groups beyond the last one we can
        -: 8093:                 represent in the compiled pattern.  */
      109: 8094:              if (regnum <= MAX_REGNUM)
branch  0 taken 109 (fallthrough)
branch  1 taken 0
        -: 8095:                {
      109: 8096:                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + 2;
     109*: 8097:                  BUF_PUSH_3 (start_memory, regnum, 0);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 109 (fallthrough)
        -: 8098:                }
        -: 8099:
      109: 8100:              compile_stack.avail++;
        -: 8101:
      109: 8102:              fixup_alt_jump = 0;
      109: 8103:              laststart = 0;
      109: 8104:              begalt = b;
        -: 8105:	      /* If we've reached MAX_REGNUM groups, then this open
        -: 8106:		 won't actually generate any code, so we'll have to
        -: 8107:		 clear pending_exact explicitly.  */
      109: 8108:	      pending_exact = 0;
      109: 8109:              break;
        -: 8110:
        -: 8111:
       49: 8112:            case ')':
      49*: 8113:              if (syntax & RE_NO_BK_PARENS) goto normal_backslash;
branch  0 taken 0 (fallthrough)
branch  1 taken 49
        -: 8114:
       49: 8115:              if (COMPILE_STACK_EMPTY)
branch  0 taken 3 (fallthrough)
branch  1 taken 46
        -: 8116:		{
        3: 8117:		  if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 8118:		    goto normal_backslash;
        -: 8119:		  else
        3: 8120:		    FREE_STACK_RETURN (REG_ERPAREN);
        -: 8121:		}
        -: 8122:
       46: 8123:            handle_close:
      106: 8124:              if (fixup_alt_jump)
branch  0 taken 41 (fallthrough)
branch  1 taken 65
        -: 8125:                { /* Push a dummy failure point at the end of the
        -: 8126:                     alternative for a possible future
        -: 8127:                     `pop_failure_jump' to pop.  See comments at
        -: 8128:                     `push_dummy_failure' in `re_match_2'.  */
      42*: 8129:                  BUF_PUSH (push_dummy_failure);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
branch  6 taken 0 (fallthrough)
branch  7 taken 1
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 1
branch 15 taken 41 (fallthrough)
        -: 8130:
        -: 8131:                  /* We allocated space for this jump when we assigned
        -: 8132:                     to `fixup_alt_jump', in the `handle_alt' case below.  */
       41: 8133:                  STORE_JUMP (jump_past_alt, fixup_alt_jump, b - 1);
call    0 returned 41
        -: 8134:                }
        -: 8135:
        -: 8136:              /* See similar code for backslashed left paren above.  */
      106: 8137:              if (COMPILE_STACK_EMPTY)
branch  0 taken 0 (fallthrough)
branch  1 taken 106
        -: 8138:		{
    #####: 8139:		  if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
branch  0 never executed
branch  1 never executed
    #####: 8140:		    goto normal_char;
        -: 8141:		  else
    #####: 8142:		    FREE_STACK_RETURN (REG_ERPAREN);
        -: 8143:		}
        -: 8144:
        -: 8145:              /* Since we just checked for an empty stack above, this
        -: 8146:                 ``can't happen''.  */
        -: 8147:              assert (compile_stack.avail != 0);
        -: 8148:              {
        -: 8149:                /* We don't just want to restore into `regnum', because
        -: 8150:                   later groups should continue to be numbered higher,
        -: 8151:                   as in `(ab)c(de)' -- the second group is #2.  */
        -: 8152:                regnum_t this_group_regnum;
        -: 8153:
      106: 8154:                compile_stack.avail--;
      106: 8155:                begalt = bufp->buffer + COMPILE_STACK_TOP.begalt_offset;
        -: 8156:                fixup_alt_jump
      212: 8157:                  = COMPILE_STACK_TOP.fixup_alt_jump
       33: 8158:                    ? bufp->buffer + COMPILE_STACK_TOP.fixup_alt_jump - 1
      106: 8159:                    : 0;
branch  0 taken 33 (fallthrough)
branch  1 taken 73
      106: 8160:                laststart = bufp->buffer + COMPILE_STACK_TOP.laststart_offset;
      106: 8161:                this_group_regnum = COMPILE_STACK_TOP.regnum;
        -: 8162:		/* If we've reached MAX_REGNUM groups, then this open
        -: 8163:		   won't actually generate any code, so we'll have to
        -: 8164:		   clear pending_exact explicitly.  */
      106: 8165:		pending_exact = 0;
        -: 8166:
        -: 8167:                /* We're at the end of the group, so now we know how many
        -: 8168:                   groups were inside this one.  */
      106: 8169:                if (this_group_regnum <= MAX_REGNUM)
branch  0 taken 106 (fallthrough)
branch  1 taken 0
        -: 8170:                  {
      106: 8171:                    unsigned char *inner_group_loc
      106: 8172:                      = bufp->buffer + COMPILE_STACK_TOP.inner_group_offset;
        -: 8173:
      106: 8174:                    *inner_group_loc = regnum - this_group_regnum;
     111*: 8175:                    BUF_PUSH_3 (stop_memory, this_group_regnum,
branch  0 taken 0 (fallthrough)
branch  1 taken 5
branch  2 taken 0 (fallthrough)
branch  3 taken 5
branch  4 taken 0 (fallthrough)
branch  5 taken 5
branch  6 taken 0 (fallthrough)
branch  7 taken 5
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 5
branch 15 taken 106 (fallthrough)
        -: 8176:                                regnum - this_group_regnum);
        -: 8177:                  }
        -: 8178:              }
      106: 8179:              break;
        -: 8180:
        -: 8181:
      147: 8182:            case '|':					/* `\|'.  */
      147: 8183:              if (syntax & RE_LIMITED_OPS || syntax & RE_NO_BK_VBAR)
branch  0 taken 147 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 147
    #####: 8184:                goto normal_backslash;
      147: 8185:            handle_alt:
     2158: 8186:              if (syntax & RE_LIMITED_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 2158
    #####: 8187:                goto normal_char;
        -: 8188:
        -: 8189:              /* Insert before the previous alternative a jump which
        -: 8190:                 jumps to this alternative if the former fails.  */
    2158*: 8191:              GET_BUFFER_SPACE (3);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 2158 (fallthrough)
     2158: 8192:              INSERT_JUMP (on_failure_jump, begalt, b + 6);
call    0 returned 2158
     2158: 8193:              pending_exact = 0;
     2158: 8194:              b += 3;
        -: 8195:
        -: 8196:              /* The alternative before this one has a jump after it
        -: 8197:                 which gets executed if it gets matched.  Adjust that
        -: 8198:                 jump so it will jump to this alternative's analogous
        -: 8199:                 jump (put in below, which in turn will jump to the next
        -: 8200:                 (if any) alternative's such jump, etc.).  The last such
        -: 8201:                 jump jumps to the correct final destination.  A picture:
        -: 8202:                          _____ _____
        -: 8203:                          |   | |   |
        -: 8204:                          |   v |   v
        -: 8205:                         a | b   | c
        -: 8206:
        -: 8207:                 If we are at `b', then fixup_alt_jump right now points to a
        -: 8208:                 three-byte space after `a'.  We'll put in the jump, set
        -: 8209:                 fixup_alt_jump to right after `b', and leave behind three
        -: 8210:                 bytes which we'll fill in when we get to after `c'.  */
        -: 8211:
     2158: 8212:              if (fixup_alt_jump)
branch  0 taken 1877 (fallthrough)
branch  1 taken 281
     1877: 8213:                STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
call    0 returned 1877
        -: 8214:
        -: 8215:              /* Mark and leave space for a jump after this alternative,
        -: 8216:                 to be filled in later either by next alternative or
        -: 8217:                 when know we're at the end of a series of alternatives.  */
     2158: 8218:              fixup_alt_jump = b;
    2159*: 8219:              GET_BUFFER_SPACE (3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
branch  6 taken 0 (fallthrough)
branch  7 taken 1
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 1
branch 15 taken 2158 (fallthrough)
     2158: 8220:              b += 3;
        -: 8221:
     2158: 8222:              laststart = 0;
     2158: 8223:              begalt = b;
     2158: 8224:              break;
        -: 8225:
        -: 8226:
      101: 8227:            case '{':
        -: 8228:              /* If \{ is a literal.  */
      101: 8229:              if (!(syntax & RE_INTERVALS)
branch  0 taken 101 (fallthrough)
branch  1 taken 0
        -: 8230:                     /* If we're at `\{' and it's not the open-interval
        -: 8231:                        operator.  */
      101: 8232:                  || ((syntax & RE_INTERVALS) && (syntax & RE_NO_BK_BRACES))
branch  0 taken 101 (fallthrough)
branch  1 taken 0
branch  2 taken 101 (fallthrough)
branch  3 taken 0
      101: 8233:                  || (p - 2 == pattern  &&  p == pend))
branch  0 taken 6 (fallthrough)
branch  1 taken 95
branch  2 taken 5 (fallthrough)
branch  3 taken 1
        1: 8234:                goto normal_backslash;
        -: 8235:
      100: 8236:            handle_interval:
        -: 8237:              {
        -: 8238:                /* If got here, then the syntax allows intervals.  */
        -: 8239:
        -: 8240:                /* At least (most) this many matches must be made.  */
      191: 8241:                int lower_bound = -1, upper_bound = -1;
        -: 8242:
      191: 8243:                beg_interval = p - 1;
        -: 8244:
      191: 8245:                if (p == pend)
branch  0 taken 2 (fallthrough)
branch  1 taken 189
        -: 8246:                  {
        2: 8247:                    if (syntax & RE_NO_BK_BRACES)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 8248:                      goto unfetch_interval;
        -: 8249:                    else
        2: 8250:                      FREE_STACK_RETURN (REG_EBRACE);
        -: 8251:                  }
        -: 8252:
     378*: 8253:                GET_UNSIGNED_NUMBER (lower_bound);
branch  0 taken 189 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 189
branch  4 taken 0 (fallthrough)
branch  5 taken 189
branch  6 taken 188 (fallthrough)
branch  7 taken 3
branch  8 taken 2 (fallthrough)
branch  9 taken 189
branch 10 taken 0 (fallthrough)
branch 11 taken 189
branch 12 taken 0 (fallthrough)
branch 13 taken 189
branch 14 taken 191
branch 15 taken 187 (fallthrough)
        -: 8254:
      189: 8255:                if (c == ',')
branch  0 taken 14 (fallthrough)
branch  1 taken 175
        -: 8256:                  {
      29*: 8257:                    GET_UNSIGNED_NUMBER (upper_bound);
branch  0 taken 14 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 14
branch  4 taken 0 (fallthrough)
branch  5 taken 14
branch  6 taken 13 (fallthrough)
branch  7 taken 3
branch  8 taken 1 (fallthrough)
branch  9 taken 15
branch 10 taken 0 (fallthrough)
branch 11 taken 15
branch 12 taken 0 (fallthrough)
branch 13 taken 15
branch 14 taken 16
branch 15 taken 13 (fallthrough)
       14: 8258:                    if (upper_bound < 0) upper_bound = RE_DUP_MAX;
branch  0 taken 1 (fallthrough)
branch  1 taken 13
        -: 8259:                  }
        -: 8260:                else
        -: 8261:                  /* Interval such as `{1}' => match exactly once. */
      175: 8262:                  upper_bound = lower_bound;
        -: 8263:
      189: 8264:                if (lower_bound < 0 || upper_bound > RE_DUP_MAX
branch  0 taken 188 (fallthrough)
branch  1 taken 1
branch  2 taken 188 (fallthrough)
branch  3 taken 0
      188: 8265:                    || lower_bound > upper_bound)
branch  0 taken 2 (fallthrough)
branch  1 taken 186
        -: 8266:                  {
        3: 8267:                    if (syntax & RE_NO_BK_BRACES)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 8268:                      goto unfetch_interval;
        -: 8269:                    else
        2: 8270:                      FREE_STACK_RETURN (REG_BADBR);
        -: 8271:                  }
        -: 8272:
      186: 8273:                if (!(syntax & RE_NO_BK_BRACES))
branch  0 taken 96 (fallthrough)
branch  1 taken 90
        -: 8274:                  {
       96: 8275:                    if (c != '\\') FREE_STACK_RETURN (REG_EBRACE);
branch  0 taken 3 (fallthrough)
branch  1 taken 93
        -: 8276:
      93*: 8277:                    PATFETCH (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 93
branch  2 taken 0 (fallthrough)
branch  3 taken 93
        -: 8278:                  }
        -: 8279:
      183: 8280:                if (c != '}')
branch  0 taken 3 (fallthrough)
branch  1 taken 180
        -: 8281:                  {
        3: 8282:                    if (syntax & RE_NO_BK_BRACES)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 8283:                      goto unfetch_interval;
        -: 8284:                    else
        3: 8285:                      FREE_STACK_RETURN (REG_BADBR);
        -: 8286:                  }
        -: 8287:
        -: 8288:                /* We just parsed a valid interval.  */
        -: 8289:
        -: 8290:                /* If it's invalid to have no preceding re.  */
      180: 8291:                if (!laststart)
branch  0 taken 20 (fallthrough)
branch  1 taken 160
        -: 8292:                  {
       20: 8293:                    if (syntax & RE_CONTEXT_INVALID_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####: 8294:                      FREE_STACK_RETURN (REG_BADRPT);
       20: 8295:                    else if (syntax & RE_CONTEXT_INDEP_OPS)
branch  0 taken 20 (fallthrough)
branch  1 taken 0
       20: 8296:                      laststart = b;
        -: 8297:                    else
    #####: 8298:                      goto unfetch_interval;
        -: 8299:                  }
        -: 8300:
        -: 8301:                /* If the upper bound is zero, don't want to succeed at
        -: 8302:                   all; jump from `laststart' to `b + 3', which will be
        -: 8303:                   the end of the buffer after we insert the jump.  */
      180: 8304:                 if (upper_bound == 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 177
        -: 8305:                   {
       3*: 8306:                     GET_BUFFER_SPACE (3);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 3 (fallthrough)
        3: 8307:                     INSERT_JUMP (jump, laststart, b + 3);
call    0 returned 3
        3: 8308:                     b += 3;
        -: 8309:                   }
        -: 8310:
        -: 8311:                 /* Otherwise, we have a nontrivial interval.  When
        -: 8312:                    we're all done, the pattern will look like:
        -: 8313:                      set_number_at <jump count> <upper bound>
        -: 8314:                      set_number_at <succeed_n count> <lower bound>
        -: 8315:                      succeed_n <after jump addr> <succeed_n count>
        -: 8316:                      <body of loop>
        -: 8317:                      jump_n <succeed_n addr> <jump count>
        -: 8318:                    (The upper bound and `jump_n' are omitted if
        -: 8319:                    `upper_bound' is 1, though.)  */
        -: 8320:                 else
        -: 8321:                   { /* If the upper bound is > 1, we need to insert
        -: 8322:                        more at the end of the loop.  */
      177: 8323:                     unsigned nbytes = 10 + (upper_bound > 1) * 10;
branch  0 taken 8 (fallthrough)
branch  1 taken 169
        -: 8324:
     181*: 8325:                     GET_BUFFER_SPACE (nbytes);
branch  0 taken 0 (fallthrough)
branch  1 taken 4
branch  2 taken 0 (fallthrough)
branch  3 taken 4
branch  4 taken 0 (fallthrough)
branch  5 taken 4
branch  6 taken 0 (fallthrough)
branch  7 taken 4
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 4
branch 15 taken 177 (fallthrough)
        -: 8326:
        -: 8327:                     /* Initialize lower bound of the `succeed_n', even
        -: 8328:                        though it will be set during matching by its
        -: 8329:                        attendant `set_number_at' (inserted next),
        -: 8330:                        because `re_compile_fastmap' needs to know.
        -: 8331:                        Jump to the `jump_n' we might insert below.  */
      177: 8332:                     INSERT_JUMP2 (succeed_n, laststart,
branch  0 taken 8 (fallthrough)
branch  1 taken 169
call    2 returned 177
        -: 8333:                                   b + 5 + (upper_bound > 1) * 5,
        -: 8334:                                   lower_bound);
      177: 8335:                     b += 5;
        -: 8336:
        -: 8337:                     /* Code to initialize the lower bound.  Insert
        -: 8338:                        before the `succeed_n'.  The `5' is the last two
        -: 8339:                        bytes of this `set_number_at', plus 3 bytes of
        -: 8340:                        the following `succeed_n'.  */
      177: 8341:                     insert_op2 (set_number_at, laststart, 5, lower_bound, b);
call    0 returned 177
      177: 8342:                     b += 5;
        -: 8343:
      177: 8344:                     if (upper_bound > 1)
branch  0 taken 8 (fallthrough)
branch  1 taken 169
        -: 8345:                       { /* More than one repetition is allowed, so
        -: 8346:                            append a backward jump to the `succeed_n'
        -: 8347:                            that starts this interval.
        -: 8348:
        -: 8349:                            When we've reached this during matching,
        -: 8350:                            we'll have matched the interval once, so
        -: 8351:                            jump back only `upper_bound - 1' times.  */
        8: 8352:                         STORE_JUMP2 (jump_n, b, laststart + 5,
call    0 returned 8
        -: 8353:                                      upper_bound - 1);
        8: 8354:                         b += 5;
        -: 8355:
        -: 8356:                         /* The location we want to set is the second
        -: 8357:                            parameter of the `jump_n'; that is `b-2' as
        -: 8358:                            an absolute address.  `laststart' will be
        -: 8359:                            the `set_number_at' we're about to insert;
        -: 8360:                            `laststart+3' the number to set, the source
        -: 8361:                            for the relative address.  But we are
        -: 8362:                            inserting into the middle of the pattern --
        -: 8363:                            so everything is getting moved up by 5.
        -: 8364:                            Conclusion: (b - 2) - (laststart + 3) + 5,
        -: 8365:                            i.e., b - laststart.
        -: 8366:
        -: 8367:                            We insert this at the beginning of the loop
        -: 8368:                            so that if we fail during matching, we'll
        -: 8369:                            reinitialize the bounds.  */
        8: 8370:                         insert_op2 (set_number_at, laststart, b - laststart,
call    0 returned 8
        -: 8371:                                     upper_bound - 1, b);
        8: 8372:                         b += 5;
        -: 8373:                       }
        -: 8374:                   }
      180: 8375:                pending_exact = 0;
      180: 8376:                beg_interval = NULL;
        -: 8377:              }
      180: 8378:              break;
        -: 8379:
        1: 8380:            unfetch_interval:
        -: 8381:              /* If an invalid interval, match the characters as literals.  */
        -: 8382:               assert (beg_interval);
        1: 8383:               p = beg_interval;
        1: 8384:               beg_interval = NULL;
        -: 8385:
        -: 8386:               /* normal_char and normal_backslash need `c'.  */
       1*: 8387:               PATFETCH (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -: 8388:
        1: 8389:               if (!(syntax & RE_NO_BK_BRACES))
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 8390:                 {
    #####: 8391:                   if (p > pattern  &&  p[-1] == '\\')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8392:                     goto normal_backslash;
        -: 8393:                 }
        1: 8394:               goto normal_char;
        -: 8395:
        -: 8396:#ifdef emacs
        -: 8397:            /* There is no way to specify the before_dot and after_dot
        -: 8398:               operators.  rms says this is ok.  --karl  */
        -: 8399:            case '=':
        -: 8400:              BUF_PUSH (at_dot);
        -: 8401:              break;
        -: 8402:
        -: 8403:            case 's':
        -: 8404:              laststart = b;
        -: 8405:              PATFETCH (c);
        -: 8406:              BUF_PUSH_2 (syntaxspec, syntax_spec_code[c]);
        -: 8407:              break;
        -: 8408:
        -: 8409:            case 'S':
        -: 8410:              laststart = b;
        -: 8411:              PATFETCH (c);
        -: 8412:              BUF_PUSH_2 (notsyntaxspec, syntax_spec_code[c]);
        -: 8413:              break;
        -: 8414:#endif /* emacs */
        -: 8415:
        -: 8416:
        1: 8417:            case 'w':
        1: 8418:	      if (syntax & RE_NO_GNU_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 8419:		goto normal_char;
        1: 8420:              laststart = b;
       1*: 8421:              BUF_PUSH (wordchar);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 1 (fallthrough)
        1: 8422:              break;
        -: 8423:
        -: 8424:
        3: 8425:            case 'W':
        3: 8426:	      if (syntax & RE_NO_GNU_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 8427:		goto normal_char;
        3: 8428:              laststart = b;
       3*: 8429:              BUF_PUSH (notwordchar);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 3 (fallthrough)
        3: 8430:              break;
        -: 8431:
        -: 8432:
      115: 8433:            case '<':
      115: 8434:	      if (syntax & RE_NO_GNU_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 115
    #####: 8435:		goto normal_char;
     115*: 8436:              BUF_PUSH (wordbeg);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 115 (fallthrough)
      115: 8437:              break;
        -: 8438:
        2: 8439:            case '>':
        2: 8440:	      if (syntax & RE_NO_GNU_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 8441:		goto normal_char;
       2*: 8442:              BUF_PUSH (wordend);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 2 (fallthrough)
        2: 8443:              break;
        -: 8444:
      140: 8445:            case 'b':
      140: 8446:	      if (syntax & RE_NO_GNU_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 140
    #####: 8447:		goto normal_char;
     140*: 8448:              BUF_PUSH (wordbound);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 140 (fallthrough)
      140: 8449:              break;
        -: 8450:
        1: 8451:            case 'B':
        1: 8452:	      if (syntax & RE_NO_GNU_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 8453:		goto normal_char;
       1*: 8454:              BUF_PUSH (notwordbound);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 1 (fallthrough)
        1: 8455:              break;
        -: 8456:
        3: 8457:            case '`':
        3: 8458:	      if (syntax & RE_NO_GNU_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 8459:		goto normal_char;
       3*: 8460:              BUF_PUSH (begbuf);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 3 (fallthrough)
        3: 8461:              break;
        -: 8462:
        3: 8463:            case '\'':
        3: 8464:	      if (syntax & RE_NO_GNU_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 8465:		goto normal_char;
       3*: 8466:              BUF_PUSH (endbuf);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 3 (fallthrough)
        3: 8467:              break;
        -: 8468:
        9: 8469:            case '1': case '2': case '3': case '4': case '5':
        -: 8470:            case '6': case '7': case '8': case '9':
        9: 8471:              if (syntax & RE_NO_BK_REFS)
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####: 8472:                goto normal_char;
        -: 8473:
        9: 8474:              c1 = c - '0';
        -: 8475:
        9: 8476:              if (c1 > regnum)
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9: 8477:                FREE_STACK_RETURN (REG_ESUBREG);
        -: 8478:
        -: 8479:              /* Can't back reference to a subexpression if inside of it.  */
    #####: 8480:              if (group_in_compile_stack (compile_stack, (regnum_t) c1))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8481:                goto normal_char;
        -: 8482:
    #####: 8483:              laststart = b;
    #####: 8484:              BUF_PUSH_2 (duplicate, c1);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 8485:              break;
        -: 8486:
        -: 8487:
      211: 8488:            case '+':
        -: 8489:            case '?':
      211: 8490:              if (syntax & RE_BK_PLUS_QM)
branch  0 taken 176 (fallthrough)
branch  1 taken 35
      176: 8491:                goto handle_plus;
        -: 8492:              else
       35: 8493:                goto normal_backslash;
        -: 8494:
        -: 8495:            default:
      220: 8496:            normal_backslash:
        -: 8497:              /* You might think it would be useful for \ to mean
        -: 8498:                 not to translate; but if we don't translate it
        -: 8499:                 it will never match anything.  */
     220*: 8500:              c = TRANSLATE (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 220
      220: 8501:              goto normal_char;
        -: 8502:            }
     2821: 8503:          break;
        -: 8504:
        -: 8505:
        -: 8506:	default:
        -: 8507:        /* Expects the character in `c'.  */
    49737: 8508:	normal_char:
        -: 8509:	      /* If no exactn currently being built.  */
    49737: 8510:          if (!pending_exact
branch  0 taken 46198 (fallthrough)
branch  1 taken 3539
        -: 8511:
        -: 8512:              /* If last exactn not at current position.  */
    46198: 8513:              || pending_exact + *pending_exact + 1 != b
branch  0 taken 45836 (fallthrough)
branch  1 taken 362
        -: 8514:
        -: 8515:              /* We have only one byte following the exactn for the count.  */
    45836: 8516:	      || *pending_exact == (1 << BYTEWIDTH) - 1
branch  0 taken 45836 (fallthrough)
branch  1 taken 0
        -: 8517:
        -: 8518:              /* If followed by a repetition operator.  */
    45836: 8519:              || *p == '*' || *p == '^'
branch  0 taken 45497 (fallthrough)
branch  1 taken 339
branch  2 taken 45496 (fallthrough)
branch  3 taken 1
    90992: 8520:	      || ((syntax & RE_BK_PLUS_QM)
branch  0 taken 44114 (fallthrough)
branch  1 taken 1382
branch  2 taken 43998
branch  3 taken 116
branch  4 taken 1285 (fallthrough)
branch  5 taken 97
    44114: 8521:		  ? *p == '\\' && (p[1] == '+' || p[1] == '?')
branch  0 taken 311 (fallthrough)
branch  1 taken 43803
branch  2 taken 253 (fallthrough)
branch  3 taken 58
branch  4 taken 58 (fallthrough)
branch  5 taken 195
     1382: 8522:		  : (*p == '+' || *p == '?'))
branch  0 taken 1334 (fallthrough)
branch  1 taken 48
branch  2 taken 49 (fallthrough)
branch  3 taken 1285
    45283: 8523:	      || ((syntax & RE_INTERVALS)
branch  0 taken 45283 (fallthrough)
branch  1 taken 0
    89281: 8524:                  && ((syntax & RE_NO_BK_BRACES)
branch  0 taken 1285 (fallthrough)
branch  1 taken 43998
branch  2 taken 55 (fallthrough)
branch  3 taken 43943
     1285: 8525:		      ? *p == '{'
branch  0 taken 48
branch  1 taken 1237
    43998: 8526:                      : (p[0] == '\\' && p[1] == '{'))))
branch  0 taken 195 (fallthrough)
branch  1 taken 43803
branch  2 taken 55 (fallthrough)
branch  3 taken 140
        -: 8527:	    {
        -: 8528:	      /* Start building a new exactn.  */
        -: 8529:
     4557: 8530:              laststart = b;
        -: 8531:
    4602*: 8532:	      BUF_PUSH_2 (exactn, 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 45
branch  2 taken 0 (fallthrough)
branch  3 taken 45
branch  4 taken 0 (fallthrough)
branch  5 taken 45
branch  6 taken 0 (fallthrough)
branch  7 taken 45
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 45
branch 15 taken 4557 (fallthrough)
     4557: 8533:	      pending_exact = b - 1;
        -: 8534:            }
        -: 8535:
   49859*: 8536:	  BUF_PUSH (c);
branch  0 taken 1 (fallthrough)
branch  1 taken 122
branch  2 taken 0 (fallthrough)
branch  3 taken 122
branch  4 taken 0 (fallthrough)
branch  5 taken 122
branch  6 taken 0 (fallthrough)
branch  7 taken 122
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 123
branch 15 taken 49736 (fallthrough)
    49736: 8537:          (*pending_exact)++;
    49736: 8538:	  break;
        -: 8539:        } /* switch (c) */
        -: 8540:    } /* while p != pend */
        -: 8541:
        -: 8542:
        -: 8543:  /* Through the pattern now.  */
        -: 8544:
      725: 8545:  if (fixup_alt_jump)
branch  0 taken 239 (fallthrough)
branch  1 taken 486
      239: 8546:    STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
call    0 returned 239
        -: 8547:
      725: 8548:  if (!COMPILE_STACK_EMPTY)
branch  0 taken 3 (fallthrough)
branch  1 taken 722
        3: 8549:    FREE_STACK_RETURN (REG_EPAREN);
        -: 8550:
        -: 8551:  /* If we don't want backtracking, force success
        -: 8552:     the first time we reach the end of the compiled pattern.  */
      722: 8553:  if (syntax & RE_NO_POSIX_BACKTRACKING)
branch  0 taken 0 (fallthrough)
branch  1 taken 722
    #####: 8554:    BUF_PUSH (succeed);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -: 8555:
      722: 8556:  free (compile_stack.stack);
        -: 8557:
        -: 8558:  /* We have succeeded; set the length of the buffer.  */
      722: 8559:  bufp->used = b - bufp->buffer;
        -: 8560:
        -: 8561:#ifdef DEBUG
        -: 8562:  if (debug)
        -: 8563:    {
        -: 8564:      DEBUG_PRINT1 ("\nCompiled pattern: \n");
        -: 8565:      print_compiled_pattern (bufp);
        -: 8566:    }
        -: 8567:#endif /* DEBUG */
        -: 8568:
        -: 8569:#ifndef MATCH_MAY_ALLOCATE
        -: 8570:  /* Initialize the failure stack to the largest possible stack.  This
        -: 8571:     isn't necessary unless we're trying to avoid calling alloca in
        -: 8572:     the search and match routines.  */
        -: 8573:  {
        -: 8574:    int num_regs = bufp->re_nsub + 1;
        -: 8575:
        -: 8576:    /* Since DOUBLE_FAIL_STACK refuses to double only if the current size
        -: 8577:       is strictly greater than re_max_failures, the largest possible stack
        -: 8578:       is 2 * re_max_failures failure points.  */
        -: 8579:    if (fail_stack.size < (2 * re_max_failures * MAX_FAILURE_ITEMS))
        -: 8580:      {
        -: 8581:	fail_stack.size = (2 * re_max_failures * MAX_FAILURE_ITEMS);
        -: 8582:
        -: 8583:# ifdef emacs
        -: 8584:	if (! fail_stack.stack)
        -: 8585:	  fail_stack.stack
        -: 8586:	    = (fail_stack_elt_t *) xmalloc (fail_stack.size
        -: 8587:					    * sizeof (fail_stack_elt_t));
        -: 8588:	else
        -: 8589:	  fail_stack.stack
        -: 8590:	    = (fail_stack_elt_t *) xrealloc (fail_stack.stack,
        -: 8591:					     (fail_stack.size
        -: 8592:					      * sizeof (fail_stack_elt_t)));
        -: 8593:# else /* not emacs */
        -: 8594:	if (! fail_stack.stack)
        -: 8595:	  fail_stack.stack
        -: 8596:	    = (fail_stack_elt_t *) malloc (fail_stack.size
        -: 8597:					   * sizeof (fail_stack_elt_t));
        -: 8598:	else
        -: 8599:	  fail_stack.stack
        -: 8600:	    = (fail_stack_elt_t *) realloc (fail_stack.stack,
        -: 8601:					    (fail_stack.size
        -: 8602:					     * sizeof (fail_stack_elt_t)));
        -: 8603:# endif /* not emacs */
        -: 8604:      }
        -: 8605:
        -: 8606:    regex_grow_registers (num_regs);
        -: 8607:  }
        -: 8608:#endif /* not MATCH_MAY_ALLOCATE */
        -: 8609:
      722: 8610:  return REG_NOERROR;
        -: 8611:} /* regex_compile */
        -: 8612:
        -: 8613:/* Subroutines for `regex_compile'.  */
        -: 8614:
        -: 8615:/* Store OP at LOC followed by two-byte integer parameter ARG.  */
        -: 8616:
        -: 8617:static void
function store_op1 called 5872 returned 100% blocks executed 100%
     5872: 8618:store_op1 (op, loc, arg)
        -: 8619:    re_opcode_t op;
        -: 8620:    unsigned char *loc;
        -: 8621:    int arg;
        -: 8622:{
     5872: 8623:  *loc = (unsigned char) op;
     5872: 8624:  STORE_NUMBER (loc + 1, arg);
     5872: 8625:}
        -: 8626:
        -: 8627:
        -: 8628:/* Like `store_op1', but for two two-byte parameters ARG1 and ARG2.  */
        -: 8629:
        -: 8630:static void
function store_op2 called 370 returned 100% blocks executed 100%
      370: 8631:store_op2 (op, loc, arg1, arg2)
        -: 8632:    re_opcode_t op;
        -: 8633:    unsigned char *loc;
        -: 8634:    int arg1, arg2;
        -: 8635:{
      370: 8636:  *loc = (unsigned char) op;
      370: 8637:  STORE_NUMBER (loc + 1, arg1);
      370: 8638:  STORE_NUMBER (loc + 3, arg2);
      370: 8639:}
        -: 8640:
        -: 8641:
        -: 8642:/* Copy the bytes from LOC to END to open up three bytes of space at LOC
        -: 8643:   for OP followed by two-byte integer parameter ARG.  */
        -: 8644:
        -: 8645:static void
function insert_op1 called 3092 returned 100% blocks executed 100%
     3092: 8646:insert_op1 (op, loc, arg, end)
        -: 8647:    re_opcode_t op;
        -: 8648:    unsigned char *loc;
        -: 8649:    int arg;
        -: 8650:    unsigned char *end;
        -: 8651:{
     3092: 8652:  register unsigned char *pfrom = end;
     3092: 8653:  register unsigned char *pto = end + 3;
        -: 8654:
    67033: 8655:  while (pfrom != loc)
branch  0 taken 63941
branch  1 taken 3092 (fallthrough)
    63941: 8656:    *--pto = *--pfrom;
        -: 8657:
     3092: 8658:  store_op1 (op, loc, arg);
call    0 returned 3092
     3092: 8659:}
        -: 8660:
        -: 8661:
        -: 8662:/* Like `insert_op1', but for two two-byte parameters ARG1 and ARG2.  */
        -: 8663:
        -: 8664:static void
function insert_op2 called 362 returned 100% blocks executed 100%
      362: 8665:insert_op2 (op, loc, arg1, arg2, end)
        -: 8666:    re_opcode_t op;
        -: 8667:    unsigned char *loc;
        -: 8668:    int arg1, arg2;
        -: 8669:    unsigned char *end;
        -: 8670:{
      362: 8671:  register unsigned char *pfrom = end;
      362: 8672:  register unsigned char *pto = end + 5;
        -: 8673:
     2662: 8674:  while (pfrom != loc)
branch  0 taken 2300
branch  1 taken 362 (fallthrough)
     2300: 8675:    *--pto = *--pfrom;
        -: 8676:
      362: 8677:  store_op2 (op, loc, arg1, arg2);
call    0 returned 362
      362: 8678:}
        -: 8679:
        -: 8680:
        -: 8681:/* P points to just after a ^ in PATTERN.  Return true if that ^ comes
        -: 8682:   after an alternative or a begin-subexpression.  We assume there is at
        -: 8683:   least one character before the ^.  */
        -: 8684:
        -: 8685:static boolean
function at_begline_loc_p called 28 returned 100% blocks executed 100%
       28: 8686:at_begline_loc_p (pattern, p, syntax)
        -: 8687:    const char *pattern, *p;
        -: 8688:    reg_syntax_t syntax;
        -: 8689:{
       28: 8690:  const char *prev = p - 2;
       28: 8691:  boolean prev_prev_backslash = prev > pattern && prev[-1] == '\\';
branch  0 taken 28 (fallthrough)
branch  1 taken 0
branch  2 taken 27 (fallthrough)
branch  3 taken 1
        -: 8692:
        -: 8693:  return
        -: 8694:       /* After a subexpression?  */
        6: 8695:       (*prev == '(' && (syntax & RE_NO_BK_PARENS || prev_prev_backslash))
branch  0 taken 6 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 6
        -: 8696:       /* After an alternative?  */
       34: 8697:    || (*prev == '|' && (syntax & RE_NO_BK_VBAR || prev_prev_backslash));
branch  0 taken 6 (fallthrough)
branch  1 taken 22
branch  2 taken 20 (fallthrough)
branch  3 taken 2
branch  4 taken 20 (fallthrough)
branch  5 taken 0
branch  6 taken 20 (fallthrough)
branch  7 taken 0
        -: 8698:}
        -: 8699:
        -: 8700:
        -: 8701:/* The dual of at_begline_loc_p.  This one is for $.  We assume there is
        -: 8702:   at least one character after the $, i.e., `P < PEND'.  */
        -: 8703:
        -: 8704:static boolean
function at_endline_loc_p called 5 returned 100% blocks executed 61%
        5: 8705:at_endline_loc_p (p, pend, syntax)
        -: 8706:    const char *p, *pend;
        -: 8707:    reg_syntax_t syntax;
        -: 8708:{
        5: 8709:  const char *next = p;
        5: 8710:  boolean next_backslash = *next == '\\';
        5: 8711:  const char *next_next = p + 1 < pend ? p + 1 : 0;
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        -: 8712:
        -: 8713:  return
        -: 8714:       /* Before a subexpression?  */
       5*: 8715:       (syntax & RE_NO_BK_PARENS ? *next == ')'
       5*: 8716:        : next_backslash && next_next && *next_next == ')')
branch  0 taken 0 (fallthrough)
branch  1 taken 5
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 8717:       /* Before an alternative?  */
      15*: 8718:    || (syntax & RE_NO_BK_VBAR ? *next == '|'
branch  0 taken 0 (fallthrough)
branch  1 taken 5
branch  2 never executed
branch  3 never executed
branch  4 taken 5 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 5
branch  8 never executed
branch  9 never executed
branch 10 taken 0 (fallthrough)
branch 11 taken 5
       5*: 8719:        : next_backslash && next_next && *next_next == '|');
branch  0 taken 0 (fallthrough)
branch  1 taken 5
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 8720:}
        -: 8721:
        -: 8722:
        -: 8723:/* Returns true if REGNUM is in one of COMPILE_STACK's elements and
        -: 8724:   false if it's not.  */
        -: 8725:
        -: 8726:static boolean
function group_in_compile_stack called 0 returned 0% blocks executed 0%
    #####: 8727:group_in_compile_stack (compile_stack, regnum)
        -: 8728:    compile_stack_type compile_stack;
        -: 8729:    regnum_t regnum;
        -: 8730:{
        -: 8731:  int this_element;
        -: 8732:
    #####: 8733:  for (this_element = compile_stack.avail - 1;
    #####: 8734:       this_element >= 0;
branch  0 never executed
branch  1 never executed
    #####: 8735:       this_element--)
    #####: 8736:    if (compile_stack.stack[this_element].regnum == regnum)
branch  0 never executed
branch  1 never executed
    #####: 8737:      return true;
        -: 8738:
    #####: 8739:  return false;
        -: 8740:}
        -: 8741:
        -: 8742:
        -: 8743:/* Read the ending character of a range (in a bracket expression) from the
        -: 8744:   uncompiled pattern *P_PTR (which ends at PEND).  We assume the
        -: 8745:   starting character is in `P[-2]'.  (`P[-1]' is the character `-'.)
        -: 8746:   Then we set the translation of all bits between the starting and
        -: 8747:   ending characters (inclusive) in the compiled pattern B.
        -: 8748:
        -: 8749:   Return an error code.
        -: 8750:
        -: 8751:   We use these short variable names so we can use the same macros as
        -: 8752:   `regex_compile' itself.  */
        -: 8753:
        -: 8754:static reg_errcode_t
function compile_range called 40 returned 100% blocks executed 81%
       40: 8755:compile_range (p_ptr, pend, translate, syntax, b)
        -: 8756:    const char **p_ptr, *pend;
        -: 8757:    RE_TRANSLATE_TYPE translate;
        -: 8758:    reg_syntax_t syntax;
        -: 8759:    unsigned char *b;
        -: 8760:{
        -: 8761:  unsigned this_char;
        -: 8762:
       40: 8763:  const char *p = *p_ptr;
        -: 8764:  unsigned int range_start, range_end;
        -: 8765:
       40: 8766:  if (p == pend)
branch  0 taken 6 (fallthrough)
branch  1 taken 34
        6: 8767:    return REG_ERANGE;
        -: 8768:
        -: 8769:  /* Even though the pattern is a signed `char *', we need to fetch
        -: 8770:     with unsigned char *'s; if the high bit of the pattern character
        -: 8771:     is set, the range endpoints will be negative if we fetch using a
        -: 8772:     signed char *.
        -: 8773:
        -: 8774:     We also want to fetch the endpoints without translating them; the
        -: 8775:     appropriate translation is done in the bit-setting loop below.  */
        -: 8776:  /* The SVR4 compiler on the 3B2 had trouble with unsigned const char *.  */
       34: 8777:  range_start = ((const unsigned char *) p)[-2];
       34: 8778:  range_end   = ((const unsigned char *) p)[0];
        -: 8779:
        -: 8780:  /* Have to increment the pointer into the pattern string, so the
        -: 8781:     caller isn't still at the ending character.  */
       34: 8782:  (*p_ptr)++;
        -: 8783:
        -: 8784:  /* If the start is after the end, the range is empty.  */
       34: 8785:  if (range_start > range_end)
branch  0 taken 4 (fallthrough)
branch  1 taken 30
       4*: 8786:    return syntax & RE_NO_EMPTY_RANGES ? REG_ERANGE : REG_NOERROR;
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -: 8787:
        -: 8788:  /* Here we see why `this_char' has to be larger than an `unsigned
        -: 8789:     char' -- the range is inclusive, so if `range_end' == 0xff
        -: 8790:     (assuming 8-bit characters), we would otherwise go into an infinite
        -: 8791:     loop, since all characters <= 0xff.  */
      436: 8792:  for (this_char = range_start; this_char <= range_end; this_char++)
branch  0 taken 406
branch  1 taken 30 (fallthrough)
        -: 8793:    {
     406*: 8794:      SET_LIST_BIT (TRANSLATE (this_char));
branch  0 taken 0 (fallthrough)
branch  1 taken 406
branch  2 taken 0 (fallthrough)
branch  3 taken 406
branch  4 taken 0 (fallthrough)
branch  5 taken 406
        -: 8795:    }
        -: 8796:
       30: 8797:  return REG_NOERROR;
        -: 8798:}
        -: 8799:
        -: 8800:/* re_compile_fastmap computes a ``fastmap'' for the compiled pattern in
        -: 8801:   BUFP.  A fastmap records which of the (1 << BYTEWIDTH) possible
        -: 8802:   characters can start a string that matches the pattern.  This fastmap
        -: 8803:   is used by re_search to skip quickly over impossible starting points.
        -: 8804:
        -: 8805:   The caller must supply the address of a (1 << BYTEWIDTH)-byte data
        -: 8806:   area as BUFP->fastmap.
        -: 8807:
        -: 8808:   We set the `fastmap', `fastmap_accurate', and `can_be_null' fields in
        -: 8809:   the pattern buffer.
        -: 8810:
        -: 8811:   Returns 0 if we succeed, -2 if an internal error.   */
        -: 8812:
        -: 8813:int
function re_compile_fastmap called 0 returned 0% blocks executed 0%
    #####: 8814:re_compile_fastmap (bufp)
        -: 8815:     struct re_pattern_buffer *bufp;
        -: 8816:{
        -: 8817:  int j, k;
        -: 8818:#ifdef MATCH_MAY_ALLOCATE
        -: 8819:  fail_stack_type fail_stack;
        -: 8820:#endif
        -: 8821:#ifndef REGEX_MALLOC
        -: 8822:  char *destination;
        -: 8823:#endif
        -: 8824:
    #####: 8825:  register char *fastmap = bufp->fastmap;
    #####: 8826:  unsigned char *pattern = bufp->buffer;
    #####: 8827:  unsigned char *p = pattern;
    #####: 8828:  register unsigned char *pend = pattern + bufp->used;
        -: 8829:
        -: 8830:#ifdef REL_ALLOC
        -: 8831:  /* This holds the pointer to the failure stack, when
        -: 8832:     it is allocated relocatably.  */
        -: 8833:  fail_stack_elt_t *failure_stack_ptr;
        -: 8834:#endif
        -: 8835:
        -: 8836:  /* Assume that each path through the pattern can be null until
        -: 8837:     proven otherwise.  We set this false at the bottom of switch
        -: 8838:     statement, to which we get only if a particular path doesn't
        -: 8839:     match the empty string.  */
    #####: 8840:  boolean path_can_be_null = true;
        -: 8841:
        -: 8842:  /* We aren't doing a `succeed_n' to begin with.  */
    #####: 8843:  boolean succeed_n_p = false;
        -: 8844:
        -: 8845:  assert (fastmap != NULL && p != NULL);
        -: 8846:
    #####: 8847:  INIT_FAIL_STACK ();
branch  0 never executed
branch  1 never executed
    #####: 8848:  bzero (fastmap, 1 << BYTEWIDTH);  /* Assume nothing's valid.  */
    #####: 8849:  bufp->fastmap_accurate = 1;	    /* It will be when we're done.  */
    #####: 8850:  bufp->can_be_null = 0;
        -: 8851:
        -: 8852:  while (1)
        -: 8853:    {
    #####: 8854:      if (p == pend || *p == succeed)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 8855:	{
        -: 8856:	  /* We have reached the (effective) end of pattern.  */
    #####: 8857:	  if (!FAIL_STACK_EMPTY ())
branch  0 never executed
branch  1 never executed
        -: 8858:	    {
    #####: 8859:	      bufp->can_be_null |= path_can_be_null;
        -: 8860:
        -: 8861:	      /* Reset for next path.  */
    #####: 8862:	      path_can_be_null = true;
        -: 8863:
    #####: 8864:	      p = fail_stack.stack[--fail_stack.avail].pointer;
        -: 8865:
    #####: 8866:	      continue;
        -: 8867:	    }
        -: 8868:	  else
    #####: 8869:	    break;
        -: 8870:	}
        -: 8871:
        -: 8872:      /* We should never be about to go beyond the end of the pattern.  */
        -: 8873:      assert (p < pend);
        -: 8874:
    #####: 8875:      switch (SWITCH_ENUM_CAST ((re_opcode_t) *p++))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
        -: 8876:	{
        -: 8877:
        -: 8878:        /* I guess the idea here is to simply not bother with a fastmap
        -: 8879:           if a backreference is used, since it's too hard to figure out
        -: 8880:           the fastmap for the corresponding group.  Setting
        -: 8881:           `can_be_null' stops `re_search_2' from using the fastmap, so
        -: 8882:           that is all we do.  */
    #####: 8883:	case duplicate:
    #####: 8884:	  bufp->can_be_null = 1;
    #####: 8885:          goto done;
        -: 8886:
        -: 8887:
        -: 8888:      /* Following are the cases which match a character.  These end
        -: 8889:         with `break'.  */
        -: 8890:
    #####: 8891:	case exactn:
    #####: 8892:          fastmap[p[1]] = 1;
    #####: 8893:	  break;
        -: 8894:
        -: 8895:
    #####: 8896:        case charset:
    #####: 8897:          for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
branch  0 never executed
branch  1 never executed
    #####: 8898:	    if (p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH)))
branch  0 never executed
branch  1 never executed
    #####: 8899:              fastmap[j] = 1;
    #####: 8900:	  break;
        -: 8901:
        -: 8902:
    #####: 8903:	case charset_not:
        -: 8904:	  /* Chars beyond end of map must be allowed.  */
    #####: 8905:	  for (j = *p * BYTEWIDTH; j < (1 << BYTEWIDTH); j++)
branch  0 never executed
branch  1 never executed
    #####: 8906:            fastmap[j] = 1;
        -: 8907:
    #####: 8908:	  for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
branch  0 never executed
branch  1 never executed
    #####: 8909:	    if (!(p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH))))
branch  0 never executed
branch  1 never executed
    #####: 8910:              fastmap[j] = 1;
    #####: 8911:          break;
        -: 8912:
        -: 8913:
    #####: 8914:	case wordchar:
    #####: 8915:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
branch  0 never executed
branch  1 never executed
    #####: 8916:	    if (SYNTAX (j) == Sword)
branch  0 never executed
branch  1 never executed
    #####: 8917:	      fastmap[j] = 1;
    #####: 8918:	  break;
        -: 8919:
        -: 8920:
    #####: 8921:	case notwordchar:
    #####: 8922:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
branch  0 never executed
branch  1 never executed
    #####: 8923:	    if (SYNTAX (j) != Sword)
branch  0 never executed
branch  1 never executed
    #####: 8924:	      fastmap[j] = 1;
    #####: 8925:	  break;
        -: 8926:
        -: 8927:
    #####: 8928:        case anychar:
        -: 8929:	  {
    #####: 8930:	    int fastmap_newline = fastmap['\n'];
        -: 8931:
        -: 8932:	    /* `.' matches anything ...  */
    #####: 8933:	    for (j = 0; j < (1 << BYTEWIDTH); j++)
branch  0 never executed
branch  1 never executed
    #####: 8934:	      fastmap[j] = 1;
        -: 8935:
        -: 8936:	    /* ... except perhaps newline.  */
    #####: 8937:	    if (!(bufp->syntax & RE_DOT_NEWLINE))
branch  0 never executed
branch  1 never executed
    #####: 8938:	      fastmap['\n'] = fastmap_newline;
        -: 8939:
        -: 8940:	    /* Return if we have already set `can_be_null'; if we have,
        -: 8941:	       then the fastmap is irrelevant.  Something's wrong here.  */
    #####: 8942:	    else if (bufp->can_be_null)
branch  0 never executed
branch  1 never executed
    #####: 8943:	      goto done;
        -: 8944:
        -: 8945:	    /* Otherwise, have to check alternative paths.  */
    #####: 8946:	    break;
        -: 8947:	  }
        -: 8948:
        -: 8949:#ifdef emacs
        -: 8950:        case syntaxspec:
        -: 8951:	  k = *p++;
        -: 8952:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
        -: 8953:	    if (SYNTAX (j) == (enum syntaxcode) k)
        -: 8954:	      fastmap[j] = 1;
        -: 8955:	  break;
        -: 8956:
        -: 8957:
        -: 8958:	case notsyntaxspec:
        -: 8959:	  k = *p++;
        -: 8960:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
        -: 8961:	    if (SYNTAX (j) != (enum syntaxcode) k)
        -: 8962:	      fastmap[j] = 1;
        -: 8963:	  break;
        -: 8964:
        -: 8965:
        -: 8966:      /* All cases after this match the empty string.  These end with
        -: 8967:         `continue'.  */
        -: 8968:
        -: 8969:
        -: 8970:	case before_dot:
        -: 8971:	case at_dot:
        -: 8972:	case after_dot:
        -: 8973:          continue;
        -: 8974:#endif /* emacs */
        -: 8975:
        -: 8976:
    #####: 8977:        case no_op:
        -: 8978:        case begline:
        -: 8979:        case endline:
        -: 8980:	case begbuf:
        -: 8981:	case endbuf:
        -: 8982:	case wordbound:
        -: 8983:	case notwordbound:
        -: 8984:	case wordbeg:
        -: 8985:	case wordend:
        -: 8986:        case push_dummy_failure:
    #####: 8987:          continue;
        -: 8988:
        -: 8989:
    #####: 8990:	case jump_n:
        -: 8991:        case pop_failure_jump:
        -: 8992:	case maybe_pop_jump:
        -: 8993:	case jump:
        -: 8994:        case jump_past_alt:
        -: 8995:	case dummy_failure_jump:
    #####: 8996:          EXTRACT_NUMBER_AND_INCR (j, p);
    #####: 8997:	  p += j;
    #####: 8998:	  if (j > 0)
branch  0 never executed
branch  1 never executed
    #####: 8999:	    continue;
        -: 9000:
        -: 9001:          /* Jump backward implies we just went through the body of a
        -: 9002:             loop and matched nothing.  Opcode jumped to should be
        -: 9003:             `on_failure_jump' or `succeed_n'.  Just treat it like an
        -: 9004:             ordinary jump.  For a * loop, it has pushed its failure
        -: 9005:             point already; if so, discard that as redundant.  */
    #####: 9006:          if ((re_opcode_t) *p != on_failure_jump
branch  0 never executed
branch  1 never executed
    #####: 9007:	      && (re_opcode_t) *p != succeed_n)
branch  0 never executed
branch  1 never executed
    #####: 9008:	    continue;
        -: 9009:
    #####: 9010:          p++;
    #####: 9011:          EXTRACT_NUMBER_AND_INCR (j, p);
    #####: 9012:          p += j;
        -: 9013:
        -: 9014:          /* If what's on the stack is where we are now, pop it.  */
    #####: 9015:          if (!FAIL_STACK_EMPTY ()
branch  0 never executed
branch  1 never executed
    #####: 9016:	      && fail_stack.stack[fail_stack.avail - 1].pointer == p)
branch  0 never executed
branch  1 never executed
    #####: 9017:            fail_stack.avail--;
        -: 9018:
    #####: 9019:          continue;
        -: 9020:
        -: 9021:
        -: 9022:        case on_failure_jump:
        -: 9023:        case on_failure_keep_string_jump:
    #####: 9024:	handle_on_failure_jump:
    #####: 9025:          EXTRACT_NUMBER_AND_INCR (j, p);
        -: 9026:
        -: 9027:          /* For some patterns, e.g., `(a?)?', `p+j' here points to the
        -: 9028:             end of the pattern.  We don't want to push such a point,
        -: 9029:             since when we restore it above, entering the switch will
        -: 9030:             increment `p' past the end of the pattern.  We don't need
        -: 9031:             to push such a point since we obviously won't find any more
        -: 9032:             fastmap entries beyond `pend'.  Such a pattern can match
        -: 9033:             the null string, though.  */
    #####: 9034:          if (p + j < pend)
branch  0 never executed
branch  1 never executed
        -: 9035:            {
    #####: 9036:              if (!PUSH_PATTERN_OP (p + j, fail_stack))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 9037:		{
        -: 9038:		  RESET_FAIL_STACK ();
    #####: 9039:		  return -2;
        -: 9040:		}
        -: 9041:            }
        -: 9042:          else
    #####: 9043:            bufp->can_be_null = 1;
        -: 9044:
    #####: 9045:          if (succeed_n_p)
branch  0 never executed
branch  1 never executed
        -: 9046:            {
    #####: 9047:              EXTRACT_NUMBER_AND_INCR (k, p);	/* Skip the n.  */
    #####: 9048:              succeed_n_p = false;
        -: 9049:	    }
        -: 9050:
    #####: 9051:          continue;
        -: 9052:
        -: 9053:
    #####: 9054:	case succeed_n:
        -: 9055:          /* Get to the number of times to succeed.  */
    #####: 9056:          p += 2;
        -: 9057:
        -: 9058:          /* Increment p past the n for when k != 0.  */
    #####: 9059:          EXTRACT_NUMBER_AND_INCR (k, p);
    #####: 9060:          if (k == 0)
branch  0 never executed
branch  1 never executed
        -: 9061:	    {
    #####: 9062:              p -= 4;
    #####: 9063:  	      succeed_n_p = true;  /* Spaghetti code alert.  */
    #####: 9064:              goto handle_on_failure_jump;
        -: 9065:            }
    #####: 9066:          continue;
        -: 9067:
        -: 9068:
    #####: 9069:	case set_number_at:
    #####: 9070:          p += 4;
    #####: 9071:          continue;
        -: 9072:
        -: 9073:
    #####: 9074:	case start_memory:
        -: 9075:        case stop_memory:
    #####: 9076:	  p += 2;
    #####: 9077:	  continue;
        -: 9078:
        -: 9079:
    #####: 9080:	default:
    #####: 9081:          abort (); /* We have listed all the cases.  */
call    0 never executed
        -: 9082:        } /* switch *p++ */
        -: 9083:
        -: 9084:      /* Getting here means we have found the possible starting
        -: 9085:         characters for one path of the pattern -- and that the empty
        -: 9086:         string does not match.  We need not follow this path further.
        -: 9087:         Instead, look at the next alternative (remembered on the
        -: 9088:         stack), or quit if no more.  The test at the top of the loop
        -: 9089:         does these things.  */
    #####: 9090:      path_can_be_null = false;
    #####: 9091:      p = pend;
        -: 9092:    } /* while p */
        -: 9093:
        -: 9094:  /* Set `can_be_null' for the last path (also the first path, if the
        -: 9095:     pattern is empty).  */
    #####: 9096:  bufp->can_be_null |= path_can_be_null;
        -: 9097:
    #####: 9098: done:
        -: 9099:  RESET_FAIL_STACK ();
    #####: 9100:  return 0;
        -: 9101:} /* re_compile_fastmap */
        -: 9102:#ifdef _LIBC
        -: 9103:weak_alias (__re_compile_fastmap, re_compile_fastmap)
        -: 9104:#endif
        -: 9105:
        -: 9106:/* Set REGS to hold NUM_REGS registers, storing them in STARTS and
        -: 9107:   ENDS.  Subsequent matches using PATTERN_BUFFER and REGS will use
        -: 9108:   this memory for recording register information.  STARTS and ENDS
        -: 9109:   must be allocated using the malloc library routine, and must each
        -: 9110:   be at least NUM_REGS * sizeof (regoff_t) bytes long.
        -: 9111:
        -: 9112:   If NUM_REGS == 0, then subsequent matches should allocate their own
        -: 9113:   register data.
        -: 9114:
        -: 9115:   Unless this function is called, the first search or match using
        -: 9116:   PATTERN_BUFFER will allocate its own register data, without
        -: 9117:   freeing the old data.  */
        -: 9118:
        -: 9119:void
function re_set_registers called 0 returned 0% blocks executed 0%
    #####: 9120:re_set_registers (bufp, regs, num_regs, starts, ends)
        -: 9121:    struct re_pattern_buffer *bufp;
        -: 9122:    struct re_registers *regs;
        -: 9123:    unsigned num_regs;
        -: 9124:    regoff_t *starts, *ends;
        -: 9125:{
    #####: 9126:  if (num_regs)
branch  0 never executed
branch  1 never executed
        -: 9127:    {
    #####: 9128:      bufp->regs_allocated = REGS_REALLOCATE;
    #####: 9129:      regs->num_regs = num_regs;
    #####: 9130:      regs->start = starts;
    #####: 9131:      regs->end = ends;
        -: 9132:    }
        -: 9133:  else
        -: 9134:    {
    #####: 9135:      bufp->regs_allocated = REGS_UNALLOCATED;
    #####: 9136:      regs->num_regs = 0;
    #####: 9137:      regs->start = regs->end = (regoff_t *) 0;
        -: 9138:    }
    #####: 9139:}
        -: 9140:#ifdef _LIBC
        -: 9141:weak_alias (__re_set_registers, re_set_registers)
        -: 9142:#endif
        -: 9143:
        -: 9144:/* Searching routines.  */
        -: 9145:
        -: 9146:/* Like re_search_2, below, but only one string is specified, and
        -: 9147:   doesn't let you say where to stop matching. */
        -: 9148:
        -: 9149:int
function re_search called 0 returned 0% blocks executed 0%
    #####: 9150:re_search (bufp, string, size, startpos, range, regs)
        -: 9151:     struct re_pattern_buffer *bufp;
        -: 9152:     const char *string;
        -: 9153:     int size, startpos, range;
        -: 9154:     struct re_registers *regs;
        -: 9155:{
    #####: 9156:  return re_search_2 (bufp, NULL, 0, string, size, startpos, range,
call    0 never executed
        -: 9157:		      regs, size);
        -: 9158:}
        -: 9159:#ifdef _LIBC
        -: 9160:weak_alias (__re_search, re_search)
        -: 9161:#endif
        -: 9162:
        -: 9163:
        -: 9164:/* Using the compiled pattern in BUFP->buffer, first tries to match the
        -: 9165:   virtual concatenation of STRING1 and STRING2, starting first at index
        -: 9166:   STARTPOS, then at STARTPOS + 1, and so on.
        -: 9167:
        -: 9168:   STRING1 and STRING2 have length SIZE1 and SIZE2, respectively.
        -: 9169:
        -: 9170:   RANGE is how far to scan while trying to match.  RANGE = 0 means try
        -: 9171:   only at STARTPOS; in general, the last start tried is STARTPOS +
        -: 9172:   RANGE.
        -: 9173:
        -: 9174:   In REGS, return the indices of the virtual concatenation of STRING1
        -: 9175:   and STRING2 that matched the entire BUFP->buffer and its contained
        -: 9176:   subexpressions.
        -: 9177:
        -: 9178:   Do not consider matching one past the index STOP in the virtual
        -: 9179:   concatenation of STRING1 and STRING2.
        -: 9180:
        -: 9181:   We return either the position in the strings at which the match was
        -: 9182:   found, -1 if no match, or -2 if error (such as failure
        -: 9183:   stack overflow).  */
        -: 9184:
        -: 9185:int
function re_search_2 called 0 returned 0% blocks executed 0%
    #####: 9186:re_search_2 (bufp, string1, size1, string2, size2, startpos, range, regs, stop)
        -: 9187:     struct re_pattern_buffer *bufp;
        -: 9188:     const char *string1, *string2;
        -: 9189:     int size1, size2;
        -: 9190:     int startpos;
        -: 9191:     int range;
        -: 9192:     struct re_registers *regs;
        -: 9193:     int stop;
        -: 9194:{
        -: 9195:  int val;
    #####: 9196:  register char *fastmap = bufp->fastmap;
    #####: 9197:  register RE_TRANSLATE_TYPE translate = bufp->translate;
    #####: 9198:  int total_size = size1 + size2;
    #####: 9199:  int endpos = startpos + range;
        -: 9200:
        -: 9201:  /* Check for out-of-range STARTPOS.  */
    #####: 9202:  if (startpos < 0 || startpos > total_size)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9203:    return -1;
        -: 9204:
        -: 9205:  /* Fix up RANGE if it might eventually take us outside
        -: 9206:     the virtual concatenation of STRING1 and STRING2.
        -: 9207:     Make sure we won't move STARTPOS below 0 or above TOTAL_SIZE.  */
    #####: 9208:  if (endpos < 0)
branch  0 never executed
branch  1 never executed
    #####: 9209:    range = 0 - startpos;
    #####: 9210:  else if (endpos > total_size)
branch  0 never executed
branch  1 never executed
    #####: 9211:    range = total_size - startpos;
        -: 9212:
        -: 9213:  /* If the search isn't to be a backwards one, don't waste time in a
        -: 9214:     search for a pattern that must be anchored.  */
    #####: 9215:  if (bufp->used > 0 && range > 0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9216:      && ((re_opcode_t) bufp->buffer[0] == begbuf
branch  0 never executed
branch  1 never executed
        -: 9217:	  /* `begline' is like `begbuf' if it cannot match at newlines.  */
    #####: 9218:	  || ((re_opcode_t) bufp->buffer[0] == begline
branch  0 never executed
branch  1 never executed
    #####: 9219:	      && !bufp->newline_anchor)))
branch  0 never executed
branch  1 never executed
        -: 9220:    {
    #####: 9221:      if (startpos > 0)
branch  0 never executed
branch  1 never executed
    #####: 9222:	return -1;
        -: 9223:      else
    #####: 9224:	range = 1;
        -: 9225:    }
        -: 9226:
        -: 9227:#ifdef emacs
        -: 9228:  /* In a forward search for something that starts with \=.
        -: 9229:     don't keep searching past point.  */
        -: 9230:  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range > 0)
        -: 9231:    {
        -: 9232:      range = PT - startpos;
        -: 9233:      if (range <= 0)
        -: 9234:	return -1;
        -: 9235:    }
        -: 9236:#endif /* emacs */
        -: 9237:
        -: 9238:  /* Update the fastmap now if not correct already.  */
    #####: 9239:  if (fastmap && !bufp->fastmap_accurate)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9240:    if (re_compile_fastmap (bufp) == -2)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9241:      return -2;
        -: 9242:
        -: 9243:  /* Loop through the string, looking for a place to start matching.  */
        -: 9244:  for (;;)
        -: 9245:    {
        -: 9246:      /* If a fastmap is supplied, skip quickly over characters that
        -: 9247:         cannot be the start of a match.  If the pattern can match the
        -: 9248:         null string, however, we don't need to skip characters; we want
        -: 9249:         the first null string.  */
    #####: 9250:      if (fastmap && startpos < total_size && !bufp->can_be_null)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 9251:	{
    #####: 9252:	  if (range > 0)	/* Searching forwards.  */
branch  0 never executed
branch  1 never executed
        -: 9253:	    {
        -: 9254:	      register const char *d;
    #####: 9255:	      register int lim = 0;
    #####: 9256:	      int irange = range;
        -: 9257:
    #####: 9258:              if (startpos < size1 && startpos + range >= size1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9259:                lim = range - (size1 - startpos);
        -: 9260:
    #####: 9261:	      d = (startpos >= size1 ? string2 - size1 : string1) + startpos;
branch  0 never executed
branch  1 never executed
        -: 9262:
        -: 9263:              /* Written out as an if-else to avoid testing `translate'
        -: 9264:                 inside the loop.  */
    #####: 9265:	      if (translate)
branch  0 never executed
branch  1 never executed
    #####: 9266:                while (range > lim
    #####: 9267:                       && !fastmap[(unsigned char)
branch  0 never executed
branch  1 never executed
    #####: 9268:				   translate[(unsigned char) *d++]])
branch  0 never executed
branch  1 never executed
    #####: 9269:                  range--;
        -: 9270:	      else
    #####: 9271:                while (range > lim && !fastmap[(unsigned char) *d++])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9272:                  range--;
        -: 9273:
    #####: 9274:	      startpos += irange - range;
        -: 9275:	    }
        -: 9276:	  else				/* Searching backwards.  */
        -: 9277:	    {
    #####: 9278:	      register char c = (size1 == 0 || startpos >= size1
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9279:                                 ? string2[startpos - size1]
    #####: 9280:                                 : string1[startpos]);
        -: 9281:
    #####: 9282:	      if (!fastmap[(unsigned char) TRANSLATE (c)])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9283:		goto advance;
        -: 9284:	    }
        -: 9285:	}
        -: 9286:
        -: 9287:      /* If can't match the null string, and that's all we have left, fail.  */
    #####: 9288:      if (range >= 0 && startpos == total_size && fastmap
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9289:          && !bufp->can_be_null)
branch  0 never executed
branch  1 never executed
    #####: 9290:	return -1;
        -: 9291:
    #####: 9292:      val = re_match_2_internal (bufp, string1, size1, string2, size2,
call    0 never executed
        -: 9293:				 startpos, regs, stop);
        -: 9294:#ifndef REGEX_MALLOC
        -: 9295:# ifdef C_ALLOCA
        -: 9296:      alloca (0);
        -: 9297:# endif
        -: 9298:#endif
        -: 9299:
    #####: 9300:      if (val >= 0)
branch  0 never executed
branch  1 never executed
    #####: 9301:	return startpos;
        -: 9302:
    #####: 9303:      if (val == -2)
branch  0 never executed
branch  1 never executed
    #####: 9304:	return -2;
        -: 9305:
    #####: 9306:    advance:
    #####: 9307:      if (!range)
branch  0 never executed
branch  1 never executed
    #####: 9308:        break;
    #####: 9309:      else if (range > 0)
branch  0 never executed
branch  1 never executed
        -: 9310:        {
    #####: 9311:          range--;
    #####: 9312:          startpos++;
        -: 9313:        }
        -: 9314:      else
        -: 9315:        {
    #####: 9316:          range++;
    #####: 9317:          startpos--;
        -: 9318:        }
        -: 9319:    }
    #####: 9320:  return -1;
        -: 9321:} /* re_search_2 */
        -: 9322:#ifdef _LIBC
        -: 9323:weak_alias (__re_search_2, re_search_2)
        -: 9324:#endif
        -: 9325:
        -: 9326:/* This converts PTR, a pointer into one of the search strings `string1'
        -: 9327:   and `string2' into an offset from the beginning of that string.  */
        -: 9328:#define POINTER_TO_OFFSET(ptr)			\
        -: 9329:  (FIRST_STRING_P (ptr)				\
        -: 9330:   ? ((regoff_t) ((ptr) - string1))		\
        -: 9331:   : ((regoff_t) ((ptr) - string2 + size1)))
        -: 9332:
        -: 9333:/* Macros for dealing with the split strings in re_match_2.  */
        -: 9334:
        -: 9335:#define MATCHING_IN_FIRST_STRING  (dend == end_match_1)
        -: 9336:
        -: 9337:/* Call before fetching a character with *d.  This switches over to
        -: 9338:   string2 if necessary.  */
        -: 9339:#define PREFETCH()							\
        -: 9340:  while (d == dend)						    	\
        -: 9341:    {									\
        -: 9342:      /* End of string2 => fail.  */					\
        -: 9343:      if (dend == end_match_2) 						\
        -: 9344:        goto fail;							\
        -: 9345:      /* End of string1 => advance to string2.  */ 			\
        -: 9346:      d = string2;						        \
        -: 9347:      dend = end_match_2;						\
        -: 9348:    }
        -: 9349:
        -: 9350:
        -: 9351:/* Test if at very beginning or at very end of the virtual concatenation
        -: 9352:   of `string1' and `string2'.  If only one string, it's `string2'.  */
        -: 9353:#define AT_STRINGS_BEG(d) ((d) == (size1 ? string1 : string2) || !size2)
        -: 9354:#define AT_STRINGS_END(d) ((d) == end2)
        -: 9355:
        -: 9356:
        -: 9357:/* Test if D points to a character which is word-constituent.  We have
        -: 9358:   two special cases to check for: if past the end of string1, look at
        -: 9359:   the first character in string2; and if before the beginning of
        -: 9360:   string2, look at the last character in string1.  */
        -: 9361:#define WORDCHAR_P(d)							\
        -: 9362:  (SYNTAX ((d) == end1 ? *string2					\
        -: 9363:           : (d) == string2 - 1 ? *(end1 - 1) : *(d))			\
        -: 9364:   == Sword)
        -: 9365:
        -: 9366:/* Disabled due to a compiler bug -- see comment at case wordbound */
        -: 9367:#if 0
        -: 9368:/* Test if the character before D and the one at D differ with respect
        -: 9369:   to being word-constituent.  */
        -: 9370:#define AT_WORD_BOUNDARY(d)						\
        -: 9371:  (AT_STRINGS_BEG (d) || AT_STRINGS_END (d)				\
        -: 9372:   || WORDCHAR_P (d - 1) != WORDCHAR_P (d))
        -: 9373:#endif
        -: 9374:
        -: 9375:/* Free everything we malloc.  */
        -: 9376:#ifdef MATCH_MAY_ALLOCATE
        -: 9377:# define FREE_VAR(var) if (var) REGEX_FREE (var); var = NULL
        -: 9378:# define FREE_VARIABLES()						\
        -: 9379:  do {									\
        -: 9380:    REGEX_FREE_STACK (fail_stack.stack);				\
        -: 9381:    FREE_VAR (regstart);						\
        -: 9382:    FREE_VAR (regend);							\
        -: 9383:    FREE_VAR (old_regstart);						\
        -: 9384:    FREE_VAR (old_regend);						\
        -: 9385:    FREE_VAR (best_regstart);						\
        -: 9386:    FREE_VAR (best_regend);						\
        -: 9387:    FREE_VAR (reg_info);						\
        -: 9388:    FREE_VAR (reg_dummy);						\
        -: 9389:    FREE_VAR (reg_info_dummy);						\
        -: 9390:  } while (0)
        -: 9391:#else
        -: 9392:# define FREE_VARIABLES() ((void)0) /* Do nothing!  But inhibit gcc warning. */
        -: 9393:#endif /* not MATCH_MAY_ALLOCATE */
        -: 9394:
        -: 9395:/* These values must meet several constraints.  They must not be valid
        -: 9396:   register values; since we have a limit of 255 registers (because
        -: 9397:   we use only one byte in the pattern for the register number), we can
        -: 9398:   use numbers larger than 255.  They must differ by 1, because of
        -: 9399:   NUM_FAILURE_ITEMS above.  And the value for the lowest register must
        -: 9400:   be larger than the value for the highest register, so we do not try
        -: 9401:   to actually save any registers when none are active.  */
        -: 9402:#define NO_HIGHEST_ACTIVE_REG (1 << BYTEWIDTH)
        -: 9403:#define NO_LOWEST_ACTIVE_REG (NO_HIGHEST_ACTIVE_REG + 1)
        -: 9404:
        -: 9405:/* Matching routines.  */
        -: 9406:
        -: 9407:#ifndef emacs   /* Emacs never uses this.  */
        -: 9408:/* re_match is like re_match_2 except it takes only a single string.  */
        -: 9409:
        -: 9410:int
function re_match called 0 returned 0% blocks executed 0%
    #####: 9411:re_match (bufp, string, size, pos, regs)
        -: 9412:     struct re_pattern_buffer *bufp;
        -: 9413:     const char *string;
        -: 9414:     int size, pos;
        -: 9415:     struct re_registers *regs;
        -: 9416:{
    #####: 9417:  int result = re_match_2_internal (bufp, NULL, 0, string, size,
call    0 never executed
        -: 9418:				    pos, regs, size);
        -: 9419:# ifndef REGEX_MALLOC
        -: 9420:#  ifdef C_ALLOCA
        -: 9421:  alloca (0);
        -: 9422:#  endif
        -: 9423:# endif
    #####: 9424:  return result;
        -: 9425:}
        -: 9426:# ifdef _LIBC
        -: 9427:weak_alias (__re_match, re_match)
        -: 9428:# endif
        -: 9429:#endif /* not emacs */
        -: 9430:
        -: 9431:static boolean group_match_null_string_p _RE_ARGS ((unsigned char **p,
        -: 9432:						    unsigned char *end,
        -: 9433:						register_info_type *reg_info));
        -: 9434:static boolean alt_match_null_string_p _RE_ARGS ((unsigned char *p,
        -: 9435:						  unsigned char *end,
        -: 9436:						register_info_type *reg_info));
        -: 9437:static boolean common_op_match_null_string_p _RE_ARGS ((unsigned char **p,
        -: 9438:							unsigned char *end,
        -: 9439:						register_info_type *reg_info));
        -: 9440:static int bcmp_translate _RE_ARGS ((const char *s1, const char *s2,
        -: 9441:				     int len, char *translate));
        -: 9442:
        -: 9443:/* re_match_2 matches the compiled pattern in BUFP against the
        -: 9444:   the (virtual) concatenation of STRING1 and STRING2 (of length SIZE1
        -: 9445:   and SIZE2, respectively).  We start matching at POS, and stop
        -: 9446:   matching at STOP.
        -: 9447:
        -: 9448:   If REGS is non-null and the `no_sub' field of BUFP is nonzero, we
        -: 9449:   store offsets for the substring each group matched in REGS.  See the
        -: 9450:   documentation for exactly how many groups we fill.
        -: 9451:
        -: 9452:   We return -1 if no match, -2 if an internal error (such as the
        -: 9453:   failure stack overflowing).  Otherwise, we return the length of the
        -: 9454:   matched substring.  */
        -: 9455:
        -: 9456:int
function re_match_2 called 0 returned 0% blocks executed 0%
    #####: 9457:re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)
        -: 9458:     struct re_pattern_buffer *bufp;
        -: 9459:     const char *string1, *string2;
        -: 9460:     int size1, size2;
        -: 9461:     int pos;
        -: 9462:     struct re_registers *regs;
        -: 9463:     int stop;
        -: 9464:{
    #####: 9465:  int result = re_match_2_internal (bufp, string1, size1, string2, size2,
call    0 never executed
        -: 9466:				    pos, regs, stop);
        -: 9467:#ifndef REGEX_MALLOC
        -: 9468:# ifdef C_ALLOCA
        -: 9469:  alloca (0);
        -: 9470:# endif
        -: 9471:#endif
    #####: 9472:  return result;
        -: 9473:}
        -: 9474:#ifdef _LIBC
        -: 9475:weak_alias (__re_match_2, re_match_2)
        -: 9476:#endif
        -: 9477:
        -: 9478:/* This is a separate function so that we can force an alloca cleanup
        -: 9479:   afterwards.  */
        -: 9480:static int
function re_match_2_internal called 0 returned 0% blocks executed 0%
    #####: 9481:re_match_2_internal (bufp, string1, size1, string2, size2, pos, regs, stop)
        -: 9482:     struct re_pattern_buffer *bufp;
        -: 9483:     const char *string1, *string2;
        -: 9484:     int size1, size2;
        -: 9485:     int pos;
        -: 9486:     struct re_registers *regs;
        -: 9487:     int stop;
    #####: 9488:{
        -: 9489:  /* General temporaries.  */
        -: 9490:  int mcnt;
        -: 9491:  unsigned char *p1;
        -: 9492:
        -: 9493:  /* Just past the end of the corresponding string.  */
        -: 9494:  const char *end1, *end2;
        -: 9495:
        -: 9496:  /* Pointers into string1 and string2, just past the last characters in
        -: 9497:     each to consider matching.  */
        -: 9498:  const char *end_match_1, *end_match_2;
        -: 9499:
        -: 9500:  /* Where we are in the data, and the end of the current string.  */
        -: 9501:  const char *d, *dend;
        -: 9502:
        -: 9503:  /* Where we are in the pattern, and the end of the pattern.  */
    #####: 9504:  unsigned char *p = bufp->buffer;
    #####: 9505:  register unsigned char *pend = p + bufp->used;
        -: 9506:
        -: 9507:  /* Mark the opcode just after a start_memory, so we can test for an
        -: 9508:     empty subpattern when we get to the stop_memory.  */
    #####: 9509:  unsigned char *just_past_start_mem = 0;
        -: 9510:
        -: 9511:  /* We use this to map every character in the string.  */
    #####: 9512:  RE_TRANSLATE_TYPE translate = bufp->translate;
        -: 9513:
        -: 9514:  /* Failure point stack.  Each place that can handle a failure further
        -: 9515:     down the line pushes a failure point on this stack.  It consists of
        -: 9516:     restart, regend, and reg_info for all registers corresponding to
        -: 9517:     the subexpressions we're currently inside, plus the number of such
        -: 9518:     registers, and, finally, two char *'s.  The first char * is where
        -: 9519:     to resume scanning the pattern; the second one is where to resume
        -: 9520:     scanning the strings.  If the latter is zero, the failure point is
        -: 9521:     a ``dummy''; if a failure happens and the failure point is a dummy,
        -: 9522:     it gets discarded and the next next one is tried.  */
        -: 9523:#ifdef MATCH_MAY_ALLOCATE /* otherwise, this is global.  */
        -: 9524:  fail_stack_type fail_stack;
        -: 9525:#endif
        -: 9526:#ifdef DEBUG
        -: 9527:  static unsigned failure_id;
        -: 9528:  unsigned nfailure_points_pushed = 0, nfailure_points_popped = 0;
        -: 9529:#endif
        -: 9530:
        -: 9531:#ifdef REL_ALLOC
        -: 9532:  /* This holds the pointer to the failure stack, when
        -: 9533:     it is allocated relocatably.  */
        -: 9534:  fail_stack_elt_t *failure_stack_ptr;
        -: 9535:#endif
        -: 9536:
        -: 9537:  /* We fill all the registers internally, independent of what we
        -: 9538:     return, for use in backreferences.  The number here includes
        -: 9539:     an element for register zero.  */
    #####: 9540:  size_t num_regs = bufp->re_nsub + 1;
        -: 9541:
        -: 9542:  /* The currently active registers.  */
    #####: 9543:  active_reg_t lowest_active_reg = NO_LOWEST_ACTIVE_REG;
    #####: 9544:  active_reg_t highest_active_reg = NO_HIGHEST_ACTIVE_REG;
        -: 9545:
        -: 9546:  /* Information on the contents of registers. These are pointers into
        -: 9547:     the input strings; they record just what was matched (on this
        -: 9548:     attempt) by a subexpression part of the pattern, that is, the
        -: 9549:     regnum-th regstart pointer points to where in the pattern we began
        -: 9550:     matching and the regnum-th regend points to right after where we
        -: 9551:     stopped matching the regnum-th subexpression.  (The zeroth register
        -: 9552:     keeps track of what the whole pattern matches.)  */
        -: 9553:#ifdef MATCH_MAY_ALLOCATE /* otherwise, these are global.  */
        -: 9554:  const char **regstart, **regend;
        -: 9555:#endif
        -: 9556:
        -: 9557:  /* If a group that's operated upon by a repetition operator fails to
        -: 9558:     match anything, then the register for its start will need to be
        -: 9559:     restored because it will have been set to wherever in the string we
        -: 9560:     are when we last see its open-group operator.  Similarly for a
        -: 9561:     register's end.  */
        -: 9562:#ifdef MATCH_MAY_ALLOCATE /* otherwise, these are global.  */
        -: 9563:  const char **old_regstart, **old_regend;
        -: 9564:#endif
        -: 9565:
        -: 9566:  /* The is_active field of reg_info helps us keep track of which (possibly
        -: 9567:     nested) subexpressions we are currently in. The matched_something
        -: 9568:     field of reg_info[reg_num] helps us tell whether or not we have
        -: 9569:     matched any of the pattern so far this time through the reg_num-th
        -: 9570:     subexpression.  These two fields get reset each time through any
        -: 9571:     loop their register is in.  */
        -: 9572:#ifdef MATCH_MAY_ALLOCATE /* otherwise, this is global.  */
        -: 9573:  register_info_type *reg_info;
        -: 9574:#endif
        -: 9575:
        -: 9576:  /* The following record the register info as found in the above
        -: 9577:     variables when we find a match better than any we've seen before.
        -: 9578:     This happens as we backtrack through the failure points, which in
        -: 9579:     turn happens only if we have not yet matched the entire string. */
    #####: 9580:  unsigned best_regs_set = false;
        -: 9581:#ifdef MATCH_MAY_ALLOCATE /* otherwise, these are global.  */
        -: 9582:  const char **best_regstart, **best_regend;
        -: 9583:#endif
        -: 9584:
        -: 9585:  /* Logically, this is `best_regend[0]'.  But we don't want to have to
        -: 9586:     allocate space for that if we're not allocating space for anything
        -: 9587:     else (see below).  Also, we never need info about register 0 for
        -: 9588:     any of the other register vectors, and it seems rather a kludge to
        -: 9589:     treat `best_regend' differently than the rest.  So we keep track of
        -: 9590:     the end of the best match so far in a separate variable.  We
        -: 9591:     initialize this to NULL so that when we backtrack the first time
        -: 9592:     and need to test it, it's not garbage.  */
    #####: 9593:  const char *match_end = NULL;
        -: 9594:
        -: 9595:  /* This helps SET_REGS_MATCHED avoid doing redundant work.  */
    #####: 9596:  int set_regs_matched_done = 0;
        -: 9597:
        -: 9598:  /* Used when we pop values we don't care about.  */
        -: 9599:#ifdef MATCH_MAY_ALLOCATE /* otherwise, these are global.  */
        -: 9600:  const char **reg_dummy;
        -: 9601:  register_info_type *reg_info_dummy;
        -: 9602:#endif
        -: 9603:
        -: 9604:#ifdef DEBUG
        -: 9605:  /* Counts the total number of registers pushed.  */
        -: 9606:  unsigned num_regs_pushed = 0;
        -: 9607:#endif
        -: 9608:
        -: 9609:  DEBUG_PRINT1 ("\n\nEntering re_match_2.\n");
        -: 9610:
    #####: 9611:  INIT_FAIL_STACK ();
branch  0 never executed
branch  1 never executed
        -: 9612:
        -: 9613:#ifdef MATCH_MAY_ALLOCATE
        -: 9614:  /* Do not bother to initialize all the register variables if there are
        -: 9615:     no groups in the pattern, as it takes a fair amount of time.  If
        -: 9616:     there are groups, we include space for register 0 (the whole
        -: 9617:     pattern), even though we never use it, since it simplifies the
        -: 9618:     array indexing.  We should fix this.  */
    #####: 9619:  if (bufp->re_nsub)
branch  0 never executed
branch  1 never executed
        -: 9620:    {
    #####: 9621:      regstart = REGEX_TALLOC (num_regs, const char *);
    #####: 9622:      regend = REGEX_TALLOC (num_regs, const char *);
    #####: 9623:      old_regstart = REGEX_TALLOC (num_regs, const char *);
    #####: 9624:      old_regend = REGEX_TALLOC (num_regs, const char *);
    #####: 9625:      best_regstart = REGEX_TALLOC (num_regs, const char *);
    #####: 9626:      best_regend = REGEX_TALLOC (num_regs, const char *);
    #####: 9627:      reg_info = REGEX_TALLOC (num_regs, register_info_type);
    #####: 9628:      reg_dummy = REGEX_TALLOC (num_regs, const char *);
    #####: 9629:      reg_info_dummy = REGEX_TALLOC (num_regs, register_info_type);
        -: 9630:
    #####: 9631:      if (!(regstart && regend && old_regstart && old_regend && reg_info
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 9632:            && best_regstart && best_regend && reg_dummy && reg_info_dummy))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 9633:        {
    #####: 9634:          FREE_VARIABLES ();
    #####: 9635:          return -2;
        -: 9636:        }
        -: 9637:    }
        -: 9638:  else
        -: 9639:    {
        -: 9640:      /* We must initialize all our variables to NULL, so that
        -: 9641:         `FREE_VARIABLES' doesn't try to free them.  */
    #####: 9642:      regstart = regend = old_regstart = old_regend = best_regstart
    #####: 9643:        = best_regend = reg_dummy = NULL;
    #####: 9644:      reg_info = reg_info_dummy = (register_info_type *) NULL;
        -: 9645:    }
        -: 9646:#endif /* MATCH_MAY_ALLOCATE */
        -: 9647:
        -: 9648:  /* The starting position is bogus.  */
    #####: 9649:  if (pos < 0 || pos > size1 + size2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9650:    {
    #####: 9651:      FREE_VARIABLES ();
    #####: 9652:      return -1;
        -: 9653:    }
        -: 9654:
        -: 9655:  /* Initialize subexpression text positions to -1 to mark ones that no
        -: 9656:     start_memory/stop_memory has been seen for. Also initialize the
        -: 9657:     register information struct.  */
    #####: 9658:  for (mcnt = 1; (unsigned) mcnt < num_regs; mcnt++)
branch  0 never executed
branch  1 never executed
        -: 9659:    {
    #####: 9660:      regstart[mcnt] = regend[mcnt]
    #####: 9661:        = old_regstart[mcnt] = old_regend[mcnt] = REG_UNSET_VALUE;
        -: 9662:
    #####: 9663:      REG_MATCH_NULL_STRING_P (reg_info[mcnt]) = MATCH_NULL_UNSET_VALUE;
    #####: 9664:      IS_ACTIVE (reg_info[mcnt]) = 0;
    #####: 9665:      MATCHED_SOMETHING (reg_info[mcnt]) = 0;
    #####: 9666:      EVER_MATCHED_SOMETHING (reg_info[mcnt]) = 0;
        -: 9667:    }
        -: 9668:
        -: 9669:  /* We move `string1' into `string2' if the latter's empty -- but not if
        -: 9670:     `string1' is null.  */
    #####: 9671:  if (size2 == 0 && string1 != NULL)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9672:    {
    #####: 9673:      string2 = string1;
    #####: 9674:      size2 = size1;
    #####: 9675:      string1 = 0;
    #####: 9676:      size1 = 0;
        -: 9677:    }
    #####: 9678:  end1 = string1 + size1;
    #####: 9679:  end2 = string2 + size2;
        -: 9680:
        -: 9681:  /* Compute where to stop matching, within the two strings.  */
    #####: 9682:  if (stop <= size1)
branch  0 never executed
branch  1 never executed
        -: 9683:    {
    #####: 9684:      end_match_1 = string1 + stop;
    #####: 9685:      end_match_2 = string2;
        -: 9686:    }
        -: 9687:  else
        -: 9688:    {
    #####: 9689:      end_match_1 = end1;
    #####: 9690:      end_match_2 = string2 + stop - size1;
        -: 9691:    }
        -: 9692:
        -: 9693:  /* `p' scans through the pattern as `d' scans through the data.
        -: 9694:     `dend' is the end of the input string that `d' points within.  `d'
        -: 9695:     is advanced into the following input string whenever necessary, but
        -: 9696:     this happens before fetching; therefore, at the beginning of the
        -: 9697:     loop, `d' can be pointing at the end of a string, but it cannot
        -: 9698:     equal `string2'.  */
    #####: 9699:  if (size1 > 0 && pos <= size1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9700:    {
    #####: 9701:      d = string1 + pos;
    #####: 9702:      dend = end_match_1;
        -: 9703:    }
        -: 9704:  else
        -: 9705:    {
    #####: 9706:      d = string2 + pos - size1;
    #####: 9707:      dend = end_match_2;
        -: 9708:    }
        -: 9709:
        -: 9710:  DEBUG_PRINT1 ("The compiled pattern is:\n");
        -: 9711:  DEBUG_PRINT_COMPILED_PATTERN (bufp, p, pend);
        -: 9712:  DEBUG_PRINT1 ("The string to match is: `");
        -: 9713:  DEBUG_PRINT_DOUBLE_STRING (d, string1, size1, string2, size2);
        -: 9714:  DEBUG_PRINT1 ("'\n");
        -: 9715:
        -: 9716:  /* This loops over pattern commands.  It exits by returning from the
        -: 9717:     function if the match is complete, or it drops through if the match
        -: 9718:     fails at this starting point in the input data.  */
        -: 9719:  for (;;)
        -: 9720:    {
        -: 9721:#ifdef _LIBC
        -: 9722:      DEBUG_PRINT2 ("\n%p: ", p);
        -: 9723:#else
        -: 9724:      DEBUG_PRINT2 ("\n0x%x: ", p);
        -: 9725:#endif
        -: 9726:
    #####: 9727:      if (p == pend)
branch  0 never executed
branch  1 never executed
        -: 9728:	{ /* End of pattern means we might have succeeded.  */
        -: 9729:          DEBUG_PRINT1 ("end of pattern ... ");
        -: 9730:
        -: 9731:	  /* If we haven't matched the entire string, and we want the
        -: 9732:             longest match, try backtracking.  */
    #####: 9733:          if (d != end_match_2)
branch  0 never executed
branch  1 never executed
        -: 9734:	    {
        -: 9735:	      /* 1 if this match ends in the same string (string1 or string2)
        -: 9736:		 as the best previous match.  */
    #####: 9737:	      boolean same_str_p = (FIRST_STRING_P (match_end)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9738:				    == MATCHING_IN_FIRST_STRING);
        -: 9739:	      /* 1 if this match is the best seen so far.  */
        -: 9740:	      boolean best_match_p;
        -: 9741:
        -: 9742:	      /* AIX compiler got confused when this was combined
        -: 9743:		 with the previous declaration.  */
    #####: 9744:	      if (same_str_p)
branch  0 never executed
branch  1 never executed
    #####: 9745:		best_match_p = d > match_end;
        -: 9746:	      else
    #####: 9747:		best_match_p = !MATCHING_IN_FIRST_STRING;
        -: 9748:
        -: 9749:              DEBUG_PRINT1 ("backtracking.\n");
        -: 9750:
    #####: 9751:              if (!FAIL_STACK_EMPTY ())
branch  0 never executed
branch  1 never executed
        -: 9752:                { /* More failure points to try.  */
        -: 9753:
        -: 9754:                  /* If exceeds best match so far, save it.  */
    #####: 9755:                  if (!best_regs_set || best_match_p)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9756:                    {
    #####: 9757:                      best_regs_set = true;
    #####: 9758:                      match_end = d;
        -: 9759:
        -: 9760:                      DEBUG_PRINT1 ("\nSAVING match as best so far.\n");
        -: 9761:
    #####: 9762:                      for (mcnt = 1; (unsigned) mcnt < num_regs; mcnt++)
branch  0 never executed
branch  1 never executed
        -: 9763:                        {
    #####: 9764:                          best_regstart[mcnt] = regstart[mcnt];
    #####: 9765:                          best_regend[mcnt] = regend[mcnt];
        -: 9766:                        }
        -: 9767:                    }
    #####: 9768:                  goto fail;
        -: 9769:                }
        -: 9770:
        -: 9771:              /* If no failure points, don't restore garbage.  And if
        -: 9772:                 last match is real best match, don't restore second
        -: 9773:                 best one. */
    #####: 9774:              else if (best_regs_set && !best_match_p)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9775:                {
    #####: 9776:  	        restore_best_regs:
        -: 9777:                  /* Restore best match.  It may happen that `dend ==
        -: 9778:                     end_match_1' while the restored d is in string2.
        -: 9779:                     For example, the pattern `x.*y.*z' against the
        -: 9780:                     strings `x-' and `y-z-', if the two strings are
        -: 9781:                     not consecutive in memory.  */
        -: 9782:                  DEBUG_PRINT1 ("Restoring best registers.\n");
        -: 9783:
    #####: 9784:                  d = match_end;
    #####: 9785:                  dend = ((d >= string1 && d <= end1)
branch  0 never executed
branch  1 never executed
    #####: 9786:		           ? end_match_1 : end_match_2);
branch  0 never executed
branch  1 never executed
        -: 9787:
    #####: 9788:		  for (mcnt = 1; (unsigned) mcnt < num_regs; mcnt++)
branch  0 never executed
branch  1 never executed
        -: 9789:		    {
    #####: 9790:		      regstart[mcnt] = best_regstart[mcnt];
    #####: 9791:		      regend[mcnt] = best_regend[mcnt];
        -: 9792:		    }
        -: 9793:                }
        -: 9794:            } /* d != end_match_2 */
        -: 9795:
    #####: 9796:	succeed_label:
        -: 9797:          DEBUG_PRINT1 ("Accepting match.\n");
        -: 9798:
        -: 9799:          /* If caller wants register contents data back, do it.  */
    #####: 9800:          if (regs && !bufp->no_sub)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9801:	    {
        -: 9802:              /* Have the register data arrays been allocated?  */
    #####: 9803:              if (bufp->regs_allocated == REGS_UNALLOCATED)
branch  0 never executed
branch  1 never executed
        -: 9804:                { /* No.  So allocate them with malloc.  We need one
        -: 9805:                     extra element beyond `num_regs' for the `-1' marker
        -: 9806:                     GNU code uses.  */
    #####: 9807:                  regs->num_regs = MAX (RE_NREGS, num_regs + 1);
    #####: 9808:                  regs->start = TALLOC (regs->num_regs, regoff_t);
call    0 never executed
    #####: 9809:                  regs->end = TALLOC (regs->num_regs, regoff_t);
call    0 never executed
    #####: 9810:                  if (regs->start == NULL || regs->end == NULL)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9811:		    {
    #####: 9812:		      FREE_VARIABLES ();
    #####: 9813:		      return -2;
        -: 9814:		    }
    #####: 9815:                  bufp->regs_allocated = REGS_REALLOCATE;
        -: 9816:                }
    #####: 9817:              else if (bufp->regs_allocated == REGS_REALLOCATE)
branch  0 never executed
branch  1 never executed
        -: 9818:                { /* Yes.  If we need more elements than were already
        -: 9819:                     allocated, reallocate them.  If we need fewer, just
        -: 9820:                     leave it alone.  */
    #####: 9821:                  if (regs->num_regs < num_regs + 1)
branch  0 never executed
branch  1 never executed
        -: 9822:                    {
    #####: 9823:                      regs->num_regs = num_regs + 1;
    #####: 9824:                      RETALLOC (regs->start, regs->num_regs, regoff_t);
    #####: 9825:                      RETALLOC (regs->end, regs->num_regs, regoff_t);
    #####: 9826:                      if (regs->start == NULL || regs->end == NULL)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9827:			{
    #####: 9828:			  FREE_VARIABLES ();
    #####: 9829:			  return -2;
        -: 9830:			}
        -: 9831:                    }
        -: 9832:                }
        -: 9833:              else
        -: 9834:		{
        -: 9835:		  /* These braces fend off a "empty body in an else-statement"
        -: 9836:		     warning under GCC when assert expands to nothing.  */
        -: 9837:		  assert (bufp->regs_allocated == REGS_FIXED);
        -: 9838:		}
        -: 9839:
        -: 9840:              /* Convert the pointer data in `regstart' and `regend' to
        -: 9841:                 indices.  Register zero has to be set differently,
        -: 9842:                 since we haven't kept track of any info for it.  */
    #####: 9843:              if (regs->num_regs > 0)
branch  0 never executed
branch  1 never executed
        -: 9844:                {
    #####: 9845:                  regs->start[0] = pos;
    #####: 9846:                  regs->end[0] = (MATCHING_IN_FIRST_STRING
    #####: 9847:				  ? ((regoff_t) (d - string1))
    #####: 9848:			          : ((regoff_t) (d - string2 + size1)));
branch  0 never executed
branch  1 never executed
        -: 9849:                }
        -: 9850:
        -: 9851:              /* Go through the first `min (num_regs, regs->num_regs)'
        -: 9852:                 registers, since that is all we initialized.  */
    #####: 9853:	      for (mcnt = 1; (unsigned) mcnt < MIN (num_regs, regs->num_regs);
branch  0 never executed
branch  1 never executed
    #####: 9854:		   mcnt++)
        -: 9855:		{
    #####: 9856:                  if (REG_UNSET (regstart[mcnt]) || REG_UNSET (regend[mcnt]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9857:                    regs->start[mcnt] = regs->end[mcnt] = -1;
        -: 9858:                  else
        -: 9859:                    {
    #####: 9860:		      regs->start[mcnt]
    #####: 9861:			= (regoff_t) POINTER_TO_OFFSET (regstart[mcnt]);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9862:                      regs->end[mcnt]
    #####: 9863:			= (regoff_t) POINTER_TO_OFFSET (regend[mcnt]);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 9864:                    }
        -: 9865:		}
        -: 9866:
        -: 9867:              /* If the regs structure we return has more elements than
        -: 9868:                 were in the pattern, set the extra elements to -1.  If
        -: 9869:                 we (re)allocated the registers, this is the case,
        -: 9870:                 because we always allocate enough to have at least one
        -: 9871:                 -1 at the end.  */
    #####: 9872:              for (mcnt = num_regs; (unsigned) mcnt < regs->num_regs; mcnt++)
branch  0 never executed
branch  1 never executed
    #####: 9873:                regs->start[mcnt] = regs->end[mcnt] = -1;
        -: 9874:	    } /* regs && !bufp->no_sub */
        -: 9875:
        -: 9876:          DEBUG_PRINT4 ("%u failure points pushed, %u popped (%u remain).\n",
        -: 9877:                        nfailure_points_pushed, nfailure_points_popped,
        -: 9878:                        nfailure_points_pushed - nfailure_points_popped);
        -: 9879:          DEBUG_PRINT2 ("%u registers pushed.\n", num_regs_pushed);
        -: 9880:
    #####: 9881:          mcnt = d - pos - (MATCHING_IN_FIRST_STRING
        -: 9882:			    ? string1
    #####: 9883:			    : string2 - size1);
branch  0 never executed
branch  1 never executed
        -: 9884:
        -: 9885:          DEBUG_PRINT2 ("Returning %d from re_match_2.\n", mcnt);
        -: 9886:
    #####: 9887:          FREE_VARIABLES ();
    #####: 9888:          return mcnt;
        -: 9889:        }
        -: 9890:
        -: 9891:      /* Otherwise match next pattern command.  */
    #####: 9892:      switch (SWITCH_ENUM_CAST ((re_opcode_t) *p++))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
        -: 9893:	{
        -: 9894:        /* Ignore these.  Used to ignore the n of succeed_n's which
        -: 9895:           currently have n == 0.  */
    #####: 9896:        case no_op:
        -: 9897:          DEBUG_PRINT1 ("EXECUTING no_op.\n");
    #####: 9898:          break;
        -: 9899:
    #####: 9900:	case succeed:
        -: 9901:          DEBUG_PRINT1 ("EXECUTING succeed.\n");
    #####: 9902:	  goto succeed_label;
        -: 9903:
        -: 9904:        /* Match the next n pattern characters exactly.  The following
        -: 9905:           byte in the pattern defines n, and the n bytes after that
        -: 9906:           are the characters to match.  */
    #####: 9907:	case exactn:
    #####: 9908:	  mcnt = *p++;
        -: 9909:          DEBUG_PRINT2 ("EXECUTING exactn %d.\n", mcnt);
        -: 9910:
        -: 9911:          /* This is written out as an if-else so we don't waste time
        -: 9912:             testing `translate' inside the loop.  */
    #####: 9913:          if (translate)
branch  0 never executed
branch  1 never executed
        -: 9914:	    {
        -: 9915:	      do
        -: 9916:		{
    #####: 9917:		  PREFETCH ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9918:		  if ((unsigned char) translate[(unsigned char) *d++]
    #####: 9919:		      != (unsigned char) *p++)
branch  0 never executed
branch  1 never executed
    #####: 9920:                    goto fail;
        -: 9921:		}
    #####: 9922:	      while (--mcnt);
branch  0 never executed
branch  1 never executed
        -: 9923:	    }
        -: 9924:	  else
        -: 9925:	    {
        -: 9926:	      do
        -: 9927:		{
    #####: 9928:		  PREFETCH ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9929:		  if (*d++ != (char) *p++) goto fail;
branch  0 never executed
branch  1 never executed
        -: 9930:		}
    #####: 9931:	      while (--mcnt);
branch  0 never executed
branch  1 never executed
        -: 9932:	    }
    #####: 9933:	  SET_REGS_MATCHED ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9934:          break;
        -: 9935:
        -: 9936:
        -: 9937:        /* Match any character except possibly a newline or a null.  */
    #####: 9938:	case anychar:
        -: 9939:          DEBUG_PRINT1 ("EXECUTING anychar.\n");
        -: 9940:
    #####: 9941:          PREFETCH ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9942:
    #####: 9943:          if ((!(bufp->syntax & RE_DOT_NEWLINE) && TRANSLATE (*d) == '\n')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 9944:              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\000'))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9945:	    goto fail;
        -: 9946:
    #####: 9947:          SET_REGS_MATCHED ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9948:          DEBUG_PRINT2 ("  Matched `%d'.\n", *d);
    #####: 9949:          d++;
    #####: 9950:	  break;
        -: 9951:
        -: 9952:
    #####: 9953:	case charset:
        -: 9954:	case charset_not:
        -: 9955:	  {
        -: 9956:	    register unsigned char c;
    #####: 9957:	    boolean not = (re_opcode_t) *(p - 1) == charset_not;
        -: 9958:
        -: 9959:            DEBUG_PRINT2 ("EXECUTING charset%s.\n", not ? "_not" : "");
        -: 9960:
    #####: 9961:	    PREFETCH ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9962:	    c = TRANSLATE (*d); /* The character to match.  */
branch  0 never executed
branch  1 never executed
        -: 9963:
        -: 9964:            /* Cast to `unsigned' instead of `unsigned char' in case the
        -: 9965:               bit list is a full 32 bytes long.  */
    #####: 9966:	    if (c < (unsigned) (*p * BYTEWIDTH)
branch  0 never executed
branch  1 never executed
    #####: 9967:		&& p[1 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
branch  0 never executed
branch  1 never executed
    #####: 9968:	      not = !not;
        -: 9969:
    #####: 9970:	    p += 1 + *p;
        -: 9971:
    #####: 9972:	    if (!not) goto fail;
branch  0 never executed
branch  1 never executed
        -: 9973:
    #####: 9974:	    SET_REGS_MATCHED ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9975:            d++;
    #####: 9976:	    break;
        -: 9977:	  }
        -: 9978:
        -: 9979:
        -: 9980:        /* The beginning of a group is represented by start_memory.
        -: 9981:           The arguments are the register number in the next byte, and the
        -: 9982:           number of groups inner to this one in the next.  The text
        -: 9983:           matched within the group is recorded (in the internal
        -: 9984:           registers data structure) under the register number.  */
    #####: 9985:        case start_memory:
        -: 9986:	  DEBUG_PRINT3 ("EXECUTING start_memory %d (%d):\n", *p, p[1]);
        -: 9987:
        -: 9988:          /* Find out if this group can match the empty string.  */
    #####: 9989:	  p1 = p;		/* To send to group_match_null_string_p.  */
        -: 9990:
    #####: 9991:          if (REG_MATCH_NULL_STRING_P (reg_info[*p]) == MATCH_NULL_UNSET_VALUE)
branch  0 never executed
branch  1 never executed
    #####: 9992:            REG_MATCH_NULL_STRING_P (reg_info[*p])
    #####: 9993:              = group_match_null_string_p (&p1, pend, reg_info);
call    0 never executed
        -: 9994:
        -: 9995:          /* Save the position in the string where we were the last time
        -: 9996:             we were at this open-group operator in case the group is
        -: 9997:             operated upon by a repetition operator, e.g., with `(a*)*b'
        -: 9998:             against `ab'; then we want to ignore where we are now in
        -: 9999:             the string in case this attempt to match fails.  */
    #####:10000:          old_regstart[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
    #####:10001:                             ? REG_UNSET (regstart[*p]) ? d : regstart[*p]
branch  0 never executed
branch  1 never executed
    #####:10002:                             : regstart[*p];
branch  0 never executed
branch  1 never executed
        -:10003:	  DEBUG_PRINT2 ("  old_regstart: %d\n",
        -:10004:			 POINTER_TO_OFFSET (old_regstart[*p]));
        -:10005:
    #####:10006:          regstart[*p] = d;
        -:10007:	  DEBUG_PRINT2 ("  regstart: %d\n", POINTER_TO_OFFSET (regstart[*p]));
        -:10008:
    #####:10009:          IS_ACTIVE (reg_info[*p]) = 1;
    #####:10010:          MATCHED_SOMETHING (reg_info[*p]) = 0;
        -:10011:
        -:10012:	  /* Clear this whenever we change the register activity status.  */
    #####:10013:	  set_regs_matched_done = 0;
        -:10014:
        -:10015:          /* This is the new highest active register.  */
    #####:10016:          highest_active_reg = *p;
        -:10017:
        -:10018:          /* If nothing was active before, this is the new lowest active
        -:10019:             register.  */
    #####:10020:          if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
branch  0 never executed
branch  1 never executed
    #####:10021:            lowest_active_reg = *p;
        -:10022:
        -:10023:          /* Move past the register number and inner group count.  */
    #####:10024:          p += 2;
    #####:10025:	  just_past_start_mem = p;
        -:10026:
    #####:10027:          break;
        -:10028:
        -:10029:
        -:10030:        /* The stop_memory opcode represents the end of a group.  Its
        -:10031:           arguments are the same as start_memory's: the register
        -:10032:           number, and the number of inner groups.  */
    #####:10033:	case stop_memory:
        -:10034:	  DEBUG_PRINT3 ("EXECUTING stop_memory %d (%d):\n", *p, p[1]);
        -:10035:
        -:10036:          /* We need to save the string position the last time we were at
        -:10037:             this close-group operator in case the group is operated
        -:10038:             upon by a repetition operator, e.g., with `((a*)*(b*)*)*'
        -:10039:             against `aba'; then we want to ignore where we are now in
        -:10040:             the string in case this attempt to match fails.  */
    #####:10041:          old_regend[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
    #####:10042:                           ? REG_UNSET (regend[*p]) ? d : regend[*p]
branch  0 never executed
branch  1 never executed
    #####:10043:			   : regend[*p];
branch  0 never executed
branch  1 never executed
        -:10044:	  DEBUG_PRINT2 ("      old_regend: %d\n",
        -:10045:			 POINTER_TO_OFFSET (old_regend[*p]));
        -:10046:
    #####:10047:          regend[*p] = d;
        -:10048:	  DEBUG_PRINT2 ("      regend: %d\n", POINTER_TO_OFFSET (regend[*p]));
        -:10049:
        -:10050:          /* This register isn't active anymore.  */
    #####:10051:          IS_ACTIVE (reg_info[*p]) = 0;
        -:10052:
        -:10053:	  /* Clear this whenever we change the register activity status.  */
    #####:10054:	  set_regs_matched_done = 0;
        -:10055:
        -:10056:          /* If this was the only register active, nothing is active
        -:10057:             anymore.  */
    #####:10058:          if (lowest_active_reg == highest_active_reg)
branch  0 never executed
branch  1 never executed
        -:10059:            {
    #####:10060:              lowest_active_reg = NO_LOWEST_ACTIVE_REG;
    #####:10061:              highest_active_reg = NO_HIGHEST_ACTIVE_REG;
        -:10062:            }
        -:10063:          else
        -:10064:            { /* We must scan for the new highest active register, since
        -:10065:                 it isn't necessarily one less than now: consider
        -:10066:                 (a(b)c(d(e)f)g).  When group 3 ends, after the f), the
        -:10067:                 new highest active register is 1.  */
    #####:10068:              unsigned char r = *p - 1;
    #####:10069:              while (r > 0 && !IS_ACTIVE (reg_info[r]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10070:                r--;
        -:10071:
        -:10072:              /* If we end up at register zero, that means that we saved
        -:10073:                 the registers as the result of an `on_failure_jump', not
        -:10074:                 a `start_memory', and we jumped to past the innermost
        -:10075:                 `stop_memory'.  For example, in ((.)*) we save
        -:10076:                 registers 1 and 2 as a result of the *, but when we pop
        -:10077:                 back to the second ), we are at the stop_memory 1.
        -:10078:                 Thus, nothing is active.  */
    #####:10079:	      if (r == 0)
branch  0 never executed
branch  1 never executed
        -:10080:                {
    #####:10081:                  lowest_active_reg = NO_LOWEST_ACTIVE_REG;
    #####:10082:                  highest_active_reg = NO_HIGHEST_ACTIVE_REG;
        -:10083:                }
        -:10084:              else
    #####:10085:                highest_active_reg = r;
        -:10086:            }
        -:10087:
        -:10088:          /* If just failed to match something this time around with a
        -:10089:             group that's operated on by a repetition operator, try to
        -:10090:             force exit from the ``loop'', and restore the register
        -:10091:             information for this group that we had before trying this
        -:10092:             last match.  */
    #####:10093:          if ((!MATCHED_SOMETHING (reg_info[*p])
branch  0 never executed
branch  1 never executed
    #####:10094:               || just_past_start_mem == p - 1)
branch  0 never executed
branch  1 never executed
    #####:10095:	      && (p + 2) < pend)
branch  0 never executed
branch  1 never executed
        -:10096:            {
    #####:10097:              boolean is_a_jump_n = false;
        -:10098:
    #####:10099:              p1 = p + 2;
    #####:10100:              mcnt = 0;
    #####:10101:              switch ((re_opcode_t) *p1++)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -:10102:                {
    #####:10103:                  case jump_n:
    #####:10104:		    is_a_jump_n = true;
    #####:10105:                  case pop_failure_jump:
        -:10106:		  case maybe_pop_jump:
        -:10107:		  case jump:
        -:10108:		  case dummy_failure_jump:
    #####:10109:                    EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####:10110:		    if (is_a_jump_n)
branch  0 never executed
branch  1 never executed
    #####:10111:		      p1 += 2;
    #####:10112:                    break;
        -:10113:
    #####:10114:                  default:
        -:10115:                    /* do nothing */ ;
        -:10116:                }
    #####:10117:	      p1 += mcnt;
        -:10118:
        -:10119:              /* If the next operation is a jump backwards in the pattern
        -:10120:	         to an on_failure_jump right before the start_memory
        -:10121:                 corresponding to this stop_memory, exit from the loop
        -:10122:                 by forcing a failure after pushing on the stack the
        -:10123:                 on_failure_jump's jump in the pattern, and d.  */
    #####:10124:              if (mcnt < 0 && (re_opcode_t) *p1 == on_failure_jump
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10125:                  && (re_opcode_t) p1[3] == start_memory && p1[4] == *p)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:10126:		{
        -:10127:                  /* If this group ever matched anything, then restore
        -:10128:                     what its registers were before trying this last
        -:10129:                     failed match, e.g., with `(a*)*b' against `ab' for
        -:10130:                     regstart[1], and, e.g., with `((a*)*(b*)*)*'
        -:10131:                     against `aba' for regend[3].
        -:10132:
        -:10133:                     Also restore the registers for inner groups for,
        -:10134:                     e.g., `((a*)(b*))*' against `aba' (register 3 would
        -:10135:                     otherwise get trashed).  */
        -:10136:
    #####:10137:                  if (EVER_MATCHED_SOMETHING (reg_info[*p]))
branch  0 never executed
branch  1 never executed
        -:10138:		    {
        -:10139:		      unsigned r;
        -:10140:
    #####:10141:                      EVER_MATCHED_SOMETHING (reg_info[*p]) = 0;
        -:10142:
        -:10143:		      /* Restore this and inner groups' (if any) registers.  */
    #####:10144:                      for (r = *p; r < (unsigned) *p + (unsigned) *(p + 1);
branch  0 never executed
branch  1 never executed
    #####:10145:			   r++)
        -:10146:                        {
    #####:10147:                          regstart[r] = old_regstart[r];
        -:10148:
        -:10149:                          /* xx why this test?  */
    #####:10150:                          if (old_regend[r] >= regstart[r])
branch  0 never executed
branch  1 never executed
    #####:10151:                            regend[r] = old_regend[r];
        -:10152:                        }
        -:10153:                    }
    #####:10154:		  p1++;
    #####:10155:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####:10156:                  PUSH_FAILURE_POINT (p1 + mcnt, d, -2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:10157:
    #####:10158:                  goto fail;
        -:10159:                }
        -:10160:            }
        -:10161:
        -:10162:          /* Move past the register number and the inner group count.  */
    #####:10163:          p += 2;
    #####:10164:          break;
        -:10165:
        -:10166:
        -:10167:	/* \<digit> has been turned into a `duplicate' command which is
        -:10168:           followed by the numeric value of <digit> as the register number.  */
    #####:10169:        case duplicate:
        -:10170:	  {
        -:10171:	    register const char *d2, *dend2;
    #####:10172:	    int regno = *p++;   /* Get which register to match against.  */
        -:10173:	    DEBUG_PRINT2 ("EXECUTING duplicate %d.\n", regno);
        -:10174:
        -:10175:	    /* Can't back reference a group which we've never matched.  */
    #####:10176:            if (REG_UNSET (regstart[regno]) || REG_UNSET (regend[regno]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10177:              goto fail;
        -:10178:
        -:10179:            /* Where in input to try to start matching.  */
    #####:10180:            d2 = regstart[regno];
        -:10181:
        -:10182:            /* Where to stop matching; if both the place to start and
        -:10183:               the place to stop matching are in the same string, then
        -:10184:               set to the place to stop, otherwise, for now have to use
        -:10185:               the end of the first string.  */
        -:10186:
    #####:10187:            dend2 = ((FIRST_STRING_P (regstart[regno])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:10188:		      == FIRST_STRING_P (regend[regno]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:10189:		     ? regend[regno] : end_match_1);
branch  0 never executed
branch  1 never executed
        -:10190:	    for (;;)
        -:10191:	      {
        -:10192:		/* If necessary, advance to next segment in register
        -:10193:                   contents.  */
    #####:10194:		while (d2 == dend2)
branch  0 never executed
branch  1 never executed
        -:10195:		  {
    #####:10196:		    if (dend2 == end_match_2) break;
branch  0 never executed
branch  1 never executed
    #####:10197:		    if (dend2 == regend[regno]) break;
branch  0 never executed
branch  1 never executed
        -:10198:
        -:10199:                    /* End of string1 => advance to string2. */
    #####:10200:                    d2 = string2;
    #####:10201:                    dend2 = regend[regno];
        -:10202:		  }
        -:10203:		/* At end of register contents => success */
    #####:10204:		if (d2 == dend2) break;
branch  0 never executed
branch  1 never executed
        -:10205:
        -:10206:		/* If necessary, advance to next segment in data.  */
    #####:10207:		PREFETCH ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:10208:
        -:10209:		/* How many characters left in this segment to match.  */
    #####:10210:		mcnt = dend - d;
        -:10211:
        -:10212:		/* Want how many consecutive characters we can match in
        -:10213:                   one shot, so, if necessary, adjust the count.  */
    #####:10214:                if (mcnt > dend2 - d2)
branch  0 never executed
branch  1 never executed
    #####:10215:		  mcnt = dend2 - d2;
        -:10216:
        -:10217:		/* Compare that many; failure if mismatch, else move
        -:10218:                   past them.  */
    #####:10219:		if (translate
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10220:                    ? bcmp_translate (d, d2, mcnt, translate)
call    0 never executed
    #####:10221:                    : memcmp (d, d2, mcnt))
    #####:10222:		  goto fail;
    #####:10223:		d += mcnt, d2 += mcnt;
        -:10224:
        -:10225:		/* Do this because we've match some characters.  */
    #####:10226:		SET_REGS_MATCHED ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:10227:	      }
        -:10228:	  }
    #####:10229:	  break;
        -:10230:
        -:10231:
        -:10232:        /* begline matches the empty string at the beginning of the string
        -:10233:           (unless `not_bol' is set in `bufp'), and, if
        -:10234:           `newline_anchor' is set, after newlines.  */
    #####:10235:	case begline:
        -:10236:          DEBUG_PRINT1 ("EXECUTING begline.\n");
        -:10237:
    #####:10238:          if (AT_STRINGS_BEG (d))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:10239:            {
    #####:10240:              if (!bufp->not_bol) break;
branch  0 never executed
branch  1 never executed
        -:10241:            }
    #####:10242:          else if (d[-1] == '\n' && bufp->newline_anchor)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:10243:            {
    #####:10244:              break;
        -:10245:            }
        -:10246:          /* In all other cases, we fail.  */
    #####:10247:          goto fail;
        -:10248:
        -:10249:
        -:10250:        /* endline is the dual of begline.  */
    #####:10251:	case endline:
        -:10252:          DEBUG_PRINT1 ("EXECUTING endline.\n");
        -:10253:
    #####:10254:          if (AT_STRINGS_END (d))
branch  0 never executed
branch  1 never executed
        -:10255:            {
    #####:10256:              if (!bufp->not_eol) break;
branch  0 never executed
branch  1 never executed
        -:10257:            }
        -:10258:
        -:10259:          /* We have to ``prefetch'' the next character.  */
    #####:10260:          else if ((d == end1 ? *string2 : *d) == '\n'
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10261:                   && bufp->newline_anchor)
branch  0 never executed
branch  1 never executed
        -:10262:            {
    #####:10263:              break;
        -:10264:            }
    #####:10265:          goto fail;
        -:10266:
        -:10267:
        -:10268:	/* Match at the very beginning of the data.  */
    #####:10269:        case begbuf:
        -:10270:          DEBUG_PRINT1 ("EXECUTING begbuf.\n");
    #####:10271:          if (AT_STRINGS_BEG (d))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:10272:            break;
    #####:10273:          goto fail;
        -:10274:
        -:10275:
        -:10276:	/* Match at the very end of the data.  */
    #####:10277:        case endbuf:
        -:10278:          DEBUG_PRINT1 ("EXECUTING endbuf.\n");
    #####:10279:	  if (AT_STRINGS_END (d))
branch  0 never executed
branch  1 never executed
    #####:10280:	    break;
    #####:10281:          goto fail;
        -:10282:
        -:10283:
        -:10284:        /* on_failure_keep_string_jump is used to optimize `.*\n'.  It
        -:10285:           pushes NULL as the value for the string on the stack.  Then
        -:10286:           `pop_failure_point' will keep the current value for the
        -:10287:           string, instead of restoring it.  To see why, consider
        -:10288:           matching `foo\nbar' against `.*\n'.  The .* matches the foo;
        -:10289:           then the . fails against the \n.  But the next thing we want
        -:10290:           to do is match the \n against the \n; if we restored the
        -:10291:           string value, we would be back at the foo.
        -:10292:
        -:10293:           Because this is used only in specific cases, we don't need to
        -:10294:           check all the things that `on_failure_jump' does, to make
        -:10295:           sure the right things get saved on the stack.  Hence we don't
        -:10296:           share its code.  The only reason to push anything on the
        -:10297:           stack at all is that otherwise we would have to change
        -:10298:           `anychar's code to do something besides goto fail in this
        -:10299:           case; that seems worse than this.  */
    #####:10300:        case on_failure_keep_string_jump:
        -:10301:          DEBUG_PRINT1 ("EXECUTING on_failure_keep_string_jump");
        -:10302:
    #####:10303:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
        -:10304:#ifdef _LIBC
        -:10305:          DEBUG_PRINT3 (" %d (to %p):\n", mcnt, p + mcnt);
        -:10306:#else
        -:10307:          DEBUG_PRINT3 (" %d (to 0x%x):\n", mcnt, p + mcnt);
        -:10308:#endif
        -:10309:
    #####:10310:          PUSH_FAILURE_POINT (p + mcnt, NULL, -2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:10311:          break;
        -:10312:
        -:10313:
        -:10314:	/* Uses of on_failure_jump:
        -:10315:
        -:10316:           Each alternative starts with an on_failure_jump that points
        -:10317:           to the beginning of the next alternative.  Each alternative
        -:10318:           except the last ends with a jump that in effect jumps past
        -:10319:           the rest of the alternatives.  (They really jump to the
        -:10320:           ending jump of the following alternative, because tensioning
        -:10321:           these jumps is a hassle.)
        -:10322:
        -:10323:           Repeats start with an on_failure_jump that points past both
        -:10324:           the repetition text and either the following jump or
        -:10325:           pop_failure_jump back to this on_failure_jump.  */
        -:10326:	case on_failure_jump:
    #####:10327:        on_failure:
        -:10328:          DEBUG_PRINT1 ("EXECUTING on_failure_jump");
        -:10329:
    #####:10330:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
        -:10331:#ifdef _LIBC
        -:10332:          DEBUG_PRINT3 (" %d (to %p)", mcnt, p + mcnt);
        -:10333:#else
        -:10334:          DEBUG_PRINT3 (" %d (to 0x%x)", mcnt, p + mcnt);
        -:10335:#endif
        -:10336:
        -:10337:          /* If this on_failure_jump comes right before a group (i.e.,
        -:10338:             the original * applied to a group), save the information
        -:10339:             for that group and all inner ones, so that if we fail back
        -:10340:             to this point, the group's information will be correct.
        -:10341:             For example, in \(a*\)*\1, we need the preceding group,
        -:10342:             and in \(zz\(a*\)b*\)\2, we need the inner group.  */
        -:10343:
        -:10344:          /* We can't use `p' to check ahead because we push
        -:10345:             a failure point to `p + mcnt' after we do this.  */
    #####:10346:          p1 = p;
        -:10347:
        -:10348:          /* We need to skip no_op's before we look for the
        -:10349:             start_memory in case this on_failure_jump is happening as
        -:10350:             the result of a completed succeed_n, as in \(a\)\{1,3\}b\1
        -:10351:             against aba.  */
    #####:10352:          while (p1 < pend && (re_opcode_t) *p1 == no_op)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10353:            p1++;
        -:10354:
    #####:10355:          if (p1 < pend && (re_opcode_t) *p1 == start_memory)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:10356:            {
        -:10357:              /* We have a new highest active register now.  This will
        -:10358:                 get reset at the start_memory we are about to get to,
        -:10359:                 but we will have saved all the registers relevant to
        -:10360:                 this repetition op, as described above.  */
    #####:10361:              highest_active_reg = *(p1 + 1) + *(p1 + 2);
    #####:10362:              if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
branch  0 never executed
branch  1 never executed
    #####:10363:                lowest_active_reg = *(p1 + 1);
        -:10364:            }
        -:10365:
        -:10366:          DEBUG_PRINT1 (":\n");
    #####:10367:          PUSH_FAILURE_POINT (p + mcnt, d, -2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:10368:          break;
        -:10369:
        -:10370:
        -:10371:        /* A smart repeat ends with `maybe_pop_jump'.
        -:10372:	   We change it to either `pop_failure_jump' or `jump'.  */
    #####:10373:        case maybe_pop_jump:
    #####:10374:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
        -:10375:          DEBUG_PRINT2 ("EXECUTING maybe_pop_jump %d.\n", mcnt);
        -:10376:          {
    #####:10377:	    register unsigned char *p2 = p;
        -:10378:
        -:10379:            /* Compare the beginning of the repeat with what in the
        -:10380:               pattern follows its end. If we can establish that there
        -:10381:               is nothing that they would both match, i.e., that we
        -:10382:               would have to backtrack because of (as in, e.g., `a*a')
        -:10383:               then we can change to pop_failure_jump, because we'll
        -:10384:               never have to backtrack.
        -:10385:
        -:10386:               This is not true in the case of alternatives: in
        -:10387:               `(a|ab)*' we do need to backtrack to the `ab' alternative
        -:10388:               (e.g., if the string was `ab').  But instead of trying to
        -:10389:               detect that here, the alternative has put on a dummy
        -:10390:               failure point which is what we will end up popping.  */
        -:10391:
        -:10392:	    /* Skip over open/close-group commands.
        -:10393:	       If what follows this loop is a ...+ construct,
        -:10394:	       look at what begins its body, since we will have to
        -:10395:	       match at least one of that.  */
        -:10396:	    while (1)
        -:10397:	      {
    #####:10398:		if (p2 + 2 < pend
branch  0 never executed
branch  1 never executed
    #####:10399:		    && ((re_opcode_t) *p2 == stop_memory
branch  0 never executed
branch  1 never executed
    #####:10400:			|| (re_opcode_t) *p2 == start_memory))
branch  0 never executed
branch  1 never executed
    #####:10401:		  p2 += 3;
    #####:10402:		else if (p2 + 6 < pend
branch  0 never executed
branch  1 never executed
    #####:10403:			 && (re_opcode_t) *p2 == dummy_failure_jump)
branch  0 never executed
branch  1 never executed
    #####:10404:		  p2 += 6;
        -:10405:		else
        -:10406:		  break;
        -:10407:	      }
        -:10408:
    #####:10409:	    p1 = p + mcnt;
        -:10410:	    /* p1[0] ... p1[2] are the `on_failure_jump' corresponding
        -:10411:	       to the `maybe_finalize_jump' of this case.  Examine what
        -:10412:	       follows.  */
        -:10413:
        -:10414:            /* If we're at the end of the pattern, we can change.  */
    #####:10415:            if (p2 == pend)
branch  0 never executed
branch  1 never executed
        -:10416:	      {
        -:10417:		/* Consider what happens when matching ":\(.*\)"
        -:10418:		   against ":/".  I don't really understand this code
        -:10419:		   yet.  */
    #####:10420:  	        p[-3] = (unsigned char) pop_failure_jump;
        -:10421:                DEBUG_PRINT1
        -:10422:                  ("  End of pattern: change to `pop_failure_jump'.\n");
        -:10423:              }
        -:10424:
    #####:10425:            else if ((re_opcode_t) *p2 == exactn
branch  0 never executed
branch  1 never executed
    #####:10426:		     || (bufp->newline_anchor && (re_opcode_t) *p2 == endline))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10427:	      {
    #####:10428:		register unsigned char c
    #####:10429:                  = *p2 == (unsigned char) endline ? '\n' : p2[2];
branch  0 never executed
branch  1 never executed
        -:10430:
    #####:10431:                if ((re_opcode_t) p1[3] == exactn && p1[5] != c)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:10432:                  {
    #####:10433:  		    p[-3] = (unsigned char) pop_failure_jump;
        -:10434:                    DEBUG_PRINT3 ("  %c != %c => pop_failure_jump.\n",
        -:10435:                                  c, p1[5]);
        -:10436:                  }
        -:10437:
    #####:10438:		else if ((re_opcode_t) p1[3] == charset
branch  0 never executed
branch  1 never executed
    #####:10439:			 || (re_opcode_t) p1[3] == charset_not)
branch  0 never executed
branch  1 never executed
        -:10440:		  {
    #####:10441:		    int not = (re_opcode_t) p1[3] == charset_not;
        -:10442:
    #####:10443:		    if (c < (unsigned char) (p1[4] * BYTEWIDTH)
branch  0 never executed
branch  1 never executed
    #####:10444:			&& p1[5 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
branch  0 never executed
branch  1 never executed
    #####:10445:		      not = !not;
        -:10446:
        -:10447:                    /* `not' is equal to 1 if c would match, which means
        -:10448:                        that we can't change to pop_failure_jump.  */
    #####:10449:		    if (!not)
branch  0 never executed
branch  1 never executed
        -:10450:                      {
    #####:10451:  		        p[-3] = (unsigned char) pop_failure_jump;
        -:10452:                        DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
        -:10453:                      }
        -:10454:		  }
        -:10455:	      }
    #####:10456:            else if ((re_opcode_t) *p2 == charset)
branch  0 never executed
branch  1 never executed
        -:10457:	      {
        -:10458:		/* We win if the first character of the loop is not part
        -:10459:                   of the charset.  */
    #####:10460:                if ((re_opcode_t) p1[3] == exactn
branch  0 never executed
branch  1 never executed
    #####:10461:		    && ! ((int) p2[1] * BYTEWIDTH > (int) p1[5]
branch  0 never executed
branch  1 never executed
    #####:10462:			  && (p2[2 + p1[5] / BYTEWIDTH]
    #####:10463:			      & (1 << (p1[5] % BYTEWIDTH)))))
branch  0 never executed
branch  1 never executed
        -:10464:                  {
    #####:10465:  		    p[-3] = (unsigned char) pop_failure_jump;
        -:10466:		    DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
        -:10467:                  }
        -:10468:
    #####:10469:		else if ((re_opcode_t) p1[3] == charset_not)
branch  0 never executed
branch  1 never executed
        -:10470:		  {
        -:10471:		    int idx;
        -:10472:		    /* We win if the charset_not inside the loop
        -:10473:		       lists every character listed in the charset after.  */
    #####:10474:		    for (idx = 0; idx < (int) p2[1]; idx++)
branch  0 never executed
branch  1 never executed
    #####:10475:		      if (! (p2[2 + idx] == 0
branch  0 never executed
branch  1 never executed
    #####:10476:			     || (idx < (int) p1[4]
branch  0 never executed
branch  1 never executed
    #####:10477:				 && ((p2[2 + idx] & ~ p1[5 + idx]) == 0))))
branch  0 never executed
branch  1 never executed
        -:10478:			break;
        -:10479:
    #####:10480:		    if (idx == p2[1])
branch  0 never executed
branch  1 never executed
        -:10481:                      {
    #####:10482:  		        p[-3] = (unsigned char) pop_failure_jump;
        -:10483:                        DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
        -:10484:                      }
        -:10485:		  }
    #####:10486:		else if ((re_opcode_t) p1[3] == charset)
branch  0 never executed
branch  1 never executed
        -:10487:		  {
        -:10488:		    int idx;
        -:10489:		    /* We win if the charset inside the loop
        -:10490:		       has no overlap with the one after the loop.  */
    #####:10491:		    for (idx = 0;
    #####:10492:			 idx < (int) p2[1] && idx < (int) p1[4];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10493:			 idx++)
    #####:10494:		      if ((p2[2 + idx] & p1[5 + idx]) != 0)
branch  0 never executed
branch  1 never executed
    #####:10495:			break;
        -:10496:
    #####:10497:		    if (idx == p2[1] || idx == p1[4])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:10498:                      {
    #####:10499:  		        p[-3] = (unsigned char) pop_failure_jump;
        -:10500:                        DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
        -:10501:                      }
        -:10502:		  }
        -:10503:	      }
        -:10504:	  }
    #####:10505:	  p -= 2;		/* Point at relative address again.  */
    #####:10506:	  if ((re_opcode_t) p[-1] != pop_failure_jump)
branch  0 never executed
branch  1 never executed
        -:10507:	    {
    #####:10508:	      p[-1] = (unsigned char) jump;
        -:10509:              DEBUG_PRINT1 ("  Match => jump.\n");
    #####:10510:	      goto unconditional_jump;
        -:10511:	    }
        -:10512:        /* Note fall through.  */
        -:10513:
        -:10514:
        -:10515:	/* The end of a simple repeat has a pop_failure_jump back to
        -:10516:           its matching on_failure_jump, where the latter will push a
        -:10517:           failure point.  The pop_failure_jump takes off failure
        -:10518:           points put on by this pop_failure_jump's matching
        -:10519:           on_failure_jump; we got through the pattern to here from the
        -:10520:           matching on_failure_jump, so didn't fail.  */
        -:10521:        case pop_failure_jump:
        -:10522:          {
        -:10523:            /* We need to pass separate storage for the lowest and
        -:10524:               highest registers, even though we don't care about the
        -:10525:               actual values.  Otherwise, we will restore only one
        -:10526:               register from the stack, since lowest will == highest in
        -:10527:               `pop_failure_point'.  */
        -:10528:            active_reg_t dummy_low_reg, dummy_high_reg;
        -:10529:            unsigned char *pdummy;
        -:10530:            const char *sdummy;
        -:10531:
        -:10532:            DEBUG_PRINT1 ("EXECUTING pop_failure_jump.\n");
    #####:10533:            POP_FAILURE_POINT (sdummy, pdummy,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:10534:                               dummy_low_reg, dummy_high_reg,
        -:10535:                               reg_dummy, reg_dummy, reg_info_dummy);
        -:10536:          }
        -:10537:	  /* Note fall through.  */
        -:10538:
    #####:10539:	unconditional_jump:
        -:10540:#ifdef _LIBC
        -:10541:	  DEBUG_PRINT2 ("\n%p: ", p);
        -:10542:#else
        -:10543:	  DEBUG_PRINT2 ("\n0x%x: ", p);
        -:10544:#endif
        -:10545:          /* Note fall through.  */
        -:10546:
        -:10547:        /* Unconditionally jump (without popping any failure points).  */
    #####:10548:        case jump:
    #####:10549:	  EXTRACT_NUMBER_AND_INCR (mcnt, p);	/* Get the amount to jump.  */
        -:10550:          DEBUG_PRINT2 ("EXECUTING jump %d ", mcnt);
    #####:10551:	  p += mcnt;				/* Do the jump.  */
        -:10552:#ifdef _LIBC
        -:10553:          DEBUG_PRINT2 ("(to %p).\n", p);
        -:10554:#else
        -:10555:          DEBUG_PRINT2 ("(to 0x%x).\n", p);
        -:10556:#endif
    #####:10557:	  break;
        -:10558:
        -:10559:
        -:10560:        /* We need this opcode so we can detect where alternatives end
        -:10561:           in `group_match_null_string_p' et al.  */
    #####:10562:        case jump_past_alt:
        -:10563:          DEBUG_PRINT1 ("EXECUTING jump_past_alt.\n");
    #####:10564:          goto unconditional_jump;
        -:10565:
        -:10566:
        -:10567:        /* Normally, the on_failure_jump pushes a failure point, which
        -:10568:           then gets popped at pop_failure_jump.  We will end up at
        -:10569:           pop_failure_jump, also, and with a pattern of, say, `a+', we
        -:10570:           are skipping over the on_failure_jump, so we have to push
        -:10571:           something meaningless for pop_failure_jump to pop.  */
    #####:10572:        case dummy_failure_jump:
        -:10573:          DEBUG_PRINT1 ("EXECUTING dummy_failure_jump.\n");
        -:10574:          /* It doesn't matter what we push for the string here.  What
        -:10575:             the code at `fail' tests is the value for the pattern.  */
    #####:10576:          PUSH_FAILURE_POINT (NULL, NULL, -2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:10577:          goto unconditional_jump;
        -:10578:
        -:10579:
        -:10580:        /* At the end of an alternative, we need to push a dummy failure
        -:10581:           point in case we are followed by a `pop_failure_jump', because
        -:10582:           we don't want the failure point for the alternative to be
        -:10583:           popped.  For example, matching `(a|ab)*' against `aab'
        -:10584:           requires that we match the `ab' alternative.  */
    #####:10585:        case push_dummy_failure:
        -:10586:          DEBUG_PRINT1 ("EXECUTING push_dummy_failure.\n");
        -:10587:          /* See comments just above at `dummy_failure_jump' about the
        -:10588:             two zeroes.  */
    #####:10589:          PUSH_FAILURE_POINT (NULL, NULL, -2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:10590:          break;
        -:10591:
        -:10592:        /* Have to succeed matching what follows at least n times.
        -:10593:           After that, handle like `on_failure_jump'.  */
    #####:10594:        case succeed_n:
    #####:10595:          EXTRACT_NUMBER (mcnt, p + 2);
        -:10596:          DEBUG_PRINT2 ("EXECUTING succeed_n %d.\n", mcnt);
        -:10597:
        -:10598:          assert (mcnt >= 0);
        -:10599:          /* Originally, this is how many times we HAVE to succeed.  */
    #####:10600:          if (mcnt > 0)
branch  0 never executed
branch  1 never executed
        -:10601:            {
    #####:10602:               mcnt--;
    #####:10603:	       p += 2;
    #####:10604:               STORE_NUMBER_AND_INCR (p, mcnt);
        -:10605:#ifdef _LIBC
        -:10606:               DEBUG_PRINT3 ("  Setting %p to %d.\n", p - 2, mcnt);
        -:10607:#else
        -:10608:               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p - 2, mcnt);
        -:10609:#endif
        -:10610:            }
    #####:10611:	  else if (mcnt == 0)
branch  0 never executed
branch  1 never executed
        -:10612:            {
        -:10613:#ifdef _LIBC
        -:10614:              DEBUG_PRINT2 ("  Setting two bytes from %p to no_op.\n", p+2);
        -:10615:#else
        -:10616:              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+2);
        -:10617:#endif
    #####:10618:	      p[2] = (unsigned char) no_op;
    #####:10619:              p[3] = (unsigned char) no_op;
    #####:10620:              goto on_failure;
        -:10621:            }
    #####:10622:          break;
        -:10623:
    #####:10624:        case jump_n:
    #####:10625:          EXTRACT_NUMBER (mcnt, p + 2);
        -:10626:          DEBUG_PRINT2 ("EXECUTING jump_n %d.\n", mcnt);
        -:10627:
        -:10628:          /* Originally, this is how many times we CAN jump.  */
    #####:10629:          if (mcnt)
branch  0 never executed
branch  1 never executed
        -:10630:            {
    #####:10631:               mcnt--;
    #####:10632:               STORE_NUMBER (p + 2, mcnt);
        -:10633:#ifdef _LIBC
        -:10634:               DEBUG_PRINT3 ("  Setting %p to %d.\n", p + 2, mcnt);
        -:10635:#else
        -:10636:               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p + 2, mcnt);
        -:10637:#endif
    #####:10638:	       goto unconditional_jump;
        -:10639:            }
        -:10640:          /* If don't have to jump any more, skip over the rest of command.  */
        -:10641:	  else
    #####:10642:	    p += 4;
    #####:10643:          break;
        -:10644:
    #####:10645:	case set_number_at:
        -:10646:	  {
        -:10647:            DEBUG_PRINT1 ("EXECUTING set_number_at.\n");
        -:10648:
    #####:10649:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
    #####:10650:            p1 = p + mcnt;
    #####:10651:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
        -:10652:#ifdef _LIBC
        -:10653:            DEBUG_PRINT3 ("  Setting %p to %d.\n", p1, mcnt);
        -:10654:#else
        -:10655:            DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p1, mcnt);
        -:10656:#endif
    #####:10657:	    STORE_NUMBER (p1, mcnt);
    #####:10658:            break;
        -:10659:          }
        -:10660:
        -:10661:#if 0
        -:10662:	/* The DEC Alpha C compiler 3.x generates incorrect code for the
        -:10663:	   test  WORDCHAR_P (d - 1) != WORDCHAR_P (d)  in the expansion of
        -:10664:	   AT_WORD_BOUNDARY, so this code is disabled.  Expanding the
        -:10665:	   macro and introducing temporary variables works around the bug.  */
        -:10666:
        -:10667:	case wordbound:
        -:10668:	  DEBUG_PRINT1 ("EXECUTING wordbound.\n");
        -:10669:	  if (AT_WORD_BOUNDARY (d))
        -:10670:	    break;
        -:10671:	  goto fail;
        -:10672:
        -:10673:	case notwordbound:
        -:10674:	  DEBUG_PRINT1 ("EXECUTING notwordbound.\n");
        -:10675:	  if (AT_WORD_BOUNDARY (d))
        -:10676:	    goto fail;
        -:10677:	  break;
        -:10678:#else
    #####:10679:	case wordbound:
        -:10680:	{
        -:10681:	  boolean prevchar, thischar;
        -:10682:
        -:10683:	  DEBUG_PRINT1 ("EXECUTING wordbound.\n");
    #####:10684:	  if (AT_STRINGS_BEG (d) || AT_STRINGS_END (d))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:10685:	    break;
        -:10686:
    #####:10687:	  prevchar = WORDCHAR_P (d - 1);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10688:	  thischar = WORDCHAR_P (d);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10689:	  if (prevchar != thischar)
branch  0 never executed
branch  1 never executed
    #####:10690:	    break;
    #####:10691:	  goto fail;
        -:10692:	}
        -:10693:
    #####:10694:      case notwordbound:
        -:10695:	{
        -:10696:	  boolean prevchar, thischar;
        -:10697:
        -:10698:	  DEBUG_PRINT1 ("EXECUTING notwordbound.\n");
    #####:10699:	  if (AT_STRINGS_BEG (d) || AT_STRINGS_END (d))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:10700:	    goto fail;
        -:10701:
    #####:10702:	  prevchar = WORDCHAR_P (d - 1);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10703:	  thischar = WORDCHAR_P (d);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10704:	  if (prevchar != thischar)
branch  0 never executed
branch  1 never executed
    #####:10705:	    goto fail;
    #####:10706:	  break;
        -:10707:	}
        -:10708:#endif
        -:10709:
    #####:10710:	case wordbeg:
        -:10711:          DEBUG_PRINT1 ("EXECUTING wordbeg.\n");
    #####:10712:	  if (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - 1)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
        -:10713:	    break;
    #####:10714:          goto fail;
        -:10715:
    #####:10716:	case wordend:
        -:10717:          DEBUG_PRINT1 ("EXECUTING wordend.\n");
    #####:10718:	  if (!AT_STRINGS_BEG (d) && WORDCHAR_P (d - 1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:10719:              && (!WORDCHAR_P (d) || AT_STRINGS_END (d)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:10720:	    break;
    #####:10721:          goto fail;
        -:10722:
        -:10723:#ifdef emacs
        -:10724:  	case before_dot:
        -:10725:          DEBUG_PRINT1 ("EXECUTING before_dot.\n");
        -:10726: 	  if (PTR_CHAR_POS ((unsigned char *) d) >= point)
        -:10727:  	    goto fail;
        -:10728:  	  break;
        -:10729:
        -:10730:  	case at_dot:
        -:10731:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
        -:10732: 	  if (PTR_CHAR_POS ((unsigned char *) d) != point)
        -:10733:  	    goto fail;
        -:10734:  	  break;
        -:10735:
        -:10736:  	case after_dot:
        -:10737:          DEBUG_PRINT1 ("EXECUTING after_dot.\n");
        -:10738:          if (PTR_CHAR_POS ((unsigned char *) d) <= point)
        -:10739:  	    goto fail;
        -:10740:  	  break;
        -:10741:
        -:10742:	case syntaxspec:
        -:10743:          DEBUG_PRINT2 ("EXECUTING syntaxspec %d.\n", mcnt);
        -:10744:	  mcnt = *p++;
        -:10745:	  goto matchsyntax;
        -:10746:
        -:10747:        case wordchar:
        -:10748:          DEBUG_PRINT1 ("EXECUTING Emacs wordchar.\n");
        -:10749:	  mcnt = (int) Sword;
        -:10750:        matchsyntax:
        -:10751:	  PREFETCH ();
        -:10752:	  /* Can't use *d++ here; SYNTAX may be an unsafe macro.  */
        -:10753:	  d++;
        -:10754:	  if (SYNTAX (d[-1]) != (enum syntaxcode) mcnt)
        -:10755:	    goto fail;
        -:10756:          SET_REGS_MATCHED ();
        -:10757:	  break;
        -:10758:
        -:10759:	case notsyntaxspec:
        -:10760:          DEBUG_PRINT2 ("EXECUTING notsyntaxspec %d.\n", mcnt);
        -:10761:	  mcnt = *p++;
        -:10762:	  goto matchnotsyntax;
        -:10763:
        -:10764:        case notwordchar:
        -:10765:          DEBUG_PRINT1 ("EXECUTING Emacs notwordchar.\n");
        -:10766:	  mcnt = (int) Sword;
        -:10767:        matchnotsyntax:
        -:10768:	  PREFETCH ();
        -:10769:	  /* Can't use *d++ here; SYNTAX may be an unsafe macro.  */
        -:10770:	  d++;
        -:10771:	  if (SYNTAX (d[-1]) == (enum syntaxcode) mcnt)
        -:10772:	    goto fail;
        -:10773:	  SET_REGS_MATCHED ();
        -:10774:          break;
        -:10775:
        -:10776:#else /* not emacs */
    #####:10777:	case wordchar:
        -:10778:          DEBUG_PRINT1 ("EXECUTING non-Emacs wordchar.\n");
    #####:10779:	  PREFETCH ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10780:          if (!WORDCHAR_P (d))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:10781:            goto fail;
    #####:10782:	  SET_REGS_MATCHED ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10783:          d++;
    #####:10784:	  break;
        -:10785:
    #####:10786:	case notwordchar:
        -:10787:          DEBUG_PRINT1 ("EXECUTING non-Emacs notwordchar.\n");
    #####:10788:	  PREFETCH ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10789:	  if (WORDCHAR_P (d))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:10790:            goto fail;
    #####:10791:          SET_REGS_MATCHED ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10792:          d++;
    #####:10793:	  break;
        -:10794:#endif /* not emacs */
        -:10795:
    #####:10796:        default:
    #####:10797:          abort ();
call    0 never executed
        -:10798:	}
    #####:10799:      continue;  /* Successfully executed one pattern command; keep going.  */
        -:10800:
        -:10801:
        -:10802:    /* We goto here if a matching operation fails. */
    #####:10803:    fail:
    #####:10804:      if (!FAIL_STACK_EMPTY ())
branch  0 never executed
branch  1 never executed
        -:10805:	{ /* A restart point is known.  Restore to that state.  */
        -:10806:          DEBUG_PRINT1 ("\nFAIL:\n");
    #####:10807:          POP_FAILURE_POINT (d, p,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:10808:                             lowest_active_reg, highest_active_reg,
        -:10809:                             regstart, regend, reg_info);
        -:10810:
        -:10811:          /* If this failure point is a dummy, try the next one.  */
    #####:10812:          if (!p)
branch  0 never executed
branch  1 never executed
    #####:10813:	    goto fail;
        -:10814:
        -:10815:          /* If we failed to the end of the pattern, don't examine *p.  */
        -:10816:	  assert (p <= pend);
    #####:10817:          if (p < pend)
branch  0 never executed
branch  1 never executed
        -:10818:            {
    #####:10819:              boolean is_a_jump_n = false;
        -:10820:
        -:10821:              /* If failed to a backwards jump that's part of a repetition
        -:10822:                 loop, need to pop this failure point and use the next one.  */
    #####:10823:              switch ((re_opcode_t) *p)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -:10824:                {
    #####:10825:                case jump_n:
    #####:10826:                  is_a_jump_n = true;
    #####:10827:                case maybe_pop_jump:
        -:10828:                case pop_failure_jump:
        -:10829:                case jump:
    #####:10830:                  p1 = p + 1;
    #####:10831:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####:10832:                  p1 += mcnt;
        -:10833:
    #####:10834:                  if ((is_a_jump_n && (re_opcode_t) *p1 == succeed_n)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10835:                      || (!is_a_jump_n
branch  0 never executed
branch  1 never executed
    #####:10836:                          && (re_opcode_t) *p1 == on_failure_jump))
branch  0 never executed
branch  1 never executed
    #####:10837:                    goto fail;
    #####:10838:                  break;
    #####:10839:                default:
        -:10840:                  /* do nothing */ ;
        -:10841:                }
        -:10842:            }
        -:10843:
    #####:10844:          if (d >= string1 && d <= end1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10845:	    dend = end_match_1;
        -:10846:        }
        -:10847:      else
    #####:10848:        break;   /* Matching at this starting point really fails.  */
        -:10849:    } /* for (;;) */
        -:10850:
    #####:10851:  if (best_regs_set)
branch  0 never executed
branch  1 never executed
    #####:10852:    goto restore_best_regs;
        -:10853:
    #####:10854:  FREE_VARIABLES ();
        -:10855:
    #####:10856:  return -1;         			/* Failure to match.  */
        -:10857:} /* re_match_2 */
        -:10858:
        -:10859:/* Subroutine definitions for re_match_2.  */
        -:10860:
        -:10861:
        -:10862:/* We are passed P pointing to a register number after a start_memory.
        -:10863:
        -:10864:   Return true if the pattern up to the corresponding stop_memory can
        -:10865:   match the empty string, and false otherwise.
        -:10866:
        -:10867:   If we find the matching stop_memory, sets P to point to one past its number.
        -:10868:   Otherwise, sets P to an undefined byte less than or equal to END.
        -:10869:
        -:10870:   We don't handle duplicates properly (yet).  */
        -:10871:
        -:10872:static boolean
function group_match_null_string_p called 0 returned 0% blocks executed 0%
    #####:10873:group_match_null_string_p (p, end, reg_info)
        -:10874:    unsigned char **p, *end;
        -:10875:    register_info_type *reg_info;
        -:10876:{
        -:10877:  int mcnt;
        -:10878:  /* Point to after the args to the start_memory.  */
    #####:10879:  unsigned char *p1 = *p + 2;
        -:10880:
    #####:10881:  while (p1 < end)
branch  0 never executed
branch  1 never executed
        -:10882:    {
        -:10883:      /* Skip over opcodes that can match nothing, and return true or
        -:10884:	 false, as appropriate, when we get to one that can't, or to the
        -:10885:         matching stop_memory.  */
        -:10886:
    #####:10887:      switch ((re_opcode_t) *p1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -:10888:        {
        -:10889:        /* Could be either a loop or a series of alternatives.  */
    #####:10890:        case on_failure_jump:
    #####:10891:          p1++;
    #####:10892:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
        -:10893:
        -:10894:          /* If the next operation is not a jump backwards in the
        -:10895:	     pattern.  */
        -:10896:
    #####:10897:	  if (mcnt >= 0)
branch  0 never executed
branch  1 never executed
        -:10898:	    {
        -:10899:              /* Go through the on_failure_jumps of the alternatives,
        -:10900:                 seeing if any of the alternatives cannot match nothing.
        -:10901:                 The last alternative starts with only a jump,
        -:10902:                 whereas the rest start with on_failure_jump and end
        -:10903:                 with a jump, e.g., here is the pattern for `a|b|c':
        -:10904:
        -:10905:                 /on_failure_jump/0/6/exactn/1/a/jump_past_alt/0/6
        -:10906:                 /on_failure_jump/0/6/exactn/1/b/jump_past_alt/0/3
        -:10907:                 /exactn/1/c
        -:10908:
        -:10909:                 So, we have to first go through the first (n-1)
        -:10910:                 alternatives and then deal with the last one separately.  */
        -:10911:
        -:10912:
        -:10913:              /* Deal with the first (n-1) alternatives, which start
        -:10914:                 with an on_failure_jump (see above) that jumps to right
        -:10915:                 past a jump_past_alt.  */
        -:10916:
    #####:10917:              while ((re_opcode_t) p1[mcnt-3] == jump_past_alt)
branch  0 never executed
branch  1 never executed
        -:10918:                {
        -:10919:                  /* `mcnt' holds how many bytes long the alternative
        -:10920:                     is, including the ending `jump_past_alt' and
        -:10921:                     its number.  */
        -:10922:
    #####:10923:                  if (!alt_match_null_string_p (p1, p1 + mcnt - 3,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10924:				                      reg_info))
    #####:10925:                    return false;
        -:10926:
        -:10927:                  /* Move to right after this alternative, including the
        -:10928:		     jump_past_alt.  */
    #####:10929:                  p1 += mcnt;
        -:10930:
        -:10931:                  /* Break if it's the beginning of an n-th alternative
        -:10932:                     that doesn't begin with an on_failure_jump.  */
    #####:10933:                  if ((re_opcode_t) *p1 != on_failure_jump)
branch  0 never executed
branch  1 never executed
    #####:10934:                    break;
        -:10935:
        -:10936:		  /* Still have to check that it's not an n-th
        -:10937:		     alternative that starts with an on_failure_jump.  */
    #####:10938:		  p1++;
    #####:10939:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####:10940:                  if ((re_opcode_t) p1[mcnt-3] != jump_past_alt)
branch  0 never executed
branch  1 never executed
        -:10941:                    {
        -:10942:		      /* Get to the beginning of the n-th alternative.  */
    #####:10943:                      p1 -= 3;
    #####:10944:                      break;
        -:10945:                    }
        -:10946:                }
        -:10947:
        -:10948:              /* Deal with the last alternative: go back and get number
        -:10949:                 of the `jump_past_alt' just before it.  `mcnt' contains
        -:10950:                 the length of the alternative.  */
    #####:10951:              EXTRACT_NUMBER (mcnt, p1 - 2);
        -:10952:
    #####:10953:              if (!alt_match_null_string_p (p1, p1 + mcnt, reg_info))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10954:                return false;
        -:10955:
    #####:10956:              p1 += mcnt;	/* Get past the n-th alternative.  */
        -:10957:            } /* if mcnt > 0 */
    #####:10958:          break;
        -:10959:
        -:10960:
    #####:10961:        case stop_memory:
        -:10962:	  assert (p1[1] == **p);
    #####:10963:          *p = p1 + 2;
    #####:10964:          return true;
        -:10965:
        -:10966:
    #####:10967:        default:
    #####:10968:          if (!common_op_match_null_string_p (&p1, end, reg_info))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10969:            return false;
        -:10970:        }
        -:10971:    } /* while p1 < end */
        -:10972:
    #####:10973:  return false;
        -:10974:} /* group_match_null_string_p */
        -:10975:
        -:10976:
        -:10977:/* Similar to group_match_null_string_p, but doesn't deal with alternatives:
        -:10978:   It expects P to be the first byte of a single alternative and END one
        -:10979:   byte past the last. The alternative can contain groups.  */
        -:10980:
        -:10981:static boolean
function alt_match_null_string_p called 0 returned 0% blocks executed 0%
    #####:10982:alt_match_null_string_p (p, end, reg_info)
        -:10983:    unsigned char *p, *end;
        -:10984:    register_info_type *reg_info;
        -:10985:{
        -:10986:  int mcnt;
    #####:10987:  unsigned char *p1 = p;
        -:10988:
    #####:10989:  while (p1 < end)
branch  0 never executed
branch  1 never executed
        -:10990:    {
        -:10991:      /* Skip over opcodes that can match nothing, and break when we get
        -:10992:         to one that can't.  */
        -:10993:
    #####:10994:      switch ((re_opcode_t) *p1)
branch  0 never executed
branch  1 never executed
        -:10995:        {
        -:10996:	/* It's a loop.  */
    #####:10997:        case on_failure_jump:
    #####:10998:          p1++;
    #####:10999:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####:11000:          p1 += mcnt;
    #####:11001:          break;
        -:11002:
    #####:11003:	default:
    #####:11004:          if (!common_op_match_null_string_p (&p1, end, reg_info))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11005:            return false;
        -:11006:        }
        -:11007:    }  /* while p1 < end */
        -:11008:
    #####:11009:  return true;
        -:11010:} /* alt_match_null_string_p */
        -:11011:
        -:11012:
        -:11013:/* Deals with the ops common to group_match_null_string_p and
        -:11014:   alt_match_null_string_p.
        -:11015:
        -:11016:   Sets P to one after the op and its arguments, if any.  */
        -:11017:
        -:11018:static boolean
function common_op_match_null_string_p called 0 returned 0% blocks executed 0%
    #####:11019:common_op_match_null_string_p (p, end, reg_info)
        -:11020:    unsigned char **p, *end;
        -:11021:    register_info_type *reg_info;
        -:11022:{
        -:11023:  int mcnt;
        -:11024:  boolean ret;
        -:11025:  int reg_no;
    #####:11026:  unsigned char *p1 = *p;
        -:11027:
    #####:11028:  switch ((re_opcode_t) *p1++)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:11029:    {
    #####:11030:    case no_op:
        -:11031:    case begline:
        -:11032:    case endline:
        -:11033:    case begbuf:
        -:11034:    case endbuf:
        -:11035:    case wordbeg:
        -:11036:    case wordend:
        -:11037:    case wordbound:
        -:11038:    case notwordbound:
        -:11039:#ifdef emacs
        -:11040:    case before_dot:
        -:11041:    case at_dot:
        -:11042:    case after_dot:
        -:11043:#endif
    #####:11044:      break;
        -:11045:
    #####:11046:    case start_memory:
    #####:11047:      reg_no = *p1;
        -:11048:      assert (reg_no > 0 && reg_no <= MAX_REGNUM);
    #####:11049:      ret = group_match_null_string_p (&p1, end, reg_info);
call    0 never executed
        -:11050:
        -:11051:      /* Have to set this here in case we're checking a group which
        -:11052:         contains a group and a back reference to it.  */
        -:11053:
    #####:11054:      if (REG_MATCH_NULL_STRING_P (reg_info[reg_no]) == MATCH_NULL_UNSET_VALUE)
branch  0 never executed
branch  1 never executed
    #####:11055:        REG_MATCH_NULL_STRING_P (reg_info[reg_no]) = ret;
        -:11056:
    #####:11057:      if (!ret)
branch  0 never executed
branch  1 never executed
    #####:11058:        return false;
    #####:11059:      break;
        -:11060:
        -:11061:    /* If this is an optimized succeed_n for zero times, make the jump.  */
    #####:11062:    case jump:
    #####:11063:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####:11064:      if (mcnt >= 0)
branch  0 never executed
branch  1 never executed
    #####:11065:        p1 += mcnt;
        -:11066:      else
    #####:11067:        return false;
    #####:11068:      break;
        -:11069:
    #####:11070:    case succeed_n:
        -:11071:      /* Get to the number of times to succeed.  */
    #####:11072:      p1 += 2;
    #####:11073:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
        -:11074:
    #####:11075:      if (mcnt == 0)
branch  0 never executed
branch  1 never executed
        -:11076:        {
    #####:11077:          p1 -= 4;
    #####:11078:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####:11079:          p1 += mcnt;
        -:11080:        }
        -:11081:      else
    #####:11082:        return false;
    #####:11083:      break;
        -:11084:
    #####:11085:    case duplicate:
    #####:11086:      if (!REG_MATCH_NULL_STRING_P (reg_info[*p1]))
branch  0 never executed
branch  1 never executed
    #####:11087:        return false;
    #####:11088:      break;
        -:11089:
    #####:11090:    case set_number_at:
    #####:11091:      p1 += 4;
        -:11092:
    #####:11093:    default:
        -:11094:      /* All other opcodes mean we cannot match the empty string.  */
    #####:11095:      return false;
        -:11096:  }
        -:11097:
    #####:11098:  *p = p1;
    #####:11099:  return true;
        -:11100:} /* common_op_match_null_string_p */
        -:11101:
        -:11102:
        -:11103:/* Return zero if TRANSLATE[S1] and TRANSLATE[S2] are identical for LEN
        -:11104:   bytes; nonzero otherwise.  */
        -:11105:
        -:11106:static int
function bcmp_translate called 0 returned 0% blocks executed 0%
    #####:11107:bcmp_translate (s1, s2, len, translate)
        -:11108:     const char *s1, *s2;
        -:11109:     register int len;
        -:11110:     RE_TRANSLATE_TYPE translate;
        -:11111:{
    #####:11112:  register const unsigned char *p1 = (const unsigned char *) s1;
    #####:11113:  register const unsigned char *p2 = (const unsigned char *) s2;
    #####:11114:  while (len)
branch  0 never executed
branch  1 never executed
        -:11115:    {
    #####:11116:      if (translate[*p1++] != translate[*p2++]) return 1;
branch  0 never executed
branch  1 never executed
    #####:11117:      len--;
        -:11118:    }
    #####:11119:  return 0;
        -:11120:}
        -:11121:
        -:11122:/* Entry points for GNU code.  */
        -:11123:
        -:11124:/* re_compile_pattern is the GNU regular expression compiler: it
        -:11125:   compiles PATTERN (of length SIZE) and puts the result in BUFP.
        -:11126:   Returns 0 if the pattern was valid, otherwise an error string.
        -:11127:
        -:11128:   Assumes the `allocated' (and perhaps `buffer') and `translate' fields
        -:11129:   are set in BUFP on entry.
        -:11130:
        -:11131:   We call regex_compile to do the actual compilation.  */
        -:11132:
        -:11133:const char *
function re_compile_pattern called 781 returned 100% blocks executed 100%
      781:11134:re_compile_pattern (pattern, length, bufp)
        -:11135:     const char *pattern;
        -:11136:     size_t length;
        -:11137:     struct re_pattern_buffer *bufp;
        -:11138:{
        -:11139:  reg_errcode_t ret;
        -:11140:
        -:11141:  /* GNU code is written to assume at least RE_NREGS registers will be set
        -:11142:     (and at least one extra will be -1).  */
      781:11143:  bufp->regs_allocated = REGS_UNALLOCATED;
        -:11144:
        -:11145:  /* And GNU code determines whether or not to get register information
        -:11146:     by passing null for the REGS argument to re_match, etc., not by
        -:11147:     setting no_sub.  */
      781:11148:  bufp->no_sub = 0;
        -:11149:
        -:11150:  /* Match anchors at newline.  */
      781:11151:  bufp->newline_anchor = 1;
        -:11152:
      781:11153:  ret = regex_compile (pattern, length, re_syntax_options, bufp);
call    0 returned 781
        -:11154:
      781:11155:  if (!ret)
branch  0 taken 722 (fallthrough)
branch  1 taken 59
      722:11156:    return NULL;
       59:11157:  return gettext (re_error_msgid[(int) ret]);
        -:11158:}
        -:11159:#ifdef _LIBC
        -:11160:weak_alias (__re_compile_pattern, re_compile_pattern)
        -:11161:#endif
        -:11162:
        -:11163:/* Entry points compatible with 4.2 BSD regex library.  We don't define
        -:11164:   them unless specifically requested.  */
        -:11165:
        -:11166:#if defined _REGEX_RE_COMP || defined _LIBC
        -:11167:
        -:11168:/* BSD has one and only one pattern buffer.  */
        -:11169:static struct re_pattern_buffer re_comp_buf;
        -:11170:
        -:11171:char *
        -:11172:#ifdef _LIBC
        -:11173:/* Make these definitions weak in libc, so POSIX programs can redefine
        -:11174:   these names if they don't use our functions, and still use
        -:11175:   regcomp/regexec below without link errors.  */
        -:11176:weak_function
        -:11177:#endif
        -:11178:re_comp (s)
        -:11179:    const char *s;
        -:11180:{
        -:11181:  reg_errcode_t ret;
        -:11182:
        -:11183:  if (!s)
        -:11184:    {
        -:11185:      if (!re_comp_buf.buffer)
        -:11186:	return gettext ("No previous regular expression");
        -:11187:      return 0;
        -:11188:    }
        -:11189:
        -:11190:  if (!re_comp_buf.buffer)
        -:11191:    {
        -:11192:      re_comp_buf.buffer = (unsigned char *) malloc (200);
        -:11193:      if (re_comp_buf.buffer == NULL)
        -:11194:        return (char *) gettext (re_error_msgid[(int) REG_ESPACE]);
        -:11195:      re_comp_buf.allocated = 200;
        -:11196:
        -:11197:      re_comp_buf.fastmap = (char *) malloc (1 << BYTEWIDTH);
        -:11198:      if (re_comp_buf.fastmap == NULL)
        -:11199:	return (char *) gettext (re_error_msgid[(int) REG_ESPACE]);
        -:11200:    }
        -:11201:
        -:11202:  /* Since `re_exec' always passes NULL for the `regs' argument, we
        -:11203:     don't need to initialize the pattern buffer fields which affect it.  */
        -:11204:
        -:11205:  /* Match anchors at newlines.  */
        -:11206:  re_comp_buf.newline_anchor = 1;
        -:11207:
        -:11208:  ret = regex_compile (s, strlen (s), re_syntax_options, &re_comp_buf);
        -:11209:
        -:11210:  if (!ret)
        -:11211:    return NULL;
        -:11212:
        -:11213:  /* Yes, we're discarding `const' here if !HAVE_LIBINTL.  */
        -:11214:  return (char *) gettext (re_error_msgid[(int) ret]);
        -:11215:}
        -:11216:
        -:11217:
        -:11218:int
        -:11219:#ifdef _LIBC
        -:11220:weak_function
        -:11221:#endif
        -:11222:re_exec (s)
        -:11223:    const char *s;
        -:11224:{
        -:11225:  const int len = strlen (s);
        -:11226:  return
        -:11227:    0 <= re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
        -:11228:}
        -:11229:
        -:11230:#endif /* _REGEX_RE_COMP */
        -:11231:
        -:11232:/* POSIX.2 functions.  Don't define these for Emacs.  */
        -:11233:
        -:11234:#ifndef emacs
        -:11235:
        -:11236:/* regcomp takes a regular expression as a string and compiles it.
        -:11237:
        -:11238:   PREG is a regex_t *.  We do not expect any fields to be initialized,
        -:11239:   since POSIX says we shouldn't.  Thus, we set
        -:11240:
        -:11241:     `buffer' to the compiled pattern;
        -:11242:     `used' to the length of the compiled pattern;
        -:11243:     `syntax' to RE_SYNTAX_POSIX_EXTENDED if the
        -:11244:       REG_EXTENDED bit in CFLAGS is set; otherwise, to
        -:11245:       RE_SYNTAX_POSIX_BASIC;
        -:11246:     `newline_anchor' to REG_NEWLINE being set in CFLAGS;
        -:11247:     `fastmap' to an allocated space for the fastmap;
        -:11248:     `fastmap_accurate' to zero;
        -:11249:     `re_nsub' to the number of subexpressions in PATTERN.
        -:11250:
        -:11251:   PATTERN is the address of the pattern string.
        -:11252:
        -:11253:   CFLAGS is a series of bits which affect compilation.
        -:11254:
        -:11255:     If REG_EXTENDED is set, we use POSIX extended syntax; otherwise, we
        -:11256:     use POSIX basic syntax.
        -:11257:
        -:11258:     If REG_NEWLINE is set, then . and [^...] don't match newline.
        -:11259:     Also, regexec will try a match beginning after every newline.
        -:11260:
        -:11261:     If REG_ICASE is set, then we considers upper- and lowercase
        -:11262:     versions of letters to be equivalent when matching.
        -:11263:
        -:11264:     If REG_NOSUB is set, then when PREG is passed to regexec, that
        -:11265:     routine will report only success or failure, and nothing about the
        -:11266:     registers.
        -:11267:
        -:11268:   It returns 0 if it succeeds, nonzero if it doesn't.  (See regex.h for
        -:11269:   the return codes and their meanings.)  */
        -:11270:
        -:11271:int
function regcomp called 0 returned 0% blocks executed 0%
    #####:11272:regcomp (preg, pattern, cflags)
        -:11273:    regex_t *preg;
        -:11274:    const char *pattern;
        -:11275:    int cflags;
        -:11276:{
        -:11277:  reg_errcode_t ret;
    #####:11278:  reg_syntax_t syntax
    #####:11279:    = (cflags & REG_EXTENDED) ?
    #####:11280:      RE_SYNTAX_POSIX_EXTENDED : RE_SYNTAX_POSIX_BASIC;
branch  0 never executed
branch  1 never executed
        -:11281:
        -:11282:  /* regex_compile will allocate the space for the compiled pattern.  */
    #####:11283:  preg->buffer = 0;
    #####:11284:  preg->allocated = 0;
    #####:11285:  preg->used = 0;
        -:11286:
        -:11287:  /* Try to allocate space for the fastmap.  */
    #####:11288:  preg->fastmap = (char *) malloc (1 << BYTEWIDTH);
call    0 never executed
        -:11289:
    #####:11290:  if (cflags & REG_ICASE)
branch  0 never executed
branch  1 never executed
        -:11291:    {
        -:11292:      unsigned i;
        -:11293:
        -:11294:      preg->translate
    #####:11295:	= (RE_TRANSLATE_TYPE) malloc (CHAR_SET_SIZE
call    0 never executed
        -:11296:				      * sizeof (*(RE_TRANSLATE_TYPE)0));
    #####:11297:      if (preg->translate == NULL)
branch  0 never executed
branch  1 never executed
    #####:11298:        return (int) REG_ESPACE;
        -:11299:
        -:11300:      /* Map uppercase characters to corresponding lowercase ones.  */
    #####:11301:      for (i = 0; i < CHAR_SET_SIZE; i++)
branch  0 never executed
branch  1 never executed
    #####:11302:        preg->translate[i] = ISUPPER (i) ? tolower (i) : i;
branch  0 never executed
branch  1 never executed
        -:11303:    }
        -:11304:  else
    #####:11305:    preg->translate = NULL;
        -:11306:
        -:11307:  /* If REG_NEWLINE is set, newlines are treated differently.  */
    #####:11308:  if (cflags & REG_NEWLINE)
branch  0 never executed
branch  1 never executed
        -:11309:    { /* REG_NEWLINE implies neither . nor [^...] match newline.  */
    #####:11310:      syntax &= ~RE_DOT_NEWLINE;
    #####:11311:      syntax |= RE_HAT_LISTS_NOT_NEWLINE;
        -:11312:      /* It also changes the matching behavior.  */
    #####:11313:      preg->newline_anchor = 1;
        -:11314:    }
        -:11315:  else
    #####:11316:    preg->newline_anchor = 0;
        -:11317:
    #####:11318:  preg->no_sub = !!(cflags & REG_NOSUB);
        -:11319:
        -:11320:  /* POSIX says a null character in the pattern terminates it, so we
        -:11321:     can use strlen here in compiling the pattern.  */
    #####:11322:  ret = regex_compile (pattern, strlen (pattern), syntax, preg);
call    0 never executed
        -:11323:
        -:11324:  /* POSIX doesn't distinguish between an unmatched open-group and an
        -:11325:     unmatched close-group: both are REG_EPAREN.  */
    #####:11326:  if (ret == REG_ERPAREN) ret = REG_EPAREN;
branch  0 never executed
branch  1 never executed
        -:11327:
    #####:11328:  if (ret == REG_NOERROR && preg->fastmap)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:11329:    {
        -:11330:      /* Compute the fastmap now, since regexec cannot modify the pattern
        -:11331:	 buffer.  */
    #####:11332:      if (re_compile_fastmap (preg) == -2)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11333:	{
        -:11334:	  /* Some error occured while computing the fastmap, just forget
        -:11335:	     about it.  */
    #####:11336:	  free (preg->fastmap);
    #####:11337:	  preg->fastmap = NULL;
        -:11338:	}
        -:11339:    }
        -:11340:
    #####:11341:  return (int) ret;
        -:11342:}
        -:11343:#ifdef _LIBC
        -:11344:weak_alias (__regcomp, regcomp)
        -:11345:#endif
        -:11346:
        -:11347:
        -:11348:/* regexec searches for a given pattern, specified by PREG, in the
        -:11349:   string STRING.
        -:11350:
        -:11351:   If NMATCH is zero or REG_NOSUB was set in the cflags argument to
        -:11352:   `regcomp', we ignore PMATCH.  Otherwise, we assume PMATCH has at
        -:11353:   least NMATCH elements, and we set them to the offsets of the
        -:11354:   corresponding matched substrings.
        -:11355:
        -:11356:   EFLAGS specifies `execution flags' which affect matching: if
        -:11357:   REG_NOTBOL is set, then ^ does not match at the beginning of the
        -:11358:   string; if REG_NOTEOL is set, then $ does not match at the end.
        -:11359:
        -:11360:   We return 0 if we find a match and REG_NOMATCH if not.  */
        -:11361:
        -:11362:int
function regexec called 0 returned 0% blocks executed 0%
    #####:11363:regexec (preg, string, nmatch, pmatch, eflags)
        -:11364:    const regex_t *preg;
        -:11365:    const char *string;
        -:11366:    size_t nmatch;
        -:11367:    regmatch_t pmatch[];
        -:11368:    int eflags;
        -:11369:{
        -:11370:  int ret;
        -:11371:  struct re_registers regs;
        -:11372:  regex_t private_preg;
    #####:11373:  int len = strlen (string);
    #####:11374:  boolean want_reg_info = !preg->no_sub && nmatch > 0;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:11375:
    #####:11376:  private_preg = *preg;
        -:11377:
    #####:11378:  private_preg.not_bol = !!(eflags & REG_NOTBOL);
    #####:11379:  private_preg.not_eol = !!(eflags & REG_NOTEOL);
        -:11380:
        -:11381:  /* The user has told us exactly how many registers to return
        -:11382:     information about, via `nmatch'.  We have to pass that on to the
        -:11383:     matching routines.  */
    #####:11384:  private_preg.regs_allocated = REGS_FIXED;
        -:11385:
    #####:11386:  if (want_reg_info)
branch  0 never executed
branch  1 never executed
        -:11387:    {
    #####:11388:      regs.num_regs = nmatch;
    #####:11389:      regs.start = TALLOC (nmatch * 2, regoff_t);
call    0 never executed
    #####:11390:      if (regs.start == NULL)
branch  0 never executed
branch  1 never executed
    #####:11391:        return (int) REG_NOMATCH;
    #####:11392:      regs.end = regs.start + nmatch;
        -:11393:    }
        -:11394:
        -:11395:  /* Perform the searching operation.  */
    #####:11396:  ret = re_search (&private_preg, string, len,
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:11397:                   /* start: */ 0, /* range: */ len,
        -:11398:                   want_reg_info ? &regs : (struct re_registers *) 0);
        -:11399:
        -:11400:  /* Copy the register information to the POSIX structure.  */
    #####:11401:  if (want_reg_info)
branch  0 never executed
branch  1 never executed
        -:11402:    {
    #####:11403:      if (ret >= 0)
branch  0 never executed
branch  1 never executed
        -:11404:        {
        -:11405:          unsigned r;
        -:11406:
    #####:11407:          for (r = 0; r < nmatch; r++)
branch  0 never executed
branch  1 never executed
        -:11408:            {
    #####:11409:              pmatch[r].rm_so = regs.start[r];
    #####:11410:              pmatch[r].rm_eo = regs.end[r];
        -:11411:            }
        -:11412:        }
        -:11413:
        -:11414:      /* If we needed the temporary register info, free the space now.  */
    #####:11415:      free (regs.start);
        -:11416:    }
        -:11417:
        -:11418:  /* We want zero return to mean success, unlike `re_search'.  */
    #####:11419:  return ret >= 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
        -:11420:}
        -:11421:#ifdef _LIBC
        -:11422:weak_alias (__regexec, regexec)
        -:11423:#endif
        -:11424:
        -:11425:
        -:11426:/* Returns a message corresponding to an error code, ERRCODE, returned
        -:11427:   from either regcomp or regexec.   We don't use PREG here.  */
        -:11428:
        -:11429:size_t
function regerror called 0 returned 0% blocks executed 0%
    #####:11430:regerror (errcode, preg, errbuf, errbuf_size)
        -:11431:    int errcode;
        -:11432:    const regex_t *preg;
        -:11433:    char *errbuf;
        -:11434:    size_t errbuf_size;
        -:11435:{
        -:11436:  const char *msg;
        -:11437:  size_t msg_size;
        -:11438:
    #####:11439:  if (errcode < 0
branch  0 never executed
branch  1 never executed
    #####:11440:      || errcode >= (int) (sizeof (re_error_msgid)
branch  0 never executed
branch  1 never executed
        -:11441:			   / sizeof (re_error_msgid[0])))
        -:11442:    /* Only error codes returned by the rest of the code should be passed
        -:11443:       to this routine.  If we are given anything else, or if other regex
        -:11444:       code generates an invalid error code, then the program has a bug.
        -:11445:       Dump core so we can fix it.  */
    #####:11446:    abort ();
call    0 never executed
        -:11447:
    #####:11448:  msg = gettext (re_error_msgid[errcode]);
        -:11449:
    #####:11450:  msg_size = strlen (msg) + 1; /* Includes the null.  */
        -:11451:
    #####:11452:  if (errbuf_size != 0)
branch  0 never executed
branch  1 never executed
        -:11453:    {
    #####:11454:      if (msg_size > errbuf_size)
branch  0 never executed
branch  1 never executed
        -:11455:        {
        -:11456:#if defined HAVE_MEMPCPY || defined _LIBC
        -:11457:	  *((char *) __mempcpy (errbuf, msg, errbuf_size - 1)) = '\0';
        -:11458:#else
    #####:11459:          memcpy (errbuf, msg, errbuf_size - 1);
    #####:11460:          errbuf[errbuf_size - 1] = 0;
        -:11461:#endif
        -:11462:        }
        -:11463:      else
    #####:11464:        memcpy (errbuf, msg, msg_size);
        -:11465:    }
        -:11466:
    #####:11467:  return msg_size;
        -:11468:}
        -:11469:#ifdef _LIBC
        -:11470:weak_alias (__regerror, regerror)
        -:11471:#endif
        -:11472:
        -:11473:
        -:11474:/* Free dynamically allocated space used by PREG.  */
        -:11475:
        -:11476:void
function regfree called 0 returned 0% blocks executed 0%
    #####:11477:regfree (preg)
        -:11478:    regex_t *preg;
        -:11479:{
    #####:11480:  if (preg->buffer != NULL)
branch  0 never executed
branch  1 never executed
    #####:11481:    free (preg->buffer);
    #####:11482:  preg->buffer = NULL;
        -:11483:
    #####:11484:  preg->allocated = 0;
    #####:11485:  preg->used = 0;
        -:11486:
    #####:11487:  if (preg->fastmap != NULL)
branch  0 never executed
branch  1 never executed
    #####:11488:    free (preg->fastmap);
    #####:11489:  preg->fastmap = NULL;
    #####:11490:  preg->fastmap_accurate = 0;
        -:11491:
    #####:11492:  if (preg->translate != NULL)
branch  0 never executed
branch  1 never executed
    #####:11493:    free (preg->translate);
    #####:11494:  preg->translate = NULL;
    #####:11495:}
        -:11496:#ifdef _LIBC
        -:11497:weak_alias (__regfree, regfree)
        -:11498:#endif
        -:11499:
        -:11500:#endif /* not emacs  */
        -:11501:/* savedir.c -- save the list of files in a directory in a string
        -:11502:   Copyright (C) 1990, 1997, 1998 Free Software Foundation, Inc.
        -:11503:
        -:11504:   This program is free software; you can redistribute it and/or modify
        -:11505:   it under the terms of the GNU General Public License as published by
        -:11506:   the Free Software Foundation; either version 2, or (at your option)
        -:11507:   any later version.
        -:11508:
        -:11509:   This program is distributed in the hope that it will be useful,
        -:11510:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:11511:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:11512:   GNU General Public License for more details.
        -:11513:
        -:11514:   You should have received a copy of the GNU General Public License
        -:11515:   along with this program; if not, write to the Free Software Foundation,
        -:11516:   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
        -:11517:
        -:11518:/* Written by David MacKenzie <djm@gnu.ai.mit.edu>. */
        -:11519:
        -:11520:#if HAVE_CONFIG_H
        -:11521:#if flag_config==0
        -:11522:# include <config.h>
        -:11523:#define flag_config 1
        -:11524:#endif
        -:11525:#endif
        -:11526:
        -:11527:/*#include <sys/types.h>*/
        -:11528:
        -:11529:#if HAVE_UNISTD_H
        -:11530:# include <unistd.h>
        -:11531:#define flag_unistd 1
        -:11532:#endif
        -:11533:
        -:11534:#if HAVE_DIRENT_H
        -:11535:# include <dirent.h>
        -:11536:# define NAMLEN(dirent) strlen((dirent)->d_name)
        -:11537:#else
        -:11538:# define dirent direct
        -:11539:# define NAMLEN(dirent) (dirent)->d_namlen
        -:11540:# if HAVE_SYS_NDIR_H
        -:11541:#  include <sys/ndir.h>
        -:11542:# endif
        -:11543:# if HAVE_SYS_DIR_H
        -:11544:#  include <sys/dir.h>
        -:11545:# endif
        -:11546:# if HAVE_NDIR_H
        -:11547:#  include <ndir.h>
        -:11548:# endif
        -:11549:#endif
        -:11550:
        -:11551:#ifdef CLOSEDIR_VOID
        -:11552:/* Fake a return value. */
        -:11553:# define CLOSEDIR(d) (closedir (d), 0)
        -:11554:#else
        -:11555:# define CLOSEDIR(d) closedir (d)
        -:11556:#endif
        -:11557:
        -:11558:#ifdef STDC_HEADERS
        -:11559:#if flag_stdlib==0
        -:11560:# include <stdlib.h>
        -:11561:#define flag_stdlib 1
        -:11562:#endif
        -:11563:#if flag_string==0
        -:11564:# include <string.h>
        -:11565:#define flag_string 1
        -:11566:#endif
        -:11567:#else
        -:11568:char *malloc ();
        -:11569:char *realloc ();
        -:11570:#endif
        -:11571:#ifndef NULL
        -:11572:# define NULL 0
        -:11573:#endif
        -:11574:
        -:11575:#ifndef stpcpy
        -:11576:char *stpcpy ();
        -:11577:#endif
        -:11578:
        -:11579:/*#include "savedir.h"*/
        -:11580:
        -:11581:/* Return a freshly allocated string containing the filenames
        -:11582:   in directory DIR, separated by '\0' characters;
        -:11583:   the end is marked by two '\0' characters in a row.
        -:11584:   NAME_SIZE is the number of bytes to initially allocate
        -:11585:   for the string; it will be enlarged as needed.
        -:11586:   Return NULL if DIR cannot be opened or if out of memory. */
        -:11587:
        -:11588:char *
function savedir called 0 returned 0% blocks executed 0%
    #####:11589:savedir (dir, name_size)
        -:11590:     const char *dir;
        -:11591:     unsigned int name_size;
        -:11592:{
        -:11593:  DIR *dirp;
        -:11594:  struct dirent *dp;
        -:11595:  char *name_space;
        -:11596:  char *namep;
        -:11597:
    #####:11598:  dirp = opendir (dir);
call    0 never executed
    #####:11599:  if (dirp == NULL)
branch  0 never executed
branch  1 never executed
    #####:11600:    return NULL;
        -:11601:
    #####:11602:  name_space = (char *) malloc (name_size);
call    0 never executed
    #####:11603:  if (name_space == NULL)
branch  0 never executed
branch  1 never executed
        -:11604:    {
    #####:11605:      closedir (dirp);
call    0 never executed
    #####:11606:      return NULL;
        -:11607:    }
    #####:11608:  namep = name_space;
        -:11609:
    #####:11610:  while ((dp = readdir (dirp)) != NULL)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11611:    {
        -:11612:      /* Skip "." and ".." (some NFS filesystems' directories lack them). */
    #####:11613:      if (dp->d_name[0] != '.'
branch  0 never executed
branch  1 never executed
    #####:11614:	  || (dp->d_name[1] != '\0'
branch  0 never executed
branch  1 never executed
    #####:11615:	      && (dp->d_name[1] != '.' || dp->d_name[2] != '\0')))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:11616:	{
    #####:11617:	  unsigned size_needed = (namep - name_space) + NAMLEN (dp) + 2;
        -:11618:
    #####:11619:	  if (size_needed > name_size)
branch  0 never executed
branch  1 never executed
        -:11620:	    {
        -:11621:	      char *new_name_space;
        -:11622:
    #####:11623:	      while (size_needed > name_size)
branch  0 never executed
branch  1 never executed
    #####:11624:		name_size += 1024;
        -:11625:
    #####:11626:	      new_name_space = realloc (name_space, name_size);
    #####:11627:	      if (new_name_space == NULL)
branch  0 never executed
branch  1 never executed
        -:11628:		{
    #####:11629:		  closedir (dirp);
call    0 never executed
    #####:11630:		  return NULL;
        -:11631:		}
    #####:11632:	      namep += new_name_space - name_space;
    #####:11633:	      name_space = new_name_space;
        -:11634:	    }
    #####:11635:	  namep = stpcpy (namep, dp->d_name) + 1;
        -:11636:	}
        -:11637:    }
    #####:11638:  *namep = '\0';
    #####:11639:  if (CLOSEDIR (dirp))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11640:    {
    #####:11641:      free (name_space);
    #####:11642:      return NULL;
        -:11643:    }
    #####:11644:  return name_space;
        -:11645:}
        -:11646:/* Getopt for GNU.
        -:11647:   NOTE: getopt is now part of the C library, so if you don't know what
        -:11648:   "Keep this file name-space clean" means, talk to roland@gnu.ai.mit.edu
        -:11649:   before changing it!
        -:11650:
        -:11651:   Copyright (C) 1987, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97
        -:11652:   	Free Software Foundation, Inc.
        -:11653:
        -:11654:   This file is part of the GNU C Library.  Its master source is NOT part of
        -:11655:   the C library, however.  The master source lives in /gd/gnu/lib.
        -:11656:
        -:11657:   The GNU C Library is free software; you can redistribute it and/or
        -:11658:   modify it under the terms of the GNU Library General Public License as
        -:11659:   published by the Free Software Foundation; either version 2 of the
        -:11660:   License, or (at your option) any later version.
        -:11661:
        -:11662:   The GNU C Library is distributed in the hope that it will be useful,
        -:11663:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:11664:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:11665:   Library General Public License for more details.
        -:11666:
        -:11667:   You should have received a copy of the GNU Library General Public
        -:11668:   License along with the GNU C Library; see the file COPYING.LIB.  If not,
        -:11669:   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
        -:11670:   Boston, MA 02111-1307, USA.  */
        -:11671:
        -:11672:/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.
        -:11673:   Ditto for AIX 3.2 and <stdlib.h>.  */
        -:11674:#ifndef _NO_PROTO
        -:11675:#define _NO_PROTO
        -:11676:#endif
        -:11677:
        -:11678:#ifdef HAVE_CONFIG_H
        -:11679:#if flag_config==0
        -:11680:#include <config.h>
        -:11681:#define flag_config 1
        -:11682:#endif
        -:11683:#endif
        -:11684:
        -:11685:#if !defined (__STDC__) || !__STDC__
        -:11686:/* This is a separate conditional since some stdc systems
        -:11687:   reject `defined (const)'.  */
        -:11688:#ifndef const
        -:11689:#define const
        -:11690:#endif
        -:11691:#endif
        -:11692:
        -:11693:/*#include <stdio.h>*/
        -:11694:
        -:11695:/* Comment out all this code if we are using the GNU C Library, and are not
        -:11696:   actually compiling the library itself.  This code is part of the GNU C
        -:11697:   Library, but also included in many other GNU distributions.  Compiling
        -:11698:   and linking in this code is a waste when using the GNU C library
        -:11699:   (especially if it is a shared library).  Rather than having every GNU
        -:11700:   program understand `configure --with-gnu-libc' and omit the object files,
        -:11701:   it is simpler to just do this in the source for each such file.  */
        -:11702:
        -:11703:#define GETOPT_INTERFACE_VERSION 2
        -:11704:#if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= 2
        -:11705:#if flag_gnuversions==0
        -:11706:#include <gnu-versions.h>
        -:11707:#define flag_gnuversions 1
        -:11708:#endif
        -:11709:#if _GNU_GETOPT_INTERFACE_VERSION == GETOPT_INTERFACE_VERSION
        -:11710:#define ELIDE_CODE
        -:11711:#endif
        -:11712:#endif
        -:11713:
        -:11714:#ifndef ELIDE_CODE
        -:11715:
        -:11716:
        -:11717:/* This needs to come after some library #include
        -:11718:   to get __GNU_LIBRARY__ defined.  */
        -:11719:#ifdef	__GNU_LIBRARY__
        -:11720:/* Don't include stdlib.h for non-GNU C libraries because some of them
        -:11721:   contain conflicting prototypes for getopt.  */
        -:11722:#if flag_stdlib==0   
        -:11723:#include <stdlib.h>
        -:11724:#define flag_stdlib 1
        -:11725:#endif
        -:11726:#if flag_unistd==0
        -:11727:#include <unistd.h>
        -:11728:#define flag_unistd 1
        -:11729:#endif
        -:11730:#endif	/* GNU C library.  */
        -:11731:
        -:11732:#ifdef VMS
        -:11733:#include <unixlib.h>
        -:11734:#if HAVE_STRING_H - 0
        -:11735:#if flag_string==0
        -:11736:#include <string.h>
        -:11737:#define flag_string 1
        -:11738:#endif
        -:11739:#endif
        -:11740:#endif
        -:11741:
        -:11742:#if defined (WIN32) && !defined (__CYGWIN32__)
        -:11743:/* It's not Unix, really.  See?  Capital letters.  */
        -:11744:#include <windows.h>
        -:11745:#define getpid() GetCurrentProcessId()
        -:11746:#endif
        -:11747:
        -:11748:#ifndef _
        -:11749:/* This is for other GNU distributions with internationalized messages.
        -:11750:   When compiling libc, the _ macro is predefined.  */
        -:11751:#ifdef HAVE_LIBINTL_H
        -:11752:#if flag_libintl==0
        -:11753:# include <libintl.h>
        -:11754:#define flag_libintl 1
        -:11755:#endif
        -:11756:# define _(msgid)	gettext (msgid)
        -:11757:#else
        -:11758:# define _(msgid)	(msgid)
        -:11759:#endif
        -:11760:#endif
        -:11761:
        -:11762:/* This version of `getopt' appears to the caller like standard Unix `getopt'
        -:11763:   but it behaves differently for the user, since it allows the user
        -:11764:   to intersperse the options with the other arguments.
        -:11765:
        -:11766:   As `getopt' works, it permutes the elements of ARGV so that,
        -:11767:   when it is done, all the options precede everything else.  Thus
        -:11768:   all application programs are extended to handle flexible argument order.
        -:11769:
        -:11770:   Setting the environment variable POSIXLY_CORRECT disables permutation.
        -:11771:   Then the behavior is completely standard.
        -:11772:
        -:11773:   GNU application programs can use a third alternative mode in which
        -:11774:   they can distinguish the relative order of options and other arguments.  */
        -:11775:
        -:11776:/*#include "getopt.h"*/
        -:11777:
        -:11778:/* For communication from `getopt' to the caller.
        -:11779:   When `getopt' finds an option that takes an argument,
        -:11780:   the argument value is returned here.
        -:11781:   Also, when `ordering' is RETURN_IN_ORDER,
        -:11782:   each non-option ARGV-element is returned here.  */
        -:11783:
        -:11784:char *optarg = NULL;
        -:11785:
        -:11786:/* Index in ARGV of the next element to be scanned.
        -:11787:   This is used for communication to and from the caller
        -:11788:   and for communication between successive calls to `getopt'.
        -:11789:
        -:11790:   On entry to `getopt', zero means this is the first call; initialize.
        -:11791:
        -:11792:   When `getopt' returns -1, this is the index of the first of the
        -:11793:   non-option elements that the caller should itself scan.
        -:11794:
        -:11795:   Otherwise, `optind' communicates from one call to the next
        -:11796:   how much of ARGV has been scanned so far.  */
        -:11797:
        -:11798:/* 1003.2 says this must be 1 before any call.  */
        -:11799:int optind = 1;
        -:11800:
        -:11801:/* Formerly, initialization of getopt depended on optind==0, which
        -:11802:   causes problems with re-calling getopt as programs generally don't
        -:11803:   know that. */
        -:11804:
        -:11805:int __getopt_initialized = 0;
        -:11806:
        -:11807:/* The next char to be scanned in the option-element
        -:11808:   in which the last option character we returned was found.
        -:11809:   This allows us to pick up the scan where we left off.
        -:11810:
        -:11811:   If this is zero, or a null string, it means resume the scan
        -:11812:   by advancing to the next ARGV-element.  */
        -:11813:
        -:11814:static char *nextchar;
        -:11815:
        -:11816:/* Callers store zero here to inhibit the error message
        -:11817:   for unrecognized options.  */
        -:11818:
        -:11819:int opterr = 1;
        -:11820:
        -:11821:/* Set to an option character which was unrecognized.
        -:11822:   This must be initialized on some systems to avoid linking in the
        -:11823:   system's own getopt implementation.  */
        -:11824:
        -:11825:int optopt = '?';
        -:11826:
        -:11827:/* Describe how to deal with options that follow non-option ARGV-elements.
        -:11828:
        -:11829:   If the caller did not specify anything,
        -:11830:   the default is REQUIRE_ORDER if the environment variable
        -:11831:   POSIXLY_CORRECT is defined, PERMUTE otherwise.
        -:11832:
        -:11833:   REQUIRE_ORDER means don't recognize them as options;
        -:11834:   stop option processing when the first non-option is seen.
        -:11835:   This is what Unix does.
        -:11836:   This mode of operation is selected by either setting the environment
        -:11837:   variable POSIXLY_CORRECT, or using `+' as the first character
        -:11838:   of the list of option characters.
        -:11839:
        -:11840:   PERMUTE is the default.  We permute the contents of ARGV as we scan,
        -:11841:   so that eventually all the non-options are at the end.  This allows options
        -:11842:   to be given in any order, even with programs that were not written to
        -:11843:   expect this.
        -:11844:
        -:11845:   RETURN_IN_ORDER is an option available to programs that were written
        -:11846:   to expect options and other ARGV-elements in any order and that care about
        -:11847:   the ordering of the two.  We describe each non-option ARGV-element
        -:11848:   as if it were the argument of an option with character code 1.
        -:11849:   Using `-' as the first character of the list of option characters
        -:11850:   selects this mode of operation.
        -:11851:
        -:11852:   The special argument `--' forces an end of option-scanning regardless
        -:11853:   of the value of `ordering'.  In the case of RETURN_IN_ORDER, only
        -:11854:   `--' can cause `getopt' to return -1 with `optind' != ARGC.  */
        -:11855:
        -:11856:static enum
        -:11857:{
        -:11858:  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER
        -:11859:} ordering;
        -:11860:
        -:11861:/* Value of POSIXLY_CORRECT environment variable.  */
        -:11862:static char *posixly_correct;
        -:11863:
        -:11864:#ifdef	__GNU_LIBRARY__
        -:11865:/* We want to avoid inclusion of string.h with non-GNU libraries
        -:11866:   because there are many ways it can cause trouble.
        -:11867:   On some systems, it contains special magic macros that don't work
        -:11868:   in GCC.  */
        -:11869:#if flag_string==0   
        -:11870:#include <string.h>
        -:11871:#define flag_string 1
        -:11872:#endif
        -:11873:#define	my_index	strchr
        -:11874:#else
        -:11875:
        -:11876:/* Avoid depending on library functions or files
        -:11877:   whose names are inconsistent.  */
        -:11878:
        -:11879:char *getenv ();
        -:11880:
        -:11881:static char *
        -:11882:my_index (str, chr)
        -:11883:     const char *str;
        -:11884:     int chr;
        -:11885:{
        -:11886:  while (*str)
        -:11887:    {
        -:11888:      if (*str == chr)
        -:11889:	return (char *) str;
        -:11890:      str++;
        -:11891:    }
        -:11892:  return 0;
        -:11893:}
        -:11894:
        -:11895:/* If using GCC, we can safely declare strlen this way.
        -:11896:   If not using GCC, it is ok not to declare it.  */
        -:11897:#ifdef __GNUC__
        -:11898:/* Note that Motorola Delta 68k R3V7 comes with GCC but not stddef.h.
        -:11899:   That was relevant to code that was here before.  */
        -:11900:#if !defined (__STDC__) || !__STDC__
        -:11901:/* gcc with -traditional declares the built-in strlen to return int,
        -:11902:   and has done so at least since version 2.4.5. -- rms.  */
        -:11903:extern int strlen (const char *);
        -:11904:#endif /* not __STDC__ */
        -:11905:#endif /* __GNUC__ */
        -:11906:
        -:11907:#endif /* not __GNU_LIBRARY__ */
        -:11908:
        -:11909:/* Handle permutation of arguments.  */
        -:11910:
        -:11911:/* Describe the part of ARGV that contains non-options that have
        -:11912:   been skipped.  `first_nonopt' is the index in ARGV of the first of them;
        -:11913:   `last_nonopt' is the index after the last of them.  */
        -:11914:
        -:11915:static int first_nonopt;
        -:11916:static int last_nonopt;
        -:11917:
        -:11918:#ifdef _LIBC
        -:11919:/* Bash 2.0 gives us an environment variable containing flags
        -:11920:   indicating ARGV elements that should not be considered arguments.  */
        -:11921:
        -:11922:static const char *nonoption_flags;
        -:11923:static int nonoption_flags_len;
        -:11924:
        -:11925:static int original_argc;
        -:11926:static char *const *original_argv;
        -:11927:
        -:11928:/* Make sure the environment variable bash 2.0 puts in the environment
        -:11929:   is valid for the getopt call we must make sure that the ARGV passed
        -:11930:   to getopt is that one passed to the process.  */
        -:11931:static void store_args (int argc, char *const *argv) __attribute__ ((unused));
        -:11932:static void
        -:11933:store_args (int argc, char *const *argv)
        -:11934:{
        -:11935:  /* XXX This is no good solution.  We should rather copy the args so
        -:11936:     that we can compare them later.  But we must not use malloc(3).  */
        -:11937:  original_argc = argc;
        -:11938:  original_argv = argv;
        -:11939:}
        -:11940:text_set_element (__libc_subinit, store_args);
        -:11941:#endif
        -:11942:
        -:11943:/* Exchange two adjacent subsequences of ARGV.
        -:11944:   One subsequence is elements [first_nonopt,last_nonopt)
        -:11945:   which contains all the non-options that have been skipped so far.
        -:11946:   The other is elements [last_nonopt,optind), which contains all
        -:11947:   the options processed since those non-options were skipped.
        -:11948:
        -:11949:   `first_nonopt' and `last_nonopt' are relocated so that they describe
        -:11950:   the new indices of the non-options in ARGV after they are moved.  */
        -:11951:
        -:11952:#if defined (__STDC__) && __STDC__
        -:11953:static void exchange (char **);
        -:11954:#endif
        -:11955:
        -:11956:static void
        -:11957:exchange (argv)
        -:11958:     char **argv;
        -:11959:{
        -:11960:  int bottom = first_nonopt;
        -:11961:  int middle = last_nonopt;
        -:11962:  int top = optind;
        -:11963:  char *tem;
        -:11964:
        -:11965:  /* Exchange the shorter segment with the far end of the longer segment.
        -:11966:     That puts the shorter segment into the right place.
        -:11967:     It leaves the longer segment in the right place overall,
        -:11968:     but it consists of two parts that need to be swapped next.  */
        -:11969:
        -:11970:  while (top > middle && middle > bottom)
        -:11971:    {
        -:11972:      if (top - middle > middle - bottom)
        -:11973:	{
        -:11974:	  /* Bottom segment is the short one.  */
        -:11975:	  int len = middle - bottom;
        -:11976:	  register int i;
        -:11977:
        -:11978:	  /* Swap it with the top part of the top segment.  */
        -:11979:	  for (i = 0; i < len; i++)
        -:11980:	    {
        -:11981:	      tem = argv[bottom + i];
        -:11982:	      argv[bottom + i] = argv[top - (middle - bottom) + i];
        -:11983:	      argv[top - (middle - bottom) + i] = tem;
        -:11984:	    }
        -:11985:	  /* Exclude the moved bottom segment from further swapping.  */
        -:11986:	  top -= len;
        -:11987:	}
        -:11988:      else
        -:11989:	{
        -:11990:	  /* Top segment is the short one.  */
        -:11991:	  int len = top - middle;
        -:11992:	  register int i;
        -:11993:
        -:11994:	  /* Swap it with the bottom part of the bottom segment.  */
        -:11995:	  for (i = 0; i < len; i++)
        -:11996:	    {
        -:11997:	      tem = argv[bottom + i];
        -:11998:	      argv[bottom + i] = argv[middle + i];
        -:11999:	      argv[middle + i] = tem;
        -:12000:	    }
        -:12001:	  /* Exclude the moved top segment from further swapping.  */
        -:12002:	  bottom += len;
        -:12003:	}
        -:12004:    }
        -:12005:
        -:12006:  /* Update records for the slots the non-options now occupy.  */
        -:12007:
        -:12008:  first_nonopt += (optind - last_nonopt);
        -:12009:  last_nonopt = optind;
        -:12010:}
        -:12011:
        -:12012:/* Initialize the internal data when the first call is made.  */
        -:12013:
        -:12014:#if defined (__STDC__) && __STDC__
        -:12015:static const char *_getopt_initialize (int, char *const *, const char *);
        -:12016:#endif
        -:12017:static const char *
        -:12018:_getopt_initialize (argc, argv, optstring)
        -:12019:     int argc;
        -:12020:     char *const *argv;
        -:12021:     const char *optstring;
        -:12022:{
        -:12023:  /* Start processing options with ARGV-element 1 (since ARGV-element 0
        -:12024:     is the program name); the sequence of previously skipped
        -:12025:     non-option ARGV-elements is empty.  */
        -:12026:
        -:12027:  first_nonopt = last_nonopt = optind = 1;
        -:12028:
        -:12029:  nextchar = NULL;
        -:12030:
        -:12031:  posixly_correct = getenv ("POSIXLY_CORRECT");
        -:12032:
        -:12033:  /* Determine how to handle the ordering of options and nonoptions.  */
        -:12034:
        -:12035:  if (optstring[0] == '-')
        -:12036:    {
        -:12037:      ordering = RETURN_IN_ORDER;
        -:12038:      ++optstring;
        -:12039:    }
        -:12040:  else if (optstring[0] == '+')
        -:12041:    {
        -:12042:      ordering = REQUIRE_ORDER;
        -:12043:      ++optstring;
        -:12044:    }
        -:12045:  else if (posixly_correct != NULL)
        -:12046:    ordering = REQUIRE_ORDER;
        -:12047:  else
        -:12048:    ordering = PERMUTE;
        -:12049:
        -:12050:#ifdef _LIBC
        -:12051:  if (posixly_correct == NULL
        -:12052:      && argc == original_argc && argv == original_argv)
        -:12053:    {
        -:12054:      /* Bash 2.0 puts a special variable in the environment for each
        -:12055:	 command it runs, specifying which ARGV elements are the results of
        -:12056:	 file name wildcard expansion and therefore should not be
        -:12057:	 considered as options.  */
        -:12058:      char var[100];
        -:12059:      sprintf (var, "_%d_GNU_nonoption_argv_flags_", getpid ());
        -:12060:      nonoption_flags = getenv (var);
        -:12061:      if (nonoption_flags == NULL)
        -:12062:	nonoption_flags_len = 0;
        -:12063:      else
        -:12064:	nonoption_flags_len = strlen (nonoption_flags);
        -:12065:    }
        -:12066:  else
        -:12067:    nonoption_flags_len = 0;
        -:12068:#endif
        -:12069:
        -:12070:  return optstring;
        -:12071:}
        -:12072:
        -:12073:/* Scan elements of ARGV (whose length is ARGC) for option characters
        -:12074:   given in OPTSTRING.
        -:12075:
        -:12076:   If an element of ARGV starts with '-', and is not exactly "-" or "--",
        -:12077:   then it is an option element.  The characters of this element
        -:12078:   (aside from the initial '-') are option characters.  If `getopt'
        -:12079:   is called repeatedly, it returns successively each of the option characters
        -:12080:   from each of the option elements.
        -:12081:
        -:12082:   If `getopt' finds another option character, it returns that character,
        -:12083:   updating `optind' and `nextchar' so that the next call to `getopt' can
        -:12084:   resume the scan with the following option character or ARGV-element.
        -:12085:
        -:12086:   If there are no more option characters, `getopt' returns -1.
        -:12087:   Then `optind' is the index in ARGV of the first ARGV-element
        -:12088:   that is not an option.  (The ARGV-elements have been permuted
        -:12089:   so that those that are not options now come last.)
        -:12090:
        -:12091:   OPTSTRING is a string containing the legitimate option characters.
        -:12092:   If an option character is seen that is not listed in OPTSTRING,
        -:12093:   return '?' after printing an error message.  If you set `opterr' to
        -:12094:   zero, the error message is suppressed but we still return '?'.
        -:12095:
        -:12096:   If a char in OPTSTRING is followed by a colon, that means it wants an arg,
        -:12097:   so the following text in the same ARGV-element, or the text of the following
        -:12098:   ARGV-element, is returned in `optarg'.  Two colons mean an option that
        -:12099:   wants an optional arg; if there is text in the current ARGV-element,
        -:12100:   it is returned in `optarg', otherwise `optarg' is set to zero.
        -:12101:
        -:12102:   If OPTSTRING starts with `-' or `+', it requests different methods of
        -:12103:   handling the non-option ARGV-elements.
        -:12104:   See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.
        -:12105:
        -:12106:   Long-named options begin with `--' instead of `-'.
        -:12107:   Their names may be abbreviated as long as the abbreviation is unique
        -:12108:   or is an exact match for some defined option.  If they have an
        -:12109:   argument, it follows the option name in the same ARGV-element, separated
        -:12110:   from the option name by a `=', or else the in next ARGV-element.
        -:12111:   When `getopt' finds a long-named option, it returns 0 if that option's
        -:12112:   `flag' field is nonzero, the value of the option's `val' field
        -:12113:   if the `flag' field is zero.
        -:12114:
        -:12115:   The elements of ARGV aren't really const, because we permute them.
        -:12116:   But we pretend they're const in the prototype to be compatible
        -:12117:   with other systems.
        -:12118:
        -:12119:   LONGOPTS is a vector of `struct option' terminated by an
        -:12120:   element containing a name which is zero.
        -:12121:
        -:12122:   LONGIND returns the index in LONGOPT of the long-named option found.
        -:12123:   It is only valid when a long-named option has been found by the most
        -:12124:   recent call.
        -:12125:
        -:12126:   If LONG_ONLY is nonzero, '-' as well as '--' can introduce
        -:12127:   long-named options.  */
        -:12128:
        -:12129:int
        -:12130:_getopt_internal (argc, argv, optstring, longopts, longind, long_only)
        -:12131:     int argc;
        -:12132:     char *const *argv;
        -:12133:     const char *optstring;
        -:12134:     const struct option *longopts;
        -:12135:     int *longind;
        -:12136:     int long_only;
        -:12137:{
        -:12138:  optarg = NULL;
        -:12139:
        -:12140:  if (!__getopt_initialized || optind == 0)
        -:12141:    {
        -:12142:      optstring = _getopt_initialize (argc, argv, optstring);
        -:12143:      optind = 1;		/* Don't scan ARGV[0], the program name.  */
        -:12144:      __getopt_initialized = 1;
        -:12145:    }
        -:12146:
        -:12147:  /* Test whether ARGV[optind] points to a non-option argument.
        -:12148:     Either it does not have option syntax, or there is an environment flag
        -:12149:     from the shell indicating it is not an option.  The later information
        -:12150:     is only used when the used in the GNU libc.  */
        -:12151:#ifdef _LIBC
        -:12152:#define NONOPTION_P (argv[optind][0] != '-' || argv[optind][1] == '\0'	      \
        -:12153:		     || (optind < nonoption_flags_len			      \
        -:12154:			 && nonoption_flags[optind] == '1'))
        -:12155:#else
        -:12156:#define NONOPTION_P (argv[optind][0] != '-' || argv[optind][1] == '\0')
        -:12157:#endif
        -:12158:
        -:12159:  if (nextchar == NULL || *nextchar == '\0')
        -:12160:    {
        -:12161:      /* Advance to the next ARGV-element.  */
        -:12162:
        -:12163:      /* Give FIRST_NONOPT & LAST_NONOPT rational values if OPTIND has been
        -:12164:	 moved back by the user (who may also have changed the arguments).  */
        -:12165:      if (last_nonopt > optind)
        -:12166:	last_nonopt = optind;
        -:12167:      if (first_nonopt > optind)
        -:12168:	first_nonopt = optind;
        -:12169:
        -:12170:      if (ordering == PERMUTE)
        -:12171:	{
        -:12172:	  /* If we have just processed some options following some non-options,
        -:12173:	     exchange them so that the options come first.  */
        -:12174:
        -:12175:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
        -:12176:	    exchange ((char **) argv);
        -:12177:	  else if (last_nonopt != optind)
        -:12178:	    first_nonopt = optind;
        -:12179:
        -:12180:	  /* Skip any additional non-options
        -:12181:	     and extend the range of non-options previously skipped.  */
        -:12182:
        -:12183:	  while (optind < argc && NONOPTION_P)
        -:12184:	    optind++;
        -:12185:	  last_nonopt = optind;
        -:12186:	}
        -:12187:
        -:12188:      /* The special ARGV-element `--' means premature end of options.
        -:12189:	 Skip it like a null option,
        -:12190:	 then exchange with previous non-options as if it were an option,
        -:12191:	 then skip everything else like a non-option.  */
        -:12192:
        -:12193:      if (optind != argc && !strcmp (argv[optind], "--"))
        -:12194:	{
        -:12195:	  optind++;
        -:12196:
        -:12197:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
        -:12198:	    exchange ((char **) argv);
        -:12199:	  else if (first_nonopt == last_nonopt)
        -:12200:	    first_nonopt = optind;
        -:12201:	  last_nonopt = argc;
        -:12202:
        -:12203:	  optind = argc;
        -:12204:	}
        -:12205:
        -:12206:      /* If we have done all the ARGV-elements, stop the scan
        -:12207:	 and back over any non-options that we skipped and permuted.  */
        -:12208:
        -:12209:      if (optind == argc)
        -:12210:	{
        -:12211:	  /* Set the next-arg-index to point at the non-options
        -:12212:	     that we previously skipped, so the caller will digest them.  */
        -:12213:	  if (first_nonopt != last_nonopt)
        -:12214:	    optind = first_nonopt;
        -:12215:	  return -1;
        -:12216:	}
        -:12217:
        -:12218:      /* If we have come to a non-option and did not permute it,
        -:12219:	 either stop the scan or describe it to the caller and pass it by.  */
        -:12220:
        -:12221:      if (NONOPTION_P)
        -:12222:	{
        -:12223:	  if (ordering == REQUIRE_ORDER)
        -:12224:	    return -1;
        -:12225:	  optarg = argv[optind++];
        -:12226:	  return 1;
        -:12227:	}
        -:12228:
        -:12229:      /* We have found another option-ARGV-element.
        -:12230:	 Skip the initial punctuation.  */
        -:12231:
        -:12232:      nextchar = (argv[optind] + 1
        -:12233:		  + (longopts != NULL && argv[optind][1] == '-'));
        -:12234:    }
        -:12235:
        -:12236:  /* Decode the current option-ARGV-element.  */
        -:12237:
        -:12238:  /* Check whether the ARGV-element is a long option.
        -:12239:
        -:12240:     If long_only and the ARGV-element has the form "-f", where f is
        -:12241:     a valid short option, don't consider it an abbreviated form of
        -:12242:     a long option that starts with f.  Otherwise there would be no
        -:12243:     way to give the -f short option.
        -:12244:
        -:12245:     On the other hand, if there's a long option "fubar" and
        -:12246:     the ARGV-element is "-fu", do consider that an abbreviation of
        -:12247:     the long option, just like "--fu", and not "-f" with arg "u".
        -:12248:
        -:12249:     This distinction seems to be the most useful approach.  */
        -:12250:
        -:12251:  if (longopts != NULL
        -:12252:      && (argv[optind][1] == '-'
        -:12253:	  || (long_only && (argv[optind][2] || !my_index (optstring, argv[optind][1])))))
        -:12254:    {
        -:12255:      char *nameend;
        -:12256:      const struct option *p;
        -:12257:      const struct option *pfound = NULL;
        -:12258:      int exact = 0;
        -:12259:      int ambig = 0;
        -:12260:      int indfound = -1;
        -:12261:      int option_index;
        -:12262:
        -:12263:      for (nameend = nextchar; *nameend && *nameend != '='; nameend++)
        -:12264:	/* Do nothing.  */ ;
        -:12265:
        -:12266:      /* Test all long options for either exact match
        -:12267:	 or abbreviated matches.  */
        -:12268:      for (p = longopts, option_index = 0; p->name; p++, option_index++)
        -:12269:	if (!strncmp (p->name, nextchar, nameend - nextchar))
        -:12270:	  {
        -:12271:	    if ((unsigned int) (nameend - nextchar)
        -:12272:		== (unsigned int) strlen (p->name))
        -:12273:	      {
        -:12274:		/* Exact match found.  */
        -:12275:		pfound = p;
        -:12276:		indfound = option_index;
        -:12277:		exact = 1;
        -:12278:		break;
        -:12279:	      }
        -:12280:	    else if (pfound == NULL)
        -:12281:	      {
        -:12282:		/* First nonexact match found.  */
        -:12283:		pfound = p;
        -:12284:		indfound = option_index;
        -:12285:	      }
        -:12286:	    else
        -:12287:	      /* Second or later nonexact match found.  */
        -:12288:	      ambig = 1;
        -:12289:	  }
        -:12290:
        -:12291:      if (ambig && !exact)
        -:12292:	{
        -:12293:	  if (opterr)
        -:12294:	    fprintf (stderr, _("%s: option `%s' is ambiguous\n"),
        -:12295:		     argv[0], argv[optind]);
        -:12296:	  nextchar += strlen (nextchar);
        -:12297:	  optind++;
        -:12298:	  optopt = 0;
        -:12299:	  return '?';
        -:12300:	}
        -:12301:
        -:12302:      if (pfound != NULL)
        -:12303:	{
        -:12304:	  option_index = indfound;
        -:12305:	  optind++;
        -:12306:	  if (*nameend)
        -:12307:	    {
        -:12308:	      /* Don't test has_arg with >, because some C compilers don't
        -:12309:		 allow it to be used on enums.  */
        -:12310:	      if (pfound->has_arg)
        -:12311:		optarg = nameend + 1;
        -:12312:	      else
        -:12313:		{
        -:12314:		  if (opterr)
        -:12315:		   if (argv[optind - 1][1] == '-')
        -:12316:		    /* --option */
        -:12317:		    fprintf (stderr,
        -:12318:		     _("%s: option `--%s' doesn't allow an argument\n"),
        -:12319:		     argv[0], pfound->name);
        -:12320:		   else
        -:12321:		    /* +option or -option */
        -:12322:		    fprintf (stderr,
        -:12323:		     _("%s: option `%c%s' doesn't allow an argument\n"),
        -:12324:		     argv[0], argv[optind - 1][0], pfound->name);
        -:12325:
        -:12326:		  nextchar += strlen (nextchar);
        -:12327:
        -:12328:		  optopt = pfound->val;
        -:12329:		  return '?';
        -:12330:		}
        -:12331:	    }
        -:12332:	  else if (pfound->has_arg == 1)
        -:12333:	    {
        -:12334:	      if (optind < argc)
        -:12335:		optarg = argv[optind++];
        -:12336:	      else
        -:12337:		{
        -:12338:		  if (opterr)
        -:12339:		    fprintf (stderr,
        -:12340:			   _("%s: option `%s' requires an argument\n"),
        -:12341:			   argv[0], argv[optind - 1]);
        -:12342:		  nextchar += strlen (nextchar);
        -:12343:		  optopt = pfound->val;
        -:12344:		  return optstring[0] == ':' ? ':' : '?';
        -:12345:		}
        -:12346:	    }
        -:12347:	  nextchar += strlen (nextchar);
        -:12348:	  if (longind != NULL)
        -:12349:	    *longind = option_index;
        -:12350:	  if (pfound->flag)
        -:12351:	    {
        -:12352:	      *(pfound->flag) = pfound->val;
        -:12353:	      return 0;
        -:12354:	    }
        -:12355:	  return pfound->val;
        -:12356:	}
        -:12357:
        -:12358:      /* Can't find it as a long option.  If this is not getopt_long_only,
        -:12359:	 or the option starts with '--' or is not a valid short
        -:12360:	 option, then it's an error.
        -:12361:	 Otherwise interpret it as a short option.  */
        -:12362:      if (!long_only || argv[optind][1] == '-'
        -:12363:	  || my_index (optstring, *nextchar) == NULL)
        -:12364:	{
        -:12365:	  if (opterr)
        -:12366:	    {
        -:12367:	      if (argv[optind][1] == '-')
        -:12368:		/* --option */
        -:12369:		fprintf (stderr, _("%s: unrecognized option `--%s'\n"),
        -:12370:			 argv[0], nextchar);
        -:12371:	      else
        -:12372:		/* +option or -option */
        -:12373:		fprintf (stderr, _("%s: unrecognized option `%c%s'\n"),
        -:12374:			 argv[0], argv[optind][0], nextchar);
        -:12375:	    }
        -:12376:	  nextchar = (char *) "";
        -:12377:	  optind++;
        -:12378:	  optopt = 0;
        -:12379:	  return '?';
        -:12380:	}
        -:12381:    }
        -:12382:
        -:12383:  /* Look at and handle the next short option-character.  */
        -:12384:
        -:12385:  {
        -:12386:    char c = *nextchar++;
        -:12387:    char *temp = my_index (optstring, c);
        -:12388:
        -:12389:    /* Increment `optind' when we start to process its last character.  */
        -:12390:    if (*nextchar == '\0')
        -:12391:      ++optind;
        -:12392:
        -:12393:    if (temp == NULL || c == ':')
        -:12394:      {
        -:12395:	if (opterr)
        -:12396:	  {
        -:12397:	    if (posixly_correct)
        -:12398:	      /* 1003.2 specifies the format of this message.  */
        -:12399:	      fprintf (stderr, _("%s: illegal option -- %c\n"),
        -:12400:		       argv[0], c);
        -:12401:	    else
        -:12402:	      fprintf (stderr, _("%s: invalid option -- %c\n"),
        -:12403:		       argv[0], c);
        -:12404:	  }
        -:12405:	optopt = c;
        -:12406:	return '?';
        -:12407:      }
        -:12408:    /* Convenience. Treat POSIX -W foo same as long option --foo */
        -:12409:    if (temp[0] == 'W' && temp[1] == ';')
        -:12410:      {
        -:12411:	char *nameend;
        -:12412:	const struct option *p;
        -:12413:	const struct option *pfound = NULL;
        -:12414:	int exact = 0;
        -:12415:	int ambig = 0;
        -:12416:	int indfound = 0;
        -:12417:	int option_index;
        -:12418:
        -:12419:	/* This is an option that requires an argument.  */
        -:12420:	if (*nextchar != '\0')
        -:12421:	  {
        -:12422:	    optarg = nextchar;
        -:12423:	    /* If we end this ARGV-element by taking the rest as an arg,
        -:12424:	       we must advance to the next element now.  */
        -:12425:	    optind++;
        -:12426:	  }
        -:12427:	else if (optind == argc)
        -:12428:	  {
        -:12429:	    if (opterr)
        -:12430:	      {
        -:12431:		/* 1003.2 specifies the format of this message.  */
        -:12432:		fprintf (stderr, _("%s: option requires an argument -- %c\n"),
        -:12433:			 argv[0], c);
        -:12434:	      }
        -:12435:	    optopt = c;
        -:12436:	    if (optstring[0] == ':')
        -:12437:	      c = ':';
        -:12438:	    else
        -:12439:	      c = '?';
        -:12440:	    return c;
        -:12441:	  }
        -:12442:	else
        -:12443:	  /* We already incremented `optind' once;
        -:12444:	     increment it again when taking next ARGV-elt as argument.  */
        -:12445:	  optarg = argv[optind++];
        -:12446:
        -:12447:	/* optarg is now the argument, see if it's in the
        -:12448:	   table of longopts.  */
        -:12449:
        -:12450:	for (nextchar = nameend = optarg; *nameend && *nameend != '='; nameend++)
        -:12451:	  /* Do nothing.  */ ;
        -:12452:
        -:12453:	/* Test all long options for either exact match
        -:12454:	   or abbreviated matches.  */
        -:12455:	for (p = longopts, option_index = 0; p->name; p++, option_index++)
        -:12456:	  if (!strncmp (p->name, nextchar, nameend - nextchar))
        -:12457:	    {
        -:12458:	      if ((unsigned int) (nameend - nextchar) == strlen (p->name))
        -:12459:		{
        -:12460:		  /* Exact match found.  */
        -:12461:		  pfound = p;
        -:12462:		  indfound = option_index;
        -:12463:		  exact = 1;
        -:12464:		  break;
        -:12465:		}
        -:12466:	      else if (pfound == NULL)
        -:12467:		{
        -:12468:		  /* First nonexact match found.  */
        -:12469:		  pfound = p;
        -:12470:		  indfound = option_index;
        -:12471:		}
        -:12472:	      else
        -:12473:		/* Second or later nonexact match found.  */
        -:12474:		ambig = 1;
        -:12475:	    }
        -:12476:	if (ambig && !exact)
        -:12477:	  {
        -:12478:	    if (opterr)
        -:12479:	      fprintf (stderr, _("%s: option `-W %s' is ambiguous\n"),
        -:12480:		       argv[0], argv[optind]);
        -:12481:	    nextchar += strlen (nextchar);
        -:12482:	    optind++;
        -:12483:	    return '?';
        -:12484:	  }
        -:12485:	if (pfound != NULL)
        -:12486:	  {
        -:12487:	    option_index = indfound;
        -:12488:	    if (*nameend)
        -:12489:	      {
        -:12490:		/* Don't test has_arg with >, because some C compilers don't
        -:12491:		   allow it to be used on enums.  */
        -:12492:		if (pfound->has_arg)
        -:12493:		  optarg = nameend + 1;
        -:12494:		else
        -:12495:		  {
        -:12496:		    if (opterr)
        -:12497:		      fprintf (stderr, _("\
        -:12498:%s: option `-W %s' doesn't allow an argument\n"),
        -:12499:			       argv[0], pfound->name);
        -:12500:
        -:12501:		    nextchar += strlen (nextchar);
        -:12502:		    return '?';
        -:12503:		  }
        -:12504:	      }
        -:12505:	    else if (pfound->has_arg == 1)
        -:12506:	      {
        -:12507:		if (optind < argc)
        -:12508:		  optarg = argv[optind++];
        -:12509:		else
        -:12510:		  {
        -:12511:		    if (opterr)
        -:12512:		      fprintf (stderr,
        -:12513:			       _("%s: option `%s' requires an argument\n"),
        -:12514:			       argv[0], argv[optind - 1]);
        -:12515:		    nextchar += strlen (nextchar);
        -:12516:		    return optstring[0] == ':' ? ':' : '?';
        -:12517:		  }
        -:12518:	      }
        -:12519:	    nextchar += strlen (nextchar);
        -:12520:	    if (longind != NULL)
        -:12521:	      *longind = option_index;
        -:12522:	    if (pfound->flag)
        -:12523:	      {
        -:12524:		*(pfound->flag) = pfound->val;
        -:12525:		return 0;
        -:12526:	      }
        -:12527:	    return pfound->val;
        -:12528:	  }
        -:12529:	  nextchar = NULL;
        -:12530:	  return 'W';	/* Let the application handle it.   */
        -:12531:      }
        -:12532:    if (temp[1] == ':')
        -:12533:      {
        -:12534:	if (temp[2] == ':')
        -:12535:	  {
        -:12536:	    /* This is an option that accepts an argument optionally.  */
        -:12537:	    if (*nextchar != '\0')
        -:12538:	      {
        -:12539:		optarg = nextchar;
        -:12540:		optind++;
        -:12541:	      }
        -:12542:	    else
        -:12543:	      optarg = NULL;
        -:12544:	    nextchar = NULL;
        -:12545:	  }
        -:12546:	else
        -:12547:	  {
        -:12548:	    /* This is an option that requires an argument.  */
        -:12549:	    if (*nextchar != '\0')
        -:12550:	      {
        -:12551:		optarg = nextchar;
        -:12552:		/* If we end this ARGV-element by taking the rest as an arg,
        -:12553:		   we must advance to the next element now.  */
        -:12554:		optind++;
        -:12555:	      }
        -:12556:	    else if (optind == argc)
        -:12557:	      {
        -:12558:		if (opterr)
        -:12559:		  {
        -:12560:		    /* 1003.2 specifies the format of this message.  */
        -:12561:		    fprintf (stderr,
        -:12562:			   _("%s: option requires an argument -- %c\n"),
        -:12563:			   argv[0], c);
        -:12564:		  }
        -:12565:		optopt = c;
        -:12566:		if (optstring[0] == ':')
        -:12567:		  c = ':';
        -:12568:		else
        -:12569:		  c = '?';
        -:12570:	      }
        -:12571:	    else
        -:12572:	      /* We already incremented `optind' once;
        -:12573:		 increment it again when taking next ARGV-elt as argument.  */
        -:12574:	      optarg = argv[optind++];
        -:12575:	    nextchar = NULL;
        -:12576:	  }
        -:12577:      }
        -:12578:    return c;
        -:12579:  }
        -:12580:}
        -:12581:
        -:12582:int
        -:12583:getopt (argc, argv, optstring)
        -:12584:     int argc;
        -:12585:     char *const *argv;
        -:12586:     const char *optstring;
        -:12587:{
        -:12588:  return _getopt_internal (argc, argv, optstring,
        -:12589:			   (const struct option *) 0,
        -:12590:			   (int *) 0,
        -:12591:			   0);
        -:12592:}
        -:12593:
        -:12594:#endif	/* Not ELIDE_CODE.  */
        -:12595:
        -:12596:#ifdef TEST
        -:12597:
        -:12598:/* Compile with -DTEST to make an executable for use in testing
        -:12599:   the above definition of `getopt'.  */
        -:12600:
        -:12601:int
        -:12602:main (argc, argv)
        -:12603:     int argc;
        -:12604:     char **argv;
        -:12605:{
        -:12606:  int c;
        -:12607:  int digit_optind = 0;
        -:12608:
        -:12609:  while (1)
        -:12610:    {
        -:12611:      int this_option_optind = optind ? optind : 1;
        -:12612:
        -:12613:      c = getopt (argc, argv, "abc:d:0123456789");
        -:12614:      if (c == -1)
        -:12615:	break;
        -:12616:
        -:12617:      switch (c)
        -:12618:	{
        -:12619:	case '0':
        -:12620:	case '1':
        -:12621:	case '2':
        -:12622:	case '3':
        -:12623:	case '4':
        -:12624:	case '5':
        -:12625:	case '6':
        -:12626:	case '7':
        -:12627:	case '8':
        -:12628:	case '9':
        -:12629:	  if (digit_optind != 0 && digit_optind != this_option_optind)
        -:12630:	    printf ("digits occur in two different argv-elements.\n");
        -:12631:	  digit_optind = this_option_optind;
        -:12632:	  printf ("option %c\n", c);
        -:12633:	  break;
        -:12634:
        -:12635:	case 'a':
        -:12636:	  printf ("option a\n");
        -:12637:	  break;
        -:12638:
        -:12639:	case 'b':
        -:12640:	  printf ("option b\n");
        -:12641:	  break;
        -:12642:
        -:12643:	case 'c':
        -:12644:	  printf ("option c with value `%s'\n", optarg);
        -:12645:	  break;
        -:12646:
        -:12647:	case '?':
        -:12648:	  break;
        -:12649:
        -:12650:	default:
        -:12651:	  printf ("?? getopt returned character code 0%o ??\n", c);
        -:12652:	}
        -:12653:    }
        -:12654:
        -:12655:  if (optind < argc)
        -:12656:    {
        -:12657:      printf ("non-option ARGV-elements: ");
        -:12658:      while (optind < argc)
        -:12659:	printf ("%s ", argv[optind++]);
        -:12660:      printf ("\n");
        -:12661:    }
        -:12662:
        -:12663:  exit (0);
        -:12664:}
        -:12665:
        -:12666:#endif /* TEST */
        -:12667:/* getopt_long and getopt_long_only entry points for GNU getopt.
        -:12668:   Copyright (C) 1987,88,89,90,91,92,93,94,96,97, 98 Free Software Foundation, Inc.
        -:12669:
        -:12670:   This file is part of the GNU C Library.  Its master source is NOT part of
        -:12671:   the C library, however.  The master source lives in /gd/gnu/lib.
        -:12672:
        -:12673:   The GNU C Library is free software; you can redistribute it and/or
        -:12674:   modify it under the terms of the GNU Library General Public License as
        -:12675:   published by the Free Software Foundation; either version 2 of the
        -:12676:   License, or (at your option) any later version.
        -:12677:
        -:12678:   The GNU C Library is distributed in the hope that it will be useful,
        -:12679:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:12680:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:12681:   Library General Public License for more details.
        -:12682:
        -:12683:   You should have received a copy of the GNU Library General Public
        -:12684:   License along with the GNU C Library; see the file COPYING.LIB.  If not,
        -:12685:   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
        -:12686:   Boston, MA 02111-1307, USA.  */
        -:12687:
        -:12688:#ifdef HAVE_CONFIG_H
        -:12689:#if flag_config==0
        -:12690:#include <config.h>
        -:12691:#define flag_config 1
        -:12692:#endif
        -:12693:#endif
        -:12694:
        -:12695:/*#include "getopt.h"*/
        -:12696:
        -:12697:#if !defined (__STDC__) || !__STDC__
        -:12698:/* This is a separate conditional since some stdc systems
        -:12699:   reject `defined (const)'.  */
        -:12700:#ifndef const
        -:12701:#define const
        -:12702:#endif
        -:12703:#endif
        -:12704:
        -:12705:/*#include <stdio.h>*/
        -:12706:
        -:12707:/* Comment out all this code if we are using the GNU C Library, and are not
        -:12708:   actually compiling the library itself.  This code is part of the GNU C
        -:12709:   Library, but also included in many other GNU distributions.  Compiling
        -:12710:   and linking in this code is a waste when using the GNU C library
        -:12711:   (especially if it is a shared library).  Rather than having every GNU
        -:12712:   program understand `configure --with-gnu-libc' and omit the object files,
        -:12713:   it is simpler to just do this in the source for each such file.  */
        -:12714:
        -:12715:#define GETOPT_INTERFACE_VERSION 2
        -:12716:#if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= 2
        -:12717:#if flag_gnuversions==0
        -:12718:#include <gnu-versions.h>
        -:12719:#define flag_gnuversions 1
        -:12720:#endif
        -:12721:#if _GNU_GETOPT_INTERFACE_VERSION == GETOPT_INTERFACE_VERSION
        -:12722:#define ELIDE_CODE
        -:12723:#endif
        -:12724:#endif
        -:12725:
        -:12726:#ifndef ELIDE_CODE
        -:12727:
        -:12728:
        -:12729:/* This needs to come after some library #include
        -:12730:   to get __GNU_LIBRARY__ defined.  */
        -:12731:#ifdef __GNU_LIBRARY__
        -:12732:#if flag_stdlib==0
        -:12733:#include <stdlib.h>
        -:12734:#define flag_stdlib 1
        -:12735:#endif
        -:12736:#endif
        -:12737:
        -:12738:#ifndef	NULL
        -:12739:#define NULL 0
        -:12740:#endif
        -:12741:
        -:12742:int
        -:12743:getopt_long (argc, argv, options, long_options, opt_index)
        -:12744:     int argc;
        -:12745:     char *const *argv;
        -:12746:     const char *options;
        -:12747:     const struct option *long_options;
        -:12748:     int *opt_index;
        -:12749:{
        -:12750:  return _getopt_internal (argc, argv, options, long_options, opt_index, 0);
        -:12751:}
        -:12752:
        -:12753:/* Like getopt_long, but '-' as well as '--' can indicate a long option.
        -:12754:   If an option that starts with '-' (not '--') doesn't match a long option,
        -:12755:   but does match a short option, it is parsed as a short option
        -:12756:   instead.  */
        -:12757:
        -:12758:int
        -:12759:getopt_long_only (argc, argv, options, long_options, opt_index)
        -:12760:     int argc;
        -:12761:     char *const *argv;
        -:12762:     const char *options;
        -:12763:     const struct option *long_options;
        -:12764:     int *opt_index;
        -:12765:{
        -:12766:  return _getopt_internal (argc, argv, options, long_options, opt_index, 1);
        -:12767:}
        -:12768:
        -:12769:
        -:12770:#endif	/* Not ELIDE_CODE.  */
        -:12771:
        -:12772:#ifdef TEST
        -:12773:
        -:12774:/*#include <stdio.h>*/
        -:12775:
        -:12776:int
        -:12777:main (argc, argv)
        -:12778:     int argc;
        -:12779:     char **argv;
        -:12780:{
        -:12781:  int c;
        -:12782:  int digit_optind = 0;
        -:12783:
        -:12784:  while (1)
        -:12785:    {
        -:12786:      int this_option_optind = optind ? optind : 1;
        -:12787:      int option_index = 0;
        -:12788:      static struct option long_options[] =
        -:12789:      {
        -:12790:	{"add", 1, 0, 0},
        -:12791:	{"append", 0, 0, 0},
        -:12792:	{"delete", 1, 0, 0},
        -:12793:	{"verbose", 0, 0, 0},
        -:12794:	{"create", 0, 0, 0},
        -:12795:	{"file", 1, 0, 0},
        -:12796:	{0, 0, 0, 0}
        -:12797:      };
        -:12798:
        -:12799:      c = getopt_long (argc, argv, "abc:d:0123456789",
        -:12800:		       long_options, &option_index);
        -:12801:      if (c == -1)
        -:12802:	break;
        -:12803:
        -:12804:      switch (c)
        -:12805:	{
        -:12806:	case 0:
        -:12807:	  printf (_("option %s"), long_options[option_index].name);
        -:12808:	  if (optarg)
        -:12809:	    printf (_(" with arg %s"), optarg);
        -:12810:	  printf ("\n");
        -:12811:	  break;
        -:12812:
        -:12813:	case '0':
        -:12814:	case '1':
        -:12815:	case '2':
        -:12816:	case '3':
        -:12817:	case '4':
        -:12818:	case '5':
        -:12819:	case '6':
        -:12820:	case '7':
        -:12821:	case '8':
        -:12822:	case '9':
        -:12823:	  if (digit_optind != 0 && digit_optind != this_option_optind)
        -:12824:	    printf (_("digits occur in two different argv-elements.\n"));
        -:12825:	  digit_optind = this_option_optind;
        -:12826:	  printf (_("option %c\n"), c);
        -:12827:	  break;
        -:12828:
        -:12829:	case 'a':
        -:12830:	  printf (_("option a\n"));
        -:12831:	  break;
        -:12832:
        -:12833:	case 'b':
        -:12834:	  printf (_("option b\n"));
        -:12835:	  break;
        -:12836:
        -:12837:	case 'c':
        -:12838:	  printf (_("option c with value `%s'\n"), optarg);
        -:12839:	  break;
        -:12840:
        -:12841:	case 'd':
        -:12842:	  printf (_("option d with value `%s'\n"), optarg);
        -:12843:	  break;
        -:12844:
        -:12845:	case '?':
        -:12846:	  break;
        -:12847:
        -:12848:	default:
        -:12849:	  printf (_("?? getopt returned character code 0%o ??\n"), c);
        -:12850:	}
        -:12851:    }
        -:12852:
        -:12853:  if (optind < argc)
        -:12854:    {
        -:12855:      printf (_("non-option ARGV-elements: "));
        -:12856:      while (optind < argc)
        -:12857:	printf ("%s ", argv[optind++]);
        -:12858:      printf ("\n");
        -:12859:    }
        -:12860:
        -:12861:  exit (0);
        -:12862:}
        -:12863:
        -:12864:#endif /* TEST */
        -:12865:/* search.c - searching subroutines using dfa, kwset and regex for grep.
        -:12866:   Copyright (C) 1992, 1998 Free Software Foundation, Inc.
        -:12867:
        -:12868:   This program is free software; you can redistribute it and/or modify
        -:12869:   it under the terms of the GNU General Public License as published by
        -:12870:   the Free Software Foundation; either version 2, or (at your option)
        -:12871:   any later version.
        -:12872:
        -:12873:   This program is distributed in the hope that it will be useful,
        -:12874:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:12875:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:12876:   GNU General Public License for more details.
        -:12877:
        -:12878:   You should have received a copy of the GNU General Public License
        -:12879:   along with this program; if not, write to the Free Software
        -:12880:   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
        -:12881:   02111-1307, USA.  */
        -:12882:
        -:12883:/* Written August 1992 by Mike Haertel. */
        -:12884:
        -:12885:#ifdef HAVE_CONFIG_H
        -:12886:#if flag_config==0
        -:12887:# include <config.h>
        -:12888:#define flag_config 1
        -:12889:#endif
        -:12890:#endif
        -:12891:/*#include <sys/types.h>*/
        -:12892:/*#include "system.h"*/
        -:12893:/*#include "grep.h"*/
        -:12894:/*#include "regex.h"*/
        -:12895:/*#include "dfa.h"*/
        -:12896:/*#include "kwset.h"*/
        -:12897:
        -:12898:#define NCHAR (UCHAR_MAX + 1)
        -:12899:
        -:12900:static void Gcompile PARAMS((char *, size_t));
        -:12901:static void Ecompile PARAMS((char *, size_t));
        -:12902:static char *EGexecute PARAMS((char *, size_t, char **));
        -:12903:static void Fcompile PARAMS((char *, size_t));
        -:12904:static char *Fexecute PARAMS((char *, size_t, char **));
        -:12905:static void kwsinit PARAMS((void));
        -:12906:
        -:12907:/* Here is the matchers vector for the main program. */
        -:12908:struct matcher matchers[] = {
        -:12909:  { "default", Gcompile, EGexecute },
        -:12910:  { "grep", Gcompile, EGexecute },
        -:12911:  { "egrep", Ecompile, EGexecute },
        -:12912:  { "awk", Ecompile, EGexecute },
        -:12913:  { "fgrep", Fcompile, Fexecute },
        -:12914:  { 0, 0, 0 },
        -:12915:};
        -:12916:
        -:12917:/* For -w, we also consider _ to be word constituent.  */
        -:12918:#define WCHAR(C) (ISALNUM(C) || (C) == '_')
        -:12919:
        -:12920:/* DFA compiled regexp. */
        -:12921:static struct dfa dfa_1;
        -:12922:
        -:12923:/* Regex compiled regexp. */
        -:12924:static struct re_pattern_buffer regexbuf;
        -:12925:
        -:12926:/* KWset compiled pattern.  For Ecompile and Gcompile, we compile
        -:12927:   a list of strings, at least one of which is known to occur in
        -:12928:   any string matching the regexp. */
        -:12929:static kwset_t kwset;
        -:12930:
        -:12931:/* Last compiled fixed string known to exactly match the regexp.
        -:12932:   If kwsexec() returns < lastexact, then we don't need to
        -:12933:   call the regexp matcher at all. */
        -:12934:static int lastexact;
        -:12935:
        -:12936:void
function dfaerror called 0 returned 0% blocks executed 0%
    #####:12937:dfaerror(mesg)
        -:12938:  const char *mesg;
        -:12939:{
    #####:12940:  fatal(mesg, 0);
        -:12941:}
        -:12942:
        -:12943:static void
function kwsinit called 598 returned 100% blocks executed 93%
      598:12944:kwsinit()
        -:12945:{
        -:12946:  static char trans[NCHAR];
        -:12947:  int i;
        -:12948:
      598:12949:  if (match_icase)
branch  0 taken 56 (fallthrough)
branch  1 taken 542
    14392:12950:    for (i = 0; i < NCHAR; ++i)
branch  0 taken 14336
branch  1 taken 56 (fallthrough)
    14336:12951:      trans[i] = TOLOWER(i);
branch  0 taken 1456 (fallthrough)
branch  1 taken 12880
        -:12952:
      598:12953:  if (!(kwset = kwsalloc(match_icase ? trans : (char *) 0)))
branch  0 taken 56 (fallthrough)
branch  1 taken 542
call    2 returned 598
branch  3 taken 0 (fallthrough)
branch  4 taken 598
    #####:12954:    fatal("memory exhausted", 0);
call    0 never executed
      598:12955:}
        -:12956:
        -:12957:/* If the DFA turns out to have some set of fixed strings one of
        -:12958:   which must occur in the match, then we build a kwset matcher
        -:12959:   to find those strings, and thus quickly filter out impossible
        -:12960:   matches. */
        -:12961:static void
function kwsmusts called 722 returned 100% blocks executed 86%
      722:12962:kwsmusts()
        -:12963:{
        -:12964:  struct dfamust *dm;
        -:12965:  char *err;
        -:12966:
      722:12967:  if (dfa_1.musts)
branch  0 taken 593 (fallthrough)
branch  1 taken 129
        -:12968:    {
      593:12969:      kwsinit();
call    0 returned 593
        -:12970:      /* First, we compile in the substrings known to be exact
        -:12971:	 matches.  The kwset matcher will return the index
        -:12972:	 of the matching string that it chooses. */
     1186:12973:      for (dm = dfa_1.musts; dm; dm = dm->next)
branch  0 taken 593
branch  1 taken 593 (fallthrough)
        -:12974:	{
      593:12975:	  if (!dm->exact)
branch  0 taken 385 (fallthrough)
branch  1 taken 208
      385:12976:	    continue;
      208:12977:	  ++lastexact;
      208:12978:	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
call    0 returned 208
branch  1 taken 0 (fallthrough)
branch  2 taken 208
    #####:12979:	    fatal(err, 0);
call    0 never executed
        -:12980:	}
        -:12981:      /* Now, we compile the substrings that will require
        -:12982:	 the use of the regexp matcher.  */
     1186:12983:      for (dm = dfa_1.musts; dm; dm = dm->next)
branch  0 taken 593
branch  1 taken 593 (fallthrough)
        -:12984:	{
      593:12985:	  if (dm->exact)
branch  0 taken 208 (fallthrough)
branch  1 taken 385
      208:12986:	    continue;
      385:12987:	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
call    0 returned 385
branch  1 taken 0 (fallthrough)
branch  2 taken 385
    #####:12988:	    fatal(err, 0);
call    0 never executed
        -:12989:	}
      593:12990:      if ((err = kwsprep(kwset)) != 0)
call    0 returned 593
branch  1 taken 0 (fallthrough)
branch  2 taken 593
    #####:12991:	fatal(err, 0);
call    0 never executed
        -:12992:    }
      722:12993:}
        -:12994:
        -:12995:static void
function Gcompile called 535 returned 89% blocks executed 100%
      535:12996:Gcompile(pattern, size)
        -:12997:     char *pattern;
        -:12998:     size_t size;
        -:12999:{
        -:13000:  const char *err;
        -:13001:
      535:13002:  re_set_syntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE);
call    0 returned 535
        -:13003:  #ifndef FAULTY_F_DG_1
      535:13004:  dfasyntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE, match_icase, eolbyte);
call    0 returned 535
        -:13005:  #else
        -:13006:  dfasyntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE, match_icase, '\r');
        -:13007:  #endif 
        -:13008:
      535:13009:  if ((err = re_compile_pattern(pattern, size, &regexbuf)) != 0)
call    0 returned 535
branch  1 taken 59 (fallthrough)
branch  2 taken 476
       59:13010:    fatal(err, 0);
call    0 returned 0
        -:13011:
        -:13012:  /* In the match_words and match_lines cases, we use a different pattern
        -:13013:     for the DFA matcher that will quickly throw out cases that won't work.
        -:13014:     Then if DFA succeeds we do some hairy stuff using the regex matcher
        -:13015:     to decide whether the match should really count. */
      476:13016:  if (match_words || match_lines)
branch  0 taken 475 (fallthrough)
branch  1 taken 1
branch  2 taken 1 (fallthrough)
branch  3 taken 474
        2:13017:    {
        -:13018:      /* In the whole-word case, we use the pattern:
        -:13019:	 (^|[^A-Za-z_])(userpattern)([^A-Za-z_]|$).
        -:13020:	 In the whole-line case, we use the pattern:
        -:13021:	 ^(userpattern)$.
        -:13022:	 BUG: Using [A-Za-z_] is locale-dependent!
        -:13023:	 So will use [:alnum:] */
        -:13024:
        2:13025:      char *n = malloc(size + 50);
call    0 returned 2
        2:13026:      int i = 0;
        -:13027:
        2:13028:      strcpy(n, "");
        -:13029:
        2:13030:      if (match_lines)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:13031:	strcpy(n, "^\\(");
        2:13032:      if (match_words)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:13033:	strcpy(n, "\\(^\\|[^[:alnum:]_]\\)\\(");
        -:13034:
        2:13035:      i = strlen(n);
        2:13036:      memcpy(n + i, pattern, size);
        2:13037:      i += size;
        -:13038:
        2:13039:      if (match_words)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:13040:	strcpy(n + i, "\\)\\([^[:alnum:]_]\\|$\\)");
        2:13041:      if (match_lines)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:13042:	strcpy(n + i, "\\)$");
        -:13043:
        2:13044:      i += strlen(n + i);
        2:13045:      dfacomp(n, i, &dfa_1, 1);
call    0 returned 2
        -:13046:    }
        -:13047:  else
      474:13048:    dfacomp(pattern, size, &dfa_1, 1);
call    0 returned 474
        -:13049:
      476:13050:  kwsmusts();
call    0 returned 476
      476:13051:}
        -:13052:
        -:13053:static void
function Ecompile called 246 returned 100% blocks executed 42%
      246:13054:Ecompile(pattern, size)
        -:13055:     char *pattern;
        -:13056:     size_t size;
        -:13057:{
        -:13058:  const char *err;
        -:13059:
      246:13060:  if (strcmp(matcher, "awk") == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 246
        -:13061:    {
    #####:13062:      re_set_syntax(RE_SYNTAX_AWK);
call    0 never executed
    #####:13063:      dfasyntax(RE_SYNTAX_AWK, match_icase, eolbyte);
call    0 never executed
        -:13064:    }
        -:13065:  else
        -:13066:    {
      246:13067:      re_set_syntax (RE_SYNTAX_POSIX_EGREP);
call    0 returned 246
      246:13068:      dfasyntax (RE_SYNTAX_POSIX_EGREP, match_icase, eolbyte);
call    0 returned 246
        -:13069:    }
        -:13070:
      246:13071:  if ((err = re_compile_pattern(pattern, size, &regexbuf)) != 0)
call    0 returned 246
branch  1 taken 0 (fallthrough)
branch  2 taken 246
    #####:13072:    fatal(err, 0);
call    0 never executed
        -:13073:
        -:13074:  /* In the match_words and match_lines cases, we use a different pattern
        -:13075:     for the DFA matcher that will quickly throw out cases that won't work.
        -:13076:     Then if DFA succeeds we do some hairy stuff using the regex matcher
        -:13077:     to decide whether the match should really count. */
      246:13078:  if (match_words || match_lines)
branch  0 taken 246 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 246
    #####:13079:    {
        -:13080:      /* In the whole-word case, we use the pattern:
        -:13081:	 (^|[^A-Za-z_])(userpattern)([^A-Za-z_]|$).
        -:13082:	 In the whole-line case, we use the pattern:
        -:13083:	 ^(userpattern)$.
        -:13084:	 BUG: Using [A-Za-z_] is locale-dependent!
        -:13085:	 so will use the char class */
        -:13086:
    #####:13087:      char *n = malloc(size + 50);
call    0 never executed
    #####:13088:      int i = 0;
        -:13089:
    #####:13090:      strcpy(n, "");
        -:13091:
    #####:13092:      if (match_lines)
branch  0 never executed
branch  1 never executed
    #####:13093:	strcpy(n, "^(");
    #####:13094:      if (match_words)
branch  0 never executed
branch  1 never executed
    #####:13095:	strcpy(n, "(^|[^[:alnum:]_])(");
        -:13096:
    #####:13097:      i = strlen(n);
    #####:13098:      memcpy(n + i, pattern, size);
    #####:13099:      i += size;
        -:13100:
    #####:13101:      if (match_words)
branch  0 never executed
branch  1 never executed
    #####:13102:	strcpy(n + i, ")([^[:alnum:]_]|$)");
    #####:13103:      if (match_lines)
branch  0 never executed
branch  1 never executed
    #####:13104:	strcpy(n + i, ")$");
        -:13105:
    #####:13106:      i += strlen(n + i);
    #####:13107:      dfacomp(n, i, &dfa_1, 1);
call    0 never executed
        -:13108:    }
        -:13109:  else
      246:13110:    dfacomp(pattern, size, &dfa_1, 1);
call    0 returned 246
        -:13111:
      246:13112:  kwsmusts();
call    0 returned 246
      246:13113:}
        -:13114:
        -:13115:static char *
function EGexecute called 555297 returned 100% blocks executed 62%
   555297:13116:EGexecute(buf, size, endp)
        -:13117:     char *buf;
        -:13118:     size_t size;
        -:13119:     char **endp;
        -:13120:{
        -:13121:  register char *buflim, *beg, *end, save;
   555297:13122:  char eol = eolbyte;
        -:13123:  int backref, start, len;
        -:13124:  struct kwsmatch kwsm;
        -:13125:  static struct re_registers regs; /* This is static on account of a BRAIN-DEAD
        -:13126:				    Q@#%!# library interface in regex.c.  */
        -:13127:
   555297:13128:  buflim = buf + size;
        -:13129:
   757452:13130:  for (beg = end = buf; end < buflim; beg = end + 1)
branch  0 taken 756744
branch  1 taken 708 (fallthrough)
        -:13131:    {
   756744:13132:      if (kwset)
branch  0 taken 264023 (fallthrough)
branch  1 taken 492721
        -:13133:	{
        -:13134:	  /* Find a possible match using the KWset matcher. */
   264023:13135:	  beg = kwsexec(kwset, beg, buflim - beg, &kwsm);
call    0 returned 264023
   264023:13136:	  if (!beg)
branch  0 taken 6881 (fallthrough)
branch  1 taken 257142
     6881:13137:	    goto failure;
        -:13138:	  /* Narrow down to the line containing the candidate, and
        -:13139:	     run it through DFA. */
   257142:13140:	  end = memchr(beg, eol, buflim - beg);
   257142:13141:	  if (!end)
branch  0 taken 134 (fallthrough)
branch  1 taken 257008
      134:13142:	    end = buflim;
  3595300:13143:	  while (beg > buf && beg[-1] != eol)
branch  0 taken 3578980 (fallthrough)
branch  1 taken 16320
branch  2 taken 3338158
branch  3 taken 240822 (fallthrough)
  3338158:13144:	    --beg;
   257142:13145:	  save = *end;
   257142:13146:	  if (kwsm.index < lastexact)
branch  0 taken 24283 (fallthrough)
branch  1 taken 232859
    24283:13147:	    goto success;
   232859:13148:	  if (!dfaexec(&dfa_1, beg, end, 0, (int *) 0, &backref))
call    0 returned 232859
branch  1 taken 202155 (fallthrough)
branch  2 taken 30704
        -:13149:	    {
   202155:13150:	      *end = save;
   202155:13151:	      continue;
        -:13152:	    }
    30704:13153:	  *end = save;
        -:13154:	  /* Successful, no backreferences encountered. */
    30704:13155:	  if (!backref)
branch  0 taken 30704 (fallthrough)
branch  1 taken 0
    30704:13156:	    goto success;
        -:13157:	}
        -:13158:      else
        -:13159:	{
        -:13160:	  /* No good fixed strings; start with DFA. */
   492721:13161:	  save = *buflim;
   492721:13162:	  beg = dfaexec(&dfa_1, beg, buflim, 0, (int *) 0, &backref);
call    0 returned 492721
   492721:13163:	  *buflim = save;
   492721:13164:	  if (!beg)
branch  0 taken 970 (fallthrough)
branch  1 taken 491751
      970:13165:	    goto failure;
        -:13166:	  /* Narrow down to the line we've found. */
   491751:13167:	  end = memchr(beg, eol, buflim - beg);
   491751:13168:	  if (!end)
branch  0 taken 58 (fallthrough)
branch  1 taken 491693
       58:13169:	    end = buflim;
  3159457:13170:	  while (beg > buf && beg[-1] != eol)
branch  0 taken 2742092 (fallthrough)
branch  1 taken 417365
branch  2 taken 2667706
branch  3 taken 74386 (fallthrough)
  2667706:13171:	    --beg;
        -:13172:	  /* Successful, no backreferences encountered! */
   491751:13173:	  if (!backref)
branch  0 taken 491751 (fallthrough)
branch  1 taken 0
   491751:13174:	    goto success;
        -:13175:	}
        -:13176:      /* If we've made it to this point, this means DFA has seen
        -:13177:	 a probable match, and we need to run it through Regex. */
    #####:13178:      regexbuf.not_eol = 0;
    #####:13179:      if ((start = re_search(&regexbuf, beg, end - beg, 0, end - beg, &regs)) >= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:13180:	{
    #####:13181:	  len = regs.end[0] - start;
    #####:13182:	  if ((!match_lines && !match_words)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:13183:	      || (match_lines && len == end - beg))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:13184:	    goto success;
        -:13185:	  /* If -w, check if the match aligns with word boundaries.
        -:13186:	     We do this iteratively because:
        -:13187:	     (a) the line may contain more than one occurence of the pattern, and
        -:13188:	     (b) Several alternatives in the pattern might be valid at a given
        -:13189:	     point, and we may need to consider a shorter one to find a word
        -:13190:	     boundary. */
    #####:13191:	  if (match_words)
branch  0 never executed
branch  1 never executed
    #####:13192:	    while (start >= 0)
branch  0 never executed
branch  1 never executed
        -:13193:	      {
    #####:13194:		if ((start == 0 || !WCHAR ((unsigned char) beg[start - 1]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:13195:		    && (len == end - beg
branch  0 never executed
branch  1 never executed
    #####:13196:			|| !WCHAR ((unsigned char) beg[start + len])))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:13197:		  goto success;
    #####:13198:		if (len > 0)
branch  0 never executed
branch  1 never executed
        -:13199:		  {
        -:13200:		    /* Try a shorter length anchored at the same place. */
    #####:13201:		    --len;
    #####:13202:		    regexbuf.not_eol = 1;
    #####:13203:		    len = re_match(&regexbuf, beg, start + len, start, &regs);
call    0 never executed
        -:13204:		  }
    #####:13205:		if (len <= 0)
branch  0 never executed
branch  1 never executed
        -:13206:		  {
        -:13207:		    /* Try looking further on. */
    #####:13208:		    if (start == end - beg)
branch  0 never executed
branch  1 never executed
    #####:13209:		      break;
    #####:13210:		    ++start;
    #####:13211:		    regexbuf.not_eol = 0;
    #####:13212:		    start = re_search(&regexbuf, beg, end - beg,
    #####:13213:				      start, end - beg - start, &regs);
call    0 never executed
    #####:13214:		    len = regs.end[0] - start;
        -:13215:		  }
        -:13216:	      }
        -:13217:	}
        -:13218:    }
        -:13219:
      708:13220: failure:
     8559:13221:  return 0;
        -:13222:
   546738:13223: success:
   546738:13224:  *endp = end < buflim ? end + 1 : end;
branch  0 taken 546674 (fallthrough)
branch  1 taken 64
   546738:13225:  return beg;
        -:13226:}
        -:13227:
        -:13228:static void
function Fcompile called 5 returned 100% blocks executed 81%
        5:13229:Fcompile(pattern, size)
        -:13230:     char *pattern;
        -:13231:     size_t size;
        -:13232:{
        -:13233:  char *beg, *lim, *err;
        -:13234:
        5:13235:  kwsinit();
call    0 returned 5
        5:13236:  beg = pattern;
        -:13237:  do
        -:13238:    {
       38:13239:      for (lim = beg; lim < pattern + size && *lim != '\n'; ++lim)
branch  0 taken 33 (fallthrough)
branch  1 taken 5
branch  2 taken 33
branch  3 taken 0 (fallthrough)
        -:13240:	;
        5:13241:      if ((err = kwsincr(kwset, beg, lim - beg)) != 0)
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    #####:13242:	fatal(err, 0);
call    0 never executed
        5:13243:      if (lim < pattern + size)
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:13244:	++lim;
        5:13245:      beg = lim;
        -:13246:    }
        5:13247:  while (beg < pattern + size);
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:13248:
        5:13249:  if ((err = kwsprep(kwset)) != 0)
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    #####:13250:    fatal(err, 0);
call    0 never executed
        5:13251:}
        -:13252:
        -:13253:static char *
function Fexecute called 197 returned 100% blocks executed 44%
      197:13254:Fexecute(buf, size, endp)
        -:13255:     char *buf;
        -:13256:     size_t size;
        -:13257:     char **endp;
        -:13258:{
        -:13259:  register char *beg, *try, *end;
        -:13260:  register size_t len;
      197:13261:  char eol = eolbyte;
        -:13262:  struct kwsmatch kwsmatch;
        -:13263:
     197*:13264:  for (beg = buf; beg <= buf + size; ++beg)
branch  0 taken 197
branch  1 taken 0 (fallthrough)
        -:13265:    {
      197:13266:      if (!(beg = kwsexec(kwset, beg, buf + size - beg, &kwsmatch)))
call    0 returned 197
branch  1 taken 61 (fallthrough)
branch  2 taken 136
       61:13267:	return 0;
      136:13268:      len = kwsmatch.size[0];
      136:13269:      if (match_lines)
branch  0 taken 0 (fallthrough)
branch  1 taken 136
        -:13270:	{
    #####:13271:	  if (beg > buf && beg[-1] != eol)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:13272:	    continue;
    #####:13273:	  if (beg + len < buf + size && beg[len] != eol)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:13274:	    continue;
    #####:13275:	  goto success;
        -:13276:	}
      136:13277:      else if (match_words)
branch  0 taken 0 (fallthrough)
branch  1 taken 136
    #####:13278:	for (try = beg; len && try;)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:13279:	  {
    #####:13280:	    if (try > buf && WCHAR((unsigned char) try[-1]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:13281:	      break;
    #####:13282:	    if (try + len < buf + size && WCHAR((unsigned char) try[len]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:13283:	      {
    #####:13284:		try = kwsexec(kwset, beg, --len, &kwsmatch);
call    0 never executed
    #####:13285:		len = kwsmatch.size[0];
        -:13286:	      }
        -:13287:	    else
    #####:13288:	      goto success;
        -:13289:	  }
        -:13290:      else
      136:13291:	goto success;
        -:13292:    }
        -:13293:
    #####:13294:  return 0;
        -:13295:
      136:13296: success:
      136:13297:  if ((end = memchr(beg + len, eol, (buf + size) - (beg + len))) != 0)
branch  0 taken 136 (fallthrough)
branch  1 taken 0
      136:13298:    ++end;
        -:13299:  else
    #####:13300:    end = buf + size;
      136:13301:  *endp = end;
     3274:13302:  while (beg > buf && beg[-1] != '\n')
branch  0 taken 3253 (fallthrough)
branch  1 taken 21
branch  2 taken 3138
branch  3 taken 115 (fallthrough)
     3138:13303:    --beg;
      136:13304:  return beg;
        -:13305:}
        -:13306:#ifdef HAVE_CONFIG_H
        -:13307:#if flag_config==0
        -:13308:# include <config.h>
        -:13309:#define flag_config 1
        -:13310:#endif
        -:13311:#endif
        -:13312:/*#include "system.h"*/
        -:13313:/*#include "grep.h"*/
        -:13314:char const *matcher;
        -:13315:/* stpcpy.c -- copy a string and return pointer to end of new string
        -:13316:   Copyright (C) 1992, 1995, 1997, 1998 Free Software Foundation, Inc.
        -:13317:
        -:13318:   NOTE: The canonical source of this file is maintained with the GNU C Library.
        -:13319:   Bugs can be reported to bug-glibc@prep.ai.mit.edu.
        -:13320:
        -:13321:   This program is free software; you can redistribute it and/or modify it
        -:13322:   under the terms of the GNU General Public License as published by the
        -:13323:   Free Software Foundation; either version 2, or (at your option) any
        -:13324:   later version.
        -:13325:
        -:13326:   This program is distributed in the hope that it will be useful,
        -:13327:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:13328:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:13329:   GNU General Public License for more details.
        -:13330:
        -:13331:   You should have received a copy of the GNU General Public License
        -:13332:   along with this program; if not, write to the Free Software
        -:13333:   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
        -:13334:   USA.  */
        -:13335:
        -:13336:#ifdef HAVE_CONFIG_H
        -:13337:#if flag_config==0
        -:13338:# include <config.h>
        -:13339:#define flag_config 1
        -:13340:#endif
        -:13341:#endif
        -:13342:
        -:13343:#if flag_string==0
        -:13344:#include <string.h>
        -:13345:#define flag_string 1
        -:13346:#endif
        -:13347:
        -:13348:#undef __stpcpy
        -:13349:#undef stpcpy
        -:13350:
        -:13351:#ifndef weak_alias
        -:13352:# define __stpcpy stpcpy
        -:13353:#endif
        -:13354:
        -:13355:/* Copy SRC to DEST, returning the address of the terminating '\0' in DEST.  */
        -:13356:char *
        -:13357:__stpcpy (dest, src)
        -:13358:     char *dest;
        -:13359:     const char *src;
        -:13360:{
    #####:13361:  register char *d = dest;
    #####:13362:  register const char *s = src;
        -:13363:
        -:13364:  do
    #####:13365:    *d++ = *s;
    #####:13366:  while (*s++ != '\0');
branch  0 never executed
branch  1 never executed
        -:13367:
    #####:13368:  return d - 1;
        -:13369:}
        -:13370:#ifdef weak_alias
        -:13371:weak_alias (__stpcpy, stpcpy)
        -:13372:#endif
