        -:    0:Source:gzip.c
        -:    0:Graph:gzip.gcno
        -:    0:Data:gzip.gcda
        -:    0:Runs:214
        -:    1:#include "FaultSeeds.h"
        -:    2:#include "crypt.h"
        -:    3:#include "getopt.h"
        -:    4:#include "gzip.h" 
        -:    5:#include "lzw.h"   
        -:    6:#include "tailor.h"
        -:    7:#include "revision.h"
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <ctype.h>
        -:   11:#include <sys/types.h>
        -:   12:#include <sys/stat.h>
        -:   13:#include <errno.h>
        -:   14:#include <signal.h>   
        -:   15:
        -:   16:#define LINUX 1
        -:   17:
        -:   18:/* bits.c -- output variable-length bit strings
        -:   19: * Copyright (C) 1992-1993 Jean-loup Gailly
        -:   20: * This is free software; you can redistribute it and/or modify it under the
        -:   21: * terms of the GNU General Public License, see the file COPYING.
        -:   22: */
        -:   23:
        -:   24:
        -:   25:/*
        -:   26: *  PURPOSE
        -:   27: *
        -:   28: *      Output variable-length bit strings. Compression can be done
        -:   29: *      to a file or to memory. (The latter is not supported in this version.)
        -:   30: *
        -:   31: *  DISCUSSION
        -:   32: *
        -:   33: *      The PKZIP "deflate" file format interprets compressed file data
        -:   34: *      as a sequence of bits.  Multi-bit strings in the file may cross
        -:   35: *      byte boundaries without restriction.
        -:   36: *
        -:   37: *      The first bit of each byte is the low-order bit.
        -:   38: *
        -:   39: *      The routines in this file allow a variable-length bit value to
        -:   40: *      be output right-to-left (useful for literal values). For
        -:   41: *      left-to-right output (useful for code strings from the tree routines),
        -:   42: *      the bits must have been reversed first with bi_reverse().
        -:   43: *
        -:   44: *      For in-memory compression, the compressed bit stream goes directly
        -:   45: *      into the requested output buffer. The input data is read in blocks
        -:   46: *      by the mem_read() function. The buffer is limited to 64K on 16 bit
        -:   47: *      machines.
        -:   48: *
        -:   49: *  INTERFACE
        -:   50: *
        -:   51: *      void bi_init (FILE *zipfile)
        -:   52: *          Initialize the bit string routines.
        -:   53: *
        -:   54: *      void send_bits (int value, int length)
        -:   55: *          Write out a bit string, taking the source bits right to
        -:   56: *          left.
        -:   57: *
        -:   58: *      int bi_reverse (int value, int length)
        -:   59: *          Reverse the bits of a bit string, taking the source bits left to
        -:   60: *          right and emitting them right to left.
        -:   61: *
        -:   62: *      void bi_windup (void)
        -:   63: *          Write out any remaining bits in an incomplete byte.
        -:   64: *
        -:   65: *      void copy_block(char *buf, unsigned len, int header)
        -:   66: *          Copy a stored block to the zip file, storing first the length and
        -:   67: *          its one's complement if requested.
        -:   68: *
        -:   69: */
        -:   70:
        -:   71:#ifdef DEBUG
        -:   72:#  include <stdio.h>
        -:   73:#endif
        -:   74:
        -:   75:/*
        -:   76:#ifndef lint
        -:   77:static char rcsid[] = "$Id: bits.c,v 0.9 1993/06/11 10:16:58 jloup Exp $";
        -:   78:#endif
        -:   79:*/
        -:   80:
        -:   81:/* ===========================================================================
        -:   82: * Local data used by the "bit string" routines.
        -:   83: */
        -:   84:
        -:   85:local file_t zfile; /* output gzip file */
        -:   86:
        -:   87:local unsigned short bi_buf;
        -:   88:/* Output buffer. bits are inserted starting at the bottom (least significant
        -:   89: * bits).
        -:   90: */
        -:   91:
        -:   92:#define Buf_size (8 * 2*sizeof(char))
        -:   93:/* Number of bits used within bi_buf. (bi_buf might be implemented on
        -:   94: * more than 16 bits on some systems.)
        -:   95: */
        -:   96:
        -:   97:local int bi_valid;
        -:   98:/* Number of valid bits in bi_buf.  All bits above the last valid bit
        -:   99: * are always zero.
        -:  100: */
        -:  101:
        -:  102:int (*read_buf) OF((char *buf, unsigned size));
        -:  103:/* Current input function. Set to mem_read for in-memory compression */
        -:  104:
        -:  105:#ifdef DEBUG
        -:  106:  ulg bits_sent;   /* bit length of the compressed data */
        -:  107:#endif
        -:  108:
        -:  109:/* ===========================================================================
        -:  110: * Initialize the bit string routines.
        -:  111: */
function bi_init called 175 returned 100% blocks executed 100%
      175:  112:void bi_init (zipfile)
        -:  113:    file_t zipfile; /* output zip file, NO_FILE for in-memory compression */
        -:  114:{
      175:  115:    zfile  = zipfile;
      175:  116:    bi_buf = 0;
      175:  117:    bi_valid = 0;
        -:  118:#ifdef DEBUG
        -:  119:    bits_sent = 0L;
        -:  120:#endif
        -:  121:
        -:  122:    /* Set the defaults for file compression. They are set by memcompress
        -:  123:     * for in-memory compression.
        -:  124:     */
      175:  125:    if (zfile != NO_FILE) {
branch  0 taken 175 (fallthrough)
branch  1 taken 0
      175:  126:	read_buf  = file_read;
        -:  127:    }
      175:  128:}
        -:  129:
        -:  130:/* ===========================================================================
        -:  131: * Send a value on a given number of bits.
        -:  132: * IN assertion: length <= 16 and value fits in length bits.
        -:  133: */
function send_bits called 3998701 returned 100% blocks executed 90%
  3998701:  134:void send_bits(value, length)
        -:  135:    int value;  /* value to send */
        -:  136:    int length; /* number of bits */
        -:  137:{
        -:  138:#ifdef DEBUG
        -:  139:    Tracev((stderr," l %2d v %4x ", length, value));
        -:  140:    Assert(length > 0 && length <= 15, "invalid length");
        -:  141:    bits_sent += (ulg)length;
        -:  142:#endif
        -:  143:    /* If not enough room in bi_buf, use (valid) bits from bi_buf and
        -:  144:     * (16 - bi_valid) bits from value, leaving (width - (16-bi_valid))
        -:  145:     * unused bits in value.
        -:  146:     */
  3998701:  147:    if (bi_valid > (int)Buf_size - length) {
branch  0 taken 1198598 (fallthrough)
branch  1 taken 2800103
  1198598:  148:        bi_buf |= (value << bi_valid);
 1198598*:  149:        put_short(bi_buf);
branch  0 taken 1198581 (fallthrough)
branch  1 taken 17
branch  2 taken 0 (fallthrough)
branch  3 taken 17
call    4 never executed
branch  5 taken 17 (fallthrough)
branch  6 taken 0
call    7 returned 17
  1198598:  150:        bi_buf = (ush)value >> (Buf_size - bi_valid);
  1198598:  151:        bi_valid += length - Buf_size;
        -:  152:    } else {
  2800103:  153:        bi_buf |= value << bi_valid;
  2800103:  154:        bi_valid += length;
        -:  155:    }
  3998701:  156:}
        -:  157:
        -:  158:/* ===========================================================================
        -:  159: * Reverse the first len bits of a code, using straightforward code (a faster
        -:  160: * method would use a table)
        -:  161: * IN assertion: 1 <= len <= 15
        -:  162: */
function bi_reverse called 85011 returned 100% blocks executed 100%
    85011:  163:unsigned bi_reverse(code, len)
        -:  164:    unsigned code; /* the value to invert */
        -:  165:    int len;       /* its bit length */
        -:  166:{
    85011:  167:    register unsigned res = 0;
        -:  168:    do {
   672964:  169:        res |= code & 1;
   672964:  170:        code >>= 1, res <<= 1;
   672964:  171:    } while (--len > 0);
branch  0 taken 587953
branch  1 taken 85011 (fallthrough)
    85011:  172:    return res >> 1;
        -:  173:}
        -:  174:
        -:  175:/* ===========================================================================
        -:  176: * Write out any remaining bits in an incomplete byte.
        -:  177: */
function bi_windup called 176 returned 100% blocks executed 55%
      176:  178:void bi_windup()
        -:  179:{
      176:  180:    if (bi_valid > 8) {
branch  0 taken 105 (fallthrough)
branch  1 taken 71
     105*:  181:        put_short(bi_buf);
branch  0 taken 105 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
       71:  182:    } else if (bi_valid > 0) {
branch  0 taken 70 (fallthrough)
branch  1 taken 1
      70*:  183:        put_byte(bi_buf);
branch  0 taken 0 (fallthrough)
branch  1 taken 70
call    2 never executed
        -:  184:    }
      176:  185:    bi_buf = 0;
      176:  186:    bi_valid = 0;
        -:  187:#ifdef DEBUG
        -:  188:    bits_sent = (bits_sent+7) & ~7;
        -:  189:#endif
      176:  190:}
        -:  191:
        -:  192:/* ===========================================================================
        -:  193: * Copy a stored block to the zip file, storing first the length and its
        -:  194: * one's complement if requested.
        -:  195: */
function copy_block called 1 returned 100% blocks executed 53%
        1:  196:void copy_block(buf, len, header)
        -:  197:    char     *buf;    /* the input data */
        -:  198:    unsigned len;     /* its length */
        -:  199:    int      header;  /* true if block header must be written */
        -:  200:{
        1:  201:    bi_windup();              /* align on byte boundary */
call    0 returned 1
        -:  202:
        1:  203:    if (header) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
       1*:  204:        put_short((ush)len);   
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
       1*:  205:        put_short((ush)~len);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:  206:#ifdef DEBUG
        -:  207:        bits_sent += 2*16;
        -:  208:#endif
        -:  209:    }
        -:  210:#ifdef DEBUG
        -:  211:    bits_sent += (ulg)len<<3;
        -:  212:#endif
    12047:  213:    while (len--) {
branch  0 taken 12046
branch  1 taken 1 (fallthrough)
        -:  214:#ifdef CRYPT
        -:  215:        int t;
        -:  216:	if (key) zencode(*buf, t);
        -:  217:#endif
   12046*:  218:	put_byte(*buf++);
branch  0 taken 0 (fallthrough)
branch  1 taken 12046
call    2 never executed
        -:  219:    }
        1:  220:}
        -:  221:/* crypt.c (dummy version) -- do not perform encryption
        -:  222: * Hardly worth copyrighting :-)
        -:  223: */
        -:  224:/*
        -:  225:#ifndef lint
        -:  226:static char rcsid[] = "$Id: crypt.c,v 0.6 1993/03/22 09:48:47 jloup Exp $";
        -:  227:#endif
        -:  228:*/
        -:  229:/* deflate.c -- compress data using the deflation algorithm
        -:  230: * Copyright (C) 1992-1993 Jean-loup Gailly
        -:  231: * This is free software; you can redistribute it and/or modify it under the
        -:  232: * terms of the GNU General Public License, see the file COPYING.
        -:  233: */
        -:  234:
        -:  235:/*
        -:  236: *  PURPOSE
        -:  237: *
        -:  238: *      Identify new text as repetitions of old text within a fixed-
        -:  239: *      length sliding window trailing behind the new text.
        -:  240: *
        -:  241: *  DISCUSSION
        -:  242: *
        -:  243: *      The "deflation" process depends on being able to identify portions
        -:  244: *      of the input text which are identical to earlier input (within a
        -:  245: *      sliding window trailing behind the input currently being processed).
        -:  246: *
        -:  247: *      The most straightforward technique turns out to be the fastest for
        -:  248: *      most input files: try all possible matches and select the longest.
        -:  249: *      The key feature of this algorithm is that insertions into the string
        -:  250: *      dictionary are very simple and thus fast, and deletions are avoided
        -:  251: *      completely. Insertions are performed at each input character, whereas
        -:  252: *      string matches are performed only when the previous match ends. So it
        -:  253: *      is preferable to spend more time in matches to allow very fast string
        -:  254: *      insertions and avoid deletions. The matching algorithm for small
        -:  255: *      strings is inspired from that of Rabin & Karp. A brute force approach
        -:  256: *      is used to find longer strings when a small match has been found.
        -:  257: *      A similar algorithm is used in comic (by Jan-Mark Wams) and freeze
        -:  258: *      (by Leonid Broukhis).
        -:  259: *         A previous version of this file used a more sophisticated algorithm
        -:  260: *      (by Fiala and Greene) which is guaranteed to run in linear amortized
        -:  261: *      time, but has a larger average cost, uses more memory and is patented.
        -:  262: *      However the F&G algorithm may be faster for some highly redundant
        -:  263: *      files if the parameter max_chain_length (described below) is too large.
        -:  264: *
        -:  265: *  ACKNOWLEDGEMENTS
        -:  266: *
        -:  267: *      The idea of lazy evaluation of matches is due to Jan-Mark Wams, and
        -:  268: *      I found it in 'freeze' written by Leonid Broukhis.
        -:  269: *      Thanks to many info-zippers for bug reports and testing.
        -:  270: *
        -:  271: *  REFERENCES
        -:  272: *
        -:  273: *      APPNOTE.TXT documentation file in PKZIP 1.93a distribution.
        -:  274: *
        -:  275: *      A description of the Rabin and Karp algorithm is given in the book
        -:  276: *         "Algorithms" by R. Sedgewick, Addison-Wesley, p252.
        -:  277: *
        -:  278: *      Fiala,E.R., and Greene,D.H.
        -:  279: *         Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595
        -:  280: *
        -:  281: *  INTERFACE
        -:  282: *
        -:  283: *      void lm_init (int pack_level, ush *flags)
        -:  284: *          Initialize the "longest match" routines for a new file
        -:  285: *
        -:  286: *      ulg deflate (void)
        -:  287: *          Processes a new input file and return its compressed length. Sets
        -:  288: *          the compressed length, crc, deflate flags and internal file
        -:  289: *          attributes.
        -:  290: */
        -:  291:
        -:  292:/*
        -:  293:#ifndef lint
        -:  294:static char rcsid[] = "$Id: deflate.c,v 0.14 1993/06/12 20:11:10 jloup Exp $";
        -:  295:#endif
        -:  296:*/
        -:  297:
        -:  298:/* ===========================================================================
        -:  299: * Configuration parameters
        -:  300: */
        -:  301:
        -:  302:/* Compile with MEDIUM_MEM to reduce the memory requirements or
        -:  303: * with SMALL_MEM to use as little memory as possible. Use BIG_MEM if the
        -:  304: * entire input file can be held in memory (not possible on 16 bit systems).
        -:  305: * Warning: defining these symbols affects HASH_BITS (see below) and thus
        -:  306: * affects the compression ratio. The compressed output
        -:  307: * is still correct, and might even be smaller in some cases.
        -:  308: */
        -:  309:
        -:  310:#ifdef SMALL_MEM
        -:  311:#   define HASH_BITS  13  /* Number of bits used to hash strings */
        -:  312:#endif
        -:  313:#ifdef MEDIUM_MEM
        -:  314:#   define HASH_BITS  14
        -:  315:#endif
        -:  316:#ifndef HASH_BITS
        -:  317:#   define HASH_BITS  15
        -:  318:   /* For portability to 16 bit machines, do not use values above 15. */
        -:  319:#endif
        -:  320:
        -:  321:/* To save space (see unlzw.c), we overlay prev+head with tab_prefix and
        -:  322: * window with tab_suffix. Check that we can do this:
        -:  323: */
        -:  324:#if WSIZE<<1 > 1<<BITS
        -:  325:   error: cannot overlay window with tab_suffix and prev with tab_prefix0
        -:  326:#endif
        -:  327:#if HASH_BITS > BITS-1
        -:  328:   error: cannot overlay head with tab_prefix1
        -:  329:#endif
        -:  330:
        -:  331:#define HASH_SIZE (unsigned)(1<<HASH_BITS)
        -:  332:#define HASH_MASK (HASH_SIZE-1)
        -:  333:#define WMASK     (WSIZE-1)
        -:  334:/* HASH_SIZE and WSIZE must be powers of two */
        -:  335:
        -:  336:#define NIL 0
        -:  337:/* Tail of hash chains */
        -:  338:
        -:  339:#define FAST 4
        -:  340:#define SLOW 2
        -:  341:/* speed options for the general purpose bit flag */
        -:  342:
        -:  343:#ifndef TOO_FAR
        -:  344:#  define TOO_FAR 4096
        -:  345:#endif
        -:  346:/* Matches of length 3 are discarded if their distance exceeds TOO_FAR */
        -:  347:
        -:  348:/* ===========================================================================
        -:  349: * Local data used by the "longest match" routines.
        -:  350: */
        -:  351:
        -:  352:typedef ush Pos;
        -:  353:typedef unsigned IPos;
        -:  354:/* A Pos is an index in the character window. We use short instead of int to
        -:  355: * save space in the various tables. IPos is used only for parameter passing.
        -:  356: */
        -:  357:
        -:  358:/* DECLARE(uch, window, 2L*WSIZE); */
        -:  359:/* Sliding window. Input bytes are read into the second half of the window,
        -:  360: * and move to the first half later to keep a dictionary of at least WSIZE
        -:  361: * bytes. With this organization, matches are limited to a distance of
        -:  362: * WSIZE-MAX_MATCH bytes, but this ensures that IO is always
        -:  363: * performed with a length multiple of the block size. Also, it limits
        -:  364: * the window size to 64K, which is quite useful on MSDOS.
        -:  365: * To do: limit the window size to WSIZE+BSZ if SMALL_MEM (the code would
        -:  366: * be less efficient).
        -:  367: */
        -:  368:
        -:  369:/* DECLARE(Pos, prev, WSIZE); */
        -:  370:/* Link to older string with same hash index. To limit the size of this
        -:  371: * array to 64K, this link is maintained only for the last 32K strings.
        -:  372: * An index in this array is thus a window index modulo 32K.
        -:  373: */
        -:  374:
        -:  375:/* DECLARE(Pos, head, 1<<HASH_BITS); */
        -:  376:/* Heads of the hash chains or NIL. */
        -:  377:
        -:  378:ulg window_size = (ulg)2*WSIZE;
        -:  379:/* window size, 2*WSIZE except for MMAP or BIG_MEM, where it is the
        -:  380: * input file length plus MIN_LOOKAHEAD.
        -:  381: */
        -:  382:
        -:  383:long block_start;
        -:  384:/* window position at the beginning of the current output block. Gets
        -:  385: * negative when the window is moved backwards.
        -:  386: */
        -:  387:
        -:  388:local unsigned ins_h;  /* hash index of string to be inserted */
        -:  389:
        -:  390:#define H_SHIFT  ((HASH_BITS+MIN_MATCH-1)/MIN_MATCH)
        -:  391:/* Number of bits by which ins_h and del_h must be shifted at each
        -:  392: * input step. It must be such that after MIN_MATCH steps, the oldest
        -:  393: * byte no longer takes part in the hash key, that is:
        -:  394: *   H_SHIFT * MIN_MATCH >= HASH_BITS
        -:  395: */
        -:  396:
        -:  397:unsigned int near prev_length;
        -:  398:/* Length of the best match at previous step. Matches not greater than this
        -:  399: * are discarded. This is used in the lazy match evaluation.
        -:  400: */
        -:  401:
        -:  402:      unsigned near strstart;      /* start of string to insert */
        -:  403:      unsigned near match_start;   /* start of matching string */
        -:  404:local int           eofile;        /* flag set at end of input file */
        -:  405:local unsigned      lookahead;     /* number of valid bytes ahead in window */
        -:  406:
        -:  407:unsigned near max_chain_length;
        -:  408:/* To speed up deflation, hash chains are never searched beyond this length.
        -:  409: * A higher limit improves compression ratio but degrades the speed.
        -:  410: */
        -:  411:
        -:  412:local unsigned int max_lazy_match;
        -:  413:/* Attempt to find a better match only when the current match is strictly
        -:  414: * smaller than this value. This mechanism is used only for compression
        -:  415: * levels >= 4.
        -:  416: */
        -:  417:#define max_insert_length  max_lazy_match
        -:  418:/* Insert new strings in the hash table only if the match length
        -:  419: * is not greater than this length. This saves time but degrades compression.
        -:  420: * max_insert_length is used only for compression levels <= 3.
        -:  421: */
        -:  422:
        -:  423:local int compr_level;
        -:  424:/* compression level (1..9) */
        -:  425:
        -:  426:int near good_match;
        -:  427:/* Use a faster search when the previous match is longer than this */
        -:  428:
        -:  429:
        -:  430:/* Values for max_lazy_match, good_match and max_chain_length, depending on
        -:  431: * the desired pack level (0..9). The values given below have been tuned to
        -:  432: * exclude worst case performance for pathological files. Better values may be
        -:  433: * found for specific files.
        -:  434: */
        -:  435:
        -:  436:typedef struct config {
        -:  437:   ush good_length; /* reduce lazy search above this match length */
        -:  438:   ush max_lazy;    /* do not perform lazy search above this match length */
        -:  439:   ush nice_length; /* quit search above this match length */
        -:  440:   ush max_chain;
        -:  441:} config;
        -:  442:
        -:  443:#ifdef  FULL_SEARCH
        -:  444:# define nice_match MAX_MATCH
        -:  445:#else
        -:  446:  int near nice_match; /* Stop searching when current match exceeds this */
        -:  447:#endif
        -:  448:
        -:  449:local config configuration_table[10] = {
        -:  450:/*      good lazy nice chain */
        -:  451:/* 0 */ {0,    0,  0,    0},  /* store only */
        -:  452:/* 1 */ {4,    4,  8,    4},  /* maximum speed, no lazy matches */
        -:  453:/* 2 */ {4,    5, 16,    8},
        -:  454:/* 3 */ {4,    6, 32,   32},
        -:  455:
        -:  456:/* 4 */ {4,    4, 16,   16},  /* lazy matches */
        -:  457:/* 5 */ {8,   16, 32,   32},
        -:  458:/* 6 */ {8,   16, 128, 128},
        -:  459:/* 7 */ {8,   32, 128, 256},
        -:  460:/* 8 */ {32, 128, 258, 1024},
        -:  461:/* 9 */ {32, 258, 258, 4096}}; /* maximum compression */
        -:  462:
        -:  463:/* Note: the deflate() code requires max_lazy >= MIN_MATCH and max_chain >= 4
        -:  464: * For deflate_fast() (levels <= 3) good is ignored and lazy has a different
        -:  465: * meaning.
        -:  466: */
        -:  467:
        -:  468:#define EQUAL 0
        -:  469:/* result of memcmp for equal strings */
        -:  470:
        -:  471:/* ===========================================================================
        -:  472: *  Prototypes for local functions.
        -:  473: */
        -:  474:local void fill_window   OF((void));
        -:  475:local ulg deflate_fast   OF((void));
        -:  476:
        -:  477:      int  longest_match OF((IPos cur_match));
        -:  478:#ifdef ASMV
        -:  479:      void match_init OF((void)); /* asm code initialization */
        -:  480:#endif
        -:  481:
        -:  482:#ifdef DEBUG
        -:  483:local  void check_match OF((IPos start, IPos match, int length));
        -:  484:#endif
        -:  485:
        -:  486:/* ===========================================================================
        -:  487: * Update a hash value with the given input byte
        -:  488: * IN  assertion: all calls to to UPDATE_HASH are made with consecutive
        -:  489: *    input characters, so that a running hash key can be computed from the
        -:  490: *    previous key instead of complete recalculation each time.
        -:  491: */
        -:  492:#define UPDATE_HASH(h,c) (h = (((h)<<H_SHIFT) ^ (c)) & HASH_MASK)
        -:  493:
        -:  494:/* ===========================================================================
        -:  495: * Insert string s in the dictionary and set match_head to the previous head
        -:  496: * of the hash chain (the most recent string with same hash key). Return
        -:  497: * the previous length of the hash chain.
        -:  498: * IN  assertion: all calls to to INSERT_STRING are made with consecutive
        -:  499: *    input characters and the first MIN_MATCH bytes of s are valid
        -:  500: *    (except for the last MIN_MATCH-1 bytes of the input file).
        -:  501: */
        -:  502:#define INSERT_STRING(s, match_head) \
        -:  503:   (UPDATE_HASH(ins_h, window[(s) + MIN_MATCH-1]), \
        -:  504:    prev[(s) & WMASK] = match_head = head[ins_h], \
        -:  505:    head[ins_h] = (s))
        -:  506:
        -:  507:/* ===========================================================================
        -:  508: * Initialize the "longest match" routines for a new file
        -:  509: */
function lm_init called 175 returned 100% blocks executed 84%
      175:  510:void lm_init (pack_level, flags)
        -:  511:    int pack_level; /* 0: store, 1: best speed, 9: best compression */
        -:  512:    ush *flags;     /* general purpose bit flag */
        -:  513:{
        -:  514:    register unsigned j;
        -:  515:
     175*:  516:    if (pack_level < 1 || pack_level > 9) error("bad pack level");
branch  0 taken 175 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 175
call    4 never executed
        -:  517:#ifdef FAULTY_F_KL_8
        -:  518:    compr_level = 0;
        -:  519:#else
      175:  520:    compr_level = pack_level;
        -:  521:#endif
        -:  522:
        -:  523:    /* Initialize the hash table. */
        -:  524:#if defined(MAXSEG_64K) && HASH_BITS == 15
        -:  525:    for (j = 0;  j < HASH_SIZE; j++) head[j] = NIL;
        -:  526:#else
      175:  527:    memzero((char*)head, HASH_SIZE*sizeof(*head));
        -:  528:#endif
        -:  529:    /* prev will be initialized on the fly */
        -:  530:
        -:  531:    /* Set the default configuration parameters:
        -:  532:     */
      175:  533:    max_lazy_match   = configuration_table[pack_level].max_lazy;
      175:  534:    good_match       = configuration_table[pack_level].good_length;
        -:  535:#ifndef FULL_SEARCH
      175:  536:    nice_match       = configuration_table[pack_level].nice_length;
        -:  537:#endif
      175:  538:    max_chain_length = configuration_table[pack_level].max_chain;
      175:  539:    if (pack_level == 1) {
branch  0 taken 17 (fallthrough)
branch  1 taken 158
       17:  540:       *flags |= FAST;
      158:  541:    } else if (pack_level == 9) {
branch  0 taken 17 (fallthrough)
branch  1 taken 141
       17:  542:       *flags |= SLOW;
        -:  543:    }
        -:  544:    /* ??? reduce max_chain_length for binary files */
        -:  545:
      175:  546:    strstart = 0;
      175:  547:    block_start = 0L;
        -:  548:#ifdef ASMV
        -:  549:    match_init(); /* initialize the asm code */
        -:  550:#endif
        -:  551:
      175:  552:    lookahead = read_buf((char*)window,
call    0 returned 175
        -:  553:			 sizeof(int) <= 2 ? (unsigned)WSIZE : 2*WSIZE);
        -:  554:
      175:  555:    if (lookahead == 0 || lookahead == (unsigned)EOF) {
branch  0 taken 174 (fallthrough)
branch  1 taken 1
branch  2 taken 1 (fallthrough)
branch  3 taken 173
        2:  556:       eofile = 1, lookahead = 0;
        2:  557:       return;
        -:  558:    }
      173:  559:    eofile = 0;
        -:  560:    /* Make sure that we always have enough lookahead. This is important
        -:  561:     * if input comes from a device such as a tty.
        -:  562:     */
     173*:  563:    while (lookahead < MIN_LOOKAHEAD && !eofile) fill_window();
call    0 never executed
branch  1 taken 0 (fallthrough)
branch  2 taken 173
branch  3 never executed
branch  4 never executed
        -:  564:
      173:  565:    ins_h = 0;
      519:  566:    for (j=0; j<MIN_MATCH-1; j++) UPDATE_HASH(ins_h, window[j]);
branch  0 taken 346
branch  1 taken 173 (fallthrough)
        -:  567:    /* If lookahead < MIN_MATCH, ins_h is garbage, but this is
        -:  568:     * not important since only literal bytes will be emitted.
        -:  569:     */
        -:  570:}
        -:  571:
        -:  572:/* ===========================================================================
        -:  573: * Set match_start to the longest match starting at the given string and
        -:  574: * return its length. Matches shorter or equal to prev_length are discarded,
        -:  575: * in which case the result is equal to prev_length and match_start is
        -:  576: * garbage.
        -:  577: * IN assertions: cur_match is the head of the hash chain for the current
        -:  578: *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
        -:  579: */
        -:  580:#ifndef ASMV
        -:  581:/* For MSDOS, OS/2 and 386 Unix, an optimized version is in match.asm or
        -:  582: * match.s. The code is functionally equivalent, so you can use the C version
        -:  583: * if desired.
        -:  584: */
function longest_match called 1882478 returned 100% blocks executed 100%
  1882478:  585:int longest_match(cur_match)
        -:  586:    IPos cur_match;                             /* current match */
        -:  587:{
  1882478:  588:    unsigned chain_length = max_chain_length;   /* max hash chain length */
  1882478:  589:    register uch *scan = window + strstart;     /* current string */
        -:  590:    register uch *match;                        /* matched string */
        -:  591:    register int len;                           /* length of current match */
  1882478:  592:    int best_len = prev_length;                 /* best match length so far */
  1882478:  593:    IPos limit = strstart > (IPos)MAX_DIST ? strstart - (IPos)MAX_DIST : NIL;
        -:  594:    /* Stop when cur_match becomes <= limit. To simplify the code,
        -:  595:     * we prevent matches with the string of window index 0.
        -:  596:     */
        -:  597:
        -:  598:/* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
        -:  599: * It is easy to get rid of this optimization if necessary.
        -:  600: */
        -:  601:#if HASH_BITS < 8 || MAX_MATCH != 258
        -:  602:   error: Code too clever
        -:  603:#endif
        -:  604:
        -:  605:#ifdef UNALIGNED_OK
        -:  606:    /* Compare two bytes at a time. Note: this is not always beneficial.
        -:  607:     * Try with and without -DUNALIGNED_OK to check.
        -:  608:     */
        -:  609:    register uch *strend = window + strstart + MAX_MATCH - 1;
        -:  610:    register ush scan_start = *(ush*)scan;
        -:  611:    register ush scan_end   = *(ush*)(scan+best_len-1);
        -:  612:#else
  1882478:  613:    register uch *strend = window + strstart + MAX_MATCH;
  1882478:  614:    register uch scan_end1  = scan[best_len-1];
  1882478:  615:    register uch scan_end   = scan[best_len];
        -:  616:#endif
        -:  617:
        -:  618:    /* Do not waste too much time if we already have a good match: */
  1882478:  619:    if (prev_length >= good_match) {
branch  0 taken 114250 (fallthrough)
branch  1 taken 1768228
   114250:  620:        chain_length >>= 2;
        -:  621:    }
        -:  622:    Assert(strstart <= window_size-MIN_LOOKAHEAD, "insufficient lookahead");
        -:  623:
        -:  624:    do {
        -:  625:        Assert(cur_match < strstart, "no future");
 39870405:  626:        match = window + cur_match;
        -:  627:
        -:  628:        /* Skip to next match if the match length cannot increase
        -:  629:         * or if the match length is less than 2:
        -:  630:         */
        -:  631:#if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
        -:  632:        /* This code assumes sizeof(unsigned short) == 2. Do not use
        -:  633:         * UNALIGNED_OK if your compiler uses a different size.
        -:  634:         */
        -:  635:        if (*(ush*)(match+best_len-1) != scan_end ||
        -:  636:            *(ush*)match != scan_start) continue;
        -:  637:
        -:  638:        /* It is not necessary to compare scan[2] and match[2] since they are
        -:  639:         * always equal when the other bytes match, given that the hash keys
        -:  640:         * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
        -:  641:         * strstart+3, +5, ... up to strstart+257. We check for insufficient
        -:  642:         * lookahead only every 4th comparison; the 128th check will be made
        -:  643:         * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is
        -:  644:         * necessary to put more guard bytes at the end of the window, or
        -:  645:         * to check more often for insufficient lookahead.
        -:  646:         */
        -:  647:        scan++, match++;
        -:  648:        do {
        -:  649:        } while (*(ush*)(scan+=2) == *(ush*)(match+=2) &&
        -:  650:                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
        -:  651:                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
        -:  652:                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
        -:  653:                 scan < strend);
        -:  654:        /* The funny "do {}" generates better code on most compilers */
        -:  655:
        -:  656:        /* Here, scan <= window+strstart+257 */
        -:  657:        Assert(scan <= window+(unsigned)(window_size-1), "wild scan");
        -:  658:        if (*scan == *match) scan++;
        -:  659:
        -:  660:        len = (MAX_MATCH - 1) - (int)(strend-scan);
        -:  661:        scan = strend - (MAX_MATCH-1);
        -:  662:
        -:  663:#else /* UNALIGNED_OK */
        -:  664:
 39870405:  665:        if (match[best_len]   != scan_end  ||
branch  0 taken 5616771 (fallthrough)
branch  1 taken 34253634
  5616771:  666:            match[best_len-1] != scan_end1 ||
branch  0 taken 2966671 (fallthrough)
branch  1 taken 2650100
  2966671:  667:            *match            != *scan     ||
branch  0 taken 1985637 (fallthrough)
branch  1 taken 981034
 39870405:  668:            *++match          != scan[1])      continue;
branch  0 taken 6279 (fallthrough)
branch  1 taken 1979358
        -:  669:
        -:  670:        /* The check at best_len-1 can be removed because it will be made
        -:  671:         * again later. (This heuristic is not always a win.)
        -:  672:         * It is not necessary to compare scan[2] and match[2] since they
        -:  673:         * are always equal when the other bytes match, given that
        -:  674:         * the hash keys are equal and that HASH_BITS >= 8.
        -:  675:         */
  1979358:  676:        scan += 2, match++;
        -:  677:
        -:  678:        /* We check for insufficient lookahead only every 8th comparison;
        -:  679:         * the 256th check will be made at strstart+258.
        -:  680:         */
        -:  681:        do {
 14279847:  682:        } while (*++scan == *++match && *++scan == *++match &&
branch  0 taken 13956569 (fallthrough)
branch  1 taken 323278
 13956569:  683:                 *++scan == *++match && *++scan == *++match &&
branch  0 taken 13743506 (fallthrough)
branch  1 taken 213063
branch  2 taken 13570244 (fallthrough)
branch  3 taken 173262
 13570244:  684:                 *++scan == *++match && *++scan == *++match &&
branch  0 taken 13448119 (fallthrough)
branch  1 taken 122125
branch  2 taken 13356178 (fallthrough)
branch  3 taken 91941
 15335536:  685:                 *++scan == *++match && *++scan == *++match &&
branch  0 taken 14279847 (fallthrough)
branch  1 taken 539057
branch  2 taken 13294763 (fallthrough)
branch  3 taken 61415
branch  4 taken 13246814 (fallthrough)
branch  5 taken 47949
branch  6 taken 12839546
branch  7 taken 407268 (fallthrough)
        -:  686:                 scan < strend);
        -:  687:
  1979358:  688:        len = MAX_MATCH - (int)(strend - scan);
  1979358:  689:        scan = strend - MAX_MATCH;
        -:  690:
        -:  691:#endif /* UNALIGNED_OK */
        -:  692:
  1979358:  693:        if (len > best_len) {
branch  0 taken 1793845 (fallthrough)
branch  1 taken 185513
  1793845:  694:            match_start = cur_match;
  1793845:  695:            best_len = len;
  1793845:  696:            if (len >= nice_match) break;
branch  0 taken 431802 (fallthrough)
branch  1 taken 1362043
        -:  697:#ifdef UNALIGNED_OK
        -:  698:            scan_end = *(ush*)(scan+best_len-1);
        -:  699:#else
  1362043:  700:            scan_end1  = scan[best_len-1];
  1362043:  701:            scan_end   = scan[best_len];
        -:  702:#endif
        -:  703:        }
 39438603:  704:    } while ((cur_match = prev[cur_match & WMASK]) > limit
 39438603:  705:	     && --chain_length != 0);
branch  0 taken 38256418 (fallthrough)
branch  1 taken 1182185
branch  2 taken 37987927
branch  3 taken 268491 (fallthrough)
        -:  706:
  1882478:  707:    return best_len;
        -:  708:}
        -:  709:#endif /* ASMV */
        -:  710:
        -:  711:#ifdef DEBUG
        -:  712:/* ===========================================================================
        -:  713: * Check that the match at match_start is indeed a match.
        -:  714: */
        -:  715:local void check_match(start, match, length)
        -:  716:    IPos start, match;
        -:  717:    int length;
        -:  718:{
        -:  719:    /* check that the match is indeed a match */
        -:  720:    if (memcmp((char*)window + match,
        -:  721:                (char*)window + start, length) != EQUAL) {
        -:  722:        fprintf(stderr,
        -:  723:            " start %d, match %d, length %d\n",
        -:  724:            start, match, length);
        -:  725:        error("invalid match");
        -:  726:    }
        -:  727:    if (verbose > 1) {
        -:  728:        fprintf(stderr,"\\[%d,%d]", start-match, length);
        -:  729:        do { putc(window[start++], stderr); } while (--length != 0);
        -:  730:    }
        -:  731:}
        -:  732:#else
        -:  733:#  define check_match(start, match, length)
        -:  734:#endif
        -:  735:
        -:  736:/* ===========================================================================
        -:  737: * Fill the window when the lookahead becomes insufficient.
        -:  738: * Updates strstart and lookahead, and sets eofile if end of input file.
        -:  739: * IN assertion: lookahead < MIN_LOOKAHEAD && strstart + lookahead > 0
        -:  740: * OUT assertions: at least one byte has been read, or eofile is set;
        -:  741: *    file reads are performed for at least two bytes (required for the
        -:  742: *    translate_eol option).
        -:  743: */
function fill_window called 3395 returned 100% blocks executed 96%
     3395:  744:local void fill_window()
        -:  745:{
        -:  746:    register unsigned n, m;
     3395:  747:    unsigned more = (unsigned)(window_size - (ulg)lookahead - (ulg)strstart);
        -:  748:    /* Amount of free space at the end of the window. */
        -:  749:
        -:  750:    /* If the window is almost full and there is insufficient lookahead,
        -:  751:     * move the upper half to the lower one to make room in the upper half.
        -:  752:     */
     3395:  753:    if (more == (unsigned)EOF) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3395
        -:  754:        /* Very unlikely, but possible on 16 bit machine if strstart == 0
        -:  755:         * and lookahead == 1 (input done one byte at time)
        -:  756:         */
    #####:  757:        more--;
     3395:  758:    } else if (strstart >= WSIZE+MAX_DIST) {
branch  0 taken 3223 (fallthrough)
branch  1 taken 172
        -:  759:        /* By the IN assertion, the window is not empty so we can't confuse
        -:  760:         * more == 0 with more == 64K on a 16 bit machine.
        -:  761:         */
        -:  762:        Assert(window_size == (ulg)2*WSIZE, "no sliding with BIG_MEM");
        -:  763:
     3223:  764:        memcpy((char*)window, (char*)window+WSIZE, (unsigned)WSIZE);
     3223:  765:        match_start -= WSIZE;
     3223:  766:        strstart    -= WSIZE; /* we now have strstart >= MAX_DIST: */
        -:  767:
     3223:  768:        block_start -= (long) WSIZE;
        -:  769:
105614487:  770:        for (n = 0; n < HASH_SIZE; n++) {
branch  0 taken 105611264
branch  1 taken 3223 (fallthrough)
105611264:  771:            m = head[n];
105611264:  772:            head[n] = (Pos)(m >= WSIZE ? m-WSIZE : NIL);
branch  0 taken 67185 (fallthrough)
branch  1 taken 105544079
        -:  773:        }
105614487:  774:        for (n = 0; n < WSIZE; n++) {
branch  0 taken 105611264
branch  1 taken 3223 (fallthrough)
105611264:  775:            m = prev[n];
105611264:  776:            prev[n] = (Pos)(m >= WSIZE ? m-WSIZE : NIL);
branch  0 taken 105113304 (fallthrough)
branch  1 taken 497960
        -:  777:            /* If n is not on any hash chain, prev[n] is garbage but
        -:  778:             * its value will never be used.
        -:  779:             */
        -:  780:        }
     3223:  781:        more += WSIZE;
        -:  782:    }
        -:  783:    /* At this point, more >= 2 */
     3395:  784:    if (!eofile) {
branch  0 taken 3395 (fallthrough)
branch  1 taken 0
     3395:  785:        n = read_buf((char*)window+strstart+lookahead, more);
call    0 returned 3395
     3395:  786:        if (n == 0 || n == (unsigned)EOF) {
branch  0 taken 3222 (fallthrough)
branch  1 taken 173
branch  2 taken 0 (fallthrough)
branch  3 taken 3222
      173:  787:            eofile = 1;
        -:  788:        } else {
     3222:  789:            lookahead += n;
        -:  790:        }
        -:  791:    }
     3395:  792:}
        -:  793:
        -:  794:/* ===========================================================================
        -:  795: * Flush the current block, with given end-of-file flag.
        -:  796: * IN assertion: strstart is set to the end of the current match.
        -:  797: */
        -:  798:#define FLUSH_BLOCK(eof) \
        -:  799:   flush_block(block_start >= 0L ? (char*)&window[(unsigned)block_start] : \
        -:  800:                (char*)NULL, (long)strstart - block_start, (eof))
        -:  801:
        -:  802:/* ===========================================================================
        -:  803: * Processes a new input file and return its compressed length. This
        -:  804: * function does not perform lazy evaluationof matches and inserts
        -:  805: * new strings in the dictionary only for unmatched strings. It is used
        -:  806: * only for the fast compression options.
        -:  807: */
function deflate_fast called 49 returned 100% blocks executed 81%
       49:  808:local ulg deflate_fast()
        -:  809:{
        -:  810:    IPos hash_head; /* head of the hash chain */
        -:  811:    int flush;      /* set if current block must be flushed */
       49:  812:    unsigned match_length = 0;  /* length of best match */
        -:  813:
       49:  814:    prev_length = MIN_MATCH-1;
   377398:  815:    while (lookahead != 0) {
branch  0 taken 377349
branch  1 taken 49 (fallthrough)
        -:  816:        /* Insert the string window[strstart .. strstart+2] in the
        -:  817:         * dictionary, and set hash_head to the head of the hash chain:
        -:  818:         */
   377349:  819:        INSERT_STRING(strstart, hash_head);
        -:  820:
        -:  821:        /* Find the longest match, discarding those <= prev_length.
        -:  822:         * At this point we have always match_length < MIN_MATCH
        -:  823:         */
   377349:  824:        if (hash_head != NIL && strstart - hash_head <= MAX_DIST) {
branch  0 taken 277067 (fallthrough)
branch  1 taken 100282
branch  2 taken 277051 (fallthrough)
branch  3 taken 16
        -:  825:            /* To simplify the code, we prevent matches with the string
        -:  826:             * of window index 0 (in particular we have to avoid a match
        -:  827:             * of the string with itself at the start of the input file).
        -:  828:             */
   277051:  829:            match_length = longest_match (hash_head);
call    0 returned 277051
        -:  830:            /* longest_match() sets match_start */
   277051:  831:            if (match_length > lookahead) match_length = lookahead;
branch  0 taken 49 (fallthrough)
branch  1 taken 277002
        -:  832:        }
   377349:  833:        if (match_length >= MIN_MATCH) {
branch  0 taken 257451 (fallthrough)
branch  1 taken 119898
        -:  834:            check_match(strstart, match_start, match_length);
        -:  835:
   257451:  836:            flush = ct_tally(strstart-match_start, match_length - MIN_MATCH);
call    0 returned 257451
        -:  837:
   257451:  838:            lookahead -= match_length;
        -:  839:
        -:  840:	    /* Insert new strings in the hash table only if the match length
        -:  841:             * is not too large. This saves time but degrades compression.
        -:  842:             */
   257451:  843:            if (match_length <= max_insert_length) {
branch  0 taken 149725 (fallthrough)
branch  1 taken 107726
   149725:  844:                match_length--; /* string at strstart already in hash table */
        -:  845:                do {
   421537:  846:                    strstart++;
   421537:  847:                    INSERT_STRING(strstart, hash_head);
        -:  848:                    /* strstart never exceeds WSIZE-MAX_MATCH, so there are
        -:  849:                     * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH
        -:  850:                     * these bytes are garbage, but it does not matter since
        -:  851:                     * the next lookahead bytes will be emitted as literals.
        -:  852:                     */
   421537:  853:                } while (--match_length != 0);
branch  0 taken 271812
branch  1 taken 149725 (fallthrough)
   149725:  854:	        strstart++; 
        -:  855:            } else {
   107726:  856:	        strstart += match_length;
   107726:  857:	        match_length = 0;
   107726:  858:	        ins_h = window[strstart];
   107726:  859:	        UPDATE_HASH(ins_h, window[strstart+1]);
        -:  860:#if MIN_MATCH != 3
        -:  861:                Call UPDATE_HASH() MIN_MATCH-3 more times
        -:  862:#endif
        -:  863:            }
        -:  864:        } else {
        -:  865:            /* No match, output a literal byte */
        -:  866:            Tracevv((stderr,"%c",window[strstart]));
   119898:  867:            flush = ct_tally (0, window[strstart]);
call    0 returned 119898
   119898:  868:            lookahead--;
   119898:  869:	    strstart++; 
        -:  870:        }
  377349*:  871:        if (flush) FLUSH_BLOCK(0), block_start = strstart;
branch  0 taken 0 (fallthrough)
branch  1 taken 377349
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  872:
        -:  873:        /* Make sure that we always have enough lookahead, except
        -:  874:         * at the end of the input file. We need MAX_MATCH bytes
        -:  875:         * for the next match, plus MIN_MATCH bytes to insert the
        -:  876:         * string following the next match.
        -:  877:         */
   377398:  878:        while (lookahead < MIN_LOOKAHEAD && !eofile) fill_window();
call    0 returned 49
branch  1 taken 4460 (fallthrough)
branch  2 taken 372938
branch  3 taken 49
branch  4 taken 4411 (fallthrough)
        -:  879:
        -:  880:    }
      49*:  881:    return FLUSH_BLOCK(1); /* eof */
branch  0 taken 49 (fallthrough)
branch  1 taken 0
call    2 returned 49
        -:  882:}
        -:  883:
        -:  884:/* ===========================================================================
        -:  885: * Same as above, but achieves better compression. We use a lazy
        -:  886: * evaluation for matches: a match is finally adopted only if there is
        -:  887: * no better match at the next window position.
        -:  888: */
function deflate called 175 returned 100% blocks executed 98%
      175:  889:ulg deflate()
        -:  890:{
        -:  891:    IPos hash_head;          /* head of hash chain */
        -:  892:    IPos prev_match;         /* previous match */
        -:  893:    int flush;               /* set if current block must be flushed */
      175:  894:    int match_available = 0; /* set if previous match exists */
      175:  895:    register unsigned match_length = MIN_MATCH-1; /* length of best match */
        -:  896:#ifdef DEBUG
        -:  897:    extern long isize;        /* byte length of input file, for debug only */
        -:  898:#endif
        -:  899:
        -:  900:#ifdef FAULTY_F_KL_1
        -:  901:    if (compr_level >= 3) return deflate_fast();
        -:  902:#else
      175:  903:    if (compr_level <= 3) return deflate_fast(); /* optimized for speed */
branch  0 taken 49 (fallthrough)
branch  1 taken 126
call    2 returned 49
        -:  904:#endif
        -:  905:
        -:  906:    /* Process the input block. */
  2402009:  907:    while (lookahead != 0) {
branch  0 taken 2401883
branch  1 taken 126 (fallthrough)
        -:  908:        /* Insert the string window[strstart .. strstart+2] in the
        -:  909:         * dictionary, and set hash_head to the head of the hash chain:
        -:  910:         */
  2401883:  911:        INSERT_STRING(strstart, hash_head);
        -:  912:
        -:  913:        /* Find the longest match, discarding those <= prev_length.
        -:  914:         */
  2401883:  915:        prev_length = match_length, prev_match = match_start;
  2401883:  916:        match_length = MIN_MATCH-1;
        -:  917:
  2401883:  918:        if (hash_head != NIL && prev_length < max_lazy_match &&
branch  0 taken 2099255 (fallthrough)
branch  1 taken 302628
branch  2 taken 1608086 (fallthrough)
branch  3 taken 491169
  1608086:  919:            strstart - hash_head <= MAX_DIST) {
branch  0 taken 1605427 (fallthrough)
branch  1 taken 2659
        -:  920:            /* To simplify the code, we prevent matches with the string
        -:  921:             * of window index 0 (in particular we have to avoid a match
        -:  922:             * of the string with itself at the start of the input file).
        -:  923:             */
  1605427:  924:            match_length = longest_match (hash_head);
call    0 returned 1605427
        -:  925:            /* longest_match() sets match_start */
  1605427:  926:            if (match_length > lookahead) match_length = lookahead;
branch  0 taken 123 (fallthrough)
branch  1 taken 1605304
        -:  927:
        -:  928:            /* Ignore a length 3 match if it is too distant: */
  1605427:  929:            if (match_length == MIN_MATCH && strstart-match_start > TOO_FAR){
branch  0 taken 177707 (fallthrough)
branch  1 taken 1427720
branch  2 taken 37114 (fallthrough)
branch  3 taken 140593
        -:  930:                /* If prev_match is also MIN_MATCH, match_start is garbage
        -:  931:                 * but we will ignore the current match anyway.
        -:  932:                 */
    37114:  933:                match_length--;
        -:  934:            }
        -:  935:        }
        -:  936:        /* If there was a match at the previous step and the current
        -:  937:         * match is not better, output the previous match:
        -:  938:         */
  2401883:  939:        if (prev_length >= MIN_MATCH && match_length <= prev_length) {
branch  0 taken 1059394 (fallthrough)
branch  1 taken 1342489
branch  2 taken 974186 (fallthrough)
branch  3 taken 85208
        -:  940:
        -:  941:            check_match(strstart-1, prev_match, prev_length);
        -:  942:
   974186:  943:            flush = ct_tally(strstart-1-prev_match, prev_length - MIN_MATCH);
call    0 returned 974186
        -:  944:
        -:  945:            /* Insert in hash table all strings up to the end of the match.
        -:  946:             * strstart-1 and strstart are already inserted.
        -:  947:             */
   974186:  948:            lookahead -= prev_length-1;
   974186:  949:            prev_length -= 2;
        -:  950:            do {
107416300:  951:                strstart++;
107416300:  952:                INSERT_STRING(strstart, hash_head);
        -:  953:                /* strstart never exceeds WSIZE-MAX_MATCH, so there are
        -:  954:                 * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH
        -:  955:                 * these bytes are garbage, but it does not matter since the
        -:  956:                 * next lookahead bytes will always be emitted as literals.
        -:  957:                 */
107416300:  958:            } while (--prev_length != 0);
branch  0 taken 106442114
branch  1 taken 974186 (fallthrough)
   974186:  959:            match_available = 0;
   974186:  960:            match_length = MIN_MATCH-1;
   974186:  961:            strstart++;
   974186:  962:            if (flush) FLUSH_BLOCK(0), block_start = strstart;
branch  0 taken 16 (fallthrough)
branch  1 taken 974170
branch  2 taken 1 (fallthrough)
branch  3 taken 15
call    4 returned 16
        -:  963:
  1427697:  964:        } else if (match_available) {
branch  0 taken 453391 (fallthrough)
branch  1 taken 974306
        -:  965:            /* If there was no match at the previous position, output a
        -:  966:             * single literal. If there was a match but the current match
        -:  967:             * is longer, truncate the previous match to a single literal.
        -:  968:             */
        -:  969:            Tracevv((stderr,"%c",window[strstart-1]));
   453391:  970:            if (ct_tally (0, window[strstart-1])) {
call    0 returned 453391
branch  1 taken 4 (fallthrough)
branch  2 taken 453387
       4*:  971:                FLUSH_BLOCK(0), block_start = strstart;
branch  0 taken 4 (fallthrough)
branch  1 taken 0
call    2 returned 4
        -:  972:            }
   453391:  973:            strstart++;
   453391:  974:            lookahead--;
        -:  975:        } else {
        -:  976:            /* There is no previous match to compare with, wait for
        -:  977:             * the next step to decide.
        -:  978:             */
   974306:  979:            match_available = 1;
   974306:  980:            strstart++;
   974306:  981:            lookahead--;
        -:  982:        }
        -:  983:        Assert (strstart <= isize && lookahead <= isize, "a bit too far");
        -:  984:
        -:  985:        /* Make sure that we always have enough lookahead, except
        -:  986:         * at the end of the input file. We need MAX_MATCH bytes
        -:  987:         * for the next match, plus MIN_MATCH bytes to insert the
        -:  988:         * string following the next match.
        -:  989:         */
  2405229:  990:        while (lookahead < MIN_LOOKAHEAD && !eofile) fill_window();
call    0 returned 3346
branch  1 taken 17118 (fallthrough)
branch  2 taken 2388111
branch  3 taken 3346
branch  4 taken 13772 (fallthrough)
        -:  991:    }
      126:  992:    if (match_available) ct_tally (0, window[strstart-1]);
branch  0 taken 120 (fallthrough)
branch  1 taken 6
call    2 returned 120
        -:  993:
      126:  994:    return FLUSH_BLOCK(1); /* eof */
branch  0 taken 123 (fallthrough)
branch  1 taken 3
call    2 returned 126
        -:  995:}
        -:  996:/* Getopt for GNU.
        -:  997:   NOTE: getopt is now part of the C library, so if you don't know what
        -:  998:   "Keep this file name-space clean" means, talk to roland@gnu.ai.mit.edu
        -:  999:   before changing it!
        -: 1000:
        -: 1001:   Copyright (C) 1987, 88, 89, 90, 91, 1992 Free Software Foundation, Inc.
        -: 1002:
        -: 1003:   This program is free software; you can redistribute it and/or modify it
        -: 1004:   under the terms of the GNU General Public License as published by the
        -: 1005:   Free Software Foundation; either version 2, or (at your option) any
        -: 1006:   later version.
        -: 1007:   
        -: 1008:   This program is distributed in the hope that it will be useful,
        -: 1009:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 1010:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 1011:   GNU General Public License for more details.
        -: 1012:   
        -: 1013:   You should have received a copy of the GNU General Public License
        -: 1014:   along with this program; if not, write to the Free Software
        -: 1015:   Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 1016:
        -: 1017:/* AIX requires this to be the first thing in the file.  */
        -: 1018:#if (defined( __GNUC__) && (!defined(LINUX)))
        -: 1019:#define alloca __builtin_alloca
        -: 1020:#else /* not __GNUC__ */
        -: 1021:#if defined (HAVE_ALLOCA_H) || (defined(sparc) && (defined(sun) || (!defined(USG) && !defined(SVR4) && !defined(__svr4__))))
        -: 1022:#include <alloca.h>
        -: 1023:#else
        -: 1024:#ifdef _AIX
        -: 1025: #pragma alloca
        -: 1026:#else
        -: 1027:char *alloca ();
        -: 1028:#endif
        -: 1029:#endif /* alloca.h */
        -: 1030:#endif /* not __GNUC__ */
        -: 1031:
        -: 1032:/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.  */
        -: 1033:#ifndef _NO_PROTO
        -: 1034:#  define _NO_PROTO
        -: 1035:#endif
        -: 1036:
        -: 1037:#if defined(USG) || defined(STDC_HEADERS) || defined(__GNU_LIBRARY__)
        -: 1038:#include <string.h>
        -: 1039:#endif
        -: 1040:
        -: 1041:/* This needs to come after some library #include
        -: 1042:   to get __GNU_LIBRARY__ defined.  */
        -: 1043:#ifdef	__GNU_LIBRARY__
        -: 1044:#undef	alloca
        -: 1045:/* Don't include stdlib.h for non-GNU C libraries because some of them
        -: 1046:   contain conflicting prototypes for getopt.  */
        -: 1047:#include <stdlib.h>
        -: 1048:#else	/* Not GNU C library.  */
        -: 1049:#define	__alloca	alloca
        -: 1050:#endif	/* GNU C library.  */
        -: 1051:
        -: 1052:#ifdef LINUX
        -: 1053:#define __alloca alloca
        -: 1054:#endif
        -: 1055:
        -: 1056:#if !__STDC__
        -: 1057:#define const
        -: 1058:#endif
        -: 1059:
        -: 1060:/* If GETOPT_COMPAT is defined, `+' as well as `--' can introduce a
        -: 1061:   long-named option.  Because this is not POSIX.2 compliant, it is
        -: 1062:   being phased out.  */
        -: 1063:#define GETOPT_COMPAT
        -: 1064:
        -: 1065:/* This version of `getopt' appears to the caller like standard Unix `getopt'
        -: 1066:   but it behaves differently for the user, since it allows the user
        -: 1067:   to intersperse the options with the other arguments.
        -: 1068:
        -: 1069:   As `getopt' works, it permutes the elements of ARGV so that,
        -: 1070:   when it is done, all the options precede everything else.  Thus
        -: 1071:   all application programs are extended to handle flexible argument order.
        -: 1072:
        -: 1073:   Setting the environment variable POSIXLY_CORRECT disables permutation.
        -: 1074:   Then the behavior is completely standard.
        -: 1075:
        -: 1076:   GNU application programs can use a third alternative mode in which
        -: 1077:   they can distinguish the relative order of options and other arguments.  */
        -: 1078:
        -: 1079:/* For communication from `getopt' to the caller.
        -: 1080:   When `getopt' finds an option that takes an argument,
        -: 1081:   the argument value is returned here.
        -: 1082:   Also, when `ordering' is RETURN_IN_ORDER,
        -: 1083:   each non-option ARGV-element is returned here.  */
        -: 1084:
        -: 1085:char *optarg = 0;
        -: 1086:
        -: 1087:/* Index in ARGV of the next element to be scanned.
        -: 1088:   This is used for communication to and from the caller
        -: 1089:   and for communication between successive calls to `getopt'.
        -: 1090:
        -: 1091:   On entry to `getopt', zero means this is the first call; initialize.
        -: 1092:
        -: 1093:   When `getopt' returns EOF, this is the index of the first of the
        -: 1094:   non-option elements that the caller should itself scan.
        -: 1095:
        -: 1096:   Otherwise, `optind' communicates from one call to the next
        -: 1097:   how much of ARGV has been scanned so far.  */
        -: 1098:
        -: 1099:int optind = 0;
        -: 1100:
        -: 1101:/* The next char to be scanned in the option-element
        -: 1102:   in which the last option character we returned was found.
        -: 1103:   This allows us to pick up the scan where we left off.
        -: 1104:
        -: 1105:   If this is zero, or a null string, it means resume the scan
        -: 1106:   by advancing to the next ARGV-element.  */
        -: 1107:
        -: 1108:static char *nextchar;
        -: 1109:
        -: 1110:/* Callers store zero here to inhibit the error message
        -: 1111:   for unrecognized options.  */
        -: 1112:
        -: 1113:int opterr = 1;
        -: 1114:
        -: 1115:/* Describe how to deal with options that follow non-option ARGV-elements.
        -: 1116:
        -: 1117:   If the caller did not specify anything,
        -: 1118:   the default is REQUIRE_ORDER if the environment variable
        -: 1119:   POSIXLY_CORRECT is defined, PERMUTE otherwise.
        -: 1120:
        -: 1121:   REQUIRE_ORDER means don't recognize them as options;
        -: 1122:   stop option processing when the first non-option is seen.
        -: 1123:   This is what Unix does.
        -: 1124:   This mode of operation is selected by either setting the environment
        -: 1125:   variable POSIXLY_CORRECT, or using `+' as the first character
        -: 1126:   of the list of option characters.
        -: 1127:
        -: 1128:   PERMUTE is the default.  We permute the contents of ARGV as we scan,
        -: 1129:   so that eventually all the non-options are at the end.  This allows options
        -: 1130:   to be given in any order, even with programs that were not written to
        -: 1131:   expect this.
        -: 1132:
        -: 1133:   RETURN_IN_ORDER is an option available to programs that were written
        -: 1134:   to expect options and other ARGV-elements in any order and that care about
        -: 1135:   the ordering of the two.  We describe each non-option ARGV-element
        -: 1136:   as if it were the argument of an option with character code 1.
        -: 1137:   Using `-' as the first character of the list of option characters
        -: 1138:   selects this mode of operation.
        -: 1139:
        -: 1140:   The special argument `--' forces an end of option-scanning regardless
        -: 1141:   of the value of `ordering'.  In the case of RETURN_IN_ORDER, only
        -: 1142:   `--' can cause `getopt' to return EOF with `optind' != ARGC.  */
        -: 1143:
        -: 1144:static enum
        -: 1145:{
        -: 1146:  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER
        -: 1147:} ordering;
        -: 1148:
        -: 1149:#ifdef	__GNU_LIBRARY__
        -: 1150:#include <string.h>
        -: 1151:#define	my_index	strchr
        -: 1152:#define	my_bcopy(src, dst, n)	memcpy ((dst), (src), (n))
        -: 1153:#else
        -: 1154:
        -: 1155:/* Avoid depending on library functions or files
        -: 1156:   whose names are inconsistent.  */
        -: 1157:
        -: 1158:char *getenv ();
        -: 1159:
        -: 1160:static char *
        -: 1161:my_index (string, chr)
        -: 1162:     char *string;
        -: 1163:     int chr;
        -: 1164:{
        -: 1165:  while (*string)
        -: 1166:    {
        -: 1167:      if (*string == chr)
        -: 1168:	return string;
        -: 1169:      string++;
        -: 1170:    }
        -: 1171:  return 0;
        -: 1172:}
        -: 1173:
        -: 1174:static void
        -: 1175:my_bcopy (from, to, size)
        -: 1176:     char *from, *to;
        -: 1177:     int size;
        -: 1178:{
        -: 1179:  int i;
        -: 1180:  for (i = 0; i < size; i++)
        -: 1181:    to[i] = from[i];
        -: 1182:}
        -: 1183:#endif				/* GNU C library.  */
        -: 1184:
        -: 1185:/* Handle permutation of arguments.  */
        -: 1186:
        -: 1187:/* Describe the part of ARGV that contains non-options that have
        -: 1188:   been skipped.  `first_nonopt' is the index in ARGV of the first of them;
        -: 1189:   `last_nonopt' is the index after the last of them.  */
        -: 1190:
        -: 1191:static int first_nonopt;
        -: 1192:static int last_nonopt;
        -: 1193:
        -: 1194:/* Exchange two adjacent subsequences of ARGV.
        -: 1195:   One subsequence is elements [first_nonopt,last_nonopt)
        -: 1196:   which contains all the non-options that have been skipped so far.
        -: 1197:   The other is elements [last_nonopt,optind), which contains all
        -: 1198:   the options processed since those non-options were skipped.
        -: 1199:
        -: 1200:   `first_nonopt' and `last_nonopt' are relocated so that they describe
        -: 1201:   the new indices of the non-options in ARGV after they are moved.  */
        -: 1202:
        -: 1203:static void
function exchange called 16 returned 100% blocks executed 100%
       16: 1204:exchange (argv)
        -: 1205:     char **argv;
        -: 1206:{
       16: 1207:  int nonopts_size = (last_nonopt - first_nonopt) * sizeof (char *);
        -: 1208:#ifdef _CRAY
        -: 1209:  char *temp[last_nonopt - first_nonopt];
        -: 1210:#else
       16: 1211:  char **temp = (char **) __alloca (nonopts_size);
        -: 1212:#endif
        -: 1213:
        -: 1214:  /* Interchange the two blocks of data in ARGV.  */
        -: 1215:
       16: 1216:  my_bcopy ((char *) &argv[first_nonopt], (char *) temp, nonopts_size);
       16: 1217:  my_bcopy ((char *) &argv[last_nonopt], (char *) &argv[first_nonopt],
        -: 1218:	    (optind - last_nonopt) * sizeof (char *));
       16: 1219:  my_bcopy ((char *) temp,
        -: 1220:	    (char *) &argv[first_nonopt + optind - last_nonopt],
        -: 1221:	    nonopts_size);
        -: 1222:
        -: 1223:  /* Update records for the slots the non-options now occupy.  */
        -: 1224:
       16: 1225:  first_nonopt += (optind - last_nonopt);
       16: 1226:  last_nonopt = optind;
       16: 1227:}
        -: 1228:
        -: 1229:/* Scan elements of ARGV (whose length is ARGC) for option characters
        -: 1230:   given in OPTSTRING.
        -: 1231:
        -: 1232:   If an element of ARGV starts with '-', and is not exactly "-" or "--",
        -: 1233:   then it is an option element.  The characters of this element
        -: 1234:   (aside from the initial '-') are option characters.  If `getopt'
        -: 1235:   is called repeatedly, it returns successively each of the option characters
        -: 1236:   from each of the option elements.
        -: 1237:
        -: 1238:   If `getopt' finds another option character, it returns that character,
        -: 1239:   updating `optind' and `nextchar' so that the next call to `getopt' can
        -: 1240:   resume the scan with the following option character or ARGV-element.
        -: 1241:
        -: 1242:   If there are no more option characters, `getopt' returns `EOF'.
        -: 1243:   Then `optind' is the index in ARGV of the first ARGV-element
        -: 1244:   that is not an option.  (The ARGV-elements have been permuted
        -: 1245:   so that those that are not options now come last.)
        -: 1246:
        -: 1247:   OPTSTRING is a string containing the legitimate option characters.
        -: 1248:   If an option character is seen that is not listed in OPTSTRING,
        -: 1249:   return '?' after printing an error message.  If you set `opterr' to
        -: 1250:   zero, the error message is suppressed but we still return '?'.
        -: 1251:
        -: 1252:   If a char in OPTSTRING is followed by a colon, that means it wants an arg,
        -: 1253:   so the following text in the same ARGV-element, or the text of the following
        -: 1254:   ARGV-element, is returned in `optarg'.  Two colons mean an option that
        -: 1255:   wants an optional arg; if there is text in the current ARGV-element,
        -: 1256:   it is returned in `optarg', otherwise `optarg' is set to zero.
        -: 1257:
        -: 1258:   If OPTSTRING starts with `-' or `+', it requests different methods of
        -: 1259:   handling the non-option ARGV-elements.
        -: 1260:   See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.
        -: 1261:
        -: 1262:   Long-named options begin with `--' instead of `-'.
        -: 1263:   Their names may be abbreviated as long as the abbreviation is unique
        -: 1264:   or is an exact match for some defined option.  If they have an
        -: 1265:   argument, it follows the option name in the same ARGV-element, separated
        -: 1266:   from the option name by a `=', or else the in next ARGV-element.
        -: 1267:   When `getopt' finds a long-named option, it returns 0 if that option's
        -: 1268:   `flag' field is nonzero, the value of the option's `val' field
        -: 1269:   if the `flag' field is zero.
        -: 1270:
        -: 1271:   The elements of ARGV aren't really const, because we permute them.
        -: 1272:   But we pretend they're const in the prototype to be compatible
        -: 1273:   with other systems.
        -: 1274:
        -: 1275:   LONGOPTS is a vector of `struct option' terminated by an
        -: 1276:   element containing a name which is zero.
        -: 1277:
        -: 1278:   LONGIND returns the index in LONGOPT of the long-named option found.
        -: 1279:   It is only valid when a long-named option has been found by the most
        -: 1280:   recent call.
        -: 1281:
        -: 1282:   If LONG_ONLY is nonzero, '-' as well as '--' can introduce
        -: 1283:   long-named options.  */
        -: 1284:
        -: 1285:int
function _getopt_internal called 716 returned 100% blocks executed 50%
      716: 1286:_getopt_internal (argc, argv, optstring, longopts, longind, long_only)
        -: 1287:     int argc;
        -: 1288:     char *const *argv;
        -: 1289:     const char *optstring;
        -: 1290:     const struct option *longopts;
        -: 1291:     int *longind;
        -: 1292:     int long_only;
        -: 1293:{
        -: 1294:  int option_index;
        -: 1295:
      716: 1296:  optarg = 0;
        -: 1297:
        -: 1298:  /* Initialize the internal data when the first call is made.
        -: 1299:     Start processing options with ARGV-element 1 (since ARGV-element 0
        -: 1300:     is the program name); the sequence of previously skipped
        -: 1301:     non-option ARGV-elements is empty.  */
        -: 1302:
      716: 1303:  if (optind == 0)
branch  0 taken 214 (fallthrough)
branch  1 taken 502
        -: 1304:    {
      214: 1305:      first_nonopt = last_nonopt = optind = 1;
        -: 1306:
      214: 1307:      nextchar = NULL;
        -: 1308:
        -: 1309:      /* Determine how to handle the ordering of options and nonoptions.  */
        -: 1310:
      214: 1311:      if (optstring[0] == '-')
branch  0 taken 0 (fallthrough)
branch  1 taken 214
        -: 1312:	{
    #####: 1313:	  ordering = RETURN_IN_ORDER;
    #####: 1314:	  ++optstring;
        -: 1315:	}
      214: 1316:      else if (optstring[0] == '+')
branch  0 taken 0 (fallthrough)
branch  1 taken 214
        -: 1317:	{
    #####: 1318:	  ordering = REQUIRE_ORDER;
    #####: 1319:	  ++optstring;
        -: 1320:	}
      214: 1321:      else if (getenv ("POSIXLY_CORRECT") != NULL)
call    0 returned 214
branch  1 taken 0 (fallthrough)
branch  2 taken 214
    #####: 1322:	ordering = REQUIRE_ORDER;
        -: 1323:      else
      214: 1324:	ordering = PERMUTE;
        -: 1325:    }
        -: 1326:
      716: 1327:  if (nextchar == NULL || *nextchar == '\0')
branch  0 taken 502 (fallthrough)
branch  1 taken 214
branch  2 taken 197 (fallthrough)
branch  3 taken 305
        -: 1328:    {
      411: 1329:      if (ordering == PERMUTE)
branch  0 taken 411 (fallthrough)
branch  1 taken 0
        -: 1330:	{
        -: 1331:	  /* If we have just processed some options following some non-options,
        -: 1332:	     exchange them so that the options come first.  */
        -: 1333:
      411: 1334:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
branch  0 taken 16 (fallthrough)
branch  1 taken 395
branch  2 taken 16 (fallthrough)
branch  3 taken 0
       16: 1335:	    exchange ((char **) argv);
call    0 returned 16
      395: 1336:	  else if (last_nonopt != optind)
branch  0 taken 181 (fallthrough)
branch  1 taken 214
      181: 1337:	    first_nonopt = optind;
        -: 1338:
        -: 1339:	  /* Now skip any additional non-options
        -: 1340:	     and extend the range of non-options previously skipped.  */
        -: 1341:
      411: 1342:	  while (optind < argc
      223: 1343:		 && (argv[optind][0] != '-' || argv[optind][1] == '\0')
branch  0 taken 203 (fallthrough)
branch  1 taken 20
branch  2 taken 0 (fallthrough)
branch  3 taken 203
        -: 1344:#ifdef GETOPT_COMPAT
      451: 1345:		 && (longopts == NULL
branch  0 taken 223 (fallthrough)
branch  1 taken 208
branch  2 taken 0
branch  3 taken 20 (fallthrough)
      20*: 1346:		     || argv[optind][0] != '+' || argv[optind][1] == '\0')
branch  0 taken 20
branch  1 taken 0 (fallthrough)
branch  2 never executed
branch  3 never executed
        -: 1347:#endif				/* GETOPT_COMPAT */
        -: 1348:		 )
       20: 1349:	    optind++;
      411: 1350:	  last_nonopt = optind;
        -: 1351:	}
        -: 1352:
        -: 1353:      /* Special ARGV-element `--' means premature end of options.
        -: 1354:	 Skip it like a null option,
        -: 1355:	 then exchange with previous non-options as if it were an option,
        -: 1356:	 then skip everything else like a non-option.  */
        -: 1357:
      411: 1358:      if (optind != argc && !strcmp (argv[optind], "--"))
branch  0 taken 203 (fallthrough)
branch  1 taken 208
branch  2 taken 0 (fallthrough)
branch  3 taken 203
        -: 1359:	{
    #####: 1360:	  optind++;
        -: 1361:
    #####: 1362:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1363:	    exchange ((char **) argv);
call    0 never executed
    #####: 1364:	  else if (first_nonopt == last_nonopt)
branch  0 never executed
branch  1 never executed
    #####: 1365:	    first_nonopt = optind;
    #####: 1366:	  last_nonopt = argc;
        -: 1367:
    #####: 1368:	  optind = argc;
        -: 1369:	}
        -: 1370:
        -: 1371:      /* If we have done all the ARGV-elements, stop the scan
        -: 1372:	 and back over any non-options that we skipped and permuted.  */
        -: 1373:
      411: 1374:      if (optind == argc)
branch  0 taken 208 (fallthrough)
branch  1 taken 203
        -: 1375:	{
        -: 1376:	  /* Set the next-arg-index to point at the non-options
        -: 1377:	     that we previously skipped, so the caller will digest them.  */
      208: 1378:	  if (first_nonopt != last_nonopt)
branch  0 taken 20 (fallthrough)
branch  1 taken 188
       20: 1379:	    optind = first_nonopt;
      208: 1380:	  return EOF;
        -: 1381:	}
        -: 1382:
        -: 1383:      /* If we have come to a non-option and did not permute it,
        -: 1384:	 either stop the scan or describe it to the caller and pass it by.  */
        -: 1385:
      203: 1386:      if ((argv[optind][0] != '-' || argv[optind][1] == '\0')
branch  0 taken 203 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 203
        -: 1387:#ifdef GETOPT_COMPAT
    #####: 1388:	  && (longopts == NULL
branch  0 never executed
branch  1 never executed
    #####: 1389:	      || argv[optind][0] != '+' || argv[optind][1] == '\0')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1390:#endif				/* GETOPT_COMPAT */
        -: 1391:	  )
        -: 1392:	{
    #####: 1393:	  if (ordering == REQUIRE_ORDER)
branch  0 never executed
branch  1 never executed
    #####: 1394:	    return EOF;
    #####: 1395:	  optarg = argv[optind++];
    #####: 1396:	  return 1;
        -: 1397:	}
        -: 1398:
        -: 1399:      /* We have found another option-ARGV-element.
        -: 1400:	 Start decoding its characters.  */
        -: 1401:
      406: 1402:      nextchar = (argv[optind] + 1
      203: 1403:		  + (longopts != NULL && argv[optind][1] == '-'));
branch  0 taken 203 (fallthrough)
branch  1 taken 0
branch  2 taken 13 (fallthrough)
branch  3 taken 190
        -: 1404:    }
        -: 1405:
      508: 1406:  if (longopts != NULL
branch  0 taken 508 (fallthrough)
branch  1 taken 0
      508: 1407:      && ((argv[optind][0] == '-'
branch  0 taken 508 (fallthrough)
branch  1 taken 0
      508: 1408:	   && (argv[optind][1] == '-' || long_only))
branch  0 taken 495 (fallthrough)
branch  1 taken 13
branch  2 taken 495 (fallthrough)
branch  3 taken 0
        -: 1409:#ifdef GETOPT_COMPAT
      495: 1410:	  || argv[optind][0] == '+'
branch  0 taken 0 (fallthrough)
branch  1 taken 495
        -: 1411:#endif				/* GETOPT_COMPAT */
        -: 1412:	  ))
        -: 1413:    {
        -: 1414:      const struct option *p;
       13: 1415:      char *s = nextchar;
       13: 1416:      int exact = 0;
       13: 1417:      int ambig = 0;
       13: 1418:      const struct option *pfound = NULL;
       13: 1419:      int indfound = 0;
        -: 1420:
       93: 1421:      while (*s && *s != '=')
branch  0 taken 80 (fallthrough)
branch  1 taken 13
branch  2 taken 80
branch  3 taken 0 (fallthrough)
       80: 1422:	s++;
        -: 1423:
        -: 1424:      /* Test all options for either exact match or abbreviated matches.  */
      143: 1425:      for (p = longopts, option_index = 0; p->name;
branch  0 taken 143
branch  1 taken 0 (fallthrough)
      130: 1426:	   p++, option_index++)
      143: 1427:	if (!strncmp (p->name, nextchar, s - nextchar))
branch  0 taken 13 (fallthrough)
branch  1 taken 130
        -: 1428:	  {
       13: 1429:	    if (s - nextchar == strlen (p->name))
branch  0 taken 13 (fallthrough)
branch  1 taken 0
        -: 1430:	      {
        -: 1431:		/* Exact match found.  */
       13: 1432:		pfound = p;
       13: 1433:		indfound = option_index;
       13: 1434:		exact = 1;
       13: 1435:		break;
        -: 1436:	      }
    #####: 1437:	    else if (pfound == NULL)
branch  0 never executed
branch  1 never executed
        -: 1438:	      {
        -: 1439:		/* First nonexact match found.  */
    #####: 1440:		pfound = p;
    #####: 1441:		indfound = option_index;
        -: 1442:	      }
        -: 1443:	    else
        -: 1444:	      /* Second nonexact match found.  */
    #####: 1445:	      ambig = 1;
        -: 1446:	  }
        -: 1447:
      13*: 1448:      if (ambig && !exact)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
branch  2 never executed
branch  3 never executed
        -: 1449:	{
    #####: 1450:	  if (opterr)
branch  0 never executed
branch  1 never executed
    #####: 1451:	    fprintf (stderr, "%s: option `%s' is ambiguous\n",
    #####: 1452:		     argv[0], argv[optind]);
call    0 never executed
    #####: 1453:	  nextchar += strlen (nextchar);
    #####: 1454:	  optind++;
    #####: 1455:	  return '?';
        -: 1456:	}
        -: 1457:
       13: 1458:      if (pfound != NULL)
branch  0 taken 13 (fallthrough)
branch  1 taken 0
        -: 1459:	{
       13: 1460:	  option_index = indfound;
       13: 1461:	  optind++;
       13: 1462:	  if (*s)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
        -: 1463:	    {
        -: 1464:	      /* Don't test has_arg with >, because some C compilers don't
        -: 1465:		 allow it to be used on enums.  */
    #####: 1466:	      if (pfound->has_arg)
branch  0 never executed
branch  1 never executed
    #####: 1467:		optarg = s + 1;
        -: 1468:	      else
        -: 1469:		{
    #####: 1470:		  if (opterr)
branch  0 never executed
branch  1 never executed
        -: 1471:		    {
    #####: 1472:		      if (argv[optind - 1][1] == '-')
branch  0 never executed
branch  1 never executed
        -: 1473:			/* --option */
    #####: 1474:			fprintf (stderr,
        -: 1475:				 "%s: option `--%s' doesn't allow an argument\n",
    #####: 1476:				 argv[0], pfound->name);
call    0 never executed
        -: 1477:		      else
        -: 1478:			/* +option or -option */
    #####: 1479:			fprintf (stderr,
        -: 1480:			     "%s: option `%c%s' doesn't allow an argument\n",
    #####: 1481:			     argv[0], argv[optind - 1][0], pfound->name);
call    0 never executed
        -: 1482:		    }
    #####: 1483:		  nextchar += strlen (nextchar);
    #####: 1484:		  return '?';
        -: 1485:		}
        -: 1486:	    }
       13: 1487:	  else if (pfound->has_arg == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
        -: 1488:	    {
    #####: 1489:	      if (optind < argc)
branch  0 never executed
branch  1 never executed
    #####: 1490:		optarg = argv[optind++];
        -: 1491:	      else
        -: 1492:		{
    #####: 1493:		  if (opterr)
branch  0 never executed
branch  1 never executed
    #####: 1494:		    fprintf (stderr, "%s: option `%s' requires an argument\n",
    #####: 1495:			     argv[0], argv[optind - 1]);
call    0 never executed
    #####: 1496:		  nextchar += strlen (nextchar);
    #####: 1497:		  return '?';
        -: 1498:		}
        -: 1499:	    }
       13: 1500:	  nextchar += strlen (nextchar);
       13: 1501:	  if (longind != NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
    #####: 1502:	    *longind = option_index;
       13: 1503:	  if (pfound->flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
        -: 1504:	    {
    #####: 1505:	      *(pfound->flag) = pfound->val;
    #####: 1506:	      return 0;
        -: 1507:	    }
       13: 1508:	  return pfound->val;
        -: 1509:	}
        -: 1510:      /* Can't find it as a long option.  If this is not getopt_long_only,
        -: 1511:	 or the option starts with '--' or is not a valid short
        -: 1512:	 option, then it's an error.
        -: 1513:	 Otherwise interpret it as a short option.  */
    #####: 1514:      if (!long_only || argv[optind][1] == '-'
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1515:#ifdef GETOPT_COMPAT
    #####: 1516:	  || argv[optind][0] == '+'
branch  0 never executed
branch  1 never executed
        -: 1517:#endif				/* GETOPT_COMPAT */
    #####: 1518:	  || my_index ((char*)optstring, *nextchar) == NULL)
branch  0 never executed
branch  1 never executed
        -: 1519:	{
    #####: 1520:	  if (opterr)
branch  0 never executed
branch  1 never executed
        -: 1521:	    {
    #####: 1522:	      if (argv[optind][1] == '-')
branch  0 never executed
branch  1 never executed
        -: 1523:		/* --option */
    #####: 1524:		fprintf (stderr, "%s: unrecognized option `--%s'\n",
call    0 never executed
        -: 1525:			 argv[0], nextchar);
        -: 1526:	      else
        -: 1527:		/* +option or -option */
    #####: 1528:		fprintf (stderr, "%s: unrecognized option `%c%s'\n",
    #####: 1529:			 argv[0], argv[optind][0], nextchar);
call    0 never executed
        -: 1530:	    }
    #####: 1531:	  nextchar = (char *) "";
    #####: 1532:	  optind++;
    #####: 1533:	  return '?';
        -: 1534:	}
        -: 1535:    }
        -: 1536:
        -: 1537:  /* Look at and handle the next option-character.  */
        -: 1538:
        -: 1539:  {
      495: 1540:    char c = *nextchar++;
      495: 1541:    char *temp = my_index ((char*)optstring, c);
        -: 1542:
        -: 1543:    /* Increment `optind' when we start to process its last character.  */
      495: 1544:    if (*nextchar == '\0')
branch  0 taken 190 (fallthrough)
branch  1 taken 305
      190: 1545:      ++optind;
        -: 1546:
      495: 1547:    if (temp == NULL || c == ':')
branch  0 taken 495 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 495
        -: 1548:      {
    #####: 1549:	if (opterr)
branch  0 never executed
branch  1 never executed
        -: 1550:	  {
    #####: 1551:	    if (c < 040 || c >= 0177)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1552:	      fprintf (stderr, "%s: unrecognized option, character code 0%o\n",
call    0 never executed
        -: 1553:		       argv[0], c);
        -: 1554:	    else
    #####: 1555:	      fprintf (stderr, "%s: unrecognized option `-%c'\n", argv[0], c);
call    0 never executed
        -: 1556:	  }
    #####: 1557:	return '?';
        -: 1558:      }
      495: 1559:    if (temp[1] == ':')
branch  0 taken 0 (fallthrough)
branch  1 taken 495
        -: 1560:      {
    #####: 1561:	if (temp[2] == ':')
branch  0 never executed
branch  1 never executed
        -: 1562:	  {
        -: 1563:	    /* This is an option that accepts an argument optionally.  */
    #####: 1564:	    if (*nextchar != '\0')
branch  0 never executed
branch  1 never executed
        -: 1565:	      {
    #####: 1566:		optarg = nextchar;
    #####: 1567:		optind++;
        -: 1568:	      }
        -: 1569:	    else
    #####: 1570:	      optarg = 0;
    #####: 1571:	    nextchar = NULL;
        -: 1572:	  }
        -: 1573:	else
        -: 1574:	  {
        -: 1575:	    /* This is an option that requires an argument.  */
    #####: 1576:	    if (*nextchar != '\0')
branch  0 never executed
branch  1 never executed
        -: 1577:	      {
    #####: 1578:		optarg = nextchar;
        -: 1579:		/* If we end this ARGV-element by taking the rest as an arg,
        -: 1580:		   we must advance to the next element now.  */
    #####: 1581:		optind++;
        -: 1582:	      }
    #####: 1583:	    else if (optind == argc)
branch  0 never executed
branch  1 never executed
        -: 1584:	      {
    #####: 1585:		if (opterr)
branch  0 never executed
branch  1 never executed
    #####: 1586:		  fprintf (stderr, "%s: option `-%c' requires an argument\n",
call    0 never executed
        -: 1587:			   argv[0], c);
    #####: 1588:		c = '?';
        -: 1589:	      }
        -: 1590:	    else
        -: 1591:	      /* We already incremented `optind' once;
        -: 1592:		 increment it again when taking next ARGV-elt as argument.  */
    #####: 1593:	      optarg = argv[optind++];
    #####: 1594:	    nextchar = NULL;
        -: 1595:	  }
        -: 1596:      }
      495: 1597:    return c;
        -: 1598:  }
        -: 1599:}
        -: 1600:
        -: 1601:int
        -: 1602:getopt (argc, argv, optstring)
        -: 1603:     int argc;
        -: 1604:     char *const *argv;
        -: 1605:     const char *optstring;
        -: 1606:{
    #####: 1607:  return _getopt_internal (argc, argv, optstring,
call    0 never executed
        -: 1608:			   (const struct option *) 0,
        -: 1609:			   (int *) 0,
        -: 1610:			   0);
        -: 1611:}
        -: 1612:
        -: 1613:int
function getopt_long called 716 returned 100% blocks executed 100%
      716: 1614:getopt_long (argc, argv, options, long_options, opt_index)
        -: 1615:     int argc;
        -: 1616:     char *const *argv;
        -: 1617:     const char *options;
        -: 1618:     const struct option *long_options;
        -: 1619:     int *opt_index;
        -: 1620:{
      716: 1621:  return _getopt_internal (argc, argv, options, long_options, opt_index, 0);
call    0 returned 716
        -: 1622:}
        -: 1623:
        -: 1624:/* Like getopt_long, but '-' as well as '--' can indicate a long option.
        -: 1625:   If an option that starts with '-' (not '--') doesn't match a long option,
        -: 1626:   but does match a short option, it is parsed as a short option
        -: 1627:   instead. */
        -: 1628:
        -: 1629:int 
function getopt_long_only called 0 returned 0% blocks executed 0%
    #####: 1630:getopt_long_only (argc, argv, options, long_options, opt_index)
        -: 1631:     int argc;
        -: 1632:     char *const *argv;
        -: 1633:     const char *options;
        -: 1634:     const struct option *long_options;
        -: 1635:     int *opt_index;
        -: 1636:{
    #####: 1637:  return _getopt_internal (argc, argv, options, long_options, opt_index, 1);
call    0 never executed
        -: 1638:}
        -: 1639:
        -: 1640:
        -: 1641:#ifdef TEST
        -: 1642:
        -: 1643:/* Compile with -DTEST to make an executable for use in testing
        -: 1644:   the above definition of `getopt'.  */
        -: 1645:
        -: 1646:int
        -: 1647:main (argc, argv)
        -: 1648:     int argc;
        -: 1649:     char **argv;
        -: 1650:{
        -: 1651:  int c;
        -: 1652:  int digit_optind = 0;
        -: 1653:
        -: 1654:  while (1)
        -: 1655:    {
        -: 1656:      int this_option_optind = optind ? optind : 1;
        -: 1657:
        -: 1658:      c = getopt (argc, argv, "abc:d:0123456789");
        -: 1659:      if (c == EOF)
        -: 1660:	break;
        -: 1661:
        -: 1662:      switch (c)
        -: 1663:	{
        -: 1664:	case '0':
        -: 1665:	case '1':
        -: 1666:	case '2':
        -: 1667:	case '3':
        -: 1668:	case '4':
        -: 1669:	case '5':
        -: 1670:	case '6':
        -: 1671:	case '7':
        -: 1672:	case '8':
        -: 1673:	case '9':
        -: 1674:	  if (digit_optind != 0 && digit_optind != this_option_optind)
        -: 1675:	    printf ("digits occur in two different argv-elements.\n");
        -: 1676:	  digit_optind = this_option_optind;
        -: 1677:	  printf ("option %c\n", c);
        -: 1678:	  break;
        -: 1679:
        -: 1680:	case 'a':
        -: 1681:	  printf ("option a\n");
        -: 1682:	  break;
        -: 1683:
        -: 1684:	case 'b':
        -: 1685:	  printf ("option b\n");
        -: 1686:	  break;
        -: 1687:
        -: 1688:	case 'c':
        -: 1689:	  printf ("option c with value `%s'\n", optarg);
        -: 1690:	  break;
        -: 1691:
        -: 1692:	case '?':
        -: 1693:	  break;
        -: 1694:
        -: 1695:	default:
        -: 1696:	  printf ("?? getopt returned character code 0%o ??\n", c);
        -: 1697:	}
        -: 1698:    }
        -: 1699:
        -: 1700:  if (optind < argc)
        -: 1701:    {
        -: 1702:      printf ("non-option ARGV-elements: ");
        -: 1703:      while (optind < argc)
        -: 1704:	printf ("%s ", argv[optind++]);
        -: 1705:      printf ("\n");
        -: 1706:    }
        -: 1707:
        -: 1708:  exit (0);
        -: 1709:}
        -: 1710:
        -: 1711:#endif /* TEST */
        -: 1712:/* gzip (GNU zip) -- compress files with zip algorithm and 'compress' interface
        -: 1713: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 1714: * The unzip code was written and put in the public domain by Mark Adler.
        -: 1715: * Portions of the lzw code are derived from the public domain 'compress'
        -: 1716: * written by Spencer Thomas, Joe Orost, James Woods, Jim McKie, Steve Davies,
        -: 1717: * Ken Turkowski, Dave Mack and Peter Jannesen.
        -: 1718: *
        -: 1719: * See the license_msg below and the file COPYING for the software license.
        -: 1720: * See the file algorithm.doc for the compression algorithms and file formats.
        -: 1721: */
        -: 1722:
        -: 1723:static char  *license_msg[] = {
        -: 1724:"   Copyright (C) 1992-1993 Jean-loup Gailly",
        -: 1725:"   This program is free software; you can redistribute it and/or modify",
        -: 1726:"   it under the terms of the GNU General Public License as published by",
        -: 1727:"   the Free Software Foundation; either version 2, or (at your option)",
        -: 1728:"   any later version.",
        -: 1729:"",
        -: 1730:"   This program is distributed in the hope that it will be useful,",
        -: 1731:"   but WITHOUT ANY WARRANTY; without even the implied warranty of",
        -: 1732:"   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        -: 1733:"   GNU General Public License for more details.",
        -: 1734:"",
        -: 1735:"   You should have received a copy of the GNU General Public License",
        -: 1736:"   along with this program; if not, write to the Free Software",
        -: 1737:"   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",
        -: 1738:0};
        -: 1739:
        -: 1740:/* Compress files with zip algorithm and 'compress' interface.
        -: 1741: * See usage() and help() functions below for all options.
        -: 1742: * Outputs:
        -: 1743: *        file.gz:   compressed file with same mode, owner, and utimes
        -: 1744: *     or stdout with -c option or if stdin used as input.
        -: 1745: * If the output file name had to be truncated, the original name is kept
        -: 1746: * in the compressed file.
        -: 1747: * On MSDOS, file.tmp -> file.tmz. On VMS, file.tmp -> file.tmp-gz.
        -: 1748: *
        -: 1749: * Using gz on MSDOS would create too many file name conflicts. For
        -: 1750: * example, foo.txt -> foo.tgz (.tgz must be reserved as shorthand for
        -: 1751: * tar.gz). Similarly, foo.dir and foo.doc would both be mapped to foo.dgz.
        -: 1752: * I also considered 12345678.txt -> 12345txt.gz but this truncates the name
        -: 1753: * too heavily. There is no ideal solution given the MSDOS 8+3 limitation. 
        -: 1754: *
        -: 1755: * For the meaning of all compilation flags, see comments in Makefile.in.
        -: 1756: */
        -: 1757:
        -: 1758:/*
        -: 1759:#ifndef lint
        -: 1760:static char rcsid[] = "$Id: gzip.c,v 0.22 1993/06/16 16:53:43 jloup Exp $";
        -: 1761:#endif
        -: 1762:*/
        -: 1763:
        -: 1764:		/* configuration */
        -: 1765:
        -: 1766:#ifdef NO_TIME_H
        -: 1767:#  include <sys/time.h>
        -: 1768:#else
        -: 1769:#  include <time.h>
        -: 1770:#endif
        -: 1771:
        -: 1772:#ifndef NO_FCNTL_H
        -: 1773:#  include <fcntl.h>
        -: 1774:#endif
        -: 1775:
        -: 1776:#ifdef HAVE_UNISTD_H
        -: 1777:#  include <unistd.h>
        -: 1778:#endif
        -: 1779:
        -: 1780:#if defined(STDC_HEADERS) || !defined(NO_STDLIB_H)
        -: 1781:#  include <stdlib.h>
        -: 1782:#else
        -: 1783:   extern int errno;
        -: 1784:#endif
        -: 1785:
        -: 1786:#if defined(DIRENT)
        -: 1787:#  include <dirent.h>
        -: 1788:   typedef struct dirent dir_type;
        -: 1789:#  define NLENGTH(dirent) ((int)strlen((dirent)->d_name))
        -: 1790:#  define DIR_OPT "DIRENT"
        -: 1791:#else
        -: 1792:#  define NLENGTH(dirent) ((dirent)->d_namlen)
        -: 1793:#  ifdef SYSDIR
        -: 1794:#    include <sys/dir.h>
        -: 1795:     typedef struct direct dir_type;
        -: 1796:#    define DIR_OPT "SYSDIR"
        -: 1797:#  else
        -: 1798:#    ifdef SYSNDIR
        -: 1799:#      include <sys/ndir.h>
        -: 1800:       typedef struct direct dir_type;
        -: 1801:#      define DIR_OPT "SYSNDIR"
        -: 1802:#    else
        -: 1803:#      ifdef NDIR
        -: 1804:#        include <ndir.h>
        -: 1805:         typedef struct direct dir_type;
        -: 1806:#        define DIR_OPT "NDIR"
        -: 1807:#      else
        -: 1808:#        define NO_DIR
        -: 1809:#        define DIR_OPT "NO_DIR"
        -: 1810:#      endif
        -: 1811:#    endif
        -: 1812:#  endif
        -: 1813:#endif
        -: 1814:
        -: 1815:#ifndef NO_UTIME
        -: 1816:#  ifndef NO_UTIME_H
        -: 1817:#    include <utime.h>
        -: 1818:#    define TIME_OPT "UTIME"
        -: 1819:#  else
        -: 1820:#    ifdef HAVE_SYS_UTIME_H
        -: 1821:#      include <sys/utime.h>
        -: 1822:#      define TIME_OPT "SYS_UTIME"
        -: 1823:#    else
        -: 1824:       struct utimbuf {
        -: 1825:         time_t actime;
        -: 1826:         time_t modtime;
        -: 1827:       };
        -: 1828:#      define TIME_OPT ""
        -: 1829:#    endif
        -: 1830:#  endif
        -: 1831:#else
        -: 1832:#  define TIME_OPT "NO_UTIME"
        -: 1833:#endif
        -: 1834:
        -: 1835:#if !defined(S_ISDIR) && defined(S_IFDIR)
        -: 1836:#  define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
        -: 1837:#endif
        -: 1838:#if !defined(S_ISREG) && defined(S_IFREG)
        -: 1839:#  define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
        -: 1840:#endif
        -: 1841:
        -: 1842:typedef RETSIGTYPE (*sig_type) OF((int));
        -: 1843:
        -: 1844:#ifndef	O_BINARY
        -: 1845:#  define  O_BINARY  0  /* creation mode for open() */
        -: 1846:#endif
        -: 1847:
        -: 1848:#ifndef O_CREAT
        -: 1849:   /* Pure BSD system? */
        -: 1850:#  include <sys/file.h>
        -: 1851:#  ifndef O_CREAT
        -: 1852:#    define O_CREAT FCREAT
        -: 1853:#  endif
        -: 1854:#  ifndef O_EXCL
        -: 1855:#    define O_EXCL FEXCL
        -: 1856:#  endif
        -: 1857:#endif
        -: 1858:
        -: 1859:#ifndef S_IRUSR
        -: 1860:#  define S_IRUSR 0400
        -: 1861:#endif
        -: 1862:#ifndef S_IWUSR
        -: 1863:#  define S_IWUSR 0200
        -: 1864:#endif
        -: 1865:#define RW_USER (S_IRUSR | S_IWUSR)  /* creation mode for open() */
        -: 1866:
        -: 1867:#ifndef MAX_PATH_LEN
        -: 1868:#  define MAX_PATH_LEN   1024 /* max pathname length */
        -: 1869:#endif
        -: 1870:
        -: 1871:#ifndef SEEK_END
        -: 1872:#  define SEEK_END 2
        -: 1873:#endif
        -: 1874:
        -: 1875:#ifdef NO_OFF_T
        -: 1876:  typedef long off_t;
        -: 1877:  off_t lseek OF((int fd, off_t offset, int whence));
        -: 1878:#endif
        -: 1879:
        -: 1880:/* Separator for file name parts (see shorten_name()) */
        -: 1881:#ifdef NO_MULTIPLE_DOTS
        -: 1882:#  define PART_SEP "-"
        -: 1883:#else
        -: 1884:#  define PART_SEP "."
        -: 1885:#endif
        -: 1886:
        -: 1887:		/* global buffers */
        -: 1888:
        -: 1889:DECLARE(uch, inbuf,  INBUFSIZ +INBUF_EXTRA);
        -: 1890:DECLARE(uch, outbuf, OUTBUFSIZ+OUTBUF_EXTRA);
        -: 1891:DECLARE(ush, d_buf,  DIST_BUFSIZE);
        -: 1892:DECLARE(uch, window, 2L*WSIZE);
        -: 1893:#ifndef MAXSEG_64K
        -: 1894:    DECLARE(ush, tab_prefix, 1L<<BITS);
        -: 1895:#else
        -: 1896:    DECLARE(ush, tab_prefix0, 1L<<(BITS-1));
        -: 1897:    DECLARE(ush, tab_prefix1, 1L<<(BITS-1));
        -: 1898:#endif
        -: 1899:
        -: 1900:		/* local variables */
        -: 1901:
        -: 1902:int ascii = 0;        /* convert end-of-lines to local OS conventions */
        -: 1903:int to_stdout = 0;    /* output to stdout (-c) */
        -: 1904:int decompress = 0;   /* decompress (-d) */
        -: 1905:int force = 0;        /* don't ask questions, compress links (-f) */
        -: 1906:int no_name = 0;      /* don't save or restore the original file name */
        -: 1907:int recursive = 0;    /* recurse through directories (-r) */
        -: 1908:int list = 0;         /* list the file contents (-l) */
        -: 1909:int verbose = 0;      /* be verbose (-v) */
        -: 1910:int quiet = 0;        /* be very quiet (-q) */
        -: 1911:int do_lzw = 0;       /* generate output compatible with old compress (-Z) */
        -: 1912:int test = 0;         /* test .gz file integrity */
        -: 1913:int foreground;       /* set if program run in foreground */
        -: 1914:char *progname;       /* program name */
        -: 1915:int maxbits = BITS;   /* max bits per code for LZW */
        -: 1916:int method = DEFLATED;/* compression method */
        -: 1917:int level = 6;        /* compression level */
        -: 1918:int exit_code = OK;   /* program exit code */
        -: 1919:int save_orig_name;   /* set if original name must be saved */
        -: 1920:int last_member;      /* set for .zip and .Z files */
        -: 1921:int part_nb;          /* number of parts in .gz file */
        -: 1922:long time_stamp;       /* original time stamp (modification time) */
        -: 1923:long ifile_size;      /* input file size, -1 for devices (debug only) */
        -: 1924:char *env;            /* contents of GZIP env variable */
        -: 1925:char **args = NULL;   /* argv pointer if GZIP env variable defined */
        -: 1926:char z_suffix[MAX_SUFFIX+1]; /* default suffix (can be set with --suffix) */
        -: 1927:int  z_len;           /* strlen(z_suffix) */
        -: 1928:
        -: 1929:long bytes_in;             /* number of input bytes */
        -: 1930:long bytes_out;            /* number of output bytes */
        -: 1931:long total_in = 0;         /* input bytes for all files */
        -: 1932:long total_out = 0;        /* output bytes for all files */
        -: 1933:char ifname[MAX_PATH_LEN]; /* input file name */
        -: 1934:char ofname[MAX_PATH_LEN]; /* output file name */
        -: 1935:int  remove_ofname = 0;	   /* remove output file on error */
        -: 1936:struct stat istat;         /* status for input file */
        -: 1937:int  ifd;                  /* input file descriptor */
        -: 1938:int  ofd;                  /* output file descriptor */
        -: 1939:unsigned insize;           /* valid bytes in inbuf */
        -: 1940:unsigned inptr;            /* index of next byte to be processed in inbuf */
        -: 1941:unsigned outcnt;           /* bytes in output buffer */
        -: 1942:
        -: 1943:struct option longopts[] =
        -: 1944:{
        -: 1945: /* { name  has_arg  *flag  val } */
        -: 1946:    {"ascii",      0, 0, 'a'}, /* ascii text mode */
        -: 1947:    {"to-stdout",  0, 0, 'c'}, /* write output on standard output */
        -: 1948:    {"stdout",     0, 0, 'c'}, /* write output on standard output */
        -: 1949:    {"decompress", 0, 0, 'd'}, /* decompress */
        -: 1950:    {"uncompress", 0, 0, 'd'}, /* decompress */
        -: 1951: /* {"encrypt",    0, 0, 'e'},    encrypt */
        -: 1952:    {"force",      0, 0, 'f'}, /* force overwrite of output file */
        -: 1953:    {"help",       0, 0, 'h'}, /* give help */
        -: 1954: /* {"pkzip",      0, 0, 'k'},    force output in pkzip format */
        -: 1955:    {"list",       0, 0, 'l'}, /* list .gz file contents */
        -: 1956:    {"license",    0, 0, 'L'}, /* display software license */
        -: 1957:    {"no-name",    0, 0, 'n'}, /* don't save or restore the original name */
        -: 1958:    {"quiet",      0, 0, 'q'}, /* quiet mode */
        -: 1959:    {"silent",     0, 0, 'q'}, /* quiet mode */
        -: 1960:    {"recurse",    0, 0, 'r'}, /* recurse through directories */
        -: 1961:    {"suffix",     1, 0, 'S'}, /* use given suffix instead of .gz */
        -: 1962:    {"test",       0, 0, 't'}, /* test compressed file integrity */
        -: 1963:    {"verbose",    0, 0, 'v'}, /* verbose mode */
        -: 1964:    {"version",    0, 0, 'V'}, /* display version number */
        -: 1965:    {"fast",       0, 0, '1'}, /* compress faster */
        -: 1966:    {"best",       0, 0, '9'}, /* compress better */
        -: 1967:    {"lzw",        0, 0, 'Z'}, /* make output compatible with old compress */
        -: 1968:    {"bits",       1, 0, 'b'}, /* max number of bits per code (implies -Z) */
        -: 1969:    { 0, 0, 0, 0 }
        -: 1970:};
        -: 1971:
        -: 1972:/* local functions */
        -: 1973:
        -: 1974:local void usage        OF((void));
        -: 1975:local void help         OF((void));
        -: 1976:local void license      OF((void));
        -: 1977:local void version      OF((void));
        -: 1978:local void treat_stdin  OF((void));
        -: 1979:local void treat_file   OF((char *iname));
        -: 1980:local int create_outfile OF((void));
        -: 1981:local int  do_stat      OF((char *name, struct stat *sbuf));
        -: 1982:local char *get_suffix  OF((char *name));
        -: 1983:local int  get_istat    OF((char *iname, struct stat *sbuf));
        -: 1984:local int  make_ofname  OF((void));
        -: 1985:local int  same_file    OF((struct stat *stat1, struct stat *stat2));
        -: 1986:local int name_too_long OF((char *name, struct stat *statb));
        -: 1987:local void shorten_name  OF((char *name));
        -: 1988:local int  get_method   OF((int in));
        -: 1989:local void do_list      OF((int ifd, int method));
        -: 1990:local int  check_ofname OF((void));
        -: 1991:local void reset_times  OF((char *name, struct stat *statb));
        -: 1992:local void copy_stat    OF((struct stat *ifstat));
        -: 1993:local void treat_dir    OF((char *dir));
        -: 1994:local void do_exit      OF((int exitcode));
        -: 1995:      int main          OF((int argc, char **argv));
        -: 1996:
        -: 1997:int (*work) OF((int infile, int outfile)) = zip; /* function to call */
        -: 1998:
        -: 1999:#define strequ(s1, s2) (strcmp((s1),(s2)) == 0)
        -: 2000:
        -: 2001:/* ======================================================================== */
function usage called 2 returned 100% blocks executed 100%
        2: 2002:local void usage()
        -: 2003:{
        2: 2004:    fprintf(stderr, "usage: %s [-%scdfhlLn%stvV19] [-S suffix] [file ...]\n",
call    0 returned 2
        -: 2005:	    progname,
        -: 2006:#if O_BINARY
        -: 2007:	    "a",
        -: 2008:#else
        -: 2009:	    "",
        -: 2010:#endif
        -: 2011:#ifdef NO_DIR
        -: 2012:	    ""
        -: 2013:#else
        -: 2014:	    "r"
        -: 2015:#endif
        -: 2016:	    );
        2: 2017:}
        -: 2018:
        -: 2019:/* ======================================================================== */
function help called 2 returned 100% blocks executed 100%
        2: 2020:local void help()
        -: 2021:{
        -: 2022:    static char  *help_msg[] = {
        -: 2023:#if O_BINARY
        -: 2024: " -a --ascii       ascii text; convert end-of-lines using local conventions",
        -: 2025:#endif
        -: 2026: " -c --stdout      write on standard output, keep original files unchanged",
        -: 2027: " -d --decompress  decompress",
        -: 2028:/* -e --encrypt     encrypt */
        -: 2029: " -f --force       force overwrite of output file and compress links",
        -: 2030: " -h --help        give this help",
        -: 2031:/* -k --pkzip       force output in pkzip format */
        -: 2032: " -l --list        list .gz file contents",
        -: 2033: " -L --license     display software license",
        -: 2034: " -n --no-name     do not save or restore the original name",
        -: 2035: " -q --quiet       suppress all warnings",
        -: 2036:#ifndef NO_DIR
        -: 2037: " -r --recurse     recurse through directories",
        -: 2038:#endif
        -: 2039:#ifdef MAX_EXT_CHARS
        -: 2040: " -S .suf  --suffix .suf     use suffix .suf instead of .z",
        -: 2041:#else
        -: 2042: " -S .suf  --suffix .suf     use suffix .suf instead of .gz",
        -: 2043:#endif
        -: 2044: " -t --test        test compressed file integrity",
        -: 2045: " -v --verbose     verbose mode",
        -: 2046: " -V --version     display version number",
        -: 2047: " -1 --fast        compress faster",
        -: 2048: " -9 --best        compress better",
        -: 2049:#ifdef LZW
        -: 2050: " -Z --lzw         produce output compatible with old compress",
        -: 2051: " -b --bits maxbits   max number of bits per code (implies -Z)",
        -: 2052:#endif
        -: 2053: " file...          files to (de)compress. If none given, use standard input.",
        -: 2054:  0};
        2: 2055:    char **p = help_msg;
        -: 2056:
        2: 2057:    fprintf(stderr,"%s %s (%s)\n", progname, VERSION, REVDATE);
call    0 returned 2
        2: 2058:    usage();
call    0 returned 2
       34: 2059:    while (*p) fprintf(stderr, "%s\n", *p++);
call    0 returned 32
branch  1 taken 32
branch  2 taken 2 (fallthrough)
        2: 2060:}
        -: 2061:
        -: 2062:/* ======================================================================== */
function license called 2 returned 100% blocks executed 100%
        2: 2063:local void license()
        -: 2064:{
        2: 2065:    char **p = license_msg;
        -: 2066:
        2: 2067:    fprintf(stderr,"%s %s (%s)\n", progname, VERSION, REVDATE);
call    0 returned 2
       30: 2068:    while (*p) fprintf(stderr, "%s\n", *p++);
call    0 returned 28
branch  1 taken 28
branch  2 taken 2 (fallthrough)
        2: 2069:}
        -: 2070:
        -: 2071:/* ======================================================================== */
function version called 2 returned 100% blocks executed 100%
        2: 2072:local void version()
        -: 2073:{
        2: 2074:    fprintf(stderr,"%s %s (%s)\n", progname, VERSION, REVDATE);
call    0 returned 2
        -: 2075:
        2: 2076:    fprintf(stderr, "Compilation options:\n%s %s ", DIR_OPT, TIME_OPT);
call    0 returned 2
        -: 2077:#ifdef STDC_HEADERS
        2: 2078:    fprintf(stderr, "STDC_HEADERS ");
call    0 returned 2
        -: 2079:#endif
        -: 2080:#ifdef HAVE_UNISTD_H
        2: 2081:    fprintf(stderr, "HAVE_UNISTD_H ");
call    0 returned 2
        -: 2082:#endif
        -: 2083:#ifdef NO_MEMORY_H
        -: 2084:    fprintf(stderr, "NO_MEMORY_H ");
        -: 2085:#endif
        -: 2086:#ifdef NO_STRING_H
        -: 2087:    fprintf(stderr, "NO_STRING_H ");
        -: 2088:#endif
        -: 2089:#ifdef NO_SYMLINK
        -: 2090:    fprintf(stderr, "NO_SYMLINK ");
        -: 2091:#endif
        -: 2092:#ifdef NO_MULTIPLE_DOTS
        -: 2093:    fprintf(stderr, "NO_MULTIPLE_DOTS ");
        -: 2094:#endif
        -: 2095:#ifdef NO_CHOWN
        -: 2096:    fprintf(stderr, "NO_CHOWN ");
        -: 2097:#endif
        -: 2098:#ifdef PROTO
        -: 2099:    fprintf(stderr, "PROTO ");
        -: 2100:#endif
        -: 2101:#ifdef ASMV
        -: 2102:    fprintf(stderr, "ASMV ");
        -: 2103:#endif
        -: 2104:#ifdef DEBUG
        -: 2105:    fprintf(stderr, "DEBUG ");
        -: 2106:#endif
        -: 2107:#ifdef DYN_ALLOC
        -: 2108:    fprintf(stderr, "DYN_ALLOC ");
        -: 2109:#endif
        -: 2110:#ifdef MAXSEG_64K
        -: 2111:    fprintf(stderr, "MAXSEG_64K");
        -: 2112:#endif
        2: 2113:    fprintf(stderr, "\n");
call    0 returned 2
        2: 2114:}
        -: 2115:
        -: 2116:/* ======================================================================== */
function main called 214 returned 0% blocks executed 67%
      214: 2117:int main (argc, argv)
        -: 2118:    int argc;
        -: 2119:    char **argv;
        -: 2120:{
      214: 2121:    int file_count = 0; /* number of files to precess */
        -: 2122:    int proglen;        /* length of progname */
        -: 2123:    int optc;           /* current option */
        -: 2124:
        -: 2125:    EXPAND(argc, argv); /* wild card expansion if necessary */
        -: 2126:
      214: 2127:    progname = basename(argv[0]);
call    0 returned 214
      214: 2128:    proglen = strlen(progname);
        -: 2129:
        -: 2130:    /* Suppress .exe for MSDOS, OS/2 and VMS: */
      214: 2131:    if (proglen > 4 && strequ(progname+proglen-4, ".exe")) {
branch  0 taken 214 (fallthrough)
branch  1 taken 0
branch  2 taken 214 (fallthrough)
branch  3 taken 0
      214: 2132:        progname[proglen-4] = '\0';
        -: 2133:    }
        -: 2134:
        -: 2135:    /* Add options in GZIP environment variable if there is one */
      214: 2136:    env = add_envopt(&argc, &argv, OPTIONS_VAR);
call    0 returned 214
     214*: 2137:    if (env != NULL) args = argv;
branch  0 taken 0 (fallthrough)
branch  1 taken 214
        -: 2138:
      214: 2139:    foreground = signal(SIGINT, SIG_IGN) != SIG_IGN;
call    0 returned 214
      214: 2140:    if (foreground) {
branch  0 taken 213 (fallthrough)
branch  1 taken 1
      213: 2141:	signal (SIGINT, (sig_type)abort_gzip);
call    0 returned 213
        -: 2142:    }
        -: 2143:#ifdef SIGTERM
      214: 2144:    signal(SIGTERM, (sig_type)abort_gzip);
call    0 returned 214
        -: 2145:#endif
        -: 2146:#ifdef SIGHUP
      214: 2147:    signal(SIGHUP,  (sig_type)abort_gzip);
call    0 returned 214
        -: 2148:#endif
        -: 2149:
        -: 2150:#ifndef GNU_STANDARD
        -: 2151:    /* For compatibility with old compress, use program name as an option.
        -: 2152:     * If you compile with -DGNU_STANDARD, this program will behave as
        -: 2153:     * gzip even if it is invoked under the name gunzip or zcat.
        -: 2154:     *
        -: 2155:     * Systems which do not support links can still use -d or -dc.
        -: 2156:     * Ignore an .exe extension for MSDOS, OS/2 and VMS.
        -: 2157:     */
      214: 2158:    if (  strncmp(progname, "un",  2) == 0     /* ungzip, uncompress */
branch  0 taken 214 (fallthrough)
branch  1 taken 0
      214: 2159:       || strncmp(progname, "gun", 3) == 0) {  /* gunzip */
branch  0 taken 0 (fallthrough)
branch  1 taken 214
    #####: 2160:	decompress = 1;
      214: 2161:    } else if (strequ(progname+1, "cat")       /* zcat, pcat, gcat */
branch  0 taken 214 (fallthrough)
branch  1 taken 0
      214: 2162:	    || strequ(progname, "gzcat")) {    /* gzcat */
branch  0 taken 0 (fallthrough)
branch  1 taken 214
    #####: 2163:	decompress = to_stdout = 1;
        -: 2164:    }
        -: 2165:#endif
        -: 2166:
      214: 2167:    strncpy(z_suffix, Z_SUFFIX, sizeof(z_suffix)-1);
      214: 2168:    z_len = strlen(z_suffix);
        -: 2169:
      716: 2170:    while ((optc = getopt_long (argc, argv, "ab:cdfhlLnqrS:tvVZ123456789",
call    0 returned 716
      716: 2171:				longopts, (int *)0)) != EOF) {
branch  0 taken 508
branch  1 taken 208 (fallthrough)
      508: 2172:	switch (optc) {
branch  0 taken 0
branch  1 taken 0
branch  2 taken 2
branch  3 taken 13
branch  4 taken 82
branch  5 taken 2
branch  6 taken 0
branch  7 taken 2
branch  8 taken 0
branch  9 taken 82
branch 10 taken 83
branch 11 taken 0
branch 12 taken 3
branch 13 taken 82
branch 14 taken 2
branch 15 taken 0
branch 16 taken 155
branch 17 taken 0
    #####: 2173:        case 'a':
    #####: 2174:            ascii = 1; break;
    #####: 2175:	case 'b':
    #####: 2176:	    maxbits = atoi(optarg);
    #####: 2177:	    break;
        2: 2178:	case 'c':
        2: 2179:	    to_stdout = 1; break;
       13: 2180:	case 'd':
       13: 2181:	    decompress = 1; break;
       82: 2182:	case 'f':
       82: 2183:	    force++; break;
        2: 2184:	case 'h': case 'H': case '?':
        2: 2185:	    help(); do_exit(OK); break;
call    0 returned 2
call    1 returned 0
    #####: 2186:	case 'l':
    #####: 2187:	    list = decompress = to_stdout = 1; break;
        2: 2188:	case 'L':
        2: 2189:	    license(); do_exit(OK); break;
call    0 returned 2
call    1 returned 0
    #####: 2190:	case 'n':
    #####: 2191:	    no_name = 1; break;
       82: 2192:	case 'q':
       82: 2193:	    quiet = 1; verbose = 0; break;
       83: 2194:	case 'r':
        -: 2195:#ifdef NO_DIR
        -: 2196:	    fprintf(stderr, "%s: -r not supported on this system\n", progname);
        -: 2197:	    usage();
        -: 2198:	    do_exit(ERROR); break;
        -: 2199:#else
       83: 2200:	    recursive = 1; break;
        -: 2201:#endif
    #####: 2202:	case 'S':
        -: 2203:#ifdef NO_MULTIPLE_DOTS
        -: 2204:            if (*optarg == '.') optarg++;
        -: 2205:#endif
    #####: 2206:            z_len = strlen(optarg);
    #####: 2207:            strcpy(z_suffix, optarg);
    #####: 2208:            break;
        3: 2209:	case 't':
        3: 2210:	    test = decompress = to_stdout = 1;
        3: 2211:	    break;
       82: 2212:	case 'v':
       82: 2213:	    verbose++; quiet = 0; break;
        2: 2214:	case 'V':
        2: 2215:	    version(); do_exit(OK); break;
call    0 returned 2
call    1 returned 0
    #####: 2216:	case 'Z':
        -: 2217:#ifdef LZW
        -: 2218:	    do_lzw = 1; break;
        -: 2219:#else
    #####: 2220:	    fprintf(stderr, "%s: -Z not supported in this version\n",
call    0 never executed
        -: 2221:		    progname);
    #####: 2222:	    usage();
call    0 never executed
    #####: 2223:	    do_exit(ERROR); break;
call    0 never executed
        -: 2224:#endif
      155: 2225:	case '1':  case '2':  case '3':  case '4':
        -: 2226:	case '5':  case '6':  case '7':  case '8':  case '9':
      155: 2227:	    level = optc - '0';
      155: 2228:	    break;
    #####: 2229:	default:
        -: 2230:	    /* Error message already emitted by getopt_long. */
    #####: 2231:	    usage();
call    0 never executed
    #####: 2232:	    do_exit(ERROR);
call    0 never executed
        -: 2233:	}
        -: 2234:    } /* loop on all arguments */
        -: 2235:
      208: 2236:    file_count = argc - optind;
        -: 2237:
        -: 2238:#if O_BINARY
        -: 2239:#else
     208*: 2240:    if (ascii && !quiet) {
branch  0 taken 0 (fallthrough)
branch  1 taken 208
branch  2 never executed
branch  3 never executed
    #####: 2241:	fprintf(stderr, "%s: option --ascii ignored on this system\n",
call    0 never executed
        -: 2242:		progname);
        -: 2243:    }
        -: 2244:#endif
     208*: 2245:    if ((z_len == 0 && !decompress) || z_len > MAX_SUFFIX) {
branch  0 taken 0 (fallthrough)
branch  1 taken 208
branch  2 never executed
branch  3 never executed
branch  4 taken 0 (fallthrough)
branch  5 taken 208
    #####: 2246:        fprintf(stderr, "%s: incorrect suffix '%s'\n",
call    0 never executed
        -: 2247:                progname, optarg);
    #####: 2248:        do_exit(ERROR);
call    0 never executed
        -: 2249:    }
     208*: 2250:    if (do_lzw && !decompress) work = lzw;
branch  0 taken 0 (fallthrough)
branch  1 taken 208
branch  2 never executed
branch  3 never executed
        -: 2251:
        -: 2252:    /* Allocate all global buffers (for DYN_ALLOC option) */
        -: 2253:    ALLOC(uch, inbuf,  INBUFSIZ +INBUF_EXTRA);
        -: 2254:    ALLOC(uch, outbuf, OUTBUFSIZ+OUTBUF_EXTRA);
        -: 2255:    ALLOC(ush, d_buf,  DIST_BUFSIZE);
        -: 2256:    ALLOC(uch, window, 2L*WSIZE);
        -: 2257:#ifndef MAXSEG_64K
        -: 2258:    ALLOC(ush, tab_prefix, 1L<<BITS);
        -: 2259:#else
        -: 2260:    ALLOC(ush, tab_prefix0, 1L<<(BITS-1));
        -: 2261:    ALLOC(ush, tab_prefix1, 1L<<(BITS-1));
        -: 2262:#endif
        -: 2263:
        -: 2264:    /* And get to work */
      208: 2265:    if (file_count != 0) {
branch  0 taken 20 (fallthrough)
branch  1 taken 188
      20*: 2266:	if (to_stdout && !test && !list && (!decompress || !ascii)) {
branch  0 taken 2 (fallthrough)
branch  1 taken 18
branch  2 taken 1 (fallthrough)
branch  3 taken 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 1
        -: 2267:	    SET_BINARY_MODE(fileno(stdout));
        -: 2268:	}
       40: 2269:        while (optind < argc) {
branch  0 taken 20
branch  1 taken 20
       20: 2270:	    treat_file(argv[optind++]);
call    0 returned 20
        -: 2271:	}
        -: 2272:    } else {  /* Standard input */
      188: 2273:	treat_stdin();
call    0 returned 187
        -: 2274:    }
     207*: 2275:    if (list && !quiet) {
branch  0 taken 0 (fallthrough)
branch  1 taken 207
branch  2 never executed
branch  3 never executed
    #####: 2276:	do_list(-1, -1); /* print totals */
call    0 never executed
        -: 2277:    }
      207: 2278:    do_exit(exit_code);
call    0 returned 0
    #####: 2279:    return exit_code; /* just to avoid lint warning */
        -: 2280:}
        -: 2281:
        -: 2282:/* ========================================================================
        -: 2283: * Compress or decompress stdin
        -: 2284: */
function treat_stdin called 188 returned 99% blocks executed 72%
      188: 2285:local void treat_stdin()
        -: 2286:{
      188: 2287:    if (!force && isatty(fileno((FILE *)(decompress ? stdin : stdout)))) {
branch  0 taken 107 (fallthrough)
branch  1 taken 81
branch  2 taken 14 (fallthrough)
branch  3 taken 93
call    4 returned 107
call    5 returned 107
branch  6 taken 0 (fallthrough)
branch  7 taken 107
        -: 2288:	/* Do not send compressed data to the terminal or read it from
        -: 2289:	 * the terminal. We get here when user invoked the program
        -: 2290:	 * without parameters, so be helpful. According to the GNU standards:
        -: 2291:	 *
        -: 2292:	 *   If there is one behavior you think is most useful when the output
        -: 2293:	 *   is to a terminal, and another that you think is most useful when
        -: 2294:	 *   the output is a file or a pipe, then it is usually best to make
        -: 2295:	 *   the default behavior the one that is useful with output to a
        -: 2296:	 *   terminal, and have an option for the other behavior.
        -: 2297:	 *
        -: 2298:	 * Here we use the --force option to get the other behavior.
        -: 2299:	 */
    #####: 2300:	fprintf(stderr,
call    0 never executed
        -: 2301:    "%s: compressed data not %s a terminal. Use -f to force %scompression.\n",
    #####: 2302:		progname, decompress ? "read from" : "written to",
branch  0 never executed
branch  1 never executed
    #####: 2303:		decompress ? "de" : "");
branch  0 never executed
branch  1 never executed
    #####: 2304:	fprintf(stderr,"For help, type: %s -h\n", progname);
call    0 never executed
    #####: 2305:	do_exit(ERROR);
call    0 never executed
        -: 2306:    }
        -: 2307:
      188: 2308:    if (decompress || !ascii) {
branch  0 taken 174 (fallthrough)
branch  1 taken 14
        -: 2309:	SET_BINARY_MODE(fileno(stdin));
        -: 2310:    }
      188: 2311:    if (!test && !list && (!decompress || !ascii)) {
branch  0 taken 186 (fallthrough)
branch  1 taken 2
branch  2 taken 186 (fallthrough)
branch  3 taken 0
branch  4 taken 12 (fallthrough)
branch  5 taken 174
        -: 2312:	SET_BINARY_MODE(fileno(stdout));
        -: 2313:    }
      188: 2314:    strcpy(ifname, "stdin");
      188: 2315:    strcpy(ofname, "stdout");
        -: 2316:
        -: 2317:    /* Get the time stamp on the input file. */
        -: 2318:#ifdef NO_STDIN_FSTAT
        -: 2319:    time_stamp = 0; /* time unknown */
        -: 2320:#else
      188: 2321:    if (fstat(fileno(stdin), &istat) != 0) {
call    0 returned 188
call    1 returned 188
branch  2 taken 0 (fallthrough)
branch  3 taken 188
    #####: 2322:	error("fstat(stdin)");
call    0 never executed
        -: 2323:    }
        -: 2324:    /* If you do not wish to save the time stamp when input comes from a pipe,
        -: 2325:     * compile with -DNO_PIPE_TIMESTAMP.
        -: 2326:     */
        -: 2327:#ifdef NO_PIPE_TIMESTAMP
        -: 2328:    if (!S_ISREG(istat.st_mode))
        -: 2329:	time_stamp = 0;
        -: 2330:    else
        -: 2331:#endif
        -: 2332:	/* Not original change; set by MAPSTEXT */
        -: 2333:	/*time_stamp = istat.st_mtime;*/
      188: 2334:	time_stamp = 0;
        -: 2335:#endif
      188: 2336:    ifile_size = -1L; /* convention for unknown size */
        -: 2337:
      188: 2338:    clear_bufs(); /* clear input and output buffers */
call    0 returned 188
      188: 2339:    to_stdout = 1;
      188: 2340:    part_nb = 0;
        -: 2341:
      188: 2342:    if (decompress) {
branch  0 taken 14 (fallthrough)
branch  1 taken 174
       14: 2343:	method = get_method(ifd);
call    0 returned 13
       13: 2344:	if (method < 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 13
    #####: 2345:	    do_exit(exit_code); /* error message already emitted */
call    0 never executed
        -: 2346:	}
        -: 2347:    }
        -: 2348:#ifdef FAULTY_F_KL_2
        -: 2349:    if (list) {
        -: 2350:        do_list(ifd, method);
        -: 2351:        return;
        -: 2352:    }
        -: 2353:#endif
        -: 2354:
        -: 2355:    /* Actually do the compression/decompression. Loop over zipped members.
        -: 2356:     */
        -: 2357:    for (;;) {
     187*: 2358:	if ((*work)(fileno(stdin), fileno(stdout)) != OK) return;
call    0 returned 187
call    1 returned 187
call    2 returned 187
branch  3 taken 0 (fallthrough)
branch  4 taken 187
        -: 2359:
      187: 2360:	if (!decompress || last_member || inptr == insize) break;
branch  0 taken 13 (fallthrough)
branch  1 taken 174
branch  2 taken 10 (fallthrough)
branch  3 taken 3
branch  4 taken 1 (fallthrough)
branch  5 taken 9
        -: 2361:	/* end of file */
        -: 2362:
        1: 2363:	method = get_method(ifd);
call    0 returned 1
        1: 2364:	if (method < 0) return; /* error message already emitted */
branch  0 taken 1 (fallthrough)
branch  1 taken 0
    #####: 2365:	bytes_out = 0;            /* required for length check */
        -: 2366:    }
        -: 2367:
      186: 2368:    if (verbose) {
branch  0 taken 81 (fallthrough)
branch  1 taken 105
       81: 2369:	if (test) {
branch  0 taken 0 (fallthrough)
branch  1 taken 81
    #####: 2370:	    fprintf(stderr, " OK\n");
call    0 never executed
        -: 2371:
       81: 2372:	} else if (!decompress) {
branch  0 taken 81 (fallthrough)
branch  1 taken 0
       81: 2373:	    display_ratio(bytes_in-(bytes_out-header_bytes), bytes_in, stderr);
call    0 returned 81
       81: 2374:	    fprintf(stderr, "\n");
call    0 returned 81
        -: 2375:#ifdef DISPLAY_STDIN_RATIO
        -: 2376:	} else {
        -: 2377:	    display_ratio(bytes_out-(bytes_in-header_bytes), bytes_out,stderr);
        -: 2378:	    fprintf(stderr, "\n");
        -: 2379:#endif
        -: 2380:	}
        -: 2381:    }
        -: 2382:}
        -: 2383:
        -: 2384:/* ========================================================================
        -: 2385: * Compress or decompress the given file
        -: 2386: */
function treat_file called 23 returned 100% blocks executed 40%
       23: 2387:local void treat_file(iname)
        -: 2388:    char *iname;
        -: 2389:{
        -: 2390:    /* Check if the input file is present, set ifname and istat: */
       23: 2391:    if (get_istat(iname, &istat) != OK) return;
call    0 returned 23
branch  1 taken 15 (fallthrough)
branch  2 taken 8
        -: 2392:
        -: 2393:    /* If the input name is that of a directory, recurse or ignore: */
        8: 2394:    if (S_ISDIR(istat.st_mode)) {
branch  0 taken 3 (fallthrough)
branch  1 taken 5
        -: 2395:#ifndef NO_DIR
        3: 2396:	if (recursive) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 2397:	    struct stat st;
        3: 2398:	    st = istat;
        3: 2399:	    treat_dir(iname);
call    0 returned 3
        -: 2400:	    /* Warning: ifname is now garbage */
        3: 2401:	    reset_times (iname, &st);
call    0 returned 3
        -: 2402:	} else
        -: 2403:#endif
    #####: 2404:	WARN((stderr,"%s: %s is a directory -- ignored\n", progname, ifname));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        3: 2405:	return;
        -: 2406:    }
        5: 2407:    if (!S_ISREG(istat.st_mode)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####: 2408:	WARN((stderr,
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2409:	      "%s: %s is not a directory or a regular file - ignored\n",
        -: 2410:	      progname, ifname));
    #####: 2411:	return;
        -: 2412:    }
       5*: 2413:    if (istat.st_nlink > 1 && !to_stdout && !force) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2414:	WARN((stderr, "%s: %s has %d other link%c -- unchanged\n",
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2415:	      progname, ifname,
        -: 2416:	      (int)istat.st_nlink - 1, istat.st_nlink > 2 ? 's' : ' '));
    #####: 2417:	return;
        -: 2418:    }
        -: 2419:
        5: 2420:    ifile_size = istat.st_size;
        -: 2421:    /* Not original change; set by MAPSTEXT */
        -: 2422:    /* time_stamp = istat.st_mtime; */
        5: 2423:    time_stamp = 0;
        -: 2424:
        -: 2425:    /* Generate output file name */
        5: 2426:    if (to_stdout && !list) {
branch  0 taken 2 (fallthrough)
branch  1 taken 3
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 2427:	strcpy(ofname, "stdout");
        -: 2428:
        3: 2429:    } else if (make_ofname() != OK) {
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3: 2430:	return;
        -: 2431:    }
        -: 2432:
        -: 2433:    /* Open the input file and determine compression method. The mode
        -: 2434:     * parameter is ignored but required by some systems (VMS) and forbidden
        -: 2435:     * on other systems (MacOS).
        -: 2436:     */
        2: 2437:    ifd = OPEN(ifname, ascii && !decompress ? O_RDONLY : O_RDONLY | O_BINARY,
call    0 returned 2
        -: 2438:	       RW_USER);
        2: 2439:    if (ifd == -1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 2440:	fprintf(stderr, "%s: ", progname);
call    0 never executed
    #####: 2441:	perror(ifname);
call    0 never executed
    #####: 2442:	exit_code = ERROR;
    #####: 2443:	return;
        -: 2444:    }
        2: 2445:    clear_bufs(); /* clear input and output buffers */
call    0 returned 2
        2: 2446:    part_nb = 0;
        -: 2447:
        2: 2448:    if (decompress) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 2449:	method = get_method(ifd); /* updates ofname if original given */
call    0 returned 1
        1: 2450:	if (method < 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 2451:	    close(ifd);
call    0 never executed
    #####: 2452:	    return;               /* error message already emitted */
        -: 2453:	}
        -: 2454:    }
        2: 2455:    if (list) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 2456:        do_list(ifd, method);
call    0 never executed
    #####: 2457:        close(ifd);
call    0 never executed
    #####: 2458:        return;
        -: 2459:    }
        -: 2460:
        -: 2461:    /* If compressing to a file, check if ofname is not ambiguous
        -: 2462:     * because the operating system truncates names. Otherwise, generate
        -: 2463:     * a new ofname and save the original name in the compressed file.
        -: 2464:     */
        2: 2465:    if (to_stdout) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 2466:	ofd = fileno(stdout);
call    0 returned 2
        -: 2467:	/* keep remove_ofname as zero */
        -: 2468:    } else {
    #####: 2469:	if (create_outfile() != OK) return;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2470:
    #####: 2471:	if (save_orig_name && !verbose && !quiet) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2472:	    fprintf(stderr, "%s: %s compressed to %s\n",
call    0 never executed
        -: 2473:		    progname, ifname, ofname);
        -: 2474:	}
        -: 2475:    }
        -: 2476:    /* Keep the name even if not truncated except with --no-name: */
        -: 2477:#ifdef FAULTY_F_KL_3
        -: 2478:    if (!save_orig_name) save_orig_name = no_name;
        -: 2479:#else
        2: 2480:    if (!save_orig_name) save_orig_name = !no_name;
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -: 2481:#endif
        -: 2482:
        2: 2483:    if (verbose) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 2484:	fprintf(stderr, "%s:\t%s", ifname, (int)strlen(ifname) >= 15 ? 
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2485:		"" : ((int)strlen(ifname) >= 7 ? "\t" : "\t\t"));
branch  0 never executed
branch  1 never executed
        -: 2486:    }
        -: 2487:
        -: 2488:    /* Actually do the compression/decompression. Loop over zipped members.
        -: 2489:     */
        -: 2490:    for (;;) {
        2: 2491:	if ((*work)(ifd, ofd) != OK) {
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####: 2492:	    method = -1; /* force cleanup */
    #####: 2493:	    break;
        -: 2494:	}
        2: 2495:	if (!decompress || last_member || inptr == insize) break;
branch  0 taken 1 (fallthrough)
branch  1 taken 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        -: 2496:	/* end of file */
        -: 2497:
    #####: 2498:	method = get_method(ifd);
call    0 never executed
    #####: 2499:	if (method < 0) break;    /* error message already emitted */
branch  0 never executed
branch  1 never executed
    #####: 2500:	bytes_out = 0;            /* required for length check */
        -: 2501:    }
        -: 2502:
        2: 2503:    close(ifd);
call    0 returned 2
       2*: 2504:    if (!to_stdout && close(ofd)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2505:	write_error();
call    0 never executed
        -: 2506:    }
        2: 2507:    if (method == -1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 2508:	if (!to_stdout) unlink (ofname);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2509:	return;
        -: 2510:    }
        -: 2511:    /* Display statistics */
        2: 2512:    if(verbose) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 2513:	if (test) {
branch  0 never executed
branch  1 never executed
    #####: 2514:	    fprintf(stderr, " OK");
call    0 never executed
    #####: 2515:	} else if (decompress) {
branch  0 never executed
branch  1 never executed
    #####: 2516:	    display_ratio(bytes_out-(bytes_in-header_bytes), bytes_out,stderr);
call    0 never executed
        -: 2517:	} else {
    #####: 2518:	    display_ratio(bytes_in-(bytes_out-header_bytes), bytes_in, stderr);
call    0 never executed
        -: 2519:	}
    #####: 2520:	if (!test && !to_stdout) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2521:	    fprintf(stderr, " -- replaced with %s", ofname);
call    0 never executed
        -: 2522:	}
    #####: 2523:	fprintf(stderr, "\n");
call    0 never executed
        -: 2524:    }
        -: 2525:    /* Copy modes, times, ownership, and remove the input file */
        2: 2526:    if (!to_stdout) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 2527:	copy_stat(&istat);
call    0 never executed
        -: 2528:    }
        -: 2529:}
        -: 2530:
        -: 2531:/* ========================================================================
        -: 2532: * Create the output file. Return OK or ERROR.
        -: 2533: * Try several times if necessary to avoid truncating the z_suffix. For
        -: 2534: * example, do not create a compressed file of name "1234567890123."
        -: 2535: * Sets save_orig_name to true if the file name has been truncated.
        -: 2536: * IN assertions: the input file has already been open (ifd is set) and
        -: 2537: *   ofname has already been updated if there was an original name.
        -: 2538: * OUT assertions: ifd and ofd are closed in case of error.
        -: 2539: */
function create_outfile called 0 returned 0% blocks executed 0%
    #####: 2540:local int create_outfile()
        -: 2541:{
        -: 2542:    struct stat	ostat; /* stat for ofname */
    #####: 2543:    int flags = O_WRONLY | O_CREAT | O_EXCL | O_BINARY;
        -: 2544:
    #####: 2545:    if (ascii && decompress) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2546:	flags &= ~O_BINARY; /* force ascii text mode */
        -: 2547:    }
        -: 2548:    for (;;) {
        -: 2549:	/* Make sure that ofname is not an existing file */
    #####: 2550:	if (check_ofname() != OK) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2551:	    close(ifd);
call    0 never executed
    #####: 2552:	    return ERROR;
        -: 2553:	}
        -: 2554:	/* Create the output file */
    #####: 2555:	remove_ofname = 1;
    #####: 2556:	ofd = OPEN(ofname, flags, RW_USER);
call    0 never executed
    #####: 2557:	if (ofd == -1) {
branch  0 never executed
branch  1 never executed
    #####: 2558:	    perror(ofname);
call    0 never executed
    #####: 2559:	    close(ifd);
call    0 never executed
    #####: 2560:	    exit_code = ERROR;
    #####: 2561:	    return ERROR;
        -: 2562:	}
        -: 2563:
        -: 2564:	/* Check for name truncation on new file (1234567890123.gz) */
        -: 2565:#ifdef NO_FSTAT
        -: 2566:	if (stat(ofname, &ostat) != 0) {
        -: 2567:#else
    #####: 2568:	if (fstat(ofd, &ostat) != 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2569:#endif
    #####: 2570:	    fprintf(stderr, "%s: ", progname);
call    0 never executed
    #####: 2571:	    perror(ofname);
call    0 never executed
    #####: 2572:	    close(ifd); close(ofd);
call    0 never executed
call    1 never executed
    #####: 2573:	    unlink(ofname);
call    0 never executed
    #####: 2574:	    exit_code = ERROR;
    #####: 2575:	    return ERROR;
        -: 2576:	}
    #####: 2577:	if (!name_too_long(ofname, &ostat)) return OK;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2578:
    #####: 2579:	if (decompress) {
branch  0 never executed
branch  1 never executed
        -: 2580:	    /* name might be too long if an original name was saved */
    #####: 2581:	    WARN((stderr, "%s: %s: warning, name truncated\n",
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2582:		  progname, ofname));
    #####: 2583:	    return OK;
        -: 2584:	}
        -: 2585:#ifdef FAULTY_F_KL_5
        -: 2586:#else
    #####: 2587:	close(ofd);
call    0 never executed
    #####: 2588:	unlink(ofname);
call    0 never executed
        -: 2589:#endif
        -: 2590:#ifdef NO_MULTIPLE_DOTS
        -: 2591:	/* Should never happen, see check_ofname() */
        -: 2592:	fprintf(stderr, "%s: %s: name too long\n", progname, ofname);
        -: 2593:	do_exit(ERROR);
        -: 2594:#endif
    #####: 2595:	shorten_name(ofname);
call    0 never executed
        -: 2596:    }
        -: 2597:}
        -: 2598:
        -: 2599:/* ========================================================================
        -: 2600: * Use lstat if available, except for -c or -f. Use stat otherwise.
        -: 2601: * This allows links when not removing the original file.
        -: 2602: */
function do_stat called 23 returned 100% blocks executed 100%
       23: 2603:local int do_stat(name, sbuf)
        -: 2604:    char *name;
        -: 2605:    struct stat *sbuf;
        -: 2606:{
       23: 2607:    errno = 0;
        -: 2608:#if (defined(S_IFLNK) || defined (S_ISLNK)) && !defined(NO_SYMLINK)
       23: 2609:    if (!to_stdout && !force) {
branch  0 taken 21 (fallthrough)
branch  1 taken 2
branch  2 taken 20 (fallthrough)
branch  3 taken 1
       20: 2610:	return lstat(name, sbuf);
call    0 returned 20
        -: 2611:    }
        -: 2612:#endif
        3: 2613:    return stat(name, sbuf);
call    0 returned 3
        -: 2614:}
        -: 2615:
        -: 2616:/* ========================================================================
        -: 2617: * Return a pointer to the 'z' suffix of a file name, or NULL. For all
        -: 2618: * systems, ".gz", ".z", ".Z", ".taz", ".tgz", "-gz", "-z" and "_z" are
        -: 2619: * accepted suffixes, in addition to the value of the --suffix option.
        -: 2620: * ".tgz" is a useful convention for tar.z files on systems limited
        -: 2621: * to 3 characters extensions. On such systems, ".?z" and ".??z" are
        -: 2622: * also accepted suffixes. For Unix, we do not want to accept any
        -: 2623: * .??z suffix as indicating a compressed file; some people use .xyz
        -: 2624: * to denote volume data.
        -: 2625: *   On systems allowing multiple versions of the same file (such as VMS),
        -: 2626: * this function removes any version suffix in the given name.
        -: 2627: */
function get_suffix called 4 returned 100% blocks executed 87%
        4: 2628:local char *get_suffix(name)
        -: 2629:    char *name;
        -: 2630:{
        -: 2631:    int nlen, slen;
        -: 2632:    char suffix[MAX_SUFFIX+3]; /* last chars of name, forced to lower case */
        -: 2633:    static char *known_suffixes[] =
        -: 2634:       {z_suffix, ".gz", ".z", ".taz", ".tgz", "-gz", "-z", "_z",
        -: 2635:#ifdef MAX_EXT_CHARS
        -: 2636:          "z",
        -: 2637:#endif
        -: 2638:          NULL};
        4: 2639:    char **suf = known_suffixes;
        -: 2640:
       4*: 2641:    if (strequ(z_suffix, "z")) suf++; /* check long suffixes first */
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -: 2642:#ifdef FAULTY_F_KL_6
        -: 2643:    nlen = strlen(name);
        -: 2644:    if (nlen <= MAX_SUFFIX+2)
        -: 2645:    {
        -: 2646:        strcpy(suffix, name);
        -: 2647:    } else {
        -: 2648:        strcpy(suffix, name+nlen-MAX_SUFFIX-2);
        -: 2649:    }
        -: 2650:#endif
        -: 2651:#ifdef SUFFIX_SEP
        -: 2652:    /* strip a version number from the file name */
        -: 2653:    {
        -: 2654:	char *v = strrchr(name, SUFFIX_SEP);
        -: 2655: 	if (v != NULL) *v = '\0';
        -: 2656:    }
        -: 2657:#endif
        4: 2658:    nlen = strlen(name);
        4: 2659:    if (nlen <= MAX_SUFFIX+2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1: 2660:        strcpy(suffix, name);
        -: 2661:    } else {
        3: 2662:        strcpy(suffix, name+nlen-MAX_SUFFIX-2);
        -: 2663:    }
        4: 2664:    strlwr(suffix);
call    0 returned 4
        4: 2665:    slen = strlen(suffix);
        -: 2666:    do {
       12: 2667:       int s = strlen(*suf);
       12: 2668:       if (slen > s && suffix[slen-s-1] != PATH_SEP
branch  0 taken 12 (fallthrough)
branch  1 taken 0
branch  2 taken 12 (fallthrough)
branch  3 taken 0
       12: 2669:           && strequ(suffix + slen - s, *suf)) {
branch  0 taken 4 (fallthrough)
branch  1 taken 8
        4: 2670:           return name+nlen-s;
        -: 2671:       }
        8: 2672:    } while (*++suf != NULL);
branch  0 taken 8
branch  1 taken 0 (fallthrough)
        -: 2673:
    #####: 2674:    return NULL;
        -: 2675:}
        -: 2676:
        -: 2677:
        -: 2678:/* ========================================================================
        -: 2679: * Set ifname to the input file name (with a suffix appended if necessary)
        -: 2680: * and istat to its stats. For decompression, if no file exists with the
        -: 2681: * original name, try adding successively z_suffix, .gz, .z, -z and .Z.
        -: 2682: * For MSDOS, we try only z_suffix and z.
        -: 2683: * Return OK or ERROR.
        -: 2684: */
function get_istat called 23 returned 100% blocks executed 57%
       23: 2685:local int get_istat(iname, sbuf)
        -: 2686:    char *iname;
        -: 2687:    struct stat *sbuf;
        -: 2688:{
        -: 2689:    int ilen;  /* strlen(ifname) */
        -: 2690:    static char *suffixes[] = {z_suffix, ".gz", ".z", "-z", ".Z", NULL};
       23: 2691:    char **suf = suffixes;
        -: 2692:    char *s;
        -: 2693:#ifdef NO_MULTIPLE_DOTS
        -: 2694:    char *dot; /* pointer to ifname extension, or NULL */
        -: 2695:#endif
        -: 2696:
       23: 2697:    strcpy(ifname, iname);
        -: 2698:
        -: 2699:    /* If input file exists, return OK. */
       23: 2700:    if (do_stat(ifname, sbuf) == 0) return OK;
call    0 returned 23
branch  1 taken 8 (fallthrough)
branch  2 taken 15
        -: 2701:
       15: 2702:    if (!decompress || errno != ENOENT) {
branch  0 taken 1 (fallthrough)
branch  1 taken 14
branch  2 taken 0 (fallthrough)
branch  3 taken 1
       14: 2703:	perror(ifname);
call    0 returned 14
       14: 2704:	exit_code = ERROR;
       14: 2705:	return ERROR;
        -: 2706:    }
        -: 2707:    /* file.ext doesn't exist, try adding a suffix (after removing any
        -: 2708:     * version number for VMS).
        -: 2709:     */
        1: 2710:    s = get_suffix(ifname);
call    0 returned 1
        1: 2711:    if (s != NULL) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2712:	perror(ifname); /* ifname already has z suffix and does not exist */
call    0 returned 1
        1: 2713:	exit_code = ERROR;
        1: 2714:	return ERROR;
        -: 2715:    }
        -: 2716:#ifdef NO_MULTIPLE_DOTS
        -: 2717:    dot = strrchr(ifname, '.');
        -: 2718:    if (dot == NULL) {
        -: 2719:        strcat(ifname, ".");
        -: 2720:        dot = strrchr(ifname, '.');
        -: 2721:    }
        -: 2722:#endif
    #####: 2723:    ilen = strlen(ifname);
    #####: 2724:    if (strequ(z_suffix, ".gz")) suf++;
branch  0 never executed
branch  1 never executed
        -: 2725:
        -: 2726:    /* Search for all suffixes */
        -: 2727:    do {
    #####: 2728:        s = *suf;
        -: 2729:#ifdef NO_MULTIPLE_DOTS
        -: 2730:        if (*s == '.') s++;
        -: 2731:#endif
        -: 2732:#ifdef MAX_EXT_CHARS
        -: 2733:        strcpy(ifname, iname);
        -: 2734:        /* Needed if the suffixes are not sorted by increasing length */
        -: 2735:
        -: 2736:        if (*dot == '\0') strcpy(dot, ".");
        -: 2737:        dot[MAX_EXT_CHARS+1-strlen(s)] = '\0';
        -: 2738:#endif
    #####: 2739:        strcat(ifname, s);
    #####: 2740:        if (do_stat(ifname, sbuf) == 0) return OK;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2741:	ifname[ilen] = '\0';
    #####: 2742:    } while (*++suf != NULL);
branch  0 never executed
branch  1 never executed
        -: 2743:
        -: 2744:    /* No suffix found, complain using z_suffix: */
        -: 2745:#ifdef MAX_EXT_CHARS
        -: 2746:    strcpy(ifname, iname);
        -: 2747:    if (*dot == '\0') strcpy(dot, ".");
        -: 2748:    dot[MAX_EXT_CHARS+1-z_len] = '\0';
        -: 2749:#endif
    #####: 2750:    strcat(ifname, z_suffix);
    #####: 2751:    perror(ifname);
call    0 never executed
    #####: 2752:    exit_code = ERROR;
    #####: 2753:    return ERROR;
        -: 2754:}
        -: 2755:
        -: 2756:/* ========================================================================
        -: 2757: * Generate ofname given ifname. Return OK, or WARNING if file must be skipped.
        -: 2758: * Sets save_orig_name to true if the file name has been truncated.
        -: 2759: */
function make_ofname called 3 returned 100% blocks executed 30%
        3: 2760:local int make_ofname()
        -: 2761:{
        -: 2762:    char *suff;            /* ofname z suffix */
        -: 2763:
        3: 2764:    strcpy(ofname, ifname);
        -: 2765:    /* strip a version number if any and get the gzip suffix if present: */
        3: 2766:    suff = get_suffix(ofname);
call    0 returned 3
        -: 2767:
        3: 2768:    if (decompress) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 2769:	if (suff == NULL) {
branch  0 never executed
branch  1 never executed
    #####: 2770:            if (list) return OK;
branch  0 never executed
branch  1 never executed
        -: 2771:	    /* Avoid annoying messages with -r */
    #####: 2772:	    if (verbose || (!recursive && !quiet)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2773:		WARN((stderr,"%s: %s: unknown suffix -- ignored\n",
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2774:		      progname, ifname));
        -: 2775:	    }
    #####: 2776:	    return WARNING;
        -: 2777:	}
        -: 2778:	/* Make a special case for .tgz and .taz: */
    #####: 2779:	strlwr(suff);
call    0 never executed
    #####: 2780:	if (strequ(suff, ".tgz") || strequ(suff, ".taz")) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2781:	    strcpy(suff, ".tar");
        -: 2782:	} else {
    #####: 2783:	    *suff = '\0'; /* strip the z suffix */
        -: 2784:	}
        -: 2785:        /* ofname might be changed later if infile contains an original name */
        -: 2786:
        3: 2787:    } else if (suff != NULL) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 2788:	/* Avoid annoying messages with -r (see treat_dir()) */
       3*: 2789:	if (verbose || (!recursive && !quiet)) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 3
branch  4 never executed
branch  5 never executed
    #####: 2790:	    fprintf(stderr, "%s: %s already has %s suffix -- unchanged\n",
call    0 never executed
        -: 2791:		    progname, ifname, suff);
        -: 2792:	}
        3: 2793:	if (exit_code == OK) exit_code = WARNING;
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 2794:	return WARNING;
        -: 2795:    } else {
    #####: 2796:        save_orig_name = 0;
        -: 2797:
        -: 2798:#ifdef NO_MULTIPLE_DOTS
        -: 2799:	suff = strrchr(ofname, '.');
        -: 2800:	if (suff == NULL) {
        -: 2801:            strcat(ofname, ".");
        -: 2802:#  ifdef MAX_EXT_CHARS
        -: 2803:	    if (strequ(z_suffix, "z")) {
        -: 2804:		strcat(ofname, "gz"); /* enough room */
        -: 2805:		return OK;
        -: 2806:	    }
        -: 2807:        /* On the Atari and some versions of MSDOS, name_too_long()
        -: 2808:         * does not work correctly because of a bug in stat(). So we
        -: 2809:         * must truncate here.
        -: 2810:         */
        -: 2811:        } else if (strlen(suff)-1 + z_len > MAX_SUFFIX) {
        -: 2812:            suff[MAX_SUFFIX+1-z_len] = '\0';
        -: 2813:            save_orig_name = 1;
        -: 2814:#  endif
        -: 2815:        }
        -: 2816:#endif /* NO_MULTIPLE_DOTS */
    #####: 2817:	strcat(ofname, z_suffix);
        -: 2818:
        -: 2819:    } /* decompress ? */
    #####: 2820:    return OK;
        -: 2821:}
        -: 2822:
        -: 2823:
        -: 2824:/* ========================================================================
        -: 2825: * Check the magic number of the input file and update ofname if an
        -: 2826: * original name was given and to_stdout is not set.
        -: 2827: * Return the compression method, -1 for error, -2 for warning.
        -: 2828: * Set inptr to the offset of the next byte to be processed.
        -: 2829: * This function may be called repeatedly for an input file consisting
        -: 2830: * of several contiguous gzip'ed members.
        -: 2831: * IN assertions: there is at least one remaining compressed member.
        -: 2832: *   If the member is a zip file, it must be the only one.
        -: 2833: */
function get_method called 16 returned 94% blocks executed 44%
       16: 2834:local int get_method(in)
        -: 2835:    int in;        /* input file descriptor */
        -: 2836:{
        -: 2837:    uch flags;
        -: 2838:    char magic[2]; /* magic header */
        -: 2839:
        -: 2840:    /* If --force and --stdout, zcat == cat, so do not complain about
        -: 2841:     * premature end of file: use try_byte instead of get_byte.
        -: 2842:     */
      16*: 2843:    if (force && to_stdout) {
branch  0 taken 0 (fallthrough)
branch  1 taken 16
branch  2 never executed
branch  3 never executed
    #####: 2844:	magic[0] = (char)try_byte();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2845:	magic[1] = (char)try_byte();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2846:	/* If try_byte returned EOF, magic[1] == 0xff */
        -: 2847:    } else {
       16: 2848:	magic[0] = (char)get_byte();
branch  0 taken 1 (fallthrough)
branch  1 taken 15
call    2 returned 15
      16*: 2849:	magic[1] = (char)get_byte();
branch  0 taken 16 (fallthrough)
branch  1 taken 0
call    2 never executed
        -: 2850:    }
        -: 2851:    /* Not original change; set by MAPSTEXT */
        -: 2852:    /* time_stamp = istat.st_mtime; may be modified later for some methods */
       16: 2853:    time_stamp = 0;
       16: 2854:    method = -1;                 /* unknown yet */
       16: 2855:    part_nb++;                   /* number of parts in gzip file */
       16: 2856:    header_bytes = 0;
       16: 2857:    last_member = RECORD_IO;
        -: 2858:    /* assume multiple members in gzip file except for record oriented I/O */
        -: 2859:
       16: 2860:    if (memcmp(magic, GZIP_MAGIC, 2) == 0
branch  0 taken 5 (fallthrough)
branch  1 taken 11
        5: 2861:        || memcmp(magic, OLD_GZIP_MAGIC, 2) == 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -: 2862:
      11*: 2863:	method = (int)get_byte();
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
       11: 2864:	if (method != DEFLATED) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 2865:	    fprintf(stderr,
call    0 never executed
        -: 2866:		    "%s: %s: unknown method %d -- get newer version of gzip\n",
        -: 2867:		    progname, ifname, method);
    #####: 2868:	    exit_code = ERROR;
    #####: 2869:	    return -1;
        -: 2870:	}
       11: 2871:	work = unzip;
      11*: 2872:	flags  = (uch)get_byte();
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
        -: 2873:
       11: 2874:	if ((flags & ENCRYPTED) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 2875:	    fprintf(stderr,
call    0 never executed
        -: 2876:		    "%s: %s is encrypted -- get newer version of gzip\n",
        -: 2877:		    progname, ifname);
    #####: 2878:	    exit_code = ERROR;
    #####: 2879:	    return -1;
        -: 2880:	}
       11: 2881:	if ((flags & CONTINUATION) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 2882:	    fprintf(stderr,
call    0 never executed
        -: 2883:	   "%s: %s is a a multi-part gzip file -- get newer version of gzip\n",
        -: 2884:		    progname, ifname);
    #####: 2885:	    exit_code = ERROR;
    #####: 2886:	    if (force <= 1) return -1;
branch  0 never executed
branch  1 never executed
        -: 2887:	}
       11: 2888:	if ((flags & RESERVED) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 2889:	    fprintf(stderr,
call    0 never executed
        -: 2890:		    "%s: %s has flags 0x%x -- get newer version of gzip\n",
        -: 2891:		    progname, ifname, flags);
    #####: 2892:	    exit_code = ERROR;
    #####: 2893:	    if (force <= 1) return -1;
branch  0 never executed
branch  1 never executed
        -: 2894:	}
      11*: 2895:	time_stamp  = (ulg)get_byte();
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
      11*: 2896:	time_stamp |= ((ulg)get_byte()) << 8;
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
      11*: 2897:	time_stamp |= ((ulg)get_byte()) << 16;
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
      11*: 2898:	time_stamp |= ((ulg)get_byte()) << 24;
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
        -: 2899:	/* Not original change; set by MAPSTEXT */
       11: 2900:	time_stamp = 0;
        -: 2901:
      11*: 2902:	(void)get_byte();  /* Ignore extra flags for the moment */
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
      11*: 2903:	(void)get_byte();  /* Ignore OS type for the moment */
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
        -: 2904:
       11: 2905:	if ((flags & CONTINUATION) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 2906:	    unsigned part = (unsigned)get_byte();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2907:	    part |= ((unsigned)get_byte())<<8;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2908:	    if (verbose) {
branch  0 never executed
branch  1 never executed
    #####: 2909:		fprintf(stderr,"%s: %s: part number %u\n",
call    0 never executed
        -: 2910:			progname, ifname, part);
        -: 2911:	    }
        -: 2912:	}
       11: 2913:	if ((flags & EXTRA_FIELD) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 2914:	    unsigned len = (unsigned)get_byte();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2915:	    len |= ((unsigned)get_byte())<<8;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2916:	    if (verbose) {
branch  0 never executed
branch  1 never executed
    #####: 2917:		fprintf(stderr,"%s: %s: extra field of %u bytes ignored\n",
call    0 never executed
        -: 2918:			progname, ifname, len);
        -: 2919:	    }
    #####: 2920:	    while (len--) (void)get_byte();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2921:	}
        -: 2922:
        -: 2923:	/* Get original file name if it was truncated */
       11: 2924:	if ((flags & ORIG_NAME) != 0) {
branch  0 taken 3 (fallthrough)
branch  1 taken 8
       5*: 2925:	    if (no_name || (to_stdout && !list) || part_nb > 1) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 3 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 3
branch  6 never executed
branch  7 never executed
        -: 2926:		/* Discard the old name */
        -: 2927:		char c; /* dummy used for NeXTstep 3.0 cc optimizer bug */
    1828*: 2928:		while ((c=get_byte()) != 0) c++;
branch  0 taken 1827 (fallthrough)
branch  1 taken 1
call    2 returned 0
branch  3 taken 1825
branch  4 taken 2 (fallthrough)
        -: 2929:	    } else {
        -: 2930:		/* Copy the base name. Keep a directory prefix intact. */
    #####: 2931:                char *p = basename(ofname);
call    0 never executed
    #####: 2932:                char *base = p;
        -: 2933:		for (;;) {
    #####: 2934:		    *p = (char)get_char();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2935:		    if (*p++ == '\0') break;
branch  0 never executed
branch  1 never executed
    #####: 2936:		    if (p >= ofname+sizeof(ofname)) {
branch  0 never executed
branch  1 never executed
    #####: 2937:			error("corrupted input -- file name too large");
call    0 never executed
        -: 2938:		    }
        -: 2939:		}
        -: 2940:                /* If necessary, adapt the name to local OS conventions: */
    #####: 2941:                if (!list) {
branch  0 never executed
branch  1 never executed
        -: 2942:                   MAKE_LEGAL_NAME(base);
    #####: 2943:		   base++; /* avoid warning about unused variable */
        -: 2944:                }
        -: 2945:	    } /* no_name || to_stdout */
        -: 2946:	} /* ORIG_NAME */
        -: 2947:
        -: 2948:	/* Discard file comment if any */
       10: 2949:	if ((flags & COMMENT) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    #####: 2950:	    while (get_char() != 0) /* null */ ;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2951:	}
       10: 2952:	if (part_nb == 1) {
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 2953:	    header_bytes = inptr + 2*sizeof(long); /* include crc and size */
        -: 2954:	}
        -: 2955:
        5: 2956:    } else if (memcmp(magic, PKZIP_MAGIC, 2) == 0 && inptr == 2
branch  0 taken 2 (fallthrough)
branch  1 taken 3
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 2957:	    && memcmp((char*)inbuf, PKZIP_MAGIC, 4) == 0) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -: 2958:	/* To simplify the code, we support a zip file when alone only.
        -: 2959:         * We are thus guaranteed that the entire local header fits in inbuf.
        -: 2960:         */
        2: 2961:        inptr = 0;
        2: 2962:	work = unzip;
       2*: 2963:	if (check_zipfile(in) != OK) return -1;
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -: 2964:	/* check_zipfile may get ofname from the local header */
        2: 2965:	last_member = 1;
        -: 2966:
        3: 2967:    } else if (memcmp(magic, PACK_MAGIC, 2) == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 2968:	work = unpack;
        1: 2969:	method = PACKED;
        -: 2970:
        2: 2971:    } else if (memcmp(magic, LZW_MAGIC, 2) == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 2972:	work = unlzw;
        1: 2973:	method = COMPRESSED;
        1: 2974:	last_member = 1;
        -: 2975:
        1: 2976:    } else if (memcmp(magic, LZH_MAGIC, 2) == 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 2977:	work = unlzh;
    #####: 2978:	method = LZHED;
    #####: 2979:	last_member = 1;
        -: 2980:
       1*: 2981:    } else if (force && to_stdout) { /* pass input unchanged */
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
    #####: 2982:	method = STORED;
    #####: 2983:	work = copy;
    #####: 2984:        inptr = 0;
    #####: 2985:	last_member = 1;
        -: 2986:    }
       15: 2987:    if (method >= 0) return method;
branch  0 taken 14 (fallthrough)
branch  1 taken 1
        -: 2988:
        1: 2989:    if (part_nb == 1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 2990:	fprintf(stderr, "\n%s: %s: not in gzip format\n", progname, ifname);
call    0 never executed
    #####: 2991:	exit_code = ERROR;
    #####: 2992:	return -1;
        -: 2993:    } else {
        1: 2994:	WARN((stderr, "\n%s: %s: decompression OK, trailing garbage ignored\n",
branch  0 taken 1 (fallthrough)
branch  1 taken 0
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        -: 2995:	      progname, ifname));
        1: 2996:	return -2;
        -: 2997:    }
        -: 2998:}
        -: 2999:
        -: 3000:/* ========================================================================
        -: 3001: * Display the characteristics of the compressed file.
        -: 3002: * If the given method is < 0, display the accumulated totals.
        -: 3003: * IN assertions: time_stamp, header_bytes and ifile_size are initialized.
        -: 3004: */
function do_list called 0 returned 0% blocks executed 0%
    #####: 3005:local void do_list(ifd, method)
        -: 3006:    int ifd;     /* input file descriptor */
        -: 3007:    int method;  /* compression method */
        -: 3008:{
        -: 3009:    ulg crc;  /* original crc */
        -: 3010:    static int first_time = 1;
        -: 3011:    static char* methods[MAX_METHODS] = {
        -: 3012:        "store",  /* 0 */
        -: 3013:        "compr",  /* 1 */
        -: 3014:        "pack ",  /* 2 */
        -: 3015:        "lzh  ",  /* 3 */
        -: 3016:        "", "", "", "", /* 4 to 7 reserved */
        -: 3017:        "defla"}; /* 8 */
        -: 3018:    char *date;
        -: 3019:
    #####: 3020:    if (first_time && method >= 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3021:	first_time = 0;
    #####: 3022:	if (verbose)  {
branch  0 never executed
branch  1 never executed
    #####: 3023:	    printf("method  crc     date  time  ");
call    0 never executed
        -: 3024:	}
    #####: 3025:	if (!quiet) {
branch  0 never executed
branch  1 never executed
    #####: 3026:	    printf("compressed  uncompr. ratio uncompressed_name\n");
call    0 never executed
        -: 3027:	}
    #####: 3028:    } else if (method < 0) {
branch  0 never executed
branch  1 never executed
    #####: 3029:	if (total_in <= 0 || total_out <= 0) return;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3030:	if (verbose) {
branch  0 never executed
branch  1 never executed
    #####: 3031:	    printf("                            %9lu %9lu ",
call    0 never executed
        -: 3032:		   total_in, total_out);
    #####: 3033:	} else if (!quiet) {
branch  0 never executed
branch  1 never executed
    #####: 3034:	    printf("%9ld %9ld ", total_in, total_out);
call    0 never executed
        -: 3035:	}
    #####: 3036:	display_ratio(total_out-(total_in-header_bytes), total_out, stdout);
call    0 never executed
        -: 3037:	/* header_bytes is not meaningful but used to ensure the same
        -: 3038:	 * ratio if there is a single file.
        -: 3039:	 */
    #####: 3040:	printf(" (totals)\n");
call    0 never executed
    #####: 3041:	return;
        -: 3042:    }
    #####: 3043:    crc = ~0; /* unknown */
    #####: 3044:    bytes_out = -1L;
    #####: 3045:    bytes_in = ifile_size;
        -: 3046:
        -: 3047:#if RECORD_IO == 0
    #####: 3048:    if (method == DEFLATED && !last_member) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3049:        /* Get the crc and uncompressed size for gzip'ed (not zip'ed) files.
        -: 3050:         * If the lseek fails, we could use read() to get to the end, but
        -: 3051:         * --list is used to get quick results.
        -: 3052:         * Use "gunzip < foo.gz | wc -c" to get the uncompressed size if
        -: 3053:         * you are not concerned about speed.
        -: 3054:         */
    #####: 3055:        bytes_in = (long)lseek(ifd, (off_t)(-8), SEEK_END);
call    0 never executed
    #####: 3056:        if (bytes_in != -1L) {
branch  0 never executed
branch  1 never executed
        -: 3057:            uch buf[8];
    #####: 3058:            bytes_in += 8L;
    #####: 3059:            if (read(ifd, buf, sizeof(buf)) != sizeof(buf)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3060:                read_error();
call    0 never executed
        -: 3061:            }
    #####: 3062:            crc       = LG(buf);
    #####: 3063:	    bytes_out = LG(buf+4);
        -: 3064:	}
        -: 3065:    }
        -: 3066:#endif /* RECORD_IO */
    #####: 3067:    date = ctime(&time_stamp) + 4; /* skip the day of the week */
call    0 never executed
    #####: 3068:    date[12] = '\0';               /* suppress the 1/100sec and the year */
    #####: 3069:    if (verbose) {
branch  0 never executed
branch  1 never executed
    #####: 3070:        printf("%5s %08lx %11s ", methods[method], crc, date);
call    0 never executed
        -: 3071:    }
    #####: 3072:    printf("%9ld %9ld ", bytes_in, bytes_out);
call    0 never executed
    #####: 3073:    if (bytes_in  == -1L) {
branch  0 never executed
branch  1 never executed
    #####: 3074:	total_in = -1L;
    #####: 3075:	bytes_in = bytes_out = header_bytes = 0;
    #####: 3076:    } else if (total_in >= 0) {
branch  0 never executed
branch  1 never executed
    #####: 3077:	total_in  += bytes_in;
        -: 3078:    }
    #####: 3079:    if (bytes_out == -1L) {
branch  0 never executed
branch  1 never executed
    #####: 3080:	total_out = -1L;
    #####: 3081:	bytes_in = bytes_out = header_bytes = 0;
    #####: 3082:    } else if (total_out >= 0) {
branch  0 never executed
branch  1 never executed
    #####: 3083:	total_out += bytes_out;
        -: 3084:    }
    #####: 3085:    display_ratio(bytes_out-(bytes_in-header_bytes), bytes_out, stdout);
call    0 never executed
    #####: 3086:    printf(" %s\n", ofname);
call    0 never executed
        -: 3087:}
        -: 3088:
        -: 3089:/* ========================================================================
        -: 3090: * Return true if the two stat structures correspond to the same file.
        -: 3091: */
function same_file called 0 returned 0% blocks executed 0%
    #####: 3092:local int same_file(stat1, stat2)
        -: 3093:    struct stat *stat1;
        -: 3094:    struct stat *stat2;
        -: 3095:{
    #####: 3096:    return stat1->st_ino   == stat2->st_ino
    #####: 3097:	&& stat1->st_dev   == stat2->st_dev
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3098:#ifdef NO_ST_INO
        -: 3099:        /* Can't rely on st_ino and st_dev, use other fields: */
        -: 3100:	&& stat1->st_mode  == stat2->st_mode
        -: 3101:	&& stat1->st_uid   == stat2->st_uid
        -: 3102:	&& stat1->st_gid   == stat2->st_gid
        -: 3103:	&& stat1->st_size  == stat2->st_size
        -: 3104:	&& stat1->st_atime == stat2->st_atime
        -: 3105:	&& stat1->st_mtime == stat2->st_mtime
        -: 3106:	&& stat1->st_ctime == stat2->st_ctime
        -: 3107:#endif
        -: 3108:	    ;
        -: 3109:}
        -: 3110:
        -: 3111:/* ========================================================================
        -: 3112: * Return true if a file name is ambiguous because the operating system
        -: 3113: * truncates file names.
        -: 3114: */
function name_too_long called 0 returned 0% blocks executed 0%
    #####: 3115:local int name_too_long(name, statb)
        -: 3116:    char *name;           /* file name to check */
        -: 3117:    struct stat *statb;   /* stat buf for this file name */
        -: 3118:{
    #####: 3119:    int s = strlen(name);
    #####: 3120:    char c = name[s-1];
        -: 3121:    struct stat	tstat; /* stat for truncated name */
        -: 3122:    int res;
        -: 3123:
    #####: 3124:    tstat = *statb;      /* Just in case OS does not fill all fields */
    #####: 3125:    name[s-1] = '\0';
    #####: 3126:    res = stat(name, &tstat) == 0 && same_file(statb, &tstat);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3127:    name[s-1] = c;
        -: 3128:    Trace((stderr, " too_long(%s) => %d\n", name, res));
    #####: 3129:    return res;
        -: 3130:}
        -: 3131:
        -: 3132:/* ========================================================================
        -: 3133: * Shorten the given name by one character, or replace a .tar extension
        -: 3134: * with .tgz. Truncate the last part of the name which is longer than
        -: 3135: * MIN_PART characters: 1234.678.012.gz -> 123.678.012.gz. If the name
        -: 3136: * has only parts shorter than MIN_PART truncate the longest part.
        -: 3137: *
        -: 3138: * IN assertion: This function is only called for the compressed file;
        -: 3139: * the suffix of the given name is z_suffix.
        -: 3140: */
function shorten_name called 0 returned 0% blocks executed 0%
    #####: 3141:local void shorten_name(name)
        -: 3142:    char *name;
        -: 3143:{
        -: 3144:    int len;                 /* length of name without z_suffix */
    #####: 3145:    char *trunc = NULL;      /* character to be truncated */
        -: 3146:    int plen;                /* current part length */
    #####: 3147:    int min_part = MIN_PART; /* current minimum part length */
        -: 3148:    char *p;
        -: 3149:
    #####: 3150:    p = get_suffix(name);
call    0 never executed
    #####: 3151:    if (p == NULL) error("can't recover suffix\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3152:    *p = '\0';
    #####: 3153:    len = strlen(name);
    #####: 3154:    save_orig_name = 1;
        -: 3155:
        -: 3156:    /* compress 1234567890.tar to 1234567890.tgz */
    #####: 3157:    if (len > 4 && strequ(p-4, ".tar")) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3158:	strcpy(p-4, ".tgz");
    #####: 3159:	return;
        -: 3160:    }
        -: 3161:    /* Try keeping short extensions intact:
        -: 3162:     * 1234.678.012.gz -> 123.678.012.gz
        -: 3163:     */
        -: 3164:    do {
    #####: 3165:	p = strrchr(name, PATH_SEP);
    #####: 3166:	p = p ? p+1 : name;
branch  0 never executed
branch  1 never executed
    #####: 3167:	while (*p) {
branch  0 never executed
branch  1 never executed
    #####: 3168:	    plen = strcspn(p, PART_SEP);
    #####: 3169:	    p += plen;
    #####: 3170:	    if (plen > min_part) trunc = p-1;
branch  0 never executed
branch  1 never executed
    #####: 3171:	    if (*p) p++;
branch  0 never executed
branch  1 never executed
        -: 3172:	}
    #####: 3173:    } while (trunc == NULL && --min_part != 0);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3174:
    #####: 3175:    if (trunc != NULL) {
branch  0 never executed
branch  1 never executed
        -: 3176:	do {
    #####: 3177:	    trunc[0] = trunc[1];
    #####: 3178:	} while (*trunc++);
branch  0 never executed
branch  1 never executed
    #####: 3179:	trunc--;
        -: 3180:    } else {
    #####: 3181:	trunc = strrchr(name, PART_SEP[0]);
    #####: 3182:	if (trunc == NULL) error("internal error in shorten_name");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3183:	if (trunc[1] == '\0') trunc--; /* force truncation */
branch  0 never executed
branch  1 never executed
        -: 3184:    }
    #####: 3185:    strcpy(trunc, z_suffix);
        -: 3186:}
        -: 3187:
        -: 3188:/* ========================================================================
        -: 3189: * If compressing to a file, check if ofname is not ambiguous
        -: 3190: * because the operating system truncates names. Otherwise, generate
        -: 3191: * a new ofname and save the original name in the compressed file.
        -: 3192: * If the compressed file already exists, ask for confirmation.
        -: 3193: *    The check for name truncation is made dynamically, because different
        -: 3194: * file systems on the same OS might use different truncation rules (on SVR4
        -: 3195: * s5 truncates to 14 chars and ufs does not truncate).
        -: 3196: *    This function returns -1 if the file must be skipped, and
        -: 3197: * updates save_orig_name if necessary.
        -: 3198: * IN assertions: save_orig_name is already set if ofname has been
        -: 3199: * already truncated because of NO_MULTIPLE_DOTS. The input file has
        -: 3200: * already been open and istat is set.
        -: 3201: */
function check_ofname called 0 returned 0% blocks executed 0%
    #####: 3202:local int check_ofname()
        -: 3203:{
        -: 3204:    struct stat	ostat; /* stat for ofname */
        -: 3205:
    #####: 3206:    if (stat(ofname, &ostat) != 0) return 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3207:
        -: 3208:    /* Check for name truncation on existing file: */
    #####: 3209:    if (!decompress && name_too_long(ofname, &ostat)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 3210:#ifdef FAULTY_F_TW_1
        -: 3211:	save_orig_name = -1;
        -: 3212:#else
    #####: 3213:	shorten_name(ofname);
call    0 never executed
        -: 3214:#endif
    #####: 3215:	if (stat(ofname, &ostat) != 0) return 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3216:    }
        -: 3217:
        -: 3218:    /* Check that the input and output files are different (could be
        -: 3219:     * the same by name truncation or links).
        -: 3220:     */
    #####: 3221:    if (same_file(&istat, &ostat)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3222:	fprintf(stderr, "%s: %s and %s are the same file\n",
call    0 never executed
        -: 3223:		progname, ifname, ofname);
    #####: 3224:	exit_code = ERROR;
    #####: 3225:	return ERROR;
        -: 3226:    }
        -: 3227:    /* Ask permission to overwrite the existing file */
    #####: 3228:    if (!force) {
branch  0 never executed
branch  1 never executed
        -: 3229:	char response[80];
    #####: 3230:	strcpy(response,"n");
    #####: 3231:	fprintf(stderr, "%s: %s already exists;", progname, ofname);
call    0 never executed
    #####: 3232:	if (foreground && isatty(fileno(stdin))) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3233:	    fprintf(stderr, " do you wish to overwrite (y or n)? ");
call    0 never executed
    #####: 3234:	    fflush(stderr);
call    0 never executed
    #####: 3235:	    (void)fgets(response, sizeof(response)-1, stdin);
call    0 never executed
        -: 3236:	}
    #####: 3237:	if (tolow(*response) != 'y') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3238:	    fprintf(stderr, "\tnot overwritten\n");
call    0 never executed
    #####: 3239:	    if (exit_code == OK) exit_code = WARNING;
branch  0 never executed
branch  1 never executed
    #####: 3240:	    return ERROR;
        -: 3241:	}
        -: 3242:    }
    #####: 3243:    (void) chmod(ofname, 0777);
call    0 never executed
    #####: 3244:    if (unlink(ofname)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3245:	fprintf(stderr, "%s: ", progname);
call    0 never executed
    #####: 3246:	perror(ofname);
call    0 never executed
    #####: 3247:	exit_code = ERROR;
    #####: 3248:	return ERROR;
        -: 3249:    }
    #####: 3250:    return OK;
        -: 3251:}
        -: 3252:
        -: 3253:
        -: 3254:/* ========================================================================
        -: 3255: * Set the access and modification times from the given stat buffer.
        -: 3256: */
function reset_times called 3 returned 100% blocks executed 30%
        3: 3257:local void reset_times (name, statb)
        -: 3258:    char *name;
        -: 3259:    struct stat *statb;
        -: 3260:{
        -: 3261:#ifndef NO_UTIME
        -: 3262:    struct utimbuf	timep;
        -: 3263:
        -: 3264:    /* Copy the time stamp */
        3: 3265:    timep.actime  = statb->st_atime;
        3: 3266:    timep.modtime = statb->st_mtime;
        -: 3267:
        -: 3268:    /* Some systems (at least OS/2) do not support utime on directories */
       3*: 3269:    if (utime(name, &timep) && !S_ISDIR(statb->st_mode)) {
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
branch  3 never executed
branch  4 never executed
    #####: 3270:	WARN((stderr, "%s: ", progname));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3271:	if (!quiet) perror(ofname);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 3272:    }
        -: 3273:#else
        -: 3274:    name = name; statb = statb; /* avoid warnings */
        -: 3275:#endif
        3: 3276:}
        -: 3277:
        -: 3278:
        -: 3279:/* ========================================================================
        -: 3280: * Copy modes, times, ownership from input file to output file.
        -: 3281: * IN assertion: to_stdout is false.
        -: 3282: */
function copy_stat called 0 returned 0% blocks executed 0%
    #####: 3283:local void copy_stat(ifstat)
        -: 3284:    struct stat *ifstat;
        -: 3285:{
        -: 3286:#ifndef NO_UTIME
    #####: 3287:    if (decompress && time_stamp != 0 && ifstat->st_mtime != time_stamp) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3288:	ifstat->st_mtime = time_stamp;
    #####: 3289:	if (verbose) {
branch  0 never executed
branch  1 never executed
    #####: 3290:	    fprintf(stderr, "%s: time stamp restored\n", ofname);
call    0 never executed
        -: 3291:	}
        -: 3292:    }
    #####: 3293:    reset_times(ofname, ifstat);
call    0 never executed
        -: 3294:#endif
        -: 3295:    /* Copy the protection modes */
    #####: 3296:    if (chmod(ofname, ifstat->st_mode & 07777)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3297:	WARN((stderr, "%s: ", progname));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3298:	if (!quiet) perror(ofname);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 3299:    }
        -: 3300:#ifndef NO_CHOWN
    #####: 3301:    chown(ofname, ifstat->st_uid, ifstat->st_gid);  /* Copy ownership */
call    0 never executed
        -: 3302:#endif
    #####: 3303:    remove_ofname = 0;
        -: 3304:    /* It's now safe to remove the input file: */
    #####: 3305:    (void) chmod(ifname, 0777);
call    0 never executed
    #####: 3306:    if (unlink(ifname)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3307:	WARN((stderr, "%s: ", progname));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3308:	if (!quiet) perror(ifname);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 3309:    }
    #####: 3310:}
        -: 3311:
        -: 3312:#ifndef NO_DIR
        -: 3313:
        -: 3314:/* ========================================================================
        -: 3315: * Recurse through the given directory. This code is taken from ncompress.
        -: 3316: */
function treat_dir called 3 returned 100% blocks executed 79%
        3: 3317:local void treat_dir(dir)
        -: 3318:    char *dir;
        -: 3319:{
        -: 3320:    dir_type *dp;
        -: 3321:    DIR      *dirp;
        -: 3322:    char     nbuf[MAX_PATH_LEN];
        -: 3323:    int      len;
        -: 3324:
        3: 3325:    dirp = opendir(dir);
call    0 returned 3
        -: 3326:    
        3: 3327:    if (dirp == NULL) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 3328:	fprintf(stderr, "%s: %s unreadable\n", progname, dir);
call    0 never executed
    #####: 3329:	exit_code = ERROR;
    #####: 3330:	return ;
        -: 3331:    }
        -: 3332:    /*
        -: 3333:     ** WARNING: the following algorithm could occasionally cause
        -: 3334:     ** compress to produce error warnings of the form "<filename>.gz
        -: 3335:     ** already has .gz suffix - ignored". This occurs when the
        -: 3336:     ** .gz output file is inserted into the directory below
        -: 3337:     ** readdir's current pointer.
        -: 3338:     ** These warnings are harmless but annoying, so they are suppressed
        -: 3339:     ** with option -r (except when -v is on). An alternative
        -: 3340:     ** to allowing this would be to store the entire directory
        -: 3341:     ** list in memory, then compress the entries in the stored
        -: 3342:     ** list. Given the depth-first recursive algorithm used here,
        -: 3343:     ** this could use up a tremendous amount of memory. I don't
        -: 3344:     ** think it's worth it. -- Dave Mack
        -: 3345:     ** (An other alternative might be two passes to avoid depth-first.)
        -: 3346:     */
        -: 3347:    
       12: 3348:    while ((dp = readdir(dirp)) != NULL) {
call    0 returned 12
branch  1 taken 9
branch  2 taken 3 (fallthrough)
        -: 3349:
        9: 3350:	if (strequ(dp->d_name,".") || strequ(dp->d_name,"..")) {
branch  0 taken 6 (fallthrough)
branch  1 taken 3
branch  2 taken 3 (fallthrough)
branch  3 taken 3
        6: 3351:	    continue;
        -: 3352:	}
        3: 3353:	len = strlen(dir);
        3: 3354:	if (len + NLENGTH(dp) + 1 < MAX_PATH_LEN - 1) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3355:	    strcpy(nbuf,dir);
        3: 3356:	    if (len != 0 /* dir = "" means current dir on Amiga */
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 3357:#ifdef PATH_SEP2
        -: 3358:		&& dir[len-1] != PATH_SEP2
        -: 3359:#endif
        -: 3360:#ifdef PATH_SEP3
        -: 3361:		&& dir[len-1] != PATH_SEP3
        -: 3362:#endif
        -: 3363:	    ) {
        3: 3364:		nbuf[len++] = PATH_SEP;
        -: 3365:	    }
        3: 3366:	    strcpy(nbuf+len, dp->d_name);
        3: 3367:	    treat_file(nbuf);
call    0 returned 3
        -: 3368:	} else {
    #####: 3369:	    fprintf(stderr,"%s: %s/%s: pathname too long\n",
    #####: 3370:		    progname, dir, dp->d_name);
call    0 never executed
    #####: 3371:	    exit_code = ERROR;
        -: 3372:	}
        -: 3373:    }
        3: 3374:    closedir(dirp);
call    0 returned 3
        -: 3375:}
        -: 3376:#endif /* ? NO_DIR */
        -: 3377:
        -: 3378:/* ========================================================================
        -: 3379: * Free all dynamically allocated variables and exit with the given code.
        -: 3380: */
function do_exit called 214 returned 0% blocks executed 60%
      214: 3381:local void do_exit(exitcode)
        -: 3382:    int exitcode;
        -: 3383:{
     214*: 3384:    if (env != NULL)  free(env),  env  = NULL;
branch  0 taken 0 (fallthrough)
branch  1 taken 214
     214*: 3385:    if (args != NULL) free((char*)args), args = NULL;
branch  0 taken 0 (fallthrough)
branch  1 taken 214
        -: 3386:    FREE(inbuf);
        -: 3387:    FREE(outbuf);
        -: 3388:    FREE(d_buf);
        -: 3389:    FREE(window);
        -: 3390:#ifndef MAXSEG_64K
        -: 3391:    FREE(tab_prefix);
        -: 3392:#else
        -: 3393:    FREE(tab_prefix0);
        -: 3394:    FREE(tab_prefix1);
        -: 3395:#endif
      214: 3396:    exit(exitcode);
        -: 3397:}
        -: 3398:
        -: 3399:/* ========================================================================
        -: 3400: * Signal and error handler.
        -: 3401: */
function abort_gzip called 1 returned 0% blocks executed 60%
        1: 3402:RETSIGTYPE abort_gzip()
        -: 3403:{
        1: 3404:   if (remove_ofname) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3405:       close(ofd);
call    0 never executed
    #####: 3406:       unlink (ofname);
call    0 never executed
        -: 3407:   }
        1: 3408:   do_exit(ERROR);
call    0 returned 0
    #####: 3409:}
        -: 3410:/* inflate.c -- Not copyrighted 1992 by Mark Adler
        -: 3411:   version c10p1, 10 January 1993 */
        -: 3412:
        -: 3413:/* You can do whatever you like with this source file, though I would
        -: 3414:   prefer that if you modify it and redistribute it that you include
        -: 3415:   comments to that effect with your name and the date.  Thank you.
        -: 3416:   [The history has been moved to the file ChangeLog.]
        -: 3417: */
        -: 3418:
        -: 3419:/*
        -: 3420:   Inflate deflated (PKZIP's method 8 compressed) data.  The compression
        -: 3421:   method searches for as much of the current string of bytes (up to a
        -: 3422:   length of 258) in the previous 32K bytes.  If it doesn't find any
        -: 3423:   matches (of at least length 3), it codes the next byte.  Otherwise, it
        -: 3424:   codes the length of the matched string and its distance backwards from
        -: 3425:   the current position.  There is a single Huffman code that codes both
        -: 3426:   single bytes (called "literals") and match lengths.  A second Huffman
        -: 3427:   code codes the distance information, which follows a length code.  Each
        -: 3428:   length or distance code actually represents a base value and a number
        -: 3429:   of "extra" (sometimes zero) bits to get to add to the base value.  At
        -: 3430:   the end of each deflated block is a special end-of-block (EOB) literal/
        -: 3431:   length code.  The decoding process is basically: get a literal/length
        -: 3432:   code; if EOB then done; if a literal, emit the decoded byte; if a
        -: 3433:   length then get the distance and emit the referred-to bytes from the
        -: 3434:   sliding window of previously emitted data.
        -: 3435:
        -: 3436:   There are (currently) three kinds of inflate blocks: stored, fixed, and
        -: 3437:   dynamic.  The compressor deals with some chunk of data at a time, and
        -: 3438:   decides which method to use on a chunk-by-chunk basis.  A chunk might
        -: 3439:   typically be 32K or 64K.  If the chunk is uncompressible, then the
        -: 3440:   "stored" method is used.  In this case, the bytes are simply stored as
        -: 3441:   is, eight bits per byte, with none of the above coding.  The bytes are
        -: 3442:   preceded by a count, since there is no longer an EOB code.
        -: 3443:
        -: 3444:   If the data is compressible, then either the fixed or dynamic methods
        -: 3445:   are used.  In the dynamic method, the compressed data is preceded by
        -: 3446:   an encoding of the literal/length and distance Huffman codes that are
        -: 3447:   to be used to decode this block.  The representation is itself Huffman
        -: 3448:   coded, and so is preceded by a description of that code.  These code
        -: 3449:   descriptions take up a little space, and so for small blocks, there is
        -: 3450:   a predefined set of codes, called the fixed codes.  The fixed method is
        -: 3451:   used if the block codes up smaller that way (usually for quite small
        -: 3452:   chunks), otherwise the dynamic method is used.  In the latter case, the
        -: 3453:   codes are customized to the probabilities in the current block, and so
        -: 3454:   can code it much better than the pre-determined fixed codes.
        -: 3455: 
        -: 3456:   The Huffman codes themselves are decoded using a mutli-level table
        -: 3457:   lookup, in order to maximize the speed of decoding plus the speed of
        -: 3458:   building the decoding tables.  See the comments below that precede the
        -: 3459:   lbits and dbits tuning parameters.
        -: 3460: */
        -: 3461:
        -: 3462:
        -: 3463:/*
        -: 3464:   Notes beyond the 1.93a appnote.txt:
        -: 3465:
        -: 3466:   1. Distance pointers never point before the beginning of the output
        -: 3467:      stream.
        -: 3468:   2. Distance pointers can point back across blocks, up to 32k away.
        -: 3469:   3. There is an implied maximum of 7 bits for the bit length table and
        -: 3470:      15 bits for the actual data.
        -: 3471:   4. If only one code exists, then it is encoded using one bit.  (Zero
        -: 3472:      would be more efficient, but perhaps a little confusing.)  If two
        -: 3473:      codes exist, they are coded using one bit each (0 and 1).
        -: 3474:   5. There is no way of sending zero distance codes--a dummy must be
        -: 3475:      sent if there are none.  (History: a pre 2.0 version of PKZIP would
        -: 3476:      store blocks with no distance codes, but this was discovered to be
        -: 3477:      too harsh a criterion.)  Valid only for 1.93a.  2.04c does allow
        -: 3478:      zero distance codes, which is sent as one code of zero bits in
        -: 3479:      length.
        -: 3480:   6. There are up to 286 literal/length codes.  Code 256 represents the
        -: 3481:      end-of-block.  Note however that the static length tree defines
        -: 3482:      288 codes just to fill out the Huffman codes.  Codes 286 and 287
        -: 3483:      cannot be used though, since there is no length base or extra bits
        -: 3484:      defined for them.  Similarly, there are up to 30 distance codes.
        -: 3485:      However, static trees define 32 codes (all 5 bits) to fill out the
        -: 3486:      Huffman codes, but the last two had better not show up in the data.
        -: 3487:   7. Unzip can check dynamic Huffman blocks for complete code sets.
        -: 3488:      The exception is that a single code would not be complete (see #4).
        -: 3489:   8. The five bits following the block type is really the number of
        -: 3490:      literal codes sent minus 257.
        -: 3491:   9. Length codes 8,16,16 are interpreted as 13 length codes of 8 bits
        -: 3492:      (1+6+6).  Therefore, to output three times the length, you output
        -: 3493:      three codes (1+1+1), whereas to output four times the same length,
        -: 3494:      you only need two codes (1+3).  Hmm.
        -: 3495:  10. In the tree reconstruction algorithm, Code = Code + Increment
        -: 3496:      only if BitLength(i) is not zero.  (Pretty obvious.)
        -: 3497:  11. Correction: 4 Bits: # of Bit Length codes - 4     (4 - 19)
        -: 3498:  12. Note: length code 284 can represent 227-258, but length code 285
        -: 3499:      really is 258.  The last length deserves its own, short code
        -: 3500:      since it gets used a lot in very redundant files.  The length
        -: 3501:      258 is special since 258 - 3 (the min match length) is 255.
        -: 3502:  13. The literal/length and distance code bit lengths are read as a
        -: 3503:      single stream of lengths.  It is possible (and advantageous) for
        -: 3504:      a repeat code (16, 17, or 18) to go across the boundary between
        -: 3505:      the two sets of lengths.
        -: 3506: */
        -: 3507:
        -: 3508:/*
        -: 3509:#ifndef lint
        -: 3510:static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 13:27:04 jloup Exp $";
        -: 3511:#endif
        -: 3512:*/
        -: 3513:
        -: 3514:#if defined(STDC_HEADERS) || !defined(NO_STDLIB_H)
        -: 3515:#  include <stdlib.h>
        -: 3516:#endif
        -: 3517:
        -: 3518:#define slide window
        -: 3519:
        -: 3520:/* Huffman code lookup table entry--this entry is four bytes for machines
        -: 3521:   that have 16-bit pointers (e.g. PC's in the small or medium model).
        -: 3522:   Valid extra bits are 0..13.  e == 15 is EOB (end of block), e == 16
        -: 3523:   means that v is a literal, 16 < e < 32 means that v is a pointer to
        -: 3524:   the next table, which codes e - 16 bits, and lastly e == 99 indicates
        -: 3525:   an unused code.  If a code with e == 99 is looked up, this implies an
        -: 3526:   error in the data. */
        -: 3527:struct huft {
        -: 3528:  uch e;                /* number of extra bits or operation */
        -: 3529:  uch b;                /* number of bits in this code or subcode */
        -: 3530:  union {
        -: 3531:    ush n;              /* literal, length base, or distance base */
        -: 3532:    struct huft *t;     /* pointer to next level of table */
        -: 3533:  } v;
        -: 3534:};
        -: 3535:
        -: 3536:
        -: 3537:/* Function prototypes */
        -: 3538:int huft_build OF((unsigned *, unsigned, unsigned, ush *, ush *,
        -: 3539:                   struct huft **, int *));
        -: 3540:int huft_free OF((struct huft *));
        -: 3541:int inflate_codes OF((struct huft *, struct huft *, int, int));
        -: 3542:int inflate_stored OF((void));
        -: 3543:int inflate_fixed OF((void));
        -: 3544:int inflate_dynamic OF((void));
        -: 3545:int inflate_block OF((int *));
        -: 3546:int inflate OF((void));
        -: 3547:
        -: 3548:
        -: 3549:/* The inflate algorithm uses a sliding 32K byte window on the uncompressed
        -: 3550:   stream to find repeated byte strings.  This is implemented here as a
        -: 3551:   circular buffer.  The index is updated simply by incrementing and then
        -: 3552:   and'ing with 0x7fff (32K-1). */
        -: 3553:/* It is left to other modules to supply the 32K area.  It is assumed
        -: 3554:   to be usable as if it were declared "uch slide[32768];" or as just
        -: 3555:   "uch *slide;" and then malloc'ed in the latter case.  The definition
        -: 3556:   must be in unzip.h, included above. */
        -: 3557:/* unsigned wp;             current position in slide */
        -: 3558:#define wp outcnt
        -: 3559:#define flush_output(w) (wp=(w),flush_window())
        -: 3560:
        -: 3561:/* Tables for deflate from PKZIP's appnote.txt. */
        -: 3562:static unsigned border[] = {    /* Order of the bit length code lengths */
        -: 3563:        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
        -: 3564:static ush cplens[] = {         /* Copy lengths for literal codes 257..285 */
        -: 3565:        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
        -: 3566:        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
        -: 3567:        /* note: see note #13 above about the 258 in this list. */
        -: 3568:static ush cplext[] = {         /* Extra bits for literal codes 257..285 */
        -: 3569:        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
        -: 3570:        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
        -: 3571:static ush cpdist[] = {         /* Copy offsets for distance codes 0..29 */
        -: 3572:        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
        -: 3573:        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
        -: 3574:        8193, 12289, 16385, 24577};
        -: 3575:static ush cpdext[] = {         /* Extra bits for distance codes */
        -: 3576:        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
        -: 3577:        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
        -: 3578:        12, 12, 13, 13};
        -: 3579:
        -: 3580:
        -: 3581:
        -: 3582:/* Macros for inflate() bit peeking and grabbing.
        -: 3583:   The usage is:
        -: 3584:   
        -: 3585:        NEEDBITS(j)
        -: 3586:        x = b & mask_bits[j];
        -: 3587:        DUMPBITS(j)
        -: 3588:
        -: 3589:   where NEEDBITS makes sure that b has at least j bits in it, and
        -: 3590:   DUMPBITS removes the bits from b.  The macros use the variable k
        -: 3591:   for the number of bits in b.  Normally, b and k are register
        -: 3592:   variables for speed, and are initialized at the beginning of a
        -: 3593:   routine that uses these macros from a global bit buffer and count.
        -: 3594:
        -: 3595:   If we assume that EOB will be the longest code, then we will never
        -: 3596:   ask for bits with NEEDBITS that are beyond the end of the stream.
        -: 3597:   So, NEEDBITS should not read any more bytes than are needed to
        -: 3598:   meet the request.  Then no bytes need to be "returned" to the buffer
        -: 3599:   at the end of the last block.
        -: 3600:
        -: 3601:   However, this assumption is not true for fixed blocks--the EOB code
        -: 3602:   is 7 bits, but the other literal/length codes can be 8 or 9 bits.
        -: 3603:   (The EOB code is shorter than other codes because fixed blocks are
        -: 3604:   generally short.  So, while a block always has an EOB, many other
        -: 3605:   literal/length codes have a significantly lower probability of
        -: 3606:   showing up at all.)  However, by making the first table have a
        -: 3607:   lookup of seven bits, the EOB code will be found in that first
        -: 3608:   lookup, and so will not require that too many bits be pulled from
        -: 3609:   the stream.
        -: 3610: */
        -: 3611:
        -: 3612:ulg bb;                         /* bit buffer */
        -: 3613:unsigned bk;                    /* bits in bit buffer */
        -: 3614:
        -: 3615:ush mask_bits[] = {
        -: 3616:    0x0000,
        -: 3617:    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
        -: 3618:    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
        -: 3619:};
        -: 3620:
        -: 3621:#ifdef CRYPT
        -: 3622:  uch cc;
        -: 3623:#  define NEXTBYTE() \
        -: 3624:     (decrypt ? (cc = get_byte(), zdecode(cc), cc) : get_byte())
        -: 3625:#else
        -: 3626:#  define NEXTBYTE()  (uch)get_byte()
        -: 3627:#endif
        -: 3628:#define NEEDBITS(n) {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=8;}}
        -: 3629:#define DUMPBITS(n) {b>>=(n);k-=(n);}
        -: 3630:
        -: 3631:
        -: 3632:/*
        -: 3633:   Huffman code decoding is performed using a multi-level table lookup.
        -: 3634:   The fastest way to decode is to simply build a lookup table whose
        -: 3635:   size is determined by the longest code.  However, the time it takes
        -: 3636:   to build this table can also be a factor if the data being decoded
        -: 3637:   is not very long.  The most common codes are necessarily the
        -: 3638:   shortest codes, so those codes dominate the decoding time, and hence
        -: 3639:   the speed.  The idea is you can have a shorter table that decodes the
        -: 3640:   shorter, more probable codes, and then point to subsidiary tables for
        -: 3641:   the longer codes.  The time it costs to decode the longer codes is
        -: 3642:   then traded against the time it takes to make longer tables.
        -: 3643:
        -: 3644:   This results of this trade are in the variables lbits and dbits
        -: 3645:   below.  lbits is the number of bits the first level table for literal/
        -: 3646:   length codes can decode in one step, and dbits is the same thing for
        -: 3647:   the distance codes.  Subsequent tables are also less than or equal to
        -: 3648:   those sizes.  These values may be adjusted either when all of the
        -: 3649:   codes are shorter than that, in which case the longest code length in
        -: 3650:   bits is used, or when the shortest code is *longer* than the requested
        -: 3651:   table size, in which case the length of the shortest code in bits is
        -: 3652:   used.
        -: 3653:
        -: 3654:   There are two different values for the two tables, since they code a
        -: 3655:   different number of possibilities each.  The literal/length table
        -: 3656:   codes 286 possible values, or in a flat code, a little over eight
        -: 3657:   bits.  The distance table codes 30 possible values, or a little less
        -: 3658:   than five bits, flat.  The optimum values for speed end up being
        -: 3659:   about one bit more than those, so lbits is 8+1 and dbits is 5+1.
        -: 3660:   The optimum values may differ though from machine to machine, and
        -: 3661:   possibly even between compilers.  Your mileage may vary.
        -: 3662: */
        -: 3663:
        -: 3664:
        -: 3665:int lbits = 9;          /* bits in base literal/length lookup table */
        -: 3666:int dbits = 6;          /* bits in base distance lookup table */
        -: 3667:
        -: 3668:
        -: 3669:/* If BMAX needs to be larger than 16, then h and x[] should be ulg. */
        -: 3670:#define BMAX 16         /* maximum bit length of any code (16 for explode) */
        -: 3671:#define N_MAX 288       /* maximum number of codes in any set */
        -: 3672:
        -: 3673:
        -: 3674:unsigned hufts;         /* track memory usage */
        -: 3675:
        -: 3676:
function huft_build called 36 returned 100% blocks executed 87%
       36: 3677:int huft_build(b, n, s, d, e, t, m)
        -: 3678:unsigned *b;            /* code lengths in bits (all assumed <= BMAX) */
        -: 3679:unsigned n;             /* number of codes (assumed <= N_MAX) */
        -: 3680:unsigned s;             /* number of simple-valued codes (0..s-1) */
        -: 3681:ush *d;                 /* list of base values for non-simple codes */
        -: 3682:ush *e;                 /* list of extra bits for non-simple codes */
        -: 3683:struct huft **t;        /* result: starting table */
        -: 3684:int *m;                 /* maximum lookup bits, returns actual */
        -: 3685:/* Given a list of code lengths and a maximum table size, make a set of
        -: 3686:   tables to decode that set of codes.  Return zero on success, one if
        -: 3687:   the given code set is incomplete (the tables are still built in this
        -: 3688:   case), two if the input is invalid (all zero length codes or an
        -: 3689:   oversubscribed set of lengths), and three if not enough memory. */
        -: 3690:{
        -: 3691:  unsigned a;                   /* counter for codes of length k */
        -: 3692:  unsigned c[BMAX+1];           /* bit length count table */
        -: 3693:  unsigned f;                   /* i repeats in table every f entries */
        -: 3694:  int g;                        /* maximum code length */
        -: 3695:  int h;                        /* table level */
        -: 3696:  register unsigned i;          /* counter, current code */
        -: 3697:  register unsigned j;          /* counter */
        -: 3698:  register int k;               /* number of bits in current code */
        -: 3699:  int l;                        /* bits per table (returned in m) */
        -: 3700:  register unsigned *p;         /* pointer into c[], b[], or v[] */
        -: 3701:  register struct huft *q;      /* points to current table */
        -: 3702:  struct huft r;                /* table entry for structure assignment */
        -: 3703:  struct huft *u[BMAX];         /* table stack */
        -: 3704:  unsigned v[N_MAX];            /* values in order of bit length */
        -: 3705:  register int w;               /* bits before this table == (l * h) */
        -: 3706:  unsigned x[BMAX+1];           /* bit offsets, then code stack */
        -: 3707:  unsigned *xp;                 /* pointer into x */
        -: 3708:  int y;                        /* number of dummy codes added */
        -: 3709:  unsigned z;                   /* number of entries in current table */
        -: 3710:
        -: 3711:
        -: 3712:  /* Generate counts for each bit length */
       36: 3713:  memzero(c, sizeof(c));
       36: 3714:  p = b;  i = n;
        -: 3715:  do {
        -: 3716:    Tracecv(*p, (stderr, (n-i >= ' ' && n-i <= '~' ? "%c %d\n" : "0x%x %d\n"), 
        -: 3717:	    n-i, *p));
     4019: 3718:    c[*p++]++;                  /* assume all entries <= BMAX */
     4019: 3719:  } while (--i);
branch  0 taken 3983
branch  1 taken 36 (fallthrough)
       36: 3720:  if (c[0] == n)                /* null input--all zero length codes */
branch  0 taken 0 (fallthrough)
branch  1 taken 36
        -: 3721:  {
    #####: 3722:    *t = (struct huft *)NULL;
    #####: 3723:    *m = 0;
    #####: 3724:    return 0;
        -: 3725:  }
        -: 3726:
        -: 3727:
        -: 3728:  /* Find minimum and maximum length, bound *m by those */
       36: 3729:  l = *m;
      121: 3730:  for (j = 1; j <= BMAX; j++)
branch  0 taken 121
branch  1 taken 0 (fallthrough)
      121: 3731:    if (c[j])
branch  0 taken 36 (fallthrough)
branch  1 taken 85
       36: 3732:      break;
       36: 3733:  k = j;                        /* minimum code length */
       36: 3734:  if ((unsigned)l < j)
branch  0 taken 0 (fallthrough)
branch  1 taken 36
    #####: 3735:    l = j;
      252: 3736:  for (i = BMAX; i; i--)
branch  0 taken 252
branch  1 taken 0 (fallthrough)
      252: 3737:    if (c[i])
branch  0 taken 36 (fallthrough)
branch  1 taken 216
       36: 3738:      break;
       36: 3739:  g = i;                        /* maximum code length */
       36: 3740:  if ((unsigned)l > i)
branch  0 taken 11 (fallthrough)
branch  1 taken 25
       11: 3741:    l = i;
       36: 3742:  *m = l;
        -: 3743:
        -: 3744:
        -: 3745:  /* Adjust last length count to fill out codes, if needed */
      275: 3746:  for (y = 1 << j; j < i; j++, y <<= 1)
branch  0 taken 239
branch  1 taken 36 (fallthrough)
      239: 3747:    if ((y -= c[j]) < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 239
    #####: 3748:      return 2;                 /* bad input: more codes than bits */
       36: 3749:  if ((y -= c[i]) < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 36
    #####: 3750:    return 2;
       36: 3751:  c[i] += y;
        -: 3752:
        -: 3753:
        -: 3754:  /* Generate starting offsets into the value table for each length */
       36: 3755:  x[1] = j = 0;
       36: 3756:  p = c + 1;  xp = x + 2;
      360: 3757:  while (--i) {                 /* note that i == g from above */
branch  0 taken 324
branch  1 taken 36 (fallthrough)
      324: 3758:    *xp++ = (j += *p++);
        -: 3759:  }
        -: 3760:
        -: 3761:
        -: 3762:  /* Make a table of values in order of bit lengths */
       36: 3763:  p = b;  i = 0;
        -: 3764:  do {
     4019: 3765:    if ((j = *p++) != 0)
branch  0 taken 1888 (fallthrough)
branch  1 taken 2131
     1888: 3766:      v[x[j]++] = i;
     4019: 3767:  } while (++i < n);
branch  0 taken 3983
branch  1 taken 36 (fallthrough)
        -: 3768:
        -: 3769:
        -: 3770:  /* Generate the Huffman codes and for each, make the table entries */
       36: 3771:  x[0] = i = 0;                 /* first Huffman code is zero */
       36: 3772:  p = v;                        /* grab values in bit order */
       36: 3773:  h = -1;                       /* no tables yet--level -1 */
       36: 3774:  w = -l;                       /* bits decoded == (l * h) */
       36: 3775:  u[0] = (struct huft *)NULL;   /* just to keep compilers happy */
       36: 3776:  q = (struct huft *)NULL;      /* ditto */
       36: 3777:  z = 0;                        /* ditto */
        -: 3778:
        -: 3779:  /* go through the bit lengths (k already is bits in shortest code) */
      311: 3780:  for (; k <= g; k++)
branch  0 taken 275
branch  1 taken 36 (fallthrough)
        -: 3781:  {
      275: 3782:    a = c[k];
     2163: 3783:    while (a--)
branch  0 taken 1888
branch  1 taken 275 (fallthrough)
        -: 3784:    {
        -: 3785:      /* here i is the Huffman code of length k bits for value *p */
        -: 3786:      /* make tables up to required level */
     2056: 3787:      while (k > w + l)
branch  0 taken 168
branch  1 taken 1888 (fallthrough)
        -: 3788:      {
      168: 3789:        h++;
      168: 3790:        w += l;                 /* previous table always l bits */
        -: 3791:
        -: 3792:        /* compute minimum size table less than or equal to l bits */
      168: 3793:        z = (z = g - w) > (unsigned)l ? l : z;  /* upper limit on table size */
branch  0 taken 24 (fallthrough)
branch  1 taken 144
      168: 3794:        if ((f = 1 << (j = k - w)) > a + 1)     /* try a k-w bit table */
branch  0 taken 71 (fallthrough)
branch  1 taken 97
        -: 3795:        {                       /* too few codes for k-w bit table */
       71: 3796:          f -= a + 1;           /* deduct codes from patterns left */
       71: 3797:          xp = c + k;
      194: 3798:          while (++j < z)       /* try smaller tables up to z bits */
branch  0 taken 134
branch  1 taken 60 (fallthrough)
        -: 3799:          {
      134: 3800:            if ((f <<= 1) <= *++xp)
branch  0 taken 11 (fallthrough)
branch  1 taken 123
       11: 3801:              break;            /* enough codes to use up j bits */
      123: 3802:            f -= *xp;           /* else deduct codes from patterns */
        -: 3803:          }
        -: 3804:        }
      168: 3805:        z = 1 << j;             /* table entries for j-bit table */
        -: 3806:
        -: 3807:        /* allocate and link in new table */
      168: 3808:        if ((q = (struct huft *)malloc((z + 1)*sizeof(struct huft))) ==
branch  0 taken 0 (fallthrough)
branch  1 taken 168
        -: 3809:            (struct huft *)NULL)
        -: 3810:        {
    #####: 3811:          if (h)
branch  0 never executed
branch  1 never executed
    #####: 3812:            huft_free(u[0]);
call    0 never executed
    #####: 3813:          return 3;             /* not enough memory */
        -: 3814:        }
      168: 3815:        hufts += z + 1;         /* track memory usage */
      168: 3816:        *t = q + 1;             /* link to list for huft_free() */
      168: 3817:        *(t = &(q->v.t)) = (struct huft *)NULL;
      168: 3818:        u[h] = ++q;             /* table starts after link */
        -: 3819:
        -: 3820:        /* connect to last table, if there is one */
      168: 3821:        if (h)
branch  0 taken 132 (fallthrough)
branch  1 taken 36
        -: 3822:        {
      132: 3823:          x[h] = i;             /* save pattern for backing up */
      132: 3824:          r.b = (uch)l;         /* bits to dump before this table */
      132: 3825:          r.e = (uch)(16 + j);  /* bits in this table */
      132: 3826:          r.v.t = q;            /* pointer to this table */
      132: 3827:          j = i >> (w - l);     /* (get around Turbo C bug) */
      132: 3828:          u[h-1][j] = r;        /* connect to last table */
        -: 3829:        }
        -: 3830:      }
        -: 3831:
        -: 3832:      /* set up table entry in r */
     1888: 3833:      r.b = (uch)(k - w);
     1888: 3834:      if (p >= v + n)
branch  0 taken 0 (fallthrough)
branch  1 taken 1888
    #####: 3835:        r.e = 99;               /* out of values--invalid code */
     1888: 3836:      else if (*p < s)
branch  0 taken 1283 (fallthrough)
branch  1 taken 605
        -: 3837:      {
     1283: 3838:        r.e = (uch)(*p < 256 ? 16 : 15);    /* 256 is end-of-block code */
branch  0 taken 1271 (fallthrough)
branch  1 taken 12
     1283: 3839:        r.v.n = (ush)(*p);             /* simple code is just the value */
     1283: 3840:	p++;                           /* one compiler does not like *p++ */
        -: 3841:      }
        -: 3842:      else
        -: 3843:      {
      605: 3844:        r.e = (uch)e[*p - s];   /* non-simple--look up in lists */
      605: 3845:        r.v.n = d[*p++ - s];
        -: 3846:      }
        -: 3847:
        -: 3848:      /* fill code-like entries with r */
     1888: 3849:      f = 1 << (k - w);
    10430: 3850:      for (j = i >> w; j < z; j += f)
branch  0 taken 8542
branch  1 taken 1888 (fallthrough)
     8542: 3851:        q[j] = r;
        -: 3852:
        -: 3853:      /* backwards increment the k-bit code i */
     3740: 3854:      for (j = 1 << (k - 1); i & j; j >>= 1)
branch  0 taken 1852
branch  1 taken 1888 (fallthrough)
     1852: 3855:        i ^= j;
     1888: 3856:      i ^= j;
        -: 3857:
        -: 3858:      /* backup over finished tables */
     2020: 3859:      while ((i & ((1 << w) - 1)) != x[h])
branch  0 taken 132
branch  1 taken 1888 (fallthrough)
        -: 3860:      {
      132: 3861:        h--;                    /* don't need to update q */
      132: 3862:        w -= l;
        -: 3863:      }
        -: 3864:    }
        -: 3865:  }
        -: 3866:
        -: 3867:
        -: 3868:  /* Return true (1) if we were given an incomplete table */
      36*: 3869:  return y != 0 && g != 1;
branch  0 taken 0 (fallthrough)
branch  1 taken 36
branch  2 never executed
branch  3 never executed
        -: 3870:}
        -: 3871:
        -: 3872:
        -: 3873:
function huft_free called 36 returned 100% blocks executed 100%
       36: 3874:int huft_free(t)
        -: 3875:struct huft *t;         /* table to free */
        -: 3876:/* Free the malloc'ed tables built by huft_build(), which makes a linked
        -: 3877:   list of the tables it made, with the links in a dummy first entry of
        -: 3878:   each table. */
        -: 3879:{
        -: 3880:  register struct huft *p, *q;
        -: 3881:
        -: 3882:
        -: 3883:  /* Go through linked list, freeing from the malloced (t[-1]) address. */
       36: 3884:  p = t;
      204: 3885:  while (p != (struct huft *)NULL)
branch  0 taken 168
branch  1 taken 36 (fallthrough)
        -: 3886:  {
      168: 3887:    q = (--p)->v.t;
      168: 3888:    free((char*)p);
      168: 3889:    p = q;
        -: 3890:  } 
       36: 3891:  return 0;
        -: 3892:}
        -: 3893:
        -: 3894:
function inflate_codes called 12 returned 100% blocks executed 81%
       12: 3895:int inflate_codes(tl, td, bl, bd)
        -: 3896:struct huft *tl, *td;   /* literal/length and distance decoder tables */
        -: 3897:int bl, bd;             /* number of bits decoded by tl[] and td[] */
        -: 3898:/* inflate (decompress) the codes in a deflated (compressed) block.
        -: 3899:   Return an error code or zero if it all goes ok. */
        -: 3900:{
        -: 3901:  register unsigned e;  /* table entry flag/number of extra bits */
        -: 3902:  unsigned n, d;        /* length and index for copy */
        -: 3903:  unsigned w;           /* current window position */
        -: 3904:  struct huft *t;       /* pointer to table entry */
        -: 3905:  unsigned ml, md;      /* masks for bl and bd bits */
        -: 3906:  register ulg b;       /* bit buffer */
        -: 3907:  register unsigned k;  /* number of bits in bit buffer */
        -: 3908:
        -: 3909:
        -: 3910:  /* make local copies of globals */
       12: 3911:  b = bb;                       /* initialize bit buffer */
       12: 3912:  k = bk;
       12: 3913:  w = wp;                       /* initialize window position */
        -: 3914:
        -: 3915:  /* inflate the coded data */
       12: 3916:  ml = mask_bits[bl];           /* precompute masks for speed */
       12: 3917:  md = mask_bits[bd];
        -: 3918:  for (;;)                      /* do until end of block */
        -: 3919:  {
  175355*: 3920:    NEEDBITS((unsigned)bl)
branch  0 taken 87900 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 87900
branch  4 taken 87455 (fallthrough)
    87455: 3921:    if ((e = (t = tl + ((unsigned)b & ml))->e) > 16)
branch  0 taken 1715 (fallthrough)
branch  1 taken 85740
        -: 3922:      do {
     1715: 3923:        if (e == 99)
branch  0 taken 0 (fallthrough)
branch  1 taken 1715
    #####: 3924:          return 1;
     1715: 3925:        DUMPBITS(t->b)
     1715: 3926:        e -= 16;
    2046*: 3927:        NEEDBITS(e)
branch  0 taken 331 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 331
branch  4 taken 1715 (fallthrough)
     1715: 3928:      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 16);
branch  0 taken 0
branch  1 taken 1715 (fallthrough)
    87455: 3929:    DUMPBITS(t->b)
    87455: 3930:    if (e == 16)                /* then it's a literal */
branch  0 taken 39175 (fallthrough)
branch  1 taken 48280
        -: 3931:    {
    39175: 3932:      slide[w++] = (uch)t->v.n;
        -: 3933:      Tracevv((stderr, "%c", slide[w-1]));
    39175: 3934:      if (w == WSIZE)
branch  0 taken 1 (fallthrough)
branch  1 taken 39174
        -: 3935:      {
        1: 3936:        flush_output(w);
call    0 returned 1
        1: 3937:        w = 0;
        -: 3938:      }
        -: 3939:    }
        -: 3940:    else                        /* it's an EOB or a length */
        -: 3941:    {
        -: 3942:      /* exit if end of block */
    48280: 3943:      if (e == 15)
branch  0 taken 12 (fallthrough)
branch  1 taken 48268
       12: 3944:        break;
        -: 3945:
        -: 3946:      /* get length of block to copy */
   48520*: 3947:      NEEDBITS(e)
branch  0 taken 252 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 252
branch  4 taken 48268 (fallthrough)
    48268: 3948:      n = t->v.n + ((unsigned)b & mask_bits[e]);
    48268: 3949:      DUMPBITS(e);
        -: 3950:
        -: 3951:      /* decode distance of block to copy */
   58048*: 3952:      NEEDBITS((unsigned)bd)
branch  0 taken 9780 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 9780
branch  4 taken 48268 (fallthrough)
    48268: 3953:      if ((e = (t = td + ((unsigned)b & md))->e) > 16)
branch  0 taken 1771 (fallthrough)
branch  1 taken 46497
        -: 3954:        do {
     1771: 3955:          if (e == 99)
branch  0 taken 0 (fallthrough)
branch  1 taken 1771
    #####: 3956:            return 1;
     1771: 3957:          DUMPBITS(t->b)
     1771: 3958:          e -= 16;
    2524*: 3959:          NEEDBITS(e)
branch  0 taken 753 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 753
branch  4 taken 1771 (fallthrough)
     1771: 3960:        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 16);
branch  0 taken 0
branch  1 taken 1771 (fallthrough)
    48268: 3961:      DUMPBITS(t->b)
   89405*: 3962:      NEEDBITS(e)
branch  0 taken 41137 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 41137
branch  4 taken 48268 (fallthrough)
    48268: 3963:      d = w - t->v.n - ((unsigned)b & mask_bits[e]);
    48268: 3964:      DUMPBITS(e)
        -: 3965:      Tracevv((stderr,"\\[%d,%d]", w-d, n));
        -: 3966:
        -: 3967:      /* do the copy */
        -: 3968:      do {
    48291: 3969:        n -= (e = (e = WSIZE - ((d &= WSIZE-1) > w ? d : w)) > n ? n : e);
branch  0 taken 1894 (fallthrough)
branch  1 taken 46397
branch  2 taken 48268 (fallthrough)
branch  3 taken 23
        -: 3970:#if !defined(NOMEMCPY) && !defined(DEBUG)
    48291: 3971:        if (w - d >= e)         /* (this test assumes unsigned comparison) */
branch  0 taken 48088 (fallthrough)
branch  1 taken 203
        -: 3972:        {
    48088: 3973:          memcpy(slide + w, slide + d, e);
    48088: 3974:          w += e;
    48088: 3975:          d += e;
        -: 3976:        }
        -: 3977:        else                      /* do it slow to avoid memcpy() overlap */
        -: 3978:#endif /* !NOMEMCPY */
        -: 3979:          do {
     9338: 3980:            slide[w++] = slide[d++];
        -: 3981:	    Tracevv((stderr, "%c", slide[w-1]));
     9338: 3982:          } while (--e);
branch  0 taken 9135
branch  1 taken 203 (fallthrough)
    48291: 3983:        if (w == WSIZE)
branch  0 taken 11 (fallthrough)
branch  1 taken 48280
        -: 3984:        {
       11: 3985:          flush_output(w);
call    0 returned 11
       11: 3986:          w = 0;
        -: 3987:        }
    48291: 3988:      } while (n);
branch  0 taken 23
branch  1 taken 48268 (fallthrough)
        -: 3989:    }
        -: 3990:  }
        -: 3991:
        -: 3992:
        -: 3993:  /* restore the globals from the locals */
       12: 3994:  wp = w;                       /* restore global window pointer */
       12: 3995:  bb = b;                       /* restore global bit buffer */
       12: 3996:  bk = k;
        -: 3997:
        -: 3998:  /* done */
       12: 3999:  return 0;
        -: 4000:}
        -: 4001:
        -: 4002:
        -: 4003:
function inflate_stored called 2 returned 100% blocks executed 84%
        2: 4004:int inflate_stored()
        -: 4005:/* "decompress" an inflated type 0 (stored) block. */
        -: 4006:{
        -: 4007:  unsigned n;           /* number of bytes in block */
        -: 4008:  unsigned w;           /* current window position */
        -: 4009:  register ulg b;       /* bit buffer */
        -: 4010:  register unsigned k;  /* number of bits in bit buffer */
        -: 4011:
        -: 4012:
        -: 4013:  /* make local copies of globals */
        2: 4014:  b = bb;                       /* initialize bit buffer */
        2: 4015:  k = bk;
        2: 4016:  w = wp;                       /* initialize window position */
        -: 4017:
        -: 4018:
        -: 4019:  /* go to byte boundary */
        2: 4020:  n = k & 7;
        2: 4021:  DUMPBITS(n);
        -: 4022:
        -: 4023:
        -: 4024:  /* get the length and its complement */
       6*: 4025:  NEEDBITS(16)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 4
branch  4 taken 2 (fallthrough)
        2: 4026:  n = ((unsigned)b & 0xffff);
        2: 4027:  DUMPBITS(16)
       6*: 4028:  NEEDBITS(16)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 4
branch  4 taken 2 (fallthrough)
        2: 4029:  if (n != (unsigned)((~b) & 0xffff))
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 4030:    return 1;                   /* error in compressed data */
        2: 4031:  DUMPBITS(16)
        -: 4032:
        -: 4033:
        -: 4034:  /* read and output the compressed data */
    34233: 4035:  while (n--)
branch  0 taken 34231
branch  1 taken 2 (fallthrough)
        -: 4036:  {
    68462: 4037:    NEEDBITS(8)
branch  0 taken 34230 (fallthrough)
branch  1 taken 1
call    2 returned 1
branch  3 taken 34231
branch  4 taken 34231 (fallthrough)
    34231: 4038:    slide[w++] = (uch)b;
    34231: 4039:    if (w == WSIZE)
branch  0 taken 1 (fallthrough)
branch  1 taken 34230
        -: 4040:    {
        1: 4041:      flush_output(w);
call    0 returned 1
        1: 4042:      w = 0;
        -: 4043:    }
    34231: 4044:    DUMPBITS(8)
        -: 4045:  }
        -: 4046:
        -: 4047:
        -: 4048:  /* restore the globals from the locals */
        2: 4049:  wp = w;                       /* restore global window pointer */
        2: 4050:  bb = b;                       /* restore global bit buffer */
        2: 4051:  bk = k;
        2: 4052:  return 0;
        -: 4053:}
        -: 4054:
        -: 4055:
        -: 4056:
function inflate_fixed called 0 returned 0% blocks executed 0%
    #####: 4057:int inflate_fixed()
        -: 4058:/* decompress an inflated type 1 (fixed Huffman codes) block.  We should
        -: 4059:   either replace this with a custom decoder, or at least precompute the
        -: 4060:   Huffman tables. */
        -: 4061:{
        -: 4062:  int i;                /* temporary variable */
        -: 4063:  struct huft *tl;      /* literal/length code table */
        -: 4064:  struct huft *td;      /* distance code table */
        -: 4065:  int bl;               /* lookup bits for tl */
        -: 4066:  int bd;               /* lookup bits for td */
        -: 4067:  unsigned l[288];      /* length list for huft_build */
        -: 4068:
        -: 4069:
        -: 4070:  /* set up literal table */
    #####: 4071:  for (i = 0; i < 144; i++)
branch  0 never executed
branch  1 never executed
    #####: 4072:    l[i] = 8;
    #####: 4073:  for (; i < 256; i++)
branch  0 never executed
branch  1 never executed
    #####: 4074:    l[i] = 9;
    #####: 4075:  for (; i < 280; i++)
branch  0 never executed
branch  1 never executed
    #####: 4076:    l[i] = 7;
    #####: 4077:  for (; i < 288; i++)          /* make a complete, but wrong code set */
branch  0 never executed
branch  1 never executed
    #####: 4078:    l[i] = 8;
    #####: 4079:  bl = 7;
    #####: 4080:  if ((i = huft_build(l, 288, 257, cplens, cplext, &tl, &bl)) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4081:    return i;
        -: 4082:
        -: 4083:
        -: 4084:  /* set up distance table */
    #####: 4085:  for (i = 0; i < 30; i++)      /* make an incomplete code set */
branch  0 never executed
branch  1 never executed
    #####: 4086:    l[i] = 5;
    #####: 4087:  bd = 5;
    #####: 4088:  if ((i = huft_build(l, 30, 0, cpdist, cpdext, &td, &bd)) > 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4089:  {
    #####: 4090:    huft_free(tl);
call    0 never executed
    #####: 4091:    return i;
        -: 4092:  }
        -: 4093:
        -: 4094:
        -: 4095:  /* decompress until an end-of-block code */
    #####: 4096:  if (inflate_codes(tl, td, bl, bd))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4097:    return 1;
        -: 4098:
        -: 4099:
        -: 4100:  /* free the decoding tables, return */
    #####: 4101:  huft_free(tl);
call    0 never executed
    #####: 4102:  huft_free(td);
call    0 never executed
    #####: 4103:  return 0;
        -: 4104:}
        -: 4105:
        -: 4106:
        -: 4107:
function inflate_dynamic called 12 returned 100% blocks executed 66%
       12: 4108:int inflate_dynamic()
        -: 4109:/* decompress an inflated type 2 (dynamic Huffman codes) block. */
        -: 4110:{
        -: 4111:  int i;                /* temporary variables */
        -: 4112:  unsigned j;
        -: 4113:  unsigned l;           /* last length */
        -: 4114:  unsigned m;           /* mask for bit lengths table */
        -: 4115:  unsigned n;           /* number of lengths to get */
        -: 4116:  struct huft *tl;      /* literal/length code table */
        -: 4117:  struct huft *td;      /* distance code table */
        -: 4118:  int bl;               /* lookup bits for tl */
        -: 4119:  int bd;               /* lookup bits for td */
        -: 4120:  unsigned nb;          /* number of bit length codes */
        -: 4121:  unsigned nl;          /* number of literal/length codes */
        -: 4122:  unsigned nd;          /* number of distance codes */
        -: 4123:#ifdef PKZIP_BUG_WORKAROUND
        -: 4124:  unsigned ll[288+32];  /* literal/length and distance code lengths */
        -: 4125:#else
        -: 4126:  unsigned ll[286+30];  /* literal/length and distance code lengths */
        -: 4127:#endif
        -: 4128:  register ulg b;       /* bit buffer */
        -: 4129:  register unsigned k;  /* number of bits in bit buffer */
        -: 4130:
        -: 4131:
        -: 4132:  /* make local bit buffer */
       12: 4133:  b = bb;
       12: 4134:  k = bk;
        -: 4135:
        -: 4136:
        -: 4137:  /* read in table lengths */
      12*: 4138:  NEEDBITS(5)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 taken 0
branch  4 taken 12 (fallthrough)
       12: 4139:  nl = 257 + ((unsigned)b & 0x1f);      /* number of literal/length codes */
       12: 4140:  DUMPBITS(5)
      24*: 4141:  NEEDBITS(5)
branch  0 taken 12 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 12
branch  4 taken 12 (fallthrough)
       12: 4142:  nd = 1 + ((unsigned)b & 0x1f);        /* number of distance codes */
       12: 4143:  DUMPBITS(5)
      23*: 4144:  NEEDBITS(4)
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 11
branch  4 taken 12 (fallthrough)
       12: 4145:  nb = 4 + ((unsigned)b & 0xf);         /* number of bit length codes */
       12: 4146:  DUMPBITS(4)
        -: 4147:#ifdef PKZIP_BUG_WORKAROUND
        -: 4148:  if (nl > 288 || nd > 32)
        -: 4149:#else
       12: 4150:  if (nl > 286 || nd > 30)
branch  0 taken 12 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 12
        -: 4151:#endif
    #####: 4152:    return 1;                   /* bad lengths */
        -: 4153:
        -: 4154:
        -: 4155:  /* read in bit-length-code lengths */
      191: 4156:  for (j = 0; j < nb; j++)
branch  0 taken 179
branch  1 taken 12 (fallthrough)
        -: 4157:  {
     240*: 4158:    NEEDBITS(3)
branch  0 taken 61 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 61
branch  4 taken 179 (fallthrough)
      179: 4159:    ll[border[j]] = (unsigned)b & 7;
      179: 4160:    DUMPBITS(3)
        -: 4161:  }
       61: 4162:  for (; j < 19; j++)
branch  0 taken 49
branch  1 taken 12 (fallthrough)
       49: 4163:    ll[border[j]] = 0;
        -: 4164:
        -: 4165:
        -: 4166:  /* build decoding table for trees--single level, 7 bit lookup */
       12: 4167:  bl = 7;
       12: 4168:  if ((i = huft_build(ll, 19, 19, NULL, NULL, &tl, &bl)) != 0)
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
        -: 4169:  {
    #####: 4170:    if (i == 1)
branch  0 never executed
branch  1 never executed
    #####: 4171:      huft_free(tl);
call    0 never executed
    #####: 4172:    return i;                   /* incomplete code set */
        -: 4173:  }
        -: 4174:
        -: 4175:
        -: 4176:  /* read in literal and distance code lengths */
       12: 4177:  n = nl + nd;
       12: 4178:  m = mask_bits[bl];
       12: 4179:  i = l = 0;
     1768: 4180:  while ((unsigned)i < n)
branch  0 taken 1756
branch  1 taken 12 (fallthrough)
        -: 4181:  {
    2555*: 4182:    NEEDBITS((unsigned)bl)
branch  0 taken 799 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 799
branch  4 taken 1756 (fallthrough)
     1756: 4183:    j = (td = tl + ((unsigned)b & m))->b;
     1756: 4184:    DUMPBITS(j)
     1756: 4185:    j = td->v.n;
     1756: 4186:    if (j < 16)                 /* length of code in bits (0..15) */
branch  0 taken 1662 (fallthrough)
branch  1 taken 94
     1662: 4187:      ll[i++] = l = j;          /* save last length in l */
       94: 4188:    else if (j == 16)           /* repeat last length 3 to 6 times */
branch  0 taken 38 (fallthrough)
branch  1 taken 56
        -: 4189:    {
      38*: 4190:      NEEDBITS(2)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 taken 0
branch  4 taken 38 (fallthrough)
       38: 4191:      j = 3 + ((unsigned)b & 3);
       38: 4192:      DUMPBITS(2)
       38: 4193:      if ((unsigned)i + j > n)
branch  0 taken 0 (fallthrough)
branch  1 taken 38
    #####: 4194:        return 1;
      190: 4195:      while (j--)
branch  0 taken 152
branch  1 taken 38
      152: 4196:        ll[i++] = l;
        -: 4197:    }
       56: 4198:    else if (j == 17)           /* 3 to 10 zero length codes */
branch  0 taken 32 (fallthrough)
branch  1 taken 24
        -: 4199:    {
      42*: 4200:      NEEDBITS(3)
branch  0 taken 10 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 10
branch  4 taken 32 (fallthrough)
       32: 4201:      j = 3 + ((unsigned)b & 7);
       32: 4202:      DUMPBITS(3)
       32: 4203:      if ((unsigned)i + j > n)
branch  0 taken 0 (fallthrough)
branch  1 taken 32
    #####: 4204:        return 1;
      228: 4205:      while (j--)
branch  0 taken 196
branch  1 taken 32 (fallthrough)
      196: 4206:        ll[i++] = 0;
       32: 4207:      l = 0;
        -: 4208:    }
        -: 4209:    else                        /* j == 18: 11 to 138 zero length codes */
        -: 4210:    {
      47*: 4211:      NEEDBITS(7)
branch  0 taken 23 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 23
branch  4 taken 24 (fallthrough)
       24: 4212:      j = 11 + ((unsigned)b & 0x7f);
       24: 4213:      DUMPBITS(7)
       24: 4214:      if ((unsigned)i + j > n)
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 4215:        return 1;
     1805: 4216:      while (j--)
branch  0 taken 1781
branch  1 taken 24 (fallthrough)
     1781: 4217:        ll[i++] = 0;
       24: 4218:      l = 0;
        -: 4219:    }
        -: 4220:  }
        -: 4221:
        -: 4222:
        -: 4223:  /* free decoding table for trees */
       12: 4224:  huft_free(tl);
call    0 returned 12
        -: 4225:
        -: 4226:
        -: 4227:  /* restore the global bit buffer */
       12: 4228:  bb = b;
       12: 4229:  bk = k;
        -: 4230:
        -: 4231:
        -: 4232:  /* build the decoding tables for literal/length and distance codes */
       12: 4233:  bl = lbits;
       12: 4234:  if ((i = huft_build(ll, nl, 257, cplens, cplext, &tl, &bl)) != 0)
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
        -: 4235:  {
    #####: 4236:    if (i == 1) {
branch  0 never executed
branch  1 never executed
    #####: 4237:      fprintf(stderr, " incomplete literal tree\n");
call    0 never executed
    #####: 4238:      huft_free(tl);
call    0 never executed
        -: 4239:    }
    #####: 4240:    return i;                   /* incomplete code set */
        -: 4241:  }
       12: 4242:  bd = dbits;
       12: 4243:  if ((i = huft_build(ll + nl, nd, 0, cpdist, cpdext, &td, &bd)) != 0)
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
        -: 4244:  {
    #####: 4245:    if (i == 1) {
branch  0 never executed
branch  1 never executed
    #####: 4246:      fprintf(stderr, " incomplete distance tree\n");
call    0 never executed
        -: 4247:#ifdef PKZIP_BUG_WORKAROUND
        -: 4248:      i = 0;
        -: 4249:    }
        -: 4250:#else
    #####: 4251:      huft_free(td);
call    0 never executed
        -: 4252:    }
    #####: 4253:    huft_free(tl);
call    0 never executed
    #####: 4254:    return i;                   /* incomplete code set */
        -: 4255:#endif
        -: 4256:  }
        -: 4257:
        -: 4258:
        -: 4259:  /* decompress until an end-of-block code */
       12: 4260:  if (inflate_codes(tl, td, bl, bd))
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
    #####: 4261:    return 1;
        -: 4262:
        -: 4263:
        -: 4264:  /* free the decoding tables, return */
       12: 4265:  huft_free(tl);
call    0 returned 12
       12: 4266:  huft_free(td);
call    0 returned 12
       12: 4267:  return 0;
        -: 4268:}
        -: 4269:
        -: 4270:
        -: 4271:
function inflate_block called 14 returned 100% blocks executed 68%
       14: 4272:int inflate_block(e)
        -: 4273:int *e;                 /* last block flag */
        -: 4274:/* decompress an inflated block */
        -: 4275:{
        -: 4276:  unsigned t;           /* block type */
        -: 4277:  register ulg b;       /* bit buffer */
        -: 4278:  register unsigned k;  /* number of bits in bit buffer */
        -: 4279:
        -: 4280:
        -: 4281:  /* make local bit buffer */
       14: 4282:  b = bb;
       14: 4283:  k = bk;
        -: 4284:
        -: 4285:
        -: 4286:  /* read in last block bit */
      27*: 4287:  NEEDBITS(1)
branch  0 taken 13 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 13
branch  4 taken 14 (fallthrough)
       14: 4288:  *e = (int)b & 1;
       14: 4289:  DUMPBITS(1)
        -: 4290:
        -: 4291:
        -: 4292:  /* read in block type */
      15*: 4293:  NEEDBITS(2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 1
branch  4 taken 14 (fallthrough)
       14: 4294:  t = (unsigned)b & 3;
       14: 4295:  DUMPBITS(2)
        -: 4296:
        -: 4297:
        -: 4298:  /* restore the global bit buffer */
       14: 4299:  bb = b;
       14: 4300:  bk = k;
        -: 4301:
        -: 4302:
        -: 4303:  /* inflate that block type */
       14: 4304:  if (t == 2)
branch  0 taken 12 (fallthrough)
branch  1 taken 2
       12: 4305:    return inflate_dynamic();
call    0 returned 12
        2: 4306:  if (t == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 4307:    return inflate_stored();
call    0 returned 2
    #####: 4308:  if (t == 1)
branch  0 never executed
branch  1 never executed
    #####: 4309:    return inflate_fixed();
call    0 never executed
        -: 4310:
        -: 4311:
        -: 4312:  /* bad block type */
    #####: 4313:  return 2;
        -: 4314:}
        -: 4315:
        -: 4316:
        -: 4317:
function inflate called 12 returned 100% blocks executed 86%
       12: 4318:int inflate()
        -: 4319:/* decompress an inflated entry */
        -: 4320:{
        -: 4321:  int e;                /* last block flag */
        -: 4322:  int r;                /* result code */
        -: 4323:  unsigned h;           /* maximum struct huft's malloc'ed */
        -: 4324:
        -: 4325:
        -: 4326:  /* initialize window, bit buffer */
       12: 4327:  wp = 0;
       12: 4328:  bk = 0;
       12: 4329:  bb = 0;
        -: 4330:
        -: 4331:
        -: 4332:  /* decompress until the last block */
       12: 4333:  h = 0;
        -: 4334:  do {
       14: 4335:    hufts = 0;
       14: 4336:    if ((r = inflate_block(&e)) != 0)
call    0 returned 14
branch  1 taken 0 (fallthrough)
branch  2 taken 14
    #####: 4337:      return r;
       14: 4338:    if (hufts > h)
branch  0 taken 12 (fallthrough)
branch  1 taken 2
       12: 4339:      h = hufts;
       14: 4340:  } while (!e);
branch  0 taken 2
branch  1 taken 12 (fallthrough)
        -: 4341:
        -: 4342:  /* Undo too much lookahead. The next read will be byte aligned so we
        -: 4343:   * can discard unused bits in the last meaningful byte.
        -: 4344:   */
       12: 4345:  while (bk >= 8) {
branch  0 taken 0
branch  1 taken 12 (fallthrough)
    #####: 4346:    bk -= 8;
    #####: 4347:    inptr--;
        -: 4348:  }
        -: 4349:
        -: 4350:  /* flush out slide */
       12: 4351:  flush_output(wp);
call    0 returned 12
        -: 4352:
        -: 4353:
        -: 4354:  /* return success */
        -: 4355:#ifdef DEBUG
        -: 4356:  fprintf(stderr, "<%u> ", h);
        -: 4357:#endif /* DEBUG */
       12: 4358:  return 0;
        -: 4359:}
        -: 4360:/* lzw.c -- compress files in LZW format.
        -: 4361: * This is a dummy version avoiding patent problems.
        -: 4362: */
        -: 4363:
        -: 4364:/*
        -: 4365:#ifndef lint
        -: 4366:static char rcsid[] = "$Id: lzw.c,v 0.9 1993/06/10 13:27:31 jloup Exp $";
        -: 4367:#endif
        -: 4368:*/
        -: 4369:
        -: 4370:static int msg_done = 0;
        -: 4371:
        -: 4372:/* Compress in to out with lzw method. */
function lzw called 0 returned 0% blocks executed 0%
    #####: 4373:int lzw(in, out)
        -: 4374:    int in, out;
        -: 4375:{
    #####: 4376:    if (msg_done) return ERROR;
branch  0 never executed
branch  1 never executed
    #####: 4377:    msg_done = 1;
    #####: 4378:    fprintf(stderr,"output in compress .Z format not supported\n");
call    0 never executed
    #####: 4379:    in++, out++; /* avoid warnings on unused variables */
    #####: 4380:    exit_code = ERROR;
    #####: 4381:    return ERROR;
        -: 4382:}
        -: 4383:/* trees.c -- output deflated data using Huffman coding
        -: 4384: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 4385: * This is free software; you can redistribute it and/or modify it under the
        -: 4386: * terms of the GNU General Public License, see the file COPYING.
        -: 4387: */
        -: 4388:
        -: 4389:/*
        -: 4390: *  PURPOSE
        -: 4391: *
        -: 4392: *      Encode various sets of source values using variable-length
        -: 4393: *      binary code trees.
        -: 4394: *
        -: 4395: *  DISCUSSION
        -: 4396: *
        -: 4397: *      The PKZIP "deflation" process uses several Huffman trees. The more
        -: 4398: *      common source values are represented by shorter bit sequences.
        -: 4399: *
        -: 4400: *      Each code tree is stored in the ZIP file in a compressed form
        -: 4401: *      which is itself a Huffman encoding of the lengths of
        -: 4402: *      all the code strings (in ascending order by source values).
        -: 4403: *      The actual code strings are reconstructed from the lengths in
        -: 4404: *      the UNZIP process, as described in the "application note"
        -: 4405: *      (APPNOTE.TXT) distributed as part of PKWARE's PKZIP program.
        -: 4406: *
        -: 4407: *  REFERENCES
        -: 4408: *
        -: 4409: *      Lynch, Thomas J.
        -: 4410: *          Data Compression:  Techniques and Applications, pp. 53-55.
        -: 4411: *          Lifetime Learning Publications, 1985.  ISBN 0-534-03418-7.
        -: 4412: *
        -: 4413: *      Storer, James A.
        -: 4414: *          Data Compression:  Methods and Theory, pp. 49-50.
        -: 4415: *          Computer Science Press, 1988.  ISBN 0-7167-8156-5.
        -: 4416: *
        -: 4417: *      Sedgewick, R.
        -: 4418: *          Algorithms, p290.
        -: 4419: *          Addison-Wesley, 1983. ISBN 0-201-06672-6.
        -: 4420: *
        -: 4421: *  INTERFACE
        -: 4422: *
        -: 4423: *      void ct_init (ush *attr, int *methodp)
        -: 4424: *          Allocate the match buffer, initialize the various tables and save
        -: 4425: *          the location of the internal file attribute (ascii/binary) and
        -: 4426: *          method (DEFLATE/STORE)
        -: 4427: *
        -: 4428: *      void ct_tally (int dist, int lc);
        -: 4429: *          Save the match info and tally the frequency counts.
        -: 4430: *
        -: 4431: *      long flush_block (char *buf, ulg stored_len, int eof)
        -: 4432: *          Determine the best encoding for the current block: dynamic trees,
        -: 4433: *          static trees or store, and output the encoded block to the zip
        -: 4434: *          file. Returns the total compressed length for the file so far.
        -: 4435: *
        -: 4436: */
        -: 4437:
        -: 4438:/*
        -: 4439:#ifndef lint
        -: 4440:static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 13:27:54 jloup Exp $";
        -: 4441:#endif
        -: 4442:*/
        -: 4443:
        -: 4444:/* ===========================================================================
        -: 4445: * Constants
        -: 4446: */
        -: 4447:
        -: 4448:#define MAX_BITS 15
        -: 4449:/* All codes must not exceed MAX_BITS bits */
        -: 4450:
        -: 4451:#define MAX_BL_BITS 7
        -: 4452:/* Bit length codes must not exceed MAX_BL_BITS bits */
        -: 4453:
        -: 4454:#define LENGTH_CODES 29
        -: 4455:/* number of length codes, not counting the special END_BLOCK code */
        -: 4456:
        -: 4457:#define LITERALS  256
        -: 4458:/* number of literal bytes 0..255 */
        -: 4459:
        -: 4460:#define END_BLOCK 256
        -: 4461:/* end of block literal code */
        -: 4462:
        -: 4463:#define L_CODES (LITERALS+1+LENGTH_CODES)
        -: 4464:/* number of Literal or Length codes, including the END_BLOCK code */
        -: 4465:
        -: 4466:#define D_CODES   30
        -: 4467:/* number of distance codes */
        -: 4468:
        -: 4469:#define BL_CODES  19
        -: 4470:/* number of codes used to transfer the bit lengths */
        -: 4471:
        -: 4472:
        -: 4473:local int near extra_lbits[LENGTH_CODES] /* extra bits for each length code */
        -: 4474:   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
        -: 4475:
        -: 4476:local int near extra_dbits[D_CODES] /* extra bits for each distance code */
        -: 4477:   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
        -: 4478:
        -: 4479:local int near extra_blbits[BL_CODES]/* extra bits for each bit length code */
        -: 4480:   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
        -: 4481:
        -: 4482:#define STORED_BLOCK 0
        -: 4483:#define STATIC_TREES 1
        -: 4484:#define DYN_TREES    2
        -: 4485:/* The three kinds of block type */
        -: 4486:
        -: 4487:#ifndef LIT_BUFSIZE
        -: 4488:#  ifdef SMALL_MEM
        -: 4489:#    define LIT_BUFSIZE  0x2000
        -: 4490:#  else
        -: 4491:#  ifdef MEDIUM_MEM
        -: 4492:#    define LIT_BUFSIZE  0x4000
        -: 4493:#  else
        -: 4494:#    define LIT_BUFSIZE  0x8000
        -: 4495:#  endif
        -: 4496:#  endif
        -: 4497:#endif
        -: 4498:#ifndef DIST_BUFSIZE
        -: 4499:#  define DIST_BUFSIZE  LIT_BUFSIZE
        -: 4500:#endif
        -: 4501:/* Sizes of match buffers for literals/lengths and distances.  There are
        -: 4502: * 4 reasons for limiting LIT_BUFSIZE to 64K:
        -: 4503: *   - frequencies can be kept in 16 bit counters
        -: 4504: *   - if compression is not successful for the first block, all input data is
        -: 4505: *     still in the window so we can still emit a stored block even when input
        -: 4506: *     comes from standard input.  (This can also be done for all blocks if
        -: 4507: *     LIT_BUFSIZE is not greater than 32K.)
        -: 4508: *   - if compression is not successful for a file smaller than 64K, we can
        -: 4509: *     even emit a stored file instead of a stored block (saving 5 bytes).
        -: 4510: *   - creating new Huffman trees less frequently may not provide fast
        -: 4511: *     adaptation to changes in the input data statistics. (Take for
        -: 4512: *     example a binary file with poorly compressible code followed by
        -: 4513: *     a highly compressible string table.) Smaller buffer sizes give
        -: 4514: *     fast adaptation but have of course the overhead of transmitting trees
        -: 4515: *     more frequently.
        -: 4516: *   - I can't count above 4
        -: 4517: * The current code is general and allows DIST_BUFSIZE < LIT_BUFSIZE (to save
        -: 4518: * memory at the expense of compression). Some optimizations would be possible
        -: 4519: * if we rely on DIST_BUFSIZE == LIT_BUFSIZE.
        -: 4520: */
        -: 4521:#if LIT_BUFSIZE > INBUFSIZ
        -: 4522:    error cannot overlay l_buf and inbuf
        -: 4523:#endif
        -: 4524:
        -: 4525:#define REP_3_6      16
        -: 4526:/* repeat previous bit length 3-6 times (2 bits of repeat count) */
        -: 4527:
        -: 4528:#define REPZ_3_10    17
        -: 4529:/* repeat a zero length 3-10 times  (3 bits of repeat count) */
        -: 4530:
        -: 4531:#define REPZ_11_138  18
        -: 4532:/* repeat a zero length 11-138 times  (7 bits of repeat count) */
        -: 4533:
        -: 4534:/* ===========================================================================
        -: 4535: * Local data
        -: 4536: */
        -: 4537:
        -: 4538:/* Data structure describing a single value and its code string. */
        -: 4539:typedef struct ct_data {
        -: 4540:    union {
        -: 4541:        ush  freq;       /* frequency count */
        -: 4542:        ush  code;       /* bit string */
        -: 4543:    } fc;
        -: 4544:    union {
        -: 4545:        ush  dad;        /* father node in Huffman tree */
        -: 4546:        ush  len;        /* length of bit string */
        -: 4547:    } dl;
        -: 4548:} ct_data;
        -: 4549:
        -: 4550:#define Freq fc.freq
        -: 4551:#define Code fc.code
        -: 4552:#define Dad  dl.dad
        -: 4553:#define Len  dl.len
        -: 4554:
        -: 4555:#define HEAP_SIZE (2*L_CODES+1)
        -: 4556:/* maximum heap size */
        -: 4557:
        -: 4558:local ct_data near dyn_ltree[HEAP_SIZE];   /* literal and length tree */
        -: 4559:local ct_data near dyn_dtree[2*D_CODES+1]; /* distance tree */
        -: 4560:
        -: 4561:local ct_data near static_ltree[L_CODES+2];
        -: 4562:/* The static literal tree. Since the bit lengths are imposed, there is no
        -: 4563: * need for the L_CODES extra codes used during heap construction. However
        -: 4564: * The codes 286 and 287 are needed to build a canonical tree (see ct_init
        -: 4565: * below).
        -: 4566: */
        -: 4567:
        -: 4568:local ct_data near static_dtree[D_CODES];
        -: 4569:/* The static distance tree. (Actually a trivial tree since all codes use
        -: 4570: * 5 bits.)
        -: 4571: */
        -: 4572:
        -: 4573:local ct_data near bl_tree[2*BL_CODES+1];
        -: 4574:/* Huffman tree for the bit lengths */
        -: 4575:
        -: 4576:typedef struct tree_desc {
        -: 4577:    ct_data near *dyn_tree;      /* the dynamic tree */
        -: 4578:    ct_data near *static_tree;   /* corresponding static tree or NULL */
        -: 4579:    int     near *extra_bits;    /* extra bits for each code or NULL */
        -: 4580:    int     extra_base;          /* base index for extra_bits */
        -: 4581:    int     elems;               /* max number of elements in the tree */
        -: 4582:    int     max_length;          /* max bit length for the codes */
        -: 4583:    int     max_code;            /* largest code with non zero frequency */
        -: 4584:} tree_desc;
        -: 4585:
        -: 4586:local tree_desc near l_desc =
        -: 4587:{dyn_ltree, static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS, 0};
        -: 4588:
        -: 4589:local tree_desc near d_desc =
        -: 4590:{dyn_dtree, static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS, 0};
        -: 4591:
        -: 4592:local tree_desc near bl_desc =
        -: 4593:{bl_tree, (ct_data near *)0, extra_blbits, 0,      BL_CODES, MAX_BL_BITS, 0};
        -: 4594:
        -: 4595:
        -: 4596:local ush near bl_count[MAX_BITS+1];
        -: 4597:/* number of codes at each bit length for an optimal tree */
        -: 4598:
        -: 4599:local uch near bl_order[BL_CODES]
        -: 4600:   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
        -: 4601:/* The lengths of the bit length codes are sent in order of decreasing
        -: 4602: * probability, to avoid transmitting the lengths for unused bit length codes.
        -: 4603: */
        -: 4604:
        -: 4605:local int near heap[2*L_CODES+1]; /* heap used to build the Huffman trees */
        -: 4606:local int heap_len;               /* number of elements in the heap */
        -: 4607:local int heap_max;               /* element of largest frequency */
        -: 4608:/* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
        -: 4609: * The same heap array is used to build all trees.
        -: 4610: */
        -: 4611:
        -: 4612:local uch near depth[2*L_CODES+1];
        -: 4613:/* Depth of each subtree used as tie breaker for trees of equal frequency */
        -: 4614:
        -: 4615:local uch length_code[MAX_MATCH-MIN_MATCH+1];
        -: 4616:/* length code for each normalized match length (0 == MIN_MATCH) */
        -: 4617:
        -: 4618:local uch dist_code[512];
        -: 4619:/* distance codes. The first 256 values correspond to the distances
        -: 4620: * 3 .. 258, the last 256 values correspond to the top 8 bits of
        -: 4621: * the 15 bit distances.
        -: 4622: */
        -: 4623:
        -: 4624:local int near base_length[LENGTH_CODES];
        -: 4625:/* First normalized length for each code (0 = MIN_MATCH) */
        -: 4626:
        -: 4627:local int near base_dist[D_CODES];
        -: 4628:/* First normalized distance for each code (0 = distance of 1) */
        -: 4629:
        -: 4630:#define l_buf inbuf
        -: 4631:/* DECLARE(uch, l_buf, LIT_BUFSIZE);  buffer for literals or lengths */
        -: 4632:
        -: 4633:/* DECLARE(ush, d_buf, DIST_BUFSIZE); buffer for distances */
        -: 4634:
        -: 4635:local uch near flag_buf[(LIT_BUFSIZE/8)];
        -: 4636:/* flag_buf is a bit array distinguishing literals from lengths in
        -: 4637: * l_buf, thus indicating the presence or absence of a distance.
        -: 4638: */
        -: 4639:
        -: 4640:local unsigned last_lit;    /* running index in l_buf */
        -: 4641:local unsigned last_dist;   /* running index in d_buf */
        -: 4642:local unsigned last_flags;  /* running index in flag_buf */
        -: 4643:local uch flags;            /* current flags not yet saved in flag_buf */
        -: 4644:local uch flag_bit;         /* current bit used in flags */
        -: 4645:/* bits are filled in flags starting at bit 0 (least significant).
        -: 4646: * Note: these flags are overkill in the current code since we don't
        -: 4647: * take advantage of DIST_BUFSIZE == LIT_BUFSIZE.
        -: 4648: */
        -: 4649:
        -: 4650:local ulg opt_len;        /* bit length of current block with optimal trees */
        -: 4651:local ulg static_len;     /* bit length of current block with static trees */
        -: 4652:
        -: 4653:local ulg compressed_len; /* total bit length of compressed file */
        -: 4654:
        -: 4655:local ulg input_len;      /* total byte length of input file */
        -: 4656:/* input_len is for debugging only since we can get it by other means. */
        -: 4657:
        -: 4658:ush *file_type;        /* pointer to UNKNOWN, BINARY or ASCII */
        -: 4659:int *file_method;      /* pointer to DEFLATE or STORE */
        -: 4660:
        -: 4661:#ifdef DEBUG
        -: 4662:extern ulg bits_sent;  /* bit length of the compressed data */
        -: 4663:extern long isize;     /* byte length of input file */
        -: 4664:#endif
        -: 4665:
        -: 4666:extern long block_start;       /* window offset of current block */
        -: 4667:extern unsigned near strstart; /* window offset of current string */
        -: 4668:
        -: 4669:/* ===========================================================================
        -: 4670: * Local (static) routines in this file.
        -: 4671: */
        -: 4672:
        -: 4673:local void init_block     OF((void));
        -: 4674:local void pqdownheap     OF((ct_data near *tree, int k));
        -: 4675:local void gen_bitlen     OF((tree_desc near *desc));
        -: 4676:local void gen_codes      OF((ct_data near *tree, int max_code));
        -: 4677:local void build_tree     OF((tree_desc near *desc));
        -: 4678:local void scan_tree      OF((ct_data near *tree, int max_code));
        -: 4679:local void send_tree      OF((ct_data near *tree, int max_code));
        -: 4680:local int  build_bl_tree  OF((void));
        -: 4681:local void send_all_trees OF((int lcodes, int dcodes, int blcodes));
        -: 4682:local void compress_block OF((ct_data near *ltree, ct_data near *dtree));
        -: 4683:local void set_file_type  OF((void));
        -: 4684:
        -: 4685:
        -: 4686:#ifndef DEBUG
        -: 4687:#  define send_code(c, tree) send_bits(tree[c].Code, tree[c].Len)
        -: 4688:   /* Send a code of the given tree. c and tree must not have side effects */
        -: 4689:
        -: 4690:#else /* DEBUG */
        -: 4691:#  define send_code(c, tree) \
        -: 4692:     { if (verbose>1) fprintf(stderr,"\ncd %3d ",(c)); \
        -: 4693:       send_bits(tree[c].Code, tree[c].Len); }
        -: 4694:#endif
        -: 4695:
        -: 4696:#define d_code(dist) \
        -: 4697:   ((dist) < 256 ? dist_code[dist] : dist_code[256+((dist)>>7)])
        -: 4698:/* Mapping from a distance to a distance code. dist is the distance - 1 and
        -: 4699: * must not have side effects. dist_code[256] and dist_code[257] are never
        -: 4700: * used.
        -: 4701: */
        -: 4702:
        -: 4703:#define MAX(a,b) (a >= b ? a : b)
        -: 4704:/* the arguments must not have side effects */
        -: 4705:
        -: 4706:/* ===========================================================================
        -: 4707: * Allocate the match buffer, initialize the various tables and save the
        -: 4708: * location of the internal file attribute (ascii/binary) and method
        -: 4709: * (DEFLATE/STORE).
        -: 4710: */
function ct_init called 175 returned 100% blocks executed 98%
      175: 4711:void ct_init(attr, methodp)
        -: 4712:    ush  *attr;   /* pointer to internal file attribute */
        -: 4713:    int  *methodp; /* pointer to compression method */
        -: 4714:{
        -: 4715:    int n;        /* iterates over tree elements */
        -: 4716:    int bits;     /* bit counter */
        -: 4717:    int length;   /* length value */
        -: 4718:    int code;     /* code value */
        -: 4719:    int dist;     /* distance index */
        -: 4720:
      175: 4721:    file_type = attr;
      175: 4722:    file_method = methodp;
      175: 4723:    compressed_len = input_len = 0L;
        -: 4724:        
     175*: 4725:    if (static_dtree[0].Len != 0) return; /* ct_init already called */
branch  0 taken 0 (fallthrough)
branch  1 taken 175
        -: 4726:
        -: 4727:    /* Initialize the mapping length (0..255) -> length code (0..28) */
      175: 4728:    length = 0;
     5075: 4729:    for (code = 0; code < LENGTH_CODES-1; code++) {
branch  0 taken 4900
branch  1 taken 175 (fallthrough)
     4900: 4730:        base_length[code] = length;
    49700: 4731:        for (n = 0; n < (1<<extra_lbits[code]); n++) {
branch  0 taken 44800
branch  1 taken 4900 (fallthrough)
    44800: 4732:            length_code[length++] = (uch)code;
        -: 4733:        }
        -: 4734:    }
        -: 4735:    Assert (length == 256, "ct_init: length != 256");
        -: 4736:    /* Note that the length 255 (match length 258) can be represented
        -: 4737:     * in two different ways: code 284 + 5 bits or code 285, so we
        -: 4738:     * overwrite length_code[255] to use the best encoding:
        -: 4739:     */
      175: 4740:    length_code[length-1] = (uch)code;
        -: 4741:
        -: 4742:    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
      175: 4743:    dist = 0;
     2975: 4744:    for (code = 0 ; code < 16; code++) {
branch  0 taken 2800
branch  1 taken 175 (fallthrough)
     2800: 4745:        base_dist[code] = dist;
    47600: 4746:        for (n = 0; n < (1<<extra_dbits[code]); n++) {
branch  0 taken 44800
branch  1 taken 2800 (fallthrough)
    44800: 4747:            dist_code[dist++] = (uch)code;
        -: 4748:        }
        -: 4749:    }
        -: 4750:    Assert (dist == 256, "ct_init: dist != 256");
      175: 4751:    dist >>= 7; /* from now on, all distances are divided by 128 */
     2625: 4752:    for ( ; code < D_CODES; code++) {
branch  0 taken 2450
branch  1 taken 175 (fallthrough)
     2450: 4753:        base_dist[code] = dist << 7;
    46900: 4754:        for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
branch  0 taken 44450
branch  1 taken 2450 (fallthrough)
    44450: 4755:            dist_code[256 + dist++] = (uch)code;
        -: 4756:        }
        -: 4757:    }
        -: 4758:    Assert (dist == 256, "ct_init: 256+dist != 512");
        -: 4759:
        -: 4760:    /* Construct the codes of the static literal tree */
     2975: 4761:    for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
branch  0 taken 2800
branch  1 taken 175 (fallthrough)
      175: 4762:    n = 0;
    25375: 4763:    while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
branch  0 taken 25200
branch  1 taken 175 (fallthrough)
    19775: 4764:    while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
branch  0 taken 19600
branch  1 taken 175 (fallthrough)
     4375: 4765:    while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
branch  0 taken 4200
branch  1 taken 175 (fallthrough)
     1575: 4766:    while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
branch  0 taken 1400
branch  1 taken 175 (fallthrough)
        -: 4767:    /* Codes 286 and 287 do not exist, but we must include them in the
        -: 4768:     * tree construction to get a canonical Huffman tree (longest code
        -: 4769:     * all ones)
        -: 4770:     */
      175: 4771:    gen_codes((ct_data near *)static_ltree, L_CODES+1);
call    0 returned 175
        -: 4772:
        -: 4773:    /* The static distance tree is trivial: */
     5425: 4774:    for (n = 0; n < D_CODES; n++) {
branch  0 taken 5250
branch  1 taken 175 (fallthrough)
     5250: 4775:        static_dtree[n].Len = 5;
     5250: 4776:        static_dtree[n].Code = bi_reverse(n, 5);
call    0 returned 5250
        -: 4777:    }
        -: 4778:
        -: 4779:    /* Initialize the first block of the first file: */
      175: 4780:    init_block();
call    0 returned 175
        -: 4781:}
        -: 4782:
        -: 4783:/* ===========================================================================
        -: 4784: * Initialize a new block.
        -: 4785: */
function init_block called 370 returned 100% blocks executed 100%
      370: 4786:local void init_block()
        -: 4787:{
        -: 4788:    int n; /* iterates over tree elements */
        -: 4789:
        -: 4790:    /* Initialize the trees. */
   106190: 4791:    for (n = 0; n < L_CODES;  n++) dyn_ltree[n].Freq = 0;
branch  0 taken 105820
branch  1 taken 370 (fallthrough)
    11470: 4792:    for (n = 0; n < D_CODES;  n++) dyn_dtree[n].Freq = 0;
branch  0 taken 11100
branch  1 taken 370 (fallthrough)
     7400: 4793:    for (n = 0; n < BL_CODES; n++) bl_tree[n].Freq = 0;
branch  0 taken 7030
branch  1 taken 370 (fallthrough)
        -: 4794:
      370: 4795:    dyn_ltree[END_BLOCK].Freq = 1;
      370: 4796:    opt_len = static_len = 0L;
      370: 4797:    last_lit = last_dist = last_flags = 0;
      370: 4798:    flags = 0; flag_bit = 1;
      370: 4799:}
        -: 4800:
        -: 4801:#define SMALLEST 1
        -: 4802:/* Index within the heap array of least frequent node in the Huffman tree */
        -: 4803:
        -: 4804:
        -: 4805:/* ===========================================================================
        -: 4806: * Remove the smallest element from the heap and recreate the heap with
        -: 4807: * one less element. Updates heap and heap_len.
        -: 4808: */
        -: 4809:#define pqremove(tree, top) \
        -: 4810:{\
        -: 4811:    top = heap[SMALLEST]; \
        -: 4812:    heap[SMALLEST] = heap[heap_len--]; \
        -: 4813:    pqdownheap(tree, SMALLEST); \
        -: 4814:}
        -: 4815:
        -: 4816:/* ===========================================================================
        -: 4817: * Compares to subtrees, using the tree depth as tie breaker when
        -: 4818: * the subtrees have equal frequency. This minimizes the worst case length.
        -: 4819: */
        -: 4820:#define smaller(tree, n, m) \
        -: 4821:   (tree[n].Freq < tree[m].Freq || \
        -: 4822:   (tree[n].Freq == tree[m].Freq && depth[n] <= depth[m]))
        -: 4823:
        -: 4824:/* ===========================================================================
        -: 4825: * Restore the heap property by moving down the tree starting at node k,
        -: 4826: * exchanging a node with the smallest of its two sons if necessary, stopping
        -: 4827: * when the heap property is re-established (each father smaller than its
        -: 4828: * two sons).
        -: 4829: */
function pqdownheap called 72081 returned 100% blocks executed 100%
    72081: 4830:local void pqdownheap(tree, k)
        -: 4831:    ct_data near *tree;  /* the tree to restore */
        -: 4832:    int k;               /* node to move down */
        -: 4833:{
    72081: 4834:    int v = heap[k];
    72081: 4835:    int j = k << 1;  /* left son of k */
   296478: 4836:    while (j <= heap_len) {
branch  0 taken 249172
branch  1 taken 47306 (fallthrough)
        -: 4837:        /* Set j to the smallest of the two sons: */
   249172: 4838:        if (j < heap_len && smaller(tree, heap[j+1], heap[j])) j++;
branch  0 taken 243793 (fallthrough)
branch  1 taken 5379
branch  2 taken 147421 (fallthrough)
branch  3 taken 96372
branch  4 taken 34050 (fallthrough)
branch  5 taken 113371
branch  6 taken 23762 (fallthrough)
branch  7 taken 10288
        -: 4839:
        -: 4840:        /* Exit if v is smaller than both sons */
   249172: 4841:        if (smaller(tree, v, heap[j])) break;
branch  0 taken 226452 (fallthrough)
branch  1 taken 22720
branch  2 taken 5113 (fallthrough)
branch  3 taken 221339
branch  4 taken 3058 (fallthrough)
branch  5 taken 2055
        -: 4842:
        -: 4843:        /* Exchange v with the smallest son */
   224397: 4844:        heap[k] = heap[j];  k = j;
        -: 4845:
        -: 4846:        /* And continue down the tree, setting j to the left son of k */
   224397: 4847:        j <<= 1;
        -: 4848:    }
    72081: 4849:    heap[k] = v;
    72081: 4850:}
        -: 4851:
        -: 4852:/* ===========================================================================
        -: 4853: * Compute the optimal bit lengths for a tree and update the total bit length
        -: 4854: * for the current block.
        -: 4855: * IN assertion: the fields freq and dad are set, heap[heap_max] and
        -: 4856: *    above are the tree nodes sorted by increasing frequency.
        -: 4857: * OUT assertions: the field len is set to the optimal bit length, the
        -: 4858: *     array bl_count contains the frequencies for each bit length.
        -: 4859: *     The length opt_len is updated; static_len is also updated if stree is
        -: 4860: *     not null.
        -: 4861: */
function gen_bitlen called 585 returned 100% blocks executed 97%
      585: 4862:local void gen_bitlen(desc)
        -: 4863:    tree_desc near *desc; /* the tree descriptor */
        -: 4864:{
      585: 4865:    ct_data near *tree  = desc->dyn_tree;
      585: 4866:    int near *extra     = desc->extra_bits;
      585: 4867:    int base            = desc->extra_base;
      585: 4868:    int max_code        = desc->max_code;
      585: 4869:    int max_length      = desc->max_length;
      585: 4870:    ct_data near *stree = desc->static_tree;
        -: 4871:    int h;              /* heap index */
        -: 4872:    int n, m;           /* iterate over the tree elements */
        -: 4873:    int bits;           /* bit length */
        -: 4874:    int xbits;          /* extra bits */
        -: 4875:    ush f;              /* frequency */
      585: 4876:    int overflow = 0;   /* number of elements with bit length too large */
        -: 4877:
     9945: 4878:    for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
branch  0 taken 9360
branch  1 taken 585 (fallthrough)
        -: 4879:
        -: 4880:    /* In a first pass, compute the optimal bit lengths (which may
        -: 4881:     * overflow in the case of the bit length tree).
        -: 4882:     */
      585: 4883:    tree[heap[heap_max]].Len = 0; /* root of the heap */
        -: 4884:
    58137: 4885:    for (h = heap_max+1; h < HEAP_SIZE; h++) {
branch  0 taken 57552
branch  1 taken 585 (fallthrough)
    57552: 4886:        n = heap[h];
    57552: 4887:        bits = tree[tree[n].Dad].Len + 1;
    57552: 4888:        if (bits > max_length) bits = max_length, overflow++;
branch  0 taken 6 (fallthrough)
branch  1 taken 57546
    57552: 4889:        tree[n].Len = (ush)bits;
        -: 4890:        /* We overwrite tree[n].Dad which is no longer needed */
        -: 4891:
    57552: 4892:        if (n > max_code) continue; /* not a leaf node */
branch  0 taken 28191 (fallthrough)
branch  1 taken 29361
        -: 4893:
    29361: 4894:        bl_count[bits]++;
    29361: 4895:        xbits = 0;
    29361: 4896:        if (n >= base) xbits = extra[n-base];
branch  0 taken 11494 (fallthrough)
branch  1 taken 17867
    29361: 4897:        f = tree[n].Freq;
    29361: 4898:        opt_len += (ulg)f * (bits + xbits);
    29361: 4899:        if (stree) static_len += (ulg)f * (stree[n].Len + xbits);
branch  0 taken 26697 (fallthrough)
branch  1 taken 2664
        -: 4900:    }
      585: 4901:    if (overflow == 0) return;
branch  0 taken 582 (fallthrough)
branch  1 taken 3
        -: 4902:
        -: 4903:    Trace((stderr,"\nbit length overflow\n"));
        -: 4904:    /* This happens for example on obj2 and pic of the Calgary corpus */
        -: 4905:
        -: 4906:    /* Find the first bit length which could increase: */
        -: 4907:    do {
        3: 4908:        bits = max_length-1;
       3*: 4909:        while (bl_count[bits] == 0) bits--;
branch  0 taken 0
branch  1 taken 3 (fallthrough)
        3: 4910:        bl_count[bits]--;      /* move one leaf down the tree */
        3: 4911:        bl_count[bits+1] += 2; /* move one overflow item as its brother */
        3: 4912:        bl_count[max_length]--;
        -: 4913:        /* The brother of the overflow item also moves one step up,
        -: 4914:         * but this does not affect bl_count[max_length]
        -: 4915:         */
        3: 4916:        overflow -= 2;
        3: 4917:    } while (overflow > 0);
branch  0 taken 0
branch  1 taken 3 (fallthrough)
        -: 4918:
        -: 4919:    /* Now recompute all bit lengths, scanning in increasing frequency.
        -: 4920:     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
        -: 4921:     * lengths instead of fixing only the wrong ones. This idea is taken
        -: 4922:     * from 'ar' written by Haruhiko Okumura.)
        -: 4923:     */
       24: 4924:    for (bits = max_length; bits != 0; bits--) {
branch  0 taken 21
branch  1 taken 3 (fallthrough)
       21: 4925:        n = bl_count[bits];
       84: 4926:        while (n != 0) {
branch  0 taken 63
branch  1 taken 21 (fallthrough)
       63: 4927:            m = heap[--h];
       63: 4928:            if (m > max_code) continue;
branch  0 taken 24 (fallthrough)
branch  1 taken 39
       39: 4929:            if (tree[m].Len != (unsigned) bits) {
branch  0 taken 3 (fallthrough)
branch  1 taken 36
        -: 4930:                Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        3: 4931:                opt_len += ((long)bits-(long)tree[m].Len)*(long)tree[m].Freq;
        3: 4932:                tree[m].Len = (ush)bits;
        -: 4933:            }
       39: 4934:            n--;
        -: 4935:        }
        -: 4936:    }
        -: 4937:}
        -: 4938:
        -: 4939:/* ===========================================================================
        -: 4940: * Generate the codes for a given tree and bit counts (which need not be
        -: 4941: * optimal).
        -: 4942: * IN assertion: the array bl_count contains the bit length statistics for
        -: 4943: * the given tree and the field len is set for all tree elements.
        -: 4944: * OUT assertion: the field code is set for all tree elements of non
        -: 4945: *     zero code length.
        -: 4946: */
function gen_codes called 760 returned 100% blocks executed 100%
      760: 4947:local void gen_codes (tree, max_code)
        -: 4948:    ct_data near *tree;        /* the tree to decorate */
        -: 4949:    int max_code;              /* largest code with non zero frequency */
        -: 4950:{
        -: 4951:    ush next_code[MAX_BITS+1]; /* next code value for each bit length */
      760: 4952:    ush code = 0;              /* running code value */
        -: 4953:    int bits;                  /* bit index */
        -: 4954:    int n;                     /* code index */
        -: 4955:
        -: 4956:    /* The distribution counts are first used to generate the code values
        -: 4957:     * without bit reversal.
        -: 4958:     */
    12160: 4959:    for (bits = 1; bits <= MAX_BITS; bits++) {
branch  0 taken 11400
branch  1 taken 760 (fallthrough)
    11400: 4960:        next_code[bits] = code = (code + bl_count[bits-1]) << 1;
        -: 4961:    }
        -: 4962:    /* Check that the bit counts in bl_count are consistent. The last code
        -: 4963:     * must be all ones.
        -: 4964:     */
        -: 4965:    Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
        -: 4966:            "inconsistent bit counts");
        -: 4967:    Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
        -: 4968:
   115890: 4969:    for (n = 0;  n <= max_code; n++) {
branch  0 taken 115130
branch  1 taken 760 (fallthrough)
   115130: 4970:        int len = tree[n].Len;
   115130: 4971:        if (len == 0) continue;
branch  0 taken 35369 (fallthrough)
branch  1 taken 79761
        -: 4972:        /* Now reverse the bits */
    79761: 4973:        tree[n].Code = bi_reverse(next_code[len]++, len);
call    0 returned 79761
        -: 4974:
        -: 4975:        Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
        -: 4976:             n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
        -: 4977:    }
      760: 4978:}
        -: 4979:
        -: 4980:/* ===========================================================================
        -: 4981: * Construct one Huffman tree and assigns the code bit strings and lengths.
        -: 4982: * Update the total bit length for the current block.
        -: 4983: * IN assertion: the field freq is set for all tree elements.
        -: 4984: * OUT assertions: the fields len and code are set to the optimal bit length
        -: 4985: *     and corresponding code. The length opt_len is updated; static_len is
        -: 4986: *     also updated if stree is not null. The field max_code is set.
        -: 4987: */
function build_tree called 585 returned 100% blocks executed 100%
      585: 4988:local void build_tree(desc)
        -: 4989:    tree_desc near *desc; /* the tree descriptor */
        -: 4990:{
      585: 4991:    ct_data near *tree   = desc->dyn_tree;
      585: 4992:    ct_data near *stree  = desc->static_tree;
      585: 4993:    int elems            = desc->elems;
        -: 4994:    int n, m;          /* iterate over heap elements */
      585: 4995:    int max_code = -1; /* largest code with non zero frequency */
      585: 4996:    int node = elems;  /* next internal node of the tree */
        -: 4997:
        -: 4998:    /* Construct the initial heap, with least frequent element in
        -: 4999:     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
        -: 5000:     * heap[0] is not used.
        -: 5001:     */
      585: 5002:    heap_len = 0, heap_max = HEAP_SIZE;
        -: 5003:
    65910: 5004:    for (n = 0; n < elems; n++) {
branch  0 taken 65325
branch  1 taken 585 (fallthrough)
    65325: 5005:        if (tree[n].Freq != 0) {
branch  0 taken 29341 (fallthrough)
branch  1 taken 35984
    29341: 5006:            heap[++heap_len] = max_code = n;
    29341: 5007:            depth[n] = 0;
        -: 5008:        } else {
    35984: 5009:            tree[n].Len = 0;
        -: 5010:        }
        -: 5011:    }
        -: 5012:
        -: 5013:    /* The pkzip format requires that at least one distance code exists,
        -: 5014:     * and that at least one bit should be sent even if there is only one
        -: 5015:     * possible code. So to avoid special checks later on we force at least
        -: 5016:     * two codes of non zero frequency.
        -: 5017:     */
      605: 5018:    while (heap_len < 2) {
branch  0 taken 20
branch  1 taken 585 (fallthrough)
       20: 5019:        int new = heap[++heap_len] = (max_code < 2 ? ++max_code : 0);
branch  0 taken 18 (fallthrough)
branch  1 taken 2
       20: 5020:        tree[new].Freq = 1;
       20: 5021:        depth[new] = 0;
       20: 5022:        opt_len--; if (stree) static_len -= stree[new].Len;
branch  0 taken 20 (fallthrough)
branch  1 taken 0
        -: 5023:        /* new is 0 or 1 so it does not have extra bits */
        -: 5024:    }
      585: 5025:    desc->max_code = max_code;
        -: 5026:
        -: 5027:    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
        -: 5028:     * establish sub-heaps of increasing lengths:
        -: 5029:     */
    15114: 5030:    for (n = heap_len/2; n >= 1; n--) pqdownheap(tree, n);
call    0 returned 14529
branch  1 taken 14529
branch  2 taken 585 (fallthrough)
        -: 5031:
        -: 5032:    /* Construct the Huffman tree by repeatedly combining the least two
        -: 5033:     * frequent nodes.
        -: 5034:     */
        -: 5035:    do {
    28776: 5036:        pqremove(tree, n);   /* n = node of least frequency */
call    0 returned 28776
    28776: 5037:        m = heap[SMALLEST];  /* m = node of next least frequency */
        -: 5038:
    28776: 5039:        heap[--heap_max] = n; /* keep the nodes sorted by frequency */
    28776: 5040:        heap[--heap_max] = m;
        -: 5041:
        -: 5042:        /* Create a new node father of n and m */
    28776: 5043:        tree[node].Freq = tree[n].Freq + tree[m].Freq;
    28776: 5044:        depth[node] = (uch) (MAX(depth[n], depth[m]) + 1);
branch  0 taken 19163 (fallthrough)
branch  1 taken 9613
    28776: 5045:        tree[n].Dad = tree[m].Dad = (ush)node;
        -: 5046:#ifdef DUMP_BL_TREE
        -: 5047:        if (tree == bl_tree) {
        -: 5048:            fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
        -: 5049:                    node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
        -: 5050:        }
        -: 5051:#endif
        -: 5052:        /* and insert the new node in the heap */
    28776: 5053:        heap[SMALLEST] = node++;
    28776: 5054:        pqdownheap(tree, SMALLEST);
call    0 returned 28776
        -: 5055:
    28776: 5056:    } while (heap_len >= 2);
branch  0 taken 28191
branch  1 taken 585 (fallthrough)
        -: 5057:
      585: 5058:    heap[--heap_max] = heap[SMALLEST];
        -: 5059:
        -: 5060:    /* At this point, the fields freq and dad are set. We can now
        -: 5061:     * generate the bit lengths.
        -: 5062:     */
      585: 5063:    gen_bitlen((tree_desc near *)desc);
call    0 returned 585
        -: 5064:
        -: 5065:    /* The field len is now set, we can generate the bit codes */
      585: 5066:    gen_codes ((ct_data near *)tree, max_code);
call    0 returned 585
      585: 5067:}
        -: 5068:
        -: 5069:/* ===========================================================================
        -: 5070: * Scan a literal or distance tree to determine the frequencies of the codes
        -: 5071: * in the bit length tree. Updates opt_len to take into account the repeat
        -: 5072: * counts. (The contribution of the bit length codes will be added later
        -: 5073: * during the construction of bl_tree.)
        -: 5074: */
function scan_tree called 390 returned 100% blocks executed 100%
      390: 5075:local void scan_tree (tree, max_code)
        -: 5076:    ct_data near *tree; /* the tree to be scanned */
        -: 5077:    int max_code;       /* and its largest code of non zero frequency */
        -: 5078:{
        -: 5079:    int n;                     /* iterates over all tree elements */
      390: 5080:    int prevlen = -1;          /* last emitted length */
        -: 5081:    int curlen;                /* length of current code */
      390: 5082:    int nextlen = tree[0].Len; /* length of next code */
      390: 5083:    int count = 0;             /* repeat count of the current code */
      390: 5084:    int max_count = 7;         /* max repeat count */
      390: 5085:    int min_count = 4;         /* min repeat count */
        -: 5086:
      390: 5087:    if (nextlen == 0) max_count = 138, min_count = 3;
branch  0 taken 182 (fallthrough)
branch  1 taken 208
      390: 5088:    tree[max_code+1].Len = (ush)0xffff; /* guard */
        -: 5089:
    61428: 5090:    for (n = 0; n <= max_code; n++) {
branch  0 taken 61038
branch  1 taken 390 (fallthrough)
    61038: 5091:        curlen = nextlen; nextlen = tree[n+1].Len;
    61038: 5092:        if (++count < max_count && curlen == nextlen) {
branch  0 taken 60839 (fallthrough)
branch  1 taken 199
branch  2 taken 40395 (fallthrough)
branch  3 taken 20444
    40395: 5093:            continue;
    20643: 5094:        } else if (count < min_count) {
branch  0 taken 19011 (fallthrough)
branch  1 taken 1632
    19011: 5095:            bl_tree[curlen].Freq += count;
     1632: 5096:        } else if (curlen != 0) {
branch  0 taken 735 (fallthrough)
branch  1 taken 897
      735: 5097:            if (curlen != prevlen) bl_tree[curlen].Freq++;
branch  0 taken 646 (fallthrough)
branch  1 taken 89
      735: 5098:            bl_tree[REP_3_6].Freq++;
      897: 5099:        } else if (count <= 10) {
branch  0 taken 510 (fallthrough)
branch  1 taken 387
      510: 5100:            bl_tree[REPZ_3_10].Freq++;
        -: 5101:        } else {
      387: 5102:            bl_tree[REPZ_11_138].Freq++;
        -: 5103:        }
    20643: 5104:        count = 0; prevlen = curlen;
    20643: 5105:        if (nextlen == 0) {
branch  0 taken 2148 (fallthrough)
branch  1 taken 18495
     2148: 5106:            max_count = 138, min_count = 3;
    18495: 5107:        } else if (curlen == nextlen) {
branch  0 taken 179 (fallthrough)
branch  1 taken 18316
      179: 5108:            max_count = 6, min_count = 3;
        -: 5109:        } else {
    18316: 5110:            max_count = 7, min_count = 4;
        -: 5111:        }
        -: 5112:    }
      390: 5113:}
        -: 5114:
        -: 5115:/* ===========================================================================
        -: 5116: * Send a literal or distance tree in compressed form, using the codes in
        -: 5117: * bl_tree.
        -: 5118: */
function send_tree called 382 returned 100% blocks executed 100%
      382: 5119:local void send_tree (tree, max_code)
        -: 5120:    ct_data near *tree; /* the tree to be scanned */
        -: 5121:    int max_code;       /* and its largest code of non zero frequency */
        -: 5122:{
        -: 5123:    int n;                     /* iterates over all tree elements */
      382: 5124:    int prevlen = -1;          /* last emitted length */
        -: 5125:    int curlen;                /* length of current code */
      382: 5126:    int nextlen = tree[0].Len; /* length of next code */
      382: 5127:    int count = 0;             /* repeat count of the current code */
      382: 5128:    int max_count = 7;         /* max repeat count */
      382: 5129:    int min_count = 4;         /* min repeat count */
        -: 5130:
        -: 5131:    /* tree[max_code+1].Len = -1; */  /* guard already set */
      382: 5132:    if (nextlen == 0) max_count = 138, min_count = 3;
branch  0 taken 182 (fallthrough)
branch  1 taken 200
        -: 5133:
    60334: 5134:    for (n = 0; n <= max_code; n++) {
branch  0 taken 59952
branch  1 taken 382 (fallthrough)
    59952: 5135:        curlen = nextlen; nextlen = tree[n+1].Len;
    59952: 5136:        if (++count < max_count && curlen == nextlen) {
branch  0 taken 59791 (fallthrough)
branch  1 taken 161
branch  2 taken 39384 (fallthrough)
branch  3 taken 20407
    39384: 5137:            continue;
    20568: 5138:        } else if (count < min_count) {
branch  0 taken 18985 (fallthrough)
branch  1 taken 1583
    24547: 5139:            do { send_code(curlen, bl_tree); } while (--count != 0);
call    0 returned 24547
branch  1 taken 5562
branch  2 taken 18985
        -: 5140:
     1583: 5141:        } else if (curlen != 0) {
branch  0 taken 694 (fallthrough)
branch  1 taken 889
      694: 5142:            if (curlen != prevlen) {
branch  0 taken 638 (fallthrough)
branch  1 taken 56
      638: 5143:                send_code(curlen, bl_tree); count--;
call    0 returned 638
        -: 5144:            }
        -: 5145:            Assert(count >= 3 && count <= 6, " 3_6?");
      694: 5146:            send_code(REP_3_6, bl_tree); send_bits(count-3, 2);
call    0 returned 694
call    1 returned 694
        -: 5147:
      889: 5148:        } else if (count <= 10) {
branch  0 taken 510 (fallthrough)
branch  1 taken 379
      510: 5149:            send_code(REPZ_3_10, bl_tree); send_bits(count-3, 3);
call    0 returned 510
call    1 returned 510
        -: 5150:
        -: 5151:        } else {
      379: 5152:            send_code(REPZ_11_138, bl_tree); send_bits(count-11, 7);
call    0 returned 379
call    1 returned 379
        -: 5153:        }
    20568: 5154:        count = 0; prevlen = curlen;
    20568: 5155:        if (nextlen == 0) {
branch  0 taken 2140 (fallthrough)
branch  1 taken 18428
     2140: 5156:            max_count = 138, min_count = 3;
    18428: 5157:        } else if (curlen == nextlen) {
branch  0 taken 145 (fallthrough)
branch  1 taken 18283
      145: 5158:            max_count = 6, min_count = 3;
        -: 5159:        } else {
    18283: 5160:            max_count = 7, min_count = 4;
        -: 5161:        }
        -: 5162:    }
      382: 5163:}
        -: 5164:
        -: 5165:/* ===========================================================================
        -: 5166: * Construct the Huffman tree for the bit lengths and return the index in
        -: 5167: * bl_order of the last bit length code to send.
        -: 5168: */
function build_bl_tree called 195 returned 100% blocks executed 100%
      195: 5169:local int build_bl_tree()
        -: 5170:{
        -: 5171:    int max_blindex;  /* index of last bit length code of non zero freq */
        -: 5172:
        -: 5173:    /* Determine the bit length frequencies for literal and distance trees */
      195: 5174:    scan_tree((ct_data near *)dyn_ltree, l_desc.max_code);
call    0 returned 195
      195: 5175:    scan_tree((ct_data near *)dyn_dtree, d_desc.max_code);
call    0 returned 195
        -: 5176:
        -: 5177:    /* Build the bit length tree: */
      195: 5178:    build_tree((tree_desc near *)(&bl_desc));
call    0 returned 195
        -: 5179:    /* opt_len now includes the length of the tree representations, except
        -: 5180:     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
        -: 5181:     */
        -: 5182:
        -: 5183:    /* Determine the number of bit length codes to send. The pkzip format
        -: 5184:     * requires that at least 4 bit length codes be sent. (appnote.txt says
        -: 5185:     * 3 but the actual value used is 4.)
        -: 5186:     */
      906: 5187:    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
branch  0 taken 906
branch  1 taken 0 (fallthrough)
      906: 5188:        if (bl_tree[bl_order[max_blindex]].Len != 0) break;
branch  0 taken 195 (fallthrough)
branch  1 taken 711
        -: 5189:    }
        -: 5190:    /* Update opt_len to include the bit length tree and counts */
      195: 5191:    opt_len += 3*(max_blindex+1) + 5+5+4;
        -: 5192:    Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld", opt_len, static_len));
        -: 5193:
      195: 5194:    return max_blindex;
        -: 5195:}
        -: 5196:
        -: 5197:/* ===========================================================================
        -: 5198: * Send the header for a block using dynamic Huffman trees: the counts, the
        -: 5199: * lengths of the bit length codes, the literal tree and the distance tree.
        -: 5200: * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
        -: 5201: */
function send_all_trees called 191 returned 100% blocks executed 100%
      191: 5202:local void send_all_trees(lcodes, dcodes, blcodes)
        -: 5203:    int lcodes, dcodes, blcodes; /* number of codes for each tree */
        -: 5204:{
        -: 5205:    int rank;                    /* index in bl_order */
        -: 5206:
        -: 5207:    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
        -: 5208:    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
        -: 5209:            "too many codes");
        -: 5210:    Tracev((stderr, "\nbl counts: "));
      191: 5211:    send_bits(lcodes-257, 5); /* not +255 as stated in appnote.txt */
call    0 returned 191
      191: 5212:    send_bits(dcodes-1,   5);
call    0 returned 191
      191: 5213:    send_bits(blcodes-4,  4); /* not -3 as stated in appnote.txt */
call    0 returned 191
     3113: 5214:    for (rank = 0; rank < blcodes; rank++) {
branch  0 taken 2922
branch  1 taken 191 (fallthrough)
        -: 5215:        Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
     2922: 5216:        send_bits(bl_tree[bl_order[rank]].Len, 3);
call    0 returned 2922
        -: 5217:    }
        -: 5218:    Tracev((stderr, "\nbl tree: sent %ld", bits_sent));
        -: 5219:
      191: 5220:    send_tree((ct_data near *)dyn_ltree, lcodes-1); /* send the literal tree */
call    0 returned 191
        -: 5221:    Tracev((stderr, "\nlit tree: sent %ld", bits_sent));
        -: 5222:
      191: 5223:    send_tree((ct_data near *)dyn_dtree, dcodes-1); /* send the distance tree */
call    0 returned 191
        -: 5224:    Tracev((stderr, "\ndist tree: sent %ld", bits_sent));
      191: 5225:}
        -: 5226:
        -: 5227:/* ===========================================================================
        -: 5228: * Determine the best encoding for the current block: dynamic trees, static
        -: 5229: * trees or store, and output the encoded block to the zip file. This function
        -: 5230: * returns the total compressed length for the file so far.
        -: 5231: */
function flush_block called 195 returned 100% blocks executed 96%
      195: 5232:ulg flush_block(buf, stored_len, eof)
        -: 5233:    char *buf;        /* input block, or NULL if too old */
        -: 5234:    ulg stored_len;   /* length of input block */
        -: 5235:    int eof;          /* true if this is the last block for a file */
        -: 5236:{
        -: 5237:    ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
        -: 5238:    int max_blindex;  /* index of last bit length code of non zero freq */
        -: 5239:
      195: 5240:    flag_buf[last_flags] = flags; /* Save the flags for the last 8 items */
        -: 5241:
        -: 5242:     /* Check if the file is ascii or binary */
     195*: 5243:    if (*file_type == (ush)UNKNOWN) set_file_type();
branch  0 taken 0 (fallthrough)
branch  1 taken 195
call    2 never executed
        -: 5244:
        -: 5245:    /* Construct the literal and distance trees */
      195: 5246:    build_tree((tree_desc near *)(&l_desc));
call    0 returned 195
        -: 5247:    Tracev((stderr, "\nlit data: dyn %ld, stat %ld", opt_len, static_len));
        -: 5248:
      195: 5249:    build_tree((tree_desc near *)(&d_desc));
call    0 returned 195
        -: 5250:    Tracev((stderr, "\ndist data: dyn %ld, stat %ld", opt_len, static_len));
        -: 5251:    /* At this point, opt_len and static_len are the total bit lengths of
        -: 5252:     * the compressed block data, excluding the tree representations.
        -: 5253:     */
        -: 5254:
        -: 5255:    /* Build the bit length tree for the above two trees, and get the index
        -: 5256:     * in bl_order of the last bit length code to send.
        -: 5257:     */
      195: 5258:    max_blindex = build_bl_tree();
call    0 returned 195
        -: 5259:
        -: 5260:    /* Determine the best encoding. Compute first the block length in bytes */
      195: 5261:    opt_lenb = (opt_len+3+7)>>3;
      195: 5262:    static_lenb = (static_len+3+7)>>3;
      195: 5263:    input_len += stored_len; /* for debugging only */
        -: 5264:
        -: 5265:    Trace((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u dist %u ",
        -: 5266:            opt_lenb, opt_len, static_lenb, static_len, stored_len,
        -: 5267:            last_lit, last_dist));
        -: 5268:
      195: 5269:    if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
branch  0 taken 3 (fallthrough)
branch  1 taken 192
        -: 5270:
        -: 5271:    /* If compression failed and this is the first and last block,
        -: 5272:     * and if the zip file can be seeked (to rewrite the local header),
        -: 5273:     * the whole file is transformed into a stored file:
        -: 5274:     */
        -: 5275:#ifdef FORCE_METHOD
        -: 5276:    if (level == 1 && eof && compressed_len == 0L) { /* force stored file */
        -: 5277:#else
        -: 5278:    if (stored_len <= opt_lenb && eof && compressed_len == 0L && seekable()) {
        -: 5279:#endif
        -: 5280:        /* Since LIT_BUFSIZE <= 2*WSIZE, the input data must be there: */
        -: 5281:        if (buf == (char*)0) error ("block vanished");
        -: 5282:
        -: 5283:        copy_block(buf, (unsigned)stored_len, 0); /* without header */
        -: 5284:        compressed_len = stored_len << 3;
        -: 5285:        *file_method = STORED;
        -: 5286:
        -: 5287:#ifdef FORCE_METHOD
        -: 5288:    } else if (level == 2 && buf != (char*)0) { /* force stored block */
        -: 5289:#else
      195: 5290:    } else if (stored_len+4 <= opt_lenb && buf != (char*)0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 194
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 5291:                       /* 4: two words for the lengths */
        -: 5292:#endif
        -: 5293:        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
        -: 5294:         * Otherwise we can't have processed more than WSIZE input bytes since
        -: 5295:         * the last block flush, because compression would have been
        -: 5296:         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
        -: 5297:         * transform a block into a stored block.
        -: 5298:         */
        1: 5299:        send_bits((STORED_BLOCK<<1)+eof, 3);  /* send block type */
call    0 returned 1
        1: 5300:        compressed_len = (compressed_len + 3 + 7) & ~7L;
        1: 5301:        compressed_len += (stored_len + 4) << 3;
        -: 5302:
        1: 5303:        copy_block(buf, (unsigned)stored_len, 1); /* with header */
call    0 returned 1
        -: 5304:
        -: 5305:#ifdef FORCE_METHOD
        -: 5306:    } else if (level == 3) { /* force static trees */
        -: 5307:#else
      194: 5308:    } else if (static_lenb == opt_lenb) {
branch  0 taken 3 (fallthrough)
branch  1 taken 191
        -: 5309:#endif
        3: 5310:        send_bits((STATIC_TREES<<1)+eof, 3);
call    0 returned 3
        3: 5311:        compress_block((ct_data near *)static_ltree, (ct_data near *)static_dtree);
call    0 returned 3
        3: 5312:        compressed_len += 3 + static_len;
        -: 5313:    } else {
      191: 5314:        send_bits((DYN_TREES<<1)+eof, 3);
call    0 returned 191
      191: 5315:        send_all_trees(l_desc.max_code+1, d_desc.max_code+1, max_blindex+1);
call    0 returned 191
      191: 5316:        compress_block((ct_data near *)dyn_ltree, (ct_data near *)dyn_dtree);
call    0 returned 191
      191: 5317:        compressed_len += 3 + opt_len;
        -: 5318:    }
        -: 5319:    Assert (compressed_len == bits_sent, "bad compressed size");
      195: 5320:    init_block();
call    0 returned 195
        -: 5321:
      195: 5322:    if (eof) {
branch  0 taken 175 (fallthrough)
branch  1 taken 20
        -: 5323:        Assert (input_len == isize, "bad input size");
      175: 5324:        bi_windup();
call    0 returned 175
      175: 5325:        compressed_len += 7;  /* align on byte boundary */
        -: 5326:    }
        -: 5327:    Tracev((stderr,"\ncomprlen %lu(%lu) ", compressed_len>>3,
        -: 5328:           compressed_len-7*eof));
        -: 5329:
      195: 5330:    return compressed_len >> 3;
        -: 5331:}
        -: 5332:
        -: 5333:/* ===========================================================================
        -: 5334: * Save the match info and tally the frequency counts. Return true if
        -: 5335: * the current block must be flushed.
        -: 5336: */
function ct_tally called 1805046 returned 100% blocks executed 100%
  1805046: 5337:int ct_tally (dist, lc)
        -: 5338:    int dist;  /* distance of matched string */
        -: 5339:    int lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
        -: 5340:{
  1805046: 5341:    l_buf[last_lit++] = (uch)lc;
  1805046: 5342:    if (dist == 0) {
branch  0 taken 573409 (fallthrough)
branch  1 taken 1231637
        -: 5343:        /* lc is the unmatched char */
   573409: 5344:        dyn_ltree[lc].Freq++;
        -: 5345:    } else {
        -: 5346:        /* Here, lc is the match length - MIN_MATCH */
  1231637: 5347:        dist--;             /* dist = match distance - 1 */
        -: 5348:        Assert((ush)dist < (ush)MAX_DIST &&
        -: 5349:               (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
        -: 5350:               (ush)d_code(dist) < (ush)D_CODES,  "ct_tally: bad match");
        -: 5351:
  1231637: 5352:        dyn_ltree[length_code[lc]+LITERALS+1].Freq++;
  1231637: 5353:        dyn_dtree[d_code(dist)].Freq++;
branch  0 taken 604093 (fallthrough)
branch  1 taken 627544
        -: 5354:
  1231637: 5355:        d_buf[last_dist++] = (ush)dist;
  1231637: 5356:        flags |= flag_bit;
        -: 5357:    }
  1805046: 5358:    flag_bit <<= 1;
        -: 5359:
        -: 5360:    /* Output the flags if they fill a byte: */
  1805046: 5361:    if ((last_lit & 7) == 0) {
branch  0 taken 225564 (fallthrough)
branch  1 taken 1579482
   225564: 5362:        flag_buf[last_flags++] = flags;
   225564: 5363:        flags = 0, flag_bit = 1;
        -: 5364:    }
        -: 5365:    /* Try to guess if it is profitable to stop the current block here */
  1805046: 5366:    if (level > 2 && (last_lit & 0xfff) == 0) {
branch  0 taken 1545185 (fallthrough)
branch  1 taken 259861
branch  2 taken 252 (fallthrough)
branch  3 taken 1544933
        -: 5367:        /* Compute an upper bound for the compressed length */
      252: 5368:        ulg out_length = (ulg)last_lit*8L;
      252: 5369:        ulg in_length = (ulg)strstart-block_start;
        -: 5370:        int dcode;
     7812: 5371:        for (dcode = 0; dcode < D_CODES; dcode++) {
branch  0 taken 7560
branch  1 taken 252 (fallthrough)
     7560: 5372:            out_length += (ulg)dyn_dtree[dcode].Freq*(5L+extra_dbits[dcode]);
        -: 5373:        }
      252: 5374:        out_length >>= 3;
        -: 5375:        Trace((stderr,"\nlast_lit %u, last_dist %u, in %ld, out ~%ld(%ld%%) ",
        -: 5376:               last_lit, last_dist, in_length, out_length,
        -: 5377:               100L - out_length*100L/in_length));
      252: 5378:        if (last_dist < last_lit/2 && out_length < in_length/2) return 1;
branch  0 taken 11 (fallthrough)
branch  1 taken 241
branch  2 taken 6 (fallthrough)
branch  3 taken 5
        -: 5379:    }
  1805040: 5380:    return (last_lit == LIT_BUFSIZE-1 || last_dist == DIST_BUFSIZE);
branch  0 taken 1805026 (fallthrough)
branch  1 taken 14
branch  2 taken 0 (fallthrough)
branch  3 taken 1805026
        -: 5381:    /* We avoid equality with LIT_BUFSIZE because of wraparound at 64K
        -: 5382:     * on 16 bit machines and because stored blocks are restricted to
        -: 5383:     * 64K-1 bytes.
        -: 5384:     */
        -: 5385:}
        -: 5386:
        -: 5387:/* ===========================================================================
        -: 5388: * Send the block data compressed using the given Huffman trees
        -: 5389: */
function compress_block called 194 returned 100% blocks executed 100%
      194: 5390:local void compress_block(ltree, dtree)
        -: 5391:    ct_data near *ltree; /* literal tree */
        -: 5392:    ct_data near *dtree; /* distance tree */
        -: 5393:{
        -: 5394:    unsigned dist;      /* distance of matched string */
        -: 5395:    int lc;             /* match length or unmatched char (if dist == 0) */
      194: 5396:    unsigned lx = 0;    /* running index in l_buf */
      194: 5397:    unsigned dx = 0;    /* running index in d_buf */
      194: 5398:    unsigned fx = 0;    /* running index in flag_buf */
      194: 5399:    uch flag = 0;       /* current flags */
        -: 5400:    unsigned code;      /* the code to send */
        -: 5401:    int extra;          /* number of extra bits to send */
        -: 5402:
      194: 5403:    if (last_lit != 0) do {
branch  0 taken 192 (fallthrough)
branch  1 taken 2
  1793008: 5404:        if ((lx & 7) == 0) flag = flag_buf[fx++];
branch  0 taken 224213 (fallthrough)
branch  1 taken 1568795
  1793008: 5405:        lc = l_buf[lx++];
  1793008: 5406:        if ((flag & 1) == 0) {
branch  0 taken 561375 (fallthrough)
branch  1 taken 1231633
   561375: 5407:            send_code(lc, ltree); /* send a literal byte */
call    0 returned 561375
        -: 5408:            Tracecv(isgraph(lc), (stderr," '%c' ", lc));
        -: 5409:        } else {
        -: 5410:            /* Here, lc is the match length - MIN_MATCH */
  1231633: 5411:            code = length_code[lc];
  1231633: 5412:            send_code(code+LITERALS+1, ltree); /* send the length code */
call    0 returned 1231633
  1231633: 5413:            extra = extra_lbits[code];
  1231633: 5414:            if (extra != 0) {
branch  0 taken 120169 (fallthrough)
branch  1 taken 1111464
   120169: 5415:                lc -= base_length[code];
   120169: 5416:                send_bits(lc, extra);        /* send the extra length bits */
call    0 returned 120169
        -: 5417:            }
  1231633: 5418:            dist = d_buf[dx++];
        -: 5419:            /* Here, dist is the match distance - 1 */
  1231633: 5420:            code = d_code(dist);
branch  0 taken 604092 (fallthrough)
branch  1 taken 627541
        -: 5421:            Assert (code < D_CODES, "bad d_code");
        -: 5422:
  1231633: 5423:            send_code(code, dtree);       /* send the distance code */
call    0 returned 1231633
  1231633: 5424:            extra = extra_dbits[code];
  1231633: 5425:            if (extra != 0) {
branch  0 taken 821656 (fallthrough)
branch  1 taken 409977
   821656: 5426:                dist -= base_dist[code];
   821656: 5427:                send_bits(dist, extra);   /* send the extra distance bits */
call    0 returned 821656
        -: 5428:            }
        -: 5429:        } /* literal or match pair ? */
  1793008: 5430:        flag >>= 1;
  1793008: 5431:    } while (lx < last_lit);
branch  0 taken 1792816
branch  1 taken 192 (fallthrough)
        -: 5432:
      194: 5433:    send_code(END_BLOCK, ltree);
call    0 returned 194
      194: 5434:}
        -: 5435:
        -: 5436:/* ===========================================================================
        -: 5437: * Set the file type to ASCII or BINARY, using a crude approximation:
        -: 5438: * binary if more than 20% of the bytes are <= 6 or >= 128, ascii otherwise.
        -: 5439: * IN assertion: the fields freq of dyn_ltree are set and the total of all
        -: 5440: * frequencies does not exceed 64K (to fit in an int on 16 bit machines).
        -: 5441: */
function set_file_type called 0 returned 0% blocks executed 0%
    #####: 5442:local void set_file_type()
        -: 5443:{
    #####: 5444:    int n = 0;
    #####: 5445:    unsigned ascii_freq = 0;
    #####: 5446:    unsigned bin_freq = 0;
    #####: 5447:    while (n < 7)        bin_freq += dyn_ltree[n++].Freq;
branch  0 never executed
branch  1 never executed
    #####: 5448:    while (n < 128)    ascii_freq += dyn_ltree[n++].Freq;
branch  0 never executed
branch  1 never executed
    #####: 5449:    while (n < LITERALS) bin_freq += dyn_ltree[n++].Freq;
branch  0 never executed
branch  1 never executed
    #####: 5450:    *file_type = bin_freq > (ascii_freq >> 2) ? BINARY : ASCII;
        -: 5451:    if (*file_type == BINARY && translate_eol) {
        -: 5452:        warn("-l used on binary file", "");
        -: 5453:    }
    #####: 5454:}
        -: 5455:/* unlzh.c -- decompress files in SCO compress -H (LZH) format.
        -: 5456: * The code in this file is directly derived from the public domain 'ar002'
        -: 5457: * written by Haruhiko Okumura.
        -: 5458: */
        -: 5459:
        -: 5460:/* decode.c */
        -: 5461:
        -: 5462:local unsigned  decode  OF((unsigned count, uch buffer[]));
        -: 5463:local void decode_start OF((void));
        -: 5464:
        -: 5465:/* huf.c */
        -: 5466:local void huf_decode_start OF((void));
        -: 5467:local unsigned decode_c     OF((void));
        -: 5468:local unsigned decode_p     OF((void));
        -: 5469:
        -: 5470:/* io.c */
        -: 5471:local void fillbuf      OF((int n));
        -: 5472:local unsigned getbits  OF((int n));
        -: 5473:local void init_getbits OF((void));
        -: 5474:
        -: 5475:#define DICBIT    13    /* 12(-lh4-) or 13(-lh5-) */
        -: 5476:#define DICSIZ ((unsigned) 1 << DICBIT)
        -: 5477:
        -: 5478:#ifndef CHAR_BIT
        -: 5479:#  define CHAR_BIT 8
        -: 5480:#endif
        -: 5481:
        -: 5482:#ifndef UCHAR_MAX
        -: 5483:#  define UCHAR_MAX 255
        -: 5484:#endif
        -: 5485:
        -: 5486:#define BITBUFSIZ (CHAR_BIT * 2 * sizeof(char))
        -: 5487:/* Do not use CHAR_BIT * sizeof(bitbuf), does not work on machines
        -: 5488: * for which short is not on 16 bits (Cray).
        -: 5489: */
        -: 5490:
        -: 5491:/* encode.c and decode.c */
        -: 5492:
        -: 5493:#define MAXMATCH 256    /* formerly F (not more than UCHAR_MAX + 1) */
        -: 5494:#define THRESHOLD  3    /* choose optimal value */
        -: 5495:
        -: 5496:/* huf.c */
        -: 5497:
        -: 5498:#define NC (UCHAR_MAX + MAXMATCH + 2 - THRESHOLD)
        -: 5499:	/* alphabet = {0, 1, 2, ..., NC - 1} */
        -: 5500:#define CBIT 9  /* $\lfloor \log_2 NC \rfloor + 1$ */
        -: 5501:#define CODE_BIT  16  /* codeword length */
        -: 5502:
        -: 5503:#define NP (DICBIT + 1)
        -: 5504:#define NT (CODE_BIT + 3)
        -: 5505:#define PBIT 4  /* smallest integer such that (1U << PBIT) > NP */
        -: 5506:#define TBIT 5  /* smallest integer such that (1U << TBIT) > NT */
        -: 5507:#if NT > NP
        -: 5508:# define NPT NT
        -: 5509:#else
        -: 5510:# define NPT NP
        -: 5511:#endif
        -: 5512:
        -: 5513:/* local ush left[2 * NC - 1]; */
        -: 5514:/* local ush right[2 * NC - 1]; */
        -: 5515:#define left  prev
        -: 5516:#define right head
        -: 5517:#if NC > 1<<(BITS-2)
        -: 5518:    error cannot overlay left+right and prev
        -: 5519:#endif
        -: 5520:
        -: 5521:/* local uch c_len[NC]; */
        -: 5522:#define c_len outbuf
        -: 5523:#if NC > OUTBUFSIZ
        -: 5524:    error cannot overlay c_len and outbuf
        -: 5525:#endif
        -: 5526:
        -: 5527:local uch pt_len[NPT];
        -: 5528:local unsigned blocksize;
        -: 5529:local ush pt_table[256];
        -: 5530:
        -: 5531:/* local ush c_table[4096]; */
        -: 5532:#define c_table d_buf
        -: 5533:#if DIST_BUFSIZE < 4096
        -: 5534:    error cannot overlay c_table and d_buf
        -: 5535:#endif
        -: 5536:
        -: 5537:local ush       bitbuf;
        -: 5538:local unsigned  subbitbuf;
        -: 5539:local int       bitcount;
        -: 5540:
function fillbuf called 0 returned 0% blocks executed 0%
    #####: 5541:local void fillbuf(n)  /* Shift bitbuf n bits left, read n bits */
        -: 5542:    int n;
        -: 5543:{
    #####: 5544:    bitbuf <<= n;
    #####: 5545:    while (n > bitcount) {
branch  0 never executed
branch  1 never executed
    #####: 5546:	bitbuf |= subbitbuf << (n -= bitcount);
    #####: 5547:	subbitbuf = (unsigned)try_byte();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 5548:	if ((int)subbitbuf == EOF) subbitbuf = 0;
branch  0 never executed
branch  1 never executed
    #####: 5549:	bitcount = CHAR_BIT;
        -: 5550:    }
    #####: 5551:    bitbuf |= subbitbuf >> (bitcount -= n);
    #####: 5552:}
        -: 5553:
function getbits called 0 returned 0% blocks executed 0%
    #####: 5554:local unsigned getbits(n)
        -: 5555:    int n;
        -: 5556:{
        -: 5557:    unsigned x;
        -: 5558:
    #####: 5559:    x = bitbuf >> (BITBUFSIZ - n);  fillbuf(n);
call    0 never executed
    #####: 5560:    return x;
        -: 5561:}
        -: 5562:
function init_getbits called 0 returned 0% blocks executed 0%
    #####: 5563:local void init_getbits()
        -: 5564:{
    #####: 5565:    bitbuf = 0;  subbitbuf = 0;  bitcount = 0;
    #####: 5566:    fillbuf(BITBUFSIZ);
call    0 never executed
    #####: 5567:}
        -: 5568:
        -: 5569:/***********************************************************
        -: 5570:	maketbl.c -- make table for decoding
        -: 5571:***********************************************************/
        -: 5572:
function make_table called 0 returned 0% blocks executed 0%
    #####: 5573:local void make_table(nchar, bitlen, tablebits, table)
        -: 5574:    int nchar;
        -: 5575:    uch bitlen[];
        -: 5576:    int tablebits;
        -: 5577:    ush table[];
        -: 5578:{
        -: 5579:    ush count[17], weight[17], start[18], *p;
        -: 5580:    unsigned i, k, len, ch, jutbits, avail, nextcode, mask;
        -: 5581:
    #####: 5582:    for (i = 1; i <= 16; i++) count[i] = 0;
branch  0 never executed
branch  1 never executed
    #####: 5583:    for (i = 0; i < nchar; i++) count[bitlen[i]]++;
branch  0 never executed
branch  1 never executed
        -: 5584:
    #####: 5585:    start[1] = 0;
    #####: 5586:    for (i = 1; i <= 16; i++)
branch  0 never executed
branch  1 never executed
    #####: 5587:	start[i + 1] = start[i] + (count[i] << (16 - i));
    #####: 5588:    if (start[17] != (ush)((unsigned) 1 << 16))
branch  0 never executed
branch  1 never executed
    #####: 5589:	error("Bad table\n");
call    0 never executed
        -: 5590:
    #####: 5591:    jutbits = 16 - tablebits;
    #####: 5592:    for (i = 1; i <= tablebits; i++) {
branch  0 never executed
branch  1 never executed
    #####: 5593:	start[i] >>= jutbits;
    #####: 5594:	weight[i] = (unsigned) 1 << (tablebits - i);
        -: 5595:    }
    #####: 5596:    while (i <= 16) {
branch  0 never executed
branch  1 never executed
    #####: 5597:	weight[i] = (unsigned) 1 << (16 - i);
    #####: 5598:	i++;
        -: 5599:    }
        -: 5600:
    #####: 5601:    i = start[tablebits + 1] >> jutbits;
    #####: 5602:    if (i != (ush)((unsigned) 1 << 16)) {
branch  0 never executed
branch  1 never executed
    #####: 5603:	k = 1 << tablebits;
    #####: 5604:	while (i != k) table[i++] = 0;
branch  0 never executed
branch  1 never executed
        -: 5605:    }
        -: 5606:
    #####: 5607:    avail = nchar;
    #####: 5608:    mask = (unsigned) 1 << (15 - tablebits);
    #####: 5609:    for (ch = 0; ch < nchar; ch++) {
branch  0 never executed
branch  1 never executed
    #####: 5610:	if ((len = bitlen[ch]) == 0) continue;
branch  0 never executed
branch  1 never executed
    #####: 5611:	nextcode = start[len] + weight[len];
    #####: 5612:	if (len <= tablebits) {
branch  0 never executed
branch  1 never executed
    #####: 5613:	    for (i = start[len]; i < nextcode; i++) table[i] = ch;
branch  0 never executed
branch  1 never executed
        -: 5614:	} else {
    #####: 5615:	    k = start[len];
    #####: 5616:	    p = &table[k >> jutbits];
    #####: 5617:	    i = len - tablebits;
    #####: 5618:	    while (i != 0) {
branch  0 never executed
branch  1 never executed
    #####: 5619:		if (*p == 0) {
branch  0 never executed
branch  1 never executed
    #####: 5620:		    right[avail] = left[avail] = 0;
    #####: 5621:		    *p = avail++;
        -: 5622:		}
    #####: 5623:		if (k & mask) p = &right[*p];
branch  0 never executed
branch  1 never executed
    #####: 5624:		else          p = &left[*p];
    #####: 5625:		k <<= 1;  i--;
        -: 5626:	    }
    #####: 5627:	    *p = ch;
        -: 5628:	}
    #####: 5629:	start[len] = nextcode;
        -: 5630:    }
    #####: 5631:}
        -: 5632:
        -: 5633:/***********************************************************
        -: 5634:        huf.c -- static Huffman
        -: 5635:***********************************************************/
        -: 5636:
function read_pt_len called 0 returned 0% blocks executed 0%
    #####: 5637:local void read_pt_len(nn, nbit, i_special)
        -: 5638:    int nn;
        -: 5639:    int nbit;
        -: 5640:    int i_special;
        -: 5641:{
        -: 5642:    int i, c, n;
        -: 5643:    unsigned mask;
        -: 5644:
    #####: 5645:    n = getbits(nbit);
call    0 never executed
    #####: 5646:    if (n == 0) {
branch  0 never executed
branch  1 never executed
    #####: 5647:	c = getbits(nbit);
call    0 never executed
    #####: 5648:	for (i = 0; i < nn; i++) pt_len[i] = 0;
branch  0 never executed
branch  1 never executed
    #####: 5649:	for (i = 0; i < 256; i++) pt_table[i] = c;
branch  0 never executed
branch  1 never executed
        -: 5650:    } else {
    #####: 5651:	i = 0;
    #####: 5652:	while (i < n) {
branch  0 never executed
branch  1 never executed
    #####: 5653:	    c = bitbuf >> (BITBUFSIZ - 3);
    #####: 5654:	    if (c == 7) {
branch  0 never executed
branch  1 never executed
    #####: 5655:		mask = (unsigned) 1 << (BITBUFSIZ - 1 - 3);
    #####: 5656:		while (mask & bitbuf) {  mask >>= 1;  c++;  }
branch  0 never executed
branch  1 never executed
        -: 5657:	    }
    #####: 5658:	    fillbuf((c < 7) ? 3 : c - 3);
call    0 never executed
    #####: 5659:	    pt_len[i++] = c;
    #####: 5660:	    if (i == i_special) {
branch  0 never executed
branch  1 never executed
    #####: 5661:		c = getbits(2);
call    0 never executed
    #####: 5662:		while (--c >= 0) pt_len[i++] = 0;
branch  0 never executed
branch  1 never executed
        -: 5663:	    }
        -: 5664:	}
    #####: 5665:	while (i < nn) pt_len[i++] = 0;
branch  0 never executed
branch  1 never executed
    #####: 5666:	make_table(nn, pt_len, 8, pt_table);
call    0 never executed
        -: 5667:    }
    #####: 5668:}
        -: 5669:
function read_c_len called 0 returned 0% blocks executed 0%
    #####: 5670:local void read_c_len()
        -: 5671:{
        -: 5672:    int i, c, n;
        -: 5673:    unsigned mask;
        -: 5674:
    #####: 5675:    n = getbits(CBIT);
call    0 never executed
    #####: 5676:    if (n == 0) {
branch  0 never executed
branch  1 never executed
    #####: 5677:	c = getbits(CBIT);
call    0 never executed
    #####: 5678:	for (i = 0; i < NC; i++) c_len[i] = 0;
branch  0 never executed
branch  1 never executed
    #####: 5679:	for (i = 0; i < 4096; i++) c_table[i] = c;
branch  0 never executed
branch  1 never executed
        -: 5680:    } else {
    #####: 5681:	i = 0;
    #####: 5682:	while (i < n) {
branch  0 never executed
branch  1 never executed
    #####: 5683:	    c = pt_table[bitbuf >> (BITBUFSIZ - 8)];
    #####: 5684:	    if (c >= NT) {
branch  0 never executed
branch  1 never executed
    #####: 5685:		mask = (unsigned) 1 << (BITBUFSIZ - 1 - 8);
        -: 5686:		do {
    #####: 5687:		    if (bitbuf & mask) c = right[c];
branch  0 never executed
branch  1 never executed
    #####: 5688:		    else               c = left [c];
    #####: 5689:		    mask >>= 1;
    #####: 5690:		} while (c >= NT);
branch  0 never executed
branch  1 never executed
        -: 5691:	    }
    #####: 5692:	    fillbuf((int) pt_len[c]);
call    0 never executed
    #####: 5693:	    if (c <= 2) {
branch  0 never executed
branch  1 never executed
    #####: 5694:		if      (c == 0) c = 1;
branch  0 never executed
branch  1 never executed
    #####: 5695:		else if (c == 1) c = getbits(4) + 3;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 5696:		else             c = getbits(CBIT) + 20;
call    0 never executed
    #####: 5697:		while (--c >= 0) c_len[i++] = 0;
branch  0 never executed
branch  1 never executed
    #####: 5698:	    } else c_len[i++] = c - 2;
        -: 5699:	}
    #####: 5700:	while (i < NC) c_len[i++] = 0;
branch  0 never executed
branch  1 never executed
    #####: 5701:	make_table(NC, c_len, 12, c_table);
call    0 never executed
        -: 5702:    }
    #####: 5703:}
        -: 5704:
function decode_c called 0 returned 0% blocks executed 0%
    #####: 5705:local unsigned decode_c()
        -: 5706:{
        -: 5707:    unsigned j, mask;
        -: 5708:
    #####: 5709:    if (blocksize == 0) {
branch  0 never executed
branch  1 never executed
    #####: 5710:	blocksize = getbits(16);
call    0 never executed
    #####: 5711:	if (blocksize == 0) {
branch  0 never executed
branch  1 never executed
    #####: 5712:	    return NC; /* end of file */
        -: 5713:	}
    #####: 5714:	read_pt_len(NT, TBIT, 3);
call    0 never executed
    #####: 5715:	read_c_len();
call    0 never executed
    #####: 5716:	read_pt_len(NP, PBIT, -1);
call    0 never executed
        -: 5717:    }
    #####: 5718:    blocksize--;
    #####: 5719:    j = c_table[bitbuf >> (BITBUFSIZ - 12)];
    #####: 5720:    if (j >= NC) {
branch  0 never executed
branch  1 never executed
    #####: 5721:	mask = (unsigned) 1 << (BITBUFSIZ - 1 - 12);
        -: 5722:	do {
    #####: 5723:	    if (bitbuf & mask) j = right[j];
branch  0 never executed
branch  1 never executed
    #####: 5724:	    else               j = left [j];
    #####: 5725:	    mask >>= 1;
    #####: 5726:	} while (j >= NC);
branch  0 never executed
branch  1 never executed
        -: 5727:    }
    #####: 5728:    fillbuf((int) c_len[j]);
call    0 never executed
    #####: 5729:    return j;
        -: 5730:}
        -: 5731:
function decode_p called 0 returned 0% blocks executed 0%
    #####: 5732:local unsigned decode_p()
        -: 5733:{
        -: 5734:    unsigned j, mask;
        -: 5735:
    #####: 5736:    j = pt_table[bitbuf >> (BITBUFSIZ - 8)];
    #####: 5737:    if (j >= NP) {
branch  0 never executed
branch  1 never executed
    #####: 5738:	mask = (unsigned) 1 << (BITBUFSIZ - 1 - 8);
        -: 5739:	do {
    #####: 5740:	    if (bitbuf & mask) j = right[j];
branch  0 never executed
branch  1 never executed
    #####: 5741:	    else               j = left [j];
    #####: 5742:	    mask >>= 1;
    #####: 5743:	} while (j >= NP);
branch  0 never executed
branch  1 never executed
        -: 5744:    }
    #####: 5745:    fillbuf((int) pt_len[j]);
call    0 never executed
    #####: 5746:    if (j != 0) j = ((unsigned) 1 << (j - 1)) + getbits((int) (j - 1));
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 5747:    return j;
        -: 5748:}
        -: 5749:
function huf_decode_start called 0 returned 0% blocks executed 0%
    #####: 5750:local void huf_decode_start()
        -: 5751:{
    #####: 5752:    init_getbits();  blocksize = 0;
call    0 never executed
    #####: 5753:}
        -: 5754:
        -: 5755:/***********************************************************
        -: 5756:        decode.c
        -: 5757:***********************************************************/
        -: 5758:
        -: 5759:local int j;    /* remaining bytes to copy */
        -: 5760:local int done; /* set at end of input */
        -: 5761:
function decode_start called 0 returned 0% blocks executed 0%
    #####: 5762:local void decode_start()
        -: 5763:{
    #####: 5764:    huf_decode_start();
call    0 never executed
    #####: 5765:    j = 0;
    #####: 5766:    done = 0;
    #####: 5767:}
        -: 5768:
        -: 5769:/* Decode the input and return the number of decoded bytes put in buffer
        -: 5770: */
function decode called 0 returned 0% blocks executed 0%
    #####: 5771:local unsigned decode(count, buffer)
        -: 5772:    unsigned count;
        -: 5773:    uch buffer[];
        -: 5774:    /* The calling function must keep the number of
        -: 5775:       bytes to be processed.  This function decodes
        -: 5776:       either 'count' bytes or 'DICSIZ' bytes, whichever
        -: 5777:       is smaller, into the array 'buffer[]' of size
        -: 5778:       'DICSIZ' or more.
        -: 5779:       Call decode_start() once for each new file
        -: 5780:       before calling this function.
        -: 5781:     */
        -: 5782:{
        -: 5783:    local unsigned i;
        -: 5784:    unsigned r, c;
        -: 5785:
    #####: 5786:    r = 0;
    #####: 5787:    while (--j >= 0) {
branch  0 never executed
branch  1 never executed
    #####: 5788:	buffer[r] = buffer[i];
    #####: 5789:	i = (i + 1) & (DICSIZ - 1);
    #####: 5790:	if (++r == count) return r;
branch  0 never executed
branch  1 never executed
        -: 5791:    }
        -: 5792:    for ( ; ; ) {
    #####: 5793:	c = decode_c();
call    0 never executed
    #####: 5794:	if (c == NC) {
branch  0 never executed
branch  1 never executed
    #####: 5795:	    done = 1;
    #####: 5796:	    return r;
        -: 5797:	}
    #####: 5798:	if (c <= UCHAR_MAX) {
branch  0 never executed
branch  1 never executed
    #####: 5799:	    buffer[r] = c;
    #####: 5800:	    if (++r == count) return r;
branch  0 never executed
branch  1 never executed
        -: 5801:	} else {
    #####: 5802:	    j = c - (UCHAR_MAX + 1 - THRESHOLD);
    #####: 5803:	    i = (r - decode_p() - 1) & (DICSIZ - 1);
call    0 never executed
    #####: 5804:	    while (--j >= 0) {
branch  0 never executed
branch  1 never executed
    #####: 5805:		buffer[r] = buffer[i];
    #####: 5806:		i = (i + 1) & (DICSIZ - 1);
    #####: 5807:		if (++r == count) return r;
branch  0 never executed
branch  1 never executed
        -: 5808:	    }
        -: 5809:	}
        -: 5810:    }
        -: 5811:}
        -: 5812:
        -: 5813:
        -: 5814:/* ===========================================================================
        -: 5815: * Unlzh in to out. Return OK or ERROR.
        -: 5816: */
function unlzh called 0 returned 0% blocks executed 0%
    #####: 5817:int unlzh(in, out)
        -: 5818:    int in;
        -: 5819:    int out;
        -: 5820:{
        -: 5821:    unsigned n;
    #####: 5822:    ifd = in;
    #####: 5823:    ofd = out;
        -: 5824:
    #####: 5825:    decode_start();
call    0 never executed
    #####: 5826:    while (!done) {
branch  0 never executed
branch  1 never executed
    #####: 5827:	n = decode((unsigned) DICSIZ, window);
call    0 never executed
    #####: 5828:	if (!test && n > 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5829:	    write_buf(out, (char*)window, n);
call    0 never executed
        -: 5830:	}
        -: 5831:    }
    #####: 5832:    return OK;
        -: 5833:}
        -: 5834:/* unlzw.c -- decompress files in LZW format.
        -: 5835: * The code in this file is directly derived from the public domain 'compress'
        -: 5836: * written by Spencer Thomas, Joe Orost, James Woods, Jim McKie, Steve Davies,
        -: 5837: * Ken Turkowski, Dave Mack and Peter Jannesen.
        -: 5838: *
        -: 5839: * This is a temporary version which will be rewritten in some future version
        -: 5840: * to accommodate in-memory decompression.
        -: 5841: */
        -: 5842:
        -: 5843:/*
        -: 5844:#ifndef lint
        -: 5845:static char rcsid[] = "$Id: unlzw.c,v 0.15 1993/06/10 13:28:35 jloup Exp $";
        -: 5846:#endif
        -: 5847:*/
        -: 5848:
        -: 5849:#ifdef HAVE_UNISTD_H
        -: 5850:#  include <unistd.h>
        -: 5851:#endif
        -: 5852:#ifndef NO_FCNTL_H
        -: 5853:#  include <fcntl.h>
        -: 5854:#endif
        -: 5855:
        -: 5856:typedef	unsigned char	char_type;
        -: 5857:typedef          long   code_int;
        -: 5858:typedef unsigned long 	count_int;
        -: 5859:typedef unsigned short	count_short;
        -: 5860:typedef unsigned long 	cmp_code_int;
        -: 5861:
        -: 5862:#define MAXCODE(n)	(1L << (n))
        -: 5863:    
        -: 5864:#ifndef	REGISTERS
        -: 5865:#	define	REGISTERS	2
        -: 5866:#endif
        -: 5867:#define	REG1	
        -: 5868:#define	REG2	
        -: 5869:#define	REG3	
        -: 5870:#define	REG4	
        -: 5871:#define	REG5	
        -: 5872:#define	REG6	
        -: 5873:#define	REG7	
        -: 5874:#define	REG8	
        -: 5875:#define	REG9	
        -: 5876:#define	REG10
        -: 5877:#define	REG11	
        -: 5878:#define	REG12	
        -: 5879:#define	REG13
        -: 5880:#define	REG14
        -: 5881:#define	REG15
        -: 5882:#define	REG16
        -: 5883:#if REGISTERS >= 1
        -: 5884:#	undef	REG1
        -: 5885:#	define	REG1	register
        -: 5886:#endif
        -: 5887:#if REGISTERS >= 2
        -: 5888:#	undef	REG2
        -: 5889:#	define	REG2	register
        -: 5890:#endif
        -: 5891:#if REGISTERS >= 3
        -: 5892:#	undef	REG3
        -: 5893:#	define	REG3	register
        -: 5894:#endif
        -: 5895:#if REGISTERS >= 4
        -: 5896:#	undef	REG4
        -: 5897:#	define	REG4	register
        -: 5898:#endif
        -: 5899:#if REGISTERS >= 5
        -: 5900:#	undef	REG5
        -: 5901:#	define	REG5	register
        -: 5902:#endif
        -: 5903:#if REGISTERS >= 6
        -: 5904:#	undef	REG6
        -: 5905:#	define	REG6	register
        -: 5906:#endif
        -: 5907:#if REGISTERS >= 7
        -: 5908:#	undef	REG7
        -: 5909:#	define	REG7	register
        -: 5910:#endif
        -: 5911:#if REGISTERS >= 8
        -: 5912:#	undef	REG8
        -: 5913:#	define	REG8	register
        -: 5914:#endif
        -: 5915:#if REGISTERS >= 9
        -: 5916:#	undef	REG9
        -: 5917:#	define	REG9	register
        -: 5918:#endif
        -: 5919:#if REGISTERS >= 10
        -: 5920:#	undef	REG10
        -: 5921:#	define	REG10	register
        -: 5922:#endif
        -: 5923:#if REGISTERS >= 11
        -: 5924:#	undef	REG11
        -: 5925:#	define	REG11	register
        -: 5926:#endif
        -: 5927:#if REGISTERS >= 12
        -: 5928:#	undef	REG12
        -: 5929:#	define	REG12	register
        -: 5930:#endif
        -: 5931:#if REGISTERS >= 13
        -: 5932:#	undef	REG13
        -: 5933:#	define	REG13	register
        -: 5934:#endif
        -: 5935:#if REGISTERS >= 14
        -: 5936:#	undef	REG14
        -: 5937:#	define	REG14	register
        -: 5938:#endif
        -: 5939:#if REGISTERS >= 15
        -: 5940:#	undef	REG15
        -: 5941:#	define	REG15	register
        -: 5942:#endif
        -: 5943:#if REGISTERS >= 16
        -: 5944:#	undef	REG16
        -: 5945:#	define	REG16	register
        -: 5946:#endif
        -: 5947:    
        -: 5948:#ifndef	BYTEORDER
        -: 5949:#	define	BYTEORDER	0000
        -: 5950:#endif
        -: 5951:	
        -: 5952:#ifndef	NOALLIGN
        -: 5953:#	define	NOALLIGN	0
        -: 5954:#endif
        -: 5955:
        -: 5956:
        -: 5957:union	bytes {
        -: 5958:    long  word;
        -: 5959:    struct {
        -: 5960:#if BYTEORDER == 4321
        -: 5961:	char_type	b1;
        -: 5962:	char_type	b2;
        -: 5963:	char_type	b3;
        -: 5964:	char_type	b4;
        -: 5965:#else
        -: 5966:#if BYTEORDER == 1234
        -: 5967:	char_type	b4;
        -: 5968:	char_type	b3;
        -: 5969:	char_type	b2;
        -: 5970:	char_type	b1;
        -: 5971:#else
        -: 5972:#	undef	BYTEORDER
        -: 5973:	int  dummy;
        -: 5974:#endif
        -: 5975:#endif
        -: 5976:    } bytes;
        -: 5977:};
        -: 5978:
        -: 5979:#if BYTEORDER == 4321 && NOALLIGN == 1
        -: 5980:#  define input(b,o,c,n,m){ \
        -: 5981:     (c) = (*(long *)(&(b)[(o)>>3])>>((o)&0x7))&(m); \
        -: 5982:     (o) += (n); \
        -: 5983:   }
        -: 5984:#else
        -: 5985:#  define input(b,o,c,n,m){ \
        -: 5986:     REG1 char_type *p = &(b)[(o)>>3]; \
        -: 5987:     (c) = ((((long)(p[0]))|((long)(p[1])<<8)| \
        -: 5988:     ((long)(p[2])<<16))>>((o)&0x7))&(m); \
        -: 5989:     (o) += (n); \
        -: 5990:   }
        -: 5991:#endif
        -: 5992:
        -: 5993:#ifndef MAXSEG_64K
        -: 5994:   /* DECLARE(ush, tab_prefix, (1<<BITS)); -- prefix code */
        -: 5995:#  define tab_prefixof(i) tab_prefix[i]
        -: 5996:#  define clear_tab_prefixof()	memzero(tab_prefix, 256);
        -: 5997:#else
        -: 5998:   /* DECLARE(ush, tab_prefix0, (1<<(BITS-1)); -- prefix for even codes */
        -: 5999:   /* DECLARE(ush, tab_prefix1, (1<<(BITS-1)); -- prefix for odd  codes */
        -: 6000:   ush *tab_prefix[2];
        -: 6001:#  define tab_prefixof(i) tab_prefix[(i)&1][(i)>>1]
        -: 6002:#  define clear_tab_prefixof()	\
        -: 6003:      memzero(tab_prefix0, 128), \
        -: 6004:      memzero(tab_prefix1, 128);
        -: 6005:#endif
        -: 6006:#define de_stack        ((char_type *)(&d_buf[DIST_BUFSIZE-1]))
        -: 6007:#define tab_suffixof(i) tab_suffix[i]
        -: 6008:
        -: 6009:int block_mode = BLOCK_MODE; /* block compress mode -C compatible with 2.0 */
        -: 6010:
        -: 6011:/* ============================================================================
        -: 6012: * Decompress in to out.  This routine adapts to the codes in the
        -: 6013: * file building the "string" table on-the-fly; requiring no table to
        -: 6014: * be stored in the compressed file.
        -: 6015: * IN assertions: the buffer inbuf contains already the beginning of
        -: 6016: *   the compressed data, from offsets iptr to insize-1 included.
        -: 6017: *   The magic header has already been checked and skipped.
        -: 6018: *   bytes_in and bytes_out have been initialized.
        -: 6019: */
function unlzw called 1 returned 100% blocks executed 77%
        1: 6020:int unlzw(in, out) 
        -: 6021:    int in, out;    /* input and output file descriptors */
        -: 6022:{
        -: 6023:    REG2   char_type  *stackp;
        -: 6024:    REG3   code_int   code;
        -: 6025:    REG4   int        finchar;
        -: 6026:    REG5   code_int   oldcode;
        -: 6027:    REG6   code_int   incode;
        -: 6028:    REG7   long       inbits;
        -: 6029:    REG8   long       posbits;
        -: 6030:    REG9   int        outpos;
        -: 6031:/*  REG10  int        insize; (global) */
        -: 6032:    REG11  unsigned   bitmask;
        -: 6033:    REG12  code_int   free_ent;
        -: 6034:    REG13  code_int   maxcode;
        -: 6035:    REG14  code_int   maxmaxcode;
        -: 6036:    REG15  int        n_bits;
        -: 6037:    REG16  int        rsize;
        -: 6038:    
        -: 6039:#ifdef MAXSEG_64K
        -: 6040:    tab_prefix[0] = tab_prefix0;
        -: 6041:    tab_prefix[1] = tab_prefix1;
        -: 6042:#endif
       1*: 6043:    maxbits = get_byte();
branch  0 taken 1 (fallthrough)
branch  1 taken 0
call    2 never executed
        1: 6044:    block_mode = maxbits & BLOCK_MODE;
        1: 6045:    if ((maxbits & LZW_RESERVED) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6046:	WARN((stderr, "\n%s: %s: warning, unknown flags 0x%x\n",
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 6047:	      progname, ifname, maxbits & LZW_RESERVED));
        -: 6048:    }
        1: 6049:    maxbits &= BIT_MASK;
        1: 6050:    maxmaxcode = MAXCODE(maxbits);
        -: 6051:    
        1: 6052:    if (maxbits > BITS) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6053:	fprintf(stderr,
call    0 never executed
        -: 6054:		"\n%s: %s: compressed with %d bits, can only handle %d bits\n",
        -: 6055:		progname, ifname, maxbits, BITS);
    #####: 6056:	exit_code = ERROR;
    #####: 6057:	return ERROR;
        -: 6058:    }
        1: 6059:    rsize = insize;
        1: 6060:    maxcode = MAXCODE(n_bits = INIT_BITS)-1;
        1: 6061:    bitmask = (1<<n_bits)-1;
        1: 6062:    oldcode = -1;
        1: 6063:    finchar = 0;
        1: 6064:    outpos = 0;
        1: 6065:    posbits = inptr<<3;
        -: 6066:
       1*: 6067:    free_ent = ((block_mode) ? FIRST : 256);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 6068:    
        1: 6069:    clear_tab_prefixof(); /* Initialize the first 256 entries in the table. */
        -: 6070:    
      257: 6071:    for (code = 255 ; code >= 0 ; --code) {
branch  0 taken 256
branch  1 taken 1 (fallthrough)
      256: 6072:	tab_suffixof(code) = (char_type)code;
        -: 6073:    }
        -: 6074:    do {
        -: 6075:	REG1 int i;
        -: 6076:	int  e;
        -: 6077:	int  o;
        -: 6078:	
        1: 6079:    resetbuf:
        7: 6080:	e = insize-(o = (posbits>>3));
        -: 6081:	
    74495: 6082:	for (i = 0 ; i < e ; ++i) {
branch  0 taken 74488
branch  1 taken 7 (fallthrough)
    74488: 6083:	    inbuf[i] = inbuf[i+o];
        -: 6084:	}
        7: 6085:	insize = e;
        7: 6086:	posbits = 0;
        -: 6087:	
        7: 6088:	if (insize < INBUF_EXTRA) {
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        1: 6089:	    if ((rsize = read(in, (char*)inbuf+insize, INBUFSIZ)) == EOF) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 6090:		read_error();
call    0 never executed
        -: 6091:	    }
        1: 6092:	    insize += rsize;
        1: 6093:	    bytes_in += (ulg)rsize;
        -: 6094:	}
        7: 6095:	inbits = ((rsize != 0) ? ((long)insize - insize%n_bits)<<3 : 
branch  0 taken 6 (fallthrough)
branch  1 taken 1
        1: 6096:		  ((long)insize<<3)-(n_bits-1));
        -: 6097:	
    10145: 6098:	while (inbits > posbits) {
branch  0 taken 10143
branch  1 taken 2 (fallthrough)
    10143: 6099:	    if (free_ent > maxcode) {
branch  0 taken 5 (fallthrough)
branch  1 taken 10138
        5: 6100:		posbits = ((posbits-1) +
        5: 6101:			   ((n_bits<<3)-(posbits-1+(n_bits<<3))%(n_bits<<3)));
        5: 6102:		++n_bits;
        5: 6103:		if (n_bits == maxbits) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####: 6104:		    maxcode = maxmaxcode;
        -: 6105:		} else {
        5: 6106:		    maxcode = MAXCODE(n_bits)-1;
        -: 6107:		}
        5: 6108:		bitmask = (1<<n_bits)-1;
        5: 6109:		goto resetbuf;
        -: 6110:	    }
    10138: 6111:	    input(inbuf,posbits,code,n_bits,bitmask);
        -: 6112:	    
    10138: 6113:	    if (oldcode == -1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 10137
        1: 6114:		outbuf[outpos++] = (char_type)(finchar = (int)(oldcode=code));
        1: 6115:		continue;
        -: 6116:	    }
   10137*: 6117:	    if (code == CLEAR && block_mode) {
branch  0 taken 0 (fallthrough)
branch  1 taken 10137
branch  2 never executed
branch  3 never executed
    #####: 6118:		clear_tab_prefixof();
    #####: 6119:		free_ent = FIRST - 1;
    #####: 6120:		posbits = ((posbits-1) +
    #####: 6121:			   ((n_bits<<3)-(posbits-1+(n_bits<<3))%(n_bits<<3)));
    #####: 6122:		maxcode = MAXCODE(n_bits = INIT_BITS)-1;
    #####: 6123:		bitmask = (1<<n_bits)-1;
    #####: 6124:		goto resetbuf;
        -: 6125:	    }
    10137: 6126:	    incode = code;
    10137: 6127:	    stackp = de_stack;
        -: 6128:	    
    10137: 6129:	    if (code >= free_ent) { /* Special case for KwKwK string. */
branch  0 taken 17 (fallthrough)
branch  1 taken 10120
       17: 6130:		if (code > free_ent) {
branch  0 taken 0 (fallthrough)
branch  1 taken 17
        -: 6131:#ifdef DEBUG		    
        -: 6132:		    char_type *p;
        -: 6133:
        -: 6134:		    posbits -= n_bits;
        -: 6135:		    p = &inbuf[posbits>>3];
        -: 6136:		    fprintf(stderr,
        -: 6137:			    "code:%ld free_ent:%ld n_bits:%d insize:%u\n",
        -: 6138:			    code, free_ent, n_bits, insize);
        -: 6139:		    fprintf(stderr,
        -: 6140:			    "posbits:%ld inbuf:%02X %02X %02X %02X %02X\n",
        -: 6141:			    posbits, p[-1],p[0],p[1],p[2],p[3]);
        -: 6142:#endif
    #####: 6143:		    if (!test && outpos > 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6144:			write_buf(out, (char*)outbuf, outpos);
call    0 never executed
    #####: 6145:			bytes_out += (ulg)outpos;
        -: 6146:		    }
    #####: 6147:		    error("corrupt input. Use zcat to recover some data.");
call    0 never executed
        -: 6148:		}
       17: 6149:		*--stackp = (char_type)finchar;
       17: 6150:		code = oldcode;
        -: 6151:	    }
        -: 6152:
    34213: 6153:	    while ((cmp_code_int)code >= (cmp_code_int)256) {
branch  0 taken 24076
branch  1 taken 10137 (fallthrough)
        -: 6154:		/* Generate output characters in reverse order */
    24076: 6155:		*--stackp = tab_suffixof(code);
    24076: 6156:		code = tab_prefixof(code);
        -: 6157:	    }
    10137: 6158:	    *--stackp =	(char_type)(finchar = tab_suffixof(code));
        -: 6159:	    
        -: 6160:	    /* And put them out in forward order */
        -: 6161:	    {
        -: 6162:		REG1 int	i;
        -: 6163:	    
    10137: 6164:		if (outpos+(i = (de_stack-stackp)) >= OUTBUFSIZ) {
branch  0 taken 2 (fallthrough)
branch  1 taken 10135
        -: 6165:		    do {
        4: 6166:			if (i > OUTBUFSIZ-outpos) i = OUTBUFSIZ-outpos;
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        -: 6167:
        4: 6168:			if (i > 0) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6169:			    memcpy(outbuf+outpos, stackp, i);
        4: 6170:			    outpos += i;
        -: 6171:			}
        4: 6172:			if (outpos >= OUTBUFSIZ) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2: 6173:			    if (!test) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 6174:				write_buf(out, (char*)outbuf, outpos);
call    0 returned 2
        2: 6175:				bytes_out += (ulg)outpos;
        -: 6176:			    }
        2: 6177:			    outpos = 0;
        -: 6178:			}
        4: 6179:			stackp+= i;
        4: 6180:		    } while ((i = (de_stack-stackp)) > 0);
branch  0 taken 2
branch  1 taken 2
        -: 6181:		} else {
    10135: 6182:		    memcpy(outbuf+outpos, stackp, i);
    10135: 6183:		    outpos += i;
        -: 6184:		}
        -: 6185:	    }
        -: 6186:
    10137: 6187:	    if ((code = free_ent) < maxmaxcode) { /* Generate the new entry. */
branch  0 taken 10137 (fallthrough)
branch  1 taken 0
        -: 6188:
    10137: 6189:		tab_prefixof(code) = (unsigned short)oldcode;
    10137: 6190:		tab_suffixof(code) = (char_type)finchar;
    10137: 6191:		free_ent = code+1;
        -: 6192:	    } 
    10137: 6193:	    oldcode = incode;	/* Remember previous code.	*/
        -: 6194:	}
        2: 6195:    } while (rsize != 0);
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -: 6196:    
        1: 6197:    if (!test && outpos > 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 6198:	write_buf(out, (char*)outbuf, outpos);
call    0 returned 1
        1: 6199:	bytes_out += (ulg)outpos;
        -: 6200:    }
        1: 6201:    return OK;
        -: 6202:}
        -: 6203:/* unpack.c -- decompress files in pack format.
        -: 6204: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 6205: * This is free software; you can redistribute it and/or modify it under the
        -: 6206: * terms of the GNU General Public License, see the file COPYING.
        -: 6207: */
        -: 6208:
        -: 6209:/*
        -: 6210:#ifndef lint
        -: 6211:static char rcsid[] = "$Id: unpack.c,v 1.4 1993/06/11 19:25:36 jloup Exp $";
        -: 6212:#endif
        -: 6213:*/
        -: 6214:
        -: 6215:#define MIN(a,b) ((a) <= (b) ? (a) : (b))
        -: 6216:/* The arguments must not have side effects. */
        -: 6217:
        -: 6218:#define MAX_BITLEN 25
        -: 6219:/* Maximum length of Huffman codes. (Minor modifications to the code
        -: 6220: * would be needed to support 32 bits codes, but pack never generates
        -: 6221: * more than 24 bits anyway.)
        -: 6222: */
        -: 6223:
        -: 6224:#define LITERALS 256
        -: 6225:/* Number of literals, excluding the End of Block (EOB) code */
        -: 6226:
        -: 6227:#define MAX_PEEK 12
        -: 6228:/* Maximum number of 'peek' bits used to optimize traversal of the
        -: 6229: * Huffman tree.
        -: 6230: */
        -: 6231:
        -: 6232:local ulg orig_len;       /* original uncompressed length */
        -: 6233:local int max_len;        /* maximum bit length of Huffman codes */
        -: 6234:
        -: 6235:local uch literal[LITERALS];
        -: 6236:/* The literal bytes present in the Huffman tree. The EOB code is not
        -: 6237: * represented.
        -: 6238: */
        -: 6239:
        -: 6240:local int lit_base[MAX_BITLEN+1];
        -: 6241:/* All literals of a given bit length are contiguous in literal[] and
        -: 6242: * have contiguous codes. literal[code+lit_base[len]] is the literal
        -: 6243: * for a code of len bits.
        -: 6244: */
        -: 6245:
        -: 6246:local int leaves [MAX_BITLEN+1]; /* Number of leaves for each bit length */
        -: 6247:local int parents[MAX_BITLEN+1]; /* Number of parents for each bit length */
        -: 6248:
        -: 6249:local int peek_bits; /* Number of peek bits currently used */
        -: 6250:
        -: 6251:/* local uch prefix_len[1 << MAX_PEEK]; */
        -: 6252:#define prefix_len outbuf
        -: 6253:/* For each bit pattern b of peek_bits bits, prefix_len[b] is the length
        -: 6254: * of the Huffman code starting with a prefix of b (upper bits), or 0
        -: 6255: * if all codes of prefix b have more than peek_bits bits. It is not
        -: 6256: * necessary to have a huge table (large MAX_PEEK) because most of the
        -: 6257: * codes encountered in the input stream are short codes (by construction).
        -: 6258: * So for most codes a single lookup will be necessary.
        -: 6259: */
        -: 6260:#if 1<<MAX_PEEK > OUTBUFSIZ
        -: 6261:    error cannot overlay prefix_len and outbuf
        -: 6262:#endif
        -: 6263:
        -: 6264:local ulg un_bitbuf;
        -: 6265:/* Bits are added on the low part of bitbuf and read from the high part. */
        -: 6266:
        -: 6267:local int valid;                  /* number of valid bits in bitbuf */
        -: 6268:/* all bits above the last valid bit are always zero */
        -: 6269:
        -: 6270:/* Set code to the next 'bits' input bits without skipping them. code
        -: 6271: * must be the name of a simple variable and bits must not have side effects.
        -: 6272: * IN assertions: bits <= 25 (so that we still have room for an extra byte
        -: 6273: * when valid is only 24), and mask = (1<<bits)-1.
        -: 6274: */
        -: 6275:#define look_bits(code,bits,mask) \
        -: 6276:{ \
        -: 6277:  while (valid < (bits)) un_bitbuf = (un_bitbuf<<8) | (ulg)get_byte(), valid += 8; \
        -: 6278:  code = (un_bitbuf >> (valid-(bits))) & (mask); \
        -: 6279:}
        -: 6280:
        -: 6281:/* Skip the given number of bits (after having peeked at them): */
        -: 6282:#define skip_bits(bits)  (valid -= (bits))
        -: 6283:
        -: 6284:#define clear_bitbuf() (valid = 0, un_bitbuf = 0)
        -: 6285:
        -: 6286:/* Local functions */
        -: 6287:
        -: 6288:local void read_tree  OF((void));
        -: 6289:local void un_build_tree OF((void));
        -: 6290:
        -: 6291:/* ===========================================================================
        -: 6292: * Read the Huffman tree.
        -: 6293: */
function read_tree called 1 returned 100% blocks executed 74%
        1: 6294:local void read_tree()
        -: 6295:{
        -: 6296:    int len;  /* bit length */
        -: 6297:    int base; /* base offset for a sequence of leaves */
        -: 6298:    int n;
        -: 6299:
        -: 6300:    /* Read the original input size, MSB first */
        1: 6301:    orig_len = 0;
       5*: 6302:    for (n = 1; n <= 4; n++) orig_len = (orig_len << 8) | (ulg)get_byte();
branch  0 taken 4 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 4
branch  4 taken 1 (fallthrough)
        -: 6303:
       1*: 6304:    max_len = (int)get_byte(); /* maximum bit length of Huffman codes */
branch  0 taken 1 (fallthrough)
branch  1 taken 0
call    2 never executed
        1: 6305:    if (max_len > MAX_BITLEN) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6306:	error("invalid compressed data -- Huffman code > 32 bits");
call    0 never executed
        -: 6307:    }
        -: 6308:
        -: 6309:    /* Get the number of leaves at each bit length */
        1: 6310:    n = 0;
       17: 6311:    for (len = 1; len <= max_len; len++) {
branch  0 taken 16
branch  1 taken 1 (fallthrough)
      16*: 6312:	leaves[len] = (int)get_byte();
branch  0 taken 16 (fallthrough)
branch  1 taken 0
call    2 never executed
       16: 6313:	n += leaves[len];
        -: 6314:    }
        1: 6315:    if (n > LITERALS) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6316:	error("too many leaves in Huffman tree");
call    0 never executed
        -: 6317:    }
        -: 6318:    Trace((stderr, "orig_len %ld, max_len %d, leaves %d\n",
        -: 6319:	   orig_len, max_len, n));
        -: 6320:    /* There are at least 2 and at most 256 leaves of length max_len.
        -: 6321:     * (Pack arbitrarily rejects empty files and files consisting of
        -: 6322:     * a single byte even repeated.) To fit the last leaf count in a
        -: 6323:     * byte, it is offset by 2. However, the last literal is the EOB
        -: 6324:     * code, and is not transmitted explicitly in the tree, so we must
        -: 6325:     * adjust here by one only.
        -: 6326:     */
        1: 6327:    leaves[max_len]++;
        -: 6328:
        -: 6329:    /* Now read the leaves themselves */
        1: 6330:    base = 0;
       17: 6331:    for (len = 1; len <= max_len; len++) {
branch  0 taken 16
branch  1 taken 1 (fallthrough)
        -: 6332:	/* Remember where the literals of this length start in literal[] : */
       16: 6333:	lit_base[len] = base;
        -: 6334:	/* And read the literals: */
      107: 6335:	for (n = leaves[len]; n > 0; n--) {
branch  0 taken 91
branch  1 taken 16 (fallthrough)
      91*: 6336:	    literal[base++] = (uch)get_byte();
branch  0 taken 91 (fallthrough)
branch  1 taken 0
call    2 never executed
        -: 6337:	}
        -: 6338:    }
        1: 6339:    leaves[max_len]++; /* Now include the EOB code in the Huffman tree */
        1: 6340:}
        -: 6341:
        -: 6342:/* ===========================================================================
        -: 6343: * Build the Huffman tree and the prefix table.
        -: 6344: */
function un_build_tree called 1 returned 100% blocks executed 100%
        1: 6345:local void un_build_tree()
        -: 6346:{
        1: 6347:    int nodes = 0; /* number of nodes (parents+leaves) at current bit length */
        -: 6348:    int len;       /* current bit length */
        -: 6349:    uch *prefixp;  /* pointer in prefix_len */
        -: 6350:
       17: 6351:    for (len = max_len; len >= 1; len--) {
branch  0 taken 16
branch  1 taken 1 (fallthrough)
        -: 6352:	/* The number of parent nodes at this level is half the total
        -: 6353:	 * number of nodes at parent level:
        -: 6354:	 */
       16: 6355:	nodes >>= 1;
       16: 6356:	parents[len] = nodes;
        -: 6357:	/* Update lit_base by the appropriate bias to skip the parent nodes
        -: 6358:	 * (which are not represented in the literal array):
        -: 6359:	 */
       16: 6360:	lit_base[len] -= nodes;
        -: 6361:	/* Restore nodes to be parents+leaves: */
       16: 6362:	nodes += leaves[len];
        -: 6363:    }
        -: 6364:    /* Construct the prefix table, from shortest leaves to longest ones.
        -: 6365:     * The shortest code is all ones, so we start at the end of the table.
        -: 6366:     */
        1: 6367:    peek_bits = MIN(max_len, MAX_PEEK);
        1: 6368:    prefixp = &prefix_len[1<<peek_bits];
       13: 6369:    for (len = 1; len <= peek_bits; len++) {
branch  0 taken 12
branch  1 taken 1 (fallthrough)
       12: 6370:	int prefixes = leaves[len] << (peek_bits-len); /* may be 0 */
     4103: 6371:	while (prefixes--) *--prefixp = (uch)len;
branch  0 taken 4091
branch  1 taken 12 (fallthrough)
        -: 6372:    }
        -: 6373:    /* The length of all other codes is unknown: */
        6: 6374:    while (prefixp > prefix_len) *--prefixp = 0;
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        1: 6375:}
        -: 6376:
        -: 6377:/* ===========================================================================
        -: 6378: * Unpack in to out.  This routine does not support the old pack format
        -: 6379: * with magic header \037\037.
        -: 6380: *
        -: 6381: * IN assertions: the buffer inbuf contains already the beginning of
        -: 6382: *   the compressed data, from offsets inptr to insize-1 included.
        -: 6383: *   The magic header has already been checked. The output buffer is cleared.
        -: 6384: */
function unpack called 1 returned 100% blocks executed 84%
        1: 6385:int unpack(in, out)
        -: 6386:    int in, out;            /* input and output file descriptors */
        -: 6387:{
        -: 6388:    int len;                /* Bit length of current code */
        -: 6389:    unsigned eob;           /* End Of Block code */
        -: 6390:    register unsigned peek; /* lookahead bits */
        -: 6391:    unsigned peek_mask;     /* Mask for peek_bits bits */
        -: 6392:
        1: 6393:    ifd = in;
        1: 6394:    ofd = out;
        -: 6395:
        1: 6396:    read_tree();     /* Read the Huffman tree */
call    0 returned 1
        1: 6397:    un_build_tree();    /* Build the prefix table */
call    0 returned 1
        1: 6398:    clear_bitbuf();  /* Initialize bit input */
        1: 6399:    peek_mask = (1<<peek_bits)-1;
        -: 6400:
        -: 6401:    /* The eob code is the largest code among all leaves of maximal length: */
        1: 6402:    eob = leaves[max_len]-1;
        -: 6403:    Trace((stderr, "eob %d %x\n", max_len, eob));
        -: 6404:
        -: 6405:    /* Decode the input data: */
        -: 6406:    for (;;) {
        -: 6407:	/* Since eob is the longest code and not shorter than max_len,
        -: 6408:         * we can peek at max_len bits without having the risk of reading
        -: 6409:         * beyond the end of file.
        -: 6410:	 */
   54270*: 6411:	look_bits(peek, peek_bits, peek_mask);
branch  0 taken 20038 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 20038
branch  4 taken 34232 (fallthrough)
    34232: 6412:	len = prefix_len[peek];
    34232: 6413:	if (len > 0) {
branch  0 taken 34184 (fallthrough)
branch  1 taken 48
    34184: 6414:	    peek >>= peek_bits - len; /* discard the extra bits */
        -: 6415:	} else {
        -: 6416:	    /* Code of more than peek_bits bits, we must traverse the tree */
       48: 6417:	    ulg mask = peek_mask;
       48: 6418:	    len = peek_bits;
        -: 6419:	    do {
       76: 6420:                len++, mask = (mask<<1)+1;
      84*: 6421:		look_bits(peek, len, mask);
branch  0 taken 8 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 8
branch  4 taken 76 (fallthrough)
       76: 6422:	    } while (peek < parents[len]);
branch  0 taken 28
branch  1 taken 48 (fallthrough)
        -: 6423:	    /* loop as long as peek is a parent node */
        -: 6424:	}
        -: 6425:	/* At this point, peek is the next complete code, of len bits */
    34232: 6426:	if (peek == eob && len == max_len) break; /* end of file? */
branch  0 taken 2 (fallthrough)
branch  1 taken 34230
branch  2 taken 1 (fallthrough)
branch  3 taken 1
    34231: 6427:	put_ubyte(literal[peek+lit_base[len]]);
branch  0 taken 1 (fallthrough)
branch  1 taken 34230
call    2 returned 1
        -: 6428:	Tracev((stderr,"%02d %04x %c\n", len, peek,
        -: 6429:		literal[peek+lit_base[len]]));
    34231: 6430:	skip_bits(len);
        -: 6431:    } /* for (;;) */
        -: 6432:
        1: 6433:    flush_window();
call    0 returned 1
        -: 6434:    Trace((stderr, "bytes_out %ld\n", bytes_out));
        1: 6435:    if (orig_len != bytes_out) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6436:	error("invalid compressed data--length error");
call    0 never executed
        -: 6437:    }
        1: 6438:    return OK;
        -: 6439:}
        -: 6440:/* unzip.c -- decompress files in gzip or pkzip format.
        -: 6441: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 6442: * This is free software; you can redistribute it and/or modify it under the
        -: 6443: * terms of the GNU General Public License, see the file COPYING.
        -: 6444: *
        -: 6445: * The code in this file is derived from the file funzip.c written
        -: 6446: * and put in the public domain by Mark Adler.
        -: 6447: */
        -: 6448:
        -: 6449:/*
        -: 6450:   This version can extract files in gzip or pkzip format.
        -: 6451:   For the latter, only the first entry is extracted, and it has to be
        -: 6452:   either deflated or stored.
        -: 6453: */
        -: 6454:
        -: 6455:/*
        -: 6456:#ifndef lint
        -: 6457:static char rcsid[] = "$Id: unzip.c,v 0.13 1993/06/10 13:29:00 jloup Exp $";
        -: 6458:#endif
        -: 6459:*/
        -: 6460:
        -: 6461:/* PKZIP header definitions */
        -: 6462:#define LOCSIG 0x04034b50L      /* four-byte lead-in (lsb first) */
        -: 6463:#define LOCFLG 6                /* offset of bit flag */
        -: 6464:#define  CRPFLG 1               /*  bit for encrypted entry */
        -: 6465:#define  EXTFLG 8               /*  bit for extended local header */
        -: 6466:#define LOCHOW 8                /* offset of compression method */
        -: 6467:#define LOCTIM 10               /* file mod time (for decryption) */
        -: 6468:#define LOCCRC 14               /* offset of crc */
        -: 6469:#define LOCSIZ 18               /* offset of compressed size */
        -: 6470:#define LOCLEN 22               /* offset of uncompressed length */
        -: 6471:#define LOCFIL 26               /* offset of file name field length */
        -: 6472:#define LOCEXT 28               /* offset of extra field length */
        -: 6473:#define LOCHDR 30               /* size of local header, including sig */
        -: 6474:#define EXTHDR 16               /* size of extended local header, inc sig */
        -: 6475:
        -: 6476:
        -: 6477:/* Globals */
        -: 6478:
        -: 6479:int decrypt;        /* flag to turn on decryption */
        -: 6480:char *key;          /* not used--needed to link crypt.c */
        -: 6481:int pkzip = 0;      /* set for a pkzip file */
        -: 6482:int ext_header = 0; /* set if extended local header */
        -: 6483:
        -: 6484:/* ===========================================================================
        -: 6485: * Check zip file and advance inptr to the start of the compressed data.
        -: 6486: * Get ofname from the local header if necessary.
        -: 6487: */
function check_zipfile called 2 returned 100% blocks executed 54%
        2: 6488:int check_zipfile(in)
        -: 6489:    int in;   /* input file descriptors */
        -: 6490:{
        2: 6491:    uch *h = inbuf + inptr; /* first local header */
        -: 6492:
        2: 6493:    ifd = in;
        -: 6494:
        -: 6495:    /* Check validity of local header, and skip name and extra fields */
        2: 6496:    inptr += LOCHDR + SH(h + LOCFIL) + SH(h + LOCEXT);
        -: 6497:
        2: 6498:    if (inptr > insize || LG(h) != LOCSIG) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####: 6499:	fprintf(stderr, "\n%s: %s: not a valid zip file\n",
call    0 never executed
        -: 6500:		progname, ifname);
    #####: 6501:	exit_code = ERROR;
    #####: 6502:	return ERROR;
        -: 6503:    }
        2: 6504:    method = h[LOCHOW];
        2: 6505:    if (method != STORED && method != DEFLATED) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####: 6506:	fprintf(stderr,
call    0 never executed
        -: 6507:		"\n%s: %s: first entry not deflated or stored -- use unzip\n",
        -: 6508:		progname, ifname);
    #####: 6509:	exit_code = ERROR;
    #####: 6510:	return ERROR;
        -: 6511:    }
        -: 6512:
        -: 6513:    /* If entry encrypted, decrypt and validate encryption header */
        2: 6514:    if ((decrypt = h[LOCFLG] & CRPFLG) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6515:	fprintf(stderr, "\n%s: %s: encrypted file -- use unzip\n",
call    0 never executed
        -: 6516:		progname, ifname);
    #####: 6517:	exit_code = ERROR;
    #####: 6518:	return ERROR;
        -: 6519:    }
        -: 6520:
        -: 6521:    /* Save flags for unzip() */
        2: 6522:    ext_header = (h[LOCFLG] & EXTFLG) != 0;
        2: 6523:    pkzip = 1;
        -: 6524:
        -: 6525:    /* Get ofname and time stamp from local header (to be done) */
        2: 6526:    return OK;
        -: 6527:}
        -: 6528:
        -: 6529:/* ===========================================================================
        -: 6530: * Unzip in to out.  This routine works on both gzip and pkzip files.
        -: 6531: *
        -: 6532: * IN assertions: the buffer inbuf contains already the beginning of
        -: 6533: *   the compressed data, from offsets inptr to insize-1 included.
        -: 6534: *   The magic header has already been checked. The output buffer is cleared.
        -: 6535: */
function unzip called 12 returned 100% blocks executed 38%
       12: 6536:int unzip(in, out)
        -: 6537:    int in, out;   /* input and output file descriptors */
        -: 6538:{
       12: 6539:    ulg orig_crc = 0;       /* original crc */
       12: 6540:    ulg orig_len = 0;       /* original uncompressed length */
        -: 6541:    int n;
        -: 6542:    uch buf[EXTHDR];        /* extended local header */
        -: 6543:
       12: 6544:    ifd = in;
       12: 6545:    ofd = out;
        -: 6546:
       12: 6547:    updcrc(NULL, 0);           /* initialize crc */
call    0 returned 12
        -: 6548:
       12: 6549:    if (pkzip && !ext_header) {  /* crc and length at the end otherwise */
branch  0 taken 2 (fallthrough)
branch  1 taken 10
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 6550:	orig_crc = LG(inbuf + LOCCRC);
        2: 6551:	orig_len = LG(inbuf + LOCLEN);
        -: 6552:    }
        -: 6553:
        -: 6554:    /* Decompress */
       12: 6555:    if (method == DEFLATED)  {
branch  0 taken 12 (fallthrough)
branch  1 taken 0
        -: 6556:
       12: 6557:	int res = inflate();
call    0 returned 12
        -: 6558:
       12: 6559:	if (res == 3) {
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####: 6560:	    error("out of memory");
call    0 never executed
       12: 6561:	} else if (res != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####: 6562:	    error("invalid compressed data--format violated");
call    0 never executed
        -: 6563:	}
        -: 6564:
    #####: 6565:    } else if (pkzip && method == STORED) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 6566:
    #####: 6567:	register ulg n = LG(inbuf + LOCLEN);
        -: 6568:
    #####: 6569:	if (n != LG(inbuf + LOCSIZ) - (decrypt ? RAND_HEAD_LEN : 0)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 6570:
    #####: 6571:	    fprintf(stderr, "len %ld, siz %ld\n", n, LG(inbuf + LOCSIZ));
call    0 never executed
    #####: 6572:	    error("invalid compressed data--length mismatch");
call    0 never executed
        -: 6573:	}
    #####: 6574:	while (n--) {
branch  0 never executed
branch  1 never executed
    #####: 6575:	    uch c = (uch)get_byte();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 6576:#ifdef CRYPT
        -: 6577:	    if (decrypt) zdecode(c);
        -: 6578:#endif
    #####: 6579:	    put_ubyte(c);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 6580:	}
    #####: 6581:	flush_window();
call    0 never executed
        -: 6582:    } else {
    #####: 6583:	error("internal error, invalid method");
call    0 never executed
        -: 6584:    }
        -: 6585:
        -: 6586:    /* Get the crc and original length */
       12: 6587:    if (!pkzip) {
branch  0 taken 10 (fallthrough)
branch  1 taken 2
        -: 6588:        /* crc32  (see algorithm.doc)
        -: 6589:	 * uncompressed input size modulo 2^32
        -: 6590:         */
       90: 6591:	for (n = 0; n < 8; n++) {
branch  0 taken 80
branch  1 taken 10 (fallthrough)
      80*: 6592:	    buf[n] = (uch)get_byte(); /* may cause an error if EOF */
branch  0 taken 80 (fallthrough)
branch  1 taken 0
call    2 never executed
        -: 6593:	}
       10: 6594:	orig_crc = LG(buf);
       10: 6595:	orig_len = LG(buf+4);
        -: 6596:
        2: 6597:    } else if (ext_header) {  /* If extended header, check it */
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 6598:	/* signature - 4bytes: 0x50 0x4b 0x07 0x08
        -: 6599:	 * CRC-32 value
        -: 6600:         * compressed size 4-bytes
        -: 6601:         * uncompressed size 4-bytes
        -: 6602:	 */
    #####: 6603:	for (n = 0; n < EXTHDR; n++) {
branch  0 never executed
branch  1 never executed
    #####: 6604:	    buf[n] = (uch)get_byte(); /* may cause an error if EOF */
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 6605:	}
    #####: 6606:	orig_crc = LG(buf+4);
    #####: 6607:	orig_len = LG(buf+12);
        -: 6608:    }
        -: 6609:
        -: 6610:    /* Validate decompression */
       12: 6611:    if (orig_crc != updcrc(outbuf, 0)) {
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
    #####: 6612:	error("invalid compressed data--crc error");
call    0 never executed
        -: 6613:    }
       12: 6614:    if (orig_len != bytes_out) {
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####: 6615:	error("invalid compressed data--length error");
call    0 never executed
        -: 6616:    }
        -: 6617:
        -: 6618:    /* Check if there are more entries in a pkzip file */
       12: 6619:    if (pkzip && inptr + 4 < insize && LG(inbuf+inptr) == LOCSIG) {
branch  0 taken 2 (fallthrough)
branch  1 taken 10
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    #####: 6620:	if (to_stdout) {
branch  0 never executed
branch  1 never executed
    #####: 6621:	    WARN((stderr,
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 6622:		  "%s: %s has more than one entry--rest ignored\n",
        -: 6623:		  progname, ifname));
        -: 6624:	} else {
        -: 6625:	    /* Don't destroy the input zip file */
    #####: 6626:	    fprintf(stderr,
call    0 never executed
        -: 6627:		    "%s: %s has more than one entry -- unchanged\n",
        -: 6628:		    progname, ifname);
    #####: 6629:	    exit_code = ERROR;
    #####: 6630:	    ext_header = pkzip = 0;
    #####: 6631:	    return ERROR;
        -: 6632:	}
        -: 6633:    }
       12: 6634:    ext_header = pkzip = 0; /* for next file */
       12: 6635:    return OK;
        -: 6636:}
        -: 6637:/* util.c -- utility functions for gzip support
        -: 6638: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 6639: * This is free software; you can redistribute it and/or modify it under the
        -: 6640: * terms of the GNU General Public License, see the file COPYING.
        -: 6641: */
        -: 6642:
        -: 6643:/*
        -: 6644:#ifndef lint
        -: 6645:static char rcsid[] = "$Id: util.c,v 0.15 1993/06/15 09:04:13 jloup Exp $";
        -: 6646:#endif
        -: 6647:*/
        -: 6648:
        -: 6649:#ifdef HAVE_UNISTD_H
        -: 6650:#  include <unistd.h>
        -: 6651:#endif
        -: 6652:#ifndef NO_FCNTL_H
        -: 6653:#  include <fcntl.h>
        -: 6654:#endif
        -: 6655:
        -: 6656:#if defined(STDC_HEADERS) || !defined(NO_STDLIB_H)
        -: 6657:#  include <stdlib.h>
        -: 6658:#else
        -: 6659:   extern int errno;
        -: 6660:#endif
        -: 6661:
        -: 6662:extern ulg crc_32_tab[];   /* crc table, defined below */
        -: 6663:
        -: 6664:/* ===========================================================================
        -: 6665: * Copy input to output unchanged: zcat == cat with --force.
        -: 6666: * IN assertion: insize bytes have already been read in inbuf.
        -: 6667: */
function copy called 0 returned 0% blocks executed 0%
    #####: 6668:int copy(in, out)
        -: 6669:    int in, out;   /* input and output file descriptors */
        -: 6670:{
    #####: 6671:    errno = 0;
    #####: 6672:    while (insize != 0 && (int)insize != EOF) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6673:	write_buf(out, (char*)inbuf, insize);
call    0 never executed
    #####: 6674:	bytes_out += insize;
    #####: 6675:	insize = read(in, (char*)inbuf, INBUFSIZ);
call    0 never executed
        -: 6676:    }
    #####: 6677:    if ((int)insize == EOF && errno != 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6678:	read_error();
call    0 never executed
        -: 6679:    }
    #####: 6680:    bytes_in = bytes_out;
    #####: 6681:    return OK;
        -: 6682:}
        -: 6683:
        -: 6684:/* ===========================================================================
        -: 6685: * Run a set of bytes through the crc shift register.  If s is a NULL
        -: 6686: * pointer, then initialize the crc shift register contents instead.
        -: 6687: * Return the current crc in either case.
        -: 6688: */
function updcrc called 3621 returned 100% blocks executed 100%
     3621: 6689:ulg updcrc(s, n)
        -: 6690:    uch *s;                 /* pointer to bytes to pump through */
        -: 6691:    unsigned n;             /* number of bytes in s[] */
        -: 6692:{
        -: 6693:    register ulg c;         /* temporary variable */
        -: 6694:
        -: 6695:    static ulg crc = (ulg)0xffffffffL; /* shift register contents */
        -: 6696:
     3621: 6697:    if (s == NULL) {
branch  0 taken 187 (fallthrough)
branch  1 taken 3434
      187: 6698:	c = 0xffffffffL;
        -: 6699:    } else {
     3434: 6700:	c = crc;
     3434: 6701:        if (n) do {
branch  0 taken 3422 (fallthrough)
branch  1 taken 12
111988194: 6702:            c = crc_32_tab[((int)c ^ (*s++)) & 0xff] ^ (c >> 8);
111988194: 6703:        } while (--n);
branch  0 taken 111984772
branch  1 taken 3422 (fallthrough)
        -: 6704:    }
     3621: 6705:    crc = c;
     3621: 6706:    return c ^ 0xffffffffL;       /* (instead of ~c for 64-bit machines) */
        -: 6707:}
        -: 6708:
        -: 6709:/* ===========================================================================
        -: 6710: * Clear input and output buffers
        -: 6711: */
function clear_bufs called 190 returned 100% blocks executed 100%
      190: 6712:void clear_bufs()
        -: 6713:{
      190: 6714:    outcnt = 0;
      190: 6715:    insize = inptr = 0;
      190: 6716:    bytes_in = bytes_out = 0L;
      190: 6717:}
        -: 6718:
        -: 6719:/* ===========================================================================
        -: 6720: * Fill the input buffer. This is called only when the buffer is empty.
        -: 6721: */
function fill_inbuf called 17 returned 94% blocks executed 91%
       17: 6722:int fill_inbuf(eof_ok)
        -: 6723:    int eof_ok;          /* set if EOF acceptable as a result */
        -: 6724:{
        -: 6725:    int len;
        -: 6726:
        -: 6727:    /* Read as much as possible */
       17: 6728:    insize = 0;
       17: 6729:    errno = 0;
        -: 6730:    do {
       31: 6731:	len = read(ifd, (char*)inbuf+insize, INBUFSIZ-insize);
call    0 returned 31
       31: 6732:        if (len == 0 || len == EOF) break;
branch  0 taken 16 (fallthrough)
branch  1 taken 15
branch  2 taken 16 (fallthrough)
branch  3 taken 0
       16: 6733:	insize += len;
       16: 6734:    } while (insize < INBUFSIZ);
branch  0 taken 14
branch  1 taken 2 (fallthrough)
        -: 6735:
       17: 6736:    if (insize == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 16
       1*: 6737:	if (eof_ok) return EOF;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 6738:	read_error();
call    0 returned 0
        -: 6739:    }
       16: 6740:    bytes_in += (ulg)insize;
       16: 6741:    inptr = 1;
       16: 6742:    return inbuf[0];
        -: 6743:}
        -: 6744:
        -: 6745:/* ===========================================================================
        -: 6746: * Write the output buffer outbuf[0..outcnt-1] and update bytes_out.
        -: 6747: * (used for the compressed data only)
        -: 6748: */
function flush_outbuf called 192 returned 100% blocks executed 80%
      192: 6749:void flush_outbuf()
        -: 6750:{
     192*: 6751:    if (outcnt == 0) return;
branch  0 taken 0 (fallthrough)
branch  1 taken 192
        -: 6752:
      192: 6753:    write_buf(ofd, (char *)outbuf, outcnt);
call    0 returned 192
      192: 6754:    bytes_out += (ulg)outcnt;
      192: 6755:    outcnt = 0;
        -: 6756:}
        -: 6757:
        -: 6758:/* ===========================================================================
        -: 6759: * Write the output window window[0..outcnt-1] and update crc and bytes_out.
        -: 6760: * (Used for the decompressed data only.)
        -: 6761: */
function flush_window called 27 returned 100% blocks executed 86%
       27: 6762:void flush_window()
        -: 6763:{
      27*: 6764:    if (outcnt == 0) return;
branch  0 taken 0 (fallthrough)
branch  1 taken 27
       27: 6765:    updcrc(window, outcnt);
call    0 returned 27
        -: 6766:
       27: 6767:    if (!test) {
branch  0 taken 21 (fallthrough)
branch  1 taken 6
       21: 6768:	write_buf(ofd, (char *)window, outcnt);
call    0 returned 21
        -: 6769:    }
       27: 6770:    bytes_out += (ulg)outcnt;
       27: 6771:    outcnt = 0;
        -: 6772:}
        -: 6773:
        -: 6774:/* ===========================================================================
        -: 6775: * Does the same as write(), but also handles partial pipe writes and checks
        -: 6776: * for error return.
        -: 6777: */
function write_buf called 216 returned 100% blocks executed 57%
      216: 6778:void write_buf(fd, buf, cnt)
        -: 6779:    int       fd;
        -: 6780:    voidp     buf;
        -: 6781:    unsigned  cnt;
        -: 6782:{
        -: 6783:    unsigned  n;
        -: 6784:
      216: 6785:    while ((n = write(fd, buf, cnt)) != cnt) {
call    0 returned 216
branch  1 taken 0
branch  2 taken 216 (fallthrough)
    #####: 6786:	if (n == (unsigned)(-1)) {
branch  0 never executed
branch  1 never executed
    #####: 6787:	    write_error();
call    0 never executed
        -: 6788:	}
    #####: 6789:	cnt -= n;
    #####: 6790:	buf = (voidp)((char*)buf+n);
        -: 6791:    }
      216: 6792:}
        -: 6793:
        -: 6794:/* ========================================================================
        -: 6795: * Put string s in lower case, return s.
        -: 6796: */
function strlwr called 4 returned 100% blocks executed 88%
        4: 6797:char *strlwr(s)
        -: 6798:    char *s;
        -: 6799:{
        -: 6800:    char *t;
     123*: 6801:    for (t = s; *t; t++) *t = tolow(*t);
branch  0 taken 0 (fallthrough)
branch  1 taken 119
branch  2 taken 119
branch  3 taken 4 (fallthrough)
        4: 6802:    return s;
        -: 6803:}
        -: 6804:
        -: 6805:/* ========================================================================
        -: 6806: * Return the base name of a file (remove any directory prefix and
        -: 6807: * any version suffix). For systems with file names that are not
        -: 6808: * case sensitive, force the base name to lower case.
        -: 6809: */
function basename called 215 returned 100% blocks executed 100%
      215: 6810:char *basename(fname)
        -: 6811:    char *fname;
        -: 6812:{
        -: 6813:    char *p;
        -: 6814:
      215: 6815:    if ((p = strrchr(fname, PATH_SEP))  != NULL) fname = p+1;
branch  0 taken 215 (fallthrough)
branch  1 taken 0
        -: 6816:#ifdef PATH_SEP2
        -: 6817:    if ((p = strrchr(fname, PATH_SEP2)) != NULL) fname = p+1;
        -: 6818:#endif
        -: 6819:#ifdef PATH_SEP3
        -: 6820:    if ((p = strrchr(fname, PATH_SEP3)) != NULL) fname = p+1;
        -: 6821:#endif
        -: 6822:#ifdef SUFFIX_SEP
        -: 6823:    if ((p = strrchr(fname, SUFFIX_SEP)) != NULL) *p = '\0';
        -: 6824:#endif
        -: 6825:    if (casemap('A') == 'a') strlwr(fname);
      215: 6826:    return fname;
        -: 6827:}
        -: 6828:
        -: 6829:/* ========================================================================
        -: 6830: * Make a file name legal for file systems not allowing file names with
        -: 6831: * multiple dots or starting with a dot (such as MSDOS), by changing
        -: 6832: * all dots except the last one into underlines.  A target dependent
        -: 6833: * function can be used instead of this simple function by defining the macro
        -: 6834: * MAKE_LEGAL_NAME in tailor.h and providing the function in a target
        -: 6835: * dependent module.
        -: 6836: */
function make_simple_name called 0 returned 0% blocks executed 0%
    #####: 6837:void make_simple_name(name)
        -: 6838:    char *name;
        -: 6839:{
    #####: 6840:    char *p = strrchr(name, '.');
    #####: 6841:    if (p == NULL) return;
branch  0 never executed
branch  1 never executed
    #####: 6842:    if (p == name) p++;
branch  0 never executed
branch  1 never executed
        -: 6843:    do {
    #####: 6844:        if (*--p == '.') *p = '_';
branch  0 never executed
branch  1 never executed
    #####: 6845:    } while (p != name);
branch  0 never executed
branch  1 never executed
        -: 6846:}
        -: 6847:
        -: 6848:
        -: 6849:#if defined(NO_STRING_H) && !defined(STDC_HEADERS)
        -: 6850:
        -: 6851:/* Provide missing strspn and strcspn functions. */
        -: 6852:
        -: 6853:#  ifndef __STDC__
        -: 6854:#    define const
        -: 6855:#  endif
        -: 6856:
        -: 6857:int strspn  OF((const char *s, const char *accept));
        -: 6858:int strcspn OF((const char *s, const char *reject));
        -: 6859:
        -: 6860:/* ========================================================================
        -: 6861: * Return the length of the maximum initial segment
        -: 6862: * of s which contains only characters in accept.
        -: 6863: */
        -: 6864:int strspn(s, accept)
        -: 6865:    const char *s;
        -: 6866:    const char *accept;
        -: 6867:{
        -: 6868:    register const char *p;
        -: 6869:    register const char *a;
        -: 6870:    register int count = 0;
        -: 6871:
        -: 6872:    for (p = s; *p != '\0'; ++p) {
        -: 6873:	for (a = accept; *a != '\0'; ++a) {
        -: 6874:	    if (*p == *a) break;
        -: 6875:	}
        -: 6876:	if (*a == '\0') return count;
        -: 6877:	++count;
        -: 6878:    }
        -: 6879:    return count;
        -: 6880:}
        -: 6881:
        -: 6882:/* ========================================================================
        -: 6883: * Return the length of the maximum inital segment of s
        -: 6884: * which contains no characters from reject.
        -: 6885: */
        -: 6886:int strcspn(s, reject)
        -: 6887:    const char *s;
        -: 6888:    const char *reject;
        -: 6889:{
        -: 6890:    register int count = 0;
        -: 6891:
        -: 6892:    while (*s != '\0') {
        -: 6893:	if (strchr(reject, *s++) != NULL) return count;
        -: 6894:	++count;
        -: 6895:    }
        -: 6896:    return count;
        -: 6897:}
        -: 6898:
        -: 6899:#endif /* NO_STRING_H */
        -: 6900:
        -: 6901:/* ========================================================================
        -: 6902: * Add an environment variable (if any) before argv, and update argc.
        -: 6903: * Return the expanded environment variable to be freed later, or NULL 
        -: 6904: * if no options were added to argv.
        -: 6905: */
        -: 6906:#define SEPARATOR	" \t"	/* separators in env variable */
        -: 6907:
function add_envopt called 214 returned 100% blocks executed 15%
      214: 6908:char *add_envopt(argcp, argvp, env)
        -: 6909:    int *argcp;          /* pointer to argc */
        -: 6910:    char ***argvp;       /* pointer to argv */
        -: 6911:    char *env;           /* name of environment variable */
        -: 6912:{
        -: 6913:    char *p;             /* running pointer through env variable */
        -: 6914:    char **oargv;        /* runs through old argv array */
        -: 6915:    char **nargv;        /* runs through new argv array */
      214: 6916:    int	 oargc = *argcp; /* old argc */
      214: 6917:    int  nargc = 0;      /* number of arguments in env variable */
        -: 6918:
      214: 6919:    env = (char*)getenv(env);
call    0 returned 214
      214: 6920:    if (env == NULL) return NULL;
branch  0 taken 214 (fallthrough)
branch  1 taken 0
        -: 6921:
    #####: 6922:    p = (char*)xmalloc(strlen(env)+1);
call    0 never executed
    #####: 6923:    env = strcpy(p, env);                    /* keep env variable intact */
        -: 6924:
    #####: 6925:    for (p = env; *p; nargc++ ) {            /* move through env */
branch  0 never executed
branch  1 never executed
    #####: 6926:	p += strspn(p, SEPARATOR);	     /* skip leading separators */
    #####: 6927:	if (*p == '\0') break;
branch  0 never executed
branch  1 never executed
        -: 6928:
    #####: 6929:	p += strcspn(p, SEPARATOR);	     /* find end of word */
    #####: 6930:	if (*p) *p++ = '\0';		     /* mark it */
branch  0 never executed
branch  1 never executed
        -: 6931:    }
    #####: 6932:    if (nargc == 0) {
branch  0 never executed
branch  1 never executed
    #####: 6933:	free(env); env = NULL;
    #####: 6934:	return NULL;
        -: 6935:    }
    #####: 6936:    *argcp += nargc;
        -: 6937:    /* Allocate the new argv array, with an extra element just in case
        -: 6938:     * the original arg list did not end with a NULL.
        -: 6939:     */
    #####: 6940:    nargv = (char**)calloc(*argcp+1, sizeof(char *));
    #####: 6941:    if (nargv == NULL) error("out of memory");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 6942:    oargv  = *argvp;
    #####: 6943:    *argvp = nargv;
        -: 6944:
        -: 6945:    /* Copy the program name first */
    #####: 6946:    if (oargc-- < 0) error("argc<=0");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 6947:    *(nargv++) = *(oargv++);
        -: 6948:
        -: 6949:    /* Then copy the environment args */
    #####: 6950:    for (p = env; nargc > 0; nargc--) {
branch  0 never executed
branch  1 never executed
    #####: 6951:	p += strspn(p, SEPARATOR);	     /* skip separators */
    #####: 6952:	*(nargv++) = p;			     /* store start */
    #####: 6953:	while (*p++) ;			     /* skip over word */
branch  0 never executed
branch  1 never executed
        -: 6954:    }
        -: 6955:
        -: 6956:    /* Finally copy the old args and add a NULL (usual convention) */
    #####: 6957:    while (oargc--) *(nargv++) = *(oargv++);
branch  0 never executed
branch  1 never executed
    #####: 6958:    *nargv = NULL;
    #####: 6959:    return env;
        -: 6960:}
        -: 6961:
        -: 6962:/* ========================================================================
        -: 6963: * Error handlers.
        -: 6964: */
function error called 0 returned 0% blocks executed 0%
    #####: 6965:void error(m)
        -: 6966:    char *m;
        -: 6967:{
    #####: 6968:    fprintf(stderr, "\n%s: %s: %s\n", progname, ifname, m);
call    0 never executed
    #####: 6969:    abort_gzip();
call    0 never executed
    #####: 6970:}
        -: 6971:
function warn called 0 returned 0% blocks executed 0%
    #####: 6972:void warn(a, b)
        -: 6973:    char *a, *b;            /* message strings juxtaposed in output */
        -: 6974:{
    #####: 6975:    WARN((stderr, "%s: %s: warning: %s%s\n", progname, ifname, a, b));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6976:}
        -: 6977:
function read_error called 1 returned 0% blocks executed 83%
        1: 6978:void read_error()
        -: 6979:{
        1: 6980:    fprintf(stderr, "\n%s: ", progname);
call    0 returned 1
        1: 6981:    if (errno != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6982:	perror(ifname);
call    0 never executed
        -: 6983:    } else {
        1: 6984:	fprintf(stderr, "%s: unexpected end of file\n", ifname);
call    0 returned 1
        -: 6985:    }
        1: 6986:    abort_gzip();
call    0 returned 0
    #####: 6987:}
        -: 6988:
function write_error called 0 returned 0% blocks executed 0%
    #####: 6989:void write_error()
        -: 6990:{
    #####: 6991:    fprintf(stderr, "\n%s: ", progname);
call    0 never executed
    #####: 6992:    perror(ofname);
call    0 never executed
    #####: 6993:    abort_gzip();
call    0 never executed
    #####: 6994:}
        -: 6995:
        -: 6996:/* ========================================================================
        -: 6997: * Display compression ratio on the given stream on 6 characters.
        -: 6998: */
function display_ratio called 81 returned 100% blocks executed 64%
       81: 6999:void display_ratio(num, den, file)
        -: 7000:    long num;
        -: 7001:    long den;
        -: 7002:    FILE *file;
        -: 7003:{
        -: 7004:    long ratio;  /* 1000 times the compression ratio */
        -: 7005:
       81: 7006:    if (den == 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 81
    #####: 7007:	ratio = 0; /* no compression */
       81: 7008:    } else if (den < 2147483L) { /* (2**31 -1)/1000 */
branch  0 taken 81 (fallthrough)
branch  1 taken 0
       81: 7009:	ratio = 1000L*num/den;
        -: 7010:    } else {
    #####: 7011:	ratio = num/(den/1000L);
        -: 7012:    }
       81: 7013:    if (ratio < 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 81
    #####: 7014:	putc('-', file);
call    0 never executed
    #####: 7015:	ratio = -ratio;
        -: 7016:    } else {
       81: 7017:	putc(' ', file);
call    0 returned 81
        -: 7018:    }
       81: 7019:    fprintf(file, "%2ld.%1ld%%", ratio / 10L, ratio % 10L);
call    0 returned 81
       81: 7020:}
        -: 7021:
        -: 7022:
        -: 7023:/* ========================================================================
        -: 7024: * Semi-safe malloc -- never returns NULL.
        -: 7025: */
function xmalloc called 0 returned 0% blocks executed 0%
    #####: 7026:voidp xmalloc (size)
        -: 7027:    unsigned size;
        -: 7028:{
    #####: 7029:    voidp cp = (voidp)malloc (size);
        -: 7030:
    #####: 7031:    if (cp == NULL) error("out of memory");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 7032:    return cp;
        -: 7033:}
        -: 7034:
        -: 7035:/* ========================================================================
        -: 7036: * Table of CRC-32's of all single-byte values (made by makecrc.c)
        -: 7037: */
        -: 7038:ulg crc_32_tab[] = {
        -: 7039:  0x00000000L, 0x77073096L, 0xee0e612cL, 0x990951baL, 0x076dc419L,
        -: 7040:  0x706af48fL, 0xe963a535L, 0x9e6495a3L, 0x0edb8832L, 0x79dcb8a4L,
        -: 7041:  0xe0d5e91eL, 0x97d2d988L, 0x09b64c2bL, 0x7eb17cbdL, 0xe7b82d07L,
        -: 7042:  0x90bf1d91L, 0x1db71064L, 0x6ab020f2L, 0xf3b97148L, 0x84be41deL,
        -: 7043:  0x1adad47dL, 0x6ddde4ebL, 0xf4d4b551L, 0x83d385c7L, 0x136c9856L,
        -: 7044:  0x646ba8c0L, 0xfd62f97aL, 0x8a65c9ecL, 0x14015c4fL, 0x63066cd9L,
        -: 7045:  0xfa0f3d63L, 0x8d080df5L, 0x3b6e20c8L, 0x4c69105eL, 0xd56041e4L,
        -: 7046:  0xa2677172L, 0x3c03e4d1L, 0x4b04d447L, 0xd20d85fdL, 0xa50ab56bL,
        -: 7047:  0x35b5a8faL, 0x42b2986cL, 0xdbbbc9d6L, 0xacbcf940L, 0x32d86ce3L,
        -: 7048:  0x45df5c75L, 0xdcd60dcfL, 0xabd13d59L, 0x26d930acL, 0x51de003aL,
        -: 7049:  0xc8d75180L, 0xbfd06116L, 0x21b4f4b5L, 0x56b3c423L, 0xcfba9599L,
        -: 7050:  0xb8bda50fL, 0x2802b89eL, 0x5f058808L, 0xc60cd9b2L, 0xb10be924L,
        -: 7051:  0x2f6f7c87L, 0x58684c11L, 0xc1611dabL, 0xb6662d3dL, 0x76dc4190L,
        -: 7052:  0x01db7106L, 0x98d220bcL, 0xefd5102aL, 0x71b18589L, 0x06b6b51fL,
        -: 7053:  0x9fbfe4a5L, 0xe8b8d433L, 0x7807c9a2L, 0x0f00f934L, 0x9609a88eL,
        -: 7054:  0xe10e9818L, 0x7f6a0dbbL, 0x086d3d2dL, 0x91646c97L, 0xe6635c01L,
        -: 7055:  0x6b6b51f4L, 0x1c6c6162L, 0x856530d8L, 0xf262004eL, 0x6c0695edL,
        -: 7056:  0x1b01a57bL, 0x8208f4c1L, 0xf50fc457L, 0x65b0d9c6L, 0x12b7e950L,
        -: 7057:  0x8bbeb8eaL, 0xfcb9887cL, 0x62dd1ddfL, 0x15da2d49L, 0x8cd37cf3L,
        -: 7058:  0xfbd44c65L, 0x4db26158L, 0x3ab551ceL, 0xa3bc0074L, 0xd4bb30e2L,
        -: 7059:  0x4adfa541L, 0x3dd895d7L, 0xa4d1c46dL, 0xd3d6f4fbL, 0x4369e96aL,
        -: 7060:  0x346ed9fcL, 0xad678846L, 0xda60b8d0L, 0x44042d73L, 0x33031de5L,
        -: 7061:  0xaa0a4c5fL, 0xdd0d7cc9L, 0x5005713cL, 0x270241aaL, 0xbe0b1010L,
        -: 7062:  0xc90c2086L, 0x5768b525L, 0x206f85b3L, 0xb966d409L, 0xce61e49fL,
        -: 7063:  0x5edef90eL, 0x29d9c998L, 0xb0d09822L, 0xc7d7a8b4L, 0x59b33d17L,
        -: 7064:  0x2eb40d81L, 0xb7bd5c3bL, 0xc0ba6cadL, 0xedb88320L, 0x9abfb3b6L,
        -: 7065:  0x03b6e20cL, 0x74b1d29aL, 0xead54739L, 0x9dd277afL, 0x04db2615L,
        -: 7066:  0x73dc1683L, 0xe3630b12L, 0x94643b84L, 0x0d6d6a3eL, 0x7a6a5aa8L,
        -: 7067:  0xe40ecf0bL, 0x9309ff9dL, 0x0a00ae27L, 0x7d079eb1L, 0xf00f9344L,
        -: 7068:  0x8708a3d2L, 0x1e01f268L, 0x6906c2feL, 0xf762575dL, 0x806567cbL,
        -: 7069:  0x196c3671L, 0x6e6b06e7L, 0xfed41b76L, 0x89d32be0L, 0x10da7a5aL,
        -: 7070:  0x67dd4accL, 0xf9b9df6fL, 0x8ebeeff9L, 0x17b7be43L, 0x60b08ed5L,
        -: 7071:  0xd6d6a3e8L, 0xa1d1937eL, 0x38d8c2c4L, 0x4fdff252L, 0xd1bb67f1L,
        -: 7072:  0xa6bc5767L, 0x3fb506ddL, 0x48b2364bL, 0xd80d2bdaL, 0xaf0a1b4cL,
        -: 7073:  0x36034af6L, 0x41047a60L, 0xdf60efc3L, 0xa867df55L, 0x316e8eefL,
        -: 7074:  0x4669be79L, 0xcb61b38cL, 0xbc66831aL, 0x256fd2a0L, 0x5268e236L,
        -: 7075:  0xcc0c7795L, 0xbb0b4703L, 0x220216b9L, 0x5505262fL, 0xc5ba3bbeL,
        -: 7076:  0xb2bd0b28L, 0x2bb45a92L, 0x5cb36a04L, 0xc2d7ffa7L, 0xb5d0cf31L,
        -: 7077:  0x2cd99e8bL, 0x5bdeae1dL, 0x9b64c2b0L, 0xec63f226L, 0x756aa39cL,
        -: 7078:  0x026d930aL, 0x9c0906a9L, 0xeb0e363fL, 0x72076785L, 0x05005713L,
        -: 7079:  0x95bf4a82L, 0xe2b87a14L, 0x7bb12baeL, 0x0cb61b38L, 0x92d28e9bL,
        -: 7080:  0xe5d5be0dL, 0x7cdcefb7L, 0x0bdbdf21L, 0x86d3d2d4L, 0xf1d4e242L,
        -: 7081:  0x68ddb3f8L, 0x1fda836eL, 0x81be16cdL, 0xf6b9265bL, 0x6fb077e1L,
        -: 7082:  0x18b74777L, 0x88085ae6L, 0xff0f6a70L, 0x66063bcaL, 0x11010b5cL,
        -: 7083:  0x8f659effL, 0xf862ae69L, 0x616bffd3L, 0x166ccf45L, 0xa00ae278L,
        -: 7084:  0xd70dd2eeL, 0x4e048354L, 0x3903b3c2L, 0xa7672661L, 0xd06016f7L,
        -: 7085:  0x4969474dL, 0x3e6e77dbL, 0xaed16a4aL, 0xd9d65adcL, 0x40df0b66L,
        -: 7086:  0x37d83bf0L, 0xa9bcae53L, 0xdebb9ec5L, 0x47b2cf7fL, 0x30b5ffe9L,
        -: 7087:  0xbdbdf21cL, 0xcabac28aL, 0x53b39330L, 0x24b4a3a6L, 0xbad03605L,
        -: 7088:  0xcdd70693L, 0x54de5729L, 0x23d967bfL, 0xb3667a2eL, 0xc4614ab8L,
        -: 7089:  0x5d681b02L, 0x2a6f2b94L, 0xb40bbe37L, 0xc30c8ea1L, 0x5a05df1bL,
        -: 7090:  0x2d02ef8dL
        -: 7091:};
        -: 7092:/* zip.c -- compress files to the gzip or pkzip format
        -: 7093: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 7094: * This is free software; you can redistribute it and/or modify it under the
        -: 7095: * terms of the GNU General Public License, see the file COPYING.
        -: 7096: */
        -: 7097:
        -: 7098:/*
        -: 7099:#ifndef lint
        -: 7100:static char rcsid[] = "$Id: zip.c,v 0.17 1993/06/10 13:29:25 jloup Exp $";
        -: 7101:#endif
        -: 7102:*/
        -: 7103:
        -: 7104:#ifdef HAVE_UNISTD_H
        -: 7105:#  include <unistd.h>
        -: 7106:#endif
        -: 7107:#ifndef NO_FCNTL_H
        -: 7108:#  include <fcntl.h>
        -: 7109:#endif
        -: 7110:
        -: 7111:local ulg crc;       /* crc on uncompressed file data */
        -: 7112:long header_bytes;   /* number of bytes in gzip header */
        -: 7113:
        -: 7114:/* ===========================================================================
        -: 7115: * Deflate in to out.
        -: 7116: * IN assertions: the input and output buffers are cleared.
        -: 7117: *   The variables time_stamp and save_orig_name are initialized.
        -: 7118: */
function zip called 175 returned 100% blocks executed 51%
      175: 7119:int zip(in, out)
        -: 7120:    int in, out;            /* input and output file descriptors */
        -: 7121:{
      175: 7122:    uch  flags = 0;         /* general purpose bit flags */
      175: 7123:    ush  attr = 0;          /* ascii/binary flag */
      175: 7124:    ush  deflate_flags = 0; /* pkzip -es, -en or -ex equivalent */
        -: 7125:
      175: 7126:    ifd = in;
      175: 7127:    ofd = out;
      175: 7128:    outcnt = 0;
        -: 7129:
        -: 7130:    /* Write the header to the gzip file. See algorithm.doc for the format */
        -: 7131:
      175: 7132:    method = DEFLATED;
     175*: 7133:    put_byte(GZIP_MAGIC[0]); /* magic header */
branch  0 taken 0 (fallthrough)
branch  1 taken 175
call    2 never executed
     175*: 7134:    put_byte(GZIP_MAGIC[1]);
branch  0 taken 0 (fallthrough)
branch  1 taken 175
call    2 never executed
     175*: 7135:    put_byte(DEFLATED);      /* compression method */
branch  0 taken 0 (fallthrough)
branch  1 taken 175
call    2 never executed
        -: 7136:
      175: 7137:    if (save_orig_name) {
branch  0 taken 1 (fallthrough)
branch  1 taken 174
        1: 7138:	flags |= ORIG_NAME;
        -: 7139:    }
     175*: 7140:    put_byte(flags);         /* general flags */
branch  0 taken 0 (fallthrough)
branch  1 taken 175
call    2 never executed
     175*: 7141:    put_long(time_stamp);
branch  0 taken 175 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 taken 175 (fallthrough)
branch  9 taken 0
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
        -: 7142:
        -: 7143:    /* Write deflated file to zip file */
      175: 7144:    crc = updcrc(0, 0);
call    0 returned 175
        -: 7145:
      175: 7146:    bi_init(out);
call    0 returned 175
      175: 7147:    ct_init(&attr, &method);
call    0 returned 175
      175: 7148:    lm_init(level, &deflate_flags);
call    0 returned 175
        -: 7149:
     175*: 7150:    put_byte((uch)deflate_flags); /* extra flags */
branch  0 taken 0 (fallthrough)
branch  1 taken 175
call    2 never executed
     175*: 7151:    put_byte(OS_CODE);            /* OS identifier */
branch  0 taken 0 (fallthrough)
branch  1 taken 175
call    2 never executed
        -: 7152:
      175: 7153:    if (save_orig_name) {
branch  0 taken 1 (fallthrough)
branch  1 taken 174
        1: 7154:	char *p = basename(ifname); /* Don't save the directory part. */
call    0 returned 1
        -: 7155:	do {
       7*: 7156:	    put_char(*p);
branch  0 taken 0 (fallthrough)
branch  1 taken 7
call    2 never executed
        7: 7157:	} while (*p++);
branch  0 taken 6
branch  1 taken 1 (fallthrough)
        -: 7158:    }
      175: 7159:    header_bytes = (long)outcnt;
        -: 7160:
      175: 7161:    (void)deflate();
call    0 returned 175
        -: 7162:
        -: 7163:#if !defined(NO_SIZE_CHECK) && !defined(RECORD_IO)
        -: 7164:  /* Check input size (but not in VMS -- variable record lengths mess it up)
        -: 7165:   * and not on MSDOS -- diet in TSR mode reports an incorrect file size)
        -: 7166:   */
        -: 7167:    if (ifile_size != -1L && isize != (ulg)ifile_size) {
        -: 7168:	Trace((stderr, " actual=%ld, read=%ld ", ifile_size, isize));
        -: 7169:	fprintf(stderr, "%s: %s: file size changed while zipping\n",
        -: 7170:		progname, ifname);
        -: 7171:    }
        -: 7172:#endif
        -: 7173:
        -: 7174:    /* Write the crc and uncompressed size */
     175*: 7175:    put_long(crc);
branch  0 taken 175 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 taken 175 (fallthrough)
branch  9 taken 0
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
     175*: 7176:    put_long(isize);
branch  0 taken 175 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 taken 175 (fallthrough)
branch  9 taken 0
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
      175: 7177:    header_bytes += 2*sizeof(long);
        -: 7178:
      175: 7179:    flush_outbuf();
call    0 returned 175
      175: 7180:    return OK;
        -: 7181:}
        -: 7182:
        -: 7183:
        -: 7184:/* ===========================================================================
        -: 7185: * Read a new buffer from the current input file, perform end-of-line
        -: 7186: * translation, and update the crc and input file size.
        -: 7187: * IN assertion: size >= 2 (for end-of-line translation)
        -: 7188: */
function file_read called 3570 returned 100% blocks executed 100%
     3570: 7189:int file_read(buf, size)
        -: 7190:    char *buf;
        -: 7191:    unsigned size;
        -: 7192:{
        -: 7193:    unsigned len;
        -: 7194:
        -: 7195:    Assert(insize == 0, "inbuf not empty");
        -: 7196:
     3570: 7197:    len = read(ifd, buf, size);
call    0 returned 3570
     3570: 7198:    if (len == (unsigned)(-1) || len == 0) return (int)len;
branch  0 taken 3569 (fallthrough)
branch  1 taken 1
branch  2 taken 174 (fallthrough)
branch  3 taken 3395
        -: 7199:
     3395: 7200:    crc = updcrc((uch*)buf, len);
call    0 returned 3395
     3395: 7201:    isize += (ulg)len;
     3395: 7202:    return (int)len;
        -: 7203:}
