        -:    0:Source:gzip.c
        -:    0:Graph:gzip.gcno
        -:    0:Data:gzip.gcda
        -:    0:Runs:214
        -:    1:#include "FaultSeeds.h"
        -:    2:#include "crypt.h"
        -:    3:#include "getopt.h"
        -:    4:#include "gzip.h" 
        -:    5:#include "lzw.h"   
        -:    6:#include "tailor.h"
        -:    7:#include "revision.h"
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <ctype.h>
        -:   11:#include <sys/types.h>
        -:   12:#include <sys/stat.h>
        -:   13:#include <errno.h>
        -:   14:#include <signal.h>   
        -:   15:
        -:   16:#define LINUX 1
        -:   17:
        -:   18:/* bits.c -- output variable-length bit strings
        -:   19: * Copyright (C) 1992-1993 Jean-loup Gailly
        -:   20: * This is free software; you can redistribute it and/or modify it under the
        -:   21: * terms of the GNU General Public License, see the file COPYING.
        -:   22: */
        -:   23:
        -:   24:
        -:   25:/*
        -:   26: *  PURPOSE
        -:   27: *
        -:   28: *      Output variable-length bit strings. Compression can be done
        -:   29: *      to a file or to memory. (The latter is not supported in this version.)
        -:   30: *
        -:   31: *  DISCUSSION
        -:   32: *
        -:   33: *      The PKZIP "deflate" file format interprets compressed file data
        -:   34: *      as a sequence of bits.  Multi-bit strings in the file may cross
        -:   35: *      byte boundaries without restriction.
        -:   36: *
        -:   37: *      The first bit of each byte is the low-order bit.
        -:   38: *
        -:   39: *      The routines in this file allow a variable-length bit value to
        -:   40: *      be output right-to-left (useful for literal values). For
        -:   41: *      left-to-right output (useful for code strings from the tree routines),
        -:   42: *      the bits must have been reversed first with bi_reverse().
        -:   43: *
        -:   44: *      For in-memory compression, the compressed bit stream goes directly
        -:   45: *      into the requested output buffer. The input data is read in blocks
        -:   46: *      by the mem_read() function. The buffer is limited to 64K on 16 bit
        -:   47: *      machines.
        -:   48: *
        -:   49: *  INTERFACE
        -:   50: *
        -:   51: *      void bi_init (FILE *zipfile)
        -:   52: *          Initialize the bit string routines.
        -:   53: *
        -:   54: *      void send_bits (int value, int length)
        -:   55: *          Write out a bit string, taking the source bits right to
        -:   56: *          left.
        -:   57: *
        -:   58: *      int bi_reverse (int value, int length)
        -:   59: *          Reverse the bits of a bit string, taking the source bits left to
        -:   60: *          right and emitting them right to left.
        -:   61: *
        -:   62: *      void bi_windup (void)
        -:   63: *          Write out any remaining bits in an incomplete byte.
        -:   64: *
        -:   65: *      void copy_block(char *buf, unsigned len, int header)
        -:   66: *          Copy a stored block to the zip file, storing first the length and
        -:   67: *          its one's complement if requested.
        -:   68: *
        -:   69: */
        -:   70:
        -:   71:#ifdef DEBUG
        -:   72:#  include <stdio.h>
        -:   73:#endif
        -:   74:
        -:   75:/*
        -:   76:#ifndef lint
        -:   77:static char rcsid[] = "$Id: bits.c,v 0.8 1993/02/04 13:21:06 jloup Exp $";
        -:   78:#endif
        -:   79:*/
        -:   80:
        -:   81:/* ===========================================================================
        -:   82: * Local data used by the "bit string" routines.
        -:   83: */
        -:   84:
        -:   85:local file_t zfile; /* output gzip file */
        -:   86:
        -:   87:local unsigned short bi_buf;
        -:   88:/* Output buffer. bits are inserted starting at the bottom (least significant
        -:   89: * bits).
        -:   90: */
        -:   91:
        -:   92:#define Buf_size (8 * 2*sizeof(char))
        -:   93:/* Number of bits used within bi_buf. (bi_buf might be implemented on
        -:   94: * more than 16 bits on some systems.)
        -:   95: */
        -:   96:
        -:   97:local int bi_valid;
        -:   98:/* Number of valid bits in bi_buf.  All bits above the last valid bit
        -:   99: * are always zero.
        -:  100: */
        -:  101:
        -:  102:int (*read_buf) OF((char *buf, unsigned size)) = file_read;
        -:  103:/* Current input function. Set to mem_read for in-memory compression */
        -:  104:
        -:  105:#ifdef DEBUG
        -:  106:  ulg bits_sent;   /* bit length of the compressed data */
        -:  107:#endif
        -:  108:
        -:  109:/* ===========================================================================
        -:  110: * Initialize the bit string routines.
        -:  111: */
function bi_init called 175 returned 100% blocks executed 100%
      175:  112:void bi_init (zipfile)
        -:  113:    file_t zipfile; /* output zip file, NO_FILE for in-memory compression */
        -:  114:{
      175:  115:    zfile  = zipfile;
      175:  116:    bi_buf = 0;
      175:  117:    bi_valid = 0;
        -:  118:#ifdef DEBUG
        -:  119:    bits_sent = 0L;
        -:  120:#endif
        -:  121:
        -:  122:    /* Set the defaults for file compression. They are set by memcompress
        -:  123:     * for in-memory compression.
        -:  124:     */
      175:  125:    if (zfile != NO_FILE) {
branch  0 taken 175 (fallthrough)
branch  1 taken 0
      175:  126:	read_buf  = file_read;
        -:  127:    }
      175:  128:}
        -:  129:
        -:  130:/* ===========================================================================
        -:  131: * Send a value on a given number of bits.
        -:  132: * IN assertion: length <= 16 and value fits in length bits.
        -:  133: */
function send_bits called 3897250 returned 100% blocks executed 90%
  3897250:  134:void send_bits(value, length)
        -:  135:    int value;  /* value to send */
        -:  136:    int length; /* number of bits */
        -:  137:{
        -:  138:#ifdef DEBUG
        -:  139:    Tracev((stderr," l %2d v %4x ", length, value));
        -:  140:    Assert(length > 0 && length <= 15, "invalid length");
        -:  141:    bits_sent += (ulg)length;
        -:  142:#endif
        -:  143:    /* If not enough room in bi_buf, use (valid) bits from bi_buf and
        -:  144:     * (16 - bi_valid) bits from value, leaving (width - (16-bi_valid))
        -:  145:     * unused bits in value.
        -:  146:     */
  3897250:  147:    if (bi_valid > (int)Buf_size - length) {
branch  0 taken 1166659 (fallthrough)
branch  1 taken 2730591
  1166659:  148:        bi_buf |= (value << bi_valid);
 1166659*:  149:        put_short(bi_buf);
branch  0 taken 1166642 (fallthrough)
branch  1 taken 17
branch  2 taken 0 (fallthrough)
branch  3 taken 17
call    4 never executed
branch  5 taken 17 (fallthrough)
branch  6 taken 0
call    7 returned 17
  1166659:  150:        bi_buf = (ush)value >> (Buf_size - bi_valid);
  1166659:  151:        bi_valid += length - Buf_size;
        -:  152:    } else {
  2730591:  153:        bi_buf |= value << bi_valid;
  2730591:  154:        bi_valid += length;
        -:  155:    }
  3897250:  156:}
        -:  157:
        -:  158:/* ===========================================================================
        -:  159: * Reverse the first len bits of a code, using straightforward code (a faster
        -:  160: * method would use a table)
        -:  161: * IN assertion: 1 <= len <= 15
        -:  162: */
function bi_reverse called 84961 returned 100% blocks executed 100%
    84961:  163:unsigned bi_reverse(code, len)
        -:  164:    unsigned code; /* the value to invert */
        -:  165:    int len;       /* its bit length */
        -:  166:{
    84961:  167:    register unsigned res = 0;
        -:  168:    do {
   671135:  169:        res |= code & 1;
   671135:  170:        code >>= 1, res <<= 1;
   671135:  171:    } while (--len > 0);
branch  0 taken 586174
branch  1 taken 84961 (fallthrough)
    84961:  172:    return res >> 1;
        -:  173:}
        -:  174:
        -:  175:/* ===========================================================================
        -:  176: * Write out any remaining bits in an incomplete byte.
        -:  177: */
function bi_windup called 176 returned 100% blocks executed 55%
      176:  178:void bi_windup()
        -:  179:{
      176:  180:    if (bi_valid > 8) {
branch  0 taken 122 (fallthrough)
branch  1 taken 54
     122*:  181:        put_short(bi_buf);
branch  0 taken 122 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
       54:  182:    } else if (bi_valid > 0) {
branch  0 taken 53 (fallthrough)
branch  1 taken 1
      53*:  183:        put_byte(bi_buf);
branch  0 taken 0 (fallthrough)
branch  1 taken 53
call    2 never executed
        -:  184:    }
      176:  185:    bi_buf = 0;
      176:  186:    bi_valid = 0;
        -:  187:#ifdef DEBUG
        -:  188:    bits_sent = (bits_sent+7) & ~7;
        -:  189:#endif
      176:  190:}
        -:  191:
        -:  192:/* ===========================================================================
        -:  193: * Copy a stored block to the zip file, storing first the length and its
        -:  194: * one's complement if requested.
        -:  195: */
function copy_block called 1 returned 100% blocks executed 53%
        1:  196:void copy_block(buf, len, header)
        -:  197:    char     *buf;    /* the input data */
        -:  198:    unsigned len;     /* its length */
        -:  199:    int      header;  /* true if block header must be written */
        -:  200:{
        1:  201:    bi_windup();              /* align on byte boundary */
call    0 returned 1
        -:  202:
        1:  203:    if (header) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
       1*:  204:        put_short((ush)len);   
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
       1*:  205:        put_short((ush)~len);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -:  206:#ifdef DEBUG
        -:  207:        bits_sent += 2*16;
        -:  208:#endif
        -:  209:    }
        -:  210:#ifdef DEBUG
        -:  211:    bits_sent += (ulg)len<<3;
        -:  212:#endif
    12047:  213:    while (len--) {
branch  0 taken 12046
branch  1 taken 1 (fallthrough)
        -:  214:#ifdef CRYPT
        -:  215:        int t;
        -:  216:	if (key) zencode(*buf, t);
        -:  217:#endif
   12046*:  218:	put_byte(*buf++);
branch  0 taken 0 (fallthrough)
branch  1 taken 12046
call    2 never executed
        -:  219:    }
        1:  220:}
        -:  221:/* crypt.c (dummy version) -- do not perform encryption
        -:  222: * Hardly worth copyrighting :-)
        -:  223: */
        -:  224:/*
        -:  225:#ifndef lint
        -:  226:static char rcsid[] = "$Id: crypt.c,v 0.6 1993/03/22 09:48:47 jloup Exp $";
        -:  227:#endif
        -:  228:*/
        -:  229:/* deflate.c -- compress data using the deflation algorithm
        -:  230: * Copyright (C) 1992-1993 Jean-loup Gailly
        -:  231: * This is free software; you can redistribute it and/or modify it under the
        -:  232: * terms of the GNU General Public License, see the file COPYING.
        -:  233: */
        -:  234:
        -:  235:/*
        -:  236: *  PURPOSE
        -:  237: *
        -:  238: *      Identify new text as repetitions of old text within a fixed-
        -:  239: *      length sliding window trailing behind the new text.
        -:  240: *
        -:  241: *  DISCUSSION
        -:  242: *
        -:  243: *      The "deflation" process depends on being able to identify portions
        -:  244: *      of the input text which are identical to earlier input (within a
        -:  245: *      sliding window trailing behind the input currently being processed).
        -:  246: *
        -:  247: *      The most straightforward technique turns out to be the fastest for
        -:  248: *      most input files: try all possible matches and select the longest.
        -:  249: *      The key feature of this algorithm is that insertions into the string
        -:  250: *      dictionary are very simple and thus fast, and deletions are avoided
        -:  251: *      completely. Insertions are performed at each input character, whereas
        -:  252: *      string matches are performed only when the previous match ends. So it
        -:  253: *      is preferable to spend more time in matches to allow very fast string
        -:  254: *      insertions and avoid deletions. The matching algorithm for small
        -:  255: *      strings is inspired from that of Rabin & Karp. A brute force approach
        -:  256: *      is used to find longer strings when a small match has been found.
        -:  257: *      A similar algorithm is used in comic (by Jan-Mark Wams) and freeze
        -:  258: *      (by Leonid Broukhis).
        -:  259: *         A previous version of this file used a more sophisticated algorithm
        -:  260: *      (by Fiala and Greene) which is guaranteed to run in linear amortized
        -:  261: *      time, but has a larger average cost, uses more memory and is patented.
        -:  262: *      However the F&G algorithm may be faster for some highly redundant
        -:  263: *      files if the parameter max_chain_length (described below) is too large.
        -:  264: *
        -:  265: *  ACKNOWLEDGEMENTS
        -:  266: *
        -:  267: *      The idea of lazy evaluation of matches is due to Jan-Mark Wams, and
        -:  268: *      I found it in 'freeze' written by Leonid Broukhis.
        -:  269: *      Thanks to many info-zippers for bug reports and testing.
        -:  270: *
        -:  271: *  REFERENCES
        -:  272: *
        -:  273: *      APPNOTE.TXT documentation file in PKZIP 1.93a distribution.
        -:  274: *
        -:  275: *      A description of the Rabin and Karp algorithm is given in the book
        -:  276: *         "Algorithms" by R. Sedgewick, Addison-Wesley, p252.
        -:  277: *
        -:  278: *      Fiala,E.R., and Greene,D.H.
        -:  279: *         Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595
        -:  280: *
        -:  281: *  INTERFACE
        -:  282: *
        -:  283: *      void lm_init (int pack_level, ush *flags)
        -:  284: *          Initialize the "longest match" routines for a new file
        -:  285: *
        -:  286: *      ulg deflate (void)
        -:  287: *          Processes a new input file and return its compressed length. Sets
        -:  288: *          the compressed length, crc, deflate flags and internal file
        -:  289: *          attributes.
        -:  290: */
        -:  291:
        -:  292:/*
        -:  293:#ifndef lint
        -:  294:static char rcsid[] = "$Id: deflate.c,v 0.13 1993/05/25 16:25:40 jloup Exp $";
        -:  295:#endif
        -:  296:*/
        -:  297:
        -:  298:/* ===========================================================================
        -:  299: * Configuration parameters
        -:  300: */
        -:  301:
        -:  302:/* Compile with MEDIUM_MEM to reduce the memory requirements or
        -:  303: * with SMALL_MEM to use as little memory as possible. Use BIG_MEM if the
        -:  304: * entire input file can be held in memory (not possible on 16 bit systems).
        -:  305: * Warning: defining these symbols affects HASH_BITS (see below) and thus
        -:  306: * affects the compression ratio. The compressed output
        -:  307: * is still correct, and might even be smaller in some cases.
        -:  308: */
        -:  309:
        -:  310:#ifdef SMALL_MEM
        -:  311:#   define HASH_BITS  13  /* Number of bits used to hash strings */
        -:  312:#endif
        -:  313:#ifdef MEDIUM_MEM
        -:  314:#   define HASH_BITS  14
        -:  315:#endif
        -:  316:#ifndef HASH_BITS
        -:  317:#   define HASH_BITS  15
        -:  318:   /* For portability to 16 bit machines, do not use values above 15. */
        -:  319:#endif
        -:  320:
        -:  321:/* To save space (see unlzw.c), we overlay prev+head with tab_prefix and
        -:  322: * window with tab_suffix. Check that we can do this:
        -:  323: */
        -:  324:#if WSIZE<<1 > 1<<BITS
        -:  325:   error: cannot overlay window with tab_suffix and prev with tab_prefix0
        -:  326:#endif
        -:  327:#if HASH_BITS > BITS-1
        -:  328:   error: cannot overlay head with tab_prefix1
        -:  329:#endif
        -:  330:
        -:  331:#define HASH_SIZE (unsigned)(1<<HASH_BITS)
        -:  332:#define HASH_MASK (HASH_SIZE-1)
        -:  333:#define WMASK     (WSIZE-1)
        -:  334:/* HASH_SIZE and WSIZE must be powers of two */
        -:  335:
        -:  336:#define NIL 0
        -:  337:/* Tail of hash chains */
        -:  338:
        -:  339:#define FAST 4
        -:  340:#define SLOW 2
        -:  341:/* speed options for the general purpose bit flag */
        -:  342:
        -:  343:#ifndef TOO_FAR
        -:  344:#  define TOO_FAR 4096
        -:  345:#endif
        -:  346:/* Matches of length 3 are discarded if their distance exceeds TOO_FAR */
        -:  347:
        -:  348:/* ===========================================================================
        -:  349: * Local data used by the "longest match" routines.
        -:  350: */
        -:  351:
        -:  352:typedef ush Pos;
        -:  353:typedef unsigned IPos;
        -:  354:/* A Pos is an index in the character window. We use short instead of int to
        -:  355: * save space in the various tables. IPos is used only for parameter passing.
        -:  356: */
        -:  357:
        -:  358:/* DECLARE(uch, window, 2L*WSIZE); */
        -:  359:/* Sliding window. Input bytes are read into the second half of the window,
        -:  360: * and move to the first half later to keep a dictionary of at least WSIZE
        -:  361: * bytes. With this organization, matches are limited to a distance of
        -:  362: * WSIZE-MAX_MATCH bytes, but this ensures that IO is always
        -:  363: * performed with a length multiple of the block size. Also, it limits
        -:  364: * the window size to 64K, which is quite useful on MSDOS.
        -:  365: * To do: limit the window size to WSIZE+BSZ if SMALL_MEM (the code would
        -:  366: * be less efficient).
        -:  367: */
        -:  368:
        -:  369:/* DECLARE(Pos, prev, WSIZE); */
        -:  370:/* Link to older string with same hash index. To limit the size of this
        -:  371: * array to 64K, this link is maintained only for the last 32K strings.
        -:  372: * An index in this array is thus a window index modulo 32K.
        -:  373: */
        -:  374:
        -:  375:/* DECLARE(Pos, head, 1<<HASH_BITS); */
        -:  376:/* Heads of the hash chains or NIL. */
        -:  377:
        -:  378:ulg window_size = (ulg)2*WSIZE;
        -:  379:/* window size, 2*WSIZE except for MMAP or BIG_MEM, where it is the
        -:  380: * input file length plus MIN_LOOKAHEAD.
        -:  381: */
        -:  382:
        -:  383:long block_start;
        -:  384:/* window position at the beginning of the current output block. Gets
        -:  385: * negative when the window is moved backwards.
        -:  386: */
        -:  387:
        -:  388:local unsigned ins_h;  /* hash index of string to be inserted */
        -:  389:
        -:  390:#define H_SHIFT  ((HASH_BITS+MIN_MATCH-1)/MIN_MATCH)
        -:  391:/* Number of bits by which ins_h and del_h must be shifted at each
        -:  392: * input step. It must be such that after MIN_MATCH steps, the oldest
        -:  393: * byte no longer takes part in the hash key, that is:
        -:  394: *   H_SHIFT * MIN_MATCH >= HASH_BITS
        -:  395: */
        -:  396:
        -:  397:unsigned int near prev_length;
        -:  398:/* Length of the best match at previous step. Matches not greater than this
        -:  399: * are discarded. This is used in the lazy match evaluation.
        -:  400: */
        -:  401:
        -:  402:      unsigned near strstart;      /* start of string to insert */
        -:  403:      unsigned near match_start;   /* start of matching string */
        -:  404:local int           eofile;        /* flag set at end of input file */
        -:  405:local unsigned      lookahead;     /* number of valid bytes ahead in window */
        -:  406:
        -:  407:unsigned near max_chain_length;
        -:  408:/* To speed up deflation, hash chains are never searched beyond this length.
        -:  409: * A higher limit improves compression ratio but degrades the speed.
        -:  410: */
        -:  411:
        -:  412:local unsigned int max_lazy_match;
        -:  413:/* Attempt to find a better match only when the current match is strictly
        -:  414: * smaller than this value.
        -:  415: */
        -:  416:
        -:  417:int near good_match;
        -:  418:/* Use a faster search when the previous match is longer than this */
        -:  419:
        -:  420:
        -:  421:/* Values for max_lazy_match, good_match and max_chain_length, depending on
        -:  422: * the desired pack level (0..9). The values given below have been tuned to
        -:  423: * exclude worst case performance for pathological files. Better values may be
        -:  424: * found for specific files.
        -:  425: */
        -:  426:
        -:  427:typedef struct config {
        -:  428:   ush good_length; /* reduce lazy search above this match length */
        -:  429:   ush max_lazy;    /* do not perform lazy search above this match length */
        -:  430:   ush nice_length; /* quit search above this match length */
        -:  431:   ush max_chain;
        -:  432:} config;
        -:  433:
        -:  434:#ifdef  FULL_SEARCH
        -:  435:# define nice_match MAX_MATCH
        -:  436:#else
        -:  437:  int near nice_match; /* Stop searching when current match exceeds this */
        -:  438:#endif
        -:  439:
        -:  440:local config configuration_table[10] = {
        -:  441:/*      good lazy nice chain */
        -:  442:/* 0 */ {0,    0,  0,    0},  /* store only */
        -:  443:/* 1 */ {4,    4, 16,   16},  /* maximum speed */
        -:  444:/* 2 */ {6,    8, 16,   16},
        -:  445:/* 3 */ {8,   16, 32,   32},
        -:  446:/* 4 */ {8,   16, 64,   64},
        -:  447:/* 5 */ {8,   16, 128, 128},
        -:  448:/* 6 */ {8,   32, 128, 256},
        -:  449:/* 7 */ {8,   64, 128, 512},
        -:  450:/* 8 */ {32, 128, 258, 1024},
        -:  451:/* 9 */ {32, 258, 258, 4096}}; /* maximum compression */
        -:  452:
        -:  453:/* Note: the current code requires max_lazy >= MIN_MATCH and max_chain >= 4
        -:  454: * but these restrictions can easily be removed at a small cost.
        -:  455: */
        -:  456:
        -:  457:#define EQUAL 0
        -:  458:/* result of memcmp for equal strings */
        -:  459:
        -:  460:/* ===========================================================================
        -:  461: *  Prototypes for local functions.
        -:  462: */
        -:  463:local void fill_window   OF((void));
        -:  464:      int  longest_match OF((IPos cur_match));
        -:  465:#ifdef ASMV
        -:  466:      void match_init OF((void)); /* asm code initialization */
        -:  467:#endif
        -:  468:
        -:  469:#ifdef DEBUG
        -:  470:local  void check_match OF((IPos start, IPos match, int length));
        -:  471:#endif
        -:  472:
        -:  473:/* ===========================================================================
        -:  474: * Update a hash value with the given input byte
        -:  475: * IN  assertion: all calls to to UPDATE_HASH are made with consecutive
        -:  476: *    input characters, so that a running hash key can be computed from the
        -:  477: *    previous key instead of complete recalculation each time.
        -:  478: */
        -:  479:#define UPDATE_HASH(h,c) (h = (((h)<<H_SHIFT) ^ (c)) & HASH_MASK)
        -:  480:
        -:  481:/* ===========================================================================
        -:  482: * Insert string s in the dictionary and set match_head to the previous head
        -:  483: * of the hash chain (the most recent string with same hash key). Return
        -:  484: * the previous length of the hash chain.
        -:  485: * IN  assertion: all calls to to INSERT_STRING are made with consecutive
        -:  486: *    input characters and the first MIN_MATCH bytes of s are valid
        -:  487: *    (except for the last MIN_MATCH-1 bytes of the input file).
        -:  488: */
        -:  489:#define INSERT_STRING(s, match_head) \
        -:  490:   (UPDATE_HASH(ins_h, window[(s) + MIN_MATCH-1]), \
        -:  491:    prev[(s) & WMASK] = match_head = head[ins_h], \
        -:  492:    head[ins_h] = (s))
        -:  493:
        -:  494:/* ===========================================================================
        -:  495: * Initialize the "longest match" routines for a new file
        -:  496: */
function lm_init called 175 returned 100% blocks executed 84%
      175:  497:void lm_init (pack_level, flags)
        -:  498:    int pack_level; /* 0: store, 1: best speed, 9: best compression */
        -:  499:    ush *flags;     /* general purpose bit flag */
        -:  500:{
        -:  501:    register unsigned j;
        -:  502:
     175*:  503:    if (pack_level < 1 || pack_level > 9) error("bad pack level");
branch  0 taken 175 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 175
call    4 never executed
        -:  504:
        -:  505:    /* Initialize the hash table. */
        -:  506:
        -:  507:
        -:  508:#if defined(MAXSEG_64K) && HASH_BITS == 15
        -:  509:    for (j = 0;  j < HASH_SIZE; j++) head[j] = NIL;
        -:  510:#else
      175:  511:    memzero((char*)head, HASH_SIZE*sizeof(*head));
        -:  512:#endif
        -:  513:    /* prev will be initialized on the fly */
        -:  514:
        -:  515:    /* Set the default configuration parameters:
        -:  516:     */
      175:  517:    max_lazy_match   = configuration_table[pack_level].max_lazy;
      175:  518:    good_match       = configuration_table[pack_level].good_length;
        -:  519:#ifndef FULL_SEARCH
      175:  520:    nice_match       = configuration_table[pack_level].nice_length;
        -:  521:#endif
      175:  522:    max_chain_length = configuration_table[pack_level].max_chain;
      175:  523:    if (pack_level == 1) {
branch  0 taken 17 (fallthrough)
branch  1 taken 158
       17:  524:       *flags |= FAST;
      158:  525:    } else if (pack_level == 9) {
branch  0 taken 17 (fallthrough)
branch  1 taken 141
       17:  526:       *flags |= SLOW;
        -:  527:    }
        -:  528:    /* ??? reduce max_chain_length for binary files */
        -:  529:
      175:  530:    strstart = 0;
      175:  531:    block_start = 0L;
        -:  532:#ifdef ASMV
        -:  533:    match_init(); /* initialize the asm code */
        -:  534:#endif
        -:  535:
      175:  536:    lookahead = read_buf((char*)window,
call    0 returned 175
        -:  537:#ifndef FAULTY_F_KP_6
        -:  538:			 sizeof(int) <= 2 ? (unsigned)WSIZE : 2*WSIZE);
        -:  539:#else
        -:  540:			 sizeof(int) > 2 ? (unsigned)WSIZE : 2*WSIZE);
        -:  541:#endif
        -:  542:
      175:  543:    if (lookahead == 0 || lookahead == (unsigned)EOF) {
branch  0 taken 174 (fallthrough)
branch  1 taken 1
branch  2 taken 1 (fallthrough)
branch  3 taken 173
        2:  544:       eofile = 1, lookahead = 0;
        2:  545:       return;
        -:  546:    }
      173:  547:    eofile = 0;
        -:  548:    /* Make sure that we always have enough lookahead. This is important
        -:  549:     * if input comes from a device such as a tty.
        -:  550:     */
     173*:  551:    while (lookahead < MIN_LOOKAHEAD && !eofile) fill_window();
call    0 never executed
branch  1 taken 0 (fallthrough)
branch  2 taken 173
branch  3 never executed
branch  4 never executed
        -:  552:
      173:  553:    ins_h = 0;
      519:  554:    for (j=0; j<MIN_MATCH-1; j++) UPDATE_HASH(ins_h, window[j]);
branch  0 taken 346
branch  1 taken 173 (fallthrough)
        -:  555:    /* If lookahead < MIN_MATCH, ins_h is garbage, but this is
        -:  556:     * not important since only literal bytes will be emitted.
        -:  557:     */
        -:  558:}
        -:  559:
        -:  560:/* ===========================================================================
        -:  561: * Set match_start to the longest match starting at the given string and
        -:  562: * return its length. Matches shorter or equal to prev_length are discarded,
        -:  563: * in which case the result is equal to prev_length and match_start is
        -:  564: * garbage.
        -:  565: * IN assertions: cur_match is the head of the hash chain for the current
        -:  566: *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
        -:  567: */
        -:  568:#ifndef ASMV
        -:  569:/* For MSDOS, OS/2 and 386 Unix, an optimized version is in match.asm or
        -:  570: * match.s. The code is functionally equivalent, so you can use the C version
        -:  571: * if desired.
        -:  572: */
function longest_match called 2037967 returned 100% blocks executed 100%
  2037967:  573:int longest_match(cur_match)
        -:  574:    IPos cur_match;                             /* current match */
        -:  575:{
  2037967:  576:    unsigned chain_length = max_chain_length;   /* max hash chain length */
  2037967:  577:    register uch *scan = window + strstart;     /* current string */
        -:  578:    register uch *match;                        /* matched string */
        -:  579:    register int len;                           /* length of current match */
  2037967:  580:    int best_len = prev_length;                 /* best match length so far */
  2037967:  581:    IPos limit = strstart > (IPos)MAX_DIST ? strstart - (IPos)MAX_DIST : NIL;
        -:  582:    /* Stop when cur_match becomes <= limit. To simplify the code,
        -:  583:     * we prevent matches with the string of window index 0.
        -:  584:     */
        -:  585:
        -:  586:/* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
        -:  587: * It is easy to get rid of this optimization if necessary.
        -:  588: */
        -:  589:#if HASH_BITS < 8 || MAX_MATCH != 258
        -:  590:   error: Code too clever
        -:  591:#endif
        -:  592:
        -:  593:#ifdef UNALIGNED_OK
        -:  594:    /* Compare two bytes at a time. Note: this is not always beneficial.
        -:  595:     * Try with and without -DUNALIGNED_OK to check.
        -:  596:     */
        -:  597:    register uch *strend = window + strstart + MAX_MATCH - 1;
        -:  598:    register ush scan_start = *(ush*)scan;
        -:  599:    register ush scan_end   = *(ush*)(scan+best_len-1);
        -:  600:#else
  2037967:  601:    register uch *strend = window + strstart + MAX_MATCH;
  2037967:  602:    register uch scan_end1  = scan[best_len-1];
  2037967:  603:    register uch scan_end   = scan[best_len];
        -:  604:#endif
        -:  605:
        -:  606:    /* Do not waste too much time if we already have a good match: */
  2037967:  607:    if (prev_length >= good_match) {
branch  0 taken 176138 (fallthrough)
branch  1 taken 1861829
   176138:  608:        chain_length >>= 2;
        -:  609:    }
        -:  610:    Assert(strstart <= window_size-MIN_LOOKAHEAD, "insufficient lookahead");
        -:  611:
        -:  612:    do {
        -:  613:        Assert(cur_match < strstart, "no future");
 47018150:  614:        match = window + cur_match;
        -:  615:
        -:  616:        /* Skip to next match if the match length cannot increase
        -:  617:         * or if the match length is less than 2:
        -:  618:         */
        -:  619:#if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
        -:  620:        /* This code assumes sizeof(unsigned short) == 2. Do not use
        -:  621:         * UNALIGNED_OK if your compiler uses a different size.
        -:  622:         */
        -:  623:        if (*(ush*)(match+best_len-1) != scan_end ||
        -:  624:            *(ush*)match != scan_start) continue;
        -:  625:
        -:  626:        /* It is not necessary to compare scan[2] and match[2] since they are
        -:  627:         * always equal when the other bytes match, given that the hash keys
        -:  628:         * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
        -:  629:         * strstart+3, +5, ... up to strstart+257. We check for insufficient
        -:  630:         * lookahead only every 4th comparison; the 128th check will be made
        -:  631:         * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is
        -:  632:         * necessary to put more guard bytes at the end of the window, or
        -:  633:         * to check more often for insufficient lookahead.
        -:  634:         */
        -:  635:        scan++, match++;
        -:  636:        do {
        -:  637:        } while (*(ush*)(scan+=2) == *(ush*)(match+=2) &&
        -:  638:                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
        -:  639:                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
        -:  640:                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
        -:  641:                 scan < strend);
        -:  642:        /* The funny "do {}" generates better code on most compilers */
        -:  643:
        -:  644:        /* Here, scan <= window+strstart+257 */
        -:  645:        Assert(scan <= window+(unsigned)(window_size-1), "wild scan");
        -:  646:        if (*scan == *match) scan++;
        -:  647:
        -:  648:        len = (MAX_MATCH - 1) - (int)(strend-scan);
        -:  649:        scan = strend - (MAX_MATCH-1);
        -:  650:
        -:  651:#else /* UNALIGNED_OK */
        -:  652:
 47018150:  653:        if (match[best_len]   != scan_end  ||
branch  0 taken 6082373 (fallthrough)
branch  1 taken 40935777
  6082373:  654:            match[best_len-1] != scan_end1 ||
branch  0 taken 3081812 (fallthrough)
branch  1 taken 3000561
  3081812:  655:            *match            != *scan     ||
branch  0 taken 2034708 (fallthrough)
branch  1 taken 1047104
 47018150:  656:            *++match          != scan[1])      continue;
branch  0 taken 6279 (fallthrough)
branch  1 taken 2028429
        -:  657:
        -:  658:        /* The check at best_len-1 can be removed because it will be made
        -:  659:         * again later. (This heuristic is not always a win.)
        -:  660:         * It is not necessary to compare scan[2] and match[2] since they
        -:  661:         * are always equal when the other bytes match, given that
        -:  662:         * the hash keys are equal and that HASH_BITS >= 8.
        -:  663:         */
  2028429:  664:        scan += 2, match++;
        -:  665:
        -:  666:        /* We check for insufficient lookahead only every 8th comparison;
        -:  667:         * the 256th check will be made at strstart+258.
        -:  668:         */
        -:  669:        do {
 14341569:  670:        } while (*++scan == *++match && *++scan == *++match &&
branch  0 taken 14011686 (fallthrough)
branch  1 taken 329883
 14011686:  671:                 *++scan == *++match && *++scan == *++match &&
branch  0 taken 13789366 (fallthrough)
branch  1 taken 222320
branch  2 taken 13606744 (fallthrough)
branch  3 taken 182622
 13606744:  672:                 *++scan == *++match && *++scan == *++match &&
branch  0 taken 13478410 (fallthrough)
branch  1 taken 128334
branch  2 taken 13380045 (fallthrough)
branch  3 taken 98365
 15408474:  673:                 *++scan == *++match && *++scan == *++match &&
branch  0 taken 14341569 (fallthrough)
branch  1 taken 541785
branch  2 taken 13313655 (fallthrough)
branch  3 taken 66390
branch  4 taken 13262193 (fallthrough)
branch  5 taken 51462
branch  6 taken 12854925
branch  7 taken 407268 (fallthrough)
        -:  674:                 scan < strend);
        -:  675:
  2028429:  676:        len = MAX_MATCH - (int)(strend - scan);
  2028429:  677:        scan = strend - MAX_MATCH;
        -:  678:
        -:  679:#endif /* UNALIGNED_OK */
        -:  680:
  2028429:  681:        if (len > best_len) {
branch  0 taken 1814543 (fallthrough)
branch  1 taken 213886
  1814543:  682:            match_start = cur_match;
  1814543:  683:            best_len = len;
  1814543:  684:            if (len >= nice_match) break;
branch  0 taken 414382 (fallthrough)
branch  1 taken 1400161
        -:  685:#ifdef UNALIGNED_OK
        -:  686:            scan_end = *(ush*)(scan+best_len-1);
        -:  687:#else
  1400161:  688:            scan_end1  = scan[best_len-1];
  1400161:  689:            scan_end   = scan[best_len];
        -:  690:#endif
        -:  691:        }
 46603768:  692:    } while ((cur_match = prev[cur_match & WMASK]) > limit
 46603768:  693:	     && --chain_length != 0);
branch  0 taken 45238724 (fallthrough)
branch  1 taken 1365044
branch  2 taken 44980183
branch  3 taken 258541 (fallthrough)
        -:  694:
  2037967:  695:    return best_len;
        -:  696:}
        -:  697:#endif /* ASMV */
        -:  698:
        -:  699:#ifdef DEBUG
        -:  700:/* ===========================================================================
        -:  701: * Check that the match at match_start is indeed a match.
        -:  702: */
        -:  703:local void check_match(start, match, length)
        -:  704:    IPos start, match;
        -:  705:    int length;
        -:  706:{
        -:  707:    /* check that the match is indeed a match */
        -:  708:    if (memcmp((char*)window + match,
        -:  709:                (char*)window + start, length) != EQUAL) {
        -:  710:        fprintf(stderr,
        -:  711:            " start %d, match %d, length %d\n",
        -:  712:            start, match, length);
        -:  713:        error("invalid match");
        -:  714:    }
        -:  715:    if (verbose > 1) {
        -:  716:        fprintf(stderr,"\\[%d,%d]", start-match, length);
        -:  717:        do { putc(window[start++], stderr); } while (--length != 0);
        -:  718:    }
        -:  719:}
        -:  720:#else
        -:  721:#  define check_match(start, match, length)
        -:  722:#endif
        -:  723:
        -:  724:/* ===========================================================================
        -:  725: * Fill the window when the lookahead becomes insufficient.
        -:  726: * Updates strstart and lookahead, and sets eofile if end of input file.
        -:  727: * IN assertion: lookahead < MIN_LOOKAHEAD && strstart + lookahead > 0
        -:  728: * OUT assertions: at least one byte has been read, or eofile is set;
        -:  729: *    file reads are performed for at least two bytes (required for the
        -:  730: *    translate_eol option).
        -:  731: */
function fill_window called 3395 returned 100% blocks executed 96%
     3395:  732:local void fill_window()
        -:  733:{
        -:  734:    register unsigned n, m;
     3395:  735:    unsigned more = (unsigned)(window_size - (ulg)lookahead - (ulg)strstart);
        -:  736:    /* Amount of free space at the end of the window. */
        -:  737:
        -:  738:    /* If the window is almost full and there is insufficient lookahead,
        -:  739:     * move the upper half to the lower one to make room in the upper half.
        -:  740:     */
     3395:  741:    if (more == (unsigned)EOF) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3395
        -:  742:        /* Very unlikely, but possible on 16 bit machine if strstart == 0
        -:  743:         * and lookahead == 1 (input done one byte at time)
        -:  744:         */
    #####:  745:        more--;
     3395:  746:    } else if (strstart >= WSIZE+MAX_DIST) {
branch  0 taken 3223 (fallthrough)
branch  1 taken 172
        -:  747:        /* By the IN assertion, the window is not empty so we can't confuse
        -:  748:         * more == 0 with more == 64K on a 16 bit machine.
        -:  749:         */
        -:  750:        Assert(window_size == (ulg)2*WSIZE, "no sliding with BIG_MEM");
        -:  751:
     3223:  752:        memcpy((char*)window, (char*)window+WSIZE, (unsigned)WSIZE);
     3223:  753:        match_start -= WSIZE;
     3223:  754:        strstart    -= WSIZE; /* we now have strstart >= MAX_DIST: */
        -:  755:
     3223:  756:        block_start -= (long) WSIZE;
        -:  757:
105614487:  758:        for (n = 0; n < HASH_SIZE; n++) {
branch  0 taken 105611264
branch  1 taken 3223 (fallthrough)
105611264:  759:            m = head[n];
105611264:  760:            head[n] = (Pos)(m >= WSIZE ? m-WSIZE : NIL);
branch  0 taken 67185 (fallthrough)
branch  1 taken 105544079
        -:  761:        }
105614487:  762:        for (n = 0; n < WSIZE; n++) {
branch  0 taken 105611264
branch  1 taken 3223 (fallthrough)
105611264:  763:            m = prev[n];
105611264:  764:            prev[n] = (Pos)(m >= WSIZE ? m-WSIZE : NIL);
branch  0 taken 105113304 (fallthrough)
branch  1 taken 497960
        -:  765:            /* If n is not on any hash chain, prev[n] is garbage but
        -:  766:             * its value will never be used.
        -:  767:             */
        -:  768:        }
     3223:  769:        more += WSIZE;
        -:  770:    }
        -:  771:    /* At this point, more >= 2 */
     3395:  772:    if (!eofile) {
branch  0 taken 3395 (fallthrough)
branch  1 taken 0
     3395:  773:        n = read_buf((char*)window+strstart+lookahead, more);
call    0 returned 3395
     3395:  774:        if (n == 0 || n == (unsigned)EOF) {
branch  0 taken 3222 (fallthrough)
branch  1 taken 173
branch  2 taken 0 (fallthrough)
branch  3 taken 3222
      173:  775:            eofile = 1;
        -:  776:        } else {
     3222:  777:            lookahead += n;
        -:  778:        }
        -:  779:    }
     3395:  780:}
        -:  781:
        -:  782:/* ===========================================================================
        -:  783: * Flush the current block, with given end-of-file flag.
        -:  784: * IN assertion: strstart is set to the end of the current match.
        -:  785: */
        -:  786:#define FLUSH_BLOCK(eof) \
        -:  787:   flush_block(block_start >= 0L ? (char*)&window[(unsigned)block_start] : \
        -:  788:                (char*)NULL, (long)strstart - block_start, (eof))
        -:  789:
        -:  790:/* ===========================================================================
        -:  791: * Processes a new input file and return its compressed length.
        -:  792: */
        -:  793:#ifdef NO_LAZY
        -:  794:ulg deflate()
        -:  795:{
        -:  796:    IPos hash_head; /* head of the hash chain */
        -:  797:    int flush;      /* set if current block must be flushed */
        -:  798:    unsigned match_length = 0;  /* length of best match */
        -:  799:
        -:  800:    prev_length = MIN_MATCH-1;
        -:  801:    while (lookahead != 0) {
        -:  802:        /* Insert the string window[strstart .. strstart+2] in the
        -:  803:         * dictionary, and set hash_head to the head of the hash chain:
        -:  804:         */
        -:  805:        INSERT_STRING(strstart, hash_head);
        -:  806:
        -:  807:        /* Find the longest match, discarding those <= prev_length.
        -:  808:         * At this point we have always match_length < MIN_MATCH
        -:  809:         */
        -:  810:        if (hash_head != NIL && strstart - hash_head <= MAX_DIST) {
        -:  811:            /* To simplify the code, we prevent matches with the string
        -:  812:             * of window index 0 (in particular we have to avoid a match
        -:  813:             * of the string with itself at the start of the input file).
        -:  814:             */
        -:  815:            match_length = longest_match (hash_head);
        -:  816:            /* longest_match() sets match_start */
        -:  817:            if (match_length > lookahead) match_length = lookahead;
        -:  818:        }
        -:  819:        if (match_length >= MIN_MATCH) {
        -:  820:            check_match(strstart, match_start, match_length);
        -:  821:
        -:  822:            flush = ct_tally(strstart-match_start, match_length - MIN_MATCH);
        -:  823:
        -:  824:            lookahead -= match_length;
        -:  825:            match_length--; /* string at strstart already in hash table */
        -:  826:            do {
        -:  827:                strstart++;
        -:  828:                INSERT_STRING(strstart, hash_head);
        -:  829:                /* strstart never exceeds WSIZE-MAX_MATCH, so there are
        -:  830:                 * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH
        -:  831:                 * these bytes are garbage, but it does not matter since the
        -:  832:                 * next lookahead bytes will always be emitted as literals.
        -:  833:                 */
        -:  834:            } while (--match_length != 0);
        -:  835:        } else {
        -:  836:            /* No match, output a literal byte */
        -:  837:            flush = ct_tally (0, window[strstart]);
        -:  838:            lookahead--;
        -:  839:        }
        -:  840:        strstart++; 
        -:  841:        if (flush) FLUSH_BLOCK(0), block_start = strstart;
        -:  842:
        -:  843:        /* Make sure that we always have enough lookahead, except
        -:  844:         * at the end of the input file. We need MAX_MATCH bytes
        -:  845:         * for the next match, plus MIN_MATCH bytes to insert the
        -:  846:         * string following the next match.
        -:  847:         */
        -:  848:        while (lookahead < MIN_LOOKAHEAD && !eofile) fill_window();
        -:  849:
        -:  850:    }
        -:  851:    return FLUSH_BLOCK(1); /* eof */
        -:  852:}
        -:  853:#else /* LAZY */
        -:  854:/* ===========================================================================
        -:  855: * Same as above, but achieves better compression. We use a lazy
        -:  856: * evaluation for matches: a match is finally adopted only if there is
        -:  857: * no better match at the next window position.
        -:  858: */
function deflate called 175 returned 100% blocks executed 98%
      175:  859:ulg deflate()
        -:  860:{
        -:  861:    IPos hash_head;          /* head of hash chain */
        -:  862:    IPos prev_match;         /* previous match */
        -:  863:    int flush;               /* set if current block must be flushed */
      175:  864:    int match_available = 0; /* set if previous match exists */
      175:  865:    register unsigned match_length = MIN_MATCH-1; /* length of best match */
        -:  866:#ifdef DEBUG
        -:  867:    extern long isize;        /* byte length of input file, for debug only */
        -:  868:#endif
        -:  869:
        -:  870:    /* Process the input block. */
  2977130:  871:    while (lookahead != 0) {
branch  0 taken 2976955
branch  1 taken 175 (fallthrough)
        -:  872:        /* Insert the string window[strstart .. strstart+2] in the
        -:  873:         * dictionary, and set hash_head to the head of the hash chain:
        -:  874:         */
  2976955:  875:        INSERT_STRING(strstart, hash_head);
        -:  876:
        -:  877:        /* Find the longest match, discarding those <= prev_length.
        -:  878:         */
  2976955:  879:        prev_length = match_length, prev_match = match_start;
  2976955:  880:        match_length = MIN_MATCH-1;
        -:  881:
  2976955:  882:        if (hash_head != NIL && prev_length < max_lazy_match &&
branch  0 taken 2561256 (fallthrough)
branch  1 taken 415699
branch  2 taken 2040626 (fallthrough)
branch  3 taken 520630
  2040626:  883:            strstart - hash_head <= MAX_DIST) {
branch  0 taken 2037967 (fallthrough)
branch  1 taken 2659
        -:  884:            /* To simplify the code, we prevent matches with the string
        -:  885:             * of window index 0 (in particular we have to avoid a match
        -:  886:             * of the string with itself at the start of the input file).
        -:  887:             */
  2037967:  888:            match_length = longest_match (hash_head);
call    0 returned 2037967
        -:  889:            /* longest_match() sets match_start */
  2037967:  890:            if (match_length > lookahead) match_length = lookahead;
branch  0 taken 172 (fallthrough)
branch  1 taken 2037795
        -:  891:
        -:  892:            /* Ignore a length 3 match if it is too distant: */
  2037967:  893:            if (match_length == MIN_MATCH && strstart-match_start > TOO_FAR){
branch  0 taken 241496 (fallthrough)
branch  1 taken 1796471
branch  2 taken 50271 (fallthrough)
branch  3 taken 191225
        -:  894:                /* If prev_match is also MIN_MATCH, match_start is garbage
        -:  895:                 * but we will ignore the current match anyway.
        -:  896:                 */
    50271:  897:                match_length--;
        -:  898:            }
        -:  899:        }
        -:  900:        /* If there was a match at the previous step and the current
        -:  901:         * match is not better, output the previous match:
        -:  902:         */
  2976955:  903:        if (prev_length >= MIN_MATCH && match_length <= prev_length) {
branch  0 taken 1297430 (fallthrough)
branch  1 taken 1679525
branch  2 taken 1182279 (fallthrough)
branch  3 taken 115151
        -:  904:
        -:  905:            check_match(strstart-1, prev_match, prev_length);
        -:  906:
  1182279:  907:            flush = ct_tally(strstart-1-prev_match, prev_length - MIN_MATCH);
call    0 returned 1182279
        -:  908:
        -:  909:            /* Insert in hash table all strings up to the end of the match.
        -:  910:             * strstart-1 and strstart are already inserted.
        -:  911:             */
  1182279:  912:            lookahead -= prev_length-1;
  1182279:  913:            prev_length -= 2;
        -:  914:            do {
108518547:  915:                strstart++;
108518547:  916:                INSERT_STRING(strstart, hash_head);
        -:  917:                /* strstart never exceeds WSIZE-MAX_MATCH, so there are
        -:  918:                 * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH
        -:  919:                 * these bytes are garbage, but it does not matter since the
        -:  920:                 * next lookahead bytes will always be emitted as literals.
        -:  921:                 */
108518547:  922:            } while (--prev_length != 0);
branch  0 taken 107336268
branch  1 taken 1182279 (fallthrough)
  1182279:  923:            match_available = 0;
  1182279:  924:            match_length = MIN_MATCH-1;
  1182279:  925:            strstart++;
  1182279:  926:            if (flush) FLUSH_BLOCK(0), block_start = strstart;
branch  0 taken 16 (fallthrough)
branch  1 taken 1182263
branch  2 taken 1 (fallthrough)
branch  3 taken 15
call    4 returned 16
        -:  927:
  1794676:  928:        } else if (match_available) {
branch  0 taken 612228 (fallthrough)
branch  1 taken 1182448
        -:  929:            /* If there was no match at the previous position, output a
        -:  930:             * single literal. If there was a match but the current match
        -:  931:             * is longer, truncate the previous match to a single literal.
        -:  932:             */
        -:  933:            Tracevv((stderr,"%c",window[strstart-1]));
   612228:  934:            if (ct_tally (0, window[strstart-1])) {
call    0 returned 612228
branch  1 taken 4 (fallthrough)
branch  2 taken 612224
       4*:  935:                FLUSH_BLOCK(0), block_start = strstart;
branch  0 taken 4 (fallthrough)
branch  1 taken 0
call    2 returned 4
        -:  936:            }
   612228:  937:            strstart++;
   612228:  938:            lookahead--;
        -:  939:        } else {
        -:  940:            /* There is no previous match to compare with, wait for
        -:  941:             * the next step to decide.
        -:  942:             */
  1182448:  943:            match_available = 1;
  1182448:  944:            strstart++;
  1182448:  945:            lookahead--;
        -:  946:        }
        -:  947:        Assert (strstart <= isize && lookahead <= isize, "a bit too far");
        -:  948:
        -:  949:        /* Make sure that we always have enough lookahead, except
        -:  950:         * at the end of the input file. We need MAX_MATCH bytes
        -:  951:         * for the next match, plus MIN_MATCH bytes to insert the
        -:  952:         * string following the next match.
        -:  953:         */
  2980350:  954:        while (lookahead < MIN_LOOKAHEAD && !eofile) fill_window();
call    0 returned 3395
branch  1 taken 22756 (fallthrough)
branch  2 taken 2957594
branch  3 taken 3395
branch  4 taken 19361 (fallthrough)
        -:  955:    }
      175:  956:    if (match_available) ct_tally (0, window[strstart-1]);
branch  0 taken 169 (fallthrough)
branch  1 taken 6
call    2 returned 169
        -:  957:
      175:  958:    return FLUSH_BLOCK(1); /* eof */
branch  0 taken 172 (fallthrough)
branch  1 taken 3
call    2 returned 175
        -:  959:}
        -:  960:#endif /* LAZY */
        -:  961:/* Getopt for GNU.
        -:  962:   NOTE: getopt is now part of the C library, so if you don't know what
        -:  963:   "Keep this file name-space clean" means, talk to roland@gnu.ai.mit.edu
        -:  964:   before changing it!
        -:  965:
        -:  966:   Copyright (C) 1987, 88, 89, 90, 91, 1992 Free Software Foundation, Inc.
        -:  967:
        -:  968:   This program is free software; you can redistribute it and/or modify it
        -:  969:   under the terms of the GNU General Public License as published by the
        -:  970:   Free Software Foundation; either version 2, or (at your option) any
        -:  971:   later version.
        -:  972:   
        -:  973:   This program is distributed in the hope that it will be useful,
        -:  974:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:  975:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:  976:   GNU General Public License for more details.
        -:  977:   
        -:  978:   You should have received a copy of the GNU General Public License
        -:  979:   along with this program; if not, write to the Free Software
        -:  980:   Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:  981:
        -:  982:/* AIX requires this to be the first thing in the file.  */
        -:  983:#if (defined( __GNUC__) && (!defined(LINUX)))
        -:  984:#define alloca __builtin_alloca
        -:  985:#else /* not __GNUC__ */
        -:  986:#if defined (HAVE_ALLOCA_H) || (defined(sparc) && (defined(sun) || (!defined(USG) && !defined(SVR4) && !defined(__svr4__))))
        -:  987:#include <alloca.h>
        -:  988:#else
        -:  989:#ifdef _AIX
        -:  990: #pragma alloca
        -:  991:#else
        -:  992:char *alloca ();
        -:  993:#endif
        -:  994:#endif /* alloca.h */
        -:  995:#endif /* not __GNUC__ */
        -:  996:
        -:  997:/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.  */
        -:  998:#ifndef _NO_PROTO
        -:  999:#  define _NO_PROTO
        -: 1000:#endif
        -: 1001:
        -: 1002:#if defined(USG) || defined(STDC_HEADERS) || defined(__GNU_LIBRARY__)
        -: 1003:#include <string.h>
        -: 1004:#endif
        -: 1005:
        -: 1006:/* This needs to come after some library #include
        -: 1007:   to get __GNU_LIBRARY__ defined.  */
        -: 1008:#ifdef	__GNU_LIBRARY__
        -: 1009:#undef	alloca
        -: 1010:/* Don't include stdlib.h for non-GNU C libraries because some of them
        -: 1011:   contain conflicting prototypes for getopt.  */
        -: 1012:#include <stdlib.h>
        -: 1013:#else	/* Not GNU C library.  */
        -: 1014:#define	__alloca	alloca
        -: 1015:#endif	/* GNU C library.  */
        -: 1016:
        -: 1017:#ifdef LINUX
        -: 1018:#define __alloca alloca
        -: 1019:#endif
        -: 1020:
        -: 1021:#if !__STDC__
        -: 1022:#define const
        -: 1023:#endif
        -: 1024:
        -: 1025:/* If GETOPT_COMPAT is defined, `+' as well as `--' can introduce a
        -: 1026:   long-named option.  Because this is not POSIX.2 compliant, it is
        -: 1027:   being phased out.  */
        -: 1028:#define GETOPT_COMPAT
        -: 1029:
        -: 1030:/* This version of `getopt' appears to the caller like standard Unix `getopt'
        -: 1031:   but it behaves differently for the user, since it allows the user
        -: 1032:   to intersperse the options with the other arguments.
        -: 1033:
        -: 1034:   As `getopt' works, it permutes the elements of ARGV so that,
        -: 1035:   when it is done, all the options precede everything else.  Thus
        -: 1036:   all application programs are extended to handle flexible argument order.
        -: 1037:
        -: 1038:   Setting the environment variable POSIXLY_CORRECT disables permutation.
        -: 1039:   Then the behavior is completely standard.
        -: 1040:
        -: 1041:   GNU application programs can use a third alternative mode in which
        -: 1042:   they can distinguish the relative order of options and other arguments.  */
        -: 1043:
        -: 1044:/* For communication from `getopt' to the caller.
        -: 1045:   When `getopt' finds an option that takes an argument,
        -: 1046:   the argument value is returned here.
        -: 1047:   Also, when `ordering' is RETURN_IN_ORDER,
        -: 1048:   each non-option ARGV-element is returned here.  */
        -: 1049:
        -: 1050:char *optarg = 0;
        -: 1051:
        -: 1052:/* Index in ARGV of the next element to be scanned.
        -: 1053:   This is used for communication to and from the caller
        -: 1054:   and for communication between successive calls to `getopt'.
        -: 1055:
        -: 1056:   On entry to `getopt', zero means this is the first call; initialize.
        -: 1057:
        -: 1058:   When `getopt' returns EOF, this is the index of the first of the
        -: 1059:   non-option elements that the caller should itself scan.
        -: 1060:
        -: 1061:   Otherwise, `optind' communicates from one call to the next
        -: 1062:   how much of ARGV has been scanned so far.  */
        -: 1063:
        -: 1064:int optind = 0;
        -: 1065:
        -: 1066:/* The next char to be scanned in the option-element
        -: 1067:   in which the last option character we returned was found.
        -: 1068:   This allows us to pick up the scan where we left off.
        -: 1069:
        -: 1070:   If this is zero, or a null string, it means resume the scan
        -: 1071:   by advancing to the next ARGV-element.  */
        -: 1072:
        -: 1073:static char *nextchar;
        -: 1074:
        -: 1075:/* Callers store zero here to inhibit the error message
        -: 1076:   for unrecognized options.  */
        -: 1077:
        -: 1078:int opterr = 1;
        -: 1079:
        -: 1080:/* Describe how to deal with options that follow non-option ARGV-elements.
        -: 1081:
        -: 1082:   If the caller did not specify anything,
        -: 1083:   the default is REQUIRE_ORDER if the environment variable
        -: 1084:   POSIXLY_CORRECT is defined, PERMUTE otherwise.
        -: 1085:
        -: 1086:   REQUIRE_ORDER means don't recognize them as options;
        -: 1087:   stop option processing when the first non-option is seen.
        -: 1088:   This is what Unix does.
        -: 1089:   This mode of operation is selected by either setting the environment
        -: 1090:   variable POSIXLY_CORRECT, or using `+' as the first character
        -: 1091:   of the list of option characters.
        -: 1092:
        -: 1093:   PERMUTE is the default.  We permute the contents of ARGV as we scan,
        -: 1094:   so that eventually all the non-options are at the end.  This allows options
        -: 1095:   to be given in any order, even with programs that were not written to
        -: 1096:   expect this.
        -: 1097:
        -: 1098:   RETURN_IN_ORDER is an option available to programs that were written
        -: 1099:   to expect options and other ARGV-elements in any order and that care about
        -: 1100:   the ordering of the two.  We describe each non-option ARGV-element
        -: 1101:   as if it were the argument of an option with character code 1.
        -: 1102:   Using `-' as the first character of the list of option characters
        -: 1103:   selects this mode of operation.
        -: 1104:
        -: 1105:   The special argument `--' forces an end of option-scanning regardless
        -: 1106:   of the value of `ordering'.  In the case of RETURN_IN_ORDER, only
        -: 1107:   `--' can cause `getopt' to return EOF with `optind' != ARGC.  */
        -: 1108:
        -: 1109:static enum
        -: 1110:{
        -: 1111:  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER
        -: 1112:} ordering;
        -: 1113:
        -: 1114:#ifdef	__GNU_LIBRARY__
        -: 1115:#include <string.h>
        -: 1116:#define	my_index	strchr
        -: 1117:#define	my_bcopy(src, dst, n)	memcpy ((dst), (src), (n))
        -: 1118:#else
        -: 1119:
        -: 1120:/* Avoid depending on library functions or files
        -: 1121:   whose names are inconsistent.  */
        -: 1122:
        -: 1123:char *getenv ();
        -: 1124:
        -: 1125:static char *
        -: 1126:my_index (string, chr)
        -: 1127:     char *string;
        -: 1128:     int chr;
        -: 1129:{
        -: 1130:  while (*string)
        -: 1131:    {
        -: 1132:      if (*string == chr)
        -: 1133:	return string;
        -: 1134:      string++;
        -: 1135:    }
        -: 1136:  return 0;
        -: 1137:}
        -: 1138:
        -: 1139:static void
        -: 1140:my_bcopy (from, to, size)
        -: 1141:     char *from, *to;
        -: 1142:     int size;
        -: 1143:{
        -: 1144:  int i;
        -: 1145:  for (i = 0; i < size; i++)
        -: 1146:    to[i] = from[i];
        -: 1147:}
        -: 1148:#endif				/* GNU C library.  */
        -: 1149:
        -: 1150:/* Handle permutation of arguments.  */
        -: 1151:
        -: 1152:/* Describe the part of ARGV that contains non-options that have
        -: 1153:   been skipped.  `first_nonopt' is the index in ARGV of the first of them;
        -: 1154:   `last_nonopt' is the index after the last of them.  */
        -: 1155:
        -: 1156:static int first_nonopt;
        -: 1157:static int last_nonopt;
        -: 1158:
        -: 1159:/* Exchange two adjacent subsequences of ARGV.
        -: 1160:   One subsequence is elements [first_nonopt,last_nonopt)
        -: 1161:   which contains all the non-options that have been skipped so far.
        -: 1162:   The other is elements [last_nonopt,optind), which contains all
        -: 1163:   the options processed since those non-options were skipped.
        -: 1164:
        -: 1165:   `first_nonopt' and `last_nonopt' are relocated so that they describe
        -: 1166:   the new indices of the non-options in ARGV after they are moved.  */
        -: 1167:
        -: 1168:static void
function exchange called 16 returned 100% blocks executed 100%
       16: 1169:exchange (argv)
        -: 1170:     char **argv;
        -: 1171:{
       16: 1172:  int nonopts_size = (last_nonopt - first_nonopt) * sizeof (char *);
        -: 1173:#ifdef _CRAY
        -: 1174:  char *temp[last_nonopt - first_nonopt];
        -: 1175:#else
       16: 1176:  char **temp = (char **) __alloca (nonopts_size);
        -: 1177:#endif
        -: 1178:
        -: 1179:  /* Interchange the two blocks of data in ARGV.  */
        -: 1180:
       16: 1181:  my_bcopy ((char *) &argv[first_nonopt], (char *) temp, nonopts_size);
       16: 1182:  my_bcopy ((char *) &argv[last_nonopt], (char *) &argv[first_nonopt],
        -: 1183:	    (optind - last_nonopt) * sizeof (char *));
       16: 1184:  my_bcopy ((char *) temp,
        -: 1185:	    (char *) &argv[first_nonopt + optind - last_nonopt],
        -: 1186:	    nonopts_size);
        -: 1187:
        -: 1188:  /* Update records for the slots the non-options now occupy.  */
        -: 1189:
       16: 1190:  first_nonopt += (optind - last_nonopt);
       16: 1191:  last_nonopt = optind;
       16: 1192:}
        -: 1193:
        -: 1194:/* Scan elements of ARGV (whose length is ARGC) for option characters
        -: 1195:   given in OPTSTRING.
        -: 1196:
        -: 1197:   If an element of ARGV starts with '-', and is not exactly "-" or "--",
        -: 1198:   then it is an option element.  The characters of this element
        -: 1199:   (aside from the initial '-') are option characters.  If `getopt'
        -: 1200:   is called repeatedly, it returns successively each of the option characters
        -: 1201:   from each of the option elements.
        -: 1202:
        -: 1203:   If `getopt' finds another option character, it returns that character,
        -: 1204:   updating `optind' and `nextchar' so that the next call to `getopt' can
        -: 1205:   resume the scan with the following option character or ARGV-element.
        -: 1206:
        -: 1207:   If there are no more option characters, `getopt' returns `EOF'.
        -: 1208:   Then `optind' is the index in ARGV of the first ARGV-element
        -: 1209:   that is not an option.  (The ARGV-elements have been permuted
        -: 1210:   so that those that are not options now come last.)
        -: 1211:
        -: 1212:   OPTSTRING is a string containing the legitimate option characters.
        -: 1213:   If an option character is seen that is not listed in OPTSTRING,
        -: 1214:   return '?' after printing an error message.  If you set `opterr' to
        -: 1215:   zero, the error message is suppressed but we still return '?'.
        -: 1216:
        -: 1217:   If a char in OPTSTRING is followed by a colon, that means it wants an arg,
        -: 1218:   so the following text in the same ARGV-element, or the text of the following
        -: 1219:   ARGV-element, is returned in `optarg'.  Two colons mean an option that
        -: 1220:   wants an optional arg; if there is text in the current ARGV-element,
        -: 1221:   it is returned in `optarg', otherwise `optarg' is set to zero.
        -: 1222:
        -: 1223:   If OPTSTRING starts with `-' or `+', it requests different methods of
        -: 1224:   handling the non-option ARGV-elements.
        -: 1225:   See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.
        -: 1226:
        -: 1227:   Long-named options begin with `--' instead of `-'.
        -: 1228:   Their names may be abbreviated as long as the abbreviation is unique
        -: 1229:   or is an exact match for some defined option.  If they have an
        -: 1230:   argument, it follows the option name in the same ARGV-element, separated
        -: 1231:   from the option name by a `=', or else the in next ARGV-element.
        -: 1232:   When `getopt' finds a long-named option, it returns 0 if that option's
        -: 1233:   `flag' field is nonzero, the value of the option's `val' field
        -: 1234:   if the `flag' field is zero.
        -: 1235:
        -: 1236:   The elements of ARGV aren't really const, because we permute them.
        -: 1237:   But we pretend they're const in the prototype to be compatible
        -: 1238:   with other systems.
        -: 1239:
        -: 1240:   LONGOPTS is a vector of `struct option' terminated by an
        -: 1241:   element containing a name which is zero.
        -: 1242:
        -: 1243:   LONGIND returns the index in LONGOPT of the long-named option found.
        -: 1244:   It is only valid when a long-named option has been found by the most
        -: 1245:   recent call.
        -: 1246:
        -: 1247:   If LONG_ONLY is nonzero, '-' as well as '--' can introduce
        -: 1248:   long-named options.  */
        -: 1249:
        -: 1250:int
function _getopt_internal called 716 returned 100% blocks executed 50%
      716: 1251:_getopt_internal (argc, argv, optstring, longopts, longind, long_only)
        -: 1252:     int argc;
        -: 1253:     char *const *argv;
        -: 1254:     const char *optstring;
        -: 1255:     const struct option *longopts;
        -: 1256:     int *longind;
        -: 1257:     int long_only;
        -: 1258:{
        -: 1259:  int option_index;
        -: 1260:
      716: 1261:  optarg = 0;
        -: 1262:
        -: 1263:  /* Initialize the internal data when the first call is made.
        -: 1264:     Start processing options with ARGV-element 1 (since ARGV-element 0
        -: 1265:     is the program name); the sequence of previously skipped
        -: 1266:     non-option ARGV-elements is empty.  */
        -: 1267:
      716: 1268:  if (optind == 0)
branch  0 taken 214 (fallthrough)
branch  1 taken 502
        -: 1269:    {
      214: 1270:      first_nonopt = last_nonopt = optind = 1;
        -: 1271:
      214: 1272:      nextchar = NULL;
        -: 1273:
        -: 1274:      /* Determine how to handle the ordering of options and nonoptions.  */
        -: 1275:
      214: 1276:      if (optstring[0] == '-')
branch  0 taken 0 (fallthrough)
branch  1 taken 214
        -: 1277:	{
    #####: 1278:	  ordering = RETURN_IN_ORDER;
    #####: 1279:	  ++optstring;
        -: 1280:	}
      214: 1281:      else if (optstring[0] == '+')
branch  0 taken 0 (fallthrough)
branch  1 taken 214
        -: 1282:	{
    #####: 1283:	  ordering = REQUIRE_ORDER;
    #####: 1284:	  ++optstring;
        -: 1285:	}
      214: 1286:      else if (getenv ("POSIXLY_CORRECT") != NULL)
call    0 returned 214
branch  1 taken 0 (fallthrough)
branch  2 taken 214
    #####: 1287:	ordering = REQUIRE_ORDER;
        -: 1288:      else
      214: 1289:	ordering = PERMUTE;
        -: 1290:    }
        -: 1291:
      716: 1292:  if (nextchar == NULL || *nextchar == '\0')
branch  0 taken 502 (fallthrough)
branch  1 taken 214
branch  2 taken 197 (fallthrough)
branch  3 taken 305
        -: 1293:    {
      411: 1294:      if (ordering == PERMUTE)
branch  0 taken 411 (fallthrough)
branch  1 taken 0
        -: 1295:	{
        -: 1296:	  /* If we have just processed some options following some non-options,
        -: 1297:	     exchange them so that the options come first.  */
        -: 1298:
      411: 1299:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
branch  0 taken 16 (fallthrough)
branch  1 taken 395
branch  2 taken 16 (fallthrough)
branch  3 taken 0
       16: 1300:	    exchange ((char **) argv);
call    0 returned 16
      395: 1301:	  else if (last_nonopt != optind)
branch  0 taken 181 (fallthrough)
branch  1 taken 214
      181: 1302:	    first_nonopt = optind;
        -: 1303:
        -: 1304:	  /* Now skip any additional non-options
        -: 1305:	     and extend the range of non-options previously skipped.  */
        -: 1306:
      411: 1307:	  while (optind < argc
      223: 1308:		 && (argv[optind][0] != '-' || argv[optind][1] == '\0')
branch  0 taken 203 (fallthrough)
branch  1 taken 20
branch  2 taken 0 (fallthrough)
branch  3 taken 203
        -: 1309:#ifdef GETOPT_COMPAT
      451: 1310:		 && (longopts == NULL
branch  0 taken 223 (fallthrough)
branch  1 taken 208
branch  2 taken 0
branch  3 taken 20 (fallthrough)
      20*: 1311:		     || argv[optind][0] != '+' || argv[optind][1] == '\0')
branch  0 taken 20
branch  1 taken 0 (fallthrough)
branch  2 never executed
branch  3 never executed
        -: 1312:#endif				/* GETOPT_COMPAT */
        -: 1313:		 )
       20: 1314:	    optind++;
      411: 1315:	  last_nonopt = optind;
        -: 1316:	}
        -: 1317:
        -: 1318:      /* Special ARGV-element `--' means premature end of options.
        -: 1319:	 Skip it like a null option,
        -: 1320:	 then exchange with previous non-options as if it were an option,
        -: 1321:	 then skip everything else like a non-option.  */
        -: 1322:
      411: 1323:      if (optind != argc && !strcmp (argv[optind], "--"))
branch  0 taken 203 (fallthrough)
branch  1 taken 208
branch  2 taken 0 (fallthrough)
branch  3 taken 203
        -: 1324:	{
    #####: 1325:	  optind++;
        -: 1326:
    #####: 1327:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1328:	    exchange ((char **) argv);
call    0 never executed
    #####: 1329:	  else if (first_nonopt == last_nonopt)
branch  0 never executed
branch  1 never executed
    #####: 1330:	    first_nonopt = optind;
    #####: 1331:	  last_nonopt = argc;
        -: 1332:
    #####: 1333:	  optind = argc;
        -: 1334:	}
        -: 1335:
        -: 1336:      /* If we have done all the ARGV-elements, stop the scan
        -: 1337:	 and back over any non-options that we skipped and permuted.  */
        -: 1338:
      411: 1339:      if (optind == argc)
branch  0 taken 208 (fallthrough)
branch  1 taken 203
        -: 1340:	{
        -: 1341:	  /* Set the next-arg-index to point at the non-options
        -: 1342:	     that we previously skipped, so the caller will digest them.  */
      208: 1343:	  if (first_nonopt != last_nonopt)
branch  0 taken 20 (fallthrough)
branch  1 taken 188
       20: 1344:	    optind = first_nonopt;
      208: 1345:	  return EOF;
        -: 1346:	}
        -: 1347:
        -: 1348:      /* If we have come to a non-option and did not permute it,
        -: 1349:	 either stop the scan or describe it to the caller and pass it by.  */
        -: 1350:
      203: 1351:      if ((argv[optind][0] != '-' || argv[optind][1] == '\0')
branch  0 taken 203 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 203
        -: 1352:#ifdef GETOPT_COMPAT
    #####: 1353:	  && (longopts == NULL
branch  0 never executed
branch  1 never executed
    #####: 1354:	      || argv[optind][0] != '+' || argv[optind][1] == '\0')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1355:#endif				/* GETOPT_COMPAT */
        -: 1356:	  )
        -: 1357:	{
    #####: 1358:	  if (ordering == REQUIRE_ORDER)
branch  0 never executed
branch  1 never executed
    #####: 1359:	    return EOF;
    #####: 1360:	  optarg = argv[optind++];
    #####: 1361:	  return 1;
        -: 1362:	}
        -: 1363:
        -: 1364:      /* We have found another option-ARGV-element.
        -: 1365:	 Start decoding its characters.  */
        -: 1366:
      406: 1367:      nextchar = (argv[optind] + 1
      203: 1368:		  + (longopts != NULL && argv[optind][1] == '-'));
branch  0 taken 203 (fallthrough)
branch  1 taken 0
branch  2 taken 13 (fallthrough)
branch  3 taken 190
        -: 1369:    }
        -: 1370:
      508: 1371:  if (longopts != NULL
branch  0 taken 508 (fallthrough)
branch  1 taken 0
      508: 1372:      && ((argv[optind][0] == '-'
branch  0 taken 508 (fallthrough)
branch  1 taken 0
      508: 1373:	   && (argv[optind][1] == '-' || long_only))
branch  0 taken 495 (fallthrough)
branch  1 taken 13
branch  2 taken 495 (fallthrough)
branch  3 taken 0
        -: 1374:#ifdef GETOPT_COMPAT
      495: 1375:	  || argv[optind][0] == '+'
branch  0 taken 0 (fallthrough)
branch  1 taken 495
        -: 1376:#endif				/* GETOPT_COMPAT */
        -: 1377:	  ))
        -: 1378:    {
        -: 1379:      const struct option *p;
       13: 1380:      char *s = nextchar;
       13: 1381:      int exact = 0;
       13: 1382:      int ambig = 0;
       13: 1383:      const struct option *pfound = NULL;
       13: 1384:      int indfound = 0;
        -: 1385:
       93: 1386:      while (*s && *s != '=')
branch  0 taken 80 (fallthrough)
branch  1 taken 13
branch  2 taken 80
branch  3 taken 0 (fallthrough)
       80: 1387:	s++;
        -: 1388:
        -: 1389:      /* Test all options for either exact match or abbreviated matches.  */
      128: 1390:      for (p = longopts, option_index = 0; p->name;
branch  0 taken 128
branch  1 taken 0 (fallthrough)
      115: 1391:	   p++, option_index++)
      128: 1392:	if (!strncmp (p->name, nextchar, s - nextchar))
branch  0 taken 13 (fallthrough)
branch  1 taken 115
        -: 1393:	  {
       13: 1394:	    if (s - nextchar == strlen (p->name))
branch  0 taken 13 (fallthrough)
branch  1 taken 0
        -: 1395:	      {
        -: 1396:		/* Exact match found.  */
       13: 1397:		pfound = p;
       13: 1398:		indfound = option_index;
       13: 1399:		exact = 1;
       13: 1400:		break;
        -: 1401:	      }
    #####: 1402:	    else if (pfound == NULL)
branch  0 never executed
branch  1 never executed
        -: 1403:	      {
        -: 1404:		/* First nonexact match found.  */
    #####: 1405:		pfound = p;
    #####: 1406:		indfound = option_index;
        -: 1407:	      }
        -: 1408:	    else
        -: 1409:	      /* Second nonexact match found.  */
    #####: 1410:	      ambig = 1;
        -: 1411:	  }
        -: 1412:
      13*: 1413:      if (ambig && !exact)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
branch  2 never executed
branch  3 never executed
        -: 1414:	{
    #####: 1415:	  if (opterr)
branch  0 never executed
branch  1 never executed
    #####: 1416:	    fprintf (stderr, "%s: option `%s' is ambiguous\n",
    #####: 1417:		     argv[0], argv[optind]);
call    0 never executed
    #####: 1418:	  nextchar += strlen (nextchar);
    #####: 1419:	  optind++;
    #####: 1420:	  return '?';
        -: 1421:	}
        -: 1422:
       13: 1423:      if (pfound != NULL)
branch  0 taken 13 (fallthrough)
branch  1 taken 0
        -: 1424:	{
       13: 1425:	  option_index = indfound;
       13: 1426:	  optind++;
       13: 1427:	  if (*s)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
        -: 1428:	    {
        -: 1429:	      /* Don't test has_arg with >, because some C compilers don't
        -: 1430:		 allow it to be used on enums.  */
    #####: 1431:	      if (pfound->has_arg)
branch  0 never executed
branch  1 never executed
    #####: 1432:		optarg = s + 1;
        -: 1433:	      else
        -: 1434:		{
    #####: 1435:		  if (opterr)
branch  0 never executed
branch  1 never executed
        -: 1436:		    {
    #####: 1437:		      if (argv[optind - 1][1] == '-')
branch  0 never executed
branch  1 never executed
        -: 1438:			/* --option */
    #####: 1439:			fprintf (stderr,
        -: 1440:				 "%s: option `--%s' doesn't allow an argument\n",
    #####: 1441:				 argv[0], pfound->name);
call    0 never executed
        -: 1442:		      else
        -: 1443:			/* +option or -option */
    #####: 1444:			fprintf (stderr,
        -: 1445:			     "%s: option `%c%s' doesn't allow an argument\n",
    #####: 1446:			     argv[0], argv[optind - 1][0], pfound->name);
call    0 never executed
        -: 1447:		    }
    #####: 1448:		  nextchar += strlen (nextchar);
    #####: 1449:		  return '?';
        -: 1450:		}
        -: 1451:	    }
       13: 1452:	  else if (pfound->has_arg == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
        -: 1453:	    {
    #####: 1454:	      if (optind < argc)
branch  0 never executed
branch  1 never executed
    #####: 1455:		optarg = argv[optind++];
        -: 1456:	      else
        -: 1457:		{
    #####: 1458:		  if (opterr)
branch  0 never executed
branch  1 never executed
    #####: 1459:		    fprintf (stderr, "%s: option `%s' requires an argument\n",
    #####: 1460:			     argv[0], argv[optind - 1]);
call    0 never executed
    #####: 1461:		  nextchar += strlen (nextchar);
    #####: 1462:		  return '?';
        -: 1463:		}
        -: 1464:	    }
       13: 1465:	  nextchar += strlen (nextchar);
       13: 1466:	  if (longind != NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
    #####: 1467:	    *longind = option_index;
       13: 1468:	  if (pfound->flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
        -: 1469:	    {
    #####: 1470:	      *(pfound->flag) = pfound->val;
    #####: 1471:	      return 0;
        -: 1472:	    }
       13: 1473:	  return pfound->val;
        -: 1474:	}
        -: 1475:      /* Can't find it as a long option.  If this is not getopt_long_only,
        -: 1476:	 or the option starts with '--' or is not a valid short
        -: 1477:	 option, then it's an error.
        -: 1478:	 Otherwise interpret it as a short option.  */
    #####: 1479:      if (!long_only || argv[optind][1] == '-'
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1480:#ifdef GETOPT_COMPAT
    #####: 1481:	  || argv[optind][0] == '+'
branch  0 never executed
branch  1 never executed
        -: 1482:#endif				/* GETOPT_COMPAT */
    #####: 1483:	  || my_index ((char*)optstring, *nextchar) == NULL)
branch  0 never executed
branch  1 never executed
        -: 1484:	{
    #####: 1485:	  if (opterr)
branch  0 never executed
branch  1 never executed
        -: 1486:	    {
    #####: 1487:	      if (argv[optind][1] == '-')
branch  0 never executed
branch  1 never executed
        -: 1488:		/* --option */
    #####: 1489:		fprintf (stderr, "%s: unrecognized option `--%s'\n",
call    0 never executed
        -: 1490:			 argv[0], nextchar);
        -: 1491:	      else
        -: 1492:		/* +option or -option */
    #####: 1493:		fprintf (stderr, "%s: unrecognized option `%c%s'\n",
    #####: 1494:			 argv[0], argv[optind][0], nextchar);
call    0 never executed
        -: 1495:	    }
    #####: 1496:	  nextchar = (char *) "";
    #####: 1497:	  optind++;
    #####: 1498:	  return '?';
        -: 1499:	}
        -: 1500:    }
        -: 1501:
        -: 1502:  /* Look at and handle the next option-character.  */
        -: 1503:
        -: 1504:  {
      495: 1505:    char c = *nextchar++;
      495: 1506:    char *temp = my_index ((char*)optstring, c);
        -: 1507:
        -: 1508:    /* Increment `optind' when we start to process its last character.  */
      495: 1509:    if (*nextchar == '\0')
branch  0 taken 190 (fallthrough)
branch  1 taken 305
      190: 1510:      ++optind;
        -: 1511:
      495: 1512:    if (temp == NULL || c == ':')
branch  0 taken 495 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 495
        -: 1513:      {
    #####: 1514:	if (opterr)
branch  0 never executed
branch  1 never executed
        -: 1515:	  {
    #####: 1516:	    if (c < 040 || c >= 0177)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1517:	      fprintf (stderr, "%s: unrecognized option, character code 0%o\n",
call    0 never executed
        -: 1518:		       argv[0], c);
        -: 1519:	    else
    #####: 1520:	      fprintf (stderr, "%s: unrecognized option `-%c'\n", argv[0], c);
call    0 never executed
        -: 1521:	  }
    #####: 1522:	return '?';
        -: 1523:      }
      495: 1524:    if (temp[1] == ':')
branch  0 taken 0 (fallthrough)
branch  1 taken 495
        -: 1525:      {
    #####: 1526:	if (temp[2] == ':')
branch  0 never executed
branch  1 never executed
        -: 1527:	  {
        -: 1528:	    /* This is an option that accepts an argument optionally.  */
    #####: 1529:	    if (*nextchar != '\0')
branch  0 never executed
branch  1 never executed
        -: 1530:	      {
    #####: 1531:		optarg = nextchar;
    #####: 1532:		optind++;
        -: 1533:	      }
        -: 1534:	    else
    #####: 1535:	      optarg = 0;
    #####: 1536:	    nextchar = NULL;
        -: 1537:	  }
        -: 1538:	else
        -: 1539:	  {
        -: 1540:	    /* This is an option that requires an argument.  */
    #####: 1541:	    if (*nextchar != '\0')
branch  0 never executed
branch  1 never executed
        -: 1542:	      {
    #####: 1543:		optarg = nextchar;
        -: 1544:		/* If we end this ARGV-element by taking the rest as an arg,
        -: 1545:		   we must advance to the next element now.  */
    #####: 1546:		optind++;
        -: 1547:	      }
    #####: 1548:	    else if (optind == argc)
branch  0 never executed
branch  1 never executed
        -: 1549:	      {
    #####: 1550:		if (opterr)
branch  0 never executed
branch  1 never executed
    #####: 1551:		  fprintf (stderr, "%s: option `-%c' requires an argument\n",
call    0 never executed
        -: 1552:			   argv[0], c);
    #####: 1553:		c = '?';
        -: 1554:	      }
        -: 1555:	    else
        -: 1556:	      /* We already incremented `optind' once;
        -: 1557:		 increment it again when taking next ARGV-elt as argument.  */
    #####: 1558:	      optarg = argv[optind++];
    #####: 1559:	    nextchar = NULL;
        -: 1560:	  }
        -: 1561:      }
      495: 1562:    return c;
        -: 1563:  }
        -: 1564:}
        -: 1565:
        -: 1566:int
        -: 1567:getopt (argc, argv, optstring)
        -: 1568:     int argc;
        -: 1569:     char *const *argv;
        -: 1570:     const char *optstring;
        -: 1571:{
    #####: 1572:  return _getopt_internal (argc, argv, optstring,
call    0 never executed
        -: 1573:			   (const struct option *) 0,
        -: 1574:			   (int *) 0,
        -: 1575:			   0);
        -: 1576:}
        -: 1577:
        -: 1578:int
function getopt_long called 716 returned 100% blocks executed 100%
      716: 1579:getopt_long (argc, argv, options, long_options, opt_index)
        -: 1580:     int argc;
        -: 1581:     char *const *argv;
        -: 1582:     const char *options;
        -: 1583:     const struct option *long_options;
        -: 1584:     int *opt_index;
        -: 1585:{
      716: 1586:  return _getopt_internal (argc, argv, options, long_options, opt_index, 0);
call    0 returned 716
        -: 1587:}
        -: 1588:
        -: 1589:/* Like getopt_long, but '-' as well as '--' can indicate a long option.
        -: 1590:   If an option that starts with '-' (not '--') doesn't match a long option,
        -: 1591:   but does match a short option, it is parsed as a short option
        -: 1592:   instead. */
        -: 1593:
        -: 1594:int 
function getopt_long_only called 0 returned 0% blocks executed 0%
    #####: 1595:getopt_long_only (argc, argv, options, long_options, opt_index)
        -: 1596:     int argc;
        -: 1597:     char *const *argv;
        -: 1598:     const char *options;
        -: 1599:     const struct option *long_options;
        -: 1600:     int *opt_index;
        -: 1601:{
    #####: 1602:  return _getopt_internal (argc, argv, options, long_options, opt_index, 1);
call    0 never executed
        -: 1603:}
        -: 1604:
        -: 1605:
        -: 1606:#ifdef TEST
        -: 1607:
        -: 1608:/* Compile with -DTEST to make an executable for use in testing
        -: 1609:   the above definition of `getopt'.  */
        -: 1610:
        -: 1611:int
        -: 1612:main (argc, argv)
        -: 1613:     int argc;
        -: 1614:     char **argv;
        -: 1615:{
        -: 1616:  int c;
        -: 1617:  int digit_optind = 0;
        -: 1618:
        -: 1619:  while (1)
        -: 1620:    {
        -: 1621:      int this_option_optind = optind ? optind : 1;
        -: 1622:
        -: 1623:      c = getopt (argc, argv, "abc:d:0123456789");
        -: 1624:      if (c == EOF)
        -: 1625:	break;
        -: 1626:
        -: 1627:      switch (c)
        -: 1628:	{
        -: 1629:	case '0':
        -: 1630:	case '1':
        -: 1631:	case '2':
        -: 1632:	case '3':
        -: 1633:	case '4':
        -: 1634:	case '5':
        -: 1635:	case '6':
        -: 1636:	case '7':
        -: 1637:	case '8':
        -: 1638:	case '9':
        -: 1639:	  if (digit_optind != 0 && digit_optind != this_option_optind)
        -: 1640:	    printf ("digits occur in two different argv-elements.\n");
        -: 1641:	  digit_optind = this_option_optind;
        -: 1642:	  printf ("option %c\n", c);
        -: 1643:	  break;
        -: 1644:
        -: 1645:	case 'a':
        -: 1646:	  printf ("option a\n");
        -: 1647:	  break;
        -: 1648:
        -: 1649:	case 'b':
        -: 1650:	  printf ("option b\n");
        -: 1651:	  break;
        -: 1652:
        -: 1653:	case 'c':
        -: 1654:	  printf ("option c with value `%s'\n", optarg);
        -: 1655:	  break;
        -: 1656:
        -: 1657:	case '?':
        -: 1658:	  break;
        -: 1659:
        -: 1660:	default:
        -: 1661:	  printf ("?? getopt returned character code 0%o ??\n", c);
        -: 1662:	}
        -: 1663:    }
        -: 1664:
        -: 1665:  if (optind < argc)
        -: 1666:    {
        -: 1667:      printf ("non-option ARGV-elements: ");
        -: 1668:      while (optind < argc)
        -: 1669:	printf ("%s ", argv[optind++]);
        -: 1670:      printf ("\n");
        -: 1671:    }
        -: 1672:
        -: 1673:  exit (0);
        -: 1674:}
        -: 1675:
        -: 1676:#endif /* TEST */
        -: 1677:/* gzip (GNU zip) -- compress files with zip algorithm and 'compress' interface
        -: 1678: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 1679: * The unzip code was written and put in the public domain by Mark Adler.
        -: 1680: * Portions of the lzw code are derived from the public domain 'compress'
        -: 1681: * written by Spencer Thomas, Joe Orost, James Woods, Jim McKie, Steve Davies,
        -: 1682: * Ken Turkowski, Dave Mack and Peter Jannesen.
        -: 1683: *
        -: 1684: * See the license_msg below and the file COPYING for the software license.
        -: 1685: * See the file algorithm.doc for the compression algorithms and file formats.
        -: 1686: */
        -: 1687:
        -: 1688:static char  *license_msg[] = {
        -: 1689:"   Copyright (C) 1992-1993 Jean-loup Gailly",
        -: 1690:"   This program is free software; you can redistribute it and/or modify",
        -: 1691:"   it under the terms of the GNU General Public License as published by",
        -: 1692:"   the Free Software Foundation; either version 2, or (at your option)",
        -: 1693:"   any later version.",
        -: 1694:"",
        -: 1695:"   This program is distributed in the hope that it will be useful,",
        -: 1696:"   but WITHOUT ANY WARRANTY; without even the implied warranty of",
        -: 1697:"   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        -: 1698:"   GNU General Public License for more details.",
        -: 1699:"",
        -: 1700:"   You should have received a copy of the GNU General Public License",
        -: 1701:"   along with this program; if not, write to the Free Software",
        -: 1702:"   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",
        -: 1703:0};
        -: 1704:
        -: 1705:/* Compress files with zip algorithm and 'compress' interface.
        -: 1706: * See usage() and help() functions below for all options.
        -: 1707: * Outputs:
        -: 1708: *        file.gz:   compressed file with same mode, owner, and utimes
        -: 1709: *     or stdout with -c option or if stdin used as input.
        -: 1710: * If the OS does not support file names with multiple dots (MSDOS, VMS) or
        -: 1711: * if the output file name had to be truncated, the original name is kept
        -: 1712: * in the compressed file.
        -: 1713: * On MSDOS, file.tmp -> file.tmz. On VMS, file.tmp -> file.tmp-gz.
        -: 1714: *
        -: 1715: * For the meaning of all compilation flags, see comments in Makefile.in.
        -: 1716: */
        -: 1717:
        -: 1718:/*
        -: 1719:#ifndef lint
        -: 1720:static char rcsid[] = "$Id: gzip.c,v 0.19 1993/06/01 14:21:46 jloup Exp $";
        -: 1721:#endif
        -: 1722:*/
        -: 1723:
        -: 1724:		/* configuration */
        -: 1725:
        -: 1726:#ifndef NO_FCNTL_H
        -: 1727:#  include <fcntl.h>
        -: 1728:#endif
        -: 1729:
        -: 1730:#ifdef HAVE_UNISTD_H
        -: 1731:#  include <unistd.h>
        -: 1732:#endif
        -: 1733:
        -: 1734:#if defined(STDC_HEADERS) || !defined(NO_STDLIB_H)
        -: 1735:#  include <stdlib.h>
        -: 1736:#else
        -: 1737:   extern int errno;
        -: 1738:#endif
        -: 1739:
        -: 1740:#if defined(DIRENT)
        -: 1741:#  include <dirent.h>
        -: 1742:   typedef struct dirent dir_type;
        -: 1743:#  define NLENGTH(dirent) ((int)strlen((dirent)->d_name))
        -: 1744:#  define DIR_OPT "DIRENT"
        -: 1745:#else
        -: 1746:#  define NLENGTH(dirent) ((dirent)->d_namlen)
        -: 1747:#  ifdef SYSDIR
        -: 1748:#    include <sys/dir.h>
        -: 1749:     typedef struct direct dir_type;
        -: 1750:#    define DIR_OPT "SYSDIR"
        -: 1751:#  else
        -: 1752:#    ifdef SYSNDIR
        -: 1753:#      include <sys/ndir.h>
        -: 1754:       typedef struct direct dir_type;
        -: 1755:#      define DIR_OPT "SYSNDIR"
        -: 1756:#    else
        -: 1757:#      ifdef NDIR
        -: 1758:#        include <ndir.h>
        -: 1759:         typedef struct direct dir_type;
        -: 1760:#        define DIR_OPT "NDIR"
        -: 1761:#      else
        -: 1762:#        define NO_DIR
        -: 1763:#        define DIR_OPT "NO_DIR"
        -: 1764:#      endif
        -: 1765:#    endif
        -: 1766:#  endif
        -: 1767:#endif
        -: 1768:
        -: 1769:#ifndef NO_UTIME
        -: 1770:#  ifndef NO_UTIME_H
        -: 1771:#    include <utime.h>
        -: 1772:#    define TIME_OPT "UTIME"
        -: 1773:#  else
        -: 1774:#    ifdef HAVE_SYS_UTIME_H
        -: 1775:#      include <sys/utime.h>
        -: 1776:#      define TIME_OPT "SYS_UTIME"
        -: 1777:#    else
        -: 1778:       struct utimbuf {
        -: 1779:         time_t actime;
        -: 1780:         time_t modtime;
        -: 1781:       };
        -: 1782:#      define TIME_OPT ""
        -: 1783:#    endif
        -: 1784:#  endif
        -: 1785:#else
        -: 1786:#  define TIME_OPT "NO_UTIME"
        -: 1787:#endif
        -: 1788:
        -: 1789:#if !defined(S_ISDIR) && defined(S_IFDIR)
        -: 1790:#  define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
        -: 1791:#endif
        -: 1792:#if !defined(S_ISREG) && defined(S_IFREG)
        -: 1793:#  define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
        -: 1794:#endif
        -: 1795:
        -: 1796:typedef RETSIGTYPE (*sig_type) OF((int));
        -: 1797:
        -: 1798:#ifndef	O_BINARY
        -: 1799:#  define  O_BINARY  0  /* creation mode for open() */
        -: 1800:#endif
        -: 1801:
        -: 1802:#ifndef O_CREAT
        -: 1803:   /* Pure BSD system? */
        -: 1804:#  include <sys/file.h>
        -: 1805:#  ifndef O_CREAT
        -: 1806:#    define O_CREAT FCREAT
        -: 1807:#  endif
        -: 1808:#  ifndef O_EXCL
        -: 1809:#    define O_EXCL FEXCL
        -: 1810:#  endif
        -: 1811:#endif
        -: 1812:
        -: 1813:#ifndef S_IRUSR
        -: 1814:#  define S_IRUSR 0400
        -: 1815:#endif
        -: 1816:#ifndef S_IWUSR
        -: 1817:#  define S_IWUSR 0200
        -: 1818:#endif
        -: 1819:#define RW_USER (S_IRUSR | S_IWUSR)  /* creation mode for open() */
        -: 1820:
        -: 1821:#ifndef MAX_PATH_LEN
        -: 1822:#  define MAX_PATH_LEN   1024 /* max pathname length */
        -: 1823:#endif
        -: 1824:
        -: 1825:#define MAX_HEADER_LEN   16
        -: 1826:/* max length of a compressed file header, fixed part only */
        -: 1827:
        -: 1828:		/* global buffers */
        -: 1829:
        -: 1830:DECLARE(uch, inbuf,  INBUFSIZ +INBUF_EXTRA);
        -: 1831:DECLARE(uch, outbuf, OUTBUFSIZ+OUTBUF_EXTRA);
        -: 1832:DECLARE(ush, d_buf,  DIST_BUFSIZE);
        -: 1833:DECLARE(uch, window, 2L*WSIZE);
        -: 1834:#ifndef MAXSEG_64K
        -: 1835:    DECLARE(ush, tab_prefix, 1L<<BITS);
        -: 1836:#else
        -: 1837:    DECLARE(ush, tab_prefix0, 1L<<(BITS-1));
        -: 1838:    DECLARE(ush, tab_prefix1, 1L<<(BITS-1));
        -: 1839:#endif
        -: 1840:
        -: 1841:		/* local variables */
        -: 1842:
        -: 1843:int ascii = 0;        /* convert end-of-lines to local OS conventions */
        -: 1844:int to_stdout = 0;    /* output to stdout (-c) */
        -: 1845:int decompress = 0;   /* decompress (-d) */
        -: 1846:int force = 0;        /* don't ask questions, compress links (-f) */
        -: 1847:int recursive = 0;    /* recurse through directories (-r) */
        -: 1848:int verbose = 0;      /* be verbose (-v) */
        -: 1849:int quiet = 0;        /* be very quiet (-q) */
        -: 1850:int do_lzw = 0;       /* generate output compatible with old compress (-Z) */
        -: 1851:int test = 0;         /* test .gz file integrity */
        -: 1852:int foreground;       /* set if program run in foreground */
        -: 1853:char *progname;       /* program name */
        -: 1854:int maxbits = BITS;   /* max bits per code for LZW */
        -: 1855:int method = DEFLATED;/* compression method */
        -: 1856:int level = 5;        /* compression level */
        -: 1857:int exit_code = OK;   /* program exit code */
        -: 1858:int save_orig_name;   /* set if original name must be saved */
        -: 1859:int last_member;      /* set for .zip and .Z files */
        -: 1860:int part_nb;          /* number of parts in .gz file */
        -: 1861:ulg time_stamp;       /* original time stamp (modification time) */
        -: 1862:long ifile_size;      /* input file size, -1 for devices (debug only) */
        -: 1863:char *env;            /* contents of GZIP env variable */
        -: 1864:char **args = NULL;   /* argv pointer if GZIP env variable defined */
        -: 1865:char z_suffix[MAX_SUFFIX+1]; /* default suffix (can be set with --suffix) */
        -: 1866:int  z_len;           /* strlen(z_suffix) */
        -: 1867:
        -: 1868:long bytes_in;             /* number of input bytes */
        -: 1869:long bytes_out;            /* number of output bytes */
        -: 1870:char ifname[MAX_PATH_LEN]; /* input file name */
        -: 1871:char ofname[MAX_PATH_LEN]; /* output file name */
        -: 1872:int  remove_ofname = 0;	   /* remove output file on error */
        -: 1873:struct stat istat;         /* status for input file */
        -: 1874:int  ifd;                  /* input file descriptor */
        -: 1875:int  ofd;                  /* output file descriptor */
        -: 1876:unsigned insize;           /* valid bytes in inbuf */
        -: 1877:unsigned inptr;            /* index of next byte to be processed in inbuf */
        -: 1878:unsigned outcnt;           /* bytes in output buffer */
        -: 1879:
        -: 1880:struct option longopts[] =
        -: 1881:{
        -: 1882: /* { name  has_arg  *flag  val } */
        -: 1883:    {"ascii",      0, 0, 'a'}, /* ascii text mode */
        -: 1884:    {"to-stdout",  0, 0, 'c'}, /* write output on standard output */
        -: 1885:    {"stdout",     0, 0, 'c'}, /* write output on standard output */
        -: 1886:    {"decompress", 0, 0, 'd'}, /* decompress */
        -: 1887:    {"uncompress", 0, 0, 'd'}, /* decompress */
        -: 1888: /* {"encrypt",    0, 0, 'e'},    encrypt */
        -: 1889:    {"force",      0, 0, 'f'}, /* force overwrite of output file */
        -: 1890:    {"help",       0, 0, 'h'}, /* give help */
        -: 1891: /* {"pkzip",      0, 0, 'k'},    force output in pkzip format */
        -: 1892: /* {"list",       0, 0, 'l'},    list .gz file contents */
        -: 1893:    {"license",    0, 0, 'L'}, /* display software license */
        -: 1894:    {"quiet",      0, 0, 'q'}, /* quiet mode */
        -: 1895:    {"silent",     0, 0, 'q'}, /* quiet mode */
        -: 1896:    {"recurse",    0, 0, 'r'}, /* recurse through directories */
        -: 1897:    {"suffix",     1, 0, 'S'}, /* use given suffix instead of .gz */
        -: 1898:    {"test",       0, 0, 't'}, /* test compressed file integrity */
        -: 1899:    {"verbose",    0, 0, 'v'}, /* verbose mode */
        -: 1900:    {"version",    0, 0, 'V'}, /* display version number */
        -: 1901:    {"fast",       0, 0, '1'}, /* compress faster */
        -: 1902:    {"best",       0, 0, '9'}, /* compress better */
        -: 1903:    {"lzw",        0, 0, 'Z'}, /* make output compatible with old compress */
        -: 1904:    {"bits",       1, 0, 'b'}, /* max number of bits per code (implies -Z) */
        -: 1905:    { 0, 0, 0, 0 }
        -: 1906:};
        -: 1907:
        -: 1908:/* local functions */
        -: 1909:
        -: 1910:local void usage        OF((void));
        -: 1911:local void help         OF((void));
        -: 1912:local void license      OF((void));
        -: 1913:local void version      OF((void));
        -: 1914:local void treat_stdin  OF((void));
        -: 1915:local void treat_file   OF((char *iname));
        -: 1916:local int create_outfile OF((void));
        -: 1917:local int  do_stat      OF((char *name, struct stat *sbuf));
        -: 1918:local char *get_suffix  OF((char *name));
        -: 1919:local int  get_istat    OF((char *iname, struct stat *sbuf));
        -: 1920:local int  make_ofname  OF((void));
        -: 1921:local int  same_file    OF((struct stat *stat1, struct stat *stat2));
        -: 1922:local int name_too_long OF((char *name, struct stat *statb));
        -: 1923:local int  get_method   OF((int in));
        -: 1924:local int  check_ofname OF((void));
        -: 1925:local void reset_times  OF((char *name, struct stat *statb));
        -: 1926:local void copy_stat    OF((struct stat *ifstat));
        -: 1927:local void treat_dir    OF((char *dir));
        -: 1928:local void do_exit      OF((int exitcode));
        -: 1929:      int main          OF((int argc, char **argv));
        -: 1930:
        -: 1931:int (*work) OF((int infile, int outfile)) = zip; /* function to call */
        -: 1932:
        -: 1933:#define strequ(s1, s2) (strcmp((s1),(s2)) == 0)
        -: 1934:
        -: 1935:/* ======================================================================== */
function usage called 2 returned 100% blocks executed 100%
        2: 1936:local void usage()
        -: 1937:{
        2: 1938:    fprintf(stderr, "usage: %s [-%scdfhL%stvV19] [-S suffix] [file ...]\n",
call    0 returned 2
        -: 1939:	    progname,
        -: 1940:#if O_BINARY
        -: 1941:	    "a",
        -: 1942:#else
        -: 1943:	    "",
        -: 1944:#endif
        -: 1945:#ifdef NO_DIR
        -: 1946:	    ""
        -: 1947:#else
        -: 1948:	    "r"
        -: 1949:#endif
        -: 1950:	    );
        2: 1951:}
        -: 1952:
        -: 1953:/* ======================================================================== */
function help called 2 returned 100% blocks executed 100%
        2: 1954:local void help()
        -: 1955:{
        -: 1956:    static char  *help_msg[] = {
        -: 1957:#if O_BINARY
        -: 1958: " -a --ascii       ascii text; convert end-of-lines using local conventions",
        -: 1959:#endif
        -: 1960: " -c --stdout      write on standard output, keep original files unchanged",
        -: 1961: " -d --decompress  decompress",
        -: 1962:/* -e --encrypt     encrypt */
        -: 1963: " -f --force       force overwrite of output file and compress links",
        -: 1964: " -h --help        give this help",
        -: 1965:/* -k --pkzip       force output in pkzip format */
        -: 1966:/* -l --list        list .gz file contents */
        -: 1967: " -L --license     display software license",
        -: 1968: " -q --quiet       suppress all warnings",
        -: 1969:#ifndef NO_DIR
        -: 1970: " -r --recurse     recurse through directories",
        -: 1971:#endif
        -: 1972:#ifdef MAX_EXT_CHARS
        -: 1973: " -S .suf  --suffix .suf     use suffix .suf instead of .z",
        -: 1974:#else
        -: 1975: " -S .suf  --suffix .suf     use suffix .suf instead of .gz",
        -: 1976:#endif
        -: 1977: " -t --test        test compressed file integrity",
        -: 1978: " -v --verbose     verbose mode",
        -: 1979: " -V --version     display version number",
        -: 1980: " -1 --fast        compress faster",
        -: 1981: " -9 --best        compress better",
        -: 1982:#ifdef LZW
        -: 1983: " -Z --lzw         produce output compatible with old compress",
        -: 1984: " -b --bits maxbits   max number of bits per code (implies -Z)",
        -: 1985:#endif
        -: 1986: " file...          files to (de)compress. If none given, use standard input.",
        -: 1987:  0};
        2: 1988:    char **p = help_msg;
        -: 1989:
        2: 1990:    fprintf(stderr,"%s %s (%s)\n", progname, VERSION, REVDATE);
call    0 returned 2
        2: 1991:    usage();
call    0 returned 2
       30: 1992:    while (*p) fprintf(stderr, "%s\n", *p++);
call    0 returned 28
branch  1 taken 28
branch  2 taken 2 (fallthrough)
        2: 1993:}
        -: 1994:
        -: 1995:/* ======================================================================== */
function license called 2 returned 100% blocks executed 100%
        2: 1996:local void license()
        -: 1997:{
        2: 1998:    char **p = license_msg;
        -: 1999:
        2: 2000:    fprintf(stderr,"%s %s (%s)\n", progname, VERSION, REVDATE);
call    0 returned 2
       30: 2001:    while (*p) fprintf(stderr, "%s\n", *p++);
call    0 returned 28
branch  1 taken 28
branch  2 taken 2 (fallthrough)
        2: 2002:}
        -: 2003:
        -: 2004:/* ======================================================================== */
function version called 2 returned 100% blocks executed 100%
        2: 2005:local void version()
        -: 2006:{
        2: 2007:    fprintf(stderr,"%s %s (%s)\n", progname, VERSION, REVDATE);
call    0 returned 2
        -: 2008:
        2: 2009:    fprintf(stderr, "Compilation options:\n%s %s ", DIR_OPT, TIME_OPT);
call    0 returned 2
        -: 2010:#ifdef STDC_HEADERS
        2: 2011:    fprintf(stderr, "STDC_HEADERS ");
call    0 returned 2
        -: 2012:#endif
        -: 2013:#ifdef HAVE_UNISTD_H
        2: 2014:    fprintf(stderr, "HAVE_UNISTD_H ");
call    0 returned 2
        -: 2015:#endif
        -: 2016:#ifdef NO_MEMORY_H
        -: 2017:    fprintf(stderr, "NO_MEMORY_H ");
        -: 2018:#endif
        -: 2019:#ifdef NO_STRING_H
        -: 2020:    fprintf(stderr, "NO_STRING_H ");
        -: 2021:#endif
        -: 2022:#ifdef NO_SYMLINK
        -: 2023:    fprintf(stderr, "NO_SYMLINK ");
        -: 2024:#endif
        -: 2025:#ifdef NO_MULTIPLE_DOTS
        -: 2026:    fprintf(stderr, "NO_MULTIPLE_DOTS ");
        -: 2027:#endif
        -: 2028:#ifdef NO_CHOWN
        -: 2029:    fprintf(stderr, "NO_CHOWN ");
        -: 2030:#endif
        -: 2031:#ifdef PROTO
        -: 2032:    fprintf(stderr, "PROTO ");
        -: 2033:#endif
        -: 2034:#ifdef ASMV
        -: 2035:    fprintf(stderr, "ASMV ");
        -: 2036:#endif
        -: 2037:#ifdef DEBUG
        -: 2038:    fprintf(stderr, "DEBUG ");
        -: 2039:#endif
        -: 2040:#ifdef DYN_ALLOC
        -: 2041:    fprintf(stderr, "DYN_ALLOC ");
        -: 2042:#endif
        -: 2043:#ifdef MAXSEG_64K
        -: 2044:    fprintf(stderr, "MAXSEG_64K");
        -: 2045:#endif
        2: 2046:    fprintf(stderr, "\n");
call    0 returned 2
        2: 2047:}
        -: 2048:
        -: 2049:/* ======================================================================== */
function main called 214 returned 0% blocks executed 68%
      214: 2050:int main (argc, argv)
        -: 2051:    int argc;
        -: 2052:    char **argv;
        -: 2053:{
      214: 2054:    int file_count = 0; /* number of files to precess */
        -: 2055:    int proglen;        /* length of progname */
        -: 2056:    int optc;           /* current option */
        -: 2057:
        -: 2058:    EXPAND(argc, argv); /* wild card expansion if necessary */
        -: 2059:
      214: 2060:    progname = basename(argv[0]);
call    0 returned 214
      214: 2061:    proglen = strlen(progname);
        -: 2062:
        -: 2063:    /* Suppress .exe for MSDOS, OS/2 and VMS: */
      214: 2064:    if (proglen > 4 && strequ(progname+proglen-4, ".exe")) {
branch  0 taken 214 (fallthrough)
branch  1 taken 0
branch  2 taken 214 (fallthrough)
branch  3 taken 0
      214: 2065:        progname[proglen-4] = '\0';
        -: 2066:    }
        -: 2067:
        -: 2068:    /* Add options in GZIP environment variable if there is one */
      214: 2069:    env = add_envopt(&argc, &argv, OPTIONS_VAR);
call    0 returned 214
     214*: 2070:    if (env != NULL) args = argv;
branch  0 taken 0 (fallthrough)
branch  1 taken 214
        -: 2071:
      214: 2072:    foreground = signal(SIGINT, SIG_IGN) != SIG_IGN;
call    0 returned 214
      214: 2073:    if (foreground) {
branch  0 taken 213 (fallthrough)
branch  1 taken 1
      213: 2074:	signal (SIGINT, (sig_type)abort_gzip);
call    0 returned 213
        -: 2075:    }
        -: 2076:#ifdef SIGTERM
      214: 2077:    signal(SIGTERM, (sig_type)abort_gzip);
call    0 returned 214
        -: 2078:#endif
        -: 2079:#ifdef SIGHUP
      214: 2080:    signal(SIGHUP,  (sig_type)abort_gzip);
call    0 returned 214
        -: 2081:#endif
        -: 2082:
        -: 2083:#ifndef GNU_STANDARD
        -: 2084:    /* For compatibility with old compress, use program name as an option.
        -: 2085:     * If you compile with -DGNU_STANDARD, this program will behave as
        -: 2086:     * gzip even if it is invoked under the name gunzip or zcat.
        -: 2087:     *
        -: 2088:     * Systems which do not support links can still use -d or -dc.
        -: 2089:     * Ignore an .exe extension for MSDOS, OS/2 and VMS.
        -: 2090:     */
      214: 2091:    if (  strncmp(progname, "un",  2) == 0     /* ungzip, uncompress */
branch  0 taken 214 (fallthrough)
branch  1 taken 0
      214: 2092:       || strncmp(progname, "gun", 3) == 0) {  /* gunzip */
branch  0 taken 0 (fallthrough)
branch  1 taken 214
    #####: 2093:	decompress = 1;
      214: 2094:    } else if (strequ(progname+1, "cat")       /* zcat, pcat, gcat */
branch  0 taken 214 (fallthrough)
branch  1 taken 0
      214: 2095:	    || strequ(progname, "gzcat")) {    /* gzcat */
branch  0 taken 0 (fallthrough)
branch  1 taken 214
    #####: 2096:	decompress = to_stdout = 1;
        -: 2097:    }
        -: 2098:#endif
        -: 2099:
      214: 2100:    strncpy(z_suffix, Z_SUFFIX, sizeof(z_suffix)-1);
      214: 2101:    z_len = strlen(z_suffix);
        -: 2102:
      716: 2103:    while ((optc = getopt_long (argc, argv, "ab:cdfhLqrS:tvVZ123456789",
call    0 returned 716
      716: 2104:				longopts, (int *)0)) != EOF) {
branch  0 taken 508
branch  1 taken 208 (fallthrough)
      508: 2105:	switch (optc) {
branch  0 taken 0
branch  1 taken 0
branch  2 taken 2
branch  3 taken 13
branch  4 taken 82
branch  5 taken 2
branch  6 taken 2
branch  7 taken 82
branch  8 taken 83
branch  9 taken 0
branch 10 taken 3
branch 11 taken 82
branch 12 taken 2
branch 13 taken 0
branch 14 taken 155
branch 15 taken 0
    #####: 2106:        case 'a':
    #####: 2107:            ascii = 1; break;
    #####: 2108:	case 'b':
    #####: 2109:	    maxbits = atoi(optarg);
    #####: 2110:	    break;
        2: 2111:	case 'c':
        2: 2112:	    to_stdout = 1; break;
       13: 2113:	case 'd':
       13: 2114:	    decompress = 1; break;
       82: 2115:	case 'f':
       82: 2116:	    force++; break;
        2: 2117:	case 'h': case 'H': case '?':
        2: 2118:	    help(); do_exit(OK); break;
call    0 returned 2
call    1 returned 0
        2: 2119:	case 'L':
        2: 2120:	    license(); do_exit(OK); break;
call    0 returned 2
call    1 returned 0
       82: 2121:	case 'q':
       82: 2122:	    quiet = 1; verbose = 0; break;
       83: 2123:	case 'r':
        -: 2124:#ifdef NO_DIR
        -: 2125:	    fprintf(stderr, "%s: -r not supported on this system\n", progname);
        -: 2126:	    usage();
        -: 2127:	    do_exit(ERROR); break;
        -: 2128:#else
       83: 2129:	    recursive = 1; break;
        -: 2130:#endif
    #####: 2131:	case 'S':
        -: 2132:#ifdef NO_MULTIPLE_DOTS
        -: 2133:            if (*optarg == '.') optarg++;
        -: 2134:#endif
    #####: 2135:            z_len = strlen(optarg);
    #####: 2136:            if (z_len == 0 || z_len > MAX_SUFFIX) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2137:                fprintf(stderr, "%s: incorrect suffix '%s'\n",
call    0 never executed
        -: 2138:                        progname, optarg);
    #####: 2139:                do_exit(ERROR);
call    0 never executed
        -: 2140:            }
    #####: 2141:            strcpy(z_suffix, optarg);
    #####: 2142:            break;
        3: 2143:	case 't':
        3: 2144:	    test = decompress = to_stdout = 1;
        3: 2145:	    break;
       82: 2146:	case 'v':
       82: 2147:	    verbose++; quiet = 0; break;
        2: 2148:	case 'V':
        2: 2149:	    version(); do_exit(OK); break;
call    0 returned 2
call    1 returned 0
    #####: 2150:	case 'Z':
        -: 2151:#ifdef LZW
        -: 2152:	    do_lzw = 1; break;
        -: 2153:#else
    #####: 2154:	    fprintf(stderr, "%s: -Z not supported in this version\n",
call    0 never executed
        -: 2155:		    progname);
    #####: 2156:	    usage();
call    0 never executed
    #####: 2157:	    do_exit(ERROR); break;
call    0 never executed
        -: 2158:#endif
      155: 2159:	case '1':  case '2':  case '3':  case '4':
        -: 2160:	case '5':  case '6':  case '7':  case '8':  case '9':
      155: 2161:	    level = optc - '0';
      155: 2162:	    break;
    #####: 2163:	default:
        -: 2164:	    /* Error message already emitted by getopt_long. */
    #####: 2165:	    usage();
call    0 never executed
    #####: 2166:	    do_exit(ERROR);
call    0 never executed
        -: 2167:	}
        -: 2168:    } /* loop on all arguments */
        -: 2169:
      208: 2170:    file_count = argc - optind;
        -: 2171:
        -: 2172:#if O_BINARY
        -: 2173:#else
     208*: 2174:    if (ascii && !quiet) {
branch  0 taken 0 (fallthrough)
branch  1 taken 208
branch  2 never executed
branch  3 never executed
    #####: 2175:	fprintf(stderr, "%s: option --ascii ignored on this system\n",
call    0 never executed
        -: 2176:		progname);
        -: 2177:    }
        -: 2178:#endif
     208*: 2179:    if (do_lzw && !decompress) work = lzw;
branch  0 taken 0 (fallthrough)
branch  1 taken 208
branch  2 never executed
branch  3 never executed
        -: 2180:
        -: 2181:    /* Allocate all global buffers (for DYN_ALLOC option) */
        -: 2182:    ALLOC(uch, inbuf,  INBUFSIZ +INBUF_EXTRA);
        -: 2183:    ALLOC(uch, outbuf, OUTBUFSIZ+OUTBUF_EXTRA);
        -: 2184:    ALLOC(ush, d_buf,  DIST_BUFSIZE);
        -: 2185:    ALLOC(uch, window, 2L*WSIZE);
        -: 2186:#ifndef MAXSEG_64K
        -: 2187:    ALLOC(ush, tab_prefix, 1L<<BITS);
        -: 2188:#else
        -: 2189:    ALLOC(ush, tab_prefix0, 1L<<(BITS-1));
        -: 2190:    ALLOC(ush, tab_prefix1, 1L<<(BITS-1));
        -: 2191:#endif
        -: 2192:
        -: 2193:    /* And get to work */
      208: 2194:    if (file_count != 0) {
branch  0 taken 20 (fallthrough)
branch  1 taken 188
      20*: 2195:	if (to_stdout && !test && (!decompress || !ascii)) {
branch  0 taken 2 (fallthrough)
branch  1 taken 18
branch  2 taken 1 (fallthrough)
branch  3 taken 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        -: 2196:	    SET_BINARY_MODE(fileno(stdout));
        -: 2197:	}
       40: 2198:        while (optind < argc) {
branch  0 taken 20
branch  1 taken 20
       20: 2199:	    treat_file(argv[optind++]);
call    0 returned 20
        -: 2200:	}
        -: 2201:    } else {  /* Standard input */
      188: 2202:	treat_stdin();
call    0 returned 187
        -: 2203:    }
      207: 2204:    do_exit(exit_code);
call    0 returned 0
    #####: 2205:    return exit_code; /* just to avoid lint warning */
        -: 2206:}
        -: 2207:
        -: 2208:/* ========================================================================
        -: 2209: * Compress or decompress stdin
        -: 2210: */
function treat_stdin called 188 returned 99% blocks executed 71%
      188: 2211:local void treat_stdin()
        -: 2212:{
      188: 2213:    if (!force && isatty(fileno((FILE *)(decompress ? stdin : stdout)))) {
branch  0 taken 107 (fallthrough)
branch  1 taken 81
branch  2 taken 14 (fallthrough)
branch  3 taken 93
call    4 returned 107
call    5 returned 107
branch  6 taken 0 (fallthrough)
branch  7 taken 107
        -: 2214:	/* Do not send compressed data to the terminal or read it from
        -: 2215:	 * the terminal. We get here when user invoked the program
        -: 2216:	 * without parameters, so be helpful. According to the GNU standards:
        -: 2217:	 *
        -: 2218:	 *   If there is one behavior you think is most useful when the output
        -: 2219:	 *   is to a terminal, and another that you think is most useful when
        -: 2220:	 *   the output is a file or a pipe, then it is usually best to make
        -: 2221:	 *   the default behavior the one that is useful with output to a
        -: 2222:	 *   terminal, and have an option for the other behavior.
        -: 2223:	 *
        -: 2224:	 * Here we use the --force option to get the other behavior.
        -: 2225:	 */
    #####: 2226:	fprintf(stderr,
call    0 never executed
        -: 2227:    "%s: compressed data not %s a terminal. Use -f to force %scompression.\n",
    #####: 2228:		progname, decompress ? "read from" : "written to",
branch  0 never executed
branch  1 never executed
    #####: 2229:		decompress ? "de" : "");
branch  0 never executed
branch  1 never executed
    #####: 2230:	fprintf(stderr,"For help, type: %s -h\n", progname);
call    0 never executed
    #####: 2231:	do_exit(ERROR);
call    0 never executed
        -: 2232:    }
        -: 2233:
      188: 2234:    if (decompress || !ascii) {
branch  0 taken 174 (fallthrough)
branch  1 taken 14
        -: 2235:	SET_BINARY_MODE(fileno(stdin));
        -: 2236:    }
      188: 2237:    if (!test && (!decompress || !ascii)) {
branch  0 taken 186 (fallthrough)
branch  1 taken 2
branch  2 taken 12 (fallthrough)
branch  3 taken 174
        -: 2238:	SET_BINARY_MODE(fileno(stdout));
        -: 2239:    }
      188: 2240:    strcpy(ifname, "stdin");
      188: 2241:    strcpy(ofname, "stdout");
        -: 2242:
        -: 2243:    /* Get the time stamp on the input file. */
        -: 2244:#ifdef NO_STDIN_FSTAT
        -: 2245:    time_stamp = 0; /* time unknown */
        -: 2246:#else
      188: 2247:    if (fstat(fileno(stdin), &istat) != 0) {
call    0 returned 188
call    1 returned 188
branch  2 taken 0 (fallthrough)
branch  3 taken 188
    #####: 2248:	error("fstat(stdin)");
call    0 never executed
        -: 2249:    }
        -: 2250:    /* If you do not wish to save the time stamp when input comes from a pipe,
        -: 2251:     * compile with -DNO_PIPE_TIMESTAMP.
        -: 2252:     */
        -: 2253:#ifdef NO_PIPE_TIMESTAMP
        -: 2254:    if (!S_ISREG(istat.st_mode))
        -: 2255:	time_stamp = 0;
        -: 2256:    else
        -: 2257:#endif
        -: 2258:	/* time_stamp = istat.st_mtime; */
      188: 2259:	time_stamp = 0; 
        -: 2260:#endif
      188: 2261:    ifile_size = -1L; /* convention for unknown size */
        -: 2262:
      188: 2263:    clear_bufs(); /* clear input and output buffers */
call    0 returned 188
      188: 2264:    to_stdout = 1;
      188: 2265:    part_nb = 0;
        -: 2266:
      188: 2267:    if (decompress) {
branch  0 taken 14 (fallthrough)
branch  1 taken 174
       14: 2268:	method = get_method(ifd);
call    0 returned 13
       13: 2269:	if (method < 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 13
    #####: 2270:	    do_exit(exit_code); /* error message already emitted */
call    0 never executed
        -: 2271:	}
        -: 2272:    }
        -: 2273:
        -: 2274:    /* Actually do the compression/decompression. Loop over zipped members.
        -: 2275:     */
        -: 2276:    for (;;) {
     187*: 2277:	if ((*work)(fileno(stdin), fileno(stdout)) != OK) return;
call    0 returned 187
call    1 returned 187
call    2 returned 187
branch  3 taken 0 (fallthrough)
branch  4 taken 187
        -: 2278:
      187: 2279:	if (!decompress || last_member || inptr == insize) break;
branch  0 taken 13 (fallthrough)
branch  1 taken 174
branch  2 taken 10 (fallthrough)
branch  3 taken 3
branch  4 taken 1 (fallthrough)
branch  5 taken 9
        -: 2280:	/* end of file */
        -: 2281:
        1: 2282:	method = get_method(ifd);
call    0 returned 1
        1: 2283:	if (method < 0) return; /* error message already emitted */
branch  0 taken 1 (fallthrough)
branch  1 taken 0
    #####: 2284:	bytes_out = 0;            /* required for length check */
        -: 2285:    }
        -: 2286:
      186: 2287:    if (verbose) {
branch  0 taken 81 (fallthrough)
branch  1 taken 105
       81: 2288:	if (test) {
branch  0 taken 0 (fallthrough)
branch  1 taken 81
    #####: 2289:	    fprintf(stderr, " OK");
call    0 never executed
        -: 2290:
       81: 2291:	} else if (!decompress) {
branch  0 taken 81 (fallthrough)
branch  1 taken 0
       81: 2292:	    display_ratio(bytes_in-(bytes_out-header_bytes), bytes_in);
call    0 returned 81
        -: 2293:#ifdef DISPLAY_STDIN_RATIO
        -: 2294:	} else {
        -: 2295:	    display_ratio(bytes_out-(bytes_in-header_bytes), bytes_out);
        -: 2296:#endif
        -: 2297:	}
       81: 2298:	fprintf(stderr, "\n");
call    0 returned 81
        -: 2299:    }
        -: 2300:}
        -: 2301:
        -: 2302:/* ========================================================================
        -: 2303: * Compress or decompress the given file
        -: 2304: */
function treat_file called 23 returned 100% blocks executed 39%
       23: 2305:local void treat_file(iname)
        -: 2306:    char *iname;
        -: 2307:{
        -: 2308:    /* Check if the input file is present, set ifname and istat: */
       23: 2309:    if (get_istat(iname, &istat) != OK) return;
call    0 returned 23
branch  1 taken 15 (fallthrough)
branch  2 taken 8
        -: 2310:
        -: 2311:    /* If the input name is that of a directory, recurse or ignore: */
        8: 2312:    if (S_ISDIR(istat.st_mode)) {
branch  0 taken 3 (fallthrough)
branch  1 taken 5
        -: 2313:#ifndef NO_DIR
        3: 2314:	if (recursive) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 2315:	    struct stat st;
        3: 2316:	    st = istat;
        3: 2317:	    treat_dir(iname);
call    0 returned 3
        -: 2318:	    /* Warning: ifname is now garbage */
        3: 2319:	    reset_times (iname, &st);
call    0 returned 3
        -: 2320:	} else
        -: 2321:#endif
    #####: 2322:	WARN((stderr,"%s: %s is a directory -- ignored\n", progname, ifname));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        3: 2323:	return;
        -: 2324:    }
        5: 2325:    if (!S_ISREG(istat.st_mode)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####: 2326:	WARN((stderr,
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2327:	      "%s: %s is not a directory or a regular file - ignored\n",
        -: 2328:	      progname, ifname));
    #####: 2329:	return;
        -: 2330:    }
       5*: 2331:    if (istat.st_nlink > 1 && !to_stdout && !force) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2332:	WARN((stderr, "%s: %s has %d other link%c -- unchanged\n",
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2333:	      progname, ifname,
        -: 2334:	      (int)istat.st_nlink - 1, istat.st_nlink > 2 ? 's' : ' '));
    #####: 2335:	return;
        -: 2336:    }
        -: 2337:
        5: 2338:    ifile_size = istat.st_size;
        -: 2339:    /* time_stamp = istat.st_mtime; */
        5: 2340:    time_stamp = 0;
        -: 2341:
        -: 2342:    /* Generate output file name */
        5: 2343:    if (to_stdout) {
branch  0 taken 2 (fallthrough)
branch  1 taken 3
        2: 2344:	strcpy(ofname, "stdout");
        -: 2345:
        3: 2346:    } else if (make_ofname() != OK) {
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3: 2347:	return;
        -: 2348:    }
        -: 2349:
        -: 2350:    /* Open the input file and determine compression method. The mode
        -: 2351:     * parameter is ignored but required by some systems (VMS) and forbidden
        -: 2352:     * on other systems (MacOS).
        -: 2353:     */
        -: 2354:#ifdef FAULTY_F_KL_1
        -: 2355:    ifd = OPEN(ifname, ascii && !decompress ? O_RDONLY : O_BINARY, RW_USER);
        -: 2356:#else
        2: 2357:    ifd = OPEN(ifname, ascii && !decompress ? O_BINARY : O_RDONLY, RW_USER);
call    0 returned 2
        -: 2358:#endif
        2: 2359:    if (ifd == -1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 2360:	fprintf(stderr, "%s: ", progname);
call    0 never executed
    #####: 2361:	perror(ifname);
call    0 never executed
    #####: 2362:	exit_code = ERROR;
    #####: 2363:	return;
        -: 2364:    }
        2: 2365:    clear_bufs(); /* clear input and output buffers */
call    0 returned 2
        2: 2366:    part_nb = 0;
        -: 2367:
        2: 2368:    if (decompress) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 2369:	method = get_method(ifd); /* updates ofname if original given */
call    0 returned 1
        1: 2370:	if (method < 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 2371:	    close(ifd);
call    0 never executed
    #####: 2372:	    return;               /* error message already emitted */
        -: 2373:	}
        -: 2374:    }
        -: 2375:
        -: 2376:    /* If compressing to a file, check if ofname is not ambiguous
        -: 2377:     * because the operating system truncates names. Otherwise, generate
        -: 2378:     * a new ofname and save the original name in the compressed file.
        -: 2379:     */
        2: 2380:    if (to_stdout) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 2381:	ofd = fileno(stdout);
call    0 returned 2
        -: 2382:	/* keep remove_ofname as zero */
        -: 2383:    } else {
    #####: 2384:	if (create_outfile() != OK) return;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2385:
    #####: 2386:	if (save_orig_name && !verbose && !quiet) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2387:	    fprintf(stderr, "%s: %s compressed to %s\n",
call    0 never executed
        -: 2388:		    progname, ifname, ofname);
        -: 2389:	}
        -: 2390:    }
        2: 2391:    if (verbose) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 2392:	fprintf(stderr, "%s:\t%s", ifname, (int)strlen(ifname) >= 15 ? 
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2393:		"" : ((int)strlen(ifname) >= 7 ? "\t" : "\t\t"));
branch  0 never executed
branch  1 never executed
        -: 2394:    }
        -: 2395:
        -: 2396:    /* Actually do the compression/decompression. Loop over zipped members.
        -: 2397:     */
        -: 2398:    for (;;) {
        2: 2399:	if ((*work)(ifd, ofd) != OK) {
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####: 2400:	    method = -1; /* force cleanup */
    #####: 2401:	    break;
        -: 2402:	}
        2: 2403:	if (!decompress || last_member || inptr == insize) break;
branch  0 taken 1 (fallthrough)
branch  1 taken 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        -: 2404:	/* end of file */
        -: 2405:
    #####: 2406:	method = get_method(ifd);
call    0 never executed
    #####: 2407:	if (method < 0) break;    /* error message already emitted */
branch  0 never executed
branch  1 never executed
    #####: 2408:	bytes_out = 0;            /* required for length check */
        -: 2409:    }
        -: 2410:
        2: 2411:    close(ifd);
call    0 returned 2
       2*: 2412:    if (!to_stdout && close(ofd)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2413:	write_error();
call    0 never executed
        -: 2414:    }
        2: 2415:    if (method == -1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 2416:	if (!to_stdout) unlink (ofname);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2417:	return;
        -: 2418:    }
        -: 2419:    /* Display statistics */
        2: 2420:    if(verbose) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 2421:	if (test) {
branch  0 never executed
branch  1 never executed
    #####: 2422:	    fprintf(stderr, " OK");
call    0 never executed
    #####: 2423:	} else if (decompress) {
branch  0 never executed
branch  1 never executed
    #####: 2424:	    display_ratio(bytes_out-(bytes_in-header_bytes), bytes_out);
call    0 never executed
        -: 2425:	} else {
    #####: 2426:	    display_ratio(bytes_in-(bytes_out-header_bytes), bytes_in);
call    0 never executed
        -: 2427:	}
    #####: 2428:	if (!test && !to_stdout) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2429:	    fprintf(stderr, " -- replaced with %s", ofname);
call    0 never executed
        -: 2430:	}
    #####: 2431:	fprintf(stderr, "\n");
call    0 never executed
        -: 2432:    }
        -: 2433:    /* Copy modes, times, ownership, and remove the input file */
        2: 2434:    if (!to_stdout) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 2435:	copy_stat(&istat);
call    0 never executed
        -: 2436:    }
        -: 2437:}
        -: 2438:
        -: 2439:/* ========================================================================
        -: 2440: * Create the output file. Return OK or ERROR.
        -: 2441: * Try several times if necessary to avoid truncating the z_suffix. For
        -: 2442: * example, do not create a compressed file of name "1234567890123."
        -: 2443: * IN assertions: the input file has already been open (ifd is set) and
        -: 2444: *   ofname has already been updated if there was an original name.
        -: 2445: * OUT assertions: ifd and ofd are closed in case of error.
        -: 2446: */
function create_outfile called 0 returned 0% blocks executed 0%
    #####: 2447:local int create_outfile()
        -: 2448:{
        -: 2449:    struct stat	ostat; /* stat for ofname */
        -: 2450:    int len;
    #####: 2451:    int flags = O_WRONLY | O_CREAT | O_EXCL | O_BINARY;
        -: 2452:
    #####: 2453:    if (ascii && decompress) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2454:	flags &= ~O_BINARY; /* force ascii text mode */
        -: 2455:    }
        -: 2456:    for (;;) {
    #####: 2457:        len = strlen(ofname);
    #####: 2458:        if (len == 0 || ofname[len] == PATH_SEP) break;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2459:#ifndef FAULTY_F_KP_1
    #####: 2460:	if (check_ofname() != OK) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2461:#else
        -: 2462:	if (check_ofname() == OK) {
        -: 2463:#endif
    #####: 2464:	    close(ifd);
call    0 never executed
    #####: 2465:	    return ERROR;
        -: 2466:	}
        -: 2467:	/* Create the output file */
    #####: 2468:	remove_ofname = 1;
    #####: 2469:	ofd = OPEN(ofname, flags, RW_USER);
call    0 never executed
    #####: 2470:	if (ofd == -1) {
branch  0 never executed
branch  1 never executed
    #####: 2471:	    perror(ofname);
call    0 never executed
    #####: 2472:	    close(ifd);
call    0 never executed
    #####: 2473:	    exit_code = ERROR;
    #####: 2474:	    return ERROR;
        -: 2475:	}
        -: 2476:
        -: 2477:	/* Check for name truncation on new file (1234567890123.gz) */
    #####: 2478:	if (fstat(ofd, &ostat) != 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2479:	    fprintf(stderr, "%s: ", progname);
call    0 never executed
    #####: 2480:	    perror(ofname);
call    0 never executed
    #####: 2481:	    close(ifd); close(ofd);
call    0 never executed
call    1 never executed
    #####: 2482:	    unlink(ofname);
call    0 never executed
    #####: 2483:	    exit_code = ERROR;
    #####: 2484:	    return ERROR;
        -: 2485:	}
    #####: 2486:	if (!name_too_long(ofname, &ostat)) return OK;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2487:
    #####: 2488:	if (decompress) {
branch  0 never executed
branch  1 never executed
        -: 2489:	    /* name might be too long if an original name was saved */
    #####: 2490:	    WARN((stderr, "%s: %s: warning, name truncated\n",
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2491:		  progname, ofname));
    #####: 2492:	    return OK;
        -: 2493:	} else {
        -: 2494:#ifdef NO_MULTIPLE_DOTS
        -: 2495:	    /* Should never happen, see check_ofname() */
        -: 2496:	    fprintf(stderr, "%s: %s: name too long\n", progname, ofname);
        -: 2497:	    do_exit(ERROR);
        -: 2498:#else
    #####: 2499:	    close(ofd);
call    0 never executed
    #####: 2500:	    unlink(ofname);
call    0 never executed
    #####: 2501:	    save_orig_name = 1;
    #####: 2502:	    strcpy(ofname+strlen(ofname)-z_len-1, z_suffix);
        -: 2503:            /* 123456789012.gz -> 12345678901.gz */
        -: 2504:#endif
        -: 2505:	} /* decompress ? */
        -: 2506:    } /* while non null name */
        -: 2507:
    #####: 2508:    close(ifd);
call    0 never executed
    #####: 2509:    fprintf(stderr, "%s: %s: name too long\n", progname, ofname);
call    0 never executed
    #####: 2510:    exit_code = ERROR;
    #####: 2511:    return ERROR;
        -: 2512:}
        -: 2513:
        -: 2514:/* ========================================================================
        -: 2515: * Use lstat if available, except for -c or -f. Use stat otherwise.
        -: 2516: * This allows links when not removing the original file.
        -: 2517: */
function do_stat called 23 returned 100% blocks executed 100%
       23: 2518:local int do_stat(name, sbuf)
        -: 2519:    char *name;
        -: 2520:    struct stat *sbuf;
        -: 2521:{
       23: 2522:    errno = 0;
        -: 2523:#if (defined(S_IFLNK) || defined (S_ISLNK)) && !defined(NO_SYMLINK)
       23: 2524:    if (!to_stdout && !force) {
branch  0 taken 21 (fallthrough)
branch  1 taken 2
branch  2 taken 20 (fallthrough)
branch  3 taken 1
       20: 2525:	return lstat(name, sbuf);
call    0 returned 20
        -: 2526:    }
        -: 2527:#endif
        3: 2528:    return stat(name, sbuf);
call    0 returned 3
        -: 2529:}
        -: 2530:
        -: 2531:/* ========================================================================
        -: 2532: * Return a pointer to the 'z' suffix of a file name, or NULL. For all
        -: 2533: * systems, ".gz", ".z", ".Z", ".taz", ".tgz", "-gz", "-z" and "_z" are
        -: 2534: * accepted suffixes, in addition to the value of the --suffix option.
        -: 2535: * ".tgz" is a useful convention for tar.z files on systems limited
        -: 2536: * to 3 characters extensions. On such systems, ".?z" and ".??z" are
        -: 2537: * also accepted suffixes. For Unix, we do not want to accept any
        -: 2538: * .??z suffix as indicating a compressed file; some people use .xyz
        -: 2539: * to denote volume data.
        -: 2540: */
function get_suffix called 4 returned 100% blocks executed 87%
        4: 2541:local char *get_suffix(name)
        -: 2542:    char *name;
        -: 2543:{
        -: 2544:    int nlen, slen;
        -: 2545:    char suffix[MAX_SUFFIX+3]; /* last chars of name, forced to lower case */
        -: 2546:    static char *known_suffixes[] =
        -: 2547:       {z_suffix, ".gz", ".z", ".taz", ".tgz", "-gz", "-z", "_z",
        -: 2548:#ifdef MAX_EXT_CHARS
        -: 2549:          "z",
        -: 2550:#endif
        -: 2551:          NULL};
        4: 2552:    char **suf = known_suffixes;
        -: 2553:
       4*: 2554:    if (strequ(z_suffix, "z")) suf++; /* check long suffixes first */
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -: 2555:
        4: 2556:    nlen = strlen(name);
        -: 2557:#ifdef FAULTY_F_KL_2
        -: 2558:    if (nlen > MAX_SUFFIX+2)
        -: 2559:#else
        4: 2560:    if (nlen <= MAX_SUFFIX+2) 
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -: 2561:#endif
        -: 2562:{
        1: 2563:        strcpy(suffix, name);
        -: 2564:    } else {
        3: 2565:        strcpy(suffix, name+nlen-MAX_SUFFIX-2);
        -: 2566:    }
        -: 2567:#ifdef SUFFIX_SEP
        -: 2568:    /* strip a version number from the file name */
        -: 2569:    {
        -: 2570:	char *v = strrchr(suffix, SUFFIX_SEP);
        -: 2571:	if (v != NULL) *v = '\0', nlen = v - name;
        -: 2572:    }
        -: 2573:#endif
        4: 2574:    strlwr(suffix);
call    0 returned 4
        4: 2575:    slen = strlen(suffix);
        -: 2576:    do {
       12: 2577:       int s = strlen(*suf);
       12: 2578:       if (slen > s && suffix[slen-s-1] != PATH_SEP
branch  0 taken 12 (fallthrough)
branch  1 taken 0
branch  2 taken 12 (fallthrough)
branch  3 taken 0
       12: 2579:           && strequ(suffix + slen - s, *suf)) {
branch  0 taken 4 (fallthrough)
branch  1 taken 8
        4: 2580:           return name+nlen-s;
        -: 2581:       }
        8: 2582:    } while (*++suf != NULL);
branch  0 taken 8
branch  1 taken 0 (fallthrough)
        -: 2583:
    #####: 2584:    return NULL;
        -: 2585:}
        -: 2586:
        -: 2587:
        -: 2588:/* ========================================================================
        -: 2589: * Set ifname to the input file name (with a suffix appended if necessary)
        -: 2590: * and istat to its stats. For decompression, if no file exists with the
        -: 2591: * original name, try adding successively z_suffix, .gz, .z, -z and .Z.
        -: 2592: * For MSDOS, we try only z_suffix and z.
        -: 2593: * Return OK or ERROR.
        -: 2594: */
function get_istat called 23 returned 100% blocks executed 57%
       23: 2595:local int get_istat(iname, sbuf)
        -: 2596:    char *iname;
        -: 2597:    struct stat *sbuf;
        -: 2598:{
        -: 2599:    int ilen;  /* strlen(ifname) */
        -: 2600:#ifndef FAULTY_F_KP_2
        -: 2601:    static char *suffixes[] = {z_suffix, ".gz", ".z", "-z", ".Z", NULL};
        -: 2602:#else
        -: 2603:    static char *suffixes[] = {z_suffix, ".gz", ".z", "-z", NULL};
        -: 2604:#endif
       23: 2605:    char **suf = suffixes;
        -: 2606:    char *s;
        -: 2607:#ifdef NO_MULTIPLE_DOTS
        -: 2608:    char *dot; /* pointer to ifname extension, or NULL */
        -: 2609:#endif
        -: 2610:
       23: 2611:    strcpy(ifname, iname);
        -: 2612:
        -: 2613:    /* If input file exists, return OK. */
       23: 2614:    if (do_stat(ifname, sbuf) == 0) return OK;
call    0 returned 23
branch  1 taken 8 (fallthrough)
branch  2 taken 15
        -: 2615:
       15: 2616:    if (!decompress || errno != ENOENT) {
branch  0 taken 1 (fallthrough)
branch  1 taken 14
branch  2 taken 0 (fallthrough)
branch  3 taken 1
       14: 2617:	perror(ifname);
call    0 returned 14
       14: 2618:	exit_code = ERROR;
       14: 2619:	return ERROR;
        -: 2620:    }
        -: 2621:    /* file.ext doesn't exist, try adding a suffix.
        -: 2622:     */
        1: 2623:    s = get_suffix(ifname);
call    0 returned 1
        1: 2624:    if (s != NULL) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2625:	perror(ifname); /* ifname already has z suffix and does not exist */
call    0 returned 1
        1: 2626:	exit_code = ERROR;
        1: 2627:	return ERROR;
        -: 2628:    }
        -: 2629:#ifdef SUFFIX_SEP
        -: 2630:    /* strip a version number from the input file name */
        -: 2631:    if ((s = strrchr(ifname, SUFFIX_SEP)) != NULL) *s = '\0';
        -: 2632:#endif
        -: 2633:#ifdef NO_MULTIPLE_DOTS
        -: 2634:    dot = strrchr(ifname, '.');
        -: 2635:    if (dot == NULL) {
        -: 2636:        strcat(ifname, ".");
        -: 2637:        dot = strrchr(ifname, '.');
        -: 2638:    }
        -: 2639:#endif
    #####: 2640:    ilen = strlen(ifname);
    #####: 2641:    if (strequ(z_suffix, ".gz")) suf++;
branch  0 never executed
branch  1 never executed
        -: 2642:
        -: 2643:    /* Search for all suffixes */
        -: 2644:    do {
    #####: 2645:        s = *suf;
        -: 2646:#ifdef NO_MULTIPLE_DOTS
        -: 2647:        if (*s == '.') s++;
        -: 2648:#endif
        -: 2649:#ifdef MAX_EXT_CHARS
        -: 2650:        strcpy(ifname, iname);
        -: 2651:        /* Needed if the suffixes are not sorted by increasing length */
        -: 2652:
        -: 2653:        if (*dot == '\0') strcpy(dot, ".");
        -: 2654:        dot[MAX_EXT_CHARS+1-strlen(s)] = '\0';
        -: 2655:#endif
    #####: 2656:        strcat(ifname, s);
    #####: 2657:        if (do_stat(ifname, sbuf) == 0) return OK;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2658:	ifname[ilen] = '\0';
    #####: 2659:    } while (*++suf != NULL);
branch  0 never executed
branch  1 never executed
        -: 2660:
        -: 2661:    /* No suffix found, complain using z_suffix: */
        -: 2662:#ifdef MAX_EXT_CHARS
        -: 2663:    strcpy(ifname, iname);
        -: 2664:    if (*dot == '\0') strcpy(dot, ".");
        -: 2665:    dot[MAX_EXT_CHARS+1-z_len] = '\0';
        -: 2666:#endif
    #####: 2667:    strcat(ifname, z_suffix);
    #####: 2668:    perror(ifname);
call    0 never executed
    #####: 2669:    exit_code = ERROR;
    #####: 2670:    return ERROR;
        -: 2671:}
        -: 2672:
        -: 2673:/* ========================================================================
        -: 2674: * Generate ofname given ifname. Return OK, or WARNING if file must be skipped.
        -: 2675: * Initializes save_orig_name.
        -: 2676: * IN assertion: this function is not called if to_stdout is true.
        -: 2677: */
function make_ofname called 3 returned 100% blocks executed 36%
        3: 2678:local int make_ofname()
        -: 2679:{
        -: 2680:    char *suff;            /* ofname z suffix */
        -: 2681:
        3: 2682:    strcpy(ofname, ifname);
        -: 2683:#ifdef SUFFIX_SEP
        -: 2684:    /* strip a version number from the output file name */
        -: 2685:    if ((suff = strrchr(ofname, SUFFIX_SEP)) != NULL) *suff = '\0';
        -: 2686:#endif
        3: 2687:    suff = get_suffix(ofname);
call    0 returned 3
        -: 2688:
        3: 2689:    if (decompress) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 2690:	if (suff == NULL) {
branch  0 never executed
branch  1 never executed
    #####: 2691:	    WARN((stderr,"%s: %s: unknown suffix -- ignored\n",
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2692:		  progname, ifname));
        -: 2693:#ifndef FAULTY_F_KP_8
    #####: 2694:	    return WARNING;
        -: 2695:#else
        -: 2696:	    return ERROR;
        -: 2697:#endif
        -: 2698:	}
        -: 2699:	/* Make a special case for .tgz and .taz: */
    #####: 2700:	strlwr(suff);
call    0 never executed
    #####: 2701:	if (strequ(suff, ".tgz") || strequ(suff, ".taz")) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2702:	    strcpy(suff, ".tar");
        -: 2703:	} else {
    #####: 2704:	    *suff = '\0'; /* strip z suffix and optional version number */
        -: 2705:	}
        -: 2706:        /* ofname might be changed later if infile contains an original name */
        -: 2707:
        3: 2708:    } else if (suff != NULL) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 2709:	/* Avoid annoying messages with -r (see treat_dir()) */
       3*: 2710:	if (verbose || (!recursive && !quiet)) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 3
branch  4 never executed
branch  5 never executed
    #####: 2711:	    fprintf(stderr, "%s: %s already has %s suffix -- unchanged\n",
call    0 never executed
        -: 2712:		    progname, ifname, suff);
        -: 2713:	}
        3: 2714:	if (exit_code == OK) exit_code = WARNING;
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 2715:	return WARNING;
        -: 2716:    } else {
    #####: 2717:        save_orig_name = 0;
        -: 2718:
        -: 2719:#ifdef NO_MULTIPLE_DOTS
        -: 2720:	suff = strrchr(ofname, '.');
        -: 2721:	if (suff == NULL) {
        -: 2722:            strcat(ofname, ".");
        -: 2723:#  ifdef MAX_EXT_CHARS
        -: 2724:        /* On the Atari and some versions of MSDOS, name_too_long()
        -: 2725:         * does not work correctly because of a bug in stat(). So we
        -: 2726:         * must truncate here.
        -: 2727:         */
        -: 2728:        } else if (strlen(suff)-1 + z_len > MAX_SUFFIX) {
        -: 2729:            suff[MAX_SUFFIX+1-z_len] = '\0';
        -: 2730:            save_orig_name = 1;
        -: 2731:#  endif
        -: 2732:        }
        -: 2733:#endif /* NO_MULTIPLE_DOTS */
    #####: 2734:	strcat(ofname, z_suffix);
        -: 2735:
        -: 2736:    } /* decompress ? */
    #####: 2737:    return OK;
        -: 2738:}
        -: 2739:
        -: 2740:
        -: 2741:/* ========================================================================
        -: 2742: * Check the magic number of the input file and update ofname if an
        -: 2743: * original name was given and to_stdout is not set.
        -: 2744: * Return the compression method, -1 for error, -2 for warning.
        -: 2745: * Set inptr to the offset of the next byte to be processed.
        -: 2746: * This function may be called repeatedly for an input file consisting
        -: 2747: * of several contiguous gzip'ed members.
        -: 2748: * IN assertions: there is at least one remaining compressed member.
        -: 2749: *   If the member is a zip file, it must be the only one.
        -: 2750: */
function get_method called 16 returned 94% blocks executed 47%
       16: 2751:local int get_method(in)
        -: 2752:    int in;        /* input file descriptor */
        -: 2753:{
        -: 2754:    uch flags;
        -: 2755:    char magic[2]; /* magic header */
        -: 2756:
       16: 2757:    magic[0] = (char)get_byte();
branch  0 taken 1 (fallthrough)
branch  1 taken 15
call    2 returned 15
      16*: 2758:    magic[1] = (char)get_byte();
branch  0 taken 16 (fallthrough)
branch  1 taken 0
call    2 never executed
        -: 2759:
        -: 2760:    /* time_stamp = istat.st_mtime; may be modified later for some methods */
       16: 2761:    time_stamp = 0;
       16: 2762:    method = -1;                 /* unknown yet */
       16: 2763:    part_nb++;                   /* number of parts in gzip file */
       16: 2764:    header_bytes = 0;
       16: 2765:    last_member = RECORD_IO;
        -: 2766:    /* assume multiple members in gzip file except for record oriented I/O */
        -: 2767:
       16: 2768:    if (memcmp(magic, GZIP_MAGIC, 2) == 0
branch  0 taken 5 (fallthrough)
branch  1 taken 11
        5: 2769:        || memcmp(magic, OLD_GZIP_MAGIC, 2) == 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -: 2770:#ifdef FAULTY_F_TW_3
        -: 2771:	work = unzip;
        -: 2772:	method = (int)get_byte();
        -: 2773:	flags = (uch)get_byte();
        -: 2774:#else
      11*: 2775:	method = (int)get_byte();
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
        -: 2776:#endif
       11: 2777:	if (method != DEFLATED) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 2778:	    fprintf(stderr,
call    0 never executed
        -: 2779:		    "%s: %s: unknown method %d -- get newer version of gzip\n",
        -: 2780:		    progname, ifname, method);
    #####: 2781:	    exit_code = ERROR;
    #####: 2782:	    return -1;
        -: 2783:	}
       11: 2784:	work = unzip;
      11*: 2785:	flags  = (uch)get_byte();
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
        -: 2786:
       11: 2787:	if ((flags & ENCRYPTED) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 2788:	    fprintf(stderr,
call    0 never executed
        -: 2789:		    "%s: %s is encrypted -- get newer version of gzip\n",
        -: 2790:		    progname, ifname);
    #####: 2791:	    exit_code = ERROR;
    #####: 2792:	    return -1;
        -: 2793:	}
       11: 2794:	if ((flags & CONTINUATION) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 2795:	    fprintf(stderr,
call    0 never executed
        -: 2796:	   "%s: %s is a a multi-part gzip file -- get newer version of gzip\n",
        -: 2797:		    progname, ifname);
    #####: 2798:	    exit_code = ERROR;
    #####: 2799:	    if (force <= 1) return -1;
branch  0 never executed
branch  1 never executed
        -: 2800:	}
       11: 2801:	if ((flags & RESERVED) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 2802:	    fprintf(stderr,
call    0 never executed
        -: 2803:		    "%s: %s has flags 0x%x -- get newer version of gzip\n",
        -: 2804:		    progname, ifname, flags);
    #####: 2805:	    exit_code = ERROR;
    #####: 2806:	    if (force <= 1) return -1;
branch  0 never executed
branch  1 never executed
        -: 2807:	}
      11*: 2808:	time_stamp  = (ulg)get_byte();
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
      11*: 2809:	time_stamp |= ((ulg)get_byte()) << 8;
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
      11*: 2810:	time_stamp |= ((ulg)get_byte()) << 16;
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
      11*: 2811:	time_stamp |= ((ulg)get_byte()) << 24;
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
        -: 2812:	/* this is not original code -- inserted by MAPSTEXT */
       11: 2813:	time_stamp = 0;
        -: 2814:
      11*: 2815:	(void)get_byte();  /* Ignore extra flags for the moment */
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
      11*: 2816:	(void)get_byte();  /* Ignore OS type for the moment */
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
        -: 2817:
       11: 2818:	if ((flags & CONTINUATION) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 2819:	    unsigned part = (unsigned)get_byte();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2820:	    part |= ((unsigned)get_byte())<<8;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2821:	    if (verbose) {
branch  0 never executed
branch  1 never executed
    #####: 2822:		fprintf(stderr,"%s: %s: part number %u\n",
call    0 never executed
        -: 2823:			progname, ifname, part);
        -: 2824:	    }
        -: 2825:	}
       11: 2826:	if ((flags & EXTRA_FIELD) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 2827:	    unsigned len = (unsigned)get_byte();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2828:	    len |= ((unsigned)get_byte())<<8;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2829:	    if (verbose) {
branch  0 never executed
branch  1 never executed
    #####: 2830:		fprintf(stderr,"%s: %s: extra field of %u bytes ignored\n",
call    0 never executed
        -: 2831:			progname, ifname, len);
        -: 2832:	    }
    #####: 2833:	    while (len--) (void)get_byte();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2834:	}
        -: 2835:
        -: 2836:	/* Get original file name if it was truncated */
       11: 2837:	if ((flags & ORIG_NAME) != 0) {
branch  0 taken 3 (fallthrough)
branch  1 taken 8
       5*: 2838:	    if (to_stdout || part_nb > 1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
branch  2 never executed
branch  3 never executed
        -: 2839:		/* Discard the old name */
        -: 2840:		char c; /* dummy used for NeXTstep 3.0 cc optimizer bug */
    1828*: 2841:		while ((c=get_byte()) != 0) c++;
branch  0 taken 1827 (fallthrough)
branch  1 taken 1
call    2 returned 0
branch  3 taken 1825
branch  4 taken 2 (fallthrough)
        -: 2842:	    } else {
        -: 2843:		/* Copy the base name. Keep a directory prefix intact. */
    #####: 2844:		char *p = basename(ofname);
call    0 never executed
        -: 2845:		for (;;) {
    #####: 2846:		    *p = (char)get_char();
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2847:		    if (*p++ == '\0') break;
branch  0 never executed
branch  1 never executed
    #####: 2848:		    if (p >= ofname+sizeof(ofname)) {
branch  0 never executed
branch  1 never executed
    #####: 2849:			error("corrupted input -- file name too large");
call    0 never executed
        -: 2850:		    }
        -: 2851:		}
        -: 2852:	    } /* to_stdout */
        -: 2853:	} /* orig_name */
        -: 2854:
        -: 2855:	/* Discard file comment if any */
       10: 2856:	if ((flags & COMMENT) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    #####: 2857:	    while (get_char() != 0) /* null */ ;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2858:	}
       10: 2859:	if (part_nb == 1) {
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 2860:	    header_bytes = inptr + 2*sizeof(long); /* include crc and size */
        -: 2861:	}
        -: 2862:
        5: 2863:    } else if (memcmp(magic, PKZIP_MAGIC, 2) == 0 && inptr == 2
branch  0 taken 2 (fallthrough)
branch  1 taken 3
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 2864:	    && memcmp((char*)inbuf, PKZIP_MAGIC, 4) == 0) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -: 2865:	/* To simplify the code, we support a zip file when alone only.
        -: 2866:         * We are thus guaranteed that the entire local header fits in inbuf.
        -: 2867:         */
        2: 2868:        inptr = 0;
        2: 2869:	work = unzip;
       2*: 2870:	if (check_zipfile(in) != OK) return -1;
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -: 2871:	/* check_zipfile may get ofname from the local header */
        2: 2872:	last_member = 1;
        -: 2873:
        3: 2874:    } else if (memcmp(magic, PACK_MAGIC, 2) == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 2875:	work = unpack;
        1: 2876:	method = PACKED;
        2: 2877:    } else if (memcmp(magic, LZW_MAGIC, 2) == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 2878:	work = unlzw;
        1: 2879:	method = COMPRESSED;
        1: 2880:	last_member = 1;
        -: 2881:    }
       15: 2882:    if (method >= 0) return method;
branch  0 taken 14 (fallthrough)
branch  1 taken 1
        1: 2883:    if (part_nb == 1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 2884:	fprintf(stderr, "\n%s: %s: not in gzip format\n", progname, ifname);
call    0 never executed
    #####: 2885:	exit_code = ERROR;
    #####: 2886:	return -1;
        -: 2887:    } else {
        1: 2888:	WARN((stderr, "\n%s: %s: decompression OK, trailing garbage ignored\n",
branch  0 taken 1 (fallthrough)
branch  1 taken 0
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        -: 2889:	      progname, ifname));
        1: 2890:	return -2;
        -: 2891:    }
        -: 2892:}
        -: 2893:
        -: 2894:/* ========================================================================
        -: 2895: * Return true if the two stat structures correspond to the same file.
        -: 2896: */
function same_file called 0 returned 0% blocks executed 0%
    #####: 2897:local int same_file(stat1, stat2)
        -: 2898:    struct stat *stat1;
        -: 2899:    struct stat *stat2;
        -: 2900:{
    #####: 2901:    return stat1->st_ino   == stat2->st_ino
    #####: 2902:	&& stat1->st_dev   == stat2->st_dev
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2903:#ifdef NO_ST_INO
        -: 2904:        /* Can't rely on st_ino and st_dev, use other fields: */
        -: 2905:	&& stat1->st_mode  == stat2->st_mode
        -: 2906:	&& stat1->st_uid   == stat2->st_uid
        -: 2907:	&& stat1->st_gid   == stat2->st_gid
        -: 2908:	&& stat1->st_size  == stat2->st_size
        -: 2909:	&& stat1->st_atime == stat2->st_atime
        -: 2910:	&& stat1->st_mtime == stat2->st_mtime
        -: 2911:	&& stat1->st_ctime == stat2->st_ctime
        -: 2912:#endif
        -: 2913:	    ;
        -: 2914:}
        -: 2915:
        -: 2916:/* ========================================================================
        -: 2917: * Return true if a file name is ambiguous because the operating system
        -: 2918: * truncates file names.
        -: 2919: */
function name_too_long called 0 returned 0% blocks executed 0%
    #####: 2920:local int name_too_long(name, statb)
        -: 2921:    char *name;           /* file name to check */
        -: 2922:    struct stat *statb;   /* stat buf for this file name */
        -: 2923:{
    #####: 2924:    int s = strlen(name);
    #####: 2925:    char c = name[s-1];
        -: 2926:    struct stat	tstat; /* stat for truncated name */
        -: 2927:    int res;
        -: 2928:
    #####: 2929:    tstat = *statb;      /* Just in case OS does not fill all fields */
    #####: 2930:    name[s-1] = '\0';
    #####: 2931:    res = stat(name, &tstat) == 0 && same_file(statb, &tstat);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2932:    name[s-1] = c;
        -: 2933:    Trace((stderr, " too_long(%s) => %d\n", name, res));
    #####: 2934:    return res;
        -: 2935:}
        -: 2936:
        -: 2937:/* ========================================================================
        -: 2938: * If compressing to a file, check if ofname is not ambiguous
        -: 2939: * because the operating system truncates names. Otherwise, generate
        -: 2940: * a new ofname and save the original name in the compressed file.
        -: 2941: * If the compressed file already exists, ask for confirmation.
        -: 2942: *    The check for name truncation is made dynamically, because different
        -: 2943: * file systems on the same OS might use different truncation rules (on SVR4
        -: 2944: * s5 truncates to 14 chars and ufs does not truncate).
        -: 2945: *    This function returns -1 if the file must be skipped, and
        -: 2946: * updates save_orig_name if necessary.
        -: 2947: * IN assertions: save_orig_name is already set if ofname has been
        -: 2948: * already truncated because of NO_MULTIPLE_DOTS. The input file has
        -: 2949: * already been open and istat is set.
        -: 2950: */
function check_ofname called 0 returned 0% blocks executed 0%
    #####: 2951:local int check_ofname()
        -: 2952:{
    #####: 2953:    int s = strlen(ofname);
        -: 2954:    struct stat	ostat; /* stat for ofname */
        -: 2955:
    #####: 2956:    if (stat(ofname, &ostat) != 0) return 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2957:
        -: 2958:    /* Check for name truncation on existing file: */
        -: 2959:#ifdef NO_MULTIPLE_DOTS
        -: 2960:    if (!decompress && name_too_long(ofname, &ostat)) {
        -: 2961:#else
    #####: 2962:    if (!decompress && s > 8 && name_too_long(ofname, &ostat)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2963:#endif
    #####: 2964:	save_orig_name = 1;
    #####: 2965:	strcpy(ofname+s-z_len-1, z_suffix);  /* f.ext.gz -> f.ex.gz  */
        -: 2966:
    #####: 2967:	if (stat(ofname, &ostat) != 0) return 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2968:    } /* !decompress && name_too_long */
        -: 2969:
        -: 2970:    /* Check that the input and output files are different (could be
        -: 2971:     * the same by name truncation or links).
        -: 2972:     */
    #####: 2973:    if (same_file(&istat, &ostat)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2974:	fprintf(stderr, "%s: %s and %s are the same file\n",
call    0 never executed
        -: 2975:		progname, ifname, ofname);
    #####: 2976:	exit_code = ERROR;
    #####: 2977:	return ERROR;
        -: 2978:    }
        -: 2979:    /* Ask permission to overwrite the existing file */
    #####: 2980:    if (!force) {
branch  0 never executed
branch  1 never executed
        -: 2981:	char response[80];
    #####: 2982:	strcpy(response,"n");
    #####: 2983:	fprintf(stderr, "%s: %s already exists;", progname, ofname);
call    0 never executed
    #####: 2984:	if (foreground && isatty(fileno(stdin))) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2985:	    fprintf(stderr, " do you wish to overwrite (y or n)? ");
call    0 never executed
    #####: 2986:	    fflush(stderr);
call    0 never executed
    #####: 2987:	    (void)fgets(response, sizeof(response)-1, stdin);
call    0 never executed
        -: 2988:	}
    #####: 2989:	if (tolow(*response) != 'y') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2990:	    fprintf(stderr, "\tnot overwritten\n");
call    0 never executed
    #####: 2991:	    if (exit_code == OK) exit_code = WARNING;
branch  0 never executed
branch  1 never executed
    #####: 2992:	    return ERROR;
        -: 2993:	}
        -: 2994:    }
    #####: 2995:    (void) chmod(ofname, 0777);
call    0 never executed
    #####: 2996:    if (unlink(ofname)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2997:	fprintf(stderr, "%s: ", progname);
call    0 never executed
    #####: 2998:	perror(ofname);
call    0 never executed
    #####: 2999:	exit_code = ERROR;
    #####: 3000:	return ERROR;
        -: 3001:    }
    #####: 3002:    return OK;
        -: 3003:}
        -: 3004:
        -: 3005:
        -: 3006:/* ========================================================================
        -: 3007: * Set the access and modification times from the given stat buffer.
        -: 3008: */
function reset_times called 3 returned 100% blocks executed 30%
        3: 3009:local void reset_times (name, statb)
        -: 3010:    char *name;
        -: 3011:    struct stat *statb;
        -: 3012:{
        -: 3013:#ifndef NO_UTIME
        -: 3014:    struct utimbuf	timep;
        -: 3015:
        -: 3016:    /* Copy the time stamp */
        3: 3017:    timep.actime  = statb->st_atime;
        3: 3018:    timep.modtime = statb->st_mtime;
        -: 3019:
        -: 3020:    /* Some systems (at least OS/2) do not support utime on directories */
       3*: 3021:    if (utime(name, &timep) && !S_ISDIR(statb->st_mode)) {
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
branch  3 never executed
branch  4 never executed
    #####: 3022:	WARN((stderr, "%s: ", progname));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3023:	if (!quiet) perror(ofname);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 3024:    }
        -: 3025:#else
        -: 3026:    name = name; statb = statb; /* avoid warnings */
        -: 3027:#endif
        3: 3028:}
        -: 3029:
        -: 3030:
        -: 3031:/* ========================================================================
        -: 3032: * Copy modes, times, ownership from input file to output file.
        -: 3033: * IN assertion: to_stdout is false.
        -: 3034: */
function copy_stat called 0 returned 0% blocks executed 0%
    #####: 3035:local void copy_stat(ifstat)
        -: 3036:    struct stat *ifstat;
        -: 3037:{
        -: 3038:#ifndef NO_UTIME
    #####: 3039:    if (decompress && time_stamp != 0 && ifstat->st_mtime != time_stamp) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3040:	ifstat->st_mtime = time_stamp;
    #####: 3041:	if (verbose) {
branch  0 never executed
branch  1 never executed
    #####: 3042:	    fprintf(stderr, "%s: time stamp restored\n", ofname);
call    0 never executed
        -: 3043:	}
        -: 3044:    }
    #####: 3045:    reset_times(ofname, ifstat);
call    0 never executed
        -: 3046:#endif
        -: 3047:    /* Copy the protection modes */
    #####: 3048:    if (chmod(ofname, ifstat->st_mode & 07777)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3049:	WARN((stderr, "%s: ", progname));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3050:	if (!quiet) perror(ofname);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 3051:    }
        -: 3052:#ifndef NO_CHOWN
    #####: 3053:    chown(ofname, ifstat->st_uid, ifstat->st_gid);  /* Copy ownership */
call    0 never executed
        -: 3054:#endif
    #####: 3055:    remove_ofname = 0;
        -: 3056:    /* It's now safe to remove the input file: */
    #####: 3057:    (void) chmod(ifname, 0777);
call    0 never executed
    #####: 3058:    if (unlink(ifname)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3059:	WARN((stderr, "%s: ", progname));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3060:	if (!quiet) perror(ifname);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 3061:    }
    #####: 3062:}
        -: 3063:
        -: 3064:#ifndef NO_DIR
        -: 3065:
        -: 3066:/* ========================================================================
        -: 3067: * Recurse through the given directory. This code is taken from ncompress.
        -: 3068: */
function treat_dir called 3 returned 100% blocks executed 79%
        3: 3069:local void treat_dir(dir)
        -: 3070:    char *dir;
        -: 3071:{
        -: 3072:    dir_type *dp;
        -: 3073:    DIR      *dirp;
        -: 3074:    char     nbuf[MAX_PATH_LEN];
        -: 3075:    int      len;
        -: 3076:
        3: 3077:    dirp = opendir(dir);
call    0 returned 3
        -: 3078:    
        3: 3079:    if (dirp == NULL) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 3080:	fprintf(stderr, "%s: %s unreadable\n", progname, dir);
call    0 never executed
    #####: 3081:	exit_code = ERROR;
    #####: 3082:	return ;
        -: 3083:    }
        -: 3084:    /*
        -: 3085:     ** WARNING: the following algorithm could occasionally cause
        -: 3086:     ** compress to produce error warnings of the form "<filename>.gz
        -: 3087:     ** already has .gz suffix - ignored". This occurs when the
        -: 3088:     ** .gz output file is inserted into the directory below
        -: 3089:     ** readdir's current pointer.
        -: 3090:     ** These warnings are harmless but annoying, so they are suppressed
        -: 3091:     ** with option -r (except when -v is on). An alternative
        -: 3092:     ** to allowing this would be to store the entire directory
        -: 3093:     ** list in memory, then compress the entries in the stored
        -: 3094:     ** list. Given the depth-first recursive algorithm used here,
        -: 3095:     ** this could use up a tremendous amount of memory. I don't
        -: 3096:     ** think it's worth it. -- Dave Mack
        -: 3097:     ** (An other alternative might be two passes to avoid depth-first.)
        -: 3098:     */
        -: 3099:    
       12: 3100:    while ((dp = readdir(dirp)) != NULL) {
call    0 returned 12
branch  1 taken 9
branch  2 taken 3 (fallthrough)
        -: 3101:
        9: 3102:	if (strequ(dp->d_name,".") || strequ(dp->d_name,"..")) {
branch  0 taken 6 (fallthrough)
branch  1 taken 3
branch  2 taken 3 (fallthrough)
branch  3 taken 3
        6: 3103:	    continue;
        -: 3104:	}
        3: 3105:	len = strlen(dir);
        -: 3106:#ifndef FAULTY_F_KP_9
        3: 3107:	if (len + NLENGTH(dp) + 1 < MAX_PATH_LEN - 1) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 3108:#else
        -: 3109:	if (NLENGTH(dp) + 1 > MAX_PATH_LEN - len) {
        -: 3110:#endif
        3: 3111:	    strcpy(nbuf,dir);
        3: 3112:	    if (len != 0 /* dir = "" means current dir on Amiga */
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 3113:#ifdef PATH_SEP2
        -: 3114:		&& dir[len-1] != PATH_SEP2
        -: 3115:#endif
        -: 3116:#ifdef PATH_SEP3
        -: 3117:		&& dir[len-1] != PATH_SEP3
        -: 3118:#endif
        -: 3119:	    ) {
        3: 3120:		nbuf[len++] = PATH_SEP;
        -: 3121:	    }
        3: 3122:	    strcpy(nbuf+len, dp->d_name);
        3: 3123:	    treat_file(nbuf);
call    0 returned 3
        -: 3124:	} else {
    #####: 3125:	    fprintf(stderr,"%s: %s/%s: pathname too long\n",
    #####: 3126:		    progname, dir, dp->d_name);
call    0 never executed
    #####: 3127:	    exit_code = ERROR;
        -: 3128:	}
        -: 3129:    }
        3: 3130:    closedir(dirp);
call    0 returned 3
        -: 3131:}
        -: 3132:#endif /* ? NO_DIR */
        -: 3133:
        -: 3134:/* ========================================================================
        -: 3135: * Free all dynamically allocated variables and exit with the given code.
        -: 3136: */
function do_exit called 214 returned 0% blocks executed 60%
      214: 3137:local void do_exit(exitcode)
        -: 3138:    int exitcode;
        -: 3139:{
     214*: 3140:    if (env != NULL)  free(env),  env  = NULL;
branch  0 taken 0 (fallthrough)
branch  1 taken 214
     214*: 3141:    if (args != NULL) free((char*)args), args = NULL;
branch  0 taken 0 (fallthrough)
branch  1 taken 214
        -: 3142:    FREE(inbuf);
        -: 3143:    FREE(outbuf);
        -: 3144:    FREE(d_buf);
        -: 3145:    FREE(window);
        -: 3146:#ifndef MAXSEG_64K
        -: 3147:    FREE(tab_prefix);
        -: 3148:#else
        -: 3149:    FREE(tab_prefix0);
        -: 3150:    FREE(tab_prefix1);
        -: 3151:#endif
      214: 3152:    exit(exitcode);
        -: 3153:}
        -: 3154:
        -: 3155:/* ========================================================================
        -: 3156: * Signal and error handler.
        -: 3157: */
function abort_gzip called 1 returned 0% blocks executed 60%
        1: 3158:RETSIGTYPE abort_gzip()
        -: 3159:{
        1: 3160:   if (remove_ofname) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3161:       close(ofd);
call    0 never executed
    #####: 3162:       unlink (ofname);
call    0 never executed
        -: 3163:   }
        1: 3164:   do_exit(ERROR);
call    0 returned 0
    #####: 3165:}
        -: 3166:/* inflate.c -- Not copyrighted 1992 by Mark Adler
        -: 3167:   version c10p1, 10 January 1993 */
        -: 3168:
        -: 3169:/* You can do whatever you like with this source file, though I would
        -: 3170:   prefer that if you modify it and redistribute it that you include
        -: 3171:   comments to that effect with your name and the date.  Thank you.
        -: 3172:   [The history has been moved to the file ChangeLog.]
        -: 3173: */
        -: 3174:
        -: 3175:/*
        -: 3176:   Inflate deflated (PKZIP's method 8 compressed) data.  The compression
        -: 3177:   method searches for as much of the current string of bytes (up to a
        -: 3178:   length of 258) in the previous 32K bytes.  If it doesn't find any
        -: 3179:   matches (of at least length 3), it codes the next byte.  Otherwise, it
        -: 3180:   codes the length of the matched string and its distance backwards from
        -: 3181:   the current position.  There is a single Huffman code that codes both
        -: 3182:   single bytes (called "literals") and match lengths.  A second Huffman
        -: 3183:   code codes the distance information, which follows a length code.  Each
        -: 3184:   length or distance code actually represents a base value and a number
        -: 3185:   of "extra" (sometimes zero) bits to get to add to the base value.  At
        -: 3186:   the end of each deflated block is a special end-of-block (EOB) literal/
        -: 3187:   length code.  The decoding process is basically: get a literal/length
        -: 3188:   code; if EOB then done; if a literal, emit the decoded byte; if a
        -: 3189:   length then get the distance and emit the referred-to bytes from the
        -: 3190:   sliding window of previously emitted data.
        -: 3191:
        -: 3192:   There are (currently) three kinds of inflate blocks: stored, fixed, and
        -: 3193:   dynamic.  The compressor deals with some chunk of data at a time, and
        -: 3194:   decides which method to use on a chunk-by-chunk basis.  A chunk might
        -: 3195:   typically be 32K or 64K.  If the chunk is uncompressible, then the
        -: 3196:   "stored" method is used.  In this case, the bytes are simply stored as
        -: 3197:   is, eight bits per byte, with none of the above coding.  The bytes are
        -: 3198:   preceded by a count, since there is no longer an EOB code.
        -: 3199:
        -: 3200:   If the data is compressible, then either the fixed or dynamic methods
        -: 3201:   are used.  In the dynamic method, the compressed data is preceded by
        -: 3202:   an encoding of the literal/length and distance Huffman codes that are
        -: 3203:   to be used to decode this block.  The representation is itself Huffman
        -: 3204:   coded, and so is preceded by a description of that code.  These code
        -: 3205:   descriptions take up a little space, and so for small blocks, there is
        -: 3206:   a predefined set of codes, called the fixed codes.  The fixed method is
        -: 3207:   used if the block codes up smaller that way (usually for quite small
        -: 3208:   chunks), otherwise the dynamic method is used.  In the latter case, the
        -: 3209:   codes are customized to the probabilities in the current block, and so
        -: 3210:   can code it much better than the pre-determined fixed codes.
        -: 3211: 
        -: 3212:   The Huffman codes themselves are decoded using a mutli-level table
        -: 3213:   lookup, in order to maximize the speed of decoding plus the speed of
        -: 3214:   building the decoding tables.  See the comments below that precede the
        -: 3215:   lbits and dbits tuning parameters.
        -: 3216: */
        -: 3217:
        -: 3218:
        -: 3219:/*
        -: 3220:   Notes beyond the 1.93a appnote.txt:
        -: 3221:
        -: 3222:   1. Distance pointers never point before the beginning of the output
        -: 3223:      stream.
        -: 3224:   2. Distance pointers can point back across blocks, up to 32k away.
        -: 3225:   3. There is an implied maximum of 7 bits for the bit length table and
        -: 3226:      15 bits for the actual data.
        -: 3227:   4. If only one code exists, then it is encoded using one bit.  (Zero
        -: 3228:      would be more efficient, but perhaps a little confusing.)  If two
        -: 3229:      codes exist, they are coded using one bit each (0 and 1).
        -: 3230:   5. There is no way of sending zero distance codes--a dummy must be
        -: 3231:      sent if there are none.  (History: a pre 2.0 version of PKZIP would
        -: 3232:      store blocks with no distance codes, but this was discovered to be
        -: 3233:      too harsh a criterion.)  Valid only for 1.93a.  2.04c does allow
        -: 3234:      zero distance codes, which is sent as one code of zero bits in
        -: 3235:      length.
        -: 3236:   6. There are up to 286 literal/length codes.  Code 256 represents the
        -: 3237:      end-of-block.  Note however that the static length tree defines
        -: 3238:      288 codes just to fill out the Huffman codes.  Codes 286 and 287
        -: 3239:      cannot be used though, since there is no length base or extra bits
        -: 3240:      defined for them.  Similarly, there are up to 30 distance codes.
        -: 3241:      However, static trees define 32 codes (all 5 bits) to fill out the
        -: 3242:      Huffman codes, but the last two had better not show up in the data.
        -: 3243:   7. Unzip can check dynamic Huffman blocks for complete code sets.
        -: 3244:      The exception is that a single code would not be complete (see #4).
        -: 3245:   8. The five bits following the block type is really the number of
        -: 3246:      literal codes sent minus 257.
        -: 3247:   9. Length codes 8,16,16 are interpreted as 13 length codes of 8 bits
        -: 3248:      (1+6+6).  Therefore, to output three times the length, you output
        -: 3249:      three codes (1+1+1), whereas to output four times the same length,
        -: 3250:      you only need two codes (1+3).  Hmm.
        -: 3251:  10. In the tree reconstruction algorithm, Code = Code + Increment
        -: 3252:      only if BitLength(i) is not zero.  (Pretty obvious.)
        -: 3253:  11. Correction: 4 Bits: # of Bit Length codes - 4     (4 - 19)
        -: 3254:  12. Note: length code 284 can represent 227-258, but length code 285
        -: 3255:      really is 258.  The last length deserves its own, short code
        -: 3256:      since it gets used a lot in very redundant files.  The length
        -: 3257:      258 is special since 258 - 3 (the min match length) is 255.
        -: 3258:  13. The literal/length and distance code bit lengths are read as a
        -: 3259:      single stream of lengths.  It is possible (and advantageous) for
        -: 3260:      a repeat code (16, 17, or 18) to go across the boundary between
        -: 3261:      the two sets of lengths.
        -: 3262: */
        -: 3263:
        -: 3264:/*
        -: 3265:#ifndef lint
        -: 3266:static char rcsid[] = "$Id: inflate.c,v 0.13 1993/04/26 14:18:22 jloup Exp $";
        -: 3267:#endif
        -: 3268:*/
        -: 3269:
        -: 3270:#if defined(STDC_HEADERS) || !defined(NO_STDLIB_H)
        -: 3271:#  include <stdlib.h>
        -: 3272:#endif
        -: 3273:
        -: 3274:#define slide window
        -: 3275:
        -: 3276:/* Huffman code lookup table entry--this entry is four bytes for machines
        -: 3277:   that have 16-bit pointers (e.g. PC's in the small or medium model).
        -: 3278:   Valid extra bits are 0..13.  e == 15 is EOB (end of block), e == 16
        -: 3279:   means that v is a literal, 16 < e < 32 means that v is a pointer to
        -: 3280:   the next table, which codes e - 16 bits, and lastly e == 99 indicates
        -: 3281:   an unused code.  If a code with e == 99 is looked up, this implies an
        -: 3282:   error in the data. */
        -: 3283:struct huft {
        -: 3284:  uch e;                /* number of extra bits or operation */
        -: 3285:  uch b;                /* number of bits in this code or subcode */
        -: 3286:  union {
        -: 3287:    ush n;              /* literal, length base, or distance base */
        -: 3288:    struct huft *t;     /* pointer to next level of table */
        -: 3289:  } v;
        -: 3290:};
        -: 3291:
        -: 3292:
        -: 3293:/* Function prototypes */
        -: 3294:int huft_build OF((unsigned *, unsigned, unsigned, ush *, ush *,
        -: 3295:                   struct huft **, int *));
        -: 3296:int huft_free OF((struct huft *));
        -: 3297:int inflate_codes OF((struct huft *, struct huft *, int, int));
        -: 3298:int inflate_stored OF((void));
        -: 3299:int inflate_fixed OF((void));
        -: 3300:int inflate_dynamic OF((void));
        -: 3301:int inflate_block OF((int *));
        -: 3302:int inflate OF((void));
        -: 3303:
        -: 3304:
        -: 3305:/* The inflate algorithm uses a sliding 32K byte window on the uncompressed
        -: 3306:   stream to find repeated byte strings.  This is implemented here as a
        -: 3307:   circular buffer.  The index is updated simply by incrementing and then
        -: 3308:   and'ing with 0x7fff (32K-1). */
        -: 3309:/* It is left to other modules to supply the 32K area.  It is assumed
        -: 3310:   to be usable as if it were declared "uch slide[32768];" or as just
        -: 3311:   "uch *slide;" and then malloc'ed in the latter case.  The definition
        -: 3312:   must be in unzip.h, included above. */
        -: 3313:/* unsigned wp;             current position in slide */
        -: 3314:#define wp outcnt
        -: 3315:#define flush_output(w) (wp=(w),flush_window())
        -: 3316:
        -: 3317:/* Tables for deflate from PKZIP's appnote.txt. */
        -: 3318:static unsigned border[] = {    /* Order of the bit length code lengths */
        -: 3319:        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
        -: 3320:static ush cplens[] = {         /* Copy lengths for literal codes 257..285 */
        -: 3321:        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
        -: 3322:        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
        -: 3323:        /* note: see note #13 above about the 258 in this list. */
        -: 3324:static ush cplext[] = {         /* Extra bits for literal codes 257..285 */
        -: 3325:        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
        -: 3326:        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
        -: 3327:static ush cpdist[] = {         /* Copy offsets for distance codes 0..29 */
        -: 3328:        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
        -: 3329:        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
        -: 3330:        8193, 12289, 16385, 24577};
        -: 3331:static ush cpdext[] = {         /* Extra bits for distance codes */
        -: 3332:        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
        -: 3333:        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
        -: 3334:        12, 12, 13, 13};
        -: 3335:
        -: 3336:
        -: 3337:
        -: 3338:/* Macros for inflate() bit peeking and grabbing.
        -: 3339:   The usage is:
        -: 3340:   
        -: 3341:        NEEDBITS(j)
        -: 3342:        x = b & mask_bits[j];
        -: 3343:        DUMPBITS(j)
        -: 3344:
        -: 3345:   where NEEDBITS makes sure that b has at least j bits in it, and
        -: 3346:   DUMPBITS removes the bits from b.  The macros use the variable k
        -: 3347:   for the number of bits in b.  Normally, b and k are register
        -: 3348:   variables for speed, and are initialized at the beginning of a
        -: 3349:   routine that uses these macros from a global bit buffer and count.
        -: 3350:
        -: 3351:   If we assume that EOB will be the longest code, then we will never
        -: 3352:   ask for bits with NEEDBITS that are beyond the end of the stream.
        -: 3353:   So, NEEDBITS should not read any more bytes than are needed to
        -: 3354:   meet the request.  Then no bytes need to be "returned" to the buffer
        -: 3355:   at the end of the last block.
        -: 3356:
        -: 3357:   However, this assumption is not true for fixed blocks--the EOB code
        -: 3358:   is 7 bits, but the other literal/length codes can be 8 or 9 bits.
        -: 3359:   (The EOB code is shorter than other codes because fixed blocks are
        -: 3360:   generally short.  So, while a block always has an EOB, many other
        -: 3361:   literal/length codes have a significantly lower probability of
        -: 3362:   showing up at all.)  However, by making the first table have a
        -: 3363:   lookup of seven bits, the EOB code will be found in that first
        -: 3364:   lookup, and so will not require that too many bits be pulled from
        -: 3365:   the stream.
        -: 3366: */
        -: 3367:
        -: 3368:ulg bb;                         /* bit buffer */
        -: 3369:unsigned bk;                    /* bits in bit buffer */
        -: 3370:
        -: 3371:ush mask_bits[] = {
        -: 3372:    0x0000,
        -: 3373:    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
        -: 3374:    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
        -: 3375:};
        -: 3376:
        -: 3377:#ifdef CRYPT
        -: 3378:  uch cc;
        -: 3379:#  define NEXTBYTE() \
        -: 3380:     (decrypt ? (cc = get_byte(), zdecode(cc), cc) : get_byte())
        -: 3381:#else
        -: 3382:#  define NEXTBYTE()  (uch)get_byte()
        -: 3383:#endif
        -: 3384:#define NEEDBITS(n) {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=8;}}
        -: 3385:#define DUMPBITS(n) {b>>=(n);k-=(n);}
        -: 3386:
        -: 3387:
        -: 3388:/*
        -: 3389:   Huffman code decoding is performed using a multi-level table lookup.
        -: 3390:   The fastest way to decode is to simply build a lookup table whose
        -: 3391:   size is determined by the longest code.  However, the time it takes
        -: 3392:   to build this table can also be a factor if the data being decoded
        -: 3393:   is not very long.  The most common codes are necessarily the
        -: 3394:   shortest codes, so those codes dominate the decoding time, and hence
        -: 3395:   the speed.  The idea is you can have a shorter table that decodes the
        -: 3396:   shorter, more probable codes, and then point to subsidiary tables for
        -: 3397:   the longer codes.  The time it costs to decode the longer codes is
        -: 3398:   then traded against the time it takes to make longer tables.
        -: 3399:
        -: 3400:   This results of this trade are in the variables lbits and dbits
        -: 3401:   below.  lbits is the number of bits the first level table for literal/
        -: 3402:   length codes can decode in one step, and dbits is the same thing for
        -: 3403:   the distance codes.  Subsequent tables are also less than or equal to
        -: 3404:   those sizes.  These values may be adjusted either when all of the
        -: 3405:   codes are shorter than that, in which case the longest code length in
        -: 3406:   bits is used, or when the shortest code is *longer* than the requested
        -: 3407:   table size, in which case the length of the shortest code in bits is
        -: 3408:   used.
        -: 3409:
        -: 3410:   There are two different values for the two tables, since they code a
        -: 3411:   different number of possibilities each.  The literal/length table
        -: 3412:   codes 286 possible values, or in a flat code, a little over eight
        -: 3413:   bits.  The distance table codes 30 possible values, or a little less
        -: 3414:   than five bits, flat.  The optimum values for speed end up being
        -: 3415:   about one bit more than those, so lbits is 8+1 and dbits is 5+1.
        -: 3416:   The optimum values may differ though from machine to machine, and
        -: 3417:   possibly even between compilers.  Your mileage may vary.
        -: 3418: */
        -: 3419:
        -: 3420:
        -: 3421:int lbits = 9;          /* bits in base literal/length lookup table */
        -: 3422:int dbits = 6;          /* bits in base distance lookup table */
        -: 3423:
        -: 3424:
        -: 3425:/* If BMAX needs to be larger than 16, then h and x[] should be ulg. */
        -: 3426:#define BMAX 16         /* maximum bit length of any code (16 for explode) */
        -: 3427:#define N_MAX 288       /* maximum number of codes in any set */
        -: 3428:
        -: 3429:
        -: 3430:unsigned hufts;         /* track memory usage */
        -: 3431:
        -: 3432:
function huft_build called 36 returned 100% blocks executed 87%
       36: 3433:int huft_build(b, n, s, d, e, t, m)
        -: 3434:unsigned *b;            /* code lengths in bits (all assumed <= BMAX) */
        -: 3435:unsigned n;             /* number of codes (assumed <= N_MAX) */
        -: 3436:unsigned s;             /* number of simple-valued codes (0..s-1) */
        -: 3437:ush *d;                 /* list of base values for non-simple codes */
        -: 3438:ush *e;                 /* list of extra bits for non-simple codes */
        -: 3439:struct huft **t;        /* result: starting table */
        -: 3440:int *m;                 /* maximum lookup bits, returns actual */
        -: 3441:/* Given a list of code lengths and a maximum table size, make a set of
        -: 3442:   tables to decode that set of codes.  Return zero on success, one if
        -: 3443:   the given code set is incomplete (the tables are still built in this
        -: 3444:   case), two if the input is invalid (all zero length codes or an
        -: 3445:   oversubscribed set of lengths), and three if not enough memory. */
        -: 3446:{
        -: 3447:  unsigned a;                   /* counter for codes of length k */
        -: 3448:  unsigned c[BMAX+1];           /* bit length count table */
        -: 3449:  unsigned f;                   /* i repeats in table every f entries */
        -: 3450:  int g;                        /* maximum code length */
        -: 3451:  int h;                        /* table level */
        -: 3452:  register unsigned i;          /* counter, current code */
        -: 3453:  register unsigned j;          /* counter */
        -: 3454:  register int k;               /* number of bits in current code */
        -: 3455:  int l;                        /* bits per table (returned in m) */
        -: 3456:  register unsigned *p;         /* pointer into c[], b[], or v[] */
        -: 3457:  register struct huft *q;      /* points to current table */
        -: 3458:  struct huft r;                /* table entry for structure assignment */
        -: 3459:  struct huft *u[BMAX];         /* table stack */
        -: 3460:  unsigned v[N_MAX];            /* values in order of bit length */
        -: 3461:  register int w;               /* bits before this table == (l * h) */
        -: 3462:  unsigned x[BMAX+1];           /* bit offsets, then code stack */
        -: 3463:  unsigned *xp;                 /* pointer into x */
        -: 3464:  int y;                        /* number of dummy codes added */
        -: 3465:  unsigned z;                   /* number of entries in current table */
        -: 3466:
        -: 3467:
        -: 3468:  /* Generate counts for each bit length */
       36: 3469:  memzero(c, sizeof(c));
       36: 3470:  p = b;  i = n;
        -: 3471:  do {
        -: 3472:    Tracecv(*p, (stderr, (n-i >= ' ' && n-i <= '~' ? "%c %d\n" : "0x%x %d\n"), 
        -: 3473:	    n-i, *p));
     4019: 3474:    c[*p++]++;                  /* assume all entries <= BMAX */
     4019: 3475:  } while (--i);
branch  0 taken 3983
branch  1 taken 36 (fallthrough)
       36: 3476:  if (c[0] == n)                /* null input--all zero length codes */
branch  0 taken 0 (fallthrough)
branch  1 taken 36
        -: 3477:  {
    #####: 3478:    *t = (struct huft *)NULL;
    #####: 3479:    *m = 0;
    #####: 3480:    return 0;
        -: 3481:  }
        -: 3482:
        -: 3483:
        -: 3484:  /* Find minimum and maximum length, bound *m by those */
       36: 3485:  l = *m;
      121: 3486:  for (j = 1; j <= BMAX; j++)
branch  0 taken 121
branch  1 taken 0 (fallthrough)
      121: 3487:    if (c[j])
branch  0 taken 36 (fallthrough)
branch  1 taken 85
       36: 3488:      break;
       36: 3489:  k = j;                        /* minimum code length */
       36: 3490:  if ((unsigned)l < j)
branch  0 taken 0 (fallthrough)
branch  1 taken 36
    #####: 3491:    l = j;
      252: 3492:  for (i = BMAX; i; i--)
branch  0 taken 252
branch  1 taken 0 (fallthrough)
      252: 3493:    if (c[i])
branch  0 taken 36 (fallthrough)
branch  1 taken 216
       36: 3494:      break;
       36: 3495:  g = i;                        /* maximum code length */
       36: 3496:  if ((unsigned)l > i)
branch  0 taken 11 (fallthrough)
branch  1 taken 25
       11: 3497:    l = i;
       36: 3498:  *m = l;
        -: 3499:
        -: 3500:
        -: 3501:  /* Adjust last length count to fill out codes, if needed */
      275: 3502:  for (y = 1 << j; j < i; j++, y <<= 1)
branch  0 taken 239
branch  1 taken 36 (fallthrough)
      239: 3503:    if ((y -= c[j]) < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 239
    #####: 3504:      return 2;                 /* bad input: more codes than bits */
       36: 3505:  if ((y -= c[i]) < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 36
    #####: 3506:    return 2;
       36: 3507:  c[i] += y;
        -: 3508:
        -: 3509:
        -: 3510:  /* Generate starting offsets into the value table for each length */
       36: 3511:  x[1] = j = 0;
       36: 3512:  p = c + 1;  xp = x + 2;
      360: 3513:  while (--i) {                 /* note that i == g from above */
branch  0 taken 324
branch  1 taken 36 (fallthrough)
      324: 3514:    *xp++ = (j += *p++);
        -: 3515:  }
        -: 3516:
        -: 3517:
        -: 3518:  /* Make a table of values in order of bit lengths */
       36: 3519:  p = b;  i = 0;
        -: 3520:  do {
     4019: 3521:    if ((j = *p++) != 0)
branch  0 taken 1888 (fallthrough)
branch  1 taken 2131
     1888: 3522:      v[x[j]++] = i;
     4019: 3523:  } while (++i < n);
branch  0 taken 3983
branch  1 taken 36 (fallthrough)
        -: 3524:
        -: 3525:
        -: 3526:  /* Generate the Huffman codes and for each, make the table entries */
       36: 3527:  x[0] = i = 0;                 /* first Huffman code is zero */
       36: 3528:  p = v;                        /* grab values in bit order */
       36: 3529:  h = -1;                       /* no tables yet--level -1 */
       36: 3530:  w = -l;                       /* bits decoded == (l * h) */
       36: 3531:  u[0] = (struct huft *)NULL;   /* just to keep compilers happy */
       36: 3532:  q = (struct huft *)NULL;      /* ditto */
       36: 3533:  z = 0;                        /* ditto */
        -: 3534:
        -: 3535:  /* go through the bit lengths (k already is bits in shortest code) */
      311: 3536:  for (; k <= g; k++)
branch  0 taken 275
branch  1 taken 36 (fallthrough)
        -: 3537:  {
      275: 3538:    a = c[k];
     2163: 3539:    while (a--)
branch  0 taken 1888
branch  1 taken 275 (fallthrough)
        -: 3540:    {
        -: 3541:      /* here i is the Huffman code of length k bits for value *p */
        -: 3542:      /* make tables up to required level */
     2056: 3543:      while (k > w + l)
branch  0 taken 168
branch  1 taken 1888 (fallthrough)
        -: 3544:      {
      168: 3545:        h++;
      168: 3546:        w += l;                 /* previous table always l bits */
        -: 3547:
        -: 3548:        /* compute minimum size table less than or equal to l bits */
      168: 3549:        z = (z = g - w) > (unsigned)l ? l : z;  /* upper limit on table size */
branch  0 taken 24 (fallthrough)
branch  1 taken 144
      168: 3550:        if ((f = 1 << (j = k - w)) > a + 1)     /* try a k-w bit table */
branch  0 taken 71 (fallthrough)
branch  1 taken 97
        -: 3551:        {                       /* too few codes for k-w bit table */
       71: 3552:          f -= a + 1;           /* deduct codes from patterns left */
       71: 3553:          xp = c + k;
      194: 3554:          while (++j < z)       /* try smaller tables up to z bits */
branch  0 taken 134
branch  1 taken 60 (fallthrough)
        -: 3555:          {
      134: 3556:            if ((f <<= 1) <= *++xp)
branch  0 taken 11 (fallthrough)
branch  1 taken 123
       11: 3557:              break;            /* enough codes to use up j bits */
      123: 3558:            f -= *xp;           /* else deduct codes from patterns */
        -: 3559:          }
        -: 3560:        }
      168: 3561:        z = 1 << j;             /* table entries for j-bit table */
        -: 3562:
        -: 3563:        /* allocate and link in new table */
      168: 3564:        if ((q = (struct huft *)malloc((z + 1)*sizeof(struct huft))) ==
branch  0 taken 0 (fallthrough)
branch  1 taken 168
        -: 3565:            (struct huft *)NULL)
        -: 3566:        {
    #####: 3567:          if (h)
branch  0 never executed
branch  1 never executed
    #####: 3568:            huft_free(u[0]);
call    0 never executed
    #####: 3569:          return 3;             /* not enough memory */
        -: 3570:        }
      168: 3571:        hufts += z + 1;         /* track memory usage */
      168: 3572:        *t = q + 1;             /* link to list for huft_free() */
      168: 3573:        *(t = &(q->v.t)) = (struct huft *)NULL;
      168: 3574:        u[h] = ++q;             /* table starts after link */
        -: 3575:
        -: 3576:        /* connect to last table, if there is one */
      168: 3577:        if (h)
branch  0 taken 132 (fallthrough)
branch  1 taken 36
        -: 3578:        {
      132: 3579:          x[h] = i;             /* save pattern for backing up */
      132: 3580:          r.b = (uch)l;         /* bits to dump before this table */
      132: 3581:          r.e = (uch)(16 + j);  /* bits in this table */
      132: 3582:          r.v.t = q;            /* pointer to this table */
      132: 3583:          j = i >> (w - l);     /* (get around Turbo C bug) */
      132: 3584:          u[h-1][j] = r;        /* connect to last table */
        -: 3585:        }
        -: 3586:      }
        -: 3587:
        -: 3588:      /* set up table entry in r */
     1888: 3589:      r.b = (uch)(k - w);
     1888: 3590:      if (p >= v + n)
branch  0 taken 0 (fallthrough)
branch  1 taken 1888
    #####: 3591:        r.e = 99;               /* out of values--invalid code */
     1888: 3592:      else if (*p < s)
branch  0 taken 1283 (fallthrough)
branch  1 taken 605
        -: 3593:      {
     1283: 3594:        r.e = (uch)(*p < 256 ? 16 : 15);    /* 256 is end-of-block code */
branch  0 taken 1271 (fallthrough)
branch  1 taken 12
     1283: 3595:        r.v.n = (ush)(*p);             /* simple code is just the value */
     1283: 3596:	p++;                           /* one compiler does not like *p++ */
        -: 3597:      }
        -: 3598:      else
        -: 3599:      {
      605: 3600:        r.e = (uch)e[*p - s];   /* non-simple--look up in lists */
      605: 3601:        r.v.n = d[*p++ - s];
        -: 3602:      }
        -: 3603:
        -: 3604:      /* fill code-like entries with r */
     1888: 3605:      f = 1 << (k - w);
    10430: 3606:      for (j = i >> w; j < z; j += f)
branch  0 taken 8542
branch  1 taken 1888 (fallthrough)
     8542: 3607:        q[j] = r;
        -: 3608:
        -: 3609:      /* backwards increment the k-bit code i */
     3740: 3610:      for (j = 1 << (k - 1); i & j; j >>= 1)
branch  0 taken 1852
branch  1 taken 1888 (fallthrough)
     1852: 3611:        i ^= j;
     1888: 3612:      i ^= j;
        -: 3613:
        -: 3614:      /* backup over finished tables */
     2020: 3615:      while ((i & ((1 << w) - 1)) != x[h])
branch  0 taken 132
branch  1 taken 1888 (fallthrough)
        -: 3616:      {
      132: 3617:        h--;                    /* don't need to update q */
      132: 3618:        w -= l;
        -: 3619:      }
        -: 3620:    }
        -: 3621:  }
        -: 3622:
        -: 3623:
        -: 3624:  /* Return true (1) if we were given an incomplete table */
      36*: 3625:  return y != 0 && g != 1;
branch  0 taken 0 (fallthrough)
branch  1 taken 36
branch  2 never executed
branch  3 never executed
        -: 3626:}
        -: 3627:
        -: 3628:
        -: 3629:
function huft_free called 36 returned 100% blocks executed 100%
       36: 3630:int huft_free(t)
        -: 3631:struct huft *t;         /* table to free */
        -: 3632:/* Free the malloc'ed tables built by huft_build(), which makes a linked
        -: 3633:   list of the tables it made, with the links in a dummy first entry of
        -: 3634:   each table. */
        -: 3635:{
        -: 3636:  register struct huft *p, *q;
        -: 3637:
        -: 3638:
        -: 3639:  /* Go through linked list, freeing from the malloced (t[-1]) address. */
       36: 3640:  p = t;
      204: 3641:  while (p != (struct huft *)NULL)
branch  0 taken 168
branch  1 taken 36 (fallthrough)
        -: 3642:  {
      168: 3643:    q = (--p)->v.t;
      168: 3644:    free((char*)p);
      168: 3645:    p = q;
        -: 3646:  } 
       36: 3647:  return 0;
        -: 3648:}
        -: 3649:
        -: 3650:
function inflate_codes called 12 returned 100% blocks executed 81%
       12: 3651:int inflate_codes(tl, td, bl, bd)
        -: 3652:struct huft *tl, *td;   /* literal/length and distance decoder tables */
        -: 3653:int bl, bd;             /* number of bits decoded by tl[] and td[] */
        -: 3654:/* inflate (decompress) the codes in a deflated (compressed) block.
        -: 3655:   Return an error code or zero if it all goes ok. */
        -: 3656:{
        -: 3657:  register unsigned e;  /* table entry flag/number of extra bits */
        -: 3658:  unsigned n, d;        /* length and index for copy */
        -: 3659:  unsigned w;           /* current window position */
        -: 3660:  struct huft *t;       /* pointer to table entry */
        -: 3661:  unsigned ml, md;      /* masks for bl and bd bits */
        -: 3662:  register ulg b;       /* bit buffer */
        -: 3663:  register unsigned k;  /* number of bits in bit buffer */
        -: 3664:
        -: 3665:
        -: 3666:  /* make local copies of globals */
       12: 3667:  b = bb;                       /* initialize bit buffer */
       12: 3668:  k = bk;
       12: 3669:  w = wp;                       /* initialize window position */
        -: 3670:
        -: 3671:  /* inflate the coded data */
       12: 3672:  ml = mask_bits[bl];           /* precompute masks for speed */
       12: 3673:  md = mask_bits[bd];
        -: 3674:  for (;;)                      /* do until end of block */
        -: 3675:  {
  175355*: 3676:    NEEDBITS((unsigned)bl)
branch  0 taken 87900 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 87900
branch  4 taken 87455 (fallthrough)
    87455: 3677:    if ((e = (t = tl + ((unsigned)b & ml))->e) > 16)
branch  0 taken 1715 (fallthrough)
branch  1 taken 85740
        -: 3678:      do {
     1715: 3679:        if (e == 99)
branch  0 taken 0 (fallthrough)
branch  1 taken 1715
    #####: 3680:          return 1;
     1715: 3681:        DUMPBITS(t->b)
     1715: 3682:        e -= 16;
    2046*: 3683:        NEEDBITS(e)
branch  0 taken 331 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 331
branch  4 taken 1715 (fallthrough)
     1715: 3684:      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 16);
branch  0 taken 0
branch  1 taken 1715 (fallthrough)
    87455: 3685:    DUMPBITS(t->b)
    87455: 3686:    if (e == 16)                /* then it's a literal */
branch  0 taken 39175 (fallthrough)
branch  1 taken 48280
        -: 3687:    {
    39175: 3688:      slide[w++] = (uch)t->v.n;
        -: 3689:      Tracevv((stderr, "%c", slide[w-1]));
    39175: 3690:      if (w == WSIZE)
branch  0 taken 1 (fallthrough)
branch  1 taken 39174
        -: 3691:      {
        1: 3692:        flush_output(w);
call    0 returned 1
        1: 3693:        w = 0;
        -: 3694:      }
        -: 3695:    }
        -: 3696:    else                        /* it's an EOB or a length */
        -: 3697:    {
        -: 3698:      /* exit if end of block */
    48280: 3699:      if (e == 15)
branch  0 taken 12 (fallthrough)
branch  1 taken 48268
       12: 3700:        break;
        -: 3701:
        -: 3702:      /* get length of block to copy */
   48520*: 3703:      NEEDBITS(e)
branch  0 taken 252 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 252
branch  4 taken 48268 (fallthrough)
    48268: 3704:      n = t->v.n + ((unsigned)b & mask_bits[e]);
    48268: 3705:      DUMPBITS(e);
        -: 3706:
        -: 3707:      /* decode distance of block to copy */
   58048*: 3708:      NEEDBITS((unsigned)bd)
branch  0 taken 9780 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 9780
branch  4 taken 48268 (fallthrough)
    48268: 3709:      if ((e = (t = td + ((unsigned)b & md))->e) > 16)
branch  0 taken 1771 (fallthrough)
branch  1 taken 46497
        -: 3710:        do {
     1771: 3711:          if (e == 99)
branch  0 taken 0 (fallthrough)
branch  1 taken 1771
    #####: 3712:            return 1;
     1771: 3713:          DUMPBITS(t->b)
     1771: 3714:          e -= 16;
    2524*: 3715:          NEEDBITS(e)
branch  0 taken 753 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 753
branch  4 taken 1771 (fallthrough)
     1771: 3716:        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 16);
branch  0 taken 0
branch  1 taken 1771 (fallthrough)
    48268: 3717:      DUMPBITS(t->b)
   89405*: 3718:      NEEDBITS(e)
branch  0 taken 41137 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 41137
branch  4 taken 48268 (fallthrough)
    48268: 3719:      d = w - t->v.n - ((unsigned)b & mask_bits[e]);
    48268: 3720:      DUMPBITS(e)
        -: 3721:      Tracevv((stderr,"\\[%d,%d]", w-d, n));
        -: 3722:
        -: 3723:      /* do the copy */
        -: 3724:      do {
    48291: 3725:        n -= (e = (e = WSIZE - ((d &= WSIZE-1) > w ? d : w)) > n ? n : e);
branch  0 taken 1894 (fallthrough)
branch  1 taken 46397
branch  2 taken 48268 (fallthrough)
branch  3 taken 23
        -: 3726:#if !defined(NOMEMCPY) && !defined(DEBUG)
    48291: 3727:        if (w - d >= e)         /* (this test assumes unsigned comparison) */
branch  0 taken 48088 (fallthrough)
branch  1 taken 203
        -: 3728:        {
    48088: 3729:          memcpy(slide + w, slide + d, e);
    48088: 3730:          w += e;
    48088: 3731:          d += e;
        -: 3732:        }
        -: 3733:        else                      /* do it slow to avoid memcpy() overlap */
        -: 3734:#endif /* !NOMEMCPY */
        -: 3735:          do {
     9338: 3736:            slide[w++] = slide[d++];
        -: 3737:	    Tracevv((stderr, "%c", slide[w-1]));
     9338: 3738:          } while (--e);
branch  0 taken 9135
branch  1 taken 203 (fallthrough)
    48291: 3739:        if (w == WSIZE)
branch  0 taken 11 (fallthrough)
branch  1 taken 48280
        -: 3740:        {
       11: 3741:          flush_output(w);
call    0 returned 11
       11: 3742:          w = 0;
        -: 3743:        }
    48291: 3744:      } while (n);
branch  0 taken 23
branch  1 taken 48268 (fallthrough)
        -: 3745:    }
        -: 3746:  }
        -: 3747:
        -: 3748:
        -: 3749:  /* restore the globals from the locals */
       12: 3750:  wp = w;                       /* restore global window pointer */
       12: 3751:  bb = b;                       /* restore global bit buffer */
       12: 3752:  bk = k;
        -: 3753:
        -: 3754:  /* done */
       12: 3755:  return 0;
        -: 3756:}
        -: 3757:
        -: 3758:
        -: 3759:
function inflate_stored called 2 returned 100% blocks executed 84%
        2: 3760:int inflate_stored()
        -: 3761:/* "decompress" an inflated type 0 (stored) block. */
        -: 3762:{
        -: 3763:  unsigned n;           /* number of bytes in block */
        -: 3764:  unsigned w;           /* current window position */
        -: 3765:  register ulg b;       /* bit buffer */
        -: 3766:  register unsigned k;  /* number of bits in bit buffer */
        -: 3767:
        -: 3768:
        -: 3769:  /* make local copies of globals */
        2: 3770:  b = bb;                       /* initialize bit buffer */
        2: 3771:  k = bk;
        2: 3772:  w = wp;                       /* initialize window position */
        -: 3773:
        -: 3774:
        -: 3775:  /* go to byte boundary */
        2: 3776:  n = k & 7;
        2: 3777:  DUMPBITS(n);
        -: 3778:
        -: 3779:
        -: 3780:  /* get the length and its complement */
       6*: 3781:  NEEDBITS(16)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 4
branch  4 taken 2 (fallthrough)
        2: 3782:  n = ((unsigned)b & 0xffff);
        2: 3783:  DUMPBITS(16)
       6*: 3784:  NEEDBITS(16)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 4
branch  4 taken 2 (fallthrough)
        2: 3785:  if (n != (unsigned)((~b) & 0xffff))
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 3786:    return 1;                   /* error in compressed data */
        2: 3787:  DUMPBITS(16)
        -: 3788:
        -: 3789:
        -: 3790:  /* read and output the compressed data */
    34233: 3791:  while (n--)
branch  0 taken 34231
branch  1 taken 2 (fallthrough)
        -: 3792:  {
    68462: 3793:    NEEDBITS(8)
branch  0 taken 34230 (fallthrough)
branch  1 taken 1
call    2 returned 1
branch  3 taken 34231
branch  4 taken 34231 (fallthrough)
    34231: 3794:    slide[w++] = (uch)b;
    34231: 3795:    if (w == WSIZE)
branch  0 taken 1 (fallthrough)
branch  1 taken 34230
        -: 3796:    {
        1: 3797:      flush_output(w);
call    0 returned 1
        1: 3798:      w = 0;
        -: 3799:    }
    34231: 3800:    DUMPBITS(8)
        -: 3801:  }
        -: 3802:
        -: 3803:
        -: 3804:  /* restore the globals from the locals */
        2: 3805:  wp = w;                       /* restore global window pointer */
        2: 3806:  bb = b;                       /* restore global bit buffer */
        2: 3807:  bk = k;
        2: 3808:  return 0;
        -: 3809:}
        -: 3810:
        -: 3811:
        -: 3812:
function inflate_fixed called 0 returned 0% blocks executed 0%
    #####: 3813:int inflate_fixed()
        -: 3814:/* decompress an inflated type 1 (fixed Huffman codes) block.  We should
        -: 3815:   either replace this with a custom decoder, or at least precompute the
        -: 3816:   Huffman tables. */
        -: 3817:{
        -: 3818:  int i;                /* temporary variable */
        -: 3819:  struct huft *tl;      /* literal/length code table */
        -: 3820:  struct huft *td;      /* distance code table */
        -: 3821:  int bl;               /* lookup bits for tl */
        -: 3822:  int bd;               /* lookup bits for td */
        -: 3823:  unsigned l[288];      /* length list for huft_build */
        -: 3824:
        -: 3825:
        -: 3826:  /* set up literal table */
    #####: 3827:  for (i = 0; i < 144; i++)
branch  0 never executed
branch  1 never executed
    #####: 3828:    l[i] = 8;
    #####: 3829:  for (; i < 256; i++)
branch  0 never executed
branch  1 never executed
    #####: 3830:    l[i] = 9;
    #####: 3831:  for (; i < 280; i++)
branch  0 never executed
branch  1 never executed
    #####: 3832:    l[i] = 7;
    #####: 3833:  for (; i < 288; i++)          /* make a complete, but wrong code set */
branch  0 never executed
branch  1 never executed
    #####: 3834:    l[i] = 8;
    #####: 3835:  bl = 7;
    #####: 3836:  if ((i = huft_build(l, 288, 257, cplens, cplext, &tl, &bl)) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3837:    return i;
        -: 3838:
        -: 3839:
        -: 3840:  /* set up distance table */
    #####: 3841:  for (i = 0; i < 30; i++)      /* make an incomplete code set */
branch  0 never executed
branch  1 never executed
    #####: 3842:    l[i] = 5;
    #####: 3843:  bd = 5;
    #####: 3844:  if ((i = huft_build(l, 30, 0, cpdist, cpdext, &td, &bd)) > 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3845:  {
    #####: 3846:    huft_free(tl);
call    0 never executed
    #####: 3847:    return i;
        -: 3848:  }
        -: 3849:
        -: 3850:
        -: 3851:  /* decompress until an end-of-block code */
    #####: 3852:  if (inflate_codes(tl, td, bl, bd))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3853:    return 1;
        -: 3854:
        -: 3855:
        -: 3856:  /* free the decoding tables, return */
    #####: 3857:  huft_free(tl);
call    0 never executed
    #####: 3858:  huft_free(td);
call    0 never executed
    #####: 3859:  return 0;
        -: 3860:}
        -: 3861:
        -: 3862:
        -: 3863:
function inflate_dynamic called 12 returned 100% blocks executed 66%
       12: 3864:int inflate_dynamic()
        -: 3865:/* decompress an inflated type 2 (dynamic Huffman codes) block. */
        -: 3866:{
        -: 3867:  int i;                /* temporary variables */
        -: 3868:  unsigned j;
        -: 3869:  unsigned l;           /* last length */
        -: 3870:  unsigned m;           /* mask for bit lengths table */
        -: 3871:  unsigned n;           /* number of lengths to get */
        -: 3872:  struct huft *tl;      /* literal/length code table */
        -: 3873:  struct huft *td;      /* distance code table */
        -: 3874:  int bl;               /* lookup bits for tl */
        -: 3875:  int bd;               /* lookup bits for td */
        -: 3876:  unsigned nb;          /* number of bit length codes */
        -: 3877:  unsigned nl;          /* number of literal/length codes */
        -: 3878:  unsigned nd;          /* number of distance codes */
        -: 3879:#ifdef PKZIP_BUG_WORKAROUND
        -: 3880:  unsigned ll[288+32];  /* literal/length and distance code lengths */
        -: 3881:#else
        -: 3882:  unsigned ll[286+30];  /* literal/length and distance code lengths */
        -: 3883:#endif
        -: 3884:  register ulg b;       /* bit buffer */
        -: 3885:  register unsigned k;  /* number of bits in bit buffer */
        -: 3886:
        -: 3887:
        -: 3888:  /* make local bit buffer */
       12: 3889:  b = bb;
       12: 3890:  k = bk;
        -: 3891:
        -: 3892:
        -: 3893:  /* read in table lengths */
      12*: 3894:  NEEDBITS(5)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 taken 0
branch  4 taken 12 (fallthrough)
       12: 3895:  nl = 257 + ((unsigned)b & 0x1f);      /* number of literal/length codes */
       12: 3896:  DUMPBITS(5)
      24*: 3897:  NEEDBITS(5)
branch  0 taken 12 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 12
branch  4 taken 12 (fallthrough)
       12: 3898:  nd = 1 + ((unsigned)b & 0x1f);        /* number of distance codes */
       12: 3899:  DUMPBITS(5)
      23*: 3900:  NEEDBITS(4)
branch  0 taken 11 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 11
branch  4 taken 12 (fallthrough)
       12: 3901:  nb = 4 + ((unsigned)b & 0xf);         /* number of bit length codes */
       12: 3902:  DUMPBITS(4)
        -: 3903:#ifdef PKZIP_BUG_WORKAROUND
        -: 3904:  if (nl > 288 || nd > 32)
        -: 3905:#else
       12: 3906:  if (nl > 286 || nd > 30)
branch  0 taken 12 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 12
        -: 3907:#endif
    #####: 3908:    return 1;                   /* bad lengths */
        -: 3909:
        -: 3910:
        -: 3911:  /* read in bit-length-code lengths */
      191: 3912:  for (j = 0; j < nb; j++)
branch  0 taken 179
branch  1 taken 12 (fallthrough)
        -: 3913:  {
     240*: 3914:    NEEDBITS(3)
branch  0 taken 61 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 61
branch  4 taken 179 (fallthrough)
      179: 3915:    ll[border[j]] = (unsigned)b & 7;
      179: 3916:    DUMPBITS(3)
        -: 3917:  }
       61: 3918:  for (; j < 19; j++)
branch  0 taken 49
branch  1 taken 12 (fallthrough)
       49: 3919:    ll[border[j]] = 0;
        -: 3920:
        -: 3921:
        -: 3922:  /* build decoding table for trees--single level, 7 bit lookup */
       12: 3923:  bl = 7;
       12: 3924:  if ((i = huft_build(ll, 19, 19, NULL, NULL, &tl, &bl)) != 0)
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
        -: 3925:  {
    #####: 3926:    if (i == 1)
branch  0 never executed
branch  1 never executed
    #####: 3927:      huft_free(tl);
call    0 never executed
    #####: 3928:    return i;                   /* incomplete code set */
        -: 3929:  }
        -: 3930:
        -: 3931:
        -: 3932:  /* read in literal and distance code lengths */
       12: 3933:  n = nl + nd;
       12: 3934:  m = mask_bits[bl];
       12: 3935:  i = l = 0;
     1768: 3936:  while ((unsigned)i < n)
branch  0 taken 1756
branch  1 taken 12 (fallthrough)
        -: 3937:  {
    2555*: 3938:    NEEDBITS((unsigned)bl)
branch  0 taken 799 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 799
branch  4 taken 1756 (fallthrough)
     1756: 3939:    j = (td = tl + ((unsigned)b & m))->b;
     1756: 3940:    DUMPBITS(j)
     1756: 3941:    j = td->v.n;
     1756: 3942:    if (j < 16)                 /* length of code in bits (0..15) */
branch  0 taken 1662 (fallthrough)
branch  1 taken 94
     1662: 3943:      ll[i++] = l = j;          /* save last length in l */
       94: 3944:    else if (j == 16)           /* repeat last length 3 to 6 times */
branch  0 taken 38 (fallthrough)
branch  1 taken 56
        -: 3945:    {
      38*: 3946:      NEEDBITS(2)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 taken 0
branch  4 taken 38 (fallthrough)
       38: 3947:      j = 3 + ((unsigned)b & 3);
       38: 3948:      DUMPBITS(2)
       38: 3949:      if ((unsigned)i + j > n)
branch  0 taken 0 (fallthrough)
branch  1 taken 38
    #####: 3950:        return 1;
      190: 3951:      while (j--)
branch  0 taken 152
branch  1 taken 38
      152: 3952:        ll[i++] = l;
        -: 3953:    }
       56: 3954:    else if (j == 17)           /* 3 to 10 zero length codes */
branch  0 taken 32 (fallthrough)
branch  1 taken 24
        -: 3955:    {
      42*: 3956:      NEEDBITS(3)
branch  0 taken 10 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 10
branch  4 taken 32 (fallthrough)
       32: 3957:      j = 3 + ((unsigned)b & 7);
       32: 3958:      DUMPBITS(3)
       32: 3959:      if ((unsigned)i + j > n)
branch  0 taken 0 (fallthrough)
branch  1 taken 32
    #####: 3960:        return 1;
      228: 3961:      while (j--)
branch  0 taken 196
branch  1 taken 32 (fallthrough)
      196: 3962:        ll[i++] = 0;
       32: 3963:      l = 0;
        -: 3964:    }
        -: 3965:    else                        /* j == 18: 11 to 138 zero length codes */
        -: 3966:    {
      47*: 3967:      NEEDBITS(7)
branch  0 taken 23 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 23
branch  4 taken 24 (fallthrough)
       24: 3968:      j = 11 + ((unsigned)b & 0x7f);
       24: 3969:      DUMPBITS(7)
       24: 3970:      if ((unsigned)i + j > n)
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####: 3971:        return 1;
     1805: 3972:      while (j--)
branch  0 taken 1781
branch  1 taken 24 (fallthrough)
     1781: 3973:        ll[i++] = 0;
       24: 3974:      l = 0;
        -: 3975:    }
        -: 3976:  }
        -: 3977:
        -: 3978:
        -: 3979:  /* free decoding table for trees */
       12: 3980:  huft_free(tl);
call    0 returned 12
        -: 3981:
        -: 3982:
        -: 3983:  /* restore the global bit buffer */
       12: 3984:  bb = b;
       12: 3985:  bk = k;
        -: 3986:
        -: 3987:
        -: 3988:  /* build the decoding tables for literal/length and distance codes */
       12: 3989:  bl = lbits;
       12: 3990:  if ((i = huft_build(ll, nl, 257, cplens, cplext, &tl, &bl)) != 0)
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
        -: 3991:  {
    #####: 3992:    if (i == 1) {
branch  0 never executed
branch  1 never executed
    #####: 3993:      fprintf(stderr, " incomplete literal tree\n");
call    0 never executed
    #####: 3994:      huft_free(tl);
call    0 never executed
        -: 3995:    }
    #####: 3996:    return i;                   /* incomplete code set */
        -: 3997:  }
       12: 3998:  bd = dbits;
       12: 3999:  if ((i = huft_build(ll + nl, nd, 0, cpdist, cpdext, &td, &bd)) != 0)
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
        -: 4000:  {
    #####: 4001:    if (i == 1) {
branch  0 never executed
branch  1 never executed
    #####: 4002:      fprintf(stderr, " incomplete distance tree\n");
call    0 never executed
        -: 4003:#ifdef PKZIP_BUG_WORKAROUND
        -: 4004:      i = 0;
        -: 4005:    }
        -: 4006:#else
    #####: 4007:      huft_free(td);
call    0 never executed
        -: 4008:    }
    #####: 4009:    huft_free(tl);
call    0 never executed
    #####: 4010:    return i;                   /* incomplete code set */
        -: 4011:#endif
        -: 4012:  }
        -: 4013:
        -: 4014:
        -: 4015:  /* decompress until an end-of-block code */
       12: 4016:  if (inflate_codes(tl, td, bl, bd))
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
    #####: 4017:    return 1;
        -: 4018:
        -: 4019:
        -: 4020:  /* free the decoding tables, return */
       12: 4021:  huft_free(tl);
call    0 returned 12
       12: 4022:  huft_free(td);
call    0 returned 12
       12: 4023:  return 0;
        -: 4024:}
        -: 4025:
        -: 4026:
        -: 4027:
function inflate_block called 14 returned 100% blocks executed 68%
       14: 4028:int inflate_block(e)
        -: 4029:int *e;                 /* last block flag */
        -: 4030:/* decompress an inflated block */
        -: 4031:{
        -: 4032:  unsigned t;           /* block type */
        -: 4033:  register ulg b;       /* bit buffer */
        -: 4034:  register unsigned k;  /* number of bits in bit buffer */
        -: 4035:
        -: 4036:
        -: 4037:  /* make local bit buffer */
       14: 4038:  b = bb;
       14: 4039:  k = bk;
        -: 4040:
        -: 4041:
        -: 4042:  /* read in last block bit */
      27*: 4043:  NEEDBITS(1)
branch  0 taken 13 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 13
branch  4 taken 14 (fallthrough)
       14: 4044:  *e = (int)b & 1;
       14: 4045:  DUMPBITS(1)
        -: 4046:
        -: 4047:
        -: 4048:  /* read in block type */
      15*: 4049:  NEEDBITS(2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 1
branch  4 taken 14 (fallthrough)
       14: 4050:  t = (unsigned)b & 3;
       14: 4051:  DUMPBITS(2)
        -: 4052:
        -: 4053:
        -: 4054:  /* restore the global bit buffer */
       14: 4055:  bb = b;
       14: 4056:  bk = k;
        -: 4057:
        -: 4058:
        -: 4059:  /* inflate that block type */
       14: 4060:  if (t == 2)
branch  0 taken 12 (fallthrough)
branch  1 taken 2
       12: 4061:    return inflate_dynamic();
call    0 returned 12
        2: 4062:  if (t == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 4063:    return inflate_stored();
call    0 returned 2
    #####: 4064:  if (t == 1)
branch  0 never executed
branch  1 never executed
    #####: 4065:    return inflate_fixed();
call    0 never executed
        -: 4066:
        -: 4067:
        -: 4068:  /* bad block type */
    #####: 4069:  return 2;
        -: 4070:}
        -: 4071:
        -: 4072:
        -: 4073:
function inflate called 12 returned 100% blocks executed 86%
       12: 4074:int inflate()
        -: 4075:/* decompress an inflated entry */
        -: 4076:{
        -: 4077:  int e;                /* last block flag */
        -: 4078:  int r;                /* result code */
        -: 4079:  unsigned h;           /* maximum struct huft's malloc'ed */
        -: 4080:
        -: 4081:
        -: 4082:  /* initialize window, bit buffer */
       12: 4083:  wp = 0;
       12: 4084:  bk = 0;
       12: 4085:  bb = 0;
        -: 4086:
        -: 4087:
        -: 4088:  /* decompress until the last block */
       12: 4089:  h = 0;
        -: 4090:  do {
       14: 4091:    hufts = 0;
       14: 4092:    if ((r = inflate_block(&e)) != 0)
call    0 returned 14
branch  1 taken 0 (fallthrough)
branch  2 taken 14
    #####: 4093:      return r;
       14: 4094:    if (hufts > h)
branch  0 taken 12 (fallthrough)
branch  1 taken 2
       12: 4095:      h = hufts;
       14: 4096:  } while (!e);
branch  0 taken 2
branch  1 taken 12 (fallthrough)
        -: 4097:
        -: 4098:  /* Undo too much lookahead. The next read will be byte aligned so we
        -: 4099:   * can discard unused bits in the last meaningful byte.
        -: 4100:   */
       12: 4101:  while (bk >= 8) {
branch  0 taken 0
branch  1 taken 12 (fallthrough)
    #####: 4102:    bk -= 8;
    #####: 4103:    inptr--;
        -: 4104:  }
        -: 4105:
        -: 4106:  /* flush out slide */
       12: 4107:  flush_output(wp);
call    0 returned 12
        -: 4108:
        -: 4109:
        -: 4110:  /* return success */
        -: 4111:#ifdef DEBUG
        -: 4112:  fprintf(stderr, "<%u> ", h);
        -: 4113:#endif /* DEBUG */
       12: 4114:  return 0;
        -: 4115:}
        -: 4116:/* lzw.c -- compress files in LZW format.
        -: 4117: * This is a dummy version avoiding patent problems.
        -: 4118: */
        -: 4119:
        -: 4120:/*
        -: 4121:#ifndef lint
        -: 4122:static char rcsid[] = "$Id: lzw.c,v 0.8 1993/04/25 08:09:58 jloup Exp $";
        -: 4123:#endif
        -: 4124:*/
        -: 4125:
        -: 4126:static int msg_done = 0;
        -: 4127:
        -: 4128:/* Compress in to out with lzw method. */
function lzw called 0 returned 0% blocks executed 0%
    #####: 4129:int lzw(in, out)
        -: 4130:    int in, out;
        -: 4131:{
        -: 4132:#ifndef FAULTY_F_KP_7
    #####: 4133:    if (msg_done) return ERROR;
branch  0 never executed
branch  1 never executed
        -: 4134:#endif
    #####: 4135:    if (!msg_done) msg_done = 1;
branch  0 never executed
branch  1 never executed
    #####: 4136:    fprintf(stderr,"output in compress .Z format not supported\n");
call    0 never executed
    #####: 4137:    in++, out++; /* avoid warnings on unused variables */
    #####: 4138:    exit_code = ERROR;
    #####: 4139:    return ERROR;
        -: 4140:}
        -: 4141:/* trees.c -- output deflated data using Huffman coding
        -: 4142: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 4143: * This is free software; you can redistribute it and/or modify it under the
        -: 4144: * terms of the GNU General Public License, see the file COPYING.
        -: 4145: */
        -: 4146:
        -: 4147:/*
        -: 4148: *  PURPOSE
        -: 4149: *
        -: 4150: *      Encode various sets of source values using variable-length
        -: 4151: *      binary code trees.
        -: 4152: *
        -: 4153: *  DISCUSSION
        -: 4154: *
        -: 4155: *      The PKZIP "deflation" process uses several Huffman trees. The more
        -: 4156: *      common source values are represented by shorter bit sequences.
        -: 4157: *
        -: 4158: *      Each code tree is stored in the ZIP file in a compressed form
        -: 4159: *      which is itself a Huffman encoding of the lengths of
        -: 4160: *      all the code strings (in ascending order by source values).
        -: 4161: *      The actual code strings are reconstructed from the lengths in
        -: 4162: *      the UNZIP process, as described in the "application note"
        -: 4163: *      (APPNOTE.TXT) distributed as part of PKWARE's PKZIP program.
        -: 4164: *
        -: 4165: *  REFERENCES
        -: 4166: *
        -: 4167: *      Lynch, Thomas J.
        -: 4168: *          Data Compression:  Techniques and Applications, pp. 53-55.
        -: 4169: *          Lifetime Learning Publications, 1985.  ISBN 0-534-03418-7.
        -: 4170: *
        -: 4171: *      Storer, James A.
        -: 4172: *          Data Compression:  Methods and Theory, pp. 49-50.
        -: 4173: *          Computer Science Press, 1988.  ISBN 0-7167-8156-5.
        -: 4174: *
        -: 4175: *      Sedgewick, R.
        -: 4176: *          Algorithms, p290.
        -: 4177: *          Addison-Wesley, 1983. ISBN 0-201-06672-6.
        -: 4178: *
        -: 4179: *  INTERFACE
        -: 4180: *
        -: 4181: *      void ct_init (ush *attr, int *methodp)
        -: 4182: *          Allocate the match buffer, initialize the various tables and save
        -: 4183: *          the location of the internal file attribute (ascii/binary) and
        -: 4184: *          method (DEFLATE/STORE)
        -: 4185: *
        -: 4186: *      void ct_tally (int dist, int lc);
        -: 4187: *          Save the match info and tally the frequency counts.
        -: 4188: *
        -: 4189: *      long flush_block (char *buf, ulg stored_len, int eof)
        -: 4190: *          Determine the best encoding for the current block: dynamic trees,
        -: 4191: *          static trees or store, and output the encoded block to the zip
        -: 4192: *          file. Returns the total compressed length for the file so far.
        -: 4193: *
        -: 4194: */
        -: 4195:
        -: 4196:/*
        -: 4197:#ifndef lint
        -: 4198:static char rcsid[] = "$Id: trees.c,v 0.11 1993/03/26 14:55:43 jloup Exp $";
        -: 4199:#endif
        -: 4200:*/
        -: 4201:
        -: 4202:/* ===========================================================================
        -: 4203: * Constants
        -: 4204: */
        -: 4205:
        -: 4206:#define MAX_BITS 15
        -: 4207:/* All codes must not exceed MAX_BITS bits */
        -: 4208:
        -: 4209:#define MAX_BL_BITS 7
        -: 4210:/* Bit length codes must not exceed MAX_BL_BITS bits */
        -: 4211:
        -: 4212:#define LENGTH_CODES 29
        -: 4213:/* number of length codes, not counting the special END_BLOCK code */
        -: 4214:
        -: 4215:#define LITERALS  256
        -: 4216:/* number of literal bytes 0..255 */
        -: 4217:
        -: 4218:#define END_BLOCK 256
        -: 4219:/* end of block literal code */
        -: 4220:
        -: 4221:#define L_CODES (LITERALS+1+LENGTH_CODES)
        -: 4222:/* number of Literal or Length codes, including the END_BLOCK code */
        -: 4223:
        -: 4224:#define D_CODES   30
        -: 4225:/* number of distance codes */
        -: 4226:
        -: 4227:#define BL_CODES  19
        -: 4228:/* number of codes used to transfer the bit lengths */
        -: 4229:
        -: 4230:
        -: 4231:local int near extra_lbits[LENGTH_CODES] /* extra bits for each length code */
        -: 4232:   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
        -: 4233:
        -: 4234:local int near extra_dbits[D_CODES] /* extra bits for each distance code */
        -: 4235:   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
        -: 4236:
        -: 4237:local int near extra_blbits[BL_CODES]/* extra bits for each bit length code */
        -: 4238:   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
        -: 4239:
        -: 4240:#define STORED_BLOCK 0
        -: 4241:#define STATIC_TREES 1
        -: 4242:#define DYN_TREES    2
        -: 4243:/* The three kinds of block type */
        -: 4244:
        -: 4245:#ifndef LIT_BUFSIZE
        -: 4246:#  ifdef SMALL_MEM
        -: 4247:#    define LIT_BUFSIZE  0x2000
        -: 4248:#  else
        -: 4249:#  ifdef MEDIUM_MEM
        -: 4250:#    define LIT_BUFSIZE  0x4000
        -: 4251:#  else
        -: 4252:#    define LIT_BUFSIZE  0x8000
        -: 4253:#  endif
        -: 4254:#  endif
        -: 4255:#endif
        -: 4256:#ifndef DIST_BUFSIZE
        -: 4257:#  define DIST_BUFSIZE  LIT_BUFSIZE
        -: 4258:#endif
        -: 4259:/* Sizes of match buffers for literals/lengths and distances.  There are
        -: 4260: * 4 reasons for limiting LIT_BUFSIZE to 64K:
        -: 4261: *   - frequencies can be kept in 16 bit counters
        -: 4262: *   - if compression is not successful for the first block, all input data is
        -: 4263: *     still in the window so we can still emit a stored block even when input
        -: 4264: *     comes from standard input.  (This can also be done for all blocks if
        -: 4265: *     LIT_BUFSIZE is not greater than 32K.)
        -: 4266: *   - if compression is not successful for a file smaller than 64K, we can
        -: 4267: *     even emit a stored file instead of a stored block (saving 5 bytes).
        -: 4268: *   - creating new Huffman trees less frequently may not provide fast
        -: 4269: *     adaptation to changes in the input data statistics. (Take for
        -: 4270: *     example a binary file with poorly compressible code followed by
        -: 4271: *     a highly compressible string table.) Smaller buffer sizes give
        -: 4272: *     fast adaptation but have of course the overhead of transmitting trees
        -: 4273: *     more frequently.
        -: 4274: *   - I can't count above 4
        -: 4275: * The current code is general and allows DIST_BUFSIZE < LIT_BUFSIZE (to save
        -: 4276: * memory at the expense of compression). Some optimizations would be possible
        -: 4277: * if we rely on DIST_BUFSIZE == LIT_BUFSIZE.
        -: 4278: */
        -: 4279:#if LIT_BUFSIZE > INBUFSIZ
        -: 4280:    error cannot overlay l_buf and inbuf
        -: 4281:#endif
        -: 4282:
        -: 4283:#define REP_3_6      16
        -: 4284:/* repeat previous bit length 3-6 times (2 bits of repeat count) */
        -: 4285:
        -: 4286:#define REPZ_3_10    17
        -: 4287:/* repeat a zero length 3-10 times  (3 bits of repeat count) */
        -: 4288:
        -: 4289:#define REPZ_11_138  18
        -: 4290:/* repeat a zero length 11-138 times  (7 bits of repeat count) */
        -: 4291:
        -: 4292:/* ===========================================================================
        -: 4293: * Local data
        -: 4294: */
        -: 4295:
        -: 4296:/* Data structure describing a single value and its code string. */
        -: 4297:typedef struct ct_data {
        -: 4298:    union {
        -: 4299:        ush  freq;       /* frequency count */
        -: 4300:        ush  code;       /* bit string */
        -: 4301:    } fc;
        -: 4302:    union {
        -: 4303:        ush  dad;        /* father node in Huffman tree */
        -: 4304:        ush  len;        /* length of bit string */
        -: 4305:    } dl;
        -: 4306:} ct_data;
        -: 4307:
        -: 4308:#define Freq fc.freq
        -: 4309:#define Code fc.code
        -: 4310:#define Dad  dl.dad
        -: 4311:#define Len  dl.len
        -: 4312:
        -: 4313:#define HEAP_SIZE (2*L_CODES+1)
        -: 4314:/* maximum heap size */
        -: 4315:
        -: 4316:local ct_data near dyn_ltree[HEAP_SIZE];   /* literal and length tree */
        -: 4317:local ct_data near dyn_dtree[2*D_CODES+1]; /* distance tree */
        -: 4318:
        -: 4319:local ct_data near static_ltree[L_CODES+2];
        -: 4320:/* The static literal tree. Since the bit lengths are imposed, there is no
        -: 4321: * need for the L_CODES extra codes used during heap construction. However
        -: 4322: * The codes 286 and 287 are needed to build a canonical tree (see ct_init
        -: 4323: * below).
        -: 4324: */
        -: 4325:
        -: 4326:local ct_data near static_dtree[D_CODES];
        -: 4327:/* The static distance tree. (Actually a trivial tree since all codes use
        -: 4328: * 5 bits.)
        -: 4329: */
        -: 4330:
        -: 4331:local ct_data near bl_tree[2*BL_CODES+1];
        -: 4332:/* Huffman tree for the bit lengths */
        -: 4333:
        -: 4334:typedef struct tree_desc {
        -: 4335:    ct_data near *dyn_tree;      /* the dynamic tree */
        -: 4336:    ct_data near *static_tree;   /* corresponding static tree or NULL */
        -: 4337:    int     near *extra_bits;    /* extra bits for each code or NULL */
        -: 4338:    int     extra_base;          /* base index for extra_bits */
        -: 4339:    int     elems;               /* max number of elements in the tree */
        -: 4340:    int     max_length;          /* max bit length for the codes */
        -: 4341:    int     max_code;            /* largest code with non zero frequency */
        -: 4342:} tree_desc;
        -: 4343:
        -: 4344:local tree_desc near l_desc =
        -: 4345:{dyn_ltree, static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS, 0};
        -: 4346:
        -: 4347:local tree_desc near d_desc =
        -: 4348:{dyn_dtree, static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS, 0};
        -: 4349:
        -: 4350:local tree_desc near bl_desc =
        -: 4351:{bl_tree, (ct_data near *)0, extra_blbits, 0,      BL_CODES, MAX_BL_BITS, 0};
        -: 4352:
        -: 4353:
        -: 4354:local ush near bl_count[MAX_BITS+1];
        -: 4355:/* number of codes at each bit length for an optimal tree */
        -: 4356:
        -: 4357:local uch near bl_order[BL_CODES]
        -: 4358:   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
        -: 4359:/* The lengths of the bit length codes are sent in order of decreasing
        -: 4360: * probability, to avoid transmitting the lengths for unused bit length codes.
        -: 4361: */
        -: 4362:
        -: 4363:local int near heap[2*L_CODES+1]; /* heap used to build the Huffman trees */
        -: 4364:local int heap_len;               /* number of elements in the heap */
        -: 4365:local int heap_max;               /* element of largest frequency */
        -: 4366:/* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
        -: 4367: * The same heap array is used to build all trees.
        -: 4368: */
        -: 4369:
        -: 4370:local uch near depth[2*L_CODES+1];
        -: 4371:/* Depth of each subtree used as tie breaker for trees of equal frequency */
        -: 4372:
        -: 4373:local uch length_code[MAX_MATCH-MIN_MATCH+1];
        -: 4374:/* length code for each normalized match length (0 == MIN_MATCH) */
        -: 4375:
        -: 4376:local uch dist_code[512];
        -: 4377:/* distance codes. The first 256 values correspond to the distances
        -: 4378: * 3 .. 258, the last 256 values correspond to the top 8 bits of
        -: 4379: * the 15 bit distances.
        -: 4380: */
        -: 4381:
        -: 4382:local int near base_length[LENGTH_CODES];
        -: 4383:/* First normalized length for each code (0 = MIN_MATCH) */
        -: 4384:
        -: 4385:local int near base_dist[D_CODES];
        -: 4386:/* First normalized distance for each code (0 = distance of 1) */
        -: 4387:
        -: 4388:#define l_buf inbuf
        -: 4389:/* DECLARE(uch, l_buf, LIT_BUFSIZE);  buffer for literals or lengths */
        -: 4390:
        -: 4391:/* DECLARE(ush, d_buf, DIST_BUFSIZE); buffer for distances */
        -: 4392:
        -: 4393:local uch near flag_buf[(LIT_BUFSIZE/8)];
        -: 4394:/* flag_buf is a bit array distinguishing literals from lengths in
        -: 4395: * l_buf, thus indicating the presence or absence of a distance.
        -: 4396: */
        -: 4397:
        -: 4398:local unsigned last_lit;    /* running index in l_buf */
        -: 4399:local unsigned last_dist;   /* running index in d_buf */
        -: 4400:local unsigned last_flags;  /* running index in flag_buf */
        -: 4401:local uch flags;            /* current flags not yet saved in flag_buf */
        -: 4402:local uch flag_bit;         /* current bit used in flags */
        -: 4403:/* bits are filled in flags starting at bit 0 (least significant).
        -: 4404: * Note: these flags are overkill in the current code since we don't
        -: 4405: * take advantage of DIST_BUFSIZE == LIT_BUFSIZE.
        -: 4406: */
        -: 4407:
        -: 4408:local ulg opt_len;        /* bit length of current block with optimal trees */
        -: 4409:local ulg static_len;     /* bit length of current block with static trees */
        -: 4410:
        -: 4411:local ulg compressed_len; /* total bit length of compressed file */
        -: 4412:
        -: 4413:local ulg input_len;      /* total byte length of input file */
        -: 4414:/* input_len is for debugging only since we can get it by other means. */
        -: 4415:
        -: 4416:ush *file_type;        /* pointer to UNKNOWN, BINARY or ASCII */
        -: 4417:int *file_method;      /* pointer to DEFLATE or STORE */
        -: 4418:
        -: 4419:#ifdef DEBUG
        -: 4420:extern ulg bits_sent;  /* bit length of the compressed data */
        -: 4421:extern long isize;     /* byte length of input file */
        -: 4422:#endif
        -: 4423:
        -: 4424:extern long block_start;       /* window offset of current block */
        -: 4425:extern unsigned near strstart; /* window offset of current string */
        -: 4426:
        -: 4427:/* ===========================================================================
        -: 4428: * Local (static) routines in this file.
        -: 4429: */
        -: 4430:
        -: 4431:local void init_block     OF((void));
        -: 4432:local void pqdownheap     OF((ct_data near *tree, int k));
        -: 4433:local void gen_bitlen     OF((tree_desc near *desc));
        -: 4434:local void gen_codes      OF((ct_data near *tree, int max_code));
        -: 4435:local void build_tree     OF((tree_desc near *desc));
        -: 4436:local void scan_tree      OF((ct_data near *tree, int max_code));
        -: 4437:local void send_tree      OF((ct_data near *tree, int max_code));
        -: 4438:local int  build_bl_tree  OF((void));
        -: 4439:local void send_all_trees OF((int lcodes, int dcodes, int blcodes));
        -: 4440:local void compress_block OF((ct_data near *ltree, ct_data near *dtree));
        -: 4441:local void set_file_type  OF((void));
        -: 4442:
        -: 4443:
        -: 4444:#ifndef DEBUG
        -: 4445:#  define send_code(c, tree) send_bits(tree[c].Code, tree[c].Len)
        -: 4446:   /* Send a code of the given tree. c and tree must not have side effects */
        -: 4447:
        -: 4448:#else /* DEBUG */
        -: 4449:#  define send_code(c, tree) \
        -: 4450:     { if (verbose>1) fprintf(stderr,"\ncd %3d ",(c)); \
        -: 4451:       send_bits(tree[c].Code, tree[c].Len); }
        -: 4452:#endif
        -: 4453:
        -: 4454:#define d_code(dist) \
        -: 4455:   ((dist) < 256 ? dist_code[dist] : dist_code[256+((dist)>>7)])
        -: 4456:/* Mapping from a distance to a distance code. dist is the distance - 1 and
        -: 4457: * must not have side effects. dist_code[256] and dist_code[257] are never
        -: 4458: * used.
        -: 4459: */
        -: 4460:
        -: 4461:#define MAX(a,b) (a >= b ? a : b)
        -: 4462:/* the arguments must not have side effects */
        -: 4463:
        -: 4464:/* ===========================================================================
        -: 4465: * Allocate the match buffer, initialize the various tables and save the
        -: 4466: * location of the internal file attribute (ascii/binary) and method
        -: 4467: * (DEFLATE/STORE).
        -: 4468: */
function ct_init called 175 returned 100% blocks executed 98%
      175: 4469:void ct_init(attr, methodp)
        -: 4470:    ush  *attr;   /* pointer to internal file attribute */
        -: 4471:    int  *methodp; /* pointer to compression method */
        -: 4472:{
        -: 4473:    int n;        /* iterates over tree elements */
        -: 4474:    int bits;     /* bit counter */
        -: 4475:    int length;   /* length value */
        -: 4476:    int code;     /* code value */
        -: 4477:    int dist;     /* distance index */
        -: 4478:
      175: 4479:    file_type = attr;
      175: 4480:    file_method = methodp;
      175: 4481:    compressed_len = input_len = 0L;
        -: 4482:        
     175*: 4483:    if (static_dtree[0].Len != 0) return; /* ct_init already called */
branch  0 taken 0 (fallthrough)
branch  1 taken 175
        -: 4484:
        -: 4485:    /* Initialize the mapping length (0..255) -> length code (0..28) */
      175: 4486:    length = 0;
     5075: 4487:    for (code = 0; code < LENGTH_CODES-1; code++) {
branch  0 taken 4900
branch  1 taken 175 (fallthrough)
     4900: 4488:        base_length[code] = length;
    49700: 4489:        for (n = 0; n < (1<<extra_lbits[code]); n++) {
branch  0 taken 44800
branch  1 taken 4900 (fallthrough)
    44800: 4490:            length_code[length++] = (uch)code;
        -: 4491:        }
        -: 4492:    }
        -: 4493:    Assert (length == 256, "ct_init: length != 256");
        -: 4494:    /* Note that the length 255 (match length 258) can be represented
        -: 4495:     * in two different ways: code 284 + 5 bits or code 285, so we
        -: 4496:     * overwrite length_code[255] to use the best encoding:
        -: 4497:     */
      175: 4498:    length_code[length-1] = (uch)code;
        -: 4499:
        -: 4500:    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
      175: 4501:    dist = 0;
     2975: 4502:    for (code = 0 ; code < 16; code++) {
branch  0 taken 2800
branch  1 taken 175 (fallthrough)
     2800: 4503:        base_dist[code] = dist;
    47600: 4504:        for (n = 0; n < (1<<extra_dbits[code]); n++) {
branch  0 taken 44800
branch  1 taken 2800 (fallthrough)
    44800: 4505:            dist_code[dist++] = (uch)code;
        -: 4506:        }
        -: 4507:    }
        -: 4508:    Assert (dist == 256, "ct_init: dist != 256");
      175: 4509:    dist >>= 7; /* from now on, all distances are divided by 128 */
     2625: 4510:    for ( ; code < D_CODES; code++) {
branch  0 taken 2450
branch  1 taken 175 (fallthrough)
     2450: 4511:        base_dist[code] = dist << 7;
    46900: 4512:        for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
branch  0 taken 44450
branch  1 taken 2450 (fallthrough)
    44450: 4513:            dist_code[256 + dist++] = (uch)code;
        -: 4514:        }
        -: 4515:    }
        -: 4516:    Assert (dist == 256, "ct_init: 256+dist != 512");
        -: 4517:
        -: 4518:    /* Construct the codes of the static literal tree */
     2975: 4519:    for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
branch  0 taken 2800
branch  1 taken 175 (fallthrough)
      175: 4520:    n = 0;
    25375: 4521:    while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
branch  0 taken 25200
branch  1 taken 175 (fallthrough)
    19775: 4522:    while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
branch  0 taken 19600
branch  1 taken 175 (fallthrough)
     4375: 4523:    while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
branch  0 taken 4200
branch  1 taken 175 (fallthrough)
     1575: 4524:    while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
branch  0 taken 1400
branch  1 taken 175 (fallthrough)
        -: 4525:    /* Codes 286 and 287 do not exist, but we must include them in the
        -: 4526:     * tree construction to get a canonical Huffman tree (longest code
        -: 4527:     * all ones)
        -: 4528:     */
      175: 4529:    gen_codes((ct_data near *)static_ltree, L_CODES+1);
call    0 returned 175
        -: 4530:
        -: 4531:    /* The static distance tree is trivial: */
     5425: 4532:    for (n = 0; n < D_CODES; n++) {
branch  0 taken 5250
branch  1 taken 175 (fallthrough)
     5250: 4533:        static_dtree[n].Len = 5;
     5250: 4534:        static_dtree[n].Code = bi_reverse(n, 5);
call    0 returned 5250
        -: 4535:    }
        -: 4536:
        -: 4537:    /* Initialize the first block of the first file: */
      175: 4538:    init_block();
call    0 returned 175
        -: 4539:}
        -: 4540:
        -: 4541:/* ===========================================================================
        -: 4542: * Initialize a new block.
        -: 4543: */
function init_block called 370 returned 100% blocks executed 100%
      370: 4544:local void init_block()
        -: 4545:{
        -: 4546:    int n; /* iterates over tree elements */
        -: 4547:
        -: 4548:    /* Initialize the trees. */
   106190: 4549:    for (n = 0; n < L_CODES;  n++) dyn_ltree[n].Freq = 0;
branch  0 taken 105820
branch  1 taken 370 (fallthrough)
    11470: 4550:    for (n = 0; n < D_CODES;  n++) dyn_dtree[n].Freq = 0;
branch  0 taken 11100
branch  1 taken 370 (fallthrough)
     7400: 4551:    for (n = 0; n < BL_CODES; n++) bl_tree[n].Freq = 0;
branch  0 taken 7030
branch  1 taken 370 (fallthrough)
        -: 4552:
      370: 4553:    dyn_ltree[END_BLOCK].Freq = 1;
      370: 4554:    opt_len = static_len = 0L;
      370: 4555:    last_lit = last_dist = last_flags = 0;
      370: 4556:    flags = 0; flag_bit = 1;
      370: 4557:}
        -: 4558:
        -: 4559:#define SMALLEST 1
        -: 4560:/* Index within the heap array of least frequent node in the Huffman tree */
        -: 4561:
        -: 4562:
        -: 4563:/* ===========================================================================
        -: 4564: * Remove the smallest element from the heap and recreate the heap with
        -: 4565: * one less element. Updates heap and heap_len.
        -: 4566: */
        -: 4567:#define pqremove(tree, top) \
        -: 4568:{\
        -: 4569:    top = heap[SMALLEST]; \
        -: 4570:    heap[SMALLEST] = heap[heap_len--]; \
        -: 4571:    pqdownheap(tree, SMALLEST); \
        -: 4572:}
        -: 4573:
        -: 4574:/* ===========================================================================
        -: 4575: * Compares to subtrees, using the tree depth as tie breaker when
        -: 4576: * the subtrees have equal frequency. This minimizes the worst case length.
        -: 4577: */
        -: 4578:#define smaller(tree, n, m) \
        -: 4579:   (tree[n].Freq < tree[m].Freq || \
        -: 4580:   (tree[n].Freq == tree[m].Freq && depth[n] <= depth[m]))
        -: 4581:
        -: 4582:/* ===========================================================================
        -: 4583: * Restore the heap property by moving down the tree starting at node k,
        -: 4584: * exchanging a node with the smallest of its two sons if necessary, stopping
        -: 4585: * when the heap property is re-established (each father smaller than its
        -: 4586: * two sons).
        -: 4587: */
function pqdownheap called 71964 returned 100% blocks executed 100%
    71964: 4588:local void pqdownheap(tree, k)
        -: 4589:    ct_data near *tree;  /* the tree to restore */
        -: 4590:    int k;               /* node to move down */
        -: 4591:{
    71964: 4592:    int v = heap[k];
    71964: 4593:    int j = k << 1;  /* left son of k */
   296245: 4594:    while (j <= heap_len) {
branch  0 taken 249053
branch  1 taken 47192 (fallthrough)
        -: 4595:        /* Set j to the smallest of the two sons: */
   249053: 4596:        if (j < heap_len && smaller(tree, heap[j+1], heap[j])) j++;
branch  0 taken 243856 (fallthrough)
branch  1 taken 5197
branch  2 taken 146251 (fallthrough)
branch  3 taken 97605
branch  4 taken 32806 (fallthrough)
branch  5 taken 113445
branch  6 taken 22726 (fallthrough)
branch  7 taken 10080
        -: 4597:
        -: 4598:        /* Exit if v is smaller than both sons */
   249053: 4599:        if (smaller(tree, v, heap[j])) break;
branch  0 taken 226242 (fallthrough)
branch  1 taken 22811
branch  2 taken 4902 (fallthrough)
branch  3 taken 221340
branch  4 taken 2941 (fallthrough)
branch  5 taken 1961
        -: 4600:
        -: 4601:        /* Exchange v with the smallest son */
   224281: 4602:        heap[k] = heap[j];  k = j;
        -: 4603:
        -: 4604:        /* And continue down the tree, setting j to the left son of k */
   224281: 4605:        j <<= 1;
        -: 4606:    }
    71964: 4607:    heap[k] = v;
    71964: 4608:}
        -: 4609:
        -: 4610:/* ===========================================================================
        -: 4611: * Compute the optimal bit lengths for a tree and update the total bit length
        -: 4612: * for the current block.
        -: 4613: * IN assertion: the fields freq and dad are set, heap[heap_max] and
        -: 4614: *    above are the tree nodes sorted by increasing frequency.
        -: 4615: * OUT assertions: the field len is set to the optimal bit length, the
        -: 4616: *     array bl_count contains the frequencies for each bit length.
        -: 4617: *     The length opt_len is updated; static_len is also updated if stree is
        -: 4618: *     not null.
        -: 4619: */
function gen_bitlen called 585 returned 100% blocks executed 97%
      585: 4620:local void gen_bitlen(desc)
        -: 4621:    tree_desc near *desc; /* the tree descriptor */
        -: 4622:{
      585: 4623:    ct_data near *tree  = desc->dyn_tree;
      585: 4624:    int near *extra     = desc->extra_bits;
      585: 4625:    int base            = desc->extra_base;
      585: 4626:    int max_code        = desc->max_code;
      585: 4627:    int max_length      = desc->max_length;
      585: 4628:    ct_data near *stree = desc->static_tree;
        -: 4629:    int h;              /* heap index */
        -: 4630:    int n, m;           /* iterate over the tree elements */
        -: 4631:    int bits;           /* bit length */
        -: 4632:    int xbits;          /* extra bits */
        -: 4633:    ush f;              /* frequency */
      585: 4634:    int overflow = 0;   /* number of elements with bit length too large */
        -: 4635:
     9945: 4636:    for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
branch  0 taken 9360
branch  1 taken 585 (fallthrough)
        -: 4637:
        -: 4638:    /* In a first pass, compute the optimal bit lengths (which may
        -: 4639:     * overflow in the case of the bit length tree).
        -: 4640:     */
      585: 4641:    tree[heap[heap_max]].Len = 0; /* root of the heap */
        -: 4642:
    58037: 4643:    for (h = heap_max+1; h < HEAP_SIZE; h++) {
branch  0 taken 57452
branch  1 taken 585 (fallthrough)
    57452: 4644:        n = heap[h];
    57452: 4645:        bits = tree[tree[n].Dad].Len + 1;
    57452: 4646:        if (bits > max_length) bits = max_length, overflow++;
branch  0 taken 6 (fallthrough)
branch  1 taken 57446
    57452: 4647:        tree[n].Len = (ush)bits;
        -: 4648:        /* We overwrite tree[n].Dad which is no longer needed */
        -: 4649:
    57452: 4650:        if (n > max_code) continue; /* not a leaf node */
branch  0 taken 28141 (fallthrough)
branch  1 taken 29311
        -: 4651:
    29311: 4652:        bl_count[bits]++;
    29311: 4653:        xbits = 0;
    29311: 4654:        if (n >= base) xbits = extra[n-base];
branch  0 taken 11444 (fallthrough)
branch  1 taken 17867
    29311: 4655:        f = tree[n].Freq;
    29311: 4656:        opt_len += (ulg)f * (bits + xbits);
    29311: 4657:        if (stree) static_len += (ulg)f * (stree[n].Len + xbits);
branch  0 taken 26680 (fallthrough)
branch  1 taken 2631
        -: 4658:    }
      585: 4659:    if (overflow == 0) return;
branch  0 taken 582 (fallthrough)
branch  1 taken 3
        -: 4660:
        -: 4661:    Trace((stderr,"\nbit length overflow\n"));
        -: 4662:    /* This happens for example on obj2 and pic of the Calgary corpus */
        -: 4663:
        -: 4664:    /* Find the first bit length which could increase: */
        -: 4665:    do {
        3: 4666:        bits = max_length-1;
       3*: 4667:        while (bl_count[bits] == 0) bits--;
branch  0 taken 0
branch  1 taken 3 (fallthrough)
        3: 4668:        bl_count[bits]--;      /* move one leaf down the tree */
        3: 4669:        bl_count[bits+1] += 2; /* move one overflow item as its brother */
        3: 4670:        bl_count[max_length]--;
        -: 4671:        /* The brother of the overflow item also moves one step up,
        -: 4672:         * but this does not affect bl_count[max_length]
        -: 4673:         */
        3: 4674:        overflow -= 2;
        3: 4675:    } while (overflow > 0);
branch  0 taken 0
branch  1 taken 3 (fallthrough)
        -: 4676:
        -: 4677:    /* Now recompute all bit lengths, scanning in increasing frequency.
        -: 4678:     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
        -: 4679:     * lengths instead of fixing only the wrong ones. This idea is taken
        -: 4680:     * from 'ar' written by Haruhiko Okumura.)
        -: 4681:     */
       24: 4682:    for (bits = max_length; bits != 0; bits--) {
branch  0 taken 21
branch  1 taken 3 (fallthrough)
       21: 4683:        n = bl_count[bits];
       84: 4684:        while (n != 0) {
branch  0 taken 63
branch  1 taken 21 (fallthrough)
       63: 4685:            m = heap[--h];
       63: 4686:            if (m > max_code) continue;
branch  0 taken 24 (fallthrough)
branch  1 taken 39
       39: 4687:            if (tree[m].Len != (unsigned) bits) {
branch  0 taken 3 (fallthrough)
branch  1 taken 36
        -: 4688:                Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        3: 4689:                opt_len += ((long)bits-(long)tree[m].Len)*(long)tree[m].Freq;
        3: 4690:                tree[m].Len = (ush)bits;
        -: 4691:            }
       39: 4692:            n--;
        -: 4693:        }
        -: 4694:    }
        -: 4695:}
        -: 4696:
        -: 4697:/* ===========================================================================
        -: 4698: * Generate the codes for a given tree and bit counts (which need not be
        -: 4699: * optimal).
        -: 4700: * IN assertion: the array bl_count contains the bit length statistics for
        -: 4701: * the given tree and the field len is set for all tree elements.
        -: 4702: * OUT assertion: the field code is set for all tree elements of non
        -: 4703: *     zero code length.
        -: 4704: */
function gen_codes called 760 returned 100% blocks executed 100%
      760: 4705:local void gen_codes (tree, max_code)
        -: 4706:    ct_data near *tree;        /* the tree to decorate */
        -: 4707:    int max_code;              /* largest code with non zero frequency */
        -: 4708:{
        -: 4709:    ush next_code[MAX_BITS+1]; /* next code value for each bit length */
      760: 4710:    ush code = 0;              /* running code value */
        -: 4711:    int bits;                  /* bit index */
        -: 4712:    int n;                     /* code index */
        -: 4713:
        -: 4714:    /* The distribution counts are first used to generate the code values
        -: 4715:     * without bit reversal.
        -: 4716:     */
    12160: 4717:    for (bits = 1; bits <= MAX_BITS; bits++) {
branch  0 taken 11400
branch  1 taken 760 (fallthrough)
    11400: 4718:        next_code[bits] = code = (code + bl_count[bits-1]) << 1;
        -: 4719:    }
        -: 4720:    /* Check that the bit counts in bl_count are consistent. The last code
        -: 4721:     * must be all ones.
        -: 4722:     */
        -: 4723:    Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
        -: 4724:            "inconsistent bit counts");
        -: 4725:    Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
        -: 4726:
   115890: 4727:    for (n = 0;  n <= max_code; n++) {
branch  0 taken 115130
branch  1 taken 760 (fallthrough)
   115130: 4728:        int len = tree[n].Len;
   115130: 4729:        if (len == 0) continue;
branch  0 taken 35419 (fallthrough)
branch  1 taken 79711
        -: 4730:        /* Now reverse the bits */
    79711: 4731:        tree[n].Code = bi_reverse(next_code[len]++, len);
call    0 returned 79711
        -: 4732:
        -: 4733:        Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
        -: 4734:             n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
        -: 4735:    }
      760: 4736:}
        -: 4737:
        -: 4738:/* ===========================================================================
        -: 4739: * Construct one Huffman tree and assigns the code bit strings and lengths.
        -: 4740: * Update the total bit length for the current block.
        -: 4741: * IN assertion: the field freq is set for all tree elements.
        -: 4742: * OUT assertions: the fields len and code are set to the optimal bit length
        -: 4743: *     and corresponding code. The length opt_len is updated; static_len is
        -: 4744: *     also updated if stree is not null. The field max_code is set.
        -: 4745: */
function build_tree called 585 returned 100% blocks executed 100%
      585: 4746:local void build_tree(desc)
        -: 4747:    tree_desc near *desc; /* the tree descriptor */
        -: 4748:{
      585: 4749:    ct_data near *tree   = desc->dyn_tree;
      585: 4750:    ct_data near *stree  = desc->static_tree;
      585: 4751:    int elems            = desc->elems;
        -: 4752:    int n, m;          /* iterate over heap elements */
      585: 4753:    int max_code = -1; /* largest code with non zero frequency */
      585: 4754:    int node = elems;  /* next internal node of the tree */
        -: 4755:
        -: 4756:    /* Construct the initial heap, with least frequent element in
        -: 4757:     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
        -: 4758:     * heap[0] is not used.
        -: 4759:     */
      585: 4760:    heap_len = 0, heap_max = HEAP_SIZE;
        -: 4761:
    65910: 4762:    for (n = 0; n < elems; n++) {
branch  0 taken 65325
branch  1 taken 585 (fallthrough)
    65325: 4763:        if (tree[n].Freq != 0) {
branch  0 taken 29291 (fallthrough)
branch  1 taken 36034
    29291: 4764:            heap[++heap_len] = max_code = n;
    29291: 4765:            depth[n] = 0;
        -: 4766:        } else {
    36034: 4767:            tree[n].Len = 0;
        -: 4768:        }
        -: 4769:    }
        -: 4770:
        -: 4771:    /* The pkzip format requires that at least one distance code exists,
        -: 4772:     * and that at least one bit should be sent even if there is only one
        -: 4773:     * possible code. So to avoid special checks later on we force at least
        -: 4774:     * two codes of non zero frequency.
        -: 4775:     */
      605: 4776:    while (heap_len < 2) {
branch  0 taken 20
branch  1 taken 585 (fallthrough)
       20: 4777:        int new = heap[++heap_len] = (max_code < 2 ? ++max_code : 0);
branch  0 taken 18 (fallthrough)
branch  1 taken 2
       20: 4778:        tree[new].Freq = 1;
       20: 4779:        depth[new] = 0;
       20: 4780:        opt_len--; if (stree) static_len -= stree[new].Len;
branch  0 taken 20 (fallthrough)
branch  1 taken 0
        -: 4781:        /* new is 0 or 1 so it does not have extra bits */
        -: 4782:    }
      585: 4783:    desc->max_code = max_code;
        -: 4784:
        -: 4785:    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
        -: 4786:     * establish sub-heaps of increasing lengths:
        -: 4787:     */
    15097: 4788:    for (n = heap_len/2; n >= 1; n--) pqdownheap(tree, n);
call    0 returned 14512
branch  1 taken 14512
branch  2 taken 585 (fallthrough)
        -: 4789:
        -: 4790:    /* Construct the Huffman tree by repeatedly combining the least two
        -: 4791:     * frequent nodes.
        -: 4792:     */
        -: 4793:    do {
    28726: 4794:        pqremove(tree, n);   /* n = node of least frequency */
call    0 returned 28726
    28726: 4795:        m = heap[SMALLEST];  /* m = node of next least frequency */
        -: 4796:
    28726: 4797:        heap[--heap_max] = n; /* keep the nodes sorted by frequency */
    28726: 4798:        heap[--heap_max] = m;
        -: 4799:
        -: 4800:        /* Create a new node father of n and m */
    28726: 4801:        tree[node].Freq = tree[n].Freq + tree[m].Freq;
    28726: 4802:        depth[node] = (uch) (MAX(depth[n], depth[m]) + 1);
branch  0 taken 19160 (fallthrough)
branch  1 taken 9566
    28726: 4803:        tree[n].Dad = tree[m].Dad = (ush)node;
        -: 4804:#ifdef DUMP_BL_TREE
        -: 4805:        if (tree == bl_tree) {
        -: 4806:            fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
        -: 4807:                    node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
        -: 4808:        }
        -: 4809:#endif
        -: 4810:        /* and insert the new node in the heap */
    28726: 4811:        heap[SMALLEST] = node++;
    28726: 4812:        pqdownheap(tree, SMALLEST);
call    0 returned 28726
        -: 4813:
    28726: 4814:    } while (heap_len >= 2);
branch  0 taken 28141
branch  1 taken 585 (fallthrough)
        -: 4815:
      585: 4816:    heap[--heap_max] = heap[SMALLEST];
        -: 4817:
        -: 4818:    /* At this point, the fields freq and dad are set. We can now
        -: 4819:     * generate the bit lengths.
        -: 4820:     */
      585: 4821:    gen_bitlen((tree_desc near *)desc);
call    0 returned 585
        -: 4822:
        -: 4823:    /* The field len is now set, we can generate the bit codes */
      585: 4824:    gen_codes ((ct_data near *)tree, max_code);
call    0 returned 585
      585: 4825:}
        -: 4826:
        -: 4827:/* ===========================================================================
        -: 4828: * Scan a literal or distance tree to determine the frequencies of the codes
        -: 4829: * in the bit length tree. Updates opt_len to take into account the repeat
        -: 4830: * counts. (The contribution of the bit length codes will be added later
        -: 4831: * during the construction of bl_tree.)
        -: 4832: */
function scan_tree called 390 returned 100% blocks executed 100%
      390: 4833:local void scan_tree (tree, max_code)
        -: 4834:    ct_data near *tree; /* the tree to be scanned */
        -: 4835:    int max_code;       /* and its largest code of non zero frequency */
        -: 4836:{
        -: 4837:    int n;                     /* iterates over all tree elements */
      390: 4838:    int prevlen = -1;          /* last emitted length */
        -: 4839:    int curlen;                /* length of current code */
      390: 4840:    int nextlen = tree[0].Len; /* length of next code */
      390: 4841:    int count = 0;             /* repeat count of the current code */
      390: 4842:    int max_count = 7;         /* max repeat count */
      390: 4843:    int min_count = 4;         /* min repeat count */
        -: 4844:
      390: 4845:    if (nextlen == 0) max_count = 138, min_count = 3;
branch  0 taken 182 (fallthrough)
branch  1 taken 208
      390: 4846:    tree[max_code+1].Len = (ush)0xffff; /* guard */
        -: 4847:
    61428: 4848:    for (n = 0; n <= max_code; n++) {
branch  0 taken 61038
branch  1 taken 390 (fallthrough)
    61038: 4849:        curlen = nextlen; nextlen = tree[n+1].Len;
    61038: 4850:        if (++count < max_count && curlen == nextlen) {
branch  0 taken 60807 (fallthrough)
branch  1 taken 231
branch  2 taken 40539 (fallthrough)
branch  3 taken 20268
    40539: 4851:            continue;
    20499: 4852:        } else if (count < min_count) {
branch  0 taken 18868 (fallthrough)
branch  1 taken 1631
    18868: 4853:            bl_tree[curlen].Freq += count;
     1631: 4854:        } else if (curlen != 0) {
branch  0 taken 734 (fallthrough)
branch  1 taken 897
      734: 4855:            if (curlen != prevlen) bl_tree[curlen].Freq++;
branch  0 taken 662 (fallthrough)
branch  1 taken 72
      734: 4856:            bl_tree[REP_3_6].Freq++;
      897: 4857:        } else if (count <= 10) {
branch  0 taken 510 (fallthrough)
branch  1 taken 387
      510: 4858:            bl_tree[REPZ_3_10].Freq++;
        -: 4859:        } else {
      387: 4860:            bl_tree[REPZ_11_138].Freq++;
        -: 4861:        }
    20499: 4862:        count = 0; prevlen = curlen;
    20499: 4863:        if (nextlen == 0) {
branch  0 taken 2165 (fallthrough)
branch  1 taken 18334
     2165: 4864:            max_count = 138, min_count = 3;
    18334: 4865:        } else if (curlen == nextlen) {
branch  0 taken 211 (fallthrough)
branch  1 taken 18123
      211: 4866:            max_count = 6, min_count = 3;
        -: 4867:        } else {
    18123: 4868:            max_count = 7, min_count = 4;
        -: 4869:        }
        -: 4870:    }
      390: 4871:}
        -: 4872:
        -: 4873:/* ===========================================================================
        -: 4874: * Send a literal or distance tree in compressed form, using the codes in
        -: 4875: * bl_tree.
        -: 4876: */
function send_tree called 382 returned 100% blocks executed 100%
      382: 4877:local void send_tree (tree, max_code)
        -: 4878:    ct_data near *tree; /* the tree to be scanned */
        -: 4879:    int max_code;       /* and its largest code of non zero frequency */
        -: 4880:{
        -: 4881:    int n;                     /* iterates over all tree elements */
      382: 4882:    int prevlen = -1;          /* last emitted length */
        -: 4883:    int curlen;                /* length of current code */
      382: 4884:    int nextlen = tree[0].Len; /* length of next code */
      382: 4885:    int count = 0;             /* repeat count of the current code */
      382: 4886:    int max_count = 7;         /* max repeat count */
      382: 4887:    int min_count = 4;         /* min repeat count */
        -: 4888:
        -: 4889:    /* tree[max_code+1].Len = -1; */  /* guard already set */
      382: 4890:    if (nextlen == 0) max_count = 138, min_count = 3;
branch  0 taken 182 (fallthrough)
branch  1 taken 200
        -: 4891:
    60334: 4892:    for (n = 0; n <= max_code; n++) {
branch  0 taken 59952
branch  1 taken 382 (fallthrough)
    59952: 4893:        curlen = nextlen; nextlen = tree[n+1].Len;
    59952: 4894:        if (++count < max_count && curlen == nextlen) {
branch  0 taken 59759 (fallthrough)
branch  1 taken 193
branch  2 taken 39528 (fallthrough)
branch  3 taken 20231
    39528: 4895:            continue;
    20424: 4896:        } else if (count < min_count) {
branch  0 taken 18842 (fallthrough)
branch  1 taken 1582
    24421: 4897:            do { send_code(curlen, bl_tree); } while (--count != 0);
call    0 returned 24421
branch  1 taken 5579
branch  2 taken 18842
        -: 4898:
     1582: 4899:        } else if (curlen != 0) {
branch  0 taken 693 (fallthrough)
branch  1 taken 889
      693: 4900:            if (curlen != prevlen) {
branch  0 taken 654 (fallthrough)
branch  1 taken 39
      654: 4901:                send_code(curlen, bl_tree); count--;
call    0 returned 654
        -: 4902:            }
        -: 4903:            Assert(count >= 3 && count <= 6, " 3_6?");
      693: 4904:            send_code(REP_3_6, bl_tree); send_bits(count-3, 2);
call    0 returned 693
call    1 returned 693
        -: 4905:
      889: 4906:        } else if (count <= 10) {
branch  0 taken 510 (fallthrough)
branch  1 taken 379
      510: 4907:            send_code(REPZ_3_10, bl_tree); send_bits(count-3, 3);
call    0 returned 510
call    1 returned 510
        -: 4908:
        -: 4909:        } else {
      379: 4910:            send_code(REPZ_11_138, bl_tree); send_bits(count-11, 7);
call    0 returned 379
call    1 returned 379
        -: 4911:        }
    20424: 4912:        count = 0; prevlen = curlen;
    20424: 4913:        if (nextlen == 0) {
branch  0 taken 2157 (fallthrough)
branch  1 taken 18267
     2157: 4914:            max_count = 138, min_count = 3;
    18267: 4915:        } else if (curlen == nextlen) {
branch  0 taken 177 (fallthrough)
branch  1 taken 18090
      177: 4916:            max_count = 6, min_count = 3;
        -: 4917:        } else {
    18090: 4918:            max_count = 7, min_count = 4;
        -: 4919:        }
        -: 4920:    }
      382: 4921:}
        -: 4922:
        -: 4923:/* ===========================================================================
        -: 4924: * Construct the Huffman tree for the bit lengths and return the index in
        -: 4925: * bl_order of the last bit length code to send.
        -: 4926: */
function build_bl_tree called 195 returned 100% blocks executed 100%
      195: 4927:local int build_bl_tree()
        -: 4928:{
        -: 4929:    int max_blindex;  /* index of last bit length code of non zero freq */
        -: 4930:
        -: 4931:    /* Determine the bit length frequencies for literal and distance trees */
      195: 4932:    scan_tree((ct_data near *)dyn_ltree, l_desc.max_code);
call    0 returned 195
      195: 4933:    scan_tree((ct_data near *)dyn_dtree, d_desc.max_code);
call    0 returned 195
        -: 4934:
        -: 4935:    /* Build the bit length tree: */
      195: 4936:    build_tree((tree_desc near *)(&bl_desc));
call    0 returned 195
        -: 4937:    /* opt_len now includes the length of the tree representations, except
        -: 4938:     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
        -: 4939:     */
        -: 4940:
        -: 4941:    /* Determine the number of bit length codes to send. The pkzip format
        -: 4942:     * requires that at least 4 bit length codes be sent. (appnote.txt says
        -: 4943:     * 3 but the actual value used is 4.)
        -: 4944:     */
      923: 4945:    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
branch  0 taken 923
branch  1 taken 0 (fallthrough)
      923: 4946:        if (bl_tree[bl_order[max_blindex]].Len != 0) break;
branch  0 taken 195 (fallthrough)
branch  1 taken 728
        -: 4947:    }
        -: 4948:    /* Update opt_len to include the bit length tree and counts */
      195: 4949:    opt_len += 3*(max_blindex+1) + 5+5+4;
        -: 4950:    Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld", opt_len, static_len));
        -: 4951:
      195: 4952:    return max_blindex;
        -: 4953:}
        -: 4954:
        -: 4955:/* ===========================================================================
        -: 4956: * Send the header for a block using dynamic Huffman trees: the counts, the
        -: 4957: * lengths of the bit length codes, the literal tree and the distance tree.
        -: 4958: * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
        -: 4959: */
function send_all_trees called 191 returned 100% blocks executed 100%
      191: 4960:local void send_all_trees(lcodes, dcodes, blcodes)
        -: 4961:    int lcodes, dcodes, blcodes; /* number of codes for each tree */
        -: 4962:{
        -: 4963:    int rank;                    /* index in bl_order */
        -: 4964:
        -: 4965:    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
        -: 4966:    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
        -: 4967:            "too many codes");
        -: 4968:    Tracev((stderr, "\nbl counts: "));
      191: 4969:    send_bits(lcodes-257, 5); /* not +255 as stated in appnote.txt */
call    0 returned 191
      191: 4970:    send_bits(dcodes-1,   5);
call    0 returned 191
      191: 4971:    send_bits(blcodes-4,  4); /* not -3 as stated in appnote.txt */
call    0 returned 191
     3096: 4972:    for (rank = 0; rank < blcodes; rank++) {
branch  0 taken 2905
branch  1 taken 191 (fallthrough)
        -: 4973:        Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
     2905: 4974:        send_bits(bl_tree[bl_order[rank]].Len, 3);
call    0 returned 2905
        -: 4975:    }
        -: 4976:    Tracev((stderr, "\nbl tree: sent %ld", bits_sent));
        -: 4977:
      191: 4978:    send_tree((ct_data near *)dyn_ltree, lcodes-1); /* send the literal tree */
call    0 returned 191
        -: 4979:    Tracev((stderr, "\nlit tree: sent %ld", bits_sent));
        -: 4980:
      191: 4981:    send_tree((ct_data near *)dyn_dtree, dcodes-1); /* send the distance tree */
call    0 returned 191
        -: 4982:    Tracev((stderr, "\ndist tree: sent %ld", bits_sent));
      191: 4983:}
        -: 4984:
        -: 4985:/* ===========================================================================
        -: 4986: * Determine the best encoding for the current block: dynamic trees, static
        -: 4987: * trees or store, and output the encoded block to the zip file. This function
        -: 4988: * returns the total compressed length for the file so far.
        -: 4989: */
function flush_block called 195 returned 100% blocks executed 96%
      195: 4990:ulg flush_block(buf, stored_len, eof)
        -: 4991:    char *buf;        /* input block, or NULL if too old */
        -: 4992:    ulg stored_len;   /* length of input block */
        -: 4993:    int eof;          /* true if this is the last block for a file */
        -: 4994:{
        -: 4995:    ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
        -: 4996:    int max_blindex;  /* index of last bit length code of non zero freq */
        -: 4997:
      195: 4998:    flag_buf[last_flags] = flags; /* Save the flags for the last 8 items */
        -: 4999:
        -: 5000:     /* Check if the file is ascii or binary */
     195*: 5001:    if (*file_type == (ush)UNKNOWN) set_file_type();
branch  0 taken 0 (fallthrough)
branch  1 taken 195
call    2 never executed
        -: 5002:
        -: 5003:    /* Construct the literal and distance trees */
      195: 5004:    build_tree((tree_desc near *)(&l_desc));
call    0 returned 195
        -: 5005:    Tracev((stderr, "\nlit data: dyn %ld, stat %ld", opt_len, static_len));
        -: 5006:
      195: 5007:    build_tree((tree_desc near *)(&d_desc));
call    0 returned 195
        -: 5008:    Tracev((stderr, "\ndist data: dyn %ld, stat %ld", opt_len, static_len));
        -: 5009:    /* At this point, opt_len and static_len are the total bit lengths of
        -: 5010:     * the compressed block data, excluding the tree representations.
        -: 5011:     */
        -: 5012:
        -: 5013:    /* Build the bit length tree for the above two trees, and get the index
        -: 5014:     * in bl_order of the last bit length code to send.
        -: 5015:     */
      195: 5016:    max_blindex = build_bl_tree();
call    0 returned 195
        -: 5017:
        -: 5018:    /* Determine the best encoding. Compute first the block length in bytes */
      195: 5019:    opt_lenb = (opt_len+3+7)>>3;
      195: 5020:    static_lenb = (static_len+3+7)>>3;
      195: 5021:    input_len += stored_len; /* for debugging only */
        -: 5022:
        -: 5023:    Trace((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u dist %u ",
        -: 5024:            opt_lenb, opt_len, static_lenb, static_len, stored_len,
        -: 5025:            last_lit, last_dist));
        -: 5026:
      195: 5027:    if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
branch  0 taken 3 (fallthrough)
branch  1 taken 192
        -: 5028:
        -: 5029:    /* If compression failed and this is the first and last block,
        -: 5030:     * and if the zip file can be seeked (to rewrite the local header),
        -: 5031:     * the whole file is transformed into a stored file:
        -: 5032:     */
        -: 5033:#ifdef FORCE_METHOD
        -: 5034:    if (level == 1 && eof && compressed_len == 0L) { /* force stored file */
        -: 5035:#else
        -: 5036:    if (stored_len <= opt_lenb && eof && compressed_len == 0L && seekable()) {
        -: 5037:#endif
        -: 5038:        /* Since LIT_BUFSIZE <= 2*WSIZE, the input data must be there: */
        -: 5039:        if (buf == (char*)0) error ("block vanished");
        -: 5040:
        -: 5041:        copy_block(buf, (unsigned)stored_len, 0); /* without header */
        -: 5042:        compressed_len = stored_len << 3;
        -: 5043:        *file_method = STORED;
        -: 5044:
        -: 5045:#ifdef FORCE_METHOD
        -: 5046:    } else if (level == 2 && buf != (char*)0) { /* force stored block */
        -: 5047:#else
      195: 5048:    } else if (stored_len+4 <= opt_lenb && buf != (char*)0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 194
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 5049:                       /* 4: two words for the lengths */
        -: 5050:#endif
        -: 5051:        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
        -: 5052:         * Otherwise we can't have processed more than WSIZE input bytes since
        -: 5053:         * the last block flush, because compression would have been
        -: 5054:         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
        -: 5055:         * transform a block into a stored block.
        -: 5056:         */
        1: 5057:        send_bits((STORED_BLOCK<<1)+eof, 3);  /* send block type */
call    0 returned 1
        1: 5058:        compressed_len = (compressed_len + 3 + 7) & ~7L;
        1: 5059:        compressed_len += (stored_len + 4) << 3;
        -: 5060:
        1: 5061:        copy_block(buf, (unsigned)stored_len, 1); /* with header */
call    0 returned 1
        -: 5062:
        -: 5063:#ifdef FORCE_METHOD
        -: 5064:    } else if (level == 3) { /* force static trees */
        -: 5065:#else
      194: 5066:    } else if (static_lenb == opt_lenb) {
branch  0 taken 3 (fallthrough)
branch  1 taken 191
        -: 5067:#endif
        3: 5068:        send_bits((STATIC_TREES<<1)+eof, 3);
call    0 returned 3
        3: 5069:        compress_block((ct_data near *)static_ltree, (ct_data near *)static_dtree);
call    0 returned 3
        3: 5070:        compressed_len += 3 + static_len;
        -: 5071:    } else {
      191: 5072:        send_bits((DYN_TREES<<1)+eof, 3);
call    0 returned 191
      191: 5073:        send_all_trees(l_desc.max_code+1, d_desc.max_code+1, max_blindex+1);
call    0 returned 191
      191: 5074:        compress_block((ct_data near *)dyn_ltree, (ct_data near *)dyn_dtree);
call    0 returned 191
      191: 5075:        compressed_len += 3 + opt_len;
        -: 5076:    }
        -: 5077:    Assert (compressed_len == bits_sent, "bad compressed size");
      195: 5078:    init_block();
call    0 returned 195
        -: 5079:
      195: 5080:    if (eof) {
branch  0 taken 175 (fallthrough)
branch  1 taken 20
        -: 5081:        Assert (input_len == isize, "bad input size");
      175: 5082:        bi_windup();
call    0 returned 175
      175: 5083:        compressed_len += 7;  /* align on byte boundary */
        -: 5084:    }
        -: 5085:    Tracev((stderr,"\ncomprlen %lu(%lu) ", compressed_len>>3,
        -: 5086:           compressed_len-7*eof));
        -: 5087:
      195: 5088:    return compressed_len >> 3;
        -: 5089:}
        -: 5090:
        -: 5091:/* ===========================================================================
        -: 5092: * Save the match info and tally the frequency counts. Return true if
        -: 5093: * the current block must be flushed.
        -: 5094: */
function ct_tally called 1794676 returned 100% blocks executed 100%
  1794676: 5095:int ct_tally (dist, lc)
        -: 5096:    int dist;  /* distance of matched string */
        -: 5097:    int lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
        -: 5098:{
  1794676: 5099:    l_buf[last_lit++] = (uch)lc;
  1794676: 5100:    if (dist == 0) {
branch  0 taken 612397 (fallthrough)
branch  1 taken 1182279
        -: 5101:        /* lc is the unmatched char */
   612397: 5102:        dyn_ltree[lc].Freq++;
        -: 5103:    } else {
        -: 5104:        /* Here, lc is the match length - MIN_MATCH */
  1182279: 5105:        dist--;             /* dist = match distance - 1 */
        -: 5106:        Assert((ush)dist < (ush)MAX_DIST &&
        -: 5107:               (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
        -: 5108:               (ush)d_code(dist) < (ush)D_CODES,  "ct_tally: bad match");
        -: 5109:
  1182279: 5110:        dyn_ltree[length_code[lc]+LITERALS+1].Freq++;
  1182279: 5111:        dyn_dtree[d_code(dist)].Freq++;
branch  0 taken 599615 (fallthrough)
branch  1 taken 582664
        -: 5112:
  1182279: 5113:        d_buf[last_dist++] = (ush)dist;
  1182279: 5114:        flags |= flag_bit;
        -: 5115:    }
  1794676: 5116:    flag_bit <<= 1;
        -: 5117:
        -: 5118:    /* Output the flags if they fill a byte: */
  1794676: 5119:    if ((last_lit & 7) == 0) {
branch  0 taken 224266 (fallthrough)
branch  1 taken 1570410
   224266: 5120:        flag_buf[last_flags++] = flags;
   224266: 5121:        flags = 0, flag_bit = 1;
        -: 5122:    }
        -: 5123:    /* Try to guess if it is profitable to stop the current block here */
  1794676: 5124:    if (level > 2 && (last_lit & 0xfff) == 0) {
branch  0 taken 1544017 (fallthrough)
branch  1 taken 250659
branch  2 taken 252 (fallthrough)
branch  3 taken 1543765
        -: 5125:        /* Compute an upper bound for the compressed length */
      252: 5126:        ulg out_length = (ulg)last_lit*8L;
      252: 5127:        ulg in_length = (ulg)strstart-block_start;
        -: 5128:        int dcode;
     7812: 5129:        for (dcode = 0; dcode < D_CODES; dcode++) {
branch  0 taken 7560
branch  1 taken 252 (fallthrough)
     7560: 5130:            out_length += (ulg)dyn_dtree[dcode].Freq*(5L+extra_dbits[dcode]);
        -: 5131:        }
      252: 5132:        out_length >>= 3;
        -: 5133:        Trace((stderr,"\nlast_lit %u, last_dist %u, in %ld, out ~%ld(%ld%%) ",
        -: 5134:               last_lit, last_dist, in_length, out_length,
        -: 5135:               100L - out_length*100L/in_length));
      252: 5136:        if (last_dist < last_lit/2 && out_length < in_length/2) return 1;
branch  0 taken 11 (fallthrough)
branch  1 taken 241
branch  2 taken 6 (fallthrough)
branch  3 taken 5
        -: 5137:    }
  1794670: 5138:    return (last_lit == LIT_BUFSIZE-1 || last_dist == DIST_BUFSIZE);
branch  0 taken 1794656 (fallthrough)
branch  1 taken 14
branch  2 taken 0 (fallthrough)
branch  3 taken 1794656
        -: 5139:    /* We avoid equality with LIT_BUFSIZE because of wraparound at 64K
        -: 5140:     * on 16 bit machines and because stored blocks are restricted to
        -: 5141:     * 64K-1 bytes.
        -: 5142:     */
        -: 5143:}
        -: 5144:
        -: 5145:/* ===========================================================================
        -: 5146: * Send the block data compressed using the given Huffman trees
        -: 5147: */
function compress_block called 194 returned 100% blocks executed 100%
      194: 5148:local void compress_block(ltree, dtree)
        -: 5149:    ct_data near *ltree; /* literal tree */
        -: 5150:    ct_data near *dtree; /* distance tree */
        -: 5151:{
        -: 5152:    unsigned dist;      /* distance of matched string */
        -: 5153:    int lc;             /* match length or unmatched char (if dist == 0) */
      194: 5154:    unsigned lx = 0;    /* running index in l_buf */
      194: 5155:    unsigned dx = 0;    /* running index in d_buf */
      194: 5156:    unsigned fx = 0;    /* running index in flag_buf */
      194: 5157:    uch flag = 0;       /* current flags */
        -: 5158:    unsigned code;      /* the code to send */
        -: 5159:    int extra;          /* number of extra bits to send */
        -: 5160:
      194: 5161:    if (last_lit != 0) do {
branch  0 taken 192 (fallthrough)
branch  1 taken 2
  1782638: 5162:        if ((lx & 7) == 0) flag = flag_buf[fx++];
branch  0 taken 222915 (fallthrough)
branch  1 taken 1559723
  1782638: 5163:        lc = l_buf[lx++];
  1782638: 5164:        if ((flag & 1) == 0) {
branch  0 taken 600363 (fallthrough)
branch  1 taken 1182275
   600363: 5165:            send_code(lc, ltree); /* send a literal byte */
call    0 returned 600363
        -: 5166:            Tracecv(isgraph(lc), (stderr," '%c' ", lc));
        -: 5167:        } else {
        -: 5168:            /* Here, lc is the match length - MIN_MATCH */
  1182275: 5169:            code = length_code[lc];
  1182275: 5170:            send_code(code+LITERALS+1, ltree); /* send the length code */
call    0 returned 1182275
  1182275: 5171:            extra = extra_lbits[code];
  1182275: 5172:            if (extra != 0) {
branch  0 taken 127882 (fallthrough)
branch  1 taken 1054393
   127882: 5173:                lc -= base_length[code];
   127882: 5174:                send_bits(lc, extra);        /* send the extra length bits */
call    0 returned 127882
        -: 5175:            }
  1182275: 5176:            dist = d_buf[dx++];
        -: 5177:            /* Here, dist is the match distance - 1 */
  1182275: 5178:            code = d_code(dist);
branch  0 taken 599614 (fallthrough)
branch  1 taken 582661
        -: 5179:            Assert (code < D_CODES, "bad d_code");
        -: 5180:
  1182275: 5181:            send_code(code, dtree);       /* send the distance code */
call    0 returned 1182275
  1182275: 5182:            extra = extra_dbits[code];
  1182275: 5183:            if (extra != 0) {
branch  0 taken 772349 (fallthrough)
branch  1 taken 409926
   772349: 5184:                dist -= base_dist[code];
   772349: 5185:                send_bits(dist, extra);   /* send the extra distance bits */
call    0 returned 772349
        -: 5186:            }
        -: 5187:        } /* literal or match pair ? */
  1782638: 5188:        flag >>= 1;
  1782638: 5189:    } while (lx < last_lit);
branch  0 taken 1782446
branch  1 taken 192 (fallthrough)
        -: 5190:
      194: 5191:    send_code(END_BLOCK, ltree);
call    0 returned 194
      194: 5192:}
        -: 5193:
        -: 5194:/* ===========================================================================
        -: 5195: * Set the file type to ASCII or BINARY, using a crude approximation:
        -: 5196: * binary if more than 20% of the bytes are <= 6 or >= 128, ascii otherwise.
        -: 5197: * IN assertion: the fields freq of dyn_ltree are set and the total of all
        -: 5198: * frequencies does not exceed 64K (to fit in an int on 16 bit machines).
        -: 5199: */
function set_file_type called 0 returned 0% blocks executed 0%
    #####: 5200:local void set_file_type()
        -: 5201:{
    #####: 5202:    int n = 0;
    #####: 5203:    unsigned ascii_freq = 0;
    #####: 5204:    unsigned bin_freq = 0;
    #####: 5205:    while (n < 7)        bin_freq += dyn_ltree[n++].Freq;
branch  0 never executed
branch  1 never executed
    #####: 5206:    while (n < 128)    ascii_freq += dyn_ltree[n++].Freq;
branch  0 never executed
branch  1 never executed
    #####: 5207:    while (n < LITERALS) bin_freq += dyn_ltree[n++].Freq;
branch  0 never executed
branch  1 never executed
    #####: 5208:    *file_type = bin_freq > (ascii_freq >> 2) ? BINARY : ASCII;
        -: 5209:    if (*file_type == BINARY && translate_eol) {
        -: 5210:        warn("-l used on binary file", "");
        -: 5211:    }
    #####: 5212:}
        -: 5213:/* unlzw.c -- decompress files in LZW format.
        -: 5214: * The code in this file is directly derived from the public domain 'compress'
        -: 5215: * written by Spencer Thomas, Joe Orost, James Woods, Jim McKie, Steve Davies,
        -: 5216: * Ken Turkowski, Dave Mack and Peter Jannesen.
        -: 5217: *
        -: 5218: * This is a temporary version which will be rewritten in some future version
        -: 5219: * to accommodate in-memory decompression.
        -: 5220: */
        -: 5221:
        -: 5222:/*
        -: 5223:#ifndef lint
        -: 5224:static char rcsid[] = "$Id: unlzw.c,v 0.13 1993/05/27 10:32:55 jloup Exp $";
        -: 5225:#endif
        -: 5226:*/
        -: 5227:
        -: 5228:#ifdef HAVE_UNISTD_H
        -: 5229:#  include <unistd.h>
        -: 5230:#endif
        -: 5231:#ifndef NO_FCNTL_H
        -: 5232:#  include <fcntl.h>
        -: 5233:#endif
        -: 5234:
        -: 5235:typedef	unsigned char	char_type;
        -: 5236:typedef          long   code_int;
        -: 5237:typedef unsigned long 	count_int;
        -: 5238:typedef unsigned short	count_short;
        -: 5239:typedef unsigned long 	cmp_code_int;
        -: 5240:
        -: 5241:#define MAXCODE(n)	(1L << (n))
        -: 5242:    
        -: 5243:#ifndef	REGISTERS
        -: 5244:#	define	REGISTERS	2
        -: 5245:#endif
        -: 5246:#define	REG1	
        -: 5247:#define	REG2	
        -: 5248:#define	REG3	
        -: 5249:#define	REG4	
        -: 5250:#define	REG5	
        -: 5251:#define	REG6	
        -: 5252:#define	REG7	
        -: 5253:#define	REG8	
        -: 5254:#define	REG9	
        -: 5255:#define	REG10
        -: 5256:#define	REG11	
        -: 5257:#define	REG12	
        -: 5258:#define	REG13
        -: 5259:#define	REG14
        -: 5260:#define	REG15
        -: 5261:#define	REG16
        -: 5262:#if REGISTERS >= 1
        -: 5263:#	undef	REG1
        -: 5264:#	define	REG1	register
        -: 5265:#endif
        -: 5266:#if REGISTERS >= 2
        -: 5267:#	undef	REG2
        -: 5268:#	define	REG2	register
        -: 5269:#endif
        -: 5270:#if REGISTERS >= 3
        -: 5271:#	undef	REG3
        -: 5272:#	define	REG3	register
        -: 5273:#endif
        -: 5274:#if REGISTERS >= 4
        -: 5275:#	undef	REG4
        -: 5276:#	define	REG4	register
        -: 5277:#endif
        -: 5278:#if REGISTERS >= 5
        -: 5279:#	undef	REG5
        -: 5280:#	define	REG5	register
        -: 5281:#endif
        -: 5282:#if REGISTERS >= 6
        -: 5283:#	undef	REG6
        -: 5284:#	define	REG6	register
        -: 5285:#endif
        -: 5286:#if REGISTERS >= 7
        -: 5287:#	undef	REG7
        -: 5288:#	define	REG7	register
        -: 5289:#endif
        -: 5290:#if REGISTERS >= 8
        -: 5291:#	undef	REG8
        -: 5292:#	define	REG8	register
        -: 5293:#endif
        -: 5294:#if REGISTERS >= 9
        -: 5295:#	undef	REG9
        -: 5296:#	define	REG9	register
        -: 5297:#endif
        -: 5298:#if REGISTERS >= 10
        -: 5299:#	undef	REG10
        -: 5300:#	define	REG10	register
        -: 5301:#endif
        -: 5302:#if REGISTERS >= 11
        -: 5303:#	undef	REG11
        -: 5304:#	define	REG11	register
        -: 5305:#endif
        -: 5306:#if REGISTERS >= 12
        -: 5307:#	undef	REG12
        -: 5308:#	define	REG12	register
        -: 5309:#endif
        -: 5310:#if REGISTERS >= 13
        -: 5311:#	undef	REG13
        -: 5312:#	define	REG13	register
        -: 5313:#endif
        -: 5314:#if REGISTERS >= 14
        -: 5315:#	undef	REG14
        -: 5316:#	define	REG14	register
        -: 5317:#endif
        -: 5318:#if REGISTERS >= 15
        -: 5319:#	undef	REG15
        -: 5320:#	define	REG15	register
        -: 5321:#endif
        -: 5322:#if REGISTERS >= 16
        -: 5323:#	undef	REG16
        -: 5324:#	define	REG16	register
        -: 5325:#endif
        -: 5326:    
        -: 5327:#ifndef	BYTEORDER
        -: 5328:#	define	BYTEORDER	0000
        -: 5329:#endif
        -: 5330:	
        -: 5331:#ifndef	NOALLIGN
        -: 5332:#	define	NOALLIGN	0
        -: 5333:#endif
        -: 5334:
        -: 5335:
        -: 5336:union	bytes {
        -: 5337:    long  word;
        -: 5338:    struct {
        -: 5339:#if BYTEORDER == 4321
        -: 5340:	char_type	b1;
        -: 5341:	char_type	b2;
        -: 5342:	char_type	b3;
        -: 5343:	char_type	b4;
        -: 5344:#else
        -: 5345:#if BYTEORDER == 1234
        -: 5346:	char_type	b4;
        -: 5347:	char_type	b3;
        -: 5348:	char_type	b2;
        -: 5349:	char_type	b1;
        -: 5350:#else
        -: 5351:#	undef	BYTEORDER
        -: 5352:	int  dummy;
        -: 5353:#endif
        -: 5354:#endif
        -: 5355:    } bytes;
        -: 5356:};
        -: 5357:
        -: 5358:#if BYTEORDER == 4321 && NOALLIGN == 1
        -: 5359:#  define input(b,o,c,n,m){ \
        -: 5360:     (c) = (*(long *)(&(b)[(o)>>3])>>((o)&0x7))&(m); \
        -: 5361:     (o) += (n); \
        -: 5362:   }
        -: 5363:#else
        -: 5364:#  define input(b,o,c,n,m){ \
        -: 5365:     REG1 char_type *p = &(b)[(o)>>3]; \
        -: 5366:     (c) = ((((long)(p[0]))|((long)(p[1])<<8)| \
        -: 5367:     ((long)(p[2])<<16))>>((o)&0x7))&(m); \
        -: 5368:     (o) += (n); \
        -: 5369:   }
        -: 5370:#endif
        -: 5371:
        -: 5372:#ifndef MAXSEG_64K
        -: 5373:   /* DECLARE(ush, tab_prefix, (1<<BITS)); -- prefix code */
        -: 5374:#  define tab_prefixof(i) tab_prefix[i]
        -: 5375:#  define clear_tab_prefixof()	memzero(tab_prefix, 256);
        -: 5376:#else
        -: 5377:   /* DECLARE(ush, tab_prefix0, (1<<(BITS-1)); -- prefix for even codes */
        -: 5378:   /* DECLARE(ush, tab_prefix1, (1<<(BITS-1)); -- prefix for odd  codes */
        -: 5379:   ush *tab_prefix[2];
        -: 5380:#  define tab_prefixof(i) tab_prefix[(i)&1][(i)>>1]
        -: 5381:#  define clear_tab_prefixof()	\
        -: 5382:      memzero(tab_prefix0, 128), \
        -: 5383:      memzero(tab_prefix1, 128);
        -: 5384:#endif
        -: 5385:#define de_stack        ((char_type *)(&d_buf[DIST_BUFSIZE-1]))
        -: 5386:#define tab_suffixof(i) tab_suffix[i]
        -: 5387:
        -: 5388:int block_mode = BLOCK_MODE; /* block compress mode -C compatible with 2.0 */
        -: 5389:
        -: 5390:/* ============================================================================
        -: 5391: * Decompress in to out.  This routine adapts to the codes in the
        -: 5392: * file building the "string" table on-the-fly; requiring no table to
        -: 5393: * be stored in the compressed file.
        -: 5394: * IN assertions: the buffer inbuf contains already the beginning of
        -: 5395: *   the compressed data, from offsets iptr to insize-1 included.
        -: 5396: *   The magic header has already been checked and skipped.
        -: 5397: *   bytes_in and bytes_out have been initialized.
        -: 5398: */
function unlzw called 1 returned 100% blocks executed 77%
        1: 5399:int unlzw(in, out) 
        -: 5400:    int in, out;    /* input and output file descriptors */
        -: 5401:{
        -: 5402:    REG2   char_type  *stackp;
        -: 5403:    REG3   code_int   code;
        -: 5404:    REG4   int        finchar;
        -: 5405:    REG5   code_int   oldcode;
        -: 5406:    REG6   code_int   incode;
        -: 5407:    REG7   long       inbits;
        -: 5408:    REG8   long       posbits;
        -: 5409:    REG9   int        outpos;
        -: 5410:/*  REG10  int        insize; (global) */
        -: 5411:    REG11  unsigned   bitmask;
        -: 5412:    REG12  code_int   free_ent;
        -: 5413:    REG13  code_int   maxcode;
        -: 5414:    REG14  code_int   maxmaxcode;
        -: 5415:    REG15  int        n_bits;
        -: 5416:    REG16  int        rsize;
        -: 5417:    
        -: 5418:#ifdef MAXSEG_64K
        -: 5419:    tab_prefix[0] = tab_prefix0;
        -: 5420:    tab_prefix[1] = tab_prefix1;
        -: 5421:#endif
       1*: 5422:    maxbits = get_byte();
branch  0 taken 1 (fallthrough)
branch  1 taken 0
call    2 never executed
        1: 5423:    block_mode = maxbits & BLOCK_MODE;
        1: 5424:    if ((maxbits & LZW_RESERVED) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5425:	WARN((stderr, "\n%s: %s: warning, unknown flags 0x%x\n",
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 5426:	      progname, ifname, maxbits & LZW_RESERVED));
        -: 5427:    }
        1: 5428:    maxbits &= BIT_MASK;
        1: 5429:    maxmaxcode = MAXCODE(maxbits);
        -: 5430:    
        1: 5431:    if (maxbits > BITS) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5432:	fprintf(stderr,
call    0 never executed
        -: 5433:		"\n%s: %s: compressed with %d bits, can only handle %d bits\n",
        -: 5434:		progname, ifname, maxbits, BITS);
    #####: 5435:	exit_code = ERROR;
    #####: 5436:	return ERROR;
        -: 5437:    }
        1: 5438:    rsize = insize;
        1: 5439:    maxcode = MAXCODE(n_bits = INIT_BITS)-1;
        1: 5440:    bitmask = (1<<n_bits)-1;
        1: 5441:    oldcode = -1;
        1: 5442:    finchar = 0;
        1: 5443:    outpos = 0;
        1: 5444:    posbits = inptr<<3;
        -: 5445:
       1*: 5446:    free_ent = ((block_mode) ? FIRST : 256);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5447:    
        1: 5448:    clear_tab_prefixof(); /* Initialize the first 256 entries in the table. */
        -: 5449:    
      257: 5450:    for (code = 255 ; code >= 0 ; --code) {
branch  0 taken 256
branch  1 taken 1 (fallthrough)
      256: 5451:	tab_suffixof(code) = (char_type)code;
        -: 5452:    }
        -: 5453:    do {
        -: 5454:	REG1 int i;
        -: 5455:	int  e;
        -: 5456:	int  o;
        -: 5457:	
        1: 5458:    resetbuf:
        7: 5459:	e = insize-(o = (posbits>>3));
        -: 5460:	
    74495: 5461:	for (i = 0 ; i < e ; ++i) {
branch  0 taken 74488
branch  1 taken 7 (fallthrough)
    74488: 5462:	    inbuf[i] = inbuf[i+o];
        -: 5463:	}
        7: 5464:	insize = e;
        7: 5465:	posbits = 0;
        -: 5466:	
        7: 5467:	if (insize < INBUF_EXTRA) {
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        1: 5468:	    if ((rsize = read(in, (char*)inbuf+insize, INBUFSIZ)) == EOF) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5469:		read_error();
call    0 never executed
        -: 5470:	    }
        1: 5471:	    insize += rsize;
        1: 5472:	    bytes_in += (ulg)rsize;
        -: 5473:	}
        7: 5474:	inbits = ((rsize != 0) ? ((long)insize - insize%n_bits)<<3 : 
branch  0 taken 6 (fallthrough)
branch  1 taken 1
        1: 5475:		  ((long)insize<<3)-(n_bits-1));
        -: 5476:	
    10145: 5477:	while (inbits > posbits) {
branch  0 taken 10143
branch  1 taken 2 (fallthrough)
    10143: 5478:	    if (free_ent > maxcode) {
branch  0 taken 5 (fallthrough)
branch  1 taken 10138
        5: 5479:		posbits = ((posbits-1) +
        5: 5480:			   ((n_bits<<3)-(posbits-1+(n_bits<<3))%(n_bits<<3)));
        5: 5481:		++n_bits;
        5: 5482:		if (n_bits == maxbits) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####: 5483:		    maxcode = maxmaxcode;
        -: 5484:		} else {
        5: 5485:		    maxcode = MAXCODE(n_bits)-1;
        -: 5486:		}
        5: 5487:		bitmask = (1<<n_bits)-1;
        5: 5488:		goto resetbuf;
        -: 5489:	    }
    10138: 5490:	    input(inbuf,posbits,code,n_bits,bitmask);
        -: 5491:	    
    10138: 5492:	    if (oldcode == -1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 10137
        1: 5493:		outbuf[outpos++] = (char_type)(finchar = (int)(oldcode=code));
        1: 5494:		continue;
        -: 5495:	    }
   10137*: 5496:	    if (code == CLEAR && block_mode) {
branch  0 taken 0 (fallthrough)
branch  1 taken 10137
branch  2 never executed
branch  3 never executed
    #####: 5497:		clear_tab_prefixof();
    #####: 5498:		free_ent = FIRST - 1;
    #####: 5499:		posbits = ((posbits-1) +
    #####: 5500:			   ((n_bits<<3)-(posbits-1+(n_bits<<3))%(n_bits<<3)));
    #####: 5501:		maxcode = MAXCODE(n_bits = INIT_BITS)-1;
    #####: 5502:		bitmask = (1<<n_bits)-1;
    #####: 5503:		goto resetbuf;
        -: 5504:	    }
    10137: 5505:	    incode = code;
    10137: 5506:	    stackp = de_stack;
        -: 5507:	    
    10137: 5508:	    if (code >= free_ent) { /* Special case for KwKwK string. */
branch  0 taken 17 (fallthrough)
branch  1 taken 10120
       17: 5509:		if (code > free_ent) {
branch  0 taken 0 (fallthrough)
branch  1 taken 17
        -: 5510:#ifdef DEBUG		    
        -: 5511:		    char_type *p;
        -: 5512:
        -: 5513:		    posbits -= n_bits;
        -: 5514:		    p = &inbuf[posbits>>3];
        -: 5515:		    fprintf(stderr,
        -: 5516:			    "code:%ld free_ent:%ld n_bits:%d insize:%u\n",
        -: 5517:			    code, free_ent, n_bits, insize);
        -: 5518:		    fprintf(stderr,
        -: 5519:			    "posbits:%ld inbuf:%02X %02X %02X %02X %02X\n",
        -: 5520:			    posbits, p[-1],p[0],p[1],p[2],p[3]);
        -: 5521:#endif
    #####: 5522:		    if (!test && outpos > 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5523:			write_buf(out, (char*)outbuf, outpos);
call    0 never executed
    #####: 5524:			bytes_out += (ulg)outpos;
        -: 5525:		    }
    #####: 5526:		    error("corrupt input. Use zcat to recover some data.");
call    0 never executed
        -: 5527:		}
       17: 5528:		*--stackp = (char_type)finchar;
       17: 5529:		code = oldcode;
        -: 5530:	    }
        -: 5531:
    34213: 5532:	    while ((cmp_code_int)code >= (cmp_code_int)256) {
branch  0 taken 24076
branch  1 taken 10137 (fallthrough)
        -: 5533:		/* Generate output characters in reverse order */
    24076: 5534:		*--stackp = tab_suffixof(code);
    24076: 5535:		code = tab_prefixof(code);
        -: 5536:	    }
    10137: 5537:	    *--stackp =	(char_type)(finchar = tab_suffixof(code));
        -: 5538:	    
        -: 5539:	    /* And put them out in forward order */
        -: 5540:	    {
        -: 5541:		REG1 int	i;
        -: 5542:	    
    10137: 5543:		if (outpos+(i = (de_stack-stackp)) >= OUTBUFSIZ) {
branch  0 taken 2 (fallthrough)
branch  1 taken 10135
        -: 5544:		    do {
        4: 5545:			if (i > OUTBUFSIZ-outpos) i = OUTBUFSIZ-outpos;
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        -: 5546:
        4: 5547:			if (i > 0) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 5548:			    memcpy(outbuf+outpos, stackp, i);
        4: 5549:			    outpos += i;
        -: 5550:			}
        4: 5551:			if (outpos >= OUTBUFSIZ) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2: 5552:			    if (!test) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5553:				write_buf(out, (char*)outbuf, outpos);
call    0 returned 2
        2: 5554:				bytes_out += (ulg)outpos;
        -: 5555:			    }
        2: 5556:			    outpos = 0;
        -: 5557:			}
        4: 5558:			stackp+= i;
        4: 5559:		    } while ((i = (de_stack-stackp)) > 0);
branch  0 taken 2
branch  1 taken 2
        -: 5560:		} else {
    10135: 5561:		    memcpy(outbuf+outpos, stackp, i);
    10135: 5562:		    outpos += i;
        -: 5563:		}
        -: 5564:	    }
        -: 5565:
    10137: 5566:	    if ((code = free_ent) < maxmaxcode) { /* Generate the new entry. */
branch  0 taken 10137 (fallthrough)
branch  1 taken 0
        -: 5567:
    10137: 5568:		tab_prefixof(code) = (unsigned short)oldcode;
    10137: 5569:		tab_suffixof(code) = (char_type)finchar;
    10137: 5570:		free_ent = code+1;
        -: 5571:	    } 
    10137: 5572:	    oldcode = incode;	/* Remember previous code.	*/
        -: 5573:	}
        2: 5574:    } while (rsize != 0);
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -: 5575:    
        1: 5576:    if (!test && outpos > 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 5577:	write_buf(out, (char*)outbuf, outpos);
call    0 returned 1
        1: 5578:	bytes_out += (ulg)outpos;
        -: 5579:#ifndef FAULTY_F_KP_3
        -: 5580:    }
        1: 5581:    return OK;
        -: 5582:#else
        -: 5583:    return OK;
        -: 5584:    }
        -: 5585:#endif
        -: 5586:}
        -: 5587:/* unpack.c -- decompress files in pack format.
        -: 5588: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 5589: * This is free software; you can redistribute it and/or modify it under the
        -: 5590: * terms of the GNU General Public License, see the file COPYING.
        -: 5591: */
        -: 5592:
        -: 5593:/*
        -: 5594:#ifndef lint
        -: 5595:static char rcsid[] = "$Id: unpack.c,v 1.3 1993/05/28 17:56:07 jloup Exp $";
        -: 5596:#endif
        -: 5597:*/
        -: 5598:
        -: 5599:#define MIN(a,b) ((a) <= (b) ? (a) : (b))
        -: 5600:/* The arguments must not have side effects. */
        -: 5601:
        -: 5602:#define MAX_BITLEN 25
        -: 5603:/* Maximum length of Huffman codes. (Minor modifications to the code
        -: 5604: * would be needed to support 32 bits codes, but pack never generates
        -: 5605: * more than 24 bits anyway.)
        -: 5606: */
        -: 5607:
        -: 5608:#define LITERALS 256
        -: 5609:/* Number of literals, excluding the End of Block (EOB) code */
        -: 5610:
        -: 5611:#ifdef SMALL_MEM
        -: 5612:#  define MAX_PEEK 10
        -: 5613:#else
        -: 5614:#  define MAX_PEEK 12
        -: 5615:#endif
        -: 5616:/* Maximum number of 'peek' bits used to optimize traversal of the
        -: 5617: * Huffman tree.
        -: 5618: */
        -: 5619:
        -: 5620:local ulg orig_len;       /* original uncompressed length */
        -: 5621:local int max_len;        /* maximum bit length of Huffman codes */
        -: 5622:
        -: 5623:local uch literal[LITERALS];
        -: 5624:/* The literal bytes present in the Huffman tree. The EOB code is not
        -: 5625: * represented.
        -: 5626: */
        -: 5627:
        -: 5628:local int lit_base[MAX_BITLEN+1];
        -: 5629:/* All literals of a given bit length are contiguous in literal[] and
        -: 5630: * have contiguous codes. literal[code+lit_base[len]] is the literal
        -: 5631: * for a code of len bits.
        -: 5632: */
        -: 5633:
        -: 5634:local int leaves [MAX_BITLEN+1]; /* Number of leaves for each bit length */
        -: 5635:local int parents[MAX_BITLEN+1]; /* Number of parents for each bit length */
        -: 5636:
        -: 5637:local int peek_bits; /* Number of peek bits currently used */
        -: 5638:
        -: 5639:local uch prefix_len[1 << MAX_PEEK];
        -: 5640:/* For each bit pattern b of peek_bits bits, prefix_len[b] is the length
        -: 5641: * of the Huffman code starting with a prefix of b (upper bits), or 0
        -: 5642: * if all codes of prefix b have more than peek_bits bits. It is not
        -: 5643: * necessary to have a huge table (large MAX_PEEK) because most of the
        -: 5644: * codes encountered in the input stream are short codes (by construction).
        -: 5645: * So for most codes a single lookup will be necessary.
        -: 5646: */
        -: 5647:
        -: 5648:local ulg bitbuf;
        -: 5649:/* Bits are added on the low part of bitbuf and read from the high part. */
        -: 5650:
        -: 5651:local int valid;                  /* number of valid bits in bitbuf */
        -: 5652:/* all bits above the last valid bit are always zero */
        -: 5653:
        -: 5654:/* Set code to the next 'bits' input bits without skipping them. code
        -: 5655: * must be the name of a simple variable and bits must not have side effects.
        -: 5656: * IN assertions: bits <= 25 (so that we still have room for an extra byte
        -: 5657: * when valid is only 24), and mask = (1<<bits)-1.
        -: 5658: */
        -: 5659:#define look_bits(code,bits,mask) \
        -: 5660:{ \
        -: 5661:  while (valid < (bits)) bitbuf = (bitbuf<<8) | (ulg)get_byte(), valid += 8; \
        -: 5662:  code = (bitbuf >> (valid-(bits))) & (mask); \
        -: 5663:}
        -: 5664:
        -: 5665:/* Skip the given number of bits (after having peeked at them): */
        -: 5666:#define skip_bits(bits)  (valid -= (bits))
        -: 5667:
        -: 5668:#define clear_bitbuf() (valid = 0, bitbuf = 0)
        -: 5669:
        -: 5670:/* Local functions */
        -: 5671:
        -: 5672:local void read_tree  OF((void));
        -: 5673:local void un_build_tree OF((void));
        -: 5674:
        -: 5675:/* ===========================================================================
        -: 5676: * Read the Huffman tree.
        -: 5677: */
function read_tree called 1 returned 100% blocks executed 74%
        1: 5678:local void read_tree()
        -: 5679:{
        -: 5680:    int len;  /* bit length */
        -: 5681:    int base; /* base offset for a sequence of leaves */
        -: 5682:    int n;
        -: 5683:
        -: 5684:    /* Read the original input size, MSB first */
        1: 5685:    orig_len = 0;
       5*: 5686:    for (n = 1; n <= 4; n++) orig_len = (orig_len << 8) | (ulg)get_byte();
branch  0 taken 4 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 4
branch  4 taken 1 (fallthrough)
        -: 5687:
       1*: 5688:    max_len = (int)get_byte(); /* maximum bit length of Huffman codes */
branch  0 taken 1 (fallthrough)
branch  1 taken 0
call    2 never executed
        1: 5689:    if (max_len > MAX_BITLEN) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5690:	error("invalid compressed data -- Huffman code > 32 bits");
call    0 never executed
        -: 5691:    }
        -: 5692:
        -: 5693:    /* Get the number of leaves at each bit length */
        1: 5694:    n = 0;
       17: 5695:    for (len = 1; len <= max_len; len++) {
branch  0 taken 16
branch  1 taken 1 (fallthrough)
      16*: 5696:	leaves[len] = (int)get_byte();
branch  0 taken 16 (fallthrough)
branch  1 taken 0
call    2 never executed
       16: 5697:	n += leaves[len];
        -: 5698:    }
        1: 5699:    if (n > LITERALS) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5700:	error("too many leaves in Huffman tree");
call    0 never executed
        -: 5701:    }
        -: 5702:    Trace((stderr, "orig_len %ld, max_len %d, leaves %d\n",
        -: 5703:	   orig_len, max_len, n));
        -: 5704:    /* There are at least 2 and at most 256 leaves of length max_len.
        -: 5705:     * (Pack arbitrarily rejects empty files and files consisting of
        -: 5706:     * a single byte even repeated.) To fit the last leaf count in a
        -: 5707:     * byte, it is offset by 2. However, the last literal is the EOB
        -: 5708:     * code, and is not transmitted explicitly in the tree, so we must
        -: 5709:     * adjust here by one only.
        -: 5710:     */
        1: 5711:    leaves[max_len]++;
        -: 5712:
        -: 5713:    /* Now read the leaves themselves */
        1: 5714:    base = 0;
       17: 5715:    for (len = 1; len <= max_len; len++) {
branch  0 taken 16
branch  1 taken 1 (fallthrough)
        -: 5716:	/* Remember where the literals of this length start in literal[] : */
       16: 5717:	lit_base[len] = base;
        -: 5718:	/* And read the literals: */
      107: 5719:	for (n = leaves[len]; n > 0; n--) {
branch  0 taken 91
branch  1 taken 16 (fallthrough)
      91*: 5720:	    literal[base++] = (uch)get_byte();
branch  0 taken 91 (fallthrough)
branch  1 taken 0
call    2 never executed
        -: 5721:	}
        -: 5722:    }
        1: 5723:    leaves[max_len]++; /* Now include the EOB code in the Huffman tree */
        1: 5724:}
        -: 5725:
        -: 5726:/* ===========================================================================
        -: 5727: * Build the Huffman tree and the prefix table.
        -: 5728: */
function un_build_tree called 1 returned 100% blocks executed 100%
        1: 5729:local void un_build_tree()
        -: 5730:{
        1: 5731:    int nodes = 0; /* number of nodes (parents+leaves) at current bit length */
        -: 5732:    int len;       /* current bit length */
        -: 5733:    uch *prefixp;  /* pointer in prefix_len */
        -: 5734:
       17: 5735:    for (len = max_len; len >= 1; len--) {
branch  0 taken 16
branch  1 taken 1 (fallthrough)
        -: 5736:	/* The number of parent nodes at this level is half the total
        -: 5737:	 * number of nodes at parent level:
        -: 5738:	 */
       16: 5739:	nodes >>= 1;
       16: 5740:	parents[len] = nodes;
        -: 5741:	/* Update lit_base by the appropriate bias to skip the parent nodes
        -: 5742:	 * (which are not represented in the literal array):
        -: 5743:	 */
       16: 5744:	lit_base[len] -= nodes;
        -: 5745:	/* Restore nodes to be parents+leaves: */
       16: 5746:	nodes += leaves[len];
        -: 5747:    }
        -: 5748:    /* Construct the prefix table, from shortest leaves to longest ones.
        -: 5749:     * The shortest code is all ones, so we start at the end of the table.
        -: 5750:     */
        1: 5751:    peek_bits = MIN(max_len, MAX_PEEK);
        1: 5752:    prefixp = &prefix_len[1<<peek_bits];
       13: 5753:    for (len = 1; len <= peek_bits; len++) {
branch  0 taken 12
branch  1 taken 1 (fallthrough)
       12: 5754:	int prefixes = leaves[len] << (peek_bits-len); /* may be 0 */
     4103: 5755:	while (prefixes--) *--prefixp = (uch)len;
branch  0 taken 4091
branch  1 taken 12 (fallthrough)
        -: 5756:    }
        -: 5757:    /* The length of all other codes is unknown: */
        6: 5758:    while (prefixp > prefix_len) *--prefixp = 0;
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        1: 5759:}
        -: 5760:
        -: 5761:/* ===========================================================================
        -: 5762: * Unpack in to out.  This routine does not support the old pack format
        -: 5763: * with magic header \037\037.
        -: 5764: *
        -: 5765: * IN assertions: the buffer inbuf contains already the beginning of
        -: 5766: *   the compressed data, from offsets inptr to insize-1 included.
        -: 5767: *   The magic header has already been checked. The output buffer is cleared.
        -: 5768: */
function unpack called 1 returned 100% blocks executed 84%
        1: 5769:int unpack(in, out)
        -: 5770:    int in, out;            /* input and output file descriptors */
        -: 5771:{
        -: 5772:    int len;                /* Bit length of current code */
        -: 5773:    unsigned eob;           /* End Of Block code */
        -: 5774:    register unsigned peek; /* lookahead bits */
        -: 5775:    unsigned peek_mask;     /* Mask for peek_bits bits */
        -: 5776:
        1: 5777:    ifd = in;
        1: 5778:    ofd = out;
        -: 5779:
        1: 5780:    read_tree();     /* Read the Huffman tree */
call    0 returned 1
        1: 5781:    un_build_tree();    /* Build the prefix table */
call    0 returned 1
        1: 5782:    clear_bitbuf();  /* Initialize bit input */
        1: 5783:    peek_mask = (1<<peek_bits)-1;
        -: 5784:
        -: 5785:    /* The eob code is the largest code among all leaves of maximal length: */
        1: 5786:    eob = leaves[max_len]-1;
        -: 5787:    Trace((stderr, "eob %d %x\n", max_len, eob));
        -: 5788:
        -: 5789:    /* Decode the input data: */
        -: 5790:    for (;;) {
        -: 5791:	/* Since eob is the longest code and not shorter than max_len,
        -: 5792:         * we can peek at max_len bits without having the risk of reading
        -: 5793:         * beyond the end of file.
        -: 5794:	 */
   54270*: 5795:	look_bits(peek, peek_bits, peek_mask);
branch  0 taken 20038 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 20038
branch  4 taken 34232 (fallthrough)
    34232: 5796:	len = prefix_len[peek];
    34232: 5797:	if (len > 0) {
branch  0 taken 34184 (fallthrough)
branch  1 taken 48
    34184: 5798:	    peek >>= peek_bits - len; /* discard the extra bits */
        -: 5799:	} else {
        -: 5800:	    /* Code of more than peek_bits bits, we must traverse the tree */
       48: 5801:	    ulg mask = peek_mask;
       48: 5802:	    len = peek_bits;
        -: 5803:	    do {
       76: 5804:                len++, mask = (mask<<1)+1;
      84*: 5805:		look_bits(peek, len, mask);
branch  0 taken 8 (fallthrough)
branch  1 taken 0
call    2 never executed
branch  3 taken 8
branch  4 taken 76 (fallthrough)
       76: 5806:	    } while (peek < parents[len]);
branch  0 taken 28
branch  1 taken 48 (fallthrough)
        -: 5807:	    /* loop as long as peek is a parent node */
        -: 5808:	}
        -: 5809:	/* At this point, peek is the next complete code, of len bits */
    34232: 5810:	if (peek == eob && len == max_len) break; /* end of file? */
branch  0 taken 2 (fallthrough)
branch  1 taken 34230
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        -: 5811:#ifndef FAULTY_F_KP_10
    34231: 5812:	put_ubyte(literal[peek+lit_base[len]]);
branch  0 taken 1 (fallthrough)
branch  1 taken 34230
call    2 returned 1
        -: 5813:#else
        -: 5814:	put_ubyte(literal[lit_base[len-1]]);
        -: 5815:#endif
        -: 5816:	Tracev((stderr,"%02d %04x %c\n", len, peek,
        -: 5817:		literal[peek+lit_base[len]]));
    34231: 5818:	skip_bits(len);
        -: 5819:    } /* for (;;) */
        -: 5820:
        1: 5821:    flush_window();
call    0 returned 1
        -: 5822:    Trace((stderr, "bytes_out %ld\n", bytes_out));
        1: 5823:    if (orig_len != bytes_out) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5824:	error("invalid compressed data--length error");
call    0 never executed
        -: 5825:    }
        1: 5826:    return OK;
        -: 5827:}
        -: 5828:/* unzip.c -- decompress files in gzip or pkzip format.
        -: 5829: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 5830: * This is free software; you can redistribute it and/or modify it under the
        -: 5831: * terms of the GNU General Public License, see the file COPYING.
        -: 5832: *
        -: 5833: * The code in this file is derived from the file funzip.c written
        -: 5834: * and put in the public domain by Mark Adler.
        -: 5835: */
        -: 5836:
        -: 5837:/*
        -: 5838:   This version can extract files in gzip or pkzip format.
        -: 5839:   For the latter, only the first entry is extracted, and it has to be
        -: 5840:   either deflated or stored.
        -: 5841: */
        -: 5842:
        -: 5843:/*
        -: 5844:#ifndef lint
        -: 5845:static char rcsid[] = "$Id: unzip.c,v 0.12 1993/05/28 17:56:23 jloup Exp $";
        -: 5846:#endif
        -: 5847:*/
        -: 5848:
        -: 5849:/* PKZIP header definitions */
        -: 5850:#define LOCSIG 0x04034b50L      /* four-byte lead-in (lsb first) */
        -: 5851:#define LOCFLG 6                /* offset of bit flag */
        -: 5852:#define  CRPFLG 1               /*  bit for encrypted entry */
        -: 5853:#define  EXTFLG 8               /*  bit for extended local header */
        -: 5854:#define LOCHOW 8                /* offset of compression method */
        -: 5855:#define LOCTIM 10               /* file mod time (for decryption) */
        -: 5856:#define LOCCRC 14               /* offset of crc */
        -: 5857:#define LOCSIZ 18               /* offset of compressed size */
        -: 5858:#define LOCLEN 22               /* offset of uncompressed length */
        -: 5859:#define LOCFIL 26               /* offset of file name field length */
        -: 5860:#define LOCEXT 28               /* offset of extra field length */
        -: 5861:#define LOCHDR 30               /* size of local header, including sig */
        -: 5862:#define EXTHDR 16               /* size of extended local header, inc sig */
        -: 5863:
        -: 5864:
        -: 5865:/* Globals */
        -: 5866:
        -: 5867:int decrypt;        /* flag to turn on decryption */
        -: 5868:char *key;          /* not used--needed to link crypt.c */
        -: 5869:int pkzip = 0;      /* set for a pkzip file */
        -: 5870:int ext_header = 0; /* set if extended local header */
        -: 5871:
        -: 5872:/* ===========================================================================
        -: 5873: * Check zip file and advance inptr to the start of the compressed data.
        -: 5874: * Get ofname from the local header if necessary.
        -: 5875: */
function check_zipfile called 2 returned 100% blocks executed 54%
        2: 5876:int check_zipfile(in)
        -: 5877:    int in;   /* input file descriptors */
        -: 5878:{
        2: 5879:    uch *h = inbuf + inptr; /* first local header */
        -: 5880:
        2: 5881:    ifd = in;
        -: 5882:
        -: 5883:    /* Check validity of local header, and skip name and extra fields */
        2: 5884:    inptr += LOCHDR + SH(h + LOCFIL) + SH(h + LOCEXT);
        -: 5885:
        2: 5886:    if (inptr > insize || LG(h) != LOCSIG) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
        -: 5887:#ifdef FAULTY_F_KP_5
        -: 5888:	fprintf(stderr, "\n%s: %s: not a valid zip file\n",
        -: 5889:		ifname, progname);
        -: 5890:#else
    #####: 5891:	fprintf(stderr, "\n%s: %s: not a valid zip file\n",
call    0 never executed
        -: 5892:		progname, ifname);
        -: 5893:#endif
    #####: 5894:	exit_code = ERROR;
    #####: 5895:	return ERROR;
        -: 5896:    }
        2: 5897:    method = h[LOCHOW];
        2: 5898:    if (method != STORED && method != DEFLATED) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####: 5899:	fprintf(stderr,
call    0 never executed
        -: 5900:		"\n%s: %s: first entry not deflated or stored -- use unzip\n",
        -: 5901:		progname, ifname);
    #####: 5902:	exit_code = ERROR;
    #####: 5903:	return ERROR;
        -: 5904:    }
        -: 5905:
        -: 5906:    /* If entry encrypted, decrypt and validate encryption header */
        2: 5907:    if ((decrypt = h[LOCFLG] & CRPFLG) != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 5908:	fprintf(stderr, "\n%s: %s: encrypted file -- use unzip\n",
call    0 never executed
        -: 5909:		progname, ifname);
    #####: 5910:	exit_code = ERROR;
    #####: 5911:	return ERROR;
        -: 5912:    }
        -: 5913:
        -: 5914:    /* Save flags for unzip() */
        2: 5915:    ext_header = (h[LOCFLG] & EXTFLG) != 0;
        2: 5916:    pkzip = 1;
        -: 5917:
        -: 5918:    /* Get ofname and time stamp from local header (to be done) */
        2: 5919:    return OK;
        -: 5920:}
        -: 5921:
        -: 5922:/* ===========================================================================
        -: 5923: * Unzip in to out.  This routine works on both gzip and pkzip files.
        -: 5924: *
        -: 5925: * IN assertions: the buffer inbuf contains already the beginning of
        -: 5926: *   the compressed data, from offsets inptr to insize-1 included.
        -: 5927: *   The magic header has already been checked. The output buffer is cleared.
        -: 5928: */
function unzip called 12 returned 100% blocks executed 38%
       12: 5929:int unzip(in, out)
        -: 5930:    int in, out;   /* input and output file descriptors */
        -: 5931:{
       12: 5932:    ulg orig_crc = 0;       /* original crc */
       12: 5933:    ulg orig_len = 0;       /* original uncompressed length */
        -: 5934:    int n;
        -: 5935:    uch buf[EXTHDR];        /* extended local header */
        -: 5936:
       12: 5937:    ifd = in;
       12: 5938:    ofd = out;
        -: 5939:
       12: 5940:    updcrc(NULL, 0);           /* initialize crc */
call    0 returned 12
        -: 5941:
       12: 5942:    if (pkzip && !ext_header) {  /* crc and length at the end otherwise */
branch  0 taken 2 (fallthrough)
branch  1 taken 10
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 5943:	orig_crc = LG(inbuf + LOCCRC);
        2: 5944:	orig_len = LG(inbuf + LOCLEN);
        -: 5945:    }
        -: 5946:
        -: 5947:    /* Decompress */
       12: 5948:    if (method == DEFLATED)  {
branch  0 taken 12 (fallthrough)
branch  1 taken 0
        -: 5949:
       12: 5950:	int res = inflate();
call    0 returned 12
        -: 5951:
       12: 5952:	if (res == 3) {
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####: 5953:	    error("out of memory");
call    0 never executed
       12: 5954:	} else if (res != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####: 5955:	    error("invalid compressed data--format violated");
call    0 never executed
        -: 5956:	}
        -: 5957:
    #####: 5958:    } else if (pkzip && method == STORED) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 5959:
    #####: 5960:	register ulg n = LG(inbuf + LOCLEN);
        -: 5961:
    #####: 5962:	if (n != LG(inbuf + LOCSIZ) - (decrypt ? RAND_HEAD_LEN : 0)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 5963:
    #####: 5964:	    fprintf(stderr, "len %ld, siz %ld\n", n, LG(inbuf + LOCSIZ));
call    0 never executed
    #####: 5965:	    error("invalid compressed data--length mismatch");
call    0 never executed
        -: 5966:	}
    #####: 5967:	while (n--) {
branch  0 never executed
branch  1 never executed
    #####: 5968:	    uch c = (uch)get_byte();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 5969:#ifdef CRYPT
        -: 5970:	    if (decrypt) zdecode(c);
        -: 5971:#endif
    #####: 5972:	    put_ubyte(c);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 5973:	}
    #####: 5974:	flush_window();
call    0 never executed
        -: 5975:    } else {
    #####: 5976:	error("internal error, invalid method");
call    0 never executed
        -: 5977:    }
        -: 5978:
        -: 5979:    /* Get the crc and original length */
       12: 5980:    if (!pkzip) {
branch  0 taken 10 (fallthrough)
branch  1 taken 2
        -: 5981:        /* crc32  (see algorithm.doc)
        -: 5982:	 * uncompressed input size modulo 2^32
        -: 5983:         */
       90: 5984:	for (n = 0; n < 8; n++) {
branch  0 taken 80
branch  1 taken 10 (fallthrough)
      80*: 5985:	    buf[n] = (uch)get_byte(); /* may cause an error if EOF */
branch  0 taken 80 (fallthrough)
branch  1 taken 0
call    2 never executed
        -: 5986:	}
       10: 5987:	orig_crc = LG(buf);
       10: 5988:	orig_len = LG(buf+4);
        -: 5989:
        2: 5990:    } else if (ext_header) {  /* If extended header, check it */
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 5991:	/* signature - 4bytes: 0x50 0x4b 0x07 0x08
        -: 5992:	 * CRC-32 value
        -: 5993:         * compressed size 4-bytes
        -: 5994:         * uncompressed size 4-bytes
        -: 5995:	 */
    #####: 5996:	for (n = 0; n < EXTHDR; n++) {
branch  0 never executed
branch  1 never executed
    #####: 5997:	    buf[n] = (uch)get_byte(); /* may cause an error if EOF */
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 5998:	}
    #####: 5999:	orig_crc = LG(buf+4);
    #####: 6000:	orig_len = LG(buf+12);
        -: 6001:    }
        -: 6002:
        -: 6003:    /* Validate decompression */
       12: 6004:    if (orig_crc != updcrc(outbuf, 0)) {
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
    #####: 6005:	error("invalid compressed data--crc error");
call    0 never executed
        -: 6006:    }
       12: 6007:    if (orig_len != bytes_out) {
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####: 6008:	error("invalid compressed data--length error");
call    0 never executed
        -: 6009:    }
        -: 6010:
        -: 6011:    /* Check if there are more entries in a pkzip file */
       12: 6012:    if (pkzip && inptr + 4 < insize && LG(inbuf+inptr) == LOCSIG) {
branch  0 taken 2 (fallthrough)
branch  1 taken 10
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        -: 6013:#ifndef FAULTY_F_KP_4
    #####: 6014:	if (to_stdout) {
branch  0 never executed
branch  1 never executed
    #####: 6015:	    WARN((stderr,
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 6016:		  "%s: %s has more than one entry--rest ignored\n",
        -: 6017:		  progname, ifname));
        -: 6018:	} else {
        -: 6019:	    /* Don't destroy the input zip file */
    #####: 6020:	    fprintf(stderr,
call    0 never executed
        -: 6021:		    "%s: %s has more than one entry -- unchanged\n",
        -: 6022:		    progname, ifname);
        -: 6023:#else
        -: 6024:	if (to_stdout) {
        -: 6025:	    WARN((stderr,
        -: 6026:		  "%s: %s has more than one entry--rest ignored\n",
        -: 6027:		  ifname, progname));
        -: 6028:	} else {
        -: 6029:	    /* Don't destroy the input zip file */
        -: 6030:	    fprintf(stderr,
        -: 6031:		    "%s: %s has more than one entry -- unchanged\n",
        -: 6032:		    ifname, progname);
        -: 6033:#endif
    #####: 6034:	    exit_code = ERROR;
    #####: 6035:	    ext_header = pkzip = 0;
    #####: 6036:	    return ERROR;
        -: 6037:	}
        -: 6038:    }
       12: 6039:    ext_header = pkzip = 0; /* for next file */
       12: 6040:    return OK;
        -: 6041:}
        -: 6042:/* util.c -- utility functions for gzip support
        -: 6043: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 6044: * This is free software; you can redistribute it and/or modify it under the
        -: 6045: * terms of the GNU General Public License, see the file COPYING.
        -: 6046: */
        -: 6047:
        -: 6048:/*
        -: 6049:#ifndef lint
        -: 6050:static char rcsid[] = "$Id: util.c,v 0.14 1993/05/27 10:31:52 jloup Exp $";
        -: 6051:#endif
        -: 6052:*/
        -: 6053:
        -: 6054:#ifdef HAVE_UNISTD_H
        -: 6055:#  include <unistd.h>
        -: 6056:#endif
        -: 6057:#ifndef NO_FCNTL_H
        -: 6058:#  include <fcntl.h>
        -: 6059:#endif
        -: 6060:
        -: 6061:#if defined(STDC_HEADERS) || !defined(NO_STDLIB_H)
        -: 6062:#  include <stdlib.h>
        -: 6063:#else
        -: 6064:   extern int errno;
        -: 6065:#endif
        -: 6066:
        -: 6067:extern ulg crc_32_tab[];   /* crc table, defined below */
        -: 6068:
        -: 6069:/* ===========================================================================
        -: 6070: * Run a set of bytes through the crc shift register.  If s is a NULL
        -: 6071: * pointer, then initialize the crc shift register contents instead.
        -: 6072: * Return the current crc in either case.
        -: 6073: */
function updcrc called 3621 returned 100% blocks executed 100%
     3621: 6074:ulg updcrc(s, n)
        -: 6075:    uch *s;                 /* pointer to bytes to pump through */
        -: 6076:    unsigned n;             /* number of bytes in s[] */
        -: 6077:{
        -: 6078:    register ulg c;         /* temporary variable */
        -: 6079:
        -: 6080:    static ulg crc = (ulg)0xffffffffL; /* shift register contents */
        -: 6081:
     3621: 6082:    if (s == NULL) {
branch  0 taken 187 (fallthrough)
branch  1 taken 3434
      187: 6083:	c = 0xffffffffL;
        -: 6084:    } else {
     3434: 6085:	c = crc;
     3434: 6086:        if (n) do {
branch  0 taken 3422 (fallthrough)
branch  1 taken 12
111988194: 6087:            c = crc_32_tab[((int)c ^ (*s++)) & 0xff] ^ (c >> 8);
        -: 6088:#ifndef FAULTY_F_KP_11
111988194: 6089:        } while (--n);
branch  0 taken 111984772
branch  1 taken 3422 (fallthrough)
        -: 6090:#else
        -: 6091:        } while (n--);
        -: 6092:#endif
        -: 6093:    }
     3621: 6094:    crc = c;
     3621: 6095:    return c ^ 0xffffffffL;       /* (instead of ~c for 64-bit machines) */
        -: 6096:}
        -: 6097:
        -: 6098:/* ===========================================================================
        -: 6099: * Clear input and output buffers
        -: 6100: */
function clear_bufs called 190 returned 100% blocks executed 100%
      190: 6101:void clear_bufs()
        -: 6102:{
      190: 6103:    outcnt = 0;
      190: 6104:    insize = inptr = 0;
      190: 6105:    bytes_in = bytes_out = 0L;
      190: 6106:}
        -: 6107:
        -: 6108:/* ===========================================================================
        -: 6109: * Fill the input buffer. This is called only when the buffer is empty
        -: 6110: * and at least one byte is really needed.
        -: 6111: */
function fill_inbuf called 17 returned 94% blocks executed 100%
       17: 6112:int fill_inbuf()
        -: 6113:{
        -: 6114:    int len;
        -: 6115:
        -: 6116:    /* Read as much as possible */
       17: 6117:    insize = 0;
       17: 6118:    errno = 0;
        -: 6119:    do {
        -: 6120:#ifdef FAULTY_F_KL_5
        -: 6121:	len = read(ifd, (char*)inbuf, INBUFSIZ-insize);
        -: 6122:#else
       31: 6123:	len = read(ifd, (char*)inbuf+insize, INBUFSIZ-insize);
call    0 returned 31
        -: 6124:#endif
       31: 6125:        if (len == 0 || len == EOF) break;
branch  0 taken 16 (fallthrough)
branch  1 taken 15
branch  2 taken 16 (fallthrough)
branch  3 taken 0
       16: 6126:	insize += len;
       16: 6127:    } while (insize < INBUFSIZ);
branch  0 taken 14
branch  1 taken 2 (fallthrough)
        -: 6128:
       17: 6129:    if (insize == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 16
        1: 6130:	read_error();
call    0 returned 0
        -: 6131:    }
       16: 6132:    bytes_in += (ulg)insize;
       16: 6133:    inptr = 1;
       16: 6134:    return inbuf[0];
        -: 6135:}
        -: 6136:
        -: 6137:/* ===========================================================================
        -: 6138: * Write the output buffer outbuf[0..outcnt-1] and update bytes_out.
        -: 6139: * (used for the compressed data only)
        -: 6140: */
function flush_outbuf called 192 returned 100% blocks executed 80%
      192: 6141:void flush_outbuf()
        -: 6142:{
     192*: 6143:    if (outcnt == 0) return;
branch  0 taken 0 (fallthrough)
branch  1 taken 192
        -: 6144:
      192: 6145:    write_buf(ofd, (char *)outbuf, outcnt);
call    0 returned 192
      192: 6146:    bytes_out += (ulg)outcnt;
      192: 6147:    outcnt = 0;
        -: 6148:}
        -: 6149:
        -: 6150:/* ===========================================================================
        -: 6151: * Write the output window window[0..outcnt-1] and update crc and bytes_out.
        -: 6152: * (Used for the decompressed data only.)
        -: 6153: */
function flush_window called 27 returned 100% blocks executed 86%
       27: 6154:void flush_window()
        -: 6155:{
      27*: 6156:    if (outcnt == 0) return;
branch  0 taken 0 (fallthrough)
branch  1 taken 27
       27: 6157:    updcrc(window, outcnt);
call    0 returned 27
        -: 6158:
       27: 6159:    if (!test) {
branch  0 taken 21 (fallthrough)
branch  1 taken 6
       21: 6160:	write_buf(ofd, (char *)window, outcnt);
call    0 returned 21
        -: 6161:    }
       27: 6162:    bytes_out += (ulg)outcnt;
       27: 6163:    outcnt = 0;
        -: 6164:}
        -: 6165:
        -: 6166:/* ===========================================================================
        -: 6167: * Does the same as write(), but also handles partial pipe writes and checks
        -: 6168: * for error return.
        -: 6169: */
function write_buf called 216 returned 100% blocks executed 57%
      216: 6170:void write_buf(fd, buf, cnt)
        -: 6171:    int       fd;
        -: 6172:    voidp     buf;
        -: 6173:    unsigned  cnt;
        -: 6174:{
        -: 6175:    unsigned  n;
        -: 6176:
      216: 6177:    while ((n = write(fd, buf, cnt)) != cnt) {
call    0 returned 216
branch  1 taken 0
branch  2 taken 216 (fallthrough)
    #####: 6178:	if (n == (unsigned)(-1)) {
branch  0 never executed
branch  1 never executed
    #####: 6179:	    write_error();
call    0 never executed
        -: 6180:	}
    #####: 6181:	cnt -= n;
    #####: 6182:	buf = (voidp)((char*)buf+n);
        -: 6183:    }
      216: 6184:}
        -: 6185:
        -: 6186:/* ========================================================================
        -: 6187: * Put string s in lower case, return s.
        -: 6188: */
function strlwr called 4 returned 100% blocks executed 88%
        4: 6189:char *strlwr(s)
        -: 6190:    char *s;
        -: 6191:{
        -: 6192:    char *t;
     123*: 6193:    for (t = s; *t; t++) *t = tolow(*t);
branch  0 taken 0 (fallthrough)
branch  1 taken 119
branch  2 taken 119
branch  3 taken 4 (fallthrough)
        4: 6194:    return s;
        -: 6195:}
        -: 6196:
        -: 6197:/* ========================================================================
        -: 6198: * Return the base name of a file (remove any directory prefix and
        -: 6199: * any version suffix). For systems with file names that are not
        -: 6200: * case sensitive, force the base name to lower case.
        -: 6201: */
function basename called 214 returned 100% blocks executed 100%
      214: 6202:char *basename(fname)
        -: 6203:    char *fname;
        -: 6204:{
        -: 6205:    char *p;
        -: 6206:
      214: 6207:    if ((p = strrchr(fname, PATH_SEP))  != NULL) fname = p+1;
branch  0 taken 214 (fallthrough)
branch  1 taken 0
        -: 6208:#ifdef PATH_SEP2
        -: 6209:    if ((p = strrchr(fname, PATH_SEP2)) != NULL) fname = p+1;
        -: 6210:#endif
        -: 6211:#ifdef PATH_SEP3
        -: 6212:    if ((p = strrchr(fname, PATH_SEP3)) != NULL) fname = p+1;
        -: 6213:#endif
        -: 6214:#ifdef SUFFIX_SEP
        -: 6215:    if ((p = strrchr(fname, SUFFIX_SEP)) != NULL) *p = '\0';
        -: 6216:#endif
        -: 6217:    if (casemap('A') == 'a') strlwr(fname);
      214: 6218:    return fname;
        -: 6219:}
        -: 6220:
        -: 6221:#if defined(NO_STRING_H) && !defined(STDC_HEADERS)
        -: 6222:
        -: 6223:/* Provide missing strspn and strcspn functions. */
        -: 6224:
        -: 6225:#  ifndef __STDC__
        -: 6226:#    define const
        -: 6227:#  endif
        -: 6228:
        -: 6229:int strspn  OF((const char *s, const char *accept));
        -: 6230:int strcspn OF((const char *s, const char *reject));
        -: 6231:
        -: 6232:/* ========================================================================
        -: 6233: * Return the length of the maximum initial segment
        -: 6234: * of s which contains only characters in accept.
        -: 6235: */
        -: 6236:int strspn(s, accept)
        -: 6237:    const char *s;
        -: 6238:    const char *accept;
        -: 6239:{
        -: 6240:    register const char *p;
        -: 6241:    register const char *a;
        -: 6242:    register int count = 0;
        -: 6243:
        -: 6244:    for (p = s; *p != '\0'; ++p) {
        -: 6245:	for (a = accept; *a != '\0'; ++a) {
        -: 6246:	    if (*p == *a) break;
        -: 6247:	}
        -: 6248:	if (*a == '\0') return count;
        -: 6249:	++count;
        -: 6250:    }
        -: 6251:    return count;
        -: 6252:}
        -: 6253:
        -: 6254:/* ========================================================================
        -: 6255: * Return the length of the maximum inital segment of s
        -: 6256: * which contains no characters from reject.
        -: 6257: */
        -: 6258:int strcspn(s, reject)
        -: 6259:    const char *s;
        -: 6260:    const char *reject;
        -: 6261:{
        -: 6262:    register int count = 0;
        -: 6263:
        -: 6264:    while (*s != '\0') {
        -: 6265:	if (strchr(reject, *s++) != NULL) return count;
        -: 6266:	++count;
        -: 6267:    }
        -: 6268:    return count;
        -: 6269:}
        -: 6270:
        -: 6271:#endif /* NO_STRING_H */
        -: 6272:
        -: 6273:/* ========================================================================
        -: 6274: * Add an environment variable (if any) before argv, and update argc.
        -: 6275: * Return the expanded environment variable to be freed later, or NULL 
        -: 6276: * if no options were added to argv.
        -: 6277: */
        -: 6278:#define SEPARATOR	" \t"	/* separators in env variable */
        -: 6279:
function add_envopt called 214 returned 100% blocks executed 15%
      214: 6280:char *add_envopt(argcp, argvp, env)
        -: 6281:    int *argcp;          /* pointer to argc */
        -: 6282:    char ***argvp;       /* pointer to argv */
        -: 6283:    char *env;           /* name of environment variable */
        -: 6284:{
        -: 6285:    char *p;             /* running pointer through env variable */
        -: 6286:    char **oargv;        /* runs through old argv array */
        -: 6287:    char **nargv;        /* runs through new argv array */
      214: 6288:    int	 oargc = *argcp; /* old argc */
      214: 6289:    int  nargc = 0;      /* number of arguments in env variable */
        -: 6290:
      214: 6291:    env = (char*)getenv(env);
call    0 returned 214
      214: 6292:    if (env == NULL) return NULL;
branch  0 taken 214 (fallthrough)
branch  1 taken 0
        -: 6293:
    #####: 6294:    p = (char*)xmalloc(strlen(env)+1);
call    0 never executed
    #####: 6295:    env = strcpy(p, env);                    /* keep env variable intact */
        -: 6296:
    #####: 6297:    for (p = env; *p; nargc++ ) {            /* move through env */
branch  0 never executed
branch  1 never executed
    #####: 6298:	p += strspn(p, SEPARATOR);	     /* skip leading separators */
    #####: 6299:	if (*p == '\0') break;
branch  0 never executed
branch  1 never executed
        -: 6300:
    #####: 6301:	p += strcspn(p, SEPARATOR);	     /* find end of word */
    #####: 6302:	if (*p) *p++ = '\0';		     /* mark it */
branch  0 never executed
branch  1 never executed
        -: 6303:    }
    #####: 6304:    if (nargc == 0) {
branch  0 never executed
branch  1 never executed
    #####: 6305:	free(env); env = NULL;
    #####: 6306:	return NULL;
        -: 6307:    }
    #####: 6308:    *argcp += nargc;
        -: 6309:    /* Allocate the new argv array, with an extra element just in case
        -: 6310:     * the original arg list did not end with a NULL.
        -: 6311:     */
    #####: 6312:    nargv = (char**)calloc(*argcp+1, sizeof(char *));
    #####: 6313:    if (nargv == NULL) error("out of memory");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 6314:    oargv  = *argvp;
    #####: 6315:    *argvp = nargv;
        -: 6316:
        -: 6317:    /* Copy the program name first */
    #####: 6318:    if (oargc-- < 0) error("argc<=0");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 6319:    *(nargv++) = *(oargv++);
        -: 6320:
        -: 6321:    /* Then copy the environment args */
    #####: 6322:    for (p = env; nargc > 0; nargc--) {
branch  0 never executed
branch  1 never executed
    #####: 6323:	p += strspn(p, SEPARATOR);	     /* skip separators */
    #####: 6324:	*(nargv++) = p;			     /* store start */
    #####: 6325:	while (*p++) ;			     /* skip over word */
branch  0 never executed
branch  1 never executed
        -: 6326:    }
        -: 6327:
        -: 6328:    /* Finally copy the old args and add a NULL (usual convention) */
    #####: 6329:    while (oargc--) *(nargv++) = *(oargv++);
branch  0 never executed
branch  1 never executed
    #####: 6330:    *nargv = NULL;
    #####: 6331:    return env;
        -: 6332:}
        -: 6333:
        -: 6334:/* ========================================================================
        -: 6335: * Error handlers.
        -: 6336: */
function error called 0 returned 0% blocks executed 0%
    #####: 6337:void error(m)
        -: 6338:    char *m;
        -: 6339:{
    #####: 6340:    fprintf(stderr, "\n%s: %s: %s\n", progname, ifname, m);
call    0 never executed
    #####: 6341:    abort_gzip();
call    0 never executed
    #####: 6342:}
        -: 6343:
function warn called 0 returned 0% blocks executed 0%
    #####: 6344:void warn(a, b)
        -: 6345:    char *a, *b;            /* message strings juxtaposed in output */
        -: 6346:{
    #####: 6347:    WARN((stderr, "%s: %s: warning: %s%s\n", progname, ifname, a, b));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6348:}
        -: 6349:
function read_error called 1 returned 0% blocks executed 83%
        1: 6350:void read_error()
        -: 6351:{
        1: 6352:    fprintf(stderr, "\n%s: ", progname);
call    0 returned 1
        1: 6353:    if (errno != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6354:	perror(ifname);
call    0 never executed
        -: 6355:    } else {
        1: 6356:	fprintf(stderr, "%s: unexpected end of file\n", ifname);
call    0 returned 1
        -: 6357:    }
        1: 6358:    abort_gzip();
call    0 returned 0
    #####: 6359:}
        -: 6360:
function write_error called 0 returned 0% blocks executed 0%
    #####: 6361:void write_error()
        -: 6362:{
    #####: 6363:    fprintf(stderr, "\n%s: ", progname);
call    0 never executed
    #####: 6364:    perror(ofname);
call    0 never executed
    #####: 6365:    abort_gzip();
call    0 never executed
    #####: 6366:}
        -: 6367:
        -: 6368:/* ========================================================================
        -: 6369: * Display compression ratio on stderr.
        -: 6370: */
function display_ratio called 81 returned 100% blocks executed 60%
       81: 6371:void display_ratio(num, den)
        -: 6372:    long num;
        -: 6373:    long den;
        -: 6374:{
        -: 6375:    long ratio;  /* 1000 times the compression ratio */
        -: 6376:
       81: 6377:    if (den == 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 81
    #####: 6378:	ratio = 0; /* no compression */
       81: 6379:    } else if (den < 2147483L) { /* (2**31 -1)/1000 */
branch  0 taken 81 (fallthrough)
branch  1 taken 0
       81: 6380:	ratio = 1000L*num/den;
        -: 6381:    } else {
    #####: 6382:	ratio = num/(den/1000L);
        -: 6383:    }
       81: 6384:    if (ratio < 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 81
    #####: 6385:	putc('-', stderr);
call    0 never executed
    #####: 6386:	ratio = -ratio;
        -: 6387:    }
       81: 6388:    fprintf(stderr, "%2ld.%ld%%", ratio / 10L, ratio % 10L);
call    0 returned 81
       81: 6389:}
        -: 6390:
        -: 6391:
        -: 6392:/* ========================================================================
        -: 6393: * Semi-safe malloc -- never returns NULL.
        -: 6394: */
function xmalloc called 0 returned 0% blocks executed 0%
    #####: 6395:voidp xmalloc (size)
        -: 6396:    unsigned size;
        -: 6397:{
    #####: 6398:    voidp cp = (voidp)malloc (size);
        -: 6399:
    #####: 6400:    if (cp == NULL) error("out of memory");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 6401:    return cp;
        -: 6402:}
        -: 6403:
        -: 6404:/* ========================================================================
        -: 6405: * Table of CRC-32's of all single-byte values (made by makecrc.c)
        -: 6406: */
        -: 6407:ulg crc_32_tab[] = {
        -: 6408:  0x00000000L, 0x77073096L, 0xee0e612cL, 0x990951baL, 0x076dc419L,
        -: 6409:  0x706af48fL, 0xe963a535L, 0x9e6495a3L, 0x0edb8832L, 0x79dcb8a4L,
        -: 6410:  0xe0d5e91eL, 0x97d2d988L, 0x09b64c2bL, 0x7eb17cbdL, 0xe7b82d07L,
        -: 6411:  0x90bf1d91L, 0x1db71064L, 0x6ab020f2L, 0xf3b97148L, 0x84be41deL,
        -: 6412:  0x1adad47dL, 0x6ddde4ebL, 0xf4d4b551L, 0x83d385c7L, 0x136c9856L,
        -: 6413:  0x646ba8c0L, 0xfd62f97aL, 0x8a65c9ecL, 0x14015c4fL, 0x63066cd9L,
        -: 6414:  0xfa0f3d63L, 0x8d080df5L, 0x3b6e20c8L, 0x4c69105eL, 0xd56041e4L,
        -: 6415:  0xa2677172L, 0x3c03e4d1L, 0x4b04d447L, 0xd20d85fdL, 0xa50ab56bL,
        -: 6416:  0x35b5a8faL, 0x42b2986cL, 0xdbbbc9d6L, 0xacbcf940L, 0x32d86ce3L,
        -: 6417:  0x45df5c75L, 0xdcd60dcfL, 0xabd13d59L, 0x26d930acL, 0x51de003aL,
        -: 6418:  0xc8d75180L, 0xbfd06116L, 0x21b4f4b5L, 0x56b3c423L, 0xcfba9599L,
        -: 6419:  0xb8bda50fL, 0x2802b89eL, 0x5f058808L, 0xc60cd9b2L, 0xb10be924L,
        -: 6420:  0x2f6f7c87L, 0x58684c11L, 0xc1611dabL, 0xb6662d3dL, 0x76dc4190L,
        -: 6421:  0x01db7106L, 0x98d220bcL, 0xefd5102aL, 0x71b18589L, 0x06b6b51fL,
        -: 6422:  0x9fbfe4a5L, 0xe8b8d433L, 0x7807c9a2L, 0x0f00f934L, 0x9609a88eL,
        -: 6423:  0xe10e9818L, 0x7f6a0dbbL, 0x086d3d2dL, 0x91646c97L, 0xe6635c01L,
        -: 6424:  0x6b6b51f4L, 0x1c6c6162L, 0x856530d8L, 0xf262004eL, 0x6c0695edL,
        -: 6425:  0x1b01a57bL, 0x8208f4c1L, 0xf50fc457L, 0x65b0d9c6L, 0x12b7e950L,
        -: 6426:  0x8bbeb8eaL, 0xfcb9887cL, 0x62dd1ddfL, 0x15da2d49L, 0x8cd37cf3L,
        -: 6427:  0xfbd44c65L, 0x4db26158L, 0x3ab551ceL, 0xa3bc0074L, 0xd4bb30e2L,
        -: 6428:  0x4adfa541L, 0x3dd895d7L, 0xa4d1c46dL, 0xd3d6f4fbL, 0x4369e96aL,
        -: 6429:  0x346ed9fcL, 0xad678846L, 0xda60b8d0L, 0x44042d73L, 0x33031de5L,
        -: 6430:  0xaa0a4c5fL, 0xdd0d7cc9L, 0x5005713cL, 0x270241aaL, 0xbe0b1010L,
        -: 6431:  0xc90c2086L, 0x5768b525L, 0x206f85b3L, 0xb966d409L, 0xce61e49fL,
        -: 6432:  0x5edef90eL, 0x29d9c998L, 0xb0d09822L, 0xc7d7a8b4L, 0x59b33d17L,
        -: 6433:  0x2eb40d81L, 0xb7bd5c3bL, 0xc0ba6cadL, 0xedb88320L, 0x9abfb3b6L,
        -: 6434:  0x03b6e20cL, 0x74b1d29aL, 0xead54739L, 0x9dd277afL, 0x04db2615L,
        -: 6435:  0x73dc1683L, 0xe3630b12L, 0x94643b84L, 0x0d6d6a3eL, 0x7a6a5aa8L,
        -: 6436:  0xe40ecf0bL, 0x9309ff9dL, 0x0a00ae27L, 0x7d079eb1L, 0xf00f9344L,
        -: 6437:  0x8708a3d2L, 0x1e01f268L, 0x6906c2feL, 0xf762575dL, 0x806567cbL,
        -: 6438:  0x196c3671L, 0x6e6b06e7L, 0xfed41b76L, 0x89d32be0L, 0x10da7a5aL,
        -: 6439:  0x67dd4accL, 0xf9b9df6fL, 0x8ebeeff9L, 0x17b7be43L, 0x60b08ed5L,
        -: 6440:  0xd6d6a3e8L, 0xa1d1937eL, 0x38d8c2c4L, 0x4fdff252L, 0xd1bb67f1L,
        -: 6441:  0xa6bc5767L, 0x3fb506ddL, 0x48b2364bL, 0xd80d2bdaL, 0xaf0a1b4cL,
        -: 6442:  0x36034af6L, 0x41047a60L, 0xdf60efc3L, 0xa867df55L, 0x316e8eefL,
        -: 6443:  0x4669be79L, 0xcb61b38cL, 0xbc66831aL, 0x256fd2a0L, 0x5268e236L,
        -: 6444:  0xcc0c7795L, 0xbb0b4703L, 0x220216b9L, 0x5505262fL, 0xc5ba3bbeL,
        -: 6445:  0xb2bd0b28L, 0x2bb45a92L, 0x5cb36a04L, 0xc2d7ffa7L, 0xb5d0cf31L,
        -: 6446:  0x2cd99e8bL, 0x5bdeae1dL, 0x9b64c2b0L, 0xec63f226L, 0x756aa39cL,
        -: 6447:  0x026d930aL, 0x9c0906a9L, 0xeb0e363fL, 0x72076785L, 0x05005713L,
        -: 6448:  0x95bf4a82L, 0xe2b87a14L, 0x7bb12baeL, 0x0cb61b38L, 0x92d28e9bL,
        -: 6449:  0xe5d5be0dL, 0x7cdcefb7L, 0x0bdbdf21L, 0x86d3d2d4L, 0xf1d4e242L,
        -: 6450:  0x68ddb3f8L, 0x1fda836eL, 0x81be16cdL, 0xf6b9265bL, 0x6fb077e1L,
        -: 6451:  0x18b74777L, 0x88085ae6L, 0xff0f6a70L, 0x66063bcaL, 0x11010b5cL,
        -: 6452:  0x8f659effL, 0xf862ae69L, 0x616bffd3L, 0x166ccf45L, 0xa00ae278L,
        -: 6453:  0xd70dd2eeL, 0x4e048354L, 0x3903b3c2L, 0xa7672661L, 0xd06016f7L,
        -: 6454:  0x4969474dL, 0x3e6e77dbL, 0xaed16a4aL, 0xd9d65adcL, 0x40df0b66L,
        -: 6455:  0x37d83bf0L, 0xa9bcae53L, 0xdebb9ec5L, 0x47b2cf7fL, 0x30b5ffe9L,
        -: 6456:  0xbdbdf21cL, 0xcabac28aL, 0x53b39330L, 0x24b4a3a6L, 0xbad03605L,
        -: 6457:  0xcdd70693L, 0x54de5729L, 0x23d967bfL, 0xb3667a2eL, 0xc4614ab8L,
        -: 6458:  0x5d681b02L, 0x2a6f2b94L, 0xb40bbe37L, 0xc30c8ea1L, 0x5a05df1bL,
        -: 6459:  0x2d02ef8dL
        -: 6460:};
        -: 6461:/* zip.c -- compress files to the gzip or pkzip format
        -: 6462: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 6463: * This is free software; you can redistribute it and/or modify it under the
        -: 6464: * terms of the GNU General Public License, see the file COPYING.
        -: 6465: */
        -: 6466:
        -: 6467:/*
        -: 6468:#ifndef lint
        -: 6469:static char rcsid[] = "$Id: zip.c,v 0.16 1993/05/28 14:51:17 jloup Exp $";
        -: 6470:#endif
        -: 6471:*/
        -: 6472:
        -: 6473:#ifdef HAVE_UNISTD_H
        -: 6474:#  include <unistd.h>
        -: 6475:#endif
        -: 6476:#ifndef NO_FCNTL_H
        -: 6477:#  include <fcntl.h>
        -: 6478:#endif
        -: 6479:
        -: 6480:local ulg crc;       /* crc on uncompressed file data */
        -: 6481:long header_bytes;   /* number of bytes in gzip header */
        -: 6482:
        -: 6483:/* ===========================================================================
        -: 6484: * Deflate in to out.
        -: 6485: * IN assertions: the input and output buffers are cleared.
        -: 6486: *   The variables time_stamp and save_orig_name are initialized.
        -: 6487: */
function zip called 175 returned 100% blocks executed 44%
      175: 6488:int zip(in, out)
        -: 6489:    int in, out;            /* input and output file descriptors */
        -: 6490:{
      175: 6491:    uch  flags = 0;         /* general purpose bit flags */
      175: 6492:    ush  attr = 0;          /* ascii/binary flag */
      175: 6493:    ush  deflate_flags = 0; /* pkzip -es, -en or -ex equivalent */
        -: 6494:
      175: 6495:    ifd = in;
      175: 6496:    ofd = out;
      175: 6497:    outcnt = 0;
        -: 6498:
        -: 6499:    /* Write the header to the gzip file. See algorithm.doc for the format */
        -: 6500:
      175: 6501:    method = DEFLATED;
     175*: 6502:    put_byte(GZIP_MAGIC[0]); /* magic header */
branch  0 taken 0 (fallthrough)
branch  1 taken 175
call    2 never executed
     175*: 6503:    put_byte(GZIP_MAGIC[1]);
branch  0 taken 0 (fallthrough)
branch  1 taken 175
call    2 never executed
     175*: 6504:    put_byte(DEFLATED);      /* compression method */
branch  0 taken 0 (fallthrough)
branch  1 taken 175
call    2 never executed
        -: 6505:
      175: 6506:    if (save_orig_name) {
branch  0 taken 0 (fallthrough)
branch  1 taken 175
    #####: 6507:	flags |= ORIG_NAME;
        -: 6508:    }
     175*: 6509:    put_byte(flags);         /* general flags */
branch  0 taken 0 (fallthrough)
branch  1 taken 175
call    2 never executed
     175*: 6510:    put_long(time_stamp);
branch  0 taken 175 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 taken 175 (fallthrough)
branch  9 taken 0
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
        -: 6511:
        -: 6512:    /* Write deflated file to zip file */
      175: 6513:    crc = updcrc(0, 0);
call    0 returned 175
        -: 6514:
      175: 6515:    bi_init(out);
call    0 returned 175
      175: 6516:    ct_init(&attr, &method);
call    0 returned 175
      175: 6517:    lm_init(level, &deflate_flags);
call    0 returned 175
        -: 6518:
     175*: 6519:    put_byte((uch)deflate_flags); /* extra flags */
branch  0 taken 0 (fallthrough)
branch  1 taken 175
call    2 never executed
     175*: 6520:    put_byte(OS_CODE);            /* OS identifier */
branch  0 taken 0 (fallthrough)
branch  1 taken 175
call    2 never executed
        -: 6521:
      175: 6522:    if (save_orig_name) {
branch  0 taken 0 (fallthrough)
branch  1 taken 175
    #####: 6523:	char *p = basename(ifname); /* Don't save the directory part. */
call    0 never executed
        -: 6524:	do {
    #####: 6525:	    put_char(*p);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 6526:	} while (*p++);
branch  0 never executed
branch  1 never executed
        -: 6527:    }
      175: 6528:    header_bytes = (long)outcnt;
        -: 6529:
      175: 6530:    (void)deflate();
call    0 returned 175
        -: 6531:
        -: 6532:#if !defined(NO_SIZE_CHECK) && !defined(RECORD_IO)
        -: 6533:  /* Check input size (but not in VMS -- variable record lengths mess it up)
        -: 6534:   * and not on MSDOS -- diet in TSR mode reports an incorrect file size)
        -: 6535:   */
        -: 6536:    if (ifile_size != -1L && isize != (ulg)ifile_size) {
        -: 6537:	Trace((stderr, " actual=%ld, read=%ld ", ifile_size, isize));
        -: 6538:	fprintf(stderr, "%s: %s: file size changed while zipping\n",
        -: 6539:		progname, ifname);
        -: 6540:    }
        -: 6541:#endif
        -: 6542:
        -: 6543:    /* Write the crc and uncompressed size */
     175*: 6544:    put_long(crc);
branch  0 taken 175 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 taken 175 (fallthrough)
branch  9 taken 0
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
     175*: 6545:    put_long(isize);
branch  0 taken 175 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 taken 175 (fallthrough)
branch  9 taken 0
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
        -: 6546:#ifdef FAULTY_F_KL_6
        -: 6547:    header_bytes = 2*sizeof(long);
        -: 6548:#else
      175: 6549:    header_bytes += 2*sizeof(long);
        -: 6550:#endif
        -: 6551:
      175: 6552:    flush_outbuf();
call    0 returned 175
      175: 6553:    return OK;
        -: 6554:}
        -: 6555:
        -: 6556:
        -: 6557:/* ===========================================================================
        -: 6558: * Read a new buffer from the current input file, perform end-of-line
        -: 6559: * translation, and update the crc and input file size.
        -: 6560: * IN assertion: size >= 2 (for end-of-line translation)
        -: 6561: */
function file_read called 3570 returned 100% blocks executed 100%
     3570: 6562:int file_read(buf, size)
        -: 6563:    char *buf;
        -: 6564:    unsigned size;
        -: 6565:{
        -: 6566:    unsigned len;
        -: 6567:
        -: 6568:    Assert(insize == 0, "inbuf not empty");
        -: 6569:
     3570: 6570:    len = read(ifd, buf, size);
call    0 returned 3570
     3570: 6571:    if (len == (unsigned)(-1) || len == 0) return (int)len;
branch  0 taken 3569 (fallthrough)
branch  1 taken 1
branch  2 taken 174 (fallthrough)
branch  3 taken 3395
        -: 6572:
     3395: 6573:    crc = updcrc((uch*)buf, len);
call    0 returned 3395
     3395: 6574:    isize += (ulg)len;
     3395: 6575:    return (int)len;
        -: 6576:}
