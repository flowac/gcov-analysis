        -:    0:Source:sed.c
        -:    0:Graph:sed.gcno
        -:    0:Data:sed.gcda
        -:    0:Runs:370
        -:    1:#define STDC_HEADERS 1
        -:    2:#define HAVE_STRING_H 1
        -:    3:#define HAVE_VPRINTF 1
        -:    4:#define HAVE_BCOPY 1
        -:    5:#define HAVE_MEMCPY 1
        -:    6:#define HAVE_ALLOCA_H 1
        -:    7:
        -:    8:/*  GNU SED, a batch stream editor.
        -:    9:    Copyright (C) 1989, 1990, 1991 Free Software Foundation, Inc.
        -:   10:
        -:   11:    This program is free software; you can redistribute it and/or modify
        -:   12:    it under the terms of the GNU General Public License as published by
        -:   13:    the Free Software Foundation; either version 2, or (at your option)
        -:   14:    any later version.
        -:   15:
        -:   16:    This program is distributed in the hope that it will be useful,
        -:   17:    but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   18:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   19:    GNU General Public License for more details.
        -:   20:
        -:   21:    You should have received a copy of the GNU General Public License
        -:   22:    along with this program; if not, write to the Free Software
        -:   23:    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:   24:    
        -:   25:/* All the occurences of argv[0] is replace by myname to remove Nondeterminism by
        -:   26:   Amit Goel on August 30 2001 */
        -:   27:
        -:   28:#ifdef __STDC__
        -:   29:#define VOID void
        -:   30:#else
        -:   31:#define VOID char
        -:   32:#endif
        -:   33:
        -:   34:
        -:   35:#define _GNU_SOURCE
        -:   36:#include <ctype.h>
        -:   37:#ifndef isblank
        -:   38:#define isblank(c) ((c) == ' ' || (c) == '\t')
        -:   39:#endif
        -:   40:#include <stdio.h>
        -:   41:
        -:   42:#undef stderr
        -:   43:#define stderr stdout
        -:   44:
        -:   45:#include <sys/types.h>
        -:   46:#include "regex.h"
        -:   47:#include "getopt.h"
        -:   48:#include "FaultSeeds.h"
        -:   49:#if defined(STDC_HEADERS)
        -:   50:#include <stdlib.h>
        -:   51:#endif
        -:   52:#if HAVE_STRING_H || defined(STDC_HEADERS)
        -:   53:#include <string.h>
        -:   54:#if !defined(STDC_HEADERS)
        -:   55:#include <memory.h>
        -:   56:#endif
        -:   57:#else
        -:   58:#include <strings.h>
        -:   59:#endif
        -:   60:
        -:   61:#include <errno.h>
        -:   62:
        -:   63:#ifndef HAVE_BCOPY
        -:   64:#ifdef HAVE_MEMCPY
        -:   65:#define bcopy(FROM,TO,LEN)  memcpy(TO,FROM,LEN)
        -:   66:#else
        -:   67:void
        -:   68:bcopy (from, to, len)
        -:   69:     char *from;
        -:   70:     char *to;
        -:   71:     int len;
        -:   72:{
        -:   73:  if (from < to)
        -:   74:    {
        -:   75:      from += len - 1;
        -:   76:      to += len - 1;
        -:   77:      while (len--)
        -:   78:	*to-- = *from--;
        -:   79:    }
        -:   80:  else
        -:   81:    while (len--)
        -:   82:      *to++ = *from++;
        -:   83:}
        -:   84:
        -:   85:#endif
        -:   86:#endif
        -:   87:
        -:   88:char *version_string = "GNU sed version 1.18";
        -:   89:
        -:   90:/* Struct vector is used to describe a chunk of a compiled sed program.  
        -:   91: * There is one vector for the main program, and one for each { } pair,
        -:   92: * and one for the entire program.  For {} blocks, RETURN_[VI] tells where
        -:   93: * to continue execution after this VECTOR.
        -:   94: */
        -:   95:
        -:   96:struct vector
        -:   97:{
        -:   98:  struct sed_cmd *v;
        -:   99:  int v_length;
        -:  100:  int v_allocated;
        -:  101:  struct vector *return_v;
        -:  102:  int return_i;
        -:  103:};
        -:  104:
        -:  105:
        -:  106:/* Goto structure is used to hold both GOTO's and labels.  There are two
        -:  107: * separate lists, one of goto's, called 'jumps', and one of labels, called
        -:  108: * 'labels'.
        -:  109: * the V element points to the descriptor for the program-chunk in which the
        -:  110: * goto was encountered.
        -:  111: * the v_index element counts which element of the vector actually IS the
        -:  112: * goto/label.  The first element of the vector is zero.
        -:  113: * the NAME element is the null-terminated name of the label.
        -:  114: * next is the next goto/label in the list. 
        -:  115: */
        -:  116:
        -:  117:struct sed_label
        -:  118:{
        -:  119:  struct vector *v;
        -:  120:  int v_index;
        -:  121:  char *name;
        -:  122:  struct sed_label *next;
        -:  123:};
        -:  124:
        -:  125:/* ADDR_TYPE is zero for a null address,
        -:  126: *  one if addr_number is valid, or
        -:  127: * two if addr_regex is valid,
        -:  128: * three, if the address is '$'
        -:  129: * Other values are undefined.
        -:  130: */
        -:  131:
        -:  132:enum addr_types
        -:  133:{
        -:  134:  addr_is_null = 0,
        -:  135:  addr_is_num = 1,
        -:  136:  addr_is_regex = 2,
        -:  137:  addr_is_last = 3
        -:  138:};
        -:  139:
        -:  140:struct addr
        -:  141:{
        -:  142:  int addr_type;
        -:  143:  struct re_pattern_buffer *addr_regex;
        -:  144:  int addr_number;
        -:  145:};
        -:  146:
        -:  147:
        -:  148:/* Aflags:  If the low order bit is set, a1 has been
        -:  149: * matched; apply this command until a2 matches.
        -:  150: * If the next bit is set, apply this command to all
        -:  151: * lines that DON'T match the address(es).
        -:  152: */
        -:  153:
        -:  154:#define A1_MATCHED_BIT	01
        -:  155:#define ADDR_BANG_BIT	02
        -:  156:
        -:  157:struct sed_cmd
        -:  158:{
        -:  159:  struct addr a1, a2;
        -:  160:  int aflags;
        -:  161:  
        -:  162:  char cmd;
        -:  163:  
        -:  164:  union
        -:  165:    {
        -:  166:      /* This structure is used for a, i, and c commands */
        -:  167:      struct
        -:  168:	{
        -:  169:	  char *text;
        -:  170:	  int text_len;
        -:  171:	}
        -:  172:      cmd_txt;
        -:  173:      
        -:  174:      /* This is used for b and t commands */
        -:  175:      struct sed_cmd *label;
        -:  176:      
        -:  177:      /* This for r and w commands */
        -:  178:      FILE *io_file;
        -:  179:      
        -:  180:      /* This for the hairy s command */
        -:  181:      /* For the flags var:
        -:  182:	 low order bit means the 'g' option was given,
        -:  183:	 next bit means the 'p' option was given,
        -:  184:	 and the next bit means a 'w' option was given,
        -:  185:	 and wio_file contains the file to write to. */
        -:  186:      
        -:  187:#define S_GLOBAL_BIT	01
        -:  188:#define S_PRINT_BIT	02
        -:  189:#define S_WRITE_BIT	04
        -:  190:#define S_NUM_BIT	010
        -:  191:      
        -:  192:      struct
        -:  193:	{
        -:  194:	  struct re_pattern_buffer *regx;
        -:  195:	  char *replacement;
        -:  196:	  int replace_length;
        -:  197:	  int flags;
        -:  198:	  int numb;
        -:  199:	  FILE *wio_file;
        -:  200:	}
        -:  201:      cmd_regex;
        -:  202:      
        -:  203:      /* This for the y command */
        -:  204:      unsigned char *translate;
        -:  205:      
        -:  206:      /* For { */
        -:  207:      struct vector *sub;
        -:  208:      
        -:  209:      /* for t and b */
        -:  210:      struct sed_label *jump;
        -:  211:    } x;
        -:  212:};
        -:  213:
        -:  214:/* Sed operates a line at a time. */
        -:  215:struct line
        -:  216:{
        -:  217:  char *text;			/* Pointer to line allocated by malloc. */
        -:  218:  int length;			/* Length of text. */
        -:  219:  int alloc;			/* Allocated space for text. */
        -:  220:};
        -:  221:
        -:  222:/* This structure holds information about files opend by the 'r', 'w',
        -:  223:   and 's///w' commands.  In paticular, it holds the FILE pointer to
        -:  224:   use, the file's name, a flag that is non-zero if the file is being
        -:  225:   read instead of written. */
        -:  226:
        -:  227:#define NUM_FPS	32
        -:  228:struct
        -:  229:  {
        -:  230:    FILE *phile;
        -:  231:    char *name;
        -:  232:    int readit;
        -:  233:  }
        -:  234:
        -:  235:file_ptrs[NUM_FPS];
        -:  236:
        -:  237:
        -:  238:#if defined(__STDC__)
        -:  239:# define P_(s) s
        -:  240:#else
        -:  241:# define P_(s) ()
        -:  242:#endif
        -:  243:
        -:  244:void close_files ();
        -:  245:void panic P_ ((char *str,...));
        -:  246:char *__fp_name P_ ((FILE * fp));
        -:  247:FILE *ck_fopen P_ ((char *name, char *mode));
        -:  248:void ck_fwrite P_ ((char *ptr, int size, int nmemb, FILE * stream));
        -:  249:void ck_fclose P_ ((FILE * stream));
        -:  250:VOID *ck_malloc P_ ((int size));
        -:  251:VOID *ck_realloc P_ ((VOID * ptr, int size));
        -:  252:char *ck_strdup P_ ((char *str));
        -:  253:VOID *init_buffer P_ ((void));
        -:  254:void flush_buffer P_ ((VOID * bb));
        -:  255:int size_buffer P_ ((VOID * b));
        -:  256:void add_buffer P_ ((VOID * bb, char *p, int n));
        -:  257:void add1_buffer P_ ((VOID * bb, int ch));
        -:  258:char *get_buffer P_ ((VOID * bb));
        -:  259:
        -:  260:void compile_string P_ ((char *str));
        -:  261:void compile_file P_ ((char *str));
        -:  262:struct vector *compile_program P_ ((struct vector * vector, int));
        -:  263:void bad_prog P_ ((char *why));
        -:  264:int inchar P_ ((void));
        -:  265:void savchar P_ ((int ch));
        -:  266:int compile_address P_ ((struct addr * addr));
        -:  267:void compile_regex P_ ((int slash));
        -:  268:struct sed_label *setup_jump P_ ((struct sed_label * list, struct sed_cmd * cmd, struct vector * vec));
        -:  269:FILE *compile_filename P_ ((int readit));
        -:  270:void read_file P_ ((char *name));
        -:  271:void execute_program P_ ((struct vector * vec));
        -:  272:int match_address P_ ((struct addr * addr));
        -:  273:int read_pattern_space P_ ((void));
        -:  274:void append_pattern_space P_ ((void));
        -:  275:void line_copy P_ ((struct line * from, struct line * to));
        -:  276:void line_append P_ ((struct line * from, struct line * to));
        -:  277:void str_append P_ ((struct line * to, char *string, int length));
        -:  278:void usage P_ ((int));
        -:  279:
        -:  280:extern char *myname;
        -:  281:
        -:  282:/* If set, don't write out the line unless explictly told to */
        -:  283:int no_default_output = 0;
        -:  284:
        -:  285:/* Current input line # */
        -:  286:int input_line_number = 0;
        -:  287:
        -:  288:/* Are we on the last input file? */
        -:  289:int last_input_file = 0;
        -:  290:
        -:  291:/* Have we hit EOF on the last input file?  This is used to decide if we
        -:  292:   have hit the '$' address yet. */
        -:  293:int input_EOF = 0;
        -:  294:
        -:  295:/* non-zero if a quit command has been executed. */
        -:  296:int quit_cmd = 0;
        -:  297:
        -:  298:/* Have we done any replacements lately?  This is used by the 't' command. */
        -:  299:int replaced = 0;
        -:  300:
        -:  301:/* How many '{'s are we executing at the moment */
        -:  302:int program_depth = 0;
        -:  303:
        -:  304:/* The complete compiled SED program that we are going to run */
        -:  305:struct vector *the_program = 0;
        -:  306:
        -:  307:/* information about labels and jumps-to-labels.  This is used to do
        -:  308:   the required backpatching after we have compiled all the scripts. */
        -:  309:struct sed_label *jumps = 0;
        -:  310:struct sed_label *labels = 0;
        -:  311:
        -:  312:/* The 'current' input line. */
        -:  313:struct line line;
        -:  314:
        -:  315:/* An input line that's been stored by later use by the program */
        -:  316:struct line hold;
        -:  317:
        -:  318:/* A 'line' to append to the current line when it comes time to write it out */
        -:  319:struct line append;
        -:  320:
        -:  321:
        -:  322:/* When we're reading a script command from a string, 'prog_start' and
        -:  323:   'prog_end' point to the beginning and end of the string.  This
        -:  324:   would allow us to compile script strings that contain nulls, except
        -:  325:   that script strings are only read from the command line, which is
        -:  326:   null-terminated */
        -:  327:unsigned char *prog_start;
        -:  328:unsigned char *prog_end;
        -:  329:
        -:  330:/* When we're reading a script command from a string, 'prog_cur' points
        -:  331:   to the current character in the string */
        -:  332:unsigned char *prog_cur;
        -:  333:
        -:  334:/* This is the name of the current script file.
        -:  335:   It is used for error messages. */
        -:  336:char *prog_name;
        -:  337:
        -:  338:/* This is the current script file.  If it is zero, we are reading
        -:  339:   from a string stored in 'prog_start' instead.  If both 'prog_file'
        -:  340:   and 'prog_start' are zero, we're in trouble! */
        -:  341:FILE *prog_file;
        -:  342:
        -:  343:/* this is the number of the current script line that we're compiling.  It is
        -:  344:   used to give out useful and informative error messages. */
        -:  345:int prog_line = 1;
        -:  346:
        -:  347:/* This is the file pointer that we're currently reading data from.  It may
        -:  348:   be stdin */
        -:  349:FILE *input_file;
        -:  350:
        -:  351:/* If this variable is non-zero at exit, one or more of the input
        -:  352:   files couldn't be opened. */
        -:  353:
        -:  354:int bad_input = 0;
        -:  355:
        -:  356:/* 'an empty regular expression is equivalent to the last regular
        -:  357:   expression read' so we have to keep track of the last regex used.
        -:  358:   Here's where we store a pointer to it (it is only malloc()'d once) */
        -:  359:struct re_pattern_buffer *last_regex;
        -:  360:
        -:  361:/* Various error messages we may want to print */
        -:  362:static char ONE_ADDR[] = "Command only uses one address";
        -:  363:static char NO_ADDR[] = "Command doesn't take any addresses";
        -:  364:static char LINE_JUNK[] = "Extra characters after command";
        -:  365:static char BAD_EOF[] = "Unexpected End-of-file";
        -:  366:static char NO_REGEX[] = "No previous regular expression";
        -:  367:static char NO_COMMAND[] = "Missing command";
        -:  368:
        -:  369:static struct option longopts[] =
        -:  370:{
        -:  371:  {"expression", 1, NULL, 'e'},
        -:  372:  {"file", 1, NULL, 'f'},
        -:  373:  {"quiet", 0, NULL, 'n'},
        -:  374:  {"silent", 0, NULL, 'n'},
        -:  375:  {"version", 0, NULL, 'V'},
        -:  376:  {"help", 0, NULL, 'h'},
        -:  377:  {NULL, 0, NULL, 0}
        -:  378:};
        -:  379:
        -:  380:int
function main called 370 returned 0% blocks executed 91%
      370:  381:main (argc, argv)
        -:  382:     int argc;
        -:  383:     char **argv;
        -:  384:{
        -:  385:  int opt;
      370:  386:  char *e_strings = NULL;
      370:  387:  int compiled = 0;
        -:  388:  struct sed_label *go, *lbl;
        -:  389:
        -:  390:  /* see regex.h */
      370:  391:  re_set_syntax (RE_SYNTAX_POSIX_BASIC);
call    0 returned 370
        -:  392: /* Commented by Amit Goel on 30th August 2001 to remove NonDeterminism */
        -:  393: /* myname = argv[0]; */
        -:  394: /* Added By Amit Goel on 30th August 2001 */
      370:  395:  myname = "Executable";
      733:  396:  while ((opt = getopt_long (argc, argv, "hne:f:V", longopts, (int *) 0))
call    0 returned 733
      733:  397:	 != EOF)
branch  0 taken 375
branch  1 taken 358 (fallthrough)
        -:  398:    {
      375:  399:      switch (opt)
branch  0 taken 7
branch  1 taken 20
branch  2 taken 339
branch  3 taken 2
branch  4 taken 0
branch  5 taken 7
        -:  400:	{
        7:  401:	case 'n':
        7:  402:	  no_default_output = 1;
        7:  403:	  break;
       20:  404:	case 'e':
       20:  405:	  if (e_strings == NULL)
branch  0 taken 19 (fallthrough)
branch  1 taken 1
        -:  406:	    {
       19:  407:	      e_strings = ck_malloc (strlen (optarg) + 2);
call    0 returned 19
       19:  408:	      strcpy (e_strings, optarg);
        -:  409:	    }
        -:  410:	  else
        -:  411:	    {
        1:  412:	      e_strings = ck_realloc (e_strings, strlen (e_strings) + strlen (optarg) + 2);
call    0 returned 1
        1:  413:	      strcat (e_strings, optarg);
        -:  414:	    }
       20:  415:	  strcat (e_strings, "\n");
       20:  416:	  compiled = 1;
       20:  417:	  break;
      339:  418:	case 'f':
      339:  419:	  compile_file (optarg);
call    0 returned 336
      336:  420:	  compiled = 1;
      336:  421:	  break;
        2:  422:	case 'V':
        2:  423:	  fprintf (stderr, "%s\n", version_string);
call    0 returned 2
        2:  424:	  exit (0);
call    0 returned 0
        -:  425:	  break;
    #####:  426:	case 'h':
    #####:  427:	  usage (0);
call    0 never executed
    #####:  428:	  break;
        7:  429:	default:
        7:  430:	  usage (4);
call    0 returned 0
    #####:  431:	  break;
        -:  432:	}
        -:  433:    }
      358:  434:  if (e_strings)
branch  0 taken 19 (fallthrough)
branch  1 taken 339
        -:  435:    {
       19:  436:      compile_string (e_strings);
call    0 returned 19
       19:  437:      free (e_strings);
        -:  438:    }
      358:  439:  if (!compiled)
branch  0 taken 5 (fallthrough)
branch  1 taken 353
        -:  440:    {
        5:  441:      if (optind == argc)
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  442:	usage (4);
call    0 never executed
        5:  443:      compile_string (argv[optind++]);
call    0 returned 0
        -:  444:    }
        -:  445:
      362:  446:  for (go = jumps; go; go = go->next)
branch  0 taken 9
branch  1 taken 353 (fallthrough)
        -:  447:    {
       11:  448:      for (lbl = labels; lbl; lbl = lbl->next)
branch  0 taken 7
branch  1 taken 4 (fallthrough)
        7:  449:	if (!strcmp (lbl->name, go->name))
branch  0 taken 5 (fallthrough)
branch  1 taken 2
        5:  450:	  break;
        9:  451:      if (*go->name && !lbl)
branch  0 taken 5 (fallthrough)
branch  1 taken 4
branch  2 taken 0 (fallthrough)
branch  3 taken 5
    #####:  452:	panic ("Can't find label for jump to '%s'", go->name);
call    0 never executed
        9:  453:      go->v->v[go->v_index].x.jump = lbl;
        -:  454:    }
        -:  455:
      353:  456:  line.length = 0;
      353:  457:  line.alloc = 50;
      353:  458:  line.text = ck_malloc (50);
call    0 returned 353
        -:  459:
      353:  460:  append.length = 0;
      353:  461:  append.alloc = 50;
      353:  462:  append.text = ck_malloc (50);
call    0 returned 353
        -:  463:
      353:  464:  hold.length = 1;
      353:  465:  hold.alloc = 50;
      353:  466:  hold.text = ck_malloc (50);
call    0 returned 353
      353:  467:  hold.text[0] = '\n';
        -:  468:
      353:  469:  if (argc <= optind)
branch  0 taken 1 (fallthrough)
branch  1 taken 352
        -:  470:    {
        1:  471:      last_input_file++;
        1:  472:      read_file ("-");
call    0 returned 1
        -:  473:    }
        -:  474:  else
      658:  475:    while (optind < argc)
branch  0 taken 353
branch  1 taken 305 (fallthrough)
        -:  476:      {
      353:  477:	if (optind == argc - 1)
branch  0 taken 352 (fallthrough)
branch  1 taken 1
      352:  478:	  last_input_file++;
      353:  479:	read_file (argv[optind]);
call    0 returned 353
      353:  480:	optind++;
      353:  481:	if (quit_cmd)
branch  0 taken 47 (fallthrough)
branch  1 taken 306
       47:  482:	  break;
        -:  483:      }
      353:  484:  close_files ();
call    0 returned 353
      353:  485:  if (bad_input)
branch  0 taken 1 (fallthrough)
branch  1 taken 352
        1:  486:    exit (2);
call    0 returned 0
      352:  487:  exit (0);
        -:  488:}
        -:  489:
        -:  490:void
function close_files called 353 returned 100% blocks executed 100%
      353:  491:close_files ()
        -:  492:{
        -:  493:  int nf;
        -:  494:
    11649:  495:  for (nf = 0; nf < NUM_FPS; nf++)
branch  0 taken 11296
branch  1 taken 353 (fallthrough)
        -:  496:    {
    11296:  497:      if (file_ptrs[nf].phile)
branch  0 taken 230 (fallthrough)
branch  1 taken 11066
      230:  498:	fclose (file_ptrs[nf].phile);
call    0 returned 230
        -:  499:    }
      353:  500:}
        -:  501:
        -:  502:/* 'str' is a string (from the command line) that contains a sed command.
        -:  503:   Compile the command, and add it to the end of 'the_program' */
        -:  504:void
function compile_string called 24 returned 79% blocks executed 100%
       24:  505:compile_string (str)
        -:  506:     char *str;
        -:  507:{
       24:  508:  prog_file = 0;
       24:  509:  prog_line = 0;
       24:  510:  prog_start = prog_cur = (unsigned char *)str;
       24:  511:  prog_end = (unsigned char *)str + strlen (str);
       24:  512:  the_program = compile_program (the_program, prog_line);
call    0 returned 19
       19:  513:}
        -:  514:
        -:  515:/* 'str' is the name of a file containing sed commands.  Read them in
        -:  516:   and add them to the end of 'the_program' */
        -:  517:void
function compile_file called 339 returned 99% blocks executed 89%
      339:  518:compile_file (str)
        -:  519:     char *str;
        -:  520:{
        -:  521:  int ch;
        -:  522:
      339:  523:  prog_start = prog_cur = prog_end = 0;
      339:  524:  prog_name = str;
      339:  525:  prog_line = 1;
     339*:  526:  if (str[0] == '-' && str[1] == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 339
branch  2 never executed
branch  3 never executed
    #####:  527:    prog_file = stdin;
        -:  528:  else
      339:  529:    prog_file = ck_fopen (str, "r");
call    0 returned 337
      337:  530:  ch = getc (prog_file);
call    0 returned 337
      337:  531:  if (ch == '#')
branch  0 taken 326 (fallthrough)
branch  1 taken 11
        -:  532:    {
      326:  533:      ch = getc (prog_file);
call    0 returned 326
      326:  534:      if (ch == 'n')
branch  0 taken 211 (fallthrough)
branch  1 taken 115
      211:  535:	no_default_output++;
     2453:  536:      while (ch != EOF && ch != '\n')
branch  0 taken 2453 (fallthrough)
branch  1 taken 0
branch  2 taken 2127
branch  3 taken 326 (fallthrough)
     2127:  537:	ch = getc (prog_file);
call    0 returned 2127
      326:  538:      ++prog_line;
        -:  539:    }
       11:  540:  else if (ch != EOF)
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11:  541:    ungetc (ch, prog_file);
call    0 returned 11
      337:  542:  the_program = compile_program (the_program, prog_line);
call    0 returned 336
      336:  543:}
        -:  544:
        -:  545:#define MORE_CMDS 40
        -:  546:
        -:  547:/* Read a program (or a subprogram within '{' '}' pairs) in and store
        -:  548:   the compiled form in *'vector'  Return a pointer to the new vector.  */
        -:  549:
        -:  550:
        -:  551:/*
        -:  552:   Because of the scarcity of changes in this version from v0,
        -:  553:   additional faults are seeded near but outside change
        -:  554:   boundaries in this function compile_program().
        -:  555:
        -:  556:   SIR, August 2006, Kyle R. Murphy
        -:  557:*/
        -:  558:
        -:  559:struct vector *
function compile_program called 691 returned 99% blocks executed 79%
      691:  560:compile_program (vector, open_line)
        -:  561:     struct vector *vector;
        -:  562:     int open_line;
        -:  563:{
        -:  564:  struct sed_cmd *cur_cmd;
        -:  565:#ifndef FAULTY_F_KRM_1
      691:  566:  int pch,ch = 0;
        -:  567:#else
        -:  568:  int pch,ch = 2000;
        -:  569:#endif
        -:  570:  int slash;
        -:  571:  VOID *b;
        -:  572:  unsigned char *string;
        -:  573:  int num;
        -:  574:
      691:  575:  if (!vector)
branch  0 taken 2 (fallthrough)
branch  1 taken 689
        -:  576:    {
      689:  577:      vector = (struct vector *) ck_malloc (sizeof (struct vector));
call    0 returned 689
      689:  578:      vector->v = (struct sed_cmd *) ck_malloc (MORE_CMDS * sizeof (struct sed_cmd));
call    0 returned 689
      689:  579:      vector->v_allocated = MORE_CMDS;
      689:  580:      vector->v_length = 0;
      689:  581:      vector->return_v = 0;
      689:  582:      vector->return_i = 0;
        -:  583:    }
        -:  584:  for (;;)
        -:  585:    {
      691:  586:    skip_comment:
        -:  587:      do
        -:  588:	{
    10265:  589:	  pch = ch;
    10265:  590:	  ch = inchar ();
call    0 returned 10265
   10265*:  591:	  if ((pch == '\\') && (ch == '\n'))
branch  0 taken 0 (fallthrough)
branch  1 taken 10265
branch  2 never executed
branch  3 never executed
        -:  592:	  #ifndef FAULTY_F_KRM_2
    #####:  593:	    ch = inchar ();
call    0 never executed
        -:  594:	  #else
        -:  595:	    ch = inchar () - 1;
        -:  596:	  #endif
        -:  597:	}
        -:  598:      #ifndef FAULTY_F_KRM_3
    10265:  599:      while (ch != EOF && (isblank (ch) || ch == '\n' || ch == ';'));
branch  0 taken 9909 (fallthrough)
branch  1 taken 356
branch  2 taken 6599
branch  3 taken 3310 (fallthrough)
branch  4 taken 1106
branch  5 taken 2204 (fallthrough)
branch  6 taken 0
branch  7 taken 2204 (fallthrough)
        -:  600:      #else
        -:  601:      while (ch != EOF && isblank (ch) || ch == '\n' || ch == ';');
        -:  602:      #endif
     2560:  603:      if (ch == EOF)
branch  0 taken 356 (fallthrough)
branch  1 taken 2204
      356:  604:	break;
     2204:  605:      savchar (ch);
call    0 returned 2204
        -:  606:
     2204:  607:      if (vector->v_length == vector->v_allocated)
branch  0 taken 0 (fallthrough)
branch  1 taken 2204
        -:  608:	{
    #####:  609:	  vector->v = ((struct sed_cmd *)
    #####:  610:		       ck_realloc ((VOID *) vector->v,
    #####:  611:				   ((vector->v_length + MORE_CMDS)
call    0 never executed
        -:  612:				    * sizeof (struct sed_cmd))));
    #####:  613:	  vector->v_allocated += MORE_CMDS;
        -:  614:	}
     2204:  615:      cur_cmd = vector->v + vector->v_length;
     2204:  616:      vector->v_length++;
        -:  617:
     2204:  618:      cur_cmd->a1.addr_type = 0;
     2204:  619:      cur_cmd->a2.addr_type = 0;
     2204:  620:      cur_cmd->aflags = 0;
     2204:  621:      cur_cmd->cmd = 0;
        -:  622:
     2204:  623:      if (compile_address (&(cur_cmd->a1)))
call    0 returned 2204
branch  1 taken 439 (fallthrough)
branch  2 taken 1765
        -:  624:	{
      439:  625:	  ch = inchar ();
call    0 returned 439
      439:  626:	  if (ch == ',')
branch  0 taken 45 (fallthrough)
branch  1 taken 394
        -:  627:	    {
        -:  628:	      do
       45:  629:		ch = inchar ();
call    0 returned 45
       45:  630:	      while (ch != EOF && isblank (ch));
branch  0 taken 45 (fallthrough)
branch  1 taken 0
branch  2 taken 0
branch  3 taken 45 (fallthrough)
       45:  631:	      savchar (ch);
call    0 returned 45
       45:  632:	      if (compile_address (&(cur_cmd->a2)))
call    0 returned 45
branch  1 taken 0 (fallthrough)
branch  2 taken 45
        -:  633:		;
        -:  634:	      else
    #####:  635:		bad_prog ("Unexpected ','");
call    0 never executed
        -:  636:	    }
        -:  637:	  else
      394:  638:	    savchar (ch);
call    0 returned 394
        -:  639:	}
     2204:  640:      if (cur_cmd->a1.addr_type == addr_is_num
branch  0 taken 67 (fallthrough)
branch  1 taken 2137
       67:  641:	  && cur_cmd->a2.addr_type == addr_is_num
branch  0 taken 18 (fallthrough)
branch  1 taken 49
       18:  642:	  && cur_cmd->a2.addr_number < cur_cmd->a1.addr_number)
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####:  643:	cur_cmd->a2.addr_number = cur_cmd->a1.addr_number;
        -:  644:
     2204:  645:      ch = inchar ();
call    0 returned 2204
     2204:  646:      if (ch == EOF)
branch  0 taken 2204 (fallthrough)
branch  1 taken 0
    #####:  647:	bad_prog (NO_COMMAND);
call    0 never executed
     2204:  648:    new_cmd:
     2224:  649:      switch (ch)
branch  0 taken 181
branch  1 taken 20
branch  2 taken 70
branch  3 taken 36
branch  4 taken 330
branch  5 taken 329
branch  6 taken 4
branch  7 taken 9
branch  8 taken 37
branch  9 taken 847
branch 10 taken 34
branch 11 taken 45
branch 12 taken 238
branch 13 taken 39
branch 14 taken 5
        -:  650:	{
      181:  651:	case '#':
      181:  652:	  if (cur_cmd->a1.addr_type != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 181
    #####:  653:	    bad_prog (NO_ADDR);
call    0 never executed
        -:  654:	  do
     3825:  655:	    ch = inchar ();
call    0 returned 3825
     3825:  656:	  while (ch != EOF && ch != '\n');
branch  0 taken 3825 (fallthrough)
branch  1 taken 0
branch  2 taken 3644
branch  3 taken 181 (fallthrough)
      181:  657:	  vector->v_length--;
      181:  658:	  goto skip_comment;
       20:  659:	case '!':
       20:  660:	  if (cur_cmd->aflags & ADDR_BANG_BIT)
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####:  661:	    bad_prog ("Multiple '!'s");
call    0 never executed
       20:  662:	  cur_cmd->aflags |= ADDR_BANG_BIT;
        -:  663:	  do
       20:  664:	    ch = inchar ();
call    0 returned 20
       20:  665:	  while (ch != EOF && isblank (ch));
branch  0 taken 20 (fallthrough)
branch  1 taken 0
branch  2 taken 0
branch  3 taken 20 (fallthrough)
       20:  666:	  if (ch == EOF)
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####:  667:	    bad_prog (NO_COMMAND);
call    0 never executed
        -:  668:#if 0
        -:  669:	  savchar (ch);
        -:  670:#endif
       20:  671:	  goto new_cmd;
       70:  672:	case 'a':
        -:  673:	case 'i':
       70:  674:	  if (cur_cmd->a2.addr_type != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 70
    #####:  675:	    bad_prog (ONE_ADDR);
call    0 never executed
        -:  676:	  /* Fall Through */
        -:  677:	case 'c':
      106:  678:	  cur_cmd->cmd = ch;
      106:  679:	  if (inchar () != '\\' || inchar () != '\n')
call    0 returned 106
branch  1 taken 106 (fallthrough)
branch  2 taken 0
call    3 returned 106
branch  4 taken 0 (fallthrough)
branch  5 taken 106
    #####:  680:	    bad_prog (LINE_JUNK);
call    0 never executed
      106:  681:	  b = init_buffer ();
call    0 returned 106
     2629:  682:	  while ((ch = inchar ()) != EOF && ch != '\n')
call    0 returned 2629
branch  1 taken 2629 (fallthrough)
branch  2 taken 0
branch  3 taken 2523
branch  4 taken 106 (fallthrough)
        -:  683:	    {
     2523:  684:	      if (ch == '\\')
branch  0 taken 14 (fallthrough)
branch  1 taken 2509
       14:  685:		ch = inchar ();
call    0 returned 14
     2523:  686:	      add1_buffer (b, ch);
call    0 returned 2523
        -:  687:	    }
      106:  688:	  if (ch != EOF)
branch  0 taken 106 (fallthrough)
branch  1 taken 0
      106:  689:	    add1_buffer (b, ch);
call    0 returned 106
      106:  690:	  num = size_buffer (b);
call    0 returned 106
      106:  691:	  string = (unsigned char *) ck_malloc (num);
call    0 returned 106
      106:  692:	  bcopy (get_buffer (b), string, num);
call    0 returned 106
      106:  693:	  flush_buffer (b);
call    0 returned 106
      106:  694:	  cur_cmd->x.cmd_txt.text_len = num;
      106:  695:	  cur_cmd->x.cmd_txt.text = (char *) string;
      106:  696:	  break;
      330:  697:	case '{':
      330:  698:	  cur_cmd->cmd = ch;
      330:  699:	  program_depth++;
        -:  700:#if 0
        -:  701:	  while ((ch = inchar ()) != EOF && ch != '\n')
        -:  702:	    if (!isblank (ch))
        -:  703:	      bad_prog (LINE_JUNK);
        -:  704:#endif
      330:  705:	  cur_cmd->x.sub = compile_program ((struct vector *) 0, prog_line);
call    0 returned 329
        -:  706:	  /* FOO JF is this the right thing to do?
        -:  707:			   almost.  don't forget a return addr.  -t */
      329:  708:	  cur_cmd->x.sub->return_v = vector;
      329:  709:	  cur_cmd->x.sub->return_i = vector->v_length - 1;
      329:  710:	  break;
      329:  711:	case '}':
      329:  712:	  if (!program_depth)
branch  0 taken 0 (fallthrough)
branch  1 taken 329
    #####:  713:	    bad_prog ("Unexpected '}'");
call    0 never executed
      329:  714:	  --program_depth;
        -:  715:	  /* a return insn for subprograms -t */
      329:  716:	  cur_cmd->cmd = ch;
      329:  717:	  if (cur_cmd->a1.addr_type != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 329
    #####:  718:	    bad_prog ("} doesn't want any addresses");
call    0 never executed
      335:  719:	  while ((ch = inchar ()) != EOF && ch != '\n' && ch != ';')
call    0 returned 335
branch  1 taken 335 (fallthrough)
branch  2 taken 0
branch  3 taken 6 (fallthrough)
branch  4 taken 329
branch  5 taken 6
branch  6 taken 0 (fallthrough)
        6:  720:	    if (!isblank (ch))
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  721:	      bad_prog (LINE_JUNK);
call    0 never executed
      329:  722:	  return vector;
        4:  723:	case ':':
        4:  724:	  cur_cmd->cmd = ch;
        4:  725:	  if (cur_cmd->a1.addr_type != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  726:	    bad_prog (": doesn't want any addresses");
call    0 never executed
        4:  727:	  labels = setup_jump (labels, cur_cmd, vector);
call    0 returned 4
        4:  728:	  break;
        9:  729:	case 'b':
        -:  730:	case 't':
        9:  731:	  cur_cmd->cmd = ch;
        9:  732:	  jumps = setup_jump (jumps, cur_cmd, vector);
call    0 returned 9
        9:  733:	  break;
       37:  734:	case 'q':
        -:  735:	case '=':
       37:  736:	  if (cur_cmd->a2.addr_type)
branch  0 taken 0 (fallthrough)
branch  1 taken 37
    #####:  737:	    bad_prog (ONE_ADDR);
call    0 never executed
        -:  738:	  /* Fall Through */
        -:  739:	case 'd':
        -:  740:	case 'D':
        -:  741:	case 'g':
        -:  742:	case 'G':
        -:  743:	case 'h':
        -:  744:	case 'H':
        -:  745:	case 'l':
        -:  746:	case 'n':
        -:  747:	case 'N':
        -:  748:	case 'p':
        -:  749:	case 'P':
        -:  750:	case 'x':
      884:  751:	  cur_cmd->cmd = ch;
        -:  752:	  do
      897:  753:	    ch = inchar ();
call    0 returned 897
      897:  754:	  while (ch != EOF && isblank (ch) && ch != '\n' && ch != ';');
branch  0 taken 897 (fallthrough)
branch  1 taken 0
branch  2 taken 13 (fallthrough)
branch  3 taken 884
branch  4 taken 13 (fallthrough)
branch  5 taken 0
branch  6 taken 13
branch  7 taken 0 (fallthrough)
     884*:  755:	  if (ch != '\n' && ch != ';' && ch != EOF)
branch  0 taken 77 (fallthrough)
branch  1 taken 807
branch  2 taken 0 (fallthrough)
branch  3 taken 77
branch  4 never executed
branch  5 never executed
    #####:  756:	    bad_prog (LINE_JUNK);
call    0 never executed
      884:  757:	  break;
        -:  758:
       34:  759:	case 'r':
       34:  760:	  if (cur_cmd->a2.addr_type != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 34
    #####:  761:	    bad_prog (ONE_ADDR);
call    0 never executed
        -:  762:	  /* FALL THROUGH */
        -:  763:	case 'w':
       79:  764:	  cur_cmd->cmd = ch;
       79:  765:	  cur_cmd->x.io_file = compile_filename (ch == 'r');
call    0 returned 79
       79:  766:	  break;
        -:  767:
      238:  768:	case 's':
      238:  769:	  cur_cmd->cmd = ch;
      238:  770:	  slash = inchar ();
call    0 returned 238
      238:  771:	  compile_regex (slash);
call    0 returned 238
        -:  772:
      238:  773:	  cur_cmd->x.cmd_regex.regx = last_regex;
        -:  774:
      238:  775:	  b = init_buffer ();
call    0 returned 238
     1736:  776:	  while (((ch = inchar ()) != EOF) && (ch != slash) && (ch != '\n'))
call    0 returned 1736
branch  1 taken 1736 (fallthrough)
branch  2 taken 0
branch  3 taken 1498 (fallthrough)
branch  4 taken 238
branch  5 taken 1498
branch  6 taken 0 (fallthrough)
        -:  777:	    {
     1498:  778:	      if (ch == '\\')
branch  0 taken 41 (fallthrough)
branch  1 taken 1457
        -:  779:		{
        -:  780:		  int ci;
        -:  781:
       41:  782:		  ci = inchar ();
call    0 returned 41
       41:  783:		  if (ci != EOF)
branch  0 taken 41 (fallthrough)
branch  1 taken 0
        -:  784:		    {
       41:  785:		      if (ci != '\n')
branch  0 taken 41 (fallthrough)
branch  1 taken 0
       41:  786:			add1_buffer (b, ch);
call    0 returned 41
       41:  787:		      add1_buffer (b, ci);
call    0 returned 41
        -:  788:		    }
        -:  789:		}
        -:  790:	      else
     1457:  791:		add1_buffer (b, ch);
call    0 returned 1457
        -:  792:	    }
      238:  793:	  if (ch != slash)
branch  0 taken 0 (fallthrough)
branch  1 taken 238
        -:  794:	    {
    #####:  795:	      if (ch == '\n' && prog_line > 1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  796:		--prog_line;
    #####:  797:	      bad_prog ("Unterminated `s' command");
call    0 never executed
        -:  798:	    }
      238:  799:	  cur_cmd->x.cmd_regex.replace_length = size_buffer (b);
call    0 returned 238
      238:  800:	  cur_cmd->x.cmd_regex.replacement = ck_malloc (cur_cmd->x.cmd_regex.replace_length);
call    0 returned 238
      238:  801:	  bcopy (get_buffer (b), cur_cmd->x.cmd_regex.replacement, cur_cmd->x.cmd_regex.replace_length);
call    0 returned 238
      238:  802:	  flush_buffer (b);
call    0 returned 238
        -:  803:
      238:  804:	  cur_cmd->x.cmd_regex.flags = 0;
      238:  805:	  cur_cmd->x.cmd_regex.numb = 0;
        -:  806:
      238:  807:	  if (ch == EOF)
branch  0 taken 0 (fallthrough)
branch  1 taken 238
    #####:  808:	    break;
        -:  809:	  do
        -:  810:	    {
      551:  811:	      ch = inchar ();
call    0 returned 551
        -:  812:	      switch (ch)
        -:  813:		{
      110:  814:		case 'p':
      110:  815:		  if (cur_cmd->x.cmd_regex.flags & S_PRINT_BIT)
branch  0 taken 0 (fallthrough)
branch  1 taken 110
    #####:  816:		    bad_prog ("multiple 'p' options to 's' command");
call    0 never executed
      110:  817:		  cur_cmd->x.cmd_regex.flags |= S_PRINT_BIT;
      110:  818:		  break;
      203:  819:		case 'g':
      203:  820:		  if (cur_cmd->x.cmd_regex.flags & S_NUM_BIT)
branch  0 taken 0 (fallthrough)
branch  1 taken 203
    #####:  821:		    cur_cmd->x.cmd_regex.flags &= ~S_NUM_BIT;
      203:  822:		  if (cur_cmd->x.cmd_regex.flags & S_GLOBAL_BIT)
branch  0 taken 0 (fallthrough)
branch  1 taken 203
    #####:  823:		    bad_prog ("multiple 'g' options to 's' command");
call    0 never executed
      203:  824:		  cur_cmd->x.cmd_regex.flags |= S_GLOBAL_BIT;
      203:  825:		  break;
      151:  826:		case 'w':
      151:  827:		  cur_cmd->x.cmd_regex.flags |= S_WRITE_BIT;
      151:  828:		  cur_cmd->x.cmd_regex.wio_file = compile_filename (0);
call    0 returned 151
      151:  829:		  ch = '\n';
      151:  830:		  break;
    #####:  831:		case '0':
        -:  832:		case '1':
        -:  833:		case '2':
        -:  834:		case '3':
        -:  835:		case '4':
        -:  836:		case '5':
        -:  837:		case '6':
        -:  838:		case '7':
        -:  839:		case '8':
        -:  840:		case '9':
    #####:  841:		  if (cur_cmd->x.cmd_regex.flags & S_NUM_BIT)
branch  0 never executed
branch  1 never executed
    #####:  842:		    bad_prog ("multiple number options to 's' command");
call    0 never executed
    #####:  843:		  if ((cur_cmd->x.cmd_regex.flags & S_GLOBAL_BIT) == 0)
branch  0 never executed
branch  1 never executed
    #####:  844:		    cur_cmd->x.cmd_regex.flags |= S_NUM_BIT;
    #####:  845:		  num = 0;
    #####:  846:		  while (isdigit (ch))
branch  0 never executed
branch  1 never executed
        -:  847:		    {
    #####:  848:		      num = num * 10 + ch - '0';
    #####:  849:		      ch = inchar ();
call    0 never executed
        -:  850:		    }
    #####:  851:		  savchar (ch);
call    0 never executed
    #####:  852:		  cur_cmd->x.cmd_regex.numb = num;
    #####:  853:		  break;
       87:  854:		case '\n':
        -:  855:		case ';':
        -:  856:		case EOF:
       87:  857:		  break;
    #####:  858:		default:
    #####:  859:		  bad_prog ("Unknown option to 's'");
call    0 never executed
    #####:  860:		  break;
        -:  861:		}
        -:  862:	    }
      551:  863:	  while (ch != EOF && ch != '\n' && ch != ';');
branch  0 taken 551 (fallthrough)
branch  1 taken 0
branch  2 taken 314 (fallthrough)
branch  3 taken 237
branch  4 taken 313
branch  5 taken 1 (fallthrough)
      238:  864:	  if (ch == EOF)
branch  0 taken 0 (fallthrough)
branch  1 taken 238
    #####:  865:	    break;
      238:  866:	  break;
        -:  867:
       39:  868:	case 'y':
       39:  869:	  cur_cmd->cmd = ch;
       39:  870:	  string = (unsigned char *) ck_malloc (256);
call    0 returned 39
    10023:  871:	  for (num = 0; num < 256; num++)
branch  0 taken 9984
branch  1 taken 39 (fallthrough)
     9984:  872:	    string[num] = num;
       39:  873:	  b = init_buffer ();
call    0 returned 39
       39:  874:	  slash = inchar ();
call    0 returned 39
      328:  875:	  while ((ch = inchar ()) != EOF && ch != slash)
call    0 returned 328
branch  1 taken 328 (fallthrough)
branch  2 taken 0
branch  3 taken 289
branch  4 taken 39 (fallthrough)
      289:  876:	    add1_buffer (b, ch);
call    0 returned 289
       39:  877:	  cur_cmd->x.translate = string;
       39:  878:	  string = (unsigned char *) get_buffer (b);
call    0 returned 39
      328:  879:	  for (num = size_buffer (b); num; --num)
call    0 returned 39
branch  1 taken 289
branch  2 taken 39 (fallthrough)
        -:  880:	    {
      289:  881:	      ch = inchar ();
call    0 returned 289
      289:  882:	      if (ch == EOF)
branch  0 taken 0 (fallthrough)
branch  1 taken 289
    #####:  883:		bad_prog (BAD_EOF);
call    0 never executed
      289:  884:	      if (ch == slash)
branch  0 taken 0 (fallthrough)
branch  1 taken 289
    #####:  885:		bad_prog ("strings for y command are different lengths");
call    0 never executed
      289:  886:	      cur_cmd->x.translate[*string++] = ch;
        -:  887:	    }
       39:  888:	  flush_buffer (b);
call    0 returned 39
       39:  889:	  if (inchar () != slash || ((ch = inchar ()) != EOF && ch != '\n' && ch != ';'))
call    0 returned 39
branch  1 taken 39 (fallthrough)
branch  2 taken 0
call    3 returned 39
branch  4 taken 39 (fallthrough)
branch  5 taken 0
branch  6 taken 2 (fallthrough)
branch  7 taken 37
branch  8 taken 0 (fallthrough)
branch  9 taken 2
    #####:  890:	    bad_prog (LINE_JUNK);
call    0 never executed
       39:  891:	  break;
        -:  892:
        5:  893:	default:
        5:  894:	  bad_prog ("Unknown command");
call    0 returned 0
        -:  895:	}
        -:  896:    }
      356:  897:  if (program_depth)
branch  0 taken 1 (fallthrough)
branch  1 taken 355
        -:  898:    {
        1:  899:      prog_line = open_line;
        1:  900:      bad_prog ("Unmatched `{'");
call    0 returned 0
        -:  901:    }
      355:  902:  return vector;
        -:  903:}
        -:  904:
        -:  905:/* Complain about a programming error and exit. */
        -:  906:void
function bad_prog called 6 returned 0% blocks executed 100%
        6:  907:bad_prog (why)
        -:  908:     char *why;
        -:  909:{
        6:  910:  if (prog_line > 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        1:  911:    fprintf (stderr, "%s: file %s line %d: %s\n",
call    0 returned 1
        -:  912:	     myname, prog_name, prog_line, why);
        -:  913:  else
        5:  914:    fprintf (stderr, "%s: %s\n", myname, why);
call    0 returned 5
        6:  915:  exit (1);
        -:  916:}
        -:  917:
        -:  918:/* Read the next character from the program.  Return EOF if there isn't
        -:  919:   anything to read.  Keep prog_line up to date, so error messages can
        -:  920:   be meaningful. */
        -:  921:int
function inchar called 34126 returned 100% blocks executed 87%
    34126:  922:inchar ()
        -:  923:{
        -:  924:  int ch;
    34126:  925:  if (prog_file)
branch  0 taken 33742 (fallthrough)
branch  1 taken 384
        -:  926:    {
    33742:  927:      if (feof (prog_file))
call    0 returned 33742
branch  1 taken 0 (fallthrough)
branch  2 taken 33742
    #####:  928:	return EOF;
        -:  929:      else
    33742:  930:	ch = getc (prog_file);
call    0 returned 33742
        -:  931:    }
        -:  932:  else
        -:  933:    {
      384:  934:      if (!prog_cur)
branch  0 taken 0 (fallthrough)
branch  1 taken 384
    #####:  935:	return EOF;
      384:  936:      else if (prog_cur == prog_end)
branch  0 taken 19 (fallthrough)
branch  1 taken 365
        -:  937:	{
       19:  938:	  ch = EOF;
       19:  939:	  prog_cur = 0;
        -:  940:	}
        -:  941:      else
      365:  942:	ch = *prog_cur++;
        -:  943:    }
    34126:  944:  if ((ch == '\n') && prog_line)
branch  0 taken 3001 (fallthrough)
branch  1 taken 31125
branch  2 taken 2981 (fallthrough)
branch  3 taken 20
     2981:  945:    prog_line++;
    34126:  946:  return ch;
        -:  947:}
        -:  948:
        -:  949:/* unget 'ch' so the next call to inchar will return it.  'ch' must not be
        -:  950:   EOF or anything nasty like that. */
        -:  951:void
function savchar called 5007 returned 100% blocks executed 89%
     5007:  952:savchar (ch)
        -:  953:     int ch;
        -:  954:{
     5007:  955:  if (ch == EOF)
branch  0 taken 0 (fallthrough)
branch  1 taken 5007
    #####:  956:    return;
     5007:  957:  if (ch == '\n' && prog_line > 1)
branch  0 taken 13 (fallthrough)
branch  1 taken 4994
branch  2 taken 13 (fallthrough)
branch  3 taken 0
       13:  958:    --prog_line;
     5007:  959:  if (prog_file)
branch  0 taken 4941 (fallthrough)
branch  1 taken 66
     4941:  960:    ungetc (ch, prog_file);
call    0 returned 4941
        -:  961:  else
       66:  962:    *--prog_cur = ch;
        -:  963:}
        -:  964:
        -:  965:
        -:  966:/* Try to read an address for a sed command.  If it succeeeds,
        -:  967:   return non-zero and store the resulting address in *'addr'.
        -:  968:   If the input doesn't look like an address read nothing
        -:  969:   and return zero. */
        -:  970:int
function compile_address called 2249 returned 100% blocks executed 94%
     2249:  971:compile_address (addr)
        -:  972:     struct addr *addr;
        -:  973:{
        -:  974:  int ch;
        -:  975:  int num;
        -:  976:
     2249:  977:  ch = inchar ();
call    0 returned 2249
        -:  978:
     2249:  979:  if (isdigit (ch))
branch  0 taken 88 (fallthrough)
branch  1 taken 2161
        -:  980:    {
       88:  981:      num = ch - '0';
      158:  982:      while ((ch = inchar ()) != EOF && isdigit (ch))
call    0 returned 158
branch  1 taken 158 (fallthrough)
branch  2 taken 0
branch  3 taken 70
branch  4 taken 88 (fallthrough)
       70:  983:	num = num * 10 + ch - '0';
       88:  984:      while (ch != EOF && isblank (ch))
branch  0 taken 88 (fallthrough)
branch  1 taken 0
branch  2 taken 0
branch  3 taken 88 (fallthrough)
    #####:  985:	ch = inchar ();
call    0 never executed
       88:  986:      savchar (ch);
call    0 returned 88
       88:  987:      addr->addr_type = addr_is_num;
       88:  988:      addr->addr_number = num;
       88:  989:      return 1;
        -:  990:    }
     2161:  991:  else if (ch == '/' || ch == '\\')
branch  0 taken 1778 (fallthrough)
branch  1 taken 383
branch  2 taken 0 (fallthrough)
branch  3 taken 1778
        -:  992:    {
      383:  993:      addr->addr_type = addr_is_regex;
      383:  994:      if (ch == '\\')
branch  0 taken 0 (fallthrough)
branch  1 taken 383
    #####:  995:	ch = inchar ();
call    0 never executed
      383:  996:      compile_regex (ch);
call    0 returned 383
      383:  997:      addr->addr_regex = last_regex;
        -:  998:      do
      391:  999:	ch = inchar ();
call    0 returned 391
      391: 1000:      while (ch != EOF && isblank (ch));
branch  0 taken 391 (fallthrough)
branch  1 taken 0
branch  2 taken 8
branch  3 taken 383 (fallthrough)
      383: 1001:      savchar (ch);
call    0 returned 383
      383: 1002:      return 1;
        -: 1003:    }
     1778: 1004:  else if (ch == '$')
branch  0 taken 13 (fallthrough)
branch  1 taken 1765
        -: 1005:    {
       13: 1006:      addr->addr_type = addr_is_last;
        -: 1007:      do
       13: 1008:	ch = inchar ();
call    0 returned 13
       13: 1009:      while (ch != EOF && isblank (ch));
branch  0 taken 13 (fallthrough)
branch  1 taken 0
branch  2 taken 0
branch  3 taken 13 (fallthrough)
       13: 1010:      savchar (ch);
call    0 returned 13
       13: 1011:      return 1;
        -: 1012:    }
        -: 1013:  else
     1765: 1014:    savchar (ch);
call    0 returned 1765
     1765: 1015:  return 0;
        -: 1016:}
        -: 1017:
        -: 1018:void
function compile_regex called 621 returned 100% blocks executed 92%
      621: 1019:compile_regex (slash)
        -: 1020:     int slash;
        -: 1021:{
        -: 1022:  VOID *b;
        -: 1023:  int ch;
      621: 1024:  int char_class_pos = -1;
        -: 1025:
      621: 1026:  b = init_buffer ();
call    0 returned 621
     3305: 1027:  while ((ch = inchar ()) != EOF && (ch != slash || (char_class_pos >= 0)))
call    0 returned 3305
branch  1 taken 3305 (fallthrough)
branch  2 taken 0
branch  3 taken 2684
branch  4 taken 621 (fallthrough)
branch  5 taken 0
branch  6 taken 621 (fallthrough)
        -: 1028:    {
     2684: 1029:      if (ch == '^')
branch  0 taken 153 (fallthrough)
branch  1 taken 2531
        -: 1030:	{
      153: 1031:	  if (size_buffer (b) == 0)
call    0 returned 153
branch  1 taken 152 (fallthrough)
branch  2 taken 1
        -: 1032:	    {
      152: 1033:	      add1_buffer (b, '\\');
call    0 returned 152
      152: 1034:	      add1_buffer (b, '`');
call    0 returned 152
        -: 1035:	    }
        -: 1036:	  else
        1: 1037:	    add1_buffer (b, ch);
call    0 returned 1
      153: 1038:	  continue;
        -: 1039:	}
     2531: 1040:      else if (ch == '$')
branch  0 taken 102 (fallthrough)
branch  1 taken 2429
        -: 1041:	{
      102: 1042:	  ch = inchar ();
call    0 returned 102
      102: 1043:	  savchar (ch);
call    0 returned 102
      102: 1044:	  if (ch == slash)
branch  0 taken 102 (fallthrough)
branch  1 taken 0
        -: 1045:	    {
      102: 1046:	      add1_buffer (b, '\\');
call    0 returned 102
      102: 1047:	      add1_buffer (b, '\'');
call    0 returned 102
        -: 1048:	    }
        -: 1049:	  else
    #####: 1050:	    add1_buffer (b, '$');
call    0 never executed
      102: 1051:	  continue;
        -: 1052:	}
     2429: 1053:      else if (ch == '[')
branch  0 taken 5 (fallthrough)
branch  1 taken 2424
        -: 1054:	{
        5: 1055:	  if (char_class_pos < 0)
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 1056:	    char_class_pos = size_buffer (b);
call    0 returned 5
        5: 1057:	  add1_buffer (b, ch);
call    0 returned 5
        5: 1058:	  continue;
        -: 1059:	}
     2424: 1060:      else if (ch == ']')
branch  0 taken 5 (fallthrough)
branch  1 taken 2419
        -: 1061:	{
        5: 1062:	  add1_buffer (b, ch);
call    0 returned 5
        5: 1063:	  {
        5: 1064:	    char * regexp = get_buffer (b);
call    0 returned 5
        5: 1065:	    int pos = size_buffer (b) - 1;
call    0 returned 5
        5: 1066:	    if (!(   (char_class_pos >= 0)
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 1067:		  && (   (pos == char_class_pos + 1)
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 1068:		      || (   (pos == char_class_pos + 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####: 1069:			  && (regexp[char_class_pos + 1] == '^')))))
branch  0 never executed
branch  1 never executed
        5: 1070:	      char_class_pos = -1;
        5: 1071:	    continue;
        -: 1072:	  }
        -: 1073:	}
     2419: 1074:      else if (ch != '\\' || (char_class_pos >= 0))
branch  0 taken 350 (fallthrough)
branch  1 taken 2069
branch  2 taken 0 (fallthrough)
branch  3 taken 350
        -: 1075:	{
     2069: 1076:	  add1_buffer (b, ch);
call    0 returned 2069
     2069: 1077:	  continue;
        -: 1078:	}
      350: 1079:      ch = inchar ();
call    0 returned 350
      350: 1080:      switch (ch)
branch  0 taken 12
branch  1 taken 0
branch  2 taken 338
        -: 1081:	{
       12: 1082:	case 'n':
       12: 1083:	  add1_buffer (b, '\n');
call    0 returned 12
       12: 1084:	  break;
        -: 1085:#if 0
        -: 1086:	case 'b':
        -: 1087:	  add1_buffer (b, '\b');
        -: 1088:	  break;
        -: 1089:	case 'f':
        -: 1090:	  add1_buffer (b, '\f');
        -: 1091:	  break;
        -: 1092:	case 'r':
        -: 1093:	  add1_buffer (b, '\r');
        -: 1094:	  break;
        -: 1095:	case 't':
        -: 1096:	  add1_buffer (b, '\t');
        -: 1097:	  break;
        -: 1098:#endif /* 0 */
    #####: 1099:	case EOF:
    #####: 1100:	  break;
      338: 1101:	default:
      338: 1102:	  add1_buffer (b, '\\');
call    0 returned 338
      338: 1103:	  add1_buffer (b, ch);
call    0 returned 338
      338: 1104:	  break;
        -: 1105:	}
        -: 1106:    }
      621: 1107:  if (ch == EOF)
branch  0 taken 0 (fallthrough)
branch  1 taken 621
    #####: 1108:    bad_prog (BAD_EOF);
call    0 never executed
      621: 1109:  if (size_buffer (b))
call    0 returned 621
branch  1 taken 603 (fallthrough)
branch  2 taken 18
        -: 1110:    {
      603: 1111:      last_regex = (struct re_pattern_buffer *) ck_malloc (sizeof (struct re_pattern_buffer));
call    0 returned 603
      603: 1112:      last_regex->allocated = size_buffer (b) + 10;
call    0 returned 603
     1206: 1113:      last_regex->buffer =
      603: 1114:	(unsigned char *) ck_malloc (last_regex->allocated);
call    0 returned 603
      603: 1115:      last_regex->fastmap = ck_malloc (256);
call    0 returned 603
      603: 1116:      last_regex->translate = 0;
      603: 1117:      re_compile_pattern (get_buffer (b), size_buffer (b), last_regex);
call    0 returned 603
call    1 returned 603
call    2 returned 603
        -: 1118:    }
       18: 1119:  else if (!last_regex)
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####: 1120:    bad_prog (NO_REGEX);
call    0 never executed
      621: 1121:  flush_buffer (b);
call    0 returned 621
      621: 1122:}
        -: 1123:
        -: 1124:/* Store a label (or label reference) created by a ':', 'b', or 't'
        -: 1125:   comand so that the jump to/from the lable can be backpatched after
        -: 1126:   compilation is complete */
        -: 1127:struct sed_label *
function setup_jump called 13 returned 100% blocks executed 100%
       13: 1128:setup_jump (list, cmd, vec)
        -: 1129:     struct sed_label *list;
        -: 1130:     struct sed_cmd *cmd;
        -: 1131:     struct vector *vec;
        -: 1132:{
        -: 1133:  struct sed_label *tmp;
        -: 1134:  VOID *b;
        -: 1135:  int ch;
        -: 1136:
       13: 1137:  b = init_buffer ();
call    0 returned 13
       19: 1138:  while ((ch = inchar ()) != EOF && isblank (ch))
call    0 returned 19
branch  1 taken 19 (fallthrough)
branch  2 taken 0
branch  3 taken 6
branch  4 taken 13 (fallthrough)
        -: 1139:    ;
        -: 1140:  /* Possible non posixicity. */
       40: 1141:  while (ch != EOF && ch != '\n' && (!isblank (ch)) && ch != ';' && ch != '}')
branch  0 taken 40 (fallthrough)
branch  1 taken 0
branch  2 taken 27 (fallthrough)
branch  3 taken 13
branch  4 taken 27 (fallthrough)
branch  5 taken 0
branch  6 taken 27 (fallthrough)
branch  7 taken 0
branch  8 taken 27
branch  9 taken 0 (fallthrough)
        -: 1142:    {
       27: 1143:      add1_buffer (b, ch);
call    0 returned 27
       27: 1144:      ch = inchar ();
call    0 returned 27
        -: 1145:    }
       13: 1146:  savchar (ch);
call    0 returned 13
       13: 1147:  add1_buffer (b, '\0');
call    0 returned 13
       13: 1148:  tmp = (struct sed_label *) ck_malloc (sizeof (struct sed_label));
call    0 returned 13
       13: 1149:  tmp->v = vec;
       13: 1150:  tmp->v_index = cmd - vec->v;
       13: 1151:  tmp->name = ck_strdup (get_buffer (b));
call    0 returned 13
call    1 returned 13
       13: 1152:  tmp->next = list;
       13: 1153:  flush_buffer (b);
call    0 returned 13
       13: 1154:  return tmp;
        -: 1155:}
        -: 1156:
        -: 1157:/* read in a filename for a 'r', 'w', or 's///w' command, and
        -: 1158:   update the internal structure about files.  The file is
        -: 1159:   opened if it isn't already open. */
        -: 1160:FILE *
function compile_filename called 230 returned 100% blocks executed 79%
      230: 1161:compile_filename (readit)
        -: 1162:     int readit;
        -: 1163:{
        -: 1164:  char *file_name;
        -: 1165:  int n;
        -: 1166:  VOID *b;
        -: 1167:  int ch;
        -: 1168:
      230: 1169:  if (inchar () != ' ')
call    0 returned 230
branch  1 taken 0 (fallthrough)
branch  2 taken 230
    #####: 1170:    bad_prog ("missing ' ' before filename");
call    0 never executed
      230: 1171:  b = init_buffer ();
call    0 returned 230
     3097: 1172:  while ((ch = inchar ()) != EOF && ch != '\n')
call    0 returned 3097
branch  1 taken 3097 (fallthrough)
branch  2 taken 0
branch  3 taken 2867
branch  4 taken 230 (fallthrough)
     2867: 1173:    add1_buffer (b, ch);
call    0 returned 2867
      230: 1174:  add1_buffer (b, '\0');
call    0 returned 230
      230: 1175:  file_name = get_buffer (b);
call    0 returned 230
      292: 1176:  for (n = 0; n < NUM_FPS; n++)
branch  0 taken 292
branch  1 taken 0 (fallthrough)
        -: 1177:    {
      292: 1178:      if (!file_ptrs[n].name)
branch  0 taken 230 (fallthrough)
branch  1 taken 62
      230: 1179:	break;
       62: 1180:      if (!strcmp (file_ptrs[n].name, file_name))
branch  0 taken 0 (fallthrough)
branch  1 taken 62
        -: 1181:	{
    #####: 1182:	  if (file_ptrs[n].readit != readit)
branch  0 never executed
branch  1 never executed
    #####: 1183:	    bad_prog ("Can't open file for both reading and writing");
call    0 never executed
    #####: 1184:	  flush_buffer (b);
call    0 never executed
    #####: 1185:	  return file_ptrs[n].phile;
        -: 1186:	}
        -: 1187:    }
      230: 1188:  if (n < NUM_FPS)
branch  0 taken 230 (fallthrough)
branch  1 taken 0
        -: 1189:    {
      230: 1190:      file_ptrs[n].name = ck_strdup (file_name);
call    0 returned 230
      230: 1191:      file_ptrs[n].readit = readit;
      230: 1192:      if (!readit)
branch  0 taken 196 (fallthrough)
branch  1 taken 34
      196: 1193:	file_ptrs[n].phile = ck_fopen (file_name, "w");
call    0 returned 196
        -: 1194:      else
        -: 1195:	{
       34: 1196:	  file_ptrs[n].phile = ck_fopen (file_name, "r");
call    0 returned 34
        -: 1197:	}
      230: 1198:      flush_buffer (b);
call    0 returned 230
      230: 1199:      return file_ptrs[n].phile;
        -: 1200:    }
        -: 1201:  else
        -: 1202:    {
    #####: 1203:      bad_prog ("Hopelessely evil compiled in limit on number of open files.  re-compile sed");
call    0 never executed
    #####: 1204:      return 0;
        -: 1205:    }
        -: 1206:}
        -: 1207:
        -: 1208:/* Read a file and apply the compiled script to it. */
        -: 1209:void
function read_file called 354 returned 100% blocks executed 100%
      354: 1210:read_file (name)
        -: 1211:     char *name;
        -: 1212:{
      354: 1213:  if (*name == '-' && name[1] == '\0')
branch  0 taken 1 (fallthrough)
branch  1 taken 353
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1214:    input_file = stdin;
        -: 1215:  else
        -: 1216:    {
      353: 1217:      input_file = fopen (name, "r");
call    0 returned 353
      353: 1218:      if (input_file == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 352
        -: 1219:	{
        1: 1220:	  char *ptr = strerror(errno);
call    0 returned 1
        1: 1221:	  bad_input++;
        1: 1222:	  fprintf (stderr, "%s: can't read %s: %s\n", myname, name, ptr);
call    0 returned 1
        1: 1223:	  return;
        -: 1224:	}
        -: 1225:    }
    31936: 1226:  while (read_pattern_space ())
call    0 returned 31936
branch  1 taken 31630
branch  2 taken 306 (fallthrough)
        -: 1227:    {
    31630: 1228:      execute_program (the_program);
call    0 returned 31630
    31630: 1229:      if (!no_default_output)
branch  0 taken 12523 (fallthrough)
branch  1 taken 19107
    12523: 1230:	ck_fwrite (line.text, 1, line.length, stdout);
call    0 returned 12523
    31630: 1231:      if (append.length)
branch  0 taken 607 (fallthrough)
branch  1 taken 31023
        -: 1232:	{
      607: 1233:	  ck_fwrite (append.text, 1, append.length, stdout);
call    0 returned 607
      607: 1234:	  append.length = 0;
        -: 1235:	}
    31630: 1236:      if (quit_cmd)
branch  0 taken 47 (fallthrough)
branch  1 taken 31583
       47: 1237:	break;
        -: 1238:    }
      353: 1239:  ck_fclose (input_file);
call    0 returned 353
        -: 1240:}
        -: 1241:
        -: 1242:static char *
function eol_pos called 3793 returned 100% blocks executed 83%
     3793: 1243:eol_pos (str, len)
        -: 1244:     char *str;
        -: 1245:     int len;
        -: 1246:{
    58987: 1247:  while (len--)
branch  0 taken 58987
branch  1 taken 0 (fallthrough)
    58987: 1248:    if (*str++ == '\n')
branch  0 taken 3793 (fallthrough)
branch  1 taken 55194
     3793: 1249:      return --str;
    #####: 1250:  return --str;
        -: 1251:}
        -: 1252:
        -: 1253:static void
function chr_copy called 717 returned 100% blocks executed 100%
      717: 1254:chr_copy (dest, src, len)
        -: 1255:     char *dest;
        -: 1256:     char *src;
        -: 1257:     int len;
        -: 1258:{
    13145: 1259:  while (len--)
branch  0 taken 12428
branch  1 taken 717 (fallthrough)
    12428: 1260:    *dest++ = *src++;
      717: 1261:}
        -: 1262:
        -: 1263:/* Execute the program 'vec' on the current input line. */
        -: 1264:static struct re_registers regs =
        -: 1265:{0, 0, 0};
        -: 1266:
        -: 1267:void
function execute_program called 31630 returned 100% blocks executed 87%
    31630: 1268:execute_program (vec)
        -: 1269:     struct vector *vec;
        -: 1270:{
        -: 1271:  struct sed_cmd *cur_cmd;
        -: 1272:  int n;
        -: 1273:  int addr_matched;
        -: 1274:  static int end_cycle;
        -: 1275:
        -: 1276:  int start;
        -: 1277:  int remain;
        -: 1278:  int offset;
        -: 1279:
        -: 1280:  static struct line tmp;
        -: 1281:  struct line t;
        -: 1282:  char *rep, *rep_end, *rep_next, *rep_cur;
        -: 1283:
        -: 1284:  int count;
    31630: 1285:  struct vector *restart_vec = vec;
        -: 1286:
    32347: 1287:restart:
    32347: 1288:  vec = restart_vec;
    32347: 1289:  count = 0;
        -: 1290:
    32347: 1291:  end_cycle = 0;
        -: 1292:
    92510: 1293:  for (cur_cmd = vec->v, n = vec->v_length; n; cur_cmd++, n--)
branch  0 taken 66051
branch  1 taken 26459 (fallthrough)
        -: 1294:    {
    66051: 1295:    exe_loop:
    70795: 1296:      addr_matched = 0;
    70795: 1297:      if (cur_cmd->aflags & A1_MATCHED_BIT)
branch  0 taken 1841 (fallthrough)
branch  1 taken 68954
        -: 1298:	{
     1841: 1299:	  addr_matched = 1;
     1841: 1300:	  if (match_address (&(cur_cmd->a2)))
call    0 returned 1841
branch  1 taken 42 (fallthrough)
branch  2 taken 1799
       42: 1301:	    cur_cmd->aflags &= ~A1_MATCHED_BIT;
        -: 1302:	}
    68954: 1303:      else if (match_address (&(cur_cmd->a1)))
call    0 returned 68954
branch  1 taken 37176 (fallthrough)
branch  2 taken 31778
        -: 1304:	{
    37176: 1305:	  addr_matched = 1;
    37176: 1306:	  if (cur_cmd->a2.addr_type != addr_is_null)
branch  0 taken 60 (fallthrough)
branch  1 taken 37116
       60: 1307:	    if (   (cur_cmd->a2.addr_type == addr_is_regex)
branch  0 taken 20 (fallthrough)
branch  1 taken 40
       20: 1308:		|| !match_address (&(cur_cmd->a2)))
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0
       60: 1309:	      cur_cmd->aflags |= A1_MATCHED_BIT;
        -: 1310:
        -: 1311:	}
    70795: 1312:      if (cur_cmd->aflags & ADDR_BANG_BIT)
branch  0 taken 2112 (fallthrough)
branch  1 taken 68683
     2112: 1313:	addr_matched = !addr_matched;
    70795: 1314:      if (!addr_matched)
branch  0 taken 29830 (fallthrough)
branch  1 taken 40965
    29830: 1315:	continue;
    40965: 1316:      switch (cur_cmd->cmd)
branch  0 taken 4701
branch  1 taken 1264
branch  2 taken 378
branch  3 taken 228
branch  4 taken 546
branch  5 taken 119
branch  6 taken 2589
branch  7 taken 1734
branch  8 taken 1436
branch  9 taken 10
branch 10 taken 10
branch 11 taken 18
branch 12 taken 12
branch 13 taken 391
branch 14 taken 838
branch 15 taken 2908
branch 16 taken 2954
branch 17 taken 2054
branch 18 taken 2357
branch 19 taken 29
branch 20 taken 98
branch 21 taken 12566
branch 22 taken 13
branch 23 taken 1689
branch 24 taken 5
branch 25 taken 2018
branch 26 taken 0
        -: 1317:	{
     4701: 1318:	case '{':		/* Execute sub-program */
     4701: 1319:	  if (cur_cmd->x.sub->v_length)
branch  0 taken 4701 (fallthrough)
branch  1 taken 0
        -: 1320:	    {
     4701: 1321:	      vec = cur_cmd->x.sub;
     4701: 1322:	      cur_cmd = vec->v;
     4701: 1323:	      n = vec->v_length;
     4701: 1324:	      goto exe_loop;
        -: 1325:	    }
    #####: 1326:	  break;
        -: 1327:
     1264: 1328:	case '}':
     1264: 1329:	  cur_cmd = vec->return_v->v + vec->return_i;
     1264: 1330:	  n = vec->return_v->v_length - vec->return_i;
     1264: 1331:	  vec = vec->return_v;
     1264: 1332:	  break;
        -: 1333:
      378: 1334:	case ':':		/* Executing labels is easy. */
      378: 1335:	  break;
        -: 1336:
      228: 1337:	case '=':
      228: 1338:	  printf ("%d\n", input_line_number);
call    0 returned 228
      228: 1339:	  break;
        -: 1340:
      546: 1341:	case 'a':
      548: 1342:	  while (append.alloc - append.length < cur_cmd->x.cmd_txt.text_len)
branch  0 taken 2
branch  1 taken 546 (fallthrough)
        -: 1343:	    {
        2: 1344:	      append.alloc *= 2;
        2: 1345:	      append.text = ck_realloc (append.text, append.alloc);
call    0 returned 2
        -: 1346:	    }
      546: 1347:	  bcopy (cur_cmd->x.cmd_txt.text,
      546: 1348:		 append.text + append.length, cur_cmd->x.cmd_txt.text_len);
      546: 1349:	  append.length += cur_cmd->x.cmd_txt.text_len;
      546: 1350:	  break;
        -: 1351:
      119: 1352:	case 'b':
      119: 1353:	  if (!cur_cmd->x.jump)
branch  0 taken 77 (fallthrough)
branch  1 taken 42
       77: 1354:	    end_cycle++;
        -: 1355:	  else
        -: 1356:	    {
       42: 1357:	      struct sed_label *j = cur_cmd->x.jump;
        -: 1358:
       42: 1359:	      n = j->v->v_length - j->v_index;
       42: 1360:	      cur_cmd = j->v->v + j->v_index;
       42: 1361:	      goto exe_loop;
        -: 1362:	    }
       77: 1363:	  break;
        -: 1364:
     2589: 1365:	case 'c':
     2589: 1366:	  line.length = 0;
     2589: 1367:	  if (!((cur_cmd->aflags & A1_MATCHED_BIT)))
branch  0 taken 1821 (fallthrough)
branch  1 taken 768
     1821: 1368:	    ck_fwrite (cur_cmd->x.cmd_txt.text,
call    0 returned 1821
        -: 1369:		       1, cur_cmd->x.cmd_txt.text_len, stdout);
     2589: 1370:	  end_cycle++;
     2589: 1371:	  break;
        -: 1372:
     1734: 1373:	case 'd':
     1734: 1374:	  line.length = 0;
     1734: 1375:	  end_cycle++;
     1734: 1376:	  break;
        -: 1377:
     1436: 1378:	case 'D':
        -: 1379:	  {
        -: 1380:	    char *tmp;
        -: 1381:	    int newlength;
        -: 1382:
     1436: 1383:	    tmp = eol_pos (line.text, line.length);
call    0 returned 1436
     1436: 1384:	    newlength = line.length - (tmp - line.text) - 1;
     1436: 1385:	    if (newlength)
branch  0 taken 717 (fallthrough)
branch  1 taken 719
        -: 1386:	      {
      717: 1387:		chr_copy (line.text, tmp + 1, newlength);
call    0 returned 717
      717: 1388:		line.length = newlength;
      717: 1389:		goto restart;
        -: 1390:	      }
      719: 1391:	    line.length = 0;
      719: 1392:	    end_cycle++;
        -: 1393:	  }
      719: 1394:	  break;
        -: 1395:
       10: 1396:	case 'g':
       10: 1397:	  line_copy (&hold, &line);
call    0 returned 10
       10: 1398:	  break;
        -: 1399:
       10: 1400:	case 'G':
       10: 1401:	  line_append (&hold, &line);
call    0 returned 10
       10: 1402:	  break;
        -: 1403:
       18: 1404:	case 'h':
       18: 1405:	  line_copy (&line, &hold);
call    0 returned 18
       18: 1406:	  break;
        -: 1407:
       12: 1408:	case 'H':
       12: 1409:	  line_append (&line, &hold);
call    0 returned 12
       12: 1410:	  break;
        -: 1411:
      391: 1412:	case 'i':
      391: 1413:	  ck_fwrite (cur_cmd->x.cmd_txt.text, 1,
call    0 returned 391
        -: 1414:		     cur_cmd->x.cmd_txt.text_len, stdout);
      391: 1415:	  break;
        -: 1416:
      838: 1417:	case 'l':
        -: 1418:	  {
        -: 1419:	    char *tmp;
        -: 1420:	    int n;
      838: 1421:	    int width = 0;
        -: 1422:
      838: 1423:	    n = line.length;
      838: 1424:	    tmp = line.text;
    17562: 1425:	    while (n--)
branch  0 taken 17562
branch  1 taken 0 (fallthrough)
        -: 1426:	      {
        -: 1427:		/* Skip the trailing newline, if there is one */
    17562: 1428:		if (!n && (*tmp == '\n'))
branch  0 taken 838 (fallthrough)
branch  1 taken 16724
branch  2 taken 838 (fallthrough)
branch  3 taken 0
      838: 1429:		  break;
    16724: 1430:		if (width > 77)
branch  0 taken 2 (fallthrough)
branch  1 taken 16722
        -: 1431:		  {
        2: 1432:		    width = 0;
        2: 1433:		    putchar ('\n');
call    0 returned 2
        -: 1434:		  }
    16724: 1435:		if (*tmp == '\\')
branch  0 taken 0 (fallthrough)
branch  1 taken 16724
        -: 1436:		  {
    #####: 1437:		    printf ("\\\\");
call    0 never executed
    #####: 1438:		    width += 2;
        -: 1439:		  }
    16724: 1440:		else if (isprint (*tmp))
branch  0 taken 16265 (fallthrough)
branch  1 taken 459
        -: 1441:		  {
    16265: 1442:		    putchar (*tmp);
call    0 returned 16265
    16265: 1443:		    width++;
        -: 1444:		  }
        -: 1445:		else
      459: 1446:		  switch (*tmp)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 233
branch  4 taken 0
branch  5 taken 136
branch  6 taken 0
branch  7 taken 90
        -: 1447:		    {
        -: 1448:#if 0
        -: 1449:		      /* Should print \00 instead of \0 because (a) POSIX */
        -: 1450:		      /* requires it, and (b) this way \01 is unambiguous.  */
        -: 1451:		    case '\0':
        -: 1452:		      printf ("\\0");
        -: 1453:		      width += 2;
        -: 1454:		      break;
        -: 1455:#endif
    #####: 1456:		    case 007:
    #####: 1457:		      printf ("\\a");
call    0 never executed
    #####: 1458:		      width += 2;
    #####: 1459:		      break;
    #####: 1460:		    case '\b':
    #####: 1461:		      printf ("\\b");
call    0 never executed
    #####: 1462:		      width += 2;
    #####: 1463:		      break;
    #####: 1464:		    case '\f':
    #####: 1465:		      printf ("\\f");
call    0 never executed
    #####: 1466:		      width += 2;
    #####: 1467:		      break;
      233: 1468:		    case '\n':
      233: 1469:		      printf ("\\n");
call    0 returned 233
      233: 1470:		      width += 2;
      233: 1471:		      break;
    #####: 1472:		    case '\r':
    #####: 1473:		      printf ("\\r");
call    0 never executed
    #####: 1474:		      width += 2;
    #####: 1475:		      break;
      136: 1476:		    case '\t':
      136: 1477:		      printf ("\\t");
call    0 returned 136
      136: 1478:		      width += 2;
      136: 1479:		      break;
    #####: 1480:		    case '\v':
    #####: 1481:		      printf ("\\v");
call    0 never executed
    #####: 1482:		      width += 2;
    #####: 1483:		      break;
       90: 1484:		    default:
       90: 1485:		      printf ("\\%02x", (*tmp) & 0xFF);
call    0 returned 90
       90: 1486:		      width += 2;
       90: 1487:		      break;
        -: 1488:		    }
    16724: 1489:		tmp++;
        -: 1490:	      }
      838: 1491:	    putchar ('\n');
call    0 returned 838
        -: 1492:	  }
      838: 1493:	  break;
        -: 1494:
     2908: 1495:	case 'n':
     2908: 1496:	  if (feof (input_file))
call    0 returned 2908
branch  1 taken 8 (fallthrough)
branch  2 taken 2900
        8: 1497:	    goto quit;
     2900: 1498:	  if (!no_default_output)
branch  0 taken 891 (fallthrough)
branch  1 taken 2009
      891: 1499:	    ck_fwrite (line.text, 1, line.length, stdout);
call    0 returned 891
     2900: 1500:	  read_pattern_space ();
call    0 returned 2900
     2900: 1501:	  break;
        -: 1502:
     2954: 1503:	case 'N':
     2954: 1504:	  if (feof (input_file))
call    0 returned 2954
branch  1 taken 10 (fallthrough)
branch  2 taken 2944
        -: 1505:	    {
       10: 1506:	      line.length = 0;
       10: 1507:	      goto quit;
        -: 1508:	    }
     2944: 1509:	  append_pattern_space ();
call    0 returned 2944
     2944: 1510:	  break;
        -: 1511:
     2054: 1512:	case 'p':
     2054: 1513:	  ck_fwrite (line.text, 1, line.length, stdout);
call    0 returned 2054
     2054: 1514:	  break;
        -: 1515:
     2357: 1516:	case 'P':
        -: 1517:	  {
        -: 1518:	    char *tmp;
        -: 1519:
     2357: 1520:	    tmp = eol_pos (line.text, line.length);
call    0 returned 2357
    4714*: 1521:	    ck_fwrite (line.text, 1,
branch  0 taken 2357 (fallthrough)
branch  1 taken 0
call    2 returned 2357
     2357: 1522:		       tmp ? tmp - line.text + 1
        -: 1523:		       : line.length, stdout);
        -: 1524:	  }
     2357: 1525:	  break;
        -: 1526:
        -: 1527:	case 'q':
       47: 1528:	quit:
       47: 1529:	  quit_cmd++;
       47: 1530:	  end_cycle++;
       47: 1531:	  break;
        -: 1532:
       98: 1533:	case 'r':
        -: 1534:	  {
       98: 1535:	    int n = 0;
        -: 1536:
       98: 1537:	    if (cur_cmd->x.io_file)
branch  0 taken 98 (fallthrough)
branch  1 taken 0
        -: 1538:	      {
       98: 1539:		rewind (cur_cmd->x.io_file);
call    0 returned 98
        -: 1540:		do
        -: 1541:		  {
      229: 1542:		    append.length += n;
      229: 1543:		    if (append.length == append.alloc)
branch  0 taken 33 (fallthrough)
branch  1 taken 196
        -: 1544:		      {
       33: 1545:			append.alloc *= 2;
       33: 1546:			append.text = ck_realloc (append.text, append.alloc);
call    0 returned 33
        -: 1547:		      }
      458: 1548:		    n = fread (append.text + append.length, sizeof (char),
      229: 1549:			       append.alloc - append.length,
call    0 returned 229
        -: 1550:			       cur_cmd->x.io_file);
        -: 1551:		  }
      229: 1552:		while (n > 0);
branch  0 taken 131
branch  1 taken 98 (fallthrough)
       98: 1553:		if (ferror (cur_cmd->x.io_file))
call    0 returned 98
branch  1 taken 0 (fallthrough)
branch  2 taken 98
    #####: 1554:		  panic ("Read error on input file to 'r' command");
call    0 never executed
        -: 1555:	      }
        -: 1556:	  }
       98: 1557:	  break;
        -: 1558:
    12566: 1559:	case 's':
        -: 1560:	  {
    12566: 1561:	    int trail_nl_p = line.text [line.length - 1] == '\n';
    12566: 1562:	    if (!tmp.alloc)
branch  0 taken 179 (fallthrough)
branch  1 taken 12387
        -: 1563:	      {
      179: 1564:		tmp.alloc = 50;
      179: 1565:		tmp.text = ck_malloc (50);
call    0 returned 179
        -: 1566:	      }
    12566: 1567:	    count = 0;
    12566: 1568:	    start = 0;
    12566: 1569:	    remain = line.length - trail_nl_p;
    12566: 1570:	    tmp.length = 0;
    12566: 1571:	    rep = cur_cmd->x.cmd_regex.replacement;
    12566: 1572:	    rep_end = rep + cur_cmd->x.cmd_regex.replace_length;
        -: 1573:	    
    12566: 1574:	    while ((offset = re_search (cur_cmd->x.cmd_regex.regx,
    15140: 1575:					line.text,
    15140: 1576:					line.length - trail_nl_p,
call    0 returned 15140
        -: 1577:					start,
        -: 1578:					remain,
    15140: 1579:					&regs)) >= 0)
branch  0 taken 3588
branch  1 taken 11552 (fallthrough)
        -: 1580:	      {
     3588: 1581:		count++;
     3588: 1582:		if (offset - start)
branch  0 taken 948 (fallthrough)
branch  1 taken 2640
      948: 1583:		  str_append (&tmp, line.text + start, offset - start);
call    0 returned 948
        -: 1584:		
     3588: 1585:		if (cur_cmd->x.cmd_regex.flags & S_NUM_BIT)
branch  0 taken 0 (fallthrough)
branch  1 taken 3588
        -: 1586:		  {
    #####: 1587:		    if (count != cur_cmd->x.cmd_regex.numb)
branch  0 never executed
branch  1 never executed
    #####: 1588:		      {
    #####: 1589:			int matched = regs.end[0] - regs.start[0];
    #####: 1590:			if (!matched) matched = 1;
branch  0 never executed
branch  1 never executed
    #####: 1591:			str_append (&tmp, line.text + regs.start[0], matched);
call    0 never executed
    #####: 1592:			start = (offset == regs.end[0]
    #####: 1593:				 ? offset + 1 : regs.end[0]);
branch  0 never executed
branch  1 never executed
    #####: 1594:			remain = (line.length - trail_nl_p) - start;
    #####: 1595:			continue;
        -: 1596:		      }
        -: 1597:		  }
        -: 1598:		
    23225: 1599:		for (rep_next = rep_cur = rep; rep_next < rep_end; rep_next++)
branch  0 taken 19637
branch  1 taken 3588 (fallthrough)
        -: 1600:		  {
    19637: 1601:		    if (*rep_next == '&')
branch  0 taken 23 (fallthrough)
branch  1 taken 19614
        -: 1602:		      {
       23: 1603:			if (rep_next - rep_cur)
branch  0 taken 10 (fallthrough)
branch  1 taken 13
       10: 1604:			  str_append (&tmp, rep_cur, rep_next - rep_cur);
call    0 returned 10
       23: 1605:			str_append (&tmp, line.text + regs.start[0], regs.end[0] - regs.start[0]);
call    0 returned 23
       23: 1606:			rep_cur = rep_next + 1;
        -: 1607:		      }
    19614: 1608:		    else if (*rep_next == '\\')
branch  0 taken 1496 (fallthrough)
branch  1 taken 18118
        -: 1609:		      {
     1496: 1610:			if (rep_next - rep_cur)
branch  0 taken 621 (fallthrough)
branch  1 taken 875
      621: 1611:			  str_append (&tmp, rep_cur, rep_next - rep_cur);
call    0 returned 621
     1496: 1612:			rep_next++;
     1496: 1613:			if (rep_next != rep_end)
branch  0 taken 1496 (fallthrough)
branch  1 taken 0
        -: 1614:			  {
        -: 1615:			    int n;
        -: 1616:			    
     1496: 1617:			    if (*rep_next >= '0' && *rep_next <= '9')
branch  0 taken 2 (fallthrough)
branch  1 taken 1494
branch  2 taken 0 (fallthrough)
branch  3 taken 2
        -: 1618:			      {
    #####: 1619:				n = *rep_next - '0';
    #####: 1620:				str_append (&tmp, line.text + regs.start[n], regs.end[n] - regs.start[n]);
call    0 never executed
        -: 1621:			      }
        -: 1622:			    else
     1496: 1623:			      str_append (&tmp, rep_next, 1);
call    0 returned 1496
        -: 1624:			  }
     1496: 1625:			rep_cur = rep_next + 1;
        -: 1626:		      }
        -: 1627:		  }
     3588: 1628:		if (rep_next - rep_cur)
branch  0 taken 2141 (fallthrough)
branch  1 taken 1447
     2141: 1629:		  str_append (&tmp, rep_cur, rep_next - rep_cur);
call    0 returned 2141
     3588: 1630:		if (offset == regs.end[0])
branch  0 taken 1360 (fallthrough)
branch  1 taken 2228
        -: 1631:		  {
     1360: 1632:		    str_append (&tmp, line.text + offset, 1);
call    0 returned 1360
     1360: 1633:		    ++regs.end[0];
        -: 1634:		  }
     3588: 1635:		start = regs.end[0];
        -: 1636:		
     3588: 1637:		remain = (line.length - trail_nl_p) - start;
     3588: 1638:		if (remain < 0)
branch  0 taken 876 (fallthrough)
branch  1 taken 2712
      876: 1639:		  break;
     2712: 1640:		if (!(cur_cmd->x.cmd_regex.flags & S_GLOBAL_BIT))
branch  0 taken 138 (fallthrough)
branch  1 taken 2574
      138: 1641:		  break;
        -: 1642:	      }
    12566: 1643:	    if (!count)
branch  0 taken 10080 (fallthrough)
branch  1 taken 2486
    10080: 1644:	      break;
     2486: 1645:	    replaced = 1;
     2486: 1646:	    str_append (&tmp, line.text + start, remain + trail_nl_p);
call    0 returned 2486
     2486: 1647:	    t.text = line.text;
     2486: 1648:	    t.length = line.length;
     2486: 1649:	    t.alloc = line.alloc;
     2486: 1650:	    line.text = tmp.text;
     2486: 1651:	    line.length = tmp.length;
     2486: 1652:	    line.alloc = tmp.alloc;
     2486: 1653:	    tmp.text = t.text;
     2486: 1654:	    tmp.length = t.length;
     2486: 1655:	    tmp.alloc = t.alloc;
     2486: 1656:	    if ((cur_cmd->x.cmd_regex.flags & S_WRITE_BIT)
branch  0 taken 1436 (fallthrough)
branch  1 taken 1050
     1436: 1657:		&& cur_cmd->x.cmd_regex.wio_file)
branch  0 taken 1436 (fallthrough)
branch  1 taken 0
     1436: 1658:	      ck_fwrite (line.text, 1, line.length,
call    0 returned 1436
        -: 1659:			 cur_cmd->x.cmd_regex.wio_file);
     2486: 1660:	    if (cur_cmd->x.cmd_regex.flags & S_PRINT_BIT)
branch  0 taken 1287 (fallthrough)
branch  1 taken 1199
     1287: 1661:	      ck_fwrite (line.text, 1, line.length, stdout);
call    0 returned 1287
     2486: 1662:	    break;
        -: 1663:	  }
        -: 1664:	    
       13: 1665:	case 't':
       13: 1666:	  if (replaced)
branch  0 taken 6 (fallthrough)
branch  1 taken 7
        -: 1667:	    {
        6: 1668:	      replaced = 0;
        6: 1669:	      if (!cur_cmd->x.jump)
branch  0 taken 5 (fallthrough)
branch  1 taken 1
        5: 1670:		end_cycle++;
        -: 1671:	      else
        -: 1672:		{
        1: 1673:		  struct sed_label *j = cur_cmd->x.jump;
        -: 1674:
        1: 1675:		  n = j->v->v_length - j->v_index;
        1: 1676:		  cur_cmd = j->v->v + j->v_index;
        1: 1677:		  goto exe_loop;
        -: 1678:		}
        -: 1679:	    }
       12: 1680:	  break;
        -: 1681:
     1689: 1682:	case 'w':
     1689: 1683:	  if (cur_cmd->x.io_file)
branch  0 taken 1689 (fallthrough)
branch  1 taken 0
     1689: 1684:	    ck_fwrite (line.text, 1, line.length, cur_cmd->x.io_file);
call    0 returned 1689
     1689: 1685:	  break;
        -: 1686:
        5: 1687:	case 'x':
        -: 1688:	  {
        -: 1689:	    struct line tmp;
        -: 1690:
        5: 1691:	    tmp = line;
        5: 1692:	    line = hold;
        5: 1693:	    hold = tmp;
        -: 1694:	  }
        5: 1695:	  break;
        -: 1696:
     2018: 1697:	case 'y':
        -: 1698:	  {
        -: 1699:	    unsigned char *p, *e;
        -: 1700:
    41277: 1701:	    for (p = (unsigned char *) (line.text), e = p + line.length; p < e; p++)
branch  0 taken 39259
branch  1 taken 2018 (fallthrough)
    39259: 1702:	      *p = cur_cmd->x.translate[*p];
        -: 1703:	  }
     2018: 1704:	  break;
        -: 1705:
    #####: 1706:	default:
    #####: 1707:	  panic ("INTERNAL ERROR: Bad cmd %c", cur_cmd->cmd);
call    0 never executed
        -: 1708:	}
    35504: 1709:      if (end_cycle)
branch  0 taken 5171 (fallthrough)
branch  1 taken 30333
     5171: 1710:	break;
        -: 1711:    }
    31630: 1712:}
        -: 1713:
        -: 1714:
        -: 1715:/* Return non-zero if the current line matches the address
        -: 1716:   pointed to by 'addr'. */
        -: 1717:int
function match_address called 70815 returned 100% blocks executed 70%
    70815: 1718:match_address (addr)
        -: 1719:     struct addr *addr;
        -: 1720:{
    70815: 1721:  switch (addr->addr_type)
branch  0 taken 34868
branch  1 taken 3408
branch  2 taken 31802
branch  3 taken 737
branch  4 taken 0
        -: 1722:    {
    34868: 1723:    case addr_is_null:
    34868: 1724:      return 1;
     3408: 1725:    case addr_is_num:
     3408: 1726:      return (input_line_number == addr->addr_number);
        -: 1727:
    31802: 1728:    case addr_is_regex:
        -: 1729:      {
    31802: 1730:	int trail_nl_p = line.text [line.length - 1] == '\n';
    31802: 1731:	return (re_search (addr->addr_regex,
    31802: 1732:			   line.text,
    31802: 1733:			   line.length - trail_nl_p,
        -: 1734:			   0,
    31802: 1735:			   line.length - trail_nl_p,
call    0 returned 31802
    31802: 1736:			   (struct re_registers *) 0) >= 0) ? 1 : 0;
        -: 1737:      }
      737: 1738:    case addr_is_last:
      737: 1739:      return (input_EOF) ? 1 : 0;
        -: 1740:
    #####: 1741:    default:
    #####: 1742:      panic ("INTERNAL ERROR: bad address type");
call    0 never executed
    #####: 1743:      break;
        -: 1744:    }
    #####: 1745:  return -1;
        -: 1746:}
        -: 1747:
        -: 1748:/* Read in the next line of input, and store it in the
        -: 1749:   pattern space.  Return non-zero if this is the last line of input */
        -: 1750:
        -: 1751:int
function read_pattern_space called 34836 returned 100% blocks executed 96%
    34836: 1752:read_pattern_space ()
        -: 1753:{
        -: 1754:  int n;
        -: 1755:  char *p;
        -: 1756:  int ch;
        -: 1757:
    34836: 1758:  p = line.text;
    34836: 1759:  n = line.alloc;
        -: 1760:
    34836: 1761:  if (feof (input_file))
call    0 returned 34836
branch  1 taken 306 (fallthrough)
branch  2 taken 34530
      306: 1762:    return 0;
    34530: 1763:  input_line_number++;
    34530: 1764:  replaced = 0;
        -: 1765:  for (;;)
        -: 1766:    {
   549729: 1767:      if (n == 0)
branch  0 taken 253 (fallthrough)
branch  1 taken 549476
        -: 1768:	{
      253: 1769:	  line.text = ck_realloc (line.text, line.alloc * 2);
call    0 returned 253
      253: 1770:	  p = line.text + line.alloc;
      253: 1771:	  n = line.alloc;
      253: 1772:	  line.alloc *= 2;
        -: 1773:	}
   549729: 1774:      ch = getc (input_file);
call    0 returned 549729
   549729: 1775:      if (ch == EOF)
branch  0 taken 2 (fallthrough)
branch  1 taken 549727
        -: 1776:	{
        2: 1777:	  if (n == line.alloc)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1778:	    return 0;
        -: 1779:	  /* *p++ = '\n'; */
        -: 1780:	  /* --n; */
        2: 1781:	  line.length = line.alloc - n;
        2: 1782:	  if (last_input_file)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1783:	    input_EOF++;
        2: 1784:	  return 1;
        -: 1785:	}
   549727: 1786:      *p++ = ch;
   549727: 1787:      --n;
   549727: 1788:      if (ch == '\n')
branch  0 taken 34528 (fallthrough)
branch  1 taken 515199
        -: 1789:	{
    34528: 1790:	  line.length = line.alloc - n;
    34528: 1791:	  break;
        -: 1792:	}
        -: 1793:    }
    34528: 1794:  ch = getc (input_file);
call    0 returned 34528
    34528: 1795:  if (ch != EOF)
branch  0 taken 34239 (fallthrough)
branch  1 taken 289
    34239: 1796:    ungetc (ch, input_file);
call    0 returned 34239
      289: 1797:  else if (last_input_file)
branch  0 taken 288 (fallthrough)
branch  1 taken 1
      288: 1798:    input_EOF++;
    34528: 1799:  return 1;
        -: 1800:}
        -: 1801:
        -: 1802:/* Inplement the 'N' command, which appends the next line of input to
        -: 1803:   the pattern space. */
        -: 1804:void
function append_pattern_space called 2944 returned 100% blocks executed 75%
     2944: 1805:append_pattern_space ()
        -: 1806:{
        -: 1807:  char *p;
        -: 1808:  int n;
        -: 1809:  int ch;
        -: 1810:
     2944: 1811:  p = line.text + line.length;
     2944: 1812:  n = line.alloc - line.length;
        -: 1813:
     2944: 1814:  input_line_number++;
     2944: 1815:  replaced = 0;
        -: 1816:  for (;;)
        -: 1817:    {
    45938: 1818:      ch = getc (input_file);
call    0 returned 45938
    45938: 1819:      if (ch == EOF)
branch  0 taken 0 (fallthrough)
branch  1 taken 45938
        -: 1820:	{
    #####: 1821:	  if (n == line.alloc)
branch  0 never executed
branch  1 never executed
    #####: 1822:	    return;
        -: 1823:	  /* *p++ = '\n'; */
        -: 1824:	  /* --n; */
    #####: 1825:	  line.length = line.alloc - n;
    #####: 1826:	  if (last_input_file)
branch  0 never executed
branch  1 never executed
    #####: 1827:	    input_EOF++;
    #####: 1828:	  return;
        -: 1829:	}
    45938: 1830:      if (n == 0)
branch  0 taken 123 (fallthrough)
branch  1 taken 45815
        -: 1831:	{
      123: 1832:	  line.text = ck_realloc (line.text, line.alloc * 2);
call    0 returned 123
      123: 1833:	  p = line.text + line.alloc;
      123: 1834:	  n = line.alloc;
      123: 1835:	  line.alloc *= 2;
        -: 1836:	}
    45938: 1837:      *p++ = ch;
    45938: 1838:      --n;
    45938: 1839:      if (ch == '\n')
branch  0 taken 2944 (fallthrough)
branch  1 taken 42994
        -: 1840:	{
     2944: 1841:	  line.length = line.alloc - n;
     2944: 1842:	  break;
        -: 1843:	}
        -: 1844:    }
     2944: 1845:  ch = getc (input_file);
call    0 returned 2944
     2944: 1846:  if (ch != EOF)
branch  0 taken 2911 (fallthrough)
branch  1 taken 33
     2911: 1847:    ungetc (ch, input_file);
call    0 returned 2911
       33: 1848:  else if (last_input_file)
branch  0 taken 33 (fallthrough)
branch  1 taken 0
       33: 1849:    input_EOF++;
        -: 1850:}
        -: 1851:
        -: 1852:/* Copy the contents of the line 'from' into the line 'to'.
        -: 1853:   This destroys the old contents of 'to'.  It will still work
        -: 1854:   if the line 'from' contains nulls. */
        -: 1855:void
function line_copy called 28 returned 100% blocks executed 100%
       28: 1856:line_copy (from, to)
        -: 1857:     struct line *from, *to;
        -: 1858:{
       28: 1859:  if (from->length > to->alloc)
branch  0 taken 1 (fallthrough)
branch  1 taken 27
        -: 1860:    {
        1: 1861:      to->alloc = from->length;
        1: 1862:      to->text = ck_realloc (to->text, to->alloc);
call    0 returned 1
        -: 1863:    }
       28: 1864:  bcopy (from->text, to->text, from->length);
       28: 1865:  to->length = from->length;
       28: 1866:}
        -: 1867:
        -: 1868:/* Append the contents of the line 'from' to the line 'to'.
        -: 1869:   This routine will work even if the line 'from' contains nulls */
        -: 1870:void
function line_append called 22 returned 100% blocks executed 100%
       22: 1871:line_append (from, to)
        -: 1872:     struct line *from, *to;
        -: 1873:{
       22: 1874:  if (from->length > (to->alloc - to->length))
branch  0 taken 6 (fallthrough)
branch  1 taken 16
        -: 1875:    {
        6: 1876:      to->alloc += from->length;
        6: 1877:      to->text = ck_realloc (to->text, to->alloc);
call    0 returned 6
        -: 1878:    }
       22: 1879:  bcopy (from->text, to->text + to->length, from->length);
       22: 1880:  to->length += from->length;
       22: 1881:}
        -: 1882:
        -: 1883:/* Append 'length' bytes from 'string' to the line 'to'
        -: 1884:   This routine *will* append bytes with nulls in them, without
        -: 1885:   failing. */
        -: 1886:void
function str_append called 9085 returned 100% blocks executed 100%
     9085: 1887:str_append (to, string, length)
        -: 1888:     struct line *to;
        -: 1889:     char *string;
        -: 1890:     int length;
        -: 1891:{
     9085: 1892:  if (length > to->alloc - to->length)
branch  0 taken 34 (fallthrough)
branch  1 taken 9051
        -: 1893:    {
       34: 1894:      to->alloc += length;
       34: 1895:      to->text = ck_realloc (to->text, to->alloc);
call    0 returned 34
        -: 1896:    }
     9085: 1897:  bcopy (string, to->text + to->length, length);
     9085: 1898:  to->length += length;
     9085: 1899:}
        -: 1900:
        -: 1901:void
function usage called 7 returned 0% blocks executed 100%
        7: 1902:usage (status)
        -: 1903:     int status;
        -: 1904:{
        7: 1905:  fprintf (status ? stderr : stdout, "\
call    0 returned 7
        -: 1906:Usage: %s [-nV] [--quiet] [--silent] [--version] [-e script]\n\
        -: 1907:        [-f script-file] [--expression=script] [--file=script-file] [file...]\n",
        -: 1908:	   myname);
        7: 1909:  exit (status);
        -: 1910:}
        -: 1911:/*  Functions from hack's utils library.
        -: 1912:    Copyright (C) 1989, 1990, 1991 Free Software Foundation, Inc.
        -: 1913:
        -: 1914:    This program is free software; you can redistribute it and/or modify
        -: 1915:    it under the terms of the GNU General Public License as published by
        -: 1916:    the Free Software Foundation; either version 2, or (at your option)
        -: 1917:    any later version.
        -: 1918:
        -: 1919:    This program is distributed in the hope that it will be useful,
        -: 1920:    but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 1921:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 1922:    GNU General Public License for more details.
        -: 1923:
        -: 1924:    You should have received a copy of the GNU General Public License
        -: 1925:    along with this program; if not, write to the Free Software
        -: 1926:    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 1927:
        -: 1928:/* These routines were written as part of a library (by hack), but since most
        -: 1929:   people don't have the library, here they are.  */
        -: 1930:
        -: 1931:#ifdef __STDC__
        -: 1932:#define VOID void
        -: 1933:#else
        -: 1934:#define VOID char
        -: 1935:#endif
        -: 1936:
        -: 1937:#include <stdio.h>
        -: 1938:#if HAVE_STRING_H || defined(STDC_HEADERS)
        -: 1939:#include <string.h>
        -: 1940:#else
        -: 1941:#include <strings.h>
        -: 1942:#endif
        -: 1943:#if defined(STDC_HEADERS)
        -: 1944:#include <stdlib.h>
        -: 1945:#else
        -: 1946:VOID *malloc();
        -: 1947:VOID *realloc();
        -: 1948:#endif
        -: 1949:
        -: 1950:VOID *ck_malloc();
        -: 1951:
        -: 1952:char *myname;
        -: 1953:
        -: 1954:#ifdef __STDC__
        -: 1955:#include <stdarg.h>
        -: 1956:
        -: 1957:/* Print an error message and exit */
        -: 1958:void
function panic called 2 returned 0% blocks executed 100%
        2: 1959:panic(char *str, ...)
        -: 1960:{
        -: 1961:	va_list iggy;
        -: 1962:
        2: 1963:	fprintf(stderr,"%s: ",myname);
call    0 returned 2
        2: 1964:	va_start(iggy,str);
        -: 1965:#ifdef HAVE_VPRINTF
        2: 1966:	vfprintf(stderr,str,iggy);
call    0 returned 2
        -: 1967:#else
        -: 1968:#ifdef HAVE_DOPRNT
        -: 1969:	_doprnt(str,&iggy,stderr);
        -: 1970:#endif
        -: 1971:#endif
        2: 1972:	va_end(iggy);
        2: 1973:	putc('\n',stderr);
call    0 returned 2
        2: 1974:	exit(4);
        -: 1975:}
        -: 1976:
        -: 1977:#else
        -: 1978:#include <varargs.h>
        -: 1979:
        -: 1980:void
        -: 1981:panic(str,va_alist)
        -: 1982:char *str;
        -: 1983:va_dcl
        -: 1984:{
        -: 1985:	va_list iggy;
        -: 1986:
        -: 1987:	fprintf(stderr,"%s: ",myname);
        -: 1988:	va_start(iggy);
        -: 1989:#ifdef HAVE_VPRINTF
        -: 1990:	vfprintf(stderr,str,iggy);
        -: 1991:#else
        -: 1992:#ifdef HAVE_DOPRNT
        -: 1993:	_doprnt(str,&iggy,stderr);
        -: 1994:#endif
        -: 1995:#endif
        -: 1996:	va_end(iggy);
        -: 1997:	putc('\n',stderr);
        -: 1998:	exit(4);
        -: 1999:}
        -: 2000:
        -: 2001:#endif
        -: 2002:
        -: 2003:/* Store information about files opened with ck_fopen
        -: 2004:   so that error messages from ck_fread, etc can print the
        -: 2005:   name of the file that had the error */
        -: 2006:#define N_FILE 32
        -: 2007:
        -: 2008:struct id {
        -: 2009:	FILE *fp;
        -: 2010:	char *name;
        -: 2011:};
        -: 2012:
        -: 2013:static struct id __id_s[N_FILE];
        -: 2014:
        -: 2015:/* Internal routine to get a filename from __id_s */
        -: 2016:char *
function __fp_name called 0 returned 0% blocks executed 0%
    #####: 2017:__fp_name(fp)
        -: 2018:FILE *fp;
        -: 2019:{
        -: 2020:	int n;
        -: 2021:
    #####: 2022:	for(n=0;n<N_FILE;n++) {
branch  0 never executed
branch  1 never executed
    #####: 2023:		if(__id_s[n].fp==fp)
branch  0 never executed
branch  1 never executed
    #####: 2024:			return __id_s[n].name;
        -: 2025:	}
    #####: 2026:	return "{Unknown file pointer}";
        -: 2027:}
        -: 2028:
        -: 2029:/* Panic on failing fopen */
        -: 2030:FILE *
function ck_fopen called 569 returned 100% blocks executed 86%
      569: 2031:ck_fopen(name,mode)
        -: 2032:char *name;
        -: 2033:char *mode;
        -: 2034:{
        -: 2035:	FILE	*ret;
        -: 2036:	int	n;
        -: 2037:
      569: 2038:	ret=fopen(name,mode);
call    0 returned 569
      569: 2039:	if(ret==(FILE *)0)
branch  0 taken 2 (fallthrough)
branch  1 taken 567
        2: 2040:		panic("Couldn't open file %s",name);
call    0 returned 0
    18711: 2041:	for(n=0;n<N_FILE;n++) {
branch  0 taken 18144
branch  1 taken 567 (fallthrough)
    18144: 2042:		if(ret==__id_s[n].fp) {
branch  0 taken 0 (fallthrough)
branch  1 taken 18144
    #####: 2043:			free((VOID *)__id_s[n].name);
    #####: 2044:			__id_s[n].name=(char *)ck_malloc(strlen(name)+1);
call    0 never executed
    #####: 2045:			strcpy(__id_s[n].name,name);
    #####: 2046:			break;
        -: 2047:		}
        -: 2048:	}
      567: 2049:	if(n==N_FILE) {
branch  0 taken 567 (fallthrough)
branch  1 taken 0
      854: 2050:		for(n=0;n<N_FILE;n++)
branch  0 taken 854
branch  1 taken 0 (fallthrough)
      854: 2051:			if(__id_s[n].fp==(FILE *)0)
branch  0 taken 567 (fallthrough)
branch  1 taken 287
      567: 2052:				break;
      567: 2053:		if(n==N_FILE)
branch  0 taken 0 (fallthrough)
branch  1 taken 567
    #####: 2054:			panic("Internal error: too many files open");
call    0 never executed
      567: 2055:		__id_s[n].fp=ret;
      567: 2056:		__id_s[n].name=(char *)ck_malloc(strlen(name)+1);
call    0 returned 567
      567: 2057:		strcpy(__id_s[n].name,name);
        -: 2058:	}
      567: 2059:	return ret;
        -: 2060:}
        -: 2061:
        -: 2062:/* Panic on failing fwrite */
        -: 2063:void
function ck_fwrite called 25056 returned 100% blocks executed 60%
    25056: 2064:ck_fwrite(ptr,size,nmemb,stream)
        -: 2065:char *ptr;
        -: 2066:int size,nmemb;
        -: 2067:FILE *stream;
        -: 2068:{
    25056: 2069:	if(fwrite(ptr,size,nmemb,stream)!=nmemb)
call    0 returned 25056
branch  1 taken 0 (fallthrough)
branch  2 taken 25056
    #####: 2070:		panic("couldn't write %d items to %s",nmemb,__fp_name(stream));
call    0 never executed
call    1 never executed
    25056: 2071:}
        -: 2072:
        -: 2073:/* Panic on failing fclose */
        -: 2074:void
function ck_fclose called 353 returned 100% blocks executed 60%
      353: 2075:ck_fclose(stream)
        -: 2076:FILE *stream;
        -: 2077:{
      353: 2078:	if(fclose(stream)==EOF)
call    0 returned 353
branch  1 taken 0 (fallthrough)
branch  2 taken 353
    #####: 2079:		panic("Couldn't close %s",__fp_name(stream));
call    0 never executed
call    1 never executed
      353: 2080:}
        -: 2081:
        -: 2082:/* Panic on failing malloc */
        -: 2083:VOID *
function ck_malloc called 8144 returned 100% blocks executed 83%
     8144: 2084:ck_malloc(size)
        -: 2085:int size;
        -: 2086:{
        -: 2087:	VOID *ret;
        -: 2088:
     8144: 2089:	if(!size)
branch  0 taken 4 (fallthrough)
branch  1 taken 8140
        4: 2090:		size++;
     8144: 2091:	ret=malloc(size);
     8144: 2092:	if(ret==(VOID *)0)
branch  0 taken 0 (fallthrough)
branch  1 taken 8144
    #####: 2093:		panic("Couldn't allocate memory");
call    0 never executed
     8144: 2094:	return ret;
        -: 2095:}
        -: 2096:
        -: 2097:/* Panic on failing malloc */
        -: 2098:VOID *
function xmalloc called 0 returned 0% blocks executed 0%
    #####: 2099:xmalloc(size)
        -: 2100:int size;
        -: 2101:{
    #####: 2102:  return ck_malloc (size);
call    0 never executed
        -: 2103:}
        -: 2104:
        -: 2105:/* Panic on failing realloc */
        -: 2106:VOID *
function ck_realloc called 453 returned 100% blocks executed 75%
      453: 2107:ck_realloc(ptr,size)
        -: 2108:VOID *ptr;
        -: 2109:int size;
        -: 2110:{
        -: 2111:	VOID *ret;
        -: 2112:
      453: 2113:	ret=realloc(ptr,size);
      453: 2114:	if(ret==(VOID *)0)
branch  0 taken 0 (fallthrough)
branch  1 taken 453
    #####: 2115:		panic("Couldn't re-allocate memory");
call    0 never executed
      453: 2116:	return ret;
        -: 2117:}
        -: 2118:
        -: 2119:/* Return a malloc()'d copy of a string */
        -: 2120:char *
function ck_strdup called 243 returned 100% blocks executed 100%
      243: 2121:ck_strdup(str)
        -: 2122:char *str;
        -: 2123:{
        -: 2124:	char *ret;
        -: 2125:
      243: 2126:	ret=(char *)ck_malloc(strlen(str)+2);
call    0 returned 243
      243: 2127:	strcpy(ret,str);
      243: 2128:	return ret;
        -: 2129:}
        -: 2130:
        -: 2131:
        -: 2132:/* Implement a variable sized buffer of 'stuff'.  We don't know what it is,
        -: 2133:   nor do we care, as long as it doesn't mind being aligned by malloc. */
        -: 2134:
        -: 2135:struct buffer {
        -: 2136:	int	allocated;
        -: 2137:	int	length;
        -: 2138:	char	*b;
        -: 2139:};
        -: 2140:
        -: 2141:#define MIN_ALLOCATE 50
        -: 2142:
        -: 2143:VOID *
function init_buffer called 1247 returned 100% blocks executed 100%
     1247: 2144:init_buffer()
        -: 2145:{
        -: 2146:	struct buffer *b;
        -: 2147:
     1247: 2148:	b=(struct buffer *)ck_malloc(sizeof(struct buffer));
call    0 returned 1247
     1247: 2149:	b->allocated=MIN_ALLOCATE;
     1247: 2150:	b->b=(char *)ck_malloc(MIN_ALLOCATE);
call    0 returned 1247
     1247: 2151:	b->length=0;
     1247: 2152:	return (VOID *)b;
        -: 2153:}
        -: 2154:
        -: 2155:void
function flush_buffer called 1247 returned 100% blocks executed 100%
     1247: 2156:flush_buffer(bb)
        -: 2157:VOID *bb;
        -: 2158:{
        -: 2159:	struct buffer *b;
        -: 2160:
     1247: 2161:	b=(struct buffer *)bb;
     1247: 2162:	free(b->b);
     1247: 2163:	b->b=0;
     1247: 2164:	b->allocated=0;
     1247: 2165:	b->length=0;
     1247: 2166:	free(b);
     1247: 2167:}
        -: 2168:
        -: 2169:int
function size_buffer called 2373 returned 100% blocks executed 100%
     2373: 2170:size_buffer(b)
        -: 2171:VOID *b;
        -: 2172:{
        -: 2173:	struct buffer *bb;
        -: 2174:
     2373: 2175:	bb=(struct buffer *)b;
     2373: 2176:	return bb->length;
        -: 2177:}
        -: 2178:
        -: 2179:void
function add_buffer called 0 returned 0% blocks executed 0%
    #####: 2180:add_buffer(bb,p,n)
        -: 2181:VOID *bb;
        -: 2182:char *p;
        -: 2183:int n;
        -: 2184:{
        -: 2185:	struct buffer *b;
        -: 2186:	int x;
        -: 2187:	char * cp;
        -: 2188:
    #####: 2189:	b=(struct buffer *)bb;
    #####: 2190:	if(b->length+n>b->allocated) {
branch  0 never executed
branch  1 never executed
    #####: 2191:		b->allocated*=2;
    #####: 2192:		b->b=(char *)ck_realloc(b->b,b->allocated);
call    0 never executed
        -: 2193:	}
        -: 2194:	
    #####: 2195:	x = n;
    #####: 2196:	cp = b->b + b->length;
    #####: 2197:	while (x--)
branch  0 never executed
branch  1 never executed
    #####: 2198:	  *cp++ = *p++;
    #####: 2199:	b->length+=n;
    #####: 2200:}
        -: 2201:
        -: 2202:void
function add1_buffer called 10870 returned 100% blocks executed 50%
    10870: 2203:add1_buffer(bb,ch)
        -: 2204:VOID *bb;
        -: 2205:int ch;
        -: 2206:{
        -: 2207:	struct buffer *b;
        -: 2208:
    10870: 2209:	b=(struct buffer *)bb;
    10870: 2210:	if(b->length+1>b->allocated) {
branch  0 taken 0 (fallthrough)
branch  1 taken 10870
    #####: 2211:		b->allocated*=2;
    #####: 2212:		b->b=(char *)ck_realloc(b->b,b->allocated);
call    0 never executed
        -: 2213:	}
    10870: 2214:	b->b[b->length]=ch;
    10870: 2215:	b->length++;
    10870: 2216:}
        -: 2217:
        -: 2218:char *
function get_buffer called 1234 returned 100% blocks executed 100%
     1234: 2219:get_buffer(bb)
        -: 2220:VOID *bb;
        -: 2221:{
        -: 2222:	struct buffer *b;
        -: 2223:
     1234: 2224:	b=(struct buffer *)bb;
     1234: 2225:	return b->b;
        -: 2226:}
        -: 2227:/* Extended regular expression matching and search library,
        -: 2228:   version 0.12.
        -: 2229:   (Implements POSIX draft P10003.2/D11.2, except for
        -: 2230:   internationalization features.)
        -: 2231:
        -: 2232:   Copyright (C) 1993 Free Software Foundation, Inc.
        -: 2233:
        -: 2234:   This program is free software; you can redistribute it and/or modify
        -: 2235:   it under the terms of the GNU General Public License as published by
        -: 2236:   the Free Software Foundation; either version 2, or (at your option)
        -: 2237:   any later version.
        -: 2238:
        -: 2239:   This program is distributed in the hope that it will be useful,
        -: 2240:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 2241:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 2242:   GNU General Public License for more details.
        -: 2243:
        -: 2244:   You should have received a copy of the GNU General Public License
        -: 2245:   along with this program; if not, write to the Free Software
        -: 2246:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 2247:
        -: 2248:/* AIX requires this to be the first thing in the file. */
        -: 2249:#if defined (_AIX) && !defined (REGEX_MALLOC)
        -: 2250:  #pragma alloca
        -: 2251:#endif
        -: 2252:
        -: 2253:#define _GNU_SOURCE
        -: 2254:
        -: 2255:/* We need this for `regex.h', and perhaps for the Emacs include files.  */
        -: 2256:#include <sys/types.h>
        -: 2257:
        -: 2258:#ifdef HAVE_CONFIG_H
        -: 2259:#include "config.h"
        -: 2260:#endif
        -: 2261:
        -: 2262:/* The `emacs' switch turns on certain matching commands
        -: 2263:   that make sense only in Emacs. */
        -: 2264:#ifdef emacs
        -: 2265:
        -: 2266:#include "lisp.h"
        -: 2267:#include "buffer.h"
        -: 2268:#include "syntax.h"
        -: 2269:
        -: 2270:/* Emacs uses `NULL' as a predicate.  */
        -: 2271:#undef NULL
        -: 2272:
        -: 2273:#else  /* not emacs */
        -: 2274:
        -: 2275:/* We used to test for `BSTRING' here, but only GCC and Emacs define
        -: 2276:   `BSTRING', as far as I know, and neither of them use this code.  */
        -: 2277:#if HAVE_STRING_H || STDC_HEADERS
        -: 2278:#include <string.h>
        -: 2279:#ifndef bcmp
        -: 2280:#define bcmp(s1, s2, n)	memcmp ((s1), (s2), (n))
        -: 2281:#endif
        -: 2282:#ifndef bcopy
        -: 2283:#define bcopy(s, d, n)	memcpy ((d), (s), (n))
        -: 2284:#endif
        -: 2285:#ifndef bzero
        -: 2286:#define bzero(s, n)	memset ((s), 0, (n))
        -: 2287:#endif
        -: 2288:#else
        -: 2289:#include <strings.h>
        -: 2290:#endif
        -: 2291:
        -: 2292:#ifdef STDC_HEADERS
        -: 2293:#include <stdlib.h>
        -: 2294:#else
        -: 2295:char *malloc ();
        -: 2296:char *realloc ();
        -: 2297:#endif
        -: 2298:
        -: 2299:/* Define the syntax stuff for \<, \>, etc.  */
        -: 2300:
        -: 2301:/* This must be nonzero for the wordchar and notwordchar pattern
        -: 2302:   commands in re_match_2.  */
        -: 2303:#ifndef Sword 
        -: 2304:#define Sword 1
        -: 2305:#endif
        -: 2306:
        -: 2307:#ifdef SYNTAX_TABLE
        -: 2308:
        -: 2309:extern char *re_syntax_table;
        -: 2310:
        -: 2311:#else /* not SYNTAX_TABLE */
        -: 2312:
        -: 2313:/* How many characters in the character set.  */
        -: 2314:#define CHAR_SET_SIZE 256
        -: 2315:
        -: 2316:static char re_syntax_table[CHAR_SET_SIZE];
        -: 2317:
        -: 2318:static void
function init_syntax_once called 603 returned 100% blocks executed 100%
      603: 2319:init_syntax_once ()
        -: 2320:{
        -: 2321:   register int c;
        -: 2322:   static int done = 0;
        -: 2323:
      603: 2324:   if (done)
branch  0 taken 298 (fallthrough)
branch  1 taken 305
      298: 2325:     return;
        -: 2326:
      305: 2327:   bzero (re_syntax_table, sizeof re_syntax_table);
        -: 2328:
     8235: 2329:   for (c = 'a'; c <= 'z'; c++)
branch  0 taken 7930
branch  1 taken 305 (fallthrough)
     7930: 2330:     re_syntax_table[c] = Sword;
        -: 2331:
     8235: 2332:   for (c = 'A'; c <= 'Z'; c++)
branch  0 taken 7930
branch  1 taken 305 (fallthrough)
     7930: 2333:     re_syntax_table[c] = Sword;
        -: 2334:
     3355: 2335:   for (c = '0'; c <= '9'; c++)
branch  0 taken 3050
branch  1 taken 305 (fallthrough)
     3050: 2336:     re_syntax_table[c] = Sword;
        -: 2337:
      305: 2338:   re_syntax_table['_'] = Sword;
        -: 2339:
      305: 2340:   done = 1;
        -: 2341:}
        -: 2342:
        -: 2343:#endif /* not SYNTAX_TABLE */
        -: 2344:
        -: 2345:#define SYNTAX(c) re_syntax_table[c]
        -: 2346:
        -: 2347:#endif /* not emacs */
        -: 2348:
        -: 2349:/* Get the interface, including the syntax bits.  */
        -: 2350:#include "regex.h"
        -: 2351:
        -: 2352:/* isalpha etc. are used for the character classes.  */
        -: 2353:#include <ctype.h>
        -: 2354:
        -: 2355:#ifndef isascii
        -: 2356:#define isascii(c) 1
        -: 2357:#endif
        -: 2358:
        -: 2359:#ifdef isblank
        -: 2360:#define ISBLANK(c) (isascii (c) && isblank (c))
        -: 2361:#else
        -: 2362:#define ISBLANK(c) ((c) == ' ' || (c) == '\t')
        -: 2363:#endif
        -: 2364:#ifdef isgraph
        -: 2365:#define ISGRAPH(c) (isascii (c) && isgraph (c))
        -: 2366:#else
        -: 2367:#define ISGRAPH(c) (isascii (c) && isprint (c) && !isspace (c))
        -: 2368:#endif
        -: 2369:
        -: 2370:#define ISPRINT(c) (isascii (c) && isprint (c))
        -: 2371:#define ISDIGIT(c) (isascii (c) && isdigit (c))
        -: 2372:#define ISALNUM(c) (isascii (c) && isalnum (c))
        -: 2373:#define ISALPHA(c) (isascii (c) && isalpha (c))
        -: 2374:#define ISCNTRL(c) (isascii (c) && iscntrl (c))
        -: 2375:#define ISLOWER(c) (isascii (c) && islower (c))
        -: 2376:#define ISPUNCT(c) (isascii (c) && ispunct (c))
        -: 2377:#define ISSPACE(c) (isascii (c) && isspace (c))
        -: 2378:#define ISUPPER(c) (isascii (c) && isupper (c))
        -: 2379:#define ISXDIGIT(c) (isascii (c) && isxdigit (c))
        -: 2380:
        -: 2381:#ifndef NULL
        -: 2382:#define NULL 0
        -: 2383:#endif
        -: 2384:
        -: 2385:/* We remove any previous definition of `SIGN_EXTEND_CHAR',
        -: 2386:   since ours (we hope) works properly with all combinations of
        -: 2387:   machines, compilers, `char' and `unsigned char' argument types.
        -: 2388:   (Per Bothner suggested the basic approach.)  */
        -: 2389:#undef SIGN_EXTEND_CHAR
        -: 2390:#if __STDC__
        -: 2391:#define SIGN_EXTEND_CHAR(c) ((signed char) (c))
        -: 2392:#else  /* not __STDC__ */
        -: 2393:/* As in Harbison and Steele.  */
        -: 2394:#define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - 128)
        -: 2395:#endif
        -: 2396:
        -: 2397:/* Should we use malloc or alloca?  If REGEX_MALLOC is not defined, we
        -: 2398:   use `alloca' instead of `malloc'.  This is because using malloc in
        -: 2399:   re_search* or re_match* could cause memory leaks when C-g is used in
        -: 2400:   Emacs; also, malloc is slower and causes storage fragmentation.  On
        -: 2401:   the other hand, malloc is more portable, and easier to debug.  
        -: 2402:   
        -: 2403:   Because we sometimes use alloca, some routines have to be macros,
        -: 2404:   not functions -- `alloca'-allocated space disappears at the end of the
        -: 2405:   function it is called in.  */
        -: 2406:
        -: 2407:#ifdef REGEX_MALLOC
        -: 2408:
        -: 2409:#define REGEX_ALLOCATE malloc
        -: 2410:#define REGEX_REALLOCATE(source, osize, nsize) realloc (source, nsize)
        -: 2411:
        -: 2412:#else /* not REGEX_MALLOC  */
        -: 2413:
        -: 2414:/* Emacs already defines alloca, sometimes.  */
        -: 2415:#ifndef alloca
        -: 2416:
        -: 2417:/* Make alloca work the best possible way.  */
        -: 2418:#ifdef __GNUC__
        -: 2419:#define alloca __builtin_alloca
        -: 2420:#else /* not __GNUC__ */
        -: 2421:#if HAVE_ALLOCA_H
        -: 2422:#include <alloca.h>
        -: 2423:#else /* not __GNUC__ or HAVE_ALLOCA_H */
        -: 2424:#ifndef _AIX /* Already did AIX, up at the top.  */
        -: 2425:char *alloca ();
        -: 2426:#endif /* not _AIX */
        -: 2427:#endif /* not HAVE_ALLOCA_H */ 
        -: 2428:#endif /* not __GNUC__ */
        -: 2429:
        -: 2430:#endif /* not alloca */
        -: 2431:
        -: 2432:#define REGEX_ALLOCATE alloca
        -: 2433:
        -: 2434:/* Assumes a `char *destination' variable.  */
        -: 2435:#define REGEX_REALLOCATE(source, osize, nsize)				\
        -: 2436:  (destination = (char *) alloca (nsize),				\
        -: 2437:   bcopy (source, destination, osize),					\
        -: 2438:   destination)
        -: 2439:
        -: 2440:#endif /* not REGEX_MALLOC */
        -: 2441:
        -: 2442:
        -: 2443:/* True if `size1' is non-NULL and PTR is pointing anywhere inside
        -: 2444:   `string1' or just past its end.  This works if PTR is NULL, which is
        -: 2445:   a good thing.  */
        -: 2446:#define FIRST_STRING_P(ptr) 					\
        -: 2447:  (size1 && string1 <= (ptr) && (ptr) <= string1 + size1)
        -: 2448:
        -: 2449:/* (Re)Allocate N items of type T using malloc, or fail.  */
        -: 2450:#define TALLOC(n, t) ((t *) malloc ((n) * sizeof (t)))
        -: 2451:#define RETALLOC(addr, n, t) ((addr) = (t *) realloc (addr, (n) * sizeof (t)))
        -: 2452:#define REGEX_TALLOC(n, t) ((t *) REGEX_ALLOCATE ((n) * sizeof (t)))
        -: 2453:
        -: 2454:#define BYTEWIDTH 8 /* In bits.  */
        -: 2455:
        -: 2456:#define STREQ(s1, s2) ((strcmp (s1, s2) == 0))
        -: 2457:
        -: 2458:#define MAX(a, b) ((a) > (b) ? (a) : (b))
        -: 2459:#define MIN(a, b) ((a) < (b) ? (a) : (b))
        -: 2460:
        -: 2461:typedef char boolean;
        -: 2462:#define false 0
        -: 2463:#define true 1
        -: 2464:
        -: 2465:/* These are the command codes that appear in compiled regular
        -: 2466:   expressions.  Some opcodes are followed by argument bytes.  A
        -: 2467:   command code can specify any interpretation whatsoever for its
        -: 2468:   arguments.  Zero bytes may appear in the compiled regular expression.
        -: 2469:
        -: 2470:   The value of `exactn' is needed in search.c (search_buffer) in Emacs.
        -: 2471:   So regex.h defines a symbol `RE_EXACTN_VALUE' to be 1; the value of
        -: 2472:   `exactn' we use here must also be 1.  */
        -: 2473:
        -: 2474:typedef enum
        -: 2475:{
        -: 2476:  no_op = 0,
        -: 2477:
        -: 2478:        /* Followed by one byte giving n, then by n literal bytes.  */
        -: 2479:  exactn = 1,
        -: 2480:
        -: 2481:        /* Matches any (more or less) character.  */
        -: 2482:  anychar,
        -: 2483:
        -: 2484:        /* Matches any one char belonging to specified set.  First
        -: 2485:           following byte is number of bitmap bytes.  Then come bytes
        -: 2486:           for a bitmap saying which chars are in.  Bits in each byte
        -: 2487:           are ordered low-bit-first.  A character is in the set if its
        -: 2488:           bit is 1.  A character too large to have a bit in the map is
        -: 2489:           automatically not in the set.  */
        -: 2490:  charset,
        -: 2491:
        -: 2492:        /* Same parameters as charset, but match any character that is
        -: 2493:           not one of those specified.  */
        -: 2494:  charset_not,
        -: 2495:
        -: 2496:        /* Start remembering the text that is matched, for storing in a
        -: 2497:           register.  Followed by one byte with the register number, in
        -: 2498:           the range 0 to one less than the pattern buffer's re_nsub
        -: 2499:           field.  Then followed by one byte with the number of groups
        -: 2500:           inner to this one.  (This last has to be part of the
        -: 2501:           start_memory only because we need it in the on_failure_jump
        -: 2502:           of re_match_2.)  */
        -: 2503:  start_memory,
        -: 2504:
        -: 2505:        /* Stop remembering the text that is matched and store it in a
        -: 2506:           memory register.  Followed by one byte with the register
        -: 2507:           number, in the range 0 to one less than `re_nsub' in the
        -: 2508:           pattern buffer, and one byte with the number of inner groups,
        -: 2509:           just like `start_memory'.  (We need the number of inner
        -: 2510:           groups here because we don't have any easy way of finding the
        -: 2511:           corresponding start_memory when we're at a stop_memory.)  */
        -: 2512:  stop_memory,
        -: 2513:
        -: 2514:        /* Match a duplicate of something remembered. Followed by one
        -: 2515:           byte containing the register number.  */
        -: 2516:  duplicate,
        -: 2517:
        -: 2518:        /* Fail unless at beginning of line.  */
        -: 2519:  begline,
        -: 2520:
        -: 2521:        /* Fail unless at end of line.  */
        -: 2522:  endline,
        -: 2523:
        -: 2524:        /* Succeeds if at beginning of buffer (if emacs) or at beginning
        -: 2525:           of string to be matched (if not).  */
        -: 2526:  begbuf,
        -: 2527:
        -: 2528:        /* Analogously, for end of buffer/string.  */
        -: 2529:  endbuf,
        -: 2530: 
        -: 2531:        /* Followed by two byte relative address to which to jump.  */
        -: 2532:  jump, 
        -: 2533:
        -: 2534:	/* Same as jump, but marks the end of an alternative.  */
        -: 2535:  jump_past_alt,
        -: 2536:
        -: 2537:        /* Followed by two-byte relative address of place to resume at
        -: 2538:           in case of failure.  */
        -: 2539:  on_failure_jump,
        -: 2540:	
        -: 2541:        /* Like on_failure_jump, but pushes a placeholder instead of the
        -: 2542:           current string position when executed.  */
        -: 2543:  on_failure_keep_string_jump,
        -: 2544:  
        -: 2545:        /* Throw away latest failure point and then jump to following
        -: 2546:           two-byte relative address.  */
        -: 2547:  pop_failure_jump,
        -: 2548:
        -: 2549:        /* Change to pop_failure_jump if know won't have to backtrack to
        -: 2550:           match; otherwise change to jump.  This is used to jump
        -: 2551:           back to the beginning of a repeat.  If what follows this jump
        -: 2552:           clearly won't match what the repeat does, such that we can be
        -: 2553:           sure that there is no use backtracking out of repetitions
        -: 2554:           already matched, then we change it to a pop_failure_jump.
        -: 2555:           Followed by two-byte address.  */
        -: 2556:  maybe_pop_jump,
        -: 2557:
        -: 2558:        /* Jump to following two-byte address, and push a dummy failure
        -: 2559:           point. This failure point will be thrown away if an attempt
        -: 2560:           is made to use it for a failure.  A `+' construct makes this
        -: 2561:           before the first repeat.  Also used as an intermediary kind
        -: 2562:           of jump when compiling an alternative.  */
        -: 2563:  dummy_failure_jump,
        -: 2564:
        -: 2565:	/* Push a dummy failure point and continue.  Used at the end of
        -: 2566:	   alternatives.  */
        -: 2567:  push_dummy_failure,
        -: 2568:
        -: 2569:        /* Followed by two-byte relative address and two-byte number n.
        -: 2570:           After matching N times, jump to the address upon failure.  */
        -: 2571:  succeed_n,
        -: 2572:
        -: 2573:        /* Followed by two-byte relative address, and two-byte number n.
        -: 2574:           Jump to the address N times, then fail.  */
        -: 2575:  jump_n,
        -: 2576:
        -: 2577:        /* Set the following two-byte relative address to the
        -: 2578:           subsequent two-byte number.  The address *includes* the two
        -: 2579:           bytes of number.  */
        -: 2580:  set_number_at,
        -: 2581:
        -: 2582:  wordchar,	/* Matches any word-constituent character.  */
        -: 2583:  notwordchar,	/* Matches any char that is not a word-constituent.  */
        -: 2584:
        -: 2585:  wordbeg,	/* Succeeds if at word beginning.  */
        -: 2586:  wordend,	/* Succeeds if at word end.  */
        -: 2587:
        -: 2588:  wordbound,	/* Succeeds if at a word boundary.  */
        -: 2589:  notwordbound	/* Succeeds if not at a word boundary.  */
        -: 2590:
        -: 2591:#ifdef emacs
        -: 2592:  ,before_dot,	/* Succeeds if before point.  */
        -: 2593:  at_dot,	/* Succeeds if at point.  */
        -: 2594:  after_dot,	/* Succeeds if after point.  */
        -: 2595:
        -: 2596:	/* Matches any character whose syntax is specified.  Followed by
        -: 2597:           a byte which contains a syntax code, e.g., Sword.  */
        -: 2598:  syntaxspec,
        -: 2599:
        -: 2600:	/* Matches any character whose syntax is not that specified.  */
        -: 2601:  notsyntaxspec
        -: 2602:#endif /* emacs */
        -: 2603:} re_opcode_t;
        -: 2604:
        -: 2605:/* Common operations on the compiled pattern.  */
        -: 2606:
        -: 2607:/* Store NUMBER in two contiguous bytes starting at DESTINATION.  */
        -: 2608:
        -: 2609:#define STORE_NUMBER(destination, number)				\
        -: 2610:  do {									\
        -: 2611:    (destination)[0] = (number) & 0377;					\
        -: 2612:    (destination)[1] = (number) >> 8;					\
        -: 2613:  } while (0)
        -: 2614:
        -: 2615:/* Same as STORE_NUMBER, except increment DESTINATION to
        -: 2616:   the byte after where the number is stored.  Therefore, DESTINATION
        -: 2617:   must be an lvalue.  */
        -: 2618:
        -: 2619:#define STORE_NUMBER_AND_INCR(destination, number)			\
        -: 2620:  do {									\
        -: 2621:    STORE_NUMBER (destination, number);					\
        -: 2622:    (destination) += 2;							\
        -: 2623:  } while (0)
        -: 2624:
        -: 2625:/* Put into DESTINATION a number stored in two contiguous bytes starting
        -: 2626:   at SOURCE.  */
        -: 2627:
        -: 2628:#define EXTRACT_NUMBER(destination, source)				\
        -: 2629:  do {									\
        -: 2630:    (destination) = *(source) & 0377;					\
        -: 2631:    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << 8;		\
        -: 2632:  } while (0)
        -: 2633:
        -: 2634:#ifdef DEBUG
        -: 2635:static void
        -: 2636:extract_number (dest, source)
        -: 2637:    int *dest;
        -: 2638:    unsigned char *source;
        -: 2639:{
        -: 2640:  int temp = SIGN_EXTEND_CHAR (*(source + 1)); 
        -: 2641:  *dest = *source & 0377;
        -: 2642:  *dest += temp << 8;
        -: 2643:}
        -: 2644:
        -: 2645:#ifndef EXTRACT_MACROS /* To debug the macros.  */
        -: 2646:#undef EXTRACT_NUMBER
        -: 2647:#define EXTRACT_NUMBER(dest, src) extract_number (&dest, src)
        -: 2648:#endif /* not EXTRACT_MACROS */
        -: 2649:
        -: 2650:#endif /* DEBUG */
        -: 2651:
        -: 2652:/* Same as EXTRACT_NUMBER, except increment SOURCE to after the number.
        -: 2653:   SOURCE must be an lvalue.  */
        -: 2654:
        -: 2655:#define EXTRACT_NUMBER_AND_INCR(destination, source)			\
        -: 2656:  do {									\
        -: 2657:    EXTRACT_NUMBER (destination, source);				\
        -: 2658:    (source) += 2; 							\
        -: 2659:  } while (0)
        -: 2660:
        -: 2661:#ifdef DEBUG
        -: 2662:static void
        -: 2663:extract_number_and_incr (destination, source)
        -: 2664:    int *destination;
        -: 2665:    unsigned char **source;
        -: 2666:{ 
        -: 2667:  extract_number (destination, *source);
        -: 2668:  *source += 2;
        -: 2669:}
        -: 2670:
        -: 2671:#ifndef EXTRACT_MACROS
        -: 2672:#undef EXTRACT_NUMBER_AND_INCR
        -: 2673:#define EXTRACT_NUMBER_AND_INCR(dest, src) \
        -: 2674:  extract_number_and_incr (&dest, &src)
        -: 2675:#endif /* not EXTRACT_MACROS */
        -: 2676:
        -: 2677:#endif /* DEBUG */
        -: 2678:
        -: 2679:/* If DEBUG is defined, Regex prints many voluminous messages about what
        -: 2680:   it is doing (if the variable `debug' is nonzero).  If linked with the
        -: 2681:   main program in `iregex.c', you can enter patterns and strings
        -: 2682:   interactively.  And if linked with the main program in `main.c' and
        -: 2683:   the other test files, you can run the already-written tests.  */
        -: 2684:
        -: 2685:#ifdef DEBUG
        -: 2686:
        -: 2687:/* We use standard I/O for debugging.  */
        -: 2688:#include <stdio.h>
        -: 2689:
        -: 2690:/* It is useful to test things that ``must'' be true when debugging.  */
        -: 2691:#include <assert.h>
        -: 2692:
        -: 2693:static int debug = 0;
        -: 2694:
        -: 2695:#define DEBUG_STATEMENT(e) e
        -: 2696:#define DEBUG_PRINT1(x) if (debug) printf (x)
        -: 2697:#define DEBUG_PRINT2(x1, x2) if (debug) printf (x1, x2)
        -: 2698:#define DEBUG_PRINT3(x1, x2, x3) if (debug) printf (x1, x2, x3)
        -: 2699:#define DEBUG_PRINT4(x1, x2, x3, x4) if (debug) printf (x1, x2, x3, x4)
        -: 2700:#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e) 				\
        -: 2701:  if (debug) print_partial_compiled_pattern (s, e)
        -: 2702:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)			\
        -: 2703:  if (debug) print_double_string (w, s1, sz1, s2, sz2)
        -: 2704:
        -: 2705:
        -: 2706:extern void printchar ();
        -: 2707:
        -: 2708:/* Print the fastmap in human-readable form.  */
        -: 2709:
        -: 2710:void
        -: 2711:print_fastmap (fastmap)
        -: 2712:    char *fastmap;
        -: 2713:{
        -: 2714:  unsigned was_a_range = 0;
        -: 2715:  unsigned i = 0;  
        -: 2716:  
        -: 2717:  while (i < (1 << BYTEWIDTH))
        -: 2718:    {
        -: 2719:      if (fastmap[i++])
        -: 2720:	{
        -: 2721:	  was_a_range = 0;
        -: 2722:          printchar (i - 1);
        -: 2723:          while (i < (1 << BYTEWIDTH)  &&  fastmap[i])
        -: 2724:            {
        -: 2725:              was_a_range = 1;
        -: 2726:              i++;
        -: 2727:            }
        -: 2728:	  if (was_a_range)
        -: 2729:            {
        -: 2730:              printf ("-");
        -: 2731:              printchar (i - 1);
        -: 2732:            }
        -: 2733:        }
        -: 2734:    }
        -: 2735:  putchar ('\n'); 
        -: 2736:}
        -: 2737:
        -: 2738:
        -: 2739:/* Print a compiled pattern string in human-readable form, starting at
        -: 2740:   the START pointer into it and ending just before the pointer END.  */
        -: 2741:
        -: 2742:void
        -: 2743:print_partial_compiled_pattern (start, end)
        -: 2744:    unsigned char *start;
        -: 2745:    unsigned char *end;
        -: 2746:{
        -: 2747:  int mcnt, mcnt2;
        -: 2748:  unsigned char *p = start;
        -: 2749:  unsigned char *pend = end;
        -: 2750:
        -: 2751:  if (start == NULL)
        -: 2752:    {
        -: 2753:      printf ("(null)\n");
        -: 2754:      return;
        -: 2755:    }
        -: 2756:    
        -: 2757:  /* Loop over pattern commands.  */
        -: 2758:  while (p < pend)
        -: 2759:    {
        -: 2760:      switch ((re_opcode_t) *p++)
        -: 2761:	{
        -: 2762:        case no_op:
        -: 2763:          printf ("/no_op");
        -: 2764:          break;
        -: 2765:
        -: 2766:	case exactn:
        -: 2767:	  mcnt = *p++;
        -: 2768:          printf ("/exactn/%d", mcnt);
        -: 2769:          do
        -: 2770:	    {
        -: 2771:              putchar ('/');
        -: 2772:	      printchar (*p++);
        -: 2773:            }
        -: 2774:          while (--mcnt);
        -: 2775:          break;
        -: 2776:
        -: 2777:	case start_memory:
        -: 2778:          mcnt = *p++;
        -: 2779:          printf ("/start_memory/%d/%d", mcnt, *p++);
        -: 2780:          break;
        -: 2781:
        -: 2782:	case stop_memory:
        -: 2783:          mcnt = *p++;
        -: 2784:	  printf ("/stop_memory/%d/%d", mcnt, *p++);
        -: 2785:          break;
        -: 2786:
        -: 2787:	case duplicate:
        -: 2788:	  printf ("/duplicate/%d", *p++);
        -: 2789:	  break;
        -: 2790:
        -: 2791:	case anychar:
        -: 2792:	  printf ("/anychar");
        -: 2793:	  break;
        -: 2794:
        -: 2795:	case charset:
        -: 2796:        case charset_not:
        -: 2797:          {
        -: 2798:            register int c;
        -: 2799:
        -: 2800:            printf ("/charset%s",
        -: 2801:	            (re_opcode_t) *(p - 1) == charset_not ? "_not" : "");
        -: 2802:            
        -: 2803:            assert (p + *p < pend);
        -: 2804:
        -: 2805:            for (c = 0; c < *p; c++)
        -: 2806:              {
        -: 2807:                unsigned bit;
        -: 2808:                unsigned char map_byte = p[1 + c];
        -: 2809:                
        -: 2810:                putchar ('/');
        -: 2811:
        -: 2812:		for (bit = 0; bit < BYTEWIDTH; bit++)
        -: 2813:                  if (map_byte & (1 << bit))
        -: 2814:                    printchar (c * BYTEWIDTH + bit);
        -: 2815:              }
        -: 2816:	    p += 1 + *p;
        -: 2817:	    break;
        -: 2818:	  }
        -: 2819:
        -: 2820:	case begline:
        -: 2821:	  printf ("/begline");
        -: 2822:          break;
        -: 2823:
        -: 2824:	case endline:
        -: 2825:          printf ("/endline");
        -: 2826:          break;
        -: 2827:
        -: 2828:	case on_failure_jump:
        -: 2829:          extract_number_and_incr (&mcnt, &p);
        -: 2830:  	  printf ("/on_failure_jump/0/%d", mcnt);
        -: 2831:          break;
        -: 2832:
        -: 2833:	case on_failure_keep_string_jump:
        -: 2834:          extract_number_and_incr (&mcnt, &p);
        -: 2835:  	  printf ("/on_failure_keep_string_jump/0/%d", mcnt);
        -: 2836:          break;
        -: 2837:
        -: 2838:	case dummy_failure_jump:
        -: 2839:          extract_number_and_incr (&mcnt, &p);
        -: 2840:  	  printf ("/dummy_failure_jump/0/%d", mcnt);
        -: 2841:          break;
        -: 2842:
        -: 2843:	case push_dummy_failure:
        -: 2844:          printf ("/push_dummy_failure");
        -: 2845:          break;
        -: 2846:          
        -: 2847:        case maybe_pop_jump:
        -: 2848:          extract_number_and_incr (&mcnt, &p);
        -: 2849:  	  printf ("/maybe_pop_jump/0/%d", mcnt);
        -: 2850:	  break;
        -: 2851:
        -: 2852:        case pop_failure_jump:
        -: 2853:	  extract_number_and_incr (&mcnt, &p);
        -: 2854:  	  printf ("/pop_failure_jump/0/%d", mcnt);
        -: 2855:	  break;          
        -: 2856:          
        -: 2857:        case jump_past_alt:
        -: 2858:	  extract_number_and_incr (&mcnt, &p);
        -: 2859:  	  printf ("/jump_past_alt/0/%d", mcnt);
        -: 2860:	  break;          
        -: 2861:          
        -: 2862:        case jump:
        -: 2863:	  extract_number_and_incr (&mcnt, &p);
        -: 2864:  	  printf ("/jump/0/%d", mcnt);
        -: 2865:	  break;
        -: 2866:
        -: 2867:        case succeed_n: 
        -: 2868:          extract_number_and_incr (&mcnt, &p);
        -: 2869:          extract_number_and_incr (&mcnt2, &p);
        -: 2870: 	  printf ("/succeed_n/0/%d/0/%d", mcnt, mcnt2);
        -: 2871:          break;
        -: 2872:        
        -: 2873:        case jump_n: 
        -: 2874:          extract_number_and_incr (&mcnt, &p);
        -: 2875:          extract_number_and_incr (&mcnt2, &p);
        -: 2876: 	  printf ("/jump_n/0/%d/0/%d", mcnt, mcnt2);
        -: 2877:          break;
        -: 2878:        
        -: 2879:        case set_number_at: 
        -: 2880:          extract_number_and_incr (&mcnt, &p);
        -: 2881:          extract_number_and_incr (&mcnt2, &p);
        -: 2882: 	  printf ("/set_number_at/0/%d/0/%d", mcnt, mcnt2);
        -: 2883:          break;
        -: 2884:        
        -: 2885:        case wordbound:
        -: 2886:	  printf ("/wordbound");
        -: 2887:	  break;
        -: 2888:
        -: 2889:	case notwordbound:
        -: 2890:	  printf ("/notwordbound");
        -: 2891:          break;
        -: 2892:
        -: 2893:	case wordbeg:
        -: 2894:	  printf ("/wordbeg");
        -: 2895:	  break;
        -: 2896:          
        -: 2897:	case wordend:
        -: 2898:	  printf ("/wordend");
        -: 2899:          
        -: 2900:#ifdef emacs
        -: 2901:	case before_dot:
        -: 2902:	  printf ("/before_dot");
        -: 2903:          break;
        -: 2904:
        -: 2905:	case at_dot:
        -: 2906:	  printf ("/at_dot");
        -: 2907:          break;
        -: 2908:
        -: 2909:	case after_dot:
        -: 2910:	  printf ("/after_dot");
        -: 2911:          break;
        -: 2912:
        -: 2913:	case syntaxspec:
        -: 2914:          printf ("/syntaxspec");
        -: 2915:	  mcnt = *p++;
        -: 2916:	  printf ("/%d", mcnt);
        -: 2917:          break;
        -: 2918:	  
        -: 2919:	case notsyntaxspec:
        -: 2920:          printf ("/notsyntaxspec");
        -: 2921:	  mcnt = *p++;
        -: 2922:	  printf ("/%d", mcnt);
        -: 2923:	  break;
        -: 2924:#endif /* emacs */
        -: 2925:
        -: 2926:	case wordchar:
        -: 2927:	  printf ("/wordchar");
        -: 2928:          break;
        -: 2929:	  
        -: 2930:	case notwordchar:
        -: 2931:	  printf ("/notwordchar");
        -: 2932:          break;
        -: 2933:
        -: 2934:	case begbuf:
        -: 2935:	  printf ("/begbuf");
        -: 2936:          break;
        -: 2937:
        -: 2938:	case endbuf:
        -: 2939:	  printf ("/endbuf");
        -: 2940:          break;
        -: 2941:
        -: 2942:        default:
        -: 2943:          printf ("?%d", *(p-1));
        -: 2944:	}
        -: 2945:    }
        -: 2946:  printf ("/\n");
        -: 2947:}
        -: 2948:
        -: 2949:
        -: 2950:void
        -: 2951:print_compiled_pattern (bufp)
        -: 2952:    struct re_pattern_buffer *bufp;
        -: 2953:{
        -: 2954:  unsigned char *buffer = bufp->buffer;
        -: 2955:
        -: 2956:  print_partial_compiled_pattern (buffer, buffer + bufp->used);
        -: 2957:  printf ("%d bytes used/%d bytes allocated.\n", bufp->used, bufp->allocated);
        -: 2958:
        -: 2959:  if (bufp->fastmap_accurate && bufp->fastmap)
        -: 2960:    {
        -: 2961:      printf ("fastmap: ");
        -: 2962:      print_fastmap (bufp->fastmap);
        -: 2963:    }
        -: 2964:
        -: 2965:  printf ("re_nsub: %d\t", bufp->re_nsub);
        -: 2966:  printf ("regs_alloc: %d\t", bufp->regs_allocated);
        -: 2967:  printf ("can_be_null: %d\t", bufp->can_be_null);
        -: 2968:  printf ("newline_anchor: %d\n", bufp->newline_anchor);
        -: 2969:  printf ("no_sub: %d\t", bufp->no_sub);
        -: 2970:  printf ("not_bol: %d\t", bufp->not_bol);
        -: 2971:  printf ("not_eol: %d\t", bufp->not_eol);
        -: 2972:  printf ("syntax: %d\n", bufp->syntax);
        -: 2973:  /* Perhaps we should print the translate table?  */
        -: 2974:}
        -: 2975:
        -: 2976:
        -: 2977:void
        -: 2978:print_double_string (where, string1, size1, string2, size2)
        -: 2979:    const char *where;
        -: 2980:    const char *string1;
        -: 2981:    const char *string2;
        -: 2982:    int size1;
        -: 2983:    int size2;
        -: 2984:{
        -: 2985:  unsigned this_char;
        -: 2986:  
        -: 2987:  if (where == NULL)
        -: 2988:    printf ("(null)");
        -: 2989:  else
        -: 2990:    {
        -: 2991:      if (FIRST_STRING_P (where))
        -: 2992:        {
        -: 2993:          for (this_char = where - string1; this_char < size1; this_char++)
        -: 2994:            printchar (string1[this_char]);
        -: 2995:
        -: 2996:          where = string2;    
        -: 2997:        }
        -: 2998:
        -: 2999:      for (this_char = where - string2; this_char < size2; this_char++)
        -: 3000:        printchar (string2[this_char]);
        -: 3001:    }
        -: 3002:}
        -: 3003:
        -: 3004:#else /* not DEBUG */
        -: 3005:
        -: 3006:#undef assert
        -: 3007:#define assert(e)
        -: 3008:
        -: 3009:#define DEBUG_STATEMENT(e)
        -: 3010:#define DEBUG_PRINT1(x)
        -: 3011:#define DEBUG_PRINT2(x1, x2)
        -: 3012:#define DEBUG_PRINT3(x1, x2, x3)
        -: 3013:#define DEBUG_PRINT4(x1, x2, x3, x4)
        -: 3014:#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e)
        -: 3015:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)
        -: 3016:
        -: 3017:#endif /* not DEBUG */
        -: 3018:
        -: 3019:/* Set by `re_set_syntax' to the current regexp syntax to recognize.  Can
        -: 3020:   also be assigned to arbitrarily: each pattern buffer stores its own
        -: 3021:   syntax, so it can be changed between regex compilations.  */
        -: 3022:reg_syntax_t re_syntax_options = RE_SYNTAX_EMACS;
        -: 3023:
        -: 3024:
        -: 3025:/* Specify the precise syntax of regexps for compilation.  This provides
        -: 3026:   for compatibility for various utilities which historically have
        -: 3027:   different, incompatible syntaxes.
        -: 3028:
        -: 3029:   The argument SYNTAX is a bit mask comprised of the various bits
        -: 3030:   defined in regex.h.  We return the old syntax.  */
        -: 3031:
        -: 3032:reg_syntax_t
function re_set_syntax called 370 returned 100% blocks executed 100%
      370: 3033:re_set_syntax (syntax)
        -: 3034:    reg_syntax_t syntax;
        -: 3035:{
      370: 3036:  reg_syntax_t ret = re_syntax_options;
        -: 3037:  
      370: 3038:  re_syntax_options = syntax;
      370: 3039:  return ret;
        -: 3040:}
        -: 3041:
        -: 3042:/* This table gives an error message for each of the error codes listed
        -: 3043:   in regex.h.  Obviously the order here has to be same as there.  */
        -: 3044:
        -: 3045:static const char *re_error_msg[] =
        -: 3046:  { NULL,					/* REG_NOERROR */
        -: 3047:    "No match",					/* REG_NOMATCH */
        -: 3048:    "Invalid regular expression",		/* REG_BADPAT */
        -: 3049:    "Invalid collation character",		/* REG_ECOLLATE */
        -: 3050:    "Invalid character class name",		/* REG_ECTYPE */
        -: 3051:    "Trailing backslash",			/* REG_EESCAPE */
        -: 3052:    "Invalid back reference",			/* REG_ESUBREG */
        -: 3053:    "Unmatched [ or [^",			/* REG_EBRACK */
        -: 3054:    "Unmatched ( or \\(",			/* REG_EPAREN */
        -: 3055:    "Unmatched \\{",				/* REG_EBRACE */
        -: 3056:    "Invalid content of \\{\\}",		/* REG_BADBR */
        -: 3057:    "Invalid range end",			/* REG_ERANGE */
        -: 3058:    "Memory exhausted",				/* REG_ESPACE */
        -: 3059:    "Invalid preceding regular expression",	/* REG_BADRPT */
        -: 3060:    "Premature end of regular expression",	/* REG_EEND */
        -: 3061:    "Regular expression too big",		/* REG_ESIZE */
        -: 3062:    "Unmatched ) or \\)",			/* REG_ERPAREN */
        -: 3063:  };
        -: 3064:
        -: 3065:/* Subroutine declarations and macros for regex_compile.  */
        -: 3066:
        -: 3067:static void store_op1 (), store_op2 ();
        -: 3068:static void insert_op1 (), insert_op2 ();
        -: 3069:static boolean at_begline_loc_p (), at_endline_loc_p ();
        -: 3070:static boolean group_in_compile_stack ();
        -: 3071:static reg_errcode_t compile_range ();
        -: 3072:
        -: 3073:/* Fetch the next character in the uncompiled pattern---translating it 
        -: 3074:   if necessary.  Also cast from a signed character in the constant
        -: 3075:   string passed to us by the user to an unsigned char that we can use
        -: 3076:   as an array index (in, e.g., `translate').  */
        -: 3077:#define PATFETCH(c)							\
        -: 3078:  do {if (p == pend) return REG_EEND;					\
        -: 3079:    c = (unsigned char) *p++;						\
        -: 3080:    if (translate) c = translate[c]; 					\
        -: 3081:  } while (0)
        -: 3082:
        -: 3083:/* Fetch the next character in the uncompiled pattern, with no
        -: 3084:   translation.  */
        -: 3085:#define PATFETCH_RAW(c)							\
        -: 3086:  do {if (p == pend) return REG_EEND;					\
        -: 3087:    c = (unsigned char) *p++; 						\
        -: 3088:  } while (0)
        -: 3089:
        -: 3090:/* Go backwards one character in the pattern.  */
        -: 3091:#define PATUNFETCH p--
        -: 3092:
        -: 3093:
        -: 3094:/* If `translate' is non-null, return translate[D], else just D.  We
        -: 3095:   cast the subscript to translate because some data is declared as
        -: 3096:   `char *', to avoid warnings when a string constant is passed.  But
        -: 3097:   when we use a character as a subscript we must make it unsigned.  */
        -: 3098:#define TRANSLATE(d) (translate ? translate[(unsigned char) (d)] : (d))
        -: 3099:
        -: 3100:
        -: 3101:/* Macros for outputting the compiled pattern into `buffer'.  */
        -: 3102:
        -: 3103:/* If the buffer isn't allocated when it comes in, use this.  */
        -: 3104:#define INIT_BUF_SIZE  32
        -: 3105:
        -: 3106:/* Make sure we have at least N more bytes of space in buffer.  */
        -: 3107:#define GET_BUFFER_SPACE(n)						\
        -: 3108:    while (b - bufp->buffer + (n) > bufp->allocated)			\
        -: 3109:      EXTEND_BUFFER ()
        -: 3110:
        -: 3111:/* Make sure we have one more byte of buffer space and then add C to it.  */
        -: 3112:#define BUF_PUSH(c)							\
        -: 3113:  do {									\
        -: 3114:    GET_BUFFER_SPACE (1);						\
        -: 3115:    *b++ = (unsigned char) (c);						\
        -: 3116:  } while (0)
        -: 3117:
        -: 3118:
        -: 3119:/* Ensure we have two more bytes of buffer space and then append C1 and C2.  */
        -: 3120:#define BUF_PUSH_2(c1, c2)						\
        -: 3121:  do {									\
        -: 3122:    GET_BUFFER_SPACE (2);						\
        -: 3123:    *b++ = (unsigned char) (c1);					\
        -: 3124:    *b++ = (unsigned char) (c2);					\
        -: 3125:  } while (0)
        -: 3126:
        -: 3127:
        -: 3128:/* As with BUF_PUSH_2, except for three bytes.  */
        -: 3129:#define BUF_PUSH_3(c1, c2, c3)						\
        -: 3130:  do {									\
        -: 3131:    GET_BUFFER_SPACE (3);						\
        -: 3132:    *b++ = (unsigned char) (c1);					\
        -: 3133:    *b++ = (unsigned char) (c2);					\
        -: 3134:    *b++ = (unsigned char) (c3);					\
        -: 3135:  } while (0)
        -: 3136:
        -: 3137:
        -: 3138:/* Store a jump with opcode OP at LOC to location TO.  We store a
        -: 3139:   relative address offset by the three bytes the jump itself occupies.  */
        -: 3140:#define STORE_JUMP(op, loc, to) \
        -: 3141:  store_op1 (op, loc, (to) - (loc) - 3)
        -: 3142:
        -: 3143:/* Likewise, for a two-argument jump.  */
        -: 3144:#define STORE_JUMP2(op, loc, to, arg) \
        -: 3145:  store_op2 (op, loc, (to) - (loc) - 3, arg)
        -: 3146:
        -: 3147:/* Like `STORE_JUMP', but for inserting.  Assume `b' is the buffer end.  */
        -: 3148:#define INSERT_JUMP(op, loc, to) \
        -: 3149:  insert_op1 (op, loc, (to) - (loc) - 3, b)
        -: 3150:
        -: 3151:/* Like `STORE_JUMP2', but for inserting.  Assume `b' is the buffer end.  */
        -: 3152:#define INSERT_JUMP2(op, loc, to, arg) \
        -: 3153:  insert_op2 (op, loc, (to) - (loc) - 3, arg, b)
        -: 3154:
        -: 3155:
        -: 3156:/* This is not an arbitrary limit: the arguments which represent offsets
        -: 3157:   into the pattern are two bytes long.  So if 2^16 bytes turns out to
        -: 3158:   be too small, many things would have to change.  */
        -: 3159:#define MAX_BUF_SIZE (1L << 16)
        -: 3160:
        -: 3161:
        -: 3162:/* Extend the buffer by twice its current size via realloc and
        -: 3163:   reset the pointers that pointed into the old block to point to the
        -: 3164:   correct places in the new one.  If extending the buffer results in it
        -: 3165:   being larger than MAX_BUF_SIZE, then flag memory exhausted.  */
        -: 3166:#define EXTEND_BUFFER()							\
        -: 3167:  do { 									\
        -: 3168:    unsigned char *old_buffer = bufp->buffer;				\
        -: 3169:    if (bufp->allocated == MAX_BUF_SIZE) 				\
        -: 3170:      return REG_ESIZE;							\
        -: 3171:    bufp->allocated <<= 1;						\
        -: 3172:    if (bufp->allocated > MAX_BUF_SIZE)					\
        -: 3173:      bufp->allocated = MAX_BUF_SIZE; 					\
        -: 3174:    bufp->buffer = (unsigned char *) realloc (bufp->buffer, bufp->allocated);\
        -: 3175:    if (bufp->buffer == NULL)						\
        -: 3176:      return REG_ESPACE;						\
        -: 3177:    /* If the buffer moved, move all the pointers into it.  */		\
        -: 3178:    if (old_buffer != bufp->buffer)					\
        -: 3179:      {									\
        -: 3180:        b = (b - old_buffer) + bufp->buffer;				\
        -: 3181:        begalt = (begalt - old_buffer) + bufp->buffer;			\
        -: 3182:        if (fixup_alt_jump)						\
        -: 3183:          fixup_alt_jump = (fixup_alt_jump - old_buffer) + bufp->buffer;\
        -: 3184:        if (laststart)							\
        -: 3185:          laststart = (laststart - old_buffer) + bufp->buffer;		\
        -: 3186:        if (pending_exact)						\
        -: 3187:          pending_exact = (pending_exact - old_buffer) + bufp->buffer;	\
        -: 3188:      }									\
        -: 3189:  } while (0)
        -: 3190:
        -: 3191:
        -: 3192:/* Since we have one byte reserved for the register number argument to
        -: 3193:   {start,stop}_memory, the maximum number of groups we can report
        -: 3194:   things about is what fits in that byte.  */
        -: 3195:#define MAX_REGNUM 255
        -: 3196:
        -: 3197:/* But patterns can have more than `MAX_REGNUM' registers.  We just
        -: 3198:   ignore the excess.  */
        -: 3199:typedef unsigned regnum_t;
        -: 3200:
        -: 3201:
        -: 3202:/* Macros for the compile stack.  */
        -: 3203:
        -: 3204:/* Since offsets can go either forwards or backwards, this type needs to
        -: 3205:   be able to hold values from -(MAX_BUF_SIZE - 1) to MAX_BUF_SIZE - 1.  */
        -: 3206:typedef int pattern_offset_t;
        -: 3207:
        -: 3208:typedef struct
        -: 3209:{
        -: 3210:  pattern_offset_t begalt_offset;
        -: 3211:  pattern_offset_t fixup_alt_jump;
        -: 3212:  pattern_offset_t inner_group_offset;
        -: 3213:  pattern_offset_t laststart_offset;  
        -: 3214:  regnum_t regnum;
        -: 3215:} compile_stack_elt_t;
        -: 3216:
        -: 3217:
        -: 3218:typedef struct
        -: 3219:{
        -: 3220:  compile_stack_elt_t *stack;
        -: 3221:  unsigned size;
        -: 3222:  unsigned avail;			/* Offset of next open position.  */
        -: 3223:} compile_stack_type;
        -: 3224:
        -: 3225:
        -: 3226:#define INIT_COMPILE_STACK_SIZE 32
        -: 3227:
        -: 3228:#define COMPILE_STACK_EMPTY  (compile_stack.avail == 0)
        -: 3229:#define COMPILE_STACK_FULL  (compile_stack.avail == compile_stack.size)
        -: 3230:
        -: 3231:/* The next available element.  */
        -: 3232:#define COMPILE_STACK_TOP (compile_stack.stack[compile_stack.avail])
        -: 3233:
        -: 3234:
        -: 3235:/* Set the bit for character C in a list.  */
        -: 3236:#define SET_LIST_BIT(c)                               \
        -: 3237:  (b[((unsigned char) (c)) / BYTEWIDTH]               \
        -: 3238:   |= 1 << (((unsigned char) c) % BYTEWIDTH))
        -: 3239:
        -: 3240:
        -: 3241:/* Get the next unsigned number in the uncompiled pattern.  */
        -: 3242:#define GET_UNSIGNED_NUMBER(num) 					\
        -: 3243:  { if (p != pend)							\
        -: 3244:     {									\
        -: 3245:       PATFETCH (c); 							\
        -: 3246:       while (ISDIGIT (c)) 						\
        -: 3247:         { 								\
        -: 3248:           if (num < 0)							\
        -: 3249:              num = 0;							\
        -: 3250:           num = num * 10 + c - '0'; 					\
        -: 3251:           if (p == pend) 						\
        -: 3252:              break; 							\
        -: 3253:           PATFETCH (c);						\
        -: 3254:         } 								\
        -: 3255:       } 								\
        -: 3256:    }		
        -: 3257:
        -: 3258:#define CHAR_CLASS_MAX_LENGTH  6 /* Namely, `xdigit'.  */
        -: 3259:
        -: 3260:#define IS_CHAR_CLASS(string)						\
        -: 3261:   (STREQ (string, "alpha") || STREQ (string, "upper")			\
        -: 3262:    || STREQ (string, "lower") || STREQ (string, "digit")		\
        -: 3263:    || STREQ (string, "alnum") || STREQ (string, "xdigit")		\
        -: 3264:    || STREQ (string, "space") || STREQ (string, "print")		\
        -: 3265:    || STREQ (string, "punct") || STREQ (string, "graph")		\
        -: 3266:    || STREQ (string, "cntrl") || STREQ (string, "blank"))
        -: 3267:
        -: 3268:/* `regex_compile' compiles PATTERN (of length SIZE) according to SYNTAX.
        -: 3269:   Returns one of error codes defined in `regex.h', or zero for success.
        -: 3270:
        -: 3271:   Assumes the `allocated' (and perhaps `buffer') and `translate'
        -: 3272:   fields are set in BUFP on entry.
        -: 3273:
        -: 3274:   If it succeeds, results are put in BUFP (if it returns an error, the
        -: 3275:   contents of BUFP are undefined):
        -: 3276:     `buffer' is the compiled pattern;
        -: 3277:     `syntax' is set to SYNTAX;
        -: 3278:     `used' is set to the length of the compiled pattern;
        -: 3279:     `fastmap_accurate' is zero;
        -: 3280:     `re_nsub' is the number of subexpressions in PATTERN;
        -: 3281:     `not_bol' and `not_eol' are zero;
        -: 3282:   
        -: 3283:   The `fastmap' and `newline_anchor' fields are neither
        -: 3284:   examined nor set.  */
        -: 3285:
        -: 3286:static reg_errcode_t
function regex_compile called 603 returned 100% blocks executed 29%
      603: 3287:regex_compile (pattern, size, syntax, bufp)
        -: 3288:     const char *pattern;
        -: 3289:     int size;
        -: 3290:     reg_syntax_t syntax;
        -: 3291:     struct re_pattern_buffer *bufp;
        -: 3292:{
        -: 3293:  /* We fetch characters from PATTERN here.  Even though PATTERN is
        -: 3294:     `char *' (i.e., signed), we declare these variables as unsigned, so
        -: 3295:     they can be reliably used as array indices.  */
        -: 3296:  register unsigned char c, c1;
        -: 3297:  
        -: 3298:  /* A random tempory spot in PATTERN.  */
        -: 3299:  const char *p1;
        -: 3300:
        -: 3301:  /* Points to the end of the buffer, where we should append.  */
        -: 3302:  register unsigned char *b;
        -: 3303:  
        -: 3304:  /* Keeps track of unclosed groups.  */
        -: 3305:  compile_stack_type compile_stack;
        -: 3306:
        -: 3307:  /* Points to the current (ending) position in the pattern.  */
      603: 3308:  const char *p = pattern;
      603: 3309:  const char *pend = pattern + size;
        -: 3310:  
        -: 3311:  /* How to translate the characters in the pattern.  */
      603: 3312:  char *translate = bufp->translate;
        -: 3313:
        -: 3314:  /* Address of the count-byte of the most recently inserted `exactn'
        -: 3315:     command.  This makes it possible to tell if a new exact-match
        -: 3316:     character can be added to that command or if the character requires
        -: 3317:     a new `exactn' command.  */
      603: 3318:  unsigned char *pending_exact = 0;
        -: 3319:
        -: 3320:  /* Address of start of the most recently finished expression.
        -: 3321:     This tells, e.g., postfix * where to find the start of its
        -: 3322:     operand.  Reset at the beginning of groups and alternatives.  */
      603: 3323:  unsigned char *laststart = 0;
        -: 3324:
        -: 3325:  /* Address of beginning of regexp, or inside of last group.  */
        -: 3326:  unsigned char *begalt;
        -: 3327:
        -: 3328:  /* Place in the uncompiled pattern (i.e., the {) to
        -: 3329:     which to go back if the interval is invalid.  */
        -: 3330:  const char *beg_interval;
        -: 3331:                
        -: 3332:  /* Address of the place where a forward jump should go to the end of
        -: 3333:     the containing expression.  Each alternative of an `or' -- except the
        -: 3334:     last -- ends with a forward jump of this sort.  */
      603: 3335:  unsigned char *fixup_alt_jump = 0;
        -: 3336:
        -: 3337:  /* Counts open-groups as they are encountered.  Remembered for the
        -: 3338:     matching close-group on the compile stack, so the same register
        -: 3339:     number is put in the stop_memory as the start_memory.  */
      603: 3340:  regnum_t regnum = 0;
        -: 3341:
        -: 3342:#ifdef DEBUG
        -: 3343:  DEBUG_PRINT1 ("\nCompiling pattern: ");
        -: 3344:  if (debug)
        -: 3345:    {
        -: 3346:      unsigned debug_count;
        -: 3347:      
        -: 3348:      for (debug_count = 0; debug_count < size; debug_count++)
        -: 3349:        printchar (pattern[debug_count]);
        -: 3350:      putchar ('\n');
        -: 3351:    }
        -: 3352:#endif /* DEBUG */
        -: 3353:
        -: 3354:  /* Initialize the compile stack.  */
      603: 3355:  compile_stack.stack = TALLOC (INIT_COMPILE_STACK_SIZE, compile_stack_elt_t);
      603: 3356:  if (compile_stack.stack == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 603
    #####: 3357:    return REG_ESPACE;
        -: 3358:
      603: 3359:  compile_stack.size = INIT_COMPILE_STACK_SIZE;
      603: 3360:  compile_stack.avail = 0;
        -: 3361:
        -: 3362:  /* Initialize the pattern buffer.  */
      603: 3363:  bufp->syntax = syntax;
      603: 3364:  bufp->fastmap_accurate = 0;
      603: 3365:  bufp->not_bol = bufp->not_eol = 0;
        -: 3366:
        -: 3367:  /* Set `used' to zero, so that if we return an error, the pattern
        -: 3368:     printer (for debugging) will think there's no pattern.  We reset it
        -: 3369:     at the end.  */
      603: 3370:  bufp->used = 0;
        -: 3371:  
        -: 3372:  /* Always count groups, whether or not bufp->no_sub is set.  */
      603: 3373:  bufp->re_nsub = 0;				
        -: 3374:
        -: 3375:#if !defined (emacs) && !defined (SYNTAX_TABLE)
        -: 3376:  /* Initialize the syntax table.  */
      603: 3377:   init_syntax_once ();
call    0 returned 603
        -: 3378:#endif
        -: 3379:
      603: 3380:  if (bufp->allocated == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 603
        -: 3381:    {
    #####: 3382:      if (bufp->buffer)
branch  0 never executed
branch  1 never executed
        -: 3383:	{ /* If zero allocated, but buffer is non-null, try to realloc
        -: 3384:             enough space.  This loses if buffer's address is bogus, but
        -: 3385:             that is the user's responsibility.  */
    #####: 3386:          RETALLOC (bufp->buffer, INIT_BUF_SIZE, unsigned char);
        -: 3387:        }
        -: 3388:      else
        -: 3389:        { /* Caller did not allocate a buffer.  Do it for them.  */
    #####: 3390:          bufp->buffer = TALLOC (INIT_BUF_SIZE, unsigned char);
        -: 3391:        }
    #####: 3392:      if (!bufp->buffer) return REG_ESPACE;
branch  0 never executed
branch  1 never executed
        -: 3393:
    #####: 3394:      bufp->allocated = INIT_BUF_SIZE;
        -: 3395:    }
        -: 3396:
      603: 3397:  begalt = b = bufp->buffer;
        -: 3398:
        -: 3399:  /* Loop through the uncompiled pattern until we're at the end.  */
     3246: 3400:  while (p != pend)
branch  0 taken 2643
branch  1 taken 603 (fallthrough)
        -: 3401:    {
    2643*: 3402:      PATFETCH (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 2643
branch  2 taken 0 (fallthrough)
branch  3 taken 2643
        -: 3403:
     2643: 3404:      switch (c)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 137
branch  4 taken 121
branch  5 taken 5
branch  6 taken 0
branch  7 taken 0
branch  8 taken 12
branch  9 taken 0
branch 10 taken 0
branch 11 taken 591
branch 12 taken 1777
        -: 3405:        {
    #####: 3406:        case '^':
        -: 3407:          {
    #####: 3408:            if (   /* If at start of pattern, it's an operator.  */
    #####: 3409:                   p == pattern + 1
branch  0 never executed
branch  1 never executed
        -: 3410:                   /* If context independent, it's an operator.  */
    #####: 3411:                || syntax & RE_CONTEXT_INDEP_ANCHORS
branch  0 never executed
branch  1 never executed
        -: 3412:                   /* Otherwise, depends on what's come before.  */
    #####: 3413:                || at_begline_loc_p (pattern, p, syntax))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3414:              BUF_PUSH (begline);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -: 3415:            else
    #####: 3416:              goto normal_char;
        -: 3417:          }
    #####: 3418:          break;
        -: 3419:
        -: 3420:
    #####: 3421:        case '$':
        -: 3422:          {
    #####: 3423:            if (   /* If at end of pattern, it's an operator.  */
    #####: 3424:                   p == pend 
branch  0 never executed
branch  1 never executed
        -: 3425:                   /* If context independent, it's an operator.  */
    #####: 3426:                || syntax & RE_CONTEXT_INDEP_ANCHORS
branch  0 never executed
branch  1 never executed
        -: 3427:                   /* Otherwise, depends on what's next.  */
    #####: 3428:                || at_endline_loc_p (p, pend, syntax))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3429:               BUF_PUSH (endline);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -: 3430:             else
    #####: 3431:               goto normal_char;
        -: 3432:           }
    #####: 3433:           break;
        -: 3434:
        -: 3435:
    #####: 3436:	case '+':
        -: 3437:        case '?':
    #####: 3438:          if ((syntax & RE_BK_PLUS_QM)
branch  0 never executed
branch  1 never executed
    #####: 3439:              || (syntax & RE_LIMITED_OPS))
branch  0 never executed
branch  1 never executed
    #####: 3440:            goto normal_char;
    #####: 3441:        handle_plus:
      137: 3442:        case '*':
        -: 3443:          /* If there is no previous pattern... */
      137: 3444:          if (!laststart)
branch  0 taken 8 (fallthrough)
branch  1 taken 129
        -: 3445:            {
        8: 3446:              if (syntax & RE_CONTEXT_INVALID_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 3447:                return REG_BADRPT;
        8: 3448:              else if (!(syntax & RE_CONTEXT_INDEP_OPS))
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8: 3449:                goto normal_char;
        -: 3450:            }
        -: 3451:
        -: 3452:          {
        -: 3453:            /* Are we optimizing this jump?  */
      129: 3454:            boolean keep_string_p = false;
        -: 3455:            
        -: 3456:            /* 1 means zero (many) matches is allowed.  */
      129: 3457:            char zero_times_ok = 0, many_times_ok = 0;
        -: 3458:
        -: 3459:            /* If there is a sequence of repetition chars, collapse it
        -: 3460:               down to just one (the right one).  We can't combine
        -: 3461:               interval operators with these because of, e.g., `a{2}*',
        -: 3462:               which should only match an even number of `a's.  */
        -: 3463:
        -: 3464:            for (;;)
        -: 3465:              {
      129: 3466:                zero_times_ok |= c != '+';
      129: 3467:                many_times_ok |= c != '?';
        -: 3468:
      129: 3469:                if (p == pend)
branch  0 taken 73 (fallthrough)
branch  1 taken 56
       73: 3470:                  break;
        -: 3471:
      56*: 3472:                PATFETCH (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 56
branch  2 taken 0 (fallthrough)
branch  3 taken 56
        -: 3473:
       56: 3474:                if (c == '*'
branch  0 taken 56 (fallthrough)
branch  1 taken 0
      56*: 3475:                    || (!(syntax & RE_BK_PLUS_QM) && (c == '+' || c == '?')))
branch  0 taken 0 (fallthrough)
branch  1 taken 56
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 3476:                  ;
        -: 3477:
       56: 3478:                else if (syntax & RE_BK_PLUS_QM  &&  c == '\\')
branch  0 taken 56 (fallthrough)
branch  1 taken 0
branch  2 taken 13 (fallthrough)
branch  3 taken 43
        -: 3479:                  {
      13*: 3480:                    if (p == pend) return REG_EESCAPE;
branch  0 taken 0 (fallthrough)
branch  1 taken 13
        -: 3481:
      13*: 3482:                    PATFETCH (c1);
branch  0 taken 0 (fallthrough)
branch  1 taken 13
branch  2 taken 0 (fallthrough)
branch  3 taken 13
       13: 3483:                    if (!(c1 == '+' || c1 == '?'))
branch  0 taken 13 (fallthrough)
branch  1 taken 0
branch  2 taken 13 (fallthrough)
branch  3 taken 0
        -: 3484:                      {
       13: 3485:                        PATUNFETCH;
       13: 3486:                        PATUNFETCH;
       13: 3487:                        break;
        -: 3488:                      }
        -: 3489:
    #####: 3490:                    c = c1;
        -: 3491:                  }
        -: 3492:                else
        -: 3493:                  {
       43: 3494:                    PATUNFETCH;
       43: 3495:                    break;
        -: 3496:                  }
        -: 3497:
        -: 3498:                /* If we get here, we found another repeat character.  */
        -: 3499:               }
        -: 3500:
        -: 3501:            /* Star, etc. applied to an empty pattern is equivalent
        -: 3502:               to an empty pattern.  */
      129: 3503:            if (!laststart)  
branch  0 taken 0 (fallthrough)
branch  1 taken 129
    #####: 3504:              break;
        -: 3505:
        -: 3506:            /* Now we know whether or not zero matches is allowed
        -: 3507:               and also whether or not two or more matches is allowed.  */
      129: 3508:            if (many_times_ok)
branch  0 taken 129 (fallthrough)
branch  1 taken 0
        -: 3509:              { /* More than one repetition is allowed, so put in at the
        -: 3510:                   end a backward relative jump from `b' to before the next
        -: 3511:                   jump we're going to put in below (which jumps from
        -: 3512:                   laststart to after this jump).  
        -: 3513:
        -: 3514:                   But if we are at the `*' in the exact sequence `.*\n',
        -: 3515:                   insert an unconditional jump backwards to the .,
        -: 3516:                   instead of the beginning of the loop.  This way we only
        -: 3517:                   push a failure point once, instead of every time
        -: 3518:                   through the loop.  */
        -: 3519:                assert (p - 1 > pattern);
        -: 3520:
        -: 3521:                /* Allocate the space for the jump.  */
     131*: 3522:                GET_BUFFER_SPACE (3);
branch  0 taken 0 (fallthrough)
branch  1 taken 2
branch  2 taken 0 (fallthrough)
branch  3 taken 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0
branch  8 taken 0 (fallthrough)
branch  9 taken 2
branch 10 taken 2 (fallthrough)
branch 11 taken 0
branch 12 taken 0 (fallthrough)
branch 13 taken 2
branch 14 taken 2
branch 15 taken 129 (fallthrough)
        -: 3523:
        -: 3524:                /* We know we are not at the first character of the pattern,
        -: 3525:                   because laststart was nonzero.  And we've already
        -: 3526:                   incremented `p', by the way, to be the character after
        -: 3527:                   the `*'.  Do we have to do something analogous here
        -: 3528:                   for null bytes, because of RE_DOT_NOT_NULL?  */
     129*: 3529:                if (TRANSLATE (*(p - 2)) == TRANSLATE ('.')
branch  0 taken 0 (fallthrough)
branch  1 taken 129
branch  2 taken 0 (fallthrough)
branch  3 taken 129
branch  4 taken 121 (fallthrough)
branch  5 taken 8
      121: 3530:		    && zero_times_ok
branch  0 taken 121 (fallthrough)
branch  1 taken 0
     121*: 3531:                    && p < pend && TRANSLATE (*p) == TRANSLATE ('\n')
branch  0 taken 56 (fallthrough)
branch  1 taken 65
branch  2 taken 0 (fallthrough)
branch  3 taken 56
branch  4 taken 0 (fallthrough)
branch  5 taken 56
branch  6 taken 0 (fallthrough)
branch  7 taken 56
    #####: 3532:                    && !(syntax & RE_DOT_NEWLINE))
branch  0 never executed
branch  1 never executed
        -: 3533:                  { /* We have .*\n.  */
    #####: 3534:                    STORE_JUMP (jump, b, laststart);
call    0 never executed
    #####: 3535:                    keep_string_p = true;
        -: 3536:                  }
        -: 3537:                else
        -: 3538:                  /* Anything else.  */
      129: 3539:                  STORE_JUMP (maybe_pop_jump, b, laststart - 3);
call    0 returned 129
        -: 3540:
        -: 3541:                /* We've added more stuff to the buffer.  */
      129: 3542:                b += 3;
        -: 3543:              }
        -: 3544:
        -: 3545:            /* On failure, jump from laststart to b + 3, which will be the
        -: 3546:               end of the buffer after this jump is inserted.  */
     158*: 3547:            GET_BUFFER_SPACE (3);
branch  0 taken 0 (fallthrough)
branch  1 taken 29
branch  2 taken 0 (fallthrough)
branch  3 taken 29
branch  4 taken 0 (fallthrough)
branch  5 taken 29
branch  6 taken 29 (fallthrough)
branch  7 taken 0
branch  8 taken 0 (fallthrough)
branch  9 taken 29
branch 10 taken 29 (fallthrough)
branch 11 taken 0
branch 12 taken 29 (fallthrough)
branch 13 taken 0
branch 14 taken 29
branch 15 taken 129 (fallthrough)
     129*: 3548:            INSERT_JUMP (keep_string_p ? on_failure_keep_string_jump
branch  0 taken 0 (fallthrough)
branch  1 taken 129
call    2 returned 129
        -: 3549:                                       : on_failure_jump,
        -: 3550:                         laststart, b + 3);
      129: 3551:            pending_exact = 0;
      129: 3552:            b += 3;
        -: 3553:
      129: 3554:            if (!zero_times_ok)
branch  0 taken 0 (fallthrough)
branch  1 taken 129
        -: 3555:              {
        -: 3556:                /* At least one repetition is required, so insert a
        -: 3557:                   `dummy_failure_jump' before the initial
        -: 3558:                   `on_failure_jump' instruction of the loop. This
        -: 3559:                   effects a skip over that instruction the first time
        -: 3560:                   we hit that loop.  */
    #####: 3561:                GET_BUFFER_SPACE (3);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 3562:                INSERT_JUMP (dummy_failure_jump, laststart, laststart + 6);
call    0 never executed
    #####: 3563:                b += 3;
        -: 3564:              }
        -: 3565:            }
      129: 3566:	  break;
        -: 3567:
        -: 3568:
      121: 3569:	case '.':
      121: 3570:          laststart = b;
     121*: 3571:          BUF_PUSH (anychar);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 121 (fallthrough)
      121: 3572:          break;
        -: 3573:
        -: 3574:
        5: 3575:        case '[':
        -: 3576:          {
        5: 3577:            boolean had_char_class = false;
        -: 3578:
       5*: 3579:            if (p == pend) return REG_EBRACK;
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -: 3580:
        -: 3581:            /* Ensure that we have enough space to push a charset: the
        -: 3582:               opcode, the length count, and the bitset; 34 bytes in all.  */
      11*: 3583:	    GET_BUFFER_SPACE (34);
branch  0 taken 0 (fallthrough)
branch  1 taken 6
branch  2 taken 0 (fallthrough)
branch  3 taken 6
branch  4 taken 0 (fallthrough)
branch  5 taken 6
branch  6 taken 5 (fallthrough)
branch  7 taken 1
branch  8 taken 0 (fallthrough)
branch  9 taken 5
branch 10 taken 2 (fallthrough)
branch 11 taken 3
branch 12 taken 2 (fallthrough)
branch 13 taken 3
branch 14 taken 6
branch 15 taken 5 (fallthrough)
        -: 3584:
        5: 3585:            laststart = b;
        -: 3586:
        -: 3587:            /* We test `*p == '^' twice, instead of using an if
        -: 3588:               statement, so we only need one BUF_PUSH.  */
       5*: 3589:            BUF_PUSH (*p == '^' ? charset_not : charset); 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 5 (fallthrough)
branch 16 taken 1 (fallthrough)
branch 17 taken 4
        5: 3590:            if (*p == '^')
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1: 3591:              p++;
        -: 3592:
        -: 3593:            /* Remember the first position in the bracket expression.  */
        5: 3594:            p1 = p;
        -: 3595:
        -: 3596:            /* Push the number of bytes in the bitmap.  */
       5*: 3597:            BUF_PUSH ((1 << BYTEWIDTH) / BYTEWIDTH);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 5 (fallthrough)
        -: 3598:
        -: 3599:            /* Clear the whole map.  */
        5: 3600:            bzero (b, (1 << BYTEWIDTH) / BYTEWIDTH);
        -: 3601:
        -: 3602:            /* charset_not matches newline according to a syntax bit.  */
        5: 3603:            if ((re_opcode_t) b[-2] == charset_not
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1: 3604:                && (syntax & RE_HAT_LISTS_NOT_NEWLINE))
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3605:              SET_LIST_BIT ('\n');
        -: 3606:
        -: 3607:            /* Read in characters and ranges, setting map bits.  */
        -: 3608:            for (;;)
        -: 3609:              {
      36*: 3610:                if (p == pend) return REG_EBRACK;
branch  0 taken 0 (fallthrough)
branch  1 taken 36
        -: 3611:
      36*: 3612:                PATFETCH (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 36
branch  2 taken 0 (fallthrough)
branch  3 taken 36
        -: 3613:
        -: 3614:                /* \ might escape characters inside [...] and [^...].  */
      36*: 3615:                if ((syntax & RE_BACKSLASH_ESCAPE_IN_LISTS) && c == '\\')
branch  0 taken 0 (fallthrough)
branch  1 taken 36
branch  2 never executed
branch  3 never executed
        -: 3616:                  {
    #####: 3617:                    if (p == pend) return REG_EESCAPE;
branch  0 never executed
branch  1 never executed
        -: 3618:
    #####: 3619:                    PATFETCH (c1);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3620:                    SET_LIST_BIT (c1);
    #####: 3621:                    continue;
        -: 3622:                  }
        -: 3623:
        -: 3624:                /* Could be the end of the bracket expression.  If it's
        -: 3625:                   not (i.e., when the bracket expression is `[]' so
        -: 3626:                   far), the ']' character bit gets set way below.  */
       36: 3627:                if (c == ']' && p != p1 + 1)
branch  0 taken 5 (fallthrough)
branch  1 taken 31
branch  2 taken 5 (fallthrough)
branch  3 taken 0
        5: 3628:                  break;
        -: 3629:
        -: 3630:                /* Look ahead to see if it's a range when the last thing
        -: 3631:                   was a character class.  */
      31*: 3632:                if (had_char_class && c == '-' && *p != ']')
branch  0 taken 0 (fallthrough)
branch  1 taken 31
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3633:                  return REG_ERANGE;
        -: 3634:
        -: 3635:                /* Look ahead to see if it's a range when the last thing
        -: 3636:                   was a character: if this is a hyphen not at the
        -: 3637:                   beginning or the end of a list, then it's the range
        -: 3638:                   operator.  */
       31: 3639:                if (c == '-' 
branch  0 taken 0 (fallthrough)
branch  1 taken 31
    #####: 3640:                    && !(p - 2 >= pattern && p[-2] == '[') 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3641:                    && !(p - 3 >= pattern && p[-3] == '[' && p[-2] == '^')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3642:                    && *p != ']')
branch  0 never executed
branch  1 never executed
    #####: 3643:                  {
        -: 3644:                    reg_errcode_t ret
    #####: 3645:                      = compile_range (&p, pend, translate, syntax, b);
call    0 never executed
    #####: 3646:                    if (ret != REG_NOERROR) return ret;
branch  0 never executed
branch  1 never executed
        -: 3647:                  }
        -: 3648:
      31*: 3649:                else if (p[0] == '-' && p[1] != ']')
branch  0 taken 0 (fallthrough)
branch  1 taken 31
branch  2 never executed
branch  3 never executed
    #####: 3650:                  { /* This handles ranges made up of characters only.  */
        -: 3651:                    reg_errcode_t ret;
        -: 3652:
        -: 3653:		    /* Move past the `-'.  */
    #####: 3654:                    PATFETCH (c1);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3655:                    
    #####: 3656:                    ret = compile_range (&p, pend, translate, syntax, b);
call    0 never executed
    #####: 3657:                    if (ret != REG_NOERROR) return ret;
branch  0 never executed
branch  1 never executed
        -: 3658:                  }
        -: 3659:
        -: 3660:                /* See if we're at the beginning of a possible character
        -: 3661:                   class.  */
        -: 3662:
      31*: 3663:                else if (syntax & RE_CHAR_CLASSES && c == '[' && *p == ':')
branch  0 taken 31 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 31
branch  4 never executed
branch  5 never executed
    #####: 3664:                  { /* Leave room for the null.  */
        -: 3665:                    char str[CHAR_CLASS_MAX_LENGTH + 1];
        -: 3666:
    #####: 3667:                    PATFETCH (c);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3668:                    c1 = 0;
        -: 3669:
        -: 3670:                    /* If pattern is `[[:'.  */
    #####: 3671:                    if (p == pend) return REG_EBRACK;
branch  0 never executed
branch  1 never executed
        -: 3672:
        -: 3673:                    for (;;)
        -: 3674:                      {
    #####: 3675:                        PATFETCH (c);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3676:                        if (c == ':' || c == ']' || p == pend
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3677:                            || c1 == CHAR_CLASS_MAX_LENGTH)
branch  0 never executed
branch  1 never executed
        -: 3678:                          break;
    #####: 3679:                        str[c1++] = c;
        -: 3680:                      }
    #####: 3681:                    str[c1] = '\0';
        -: 3682:
        -: 3683:                    /* If isn't a word bracketed by `[:' and:`]':
        -: 3684:                       undo the ending character, the letters, and leave 
        -: 3685:                       the leading `:' and `[' (but set bits for them).  */
    #####: 3686:                    if (c == ':' && *p == ']')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3687:                      {
        -: 3688:                        int ch;
    #####: 3689:                        boolean is_alnum = STREQ (str, "alnum");
    #####: 3690:                        boolean is_alpha = STREQ (str, "alpha");
    #####: 3691:                        boolean is_blank = STREQ (str, "blank");
    #####: 3692:                        boolean is_cntrl = STREQ (str, "cntrl");
    #####: 3693:                        boolean is_digit = STREQ (str, "digit");
    #####: 3694:                        boolean is_graph = STREQ (str, "graph");
    #####: 3695:                        boolean is_lower = STREQ (str, "lower");
    #####: 3696:                        boolean is_print = STREQ (str, "print");
    #####: 3697:                        boolean is_punct = STREQ (str, "punct");
    #####: 3698:                        boolean is_space = STREQ (str, "space");
    #####: 3699:                        boolean is_upper = STREQ (str, "upper");
    #####: 3700:                        boolean is_xdigit = STREQ (str, "xdigit");
        -: 3701:                        
    #####: 3702:                        if (!IS_CHAR_CLASS (str)) return REG_ECTYPE;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
        -: 3703:
        -: 3704:                        /* Throw away the ] at the end of the character
        -: 3705:                           class.  */
    #####: 3706:                        PATFETCH (c);					
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3707:
    #####: 3708:                        if (p == pend) return REG_EBRACK;
branch  0 never executed
branch  1 never executed
        -: 3709:
    #####: 3710:                        for (ch = 0; ch < 1 << BYTEWIDTH; ch++)
branch  0 never executed
branch  1 never executed
        -: 3711:                          {
    #####: 3712:                            if (   (is_alnum  && ISALNUM (ch))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3713:                                || (is_alpha  && ISALPHA (ch))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3714:                                || (is_blank  && ISBLANK (ch))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3715:                                || (is_cntrl  && ISCNTRL (ch))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3716:                                || (is_digit  && ISDIGIT (ch))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3717:                                || (is_graph  && ISGRAPH (ch))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3718:                                || (is_lower  && ISLOWER (ch))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3719:                                || (is_print  && ISPRINT (ch))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3720:                                || (is_punct  && ISPUNCT (ch))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3721:                                || (is_space  && ISSPACE (ch))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3722:                                || (is_upper  && ISUPPER (ch))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3723:                                || (is_xdigit && ISXDIGIT (ch)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3724:                            SET_LIST_BIT (ch);
        -: 3725:                          }
    #####: 3726:                        had_char_class = true;
        -: 3727:                      }
        -: 3728:                    else
        -: 3729:                      {
    #####: 3730:                        c1++;
    #####: 3731:                        while (c1--)    
branch  0 never executed
branch  1 never executed
    #####: 3732:                          PATUNFETCH;
    #####: 3733:                        SET_LIST_BIT ('[');
    #####: 3734:                        SET_LIST_BIT (':');
    #####: 3735:                        had_char_class = false;
        -: 3736:                      }
        -: 3737:                  }
        -: 3738:                else
        -: 3739:                  {
       31: 3740:                    had_char_class = false;
       31: 3741:                    SET_LIST_BIT (c);
        -: 3742:                  }
        -: 3743:              }
        -: 3744:
        -: 3745:            /* Discard any (non)matching list bytes that are all 0 at the
        -: 3746:               end of the map.  Decrease the map-length byte too.  */
       89: 3747:            while ((int) b[-1] > 0 && b[b[-1] - 1] == 0) 
branch  0 taken 89 (fallthrough)
branch  1 taken 0
branch  2 taken 84
branch  3 taken 5 (fallthrough)
       84: 3748:              b[-1]--; 
        5: 3749:            b += b[-1];
        -: 3750:          }
        5: 3751:          break;
        -: 3752:
        -: 3753:
    #####: 3754:	case '(':
    #####: 3755:          if (syntax & RE_NO_BK_PARENS)
branch  0 never executed
branch  1 never executed
    #####: 3756:            goto handle_open;
        -: 3757:          else
    #####: 3758:            goto normal_char;
        -: 3759:
        -: 3760:
    #####: 3761:        case ')':
    #####: 3762:          if (syntax & RE_NO_BK_PARENS)
branch  0 never executed
branch  1 never executed
    #####: 3763:            goto handle_close;
        -: 3764:          else
    #####: 3765:            goto normal_char;
        -: 3766:
        -: 3767:
       12: 3768:        case '\n':
       12: 3769:          if (syntax & RE_NEWLINE_ALT)
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####: 3770:            goto handle_alt;
        -: 3771:          else
       12: 3772:            goto normal_char;
        -: 3773:
        -: 3774:
    #####: 3775:	case '|':
    #####: 3776:          if (syntax & RE_NO_BK_VBAR)
branch  0 never executed
branch  1 never executed
    #####: 3777:            goto handle_alt;
        -: 3778:          else
    #####: 3779:            goto normal_char;
        -: 3780:
        -: 3781:
    #####: 3782:        case '{':
    #####: 3783:           if (syntax & RE_INTERVALS && syntax & RE_NO_BK_BRACES)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3784:             goto handle_interval;
        -: 3785:           else
    #####: 3786:             goto normal_char;
        -: 3787:
        -: 3788:
      591: 3789:        case '\\':
     591*: 3790:          if (p == pend) return REG_EESCAPE;
branch  0 taken 0 (fallthrough)
branch  1 taken 591
        -: 3791:
        -: 3792:          /* Do not translate the character after the \, so that we can
        -: 3793:             distinguish, e.g., \B from \b, even if we normally would
        -: 3794:             translate, e.g., B to b.  */
     591*: 3795:          PATFETCH_RAW (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 591
        -: 3796:
      591: 3797:          switch (c)
branch  0 taken 12
branch  1 taken 12
branch  2 taken 0
branch  3 taken 1
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 152
branch 11 taken 102
branch 12 taken 0
branch 13 taken 0
branch 14 taken 312
        -: 3798:            {
       12: 3799:            case '(':
       12: 3800:              if (syntax & RE_NO_BK_PARENS)
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####: 3801:                goto normal_backslash;
        -: 3802:
       12: 3803:            handle_open:
       12: 3804:              bufp->re_nsub++;
       12: 3805:              regnum++;
        -: 3806:
       12: 3807:              if (COMPILE_STACK_FULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -: 3808:                { 
    #####: 3809:                  RETALLOC (compile_stack.stack, compile_stack.size << 1,
        -: 3810:                            compile_stack_elt_t);
    #####: 3811:                  if (compile_stack.stack == NULL) return REG_ESPACE;
branch  0 never executed
branch  1 never executed
        -: 3812:
    #####: 3813:                  compile_stack.size <<= 1;
        -: 3814:                }
        -: 3815:
        -: 3816:              /* These are the values to restore when we hit end of this
        -: 3817:                 group.  They are all relative offsets, so that if the
        -: 3818:                 whole pattern moves because of realloc, they will still
        -: 3819:                 be valid.  */
       12: 3820:              COMPILE_STACK_TOP.begalt_offset = begalt - bufp->buffer;
       12: 3821:              COMPILE_STACK_TOP.fixup_alt_jump 
      12*: 3822:                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + 1 : 0;
branch  0 taken 0 (fallthrough)
branch  1 taken 12
       12: 3823:              COMPILE_STACK_TOP.laststart_offset = b - bufp->buffer;
       12: 3824:              COMPILE_STACK_TOP.regnum = regnum;
        -: 3825:
        -: 3826:              /* We will eventually replace the 0 with the number of
        -: 3827:                 groups inner to this one.  But do not push a
        -: 3828:                 start_memory for groups beyond the last one we can
        -: 3829:                 represent in the compiled pattern.  */
       12: 3830:              if (regnum <= MAX_REGNUM)
branch  0 taken 12 (fallthrough)
branch  1 taken 0
        -: 3831:                {
       12: 3832:                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + 2;
      12*: 3833:                  BUF_PUSH_3 (start_memory, regnum, 0);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 12 (fallthrough)
        -: 3834:                }
        -: 3835:                
       12: 3836:              compile_stack.avail++;
        -: 3837:
       12: 3838:              fixup_alt_jump = 0;
       12: 3839:              laststart = 0;
       12: 3840:              begalt = b;
        -: 3841:	      /* If we've reached MAX_REGNUM groups, then this open
        -: 3842:		 won't actually generate any code, so we'll have to
        -: 3843:		 clear pending_exact explicitly.  */
       12: 3844:	      pending_exact = 0;
       12: 3845:              break;
        -: 3846:
        -: 3847:
       12: 3848:            case ')':
      12*: 3849:              if (syntax & RE_NO_BK_PARENS) goto normal_backslash;
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -: 3850:
       12: 3851:              if (COMPILE_STACK_EMPTY)
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####: 3852:                if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
branch  0 never executed
branch  1 never executed
    #####: 3853:                  goto normal_backslash;
        -: 3854:                else
    #####: 3855:                  return REG_ERPAREN;
        -: 3856:
       12: 3857:            handle_close:
       12: 3858:              if (fixup_alt_jump)
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -: 3859:                { /* Push a dummy failure point at the end of the
        -: 3860:                     alternative for a possible future
        -: 3861:                     `pop_failure_jump' to pop.  See comments at
        -: 3862:                     `push_dummy_failure' in `re_match_2'.  */
    #####: 3863:                  BUF_PUSH (push_dummy_failure);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -: 3864:                  
        -: 3865:                  /* We allocated space for this jump when we assigned
        -: 3866:                     to `fixup_alt_jump', in the `handle_alt' case below.  */
    #####: 3867:                  STORE_JUMP (jump_past_alt, fixup_alt_jump, b - 1);
call    0 never executed
        -: 3868:                }
        -: 3869:
        -: 3870:              /* See similar code for backslashed left paren above.  */
       12: 3871:              if (COMPILE_STACK_EMPTY)
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####: 3872:                if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
branch  0 never executed
branch  1 never executed
    #####: 3873:                  goto normal_char;
        -: 3874:                else
    #####: 3875:                  return REG_ERPAREN;
        -: 3876:
        -: 3877:              /* Since we just checked for an empty stack above, this
        -: 3878:                 ``can't happen''.  */
        -: 3879:              assert (compile_stack.avail != 0);
        -: 3880:              {
        -: 3881:                /* We don't just want to restore into `regnum', because
        -: 3882:                   later groups should continue to be numbered higher,
        -: 3883:                   as in `(ab)c(de)' -- the second group is #2.  */
        -: 3884:                regnum_t this_group_regnum;
        -: 3885:
       12: 3886:                compile_stack.avail--;		
       12: 3887:                begalt = bufp->buffer + COMPILE_STACK_TOP.begalt_offset;
        -: 3888:                fixup_alt_jump
       24: 3889:                  = COMPILE_STACK_TOP.fixup_alt_jump
    #####: 3890:                    ? bufp->buffer + COMPILE_STACK_TOP.fixup_alt_jump - 1 
      12*: 3891:                    : 0;
branch  0 taken 0 (fallthrough)
branch  1 taken 12
       12: 3892:                laststart = bufp->buffer + COMPILE_STACK_TOP.laststart_offset;
       12: 3893:                this_group_regnum = COMPILE_STACK_TOP.regnum;
        -: 3894:		/* If we've reached MAX_REGNUM groups, then this open
        -: 3895:		   won't actually generate any code, so we'll have to
        -: 3896:		   clear pending_exact explicitly.  */
       12: 3897:		pending_exact = 0;
        -: 3898:
        -: 3899:                /* We're at the end of the group, so now we know how many
        -: 3900:                   groups were inside this one.  */
       12: 3901:                if (this_group_regnum <= MAX_REGNUM)
branch  0 taken 12 (fallthrough)
branch  1 taken 0
        -: 3902:                  {
       12: 3903:                    unsigned char *inner_group_loc
       12: 3904:                      = bufp->buffer + COMPILE_STACK_TOP.inner_group_offset;
        -: 3905:                    
       12: 3906:                    *inner_group_loc = regnum - this_group_regnum;
      12*: 3907:                    BUF_PUSH_3 (stop_memory, this_group_regnum,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 12 (fallthrough)
        -: 3908:                                regnum - this_group_regnum);
        -: 3909:                  }
        -: 3910:              }
       12: 3911:              break;
        -: 3912:
        -: 3913:
    #####: 3914:            case '|':					/* `\|'.  */
    #####: 3915:              if (syntax & RE_LIMITED_OPS || syntax & RE_NO_BK_VBAR)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3916:                goto normal_backslash;
    #####: 3917:            handle_alt:
    #####: 3918:              if (syntax & RE_LIMITED_OPS)
branch  0 never executed
branch  1 never executed
    #####: 3919:                goto normal_char;
        -: 3920:
        -: 3921:              /* Insert before the previous alternative a jump which
        -: 3922:                 jumps to this alternative if the former fails.  */
    #####: 3923:              GET_BUFFER_SPACE (3);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 3924:              INSERT_JUMP (on_failure_jump, begalt, b + 6);
call    0 never executed
    #####: 3925:              pending_exact = 0;
    #####: 3926:              b += 3;
        -: 3927:
        -: 3928:              /* The alternative before this one has a jump after it
        -: 3929:                 which gets executed if it gets matched.  Adjust that
        -: 3930:                 jump so it will jump to this alternative's analogous
        -: 3931:                 jump (put in below, which in turn will jump to the next
        -: 3932:                 (if any) alternative's such jump, etc.).  The last such
        -: 3933:                 jump jumps to the correct final destination.  A picture:
        -: 3934:                          _____ _____ 
        -: 3935:                          |   | |   |   
        -: 3936:                          |   v |   v 
        -: 3937:                         a | b   | c   
        -: 3938:
        -: 3939:                 If we are at `b', then fixup_alt_jump right now points to a
        -: 3940:                 three-byte space after `a'.  We'll put in the jump, set
        -: 3941:                 fixup_alt_jump to right after `b', and leave behind three
        -: 3942:                 bytes which we'll fill in when we get to after `c'.  */
        -: 3943:
    #####: 3944:              if (fixup_alt_jump)
branch  0 never executed
branch  1 never executed
    #####: 3945:                STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
call    0 never executed
        -: 3946:
        -: 3947:              /* Mark and leave space for a jump after this alternative,
        -: 3948:                 to be filled in later either by next alternative or
        -: 3949:                 when know we're at the end of a series of alternatives.  */
    #####: 3950:              fixup_alt_jump = b;
    #####: 3951:              GET_BUFFER_SPACE (3);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 3952:              b += 3;
        -: 3953:
    #####: 3954:              laststart = 0;
    #####: 3955:              begalt = b;
    #####: 3956:              break;
        -: 3957:
        -: 3958:
        1: 3959:            case '{': 
        -: 3960:              /* If \{ is a literal.  */
        1: 3961:              if (!(syntax & RE_INTERVALS)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 3962:                     /* If we're at `\{' and it's not the open-interval 
        -: 3963:                        operator.  */
        1: 3964:                  || ((syntax & RE_INTERVALS) && (syntax & RE_NO_BK_BRACES))
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
       1*: 3965:                  || (p - 2 == pattern  &&  p == pend))
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
    #####: 3966:                goto normal_backslash;
        -: 3967:
       1*: 3968:            handle_interval:
        -: 3969:              {
        -: 3970:                /* If got here, then the syntax allows intervals.  */
        -: 3971:
        -: 3972:                /* At least (most) this many matches must be made.  */
        1: 3973:                int lower_bound = -1, upper_bound = -1;
        -: 3974:
        1: 3975:                beg_interval = p - 1;
        -: 3976:
        1: 3977:                if (p == pend)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 3978:                  {
    #####: 3979:                    if (syntax & RE_NO_BK_BRACES)
branch  0 never executed
branch  1 never executed
    #####: 3980:                      goto unfetch_interval;
        -: 3981:                    else
    #####: 3982:                      return REG_EBRACE;
        -: 3983:                  }
        -: 3984:
       2*: 3985:                GET_UNSIGNED_NUMBER (lower_bound);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0
branch  8 taken 0 (fallthrough)
branch  9 taken 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1
branch 12 taken 0 (fallthrough)
branch 13 taken 1
branch 14 taken 2 (fallthrough)
branch 15 taken 0
branch 16 taken 1
branch 17 taken 1 (fallthrough)
        -: 3986:
        1: 3987:                if (c == ',')
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 3988:                  {
       2*: 3989:                    GET_UNSIGNED_NUMBER (upper_bound);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0
branch  8 taken 0 (fallthrough)
branch  9 taken 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1
branch 12 taken 0 (fallthrough)
branch 13 taken 1
branch 14 taken 2 (fallthrough)
branch 15 taken 0
branch 16 taken 1
branch 17 taken 1 (fallthrough)
       1*: 3990:                    if (upper_bound < 0) upper_bound = RE_DUP_MAX;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 3991:                  }
        -: 3992:                else
        -: 3993:                  /* Interval such as `{1}' => match exactly once. */
    #####: 3994:                  upper_bound = lower_bound;
        -: 3995:
        1: 3996:                if (lower_bound < 0 || upper_bound > RE_DUP_MAX
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 3997:                    || lower_bound > upper_bound)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 3998:                  {
    #####: 3999:                    if (syntax & RE_NO_BK_BRACES)
branch  0 never executed
branch  1 never executed
    #####: 4000:                      goto unfetch_interval;
        -: 4001:                    else 
    #####: 4002:                      return REG_BADBR;
        -: 4003:                  }
        -: 4004:
        1: 4005:                if (!(syntax & RE_NO_BK_BRACES)) 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 4006:                  {
       1*: 4007:                    if (c != '\\') return REG_EBRACE;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 4008:
       1*: 4009:                    PATFETCH (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -: 4010:                  }
        -: 4011:
        1: 4012:                if (c != '}')
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 4013:                  {
    #####: 4014:                    if (syntax & RE_NO_BK_BRACES)
branch  0 never executed
branch  1 never executed
    #####: 4015:                      goto unfetch_interval;
        -: 4016:                    else 
    #####: 4017:                      return REG_BADBR;
        -: 4018:                  }
        -: 4019:
        -: 4020:                /* We just parsed a valid interval.  */
        -: 4021:
        -: 4022:                /* If it's invalid to have no preceding re.  */
        1: 4023:                if (!laststart)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 4024:                  {
    #####: 4025:                    if (syntax & RE_CONTEXT_INVALID_OPS)
branch  0 never executed
branch  1 never executed
    #####: 4026:                      return REG_BADRPT;
    #####: 4027:                    else if (syntax & RE_CONTEXT_INDEP_OPS)
branch  0 never executed
branch  1 never executed
    #####: 4028:                      laststart = b;
        -: 4029:                    else
    #####: 4030:                      goto unfetch_interval;
        -: 4031:                  }
        -: 4032:
        -: 4033:                /* If the upper bound is zero, don't want to succeed at
        -: 4034:                   all; jump from `laststart' to `b + 3', which will be
        -: 4035:                   the end of the buffer after we insert the jump.  */
        1: 4036:                 if (upper_bound == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 4037:                   {
    #####: 4038:                     GET_BUFFER_SPACE (3);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 4039:                     INSERT_JUMP (jump, laststart, b + 3);
call    0 never executed
    #####: 4040:                     b += 3;
        -: 4041:                   }
        -: 4042:
        -: 4043:                 /* Otherwise, we have a nontrivial interval.  When
        -: 4044:                    we're all done, the pattern will look like:
        -: 4045:                      set_number_at <jump count> <upper bound>
        -: 4046:                      set_number_at <succeed_n count> <lower bound>
        -: 4047:                      succeed_n <after jump addr> <succed_n count>
        -: 4048:                      <body of loop>
        -: 4049:                      jump_n <succeed_n addr> <jump count>
        -: 4050:                    (The upper bound and `jump_n' are omitted if
        -: 4051:                    `upper_bound' is 1, though.)  */
        -: 4052:                 else 
        -: 4053:                   { /* If the upper bound is > 1, we need to insert
        -: 4054:                        more at the end of the loop.  */
       1*: 4055:                     unsigned nbytes = 10 + (upper_bound > 1) * 10;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 4056:
       2*: 4057:                     GET_BUFFER_SPACE (nbytes);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0
branch  8 taken 0 (fallthrough)
branch  9 taken 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0
branch 12 taken 1 (fallthrough)
branch 13 taken 0
branch 14 taken 1
branch 15 taken 1 (fallthrough)
        -: 4058:
        -: 4059:                     /* Initialize lower bound of the `succeed_n', even
        -: 4060:                        though it will be set during matching by its
        -: 4061:                        attendant `set_number_at' (inserted next),
        -: 4062:                        because `re_compile_fastmap' needs to know.
        -: 4063:                        Jump to the `jump_n' we might insert below.  */
       1*: 4064:                     INSERT_JUMP2 (succeed_n, laststart,
branch  0 taken 1 (fallthrough)
branch  1 taken 0
call    2 returned 1
        -: 4065:                                   b + 5 + (upper_bound > 1) * 5,
        -: 4066:                                   lower_bound);
        1: 4067:                     b += 5;
        -: 4068:
        -: 4069:                     /* Code to initialize the lower bound.  Insert 
        -: 4070:                        before the `succeed_n'.  The `5' is the last two
        -: 4071:                        bytes of this `set_number_at', plus 3 bytes of
        -: 4072:                        the following `succeed_n'.  */
        1: 4073:                     insert_op2 (set_number_at, laststart, 5, lower_bound, b);
call    0 returned 1
        1: 4074:                     b += 5;
        -: 4075:
        1: 4076:                     if (upper_bound > 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 4077:                       { /* More than one repetition is allowed, so
        -: 4078:                            append a backward jump to the `succeed_n'
        -: 4079:                            that starts this interval.
        -: 4080:                            
        -: 4081:                            When we've reached this during matching,
        -: 4082:                            we'll have matched the interval once, so
        -: 4083:                            jump back only `upper_bound - 1' times.  */
        1: 4084:                         STORE_JUMP2 (jump_n, b, laststart + 5,
call    0 returned 1
        -: 4085:                                      upper_bound - 1);
        1: 4086:                         b += 5;
        -: 4087:
        -: 4088:                         /* The location we want to set is the second
        -: 4089:                            parameter of the `jump_n'; that is `b-2' as
        -: 4090:                            an absolute address.  `laststart' will be
        -: 4091:                            the `set_number_at' we're about to insert;
        -: 4092:                            `laststart+3' the number to set, the source
        -: 4093:                            for the relative address.  But we are
        -: 4094:                            inserting into the middle of the pattern --
        -: 4095:                            so everything is getting moved up by 5.
        -: 4096:                            Conclusion: (b - 2) - (laststart + 3) + 5,
        -: 4097:                            i.e., b - laststart.
        -: 4098:                            
        -: 4099:                            We insert this at the beginning of the loop
        -: 4100:                            so that if we fail during matching, we'll
        -: 4101:                            reinitialize the bounds.  */
        1: 4102:                         insert_op2 (set_number_at, laststart, b - laststart,
call    0 returned 1
        -: 4103:                                     upper_bound - 1, b);
        1: 4104:                         b += 5;
        -: 4105:                       }
        -: 4106:                   }
        1: 4107:                pending_exact = 0;
        1: 4108:                beg_interval = NULL;
        -: 4109:              }
        1: 4110:              break;
        -: 4111:
    #####: 4112:            unfetch_interval:
        -: 4113:              /* If an invalid interval, match the characters as literals.  */
        -: 4114:               assert (beg_interval);
    #####: 4115:               p = beg_interval;
    #####: 4116:               beg_interval = NULL;
        -: 4117:
        -: 4118:               /* normal_char and normal_backslash need `c'.  */
    #####: 4119:               PATFETCH (c);	
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 4120:
    #####: 4121:               if (!(syntax & RE_NO_BK_BRACES))
branch  0 never executed
branch  1 never executed
        -: 4122:                 {
    #####: 4123:                   if (p > pattern  &&  p[-1] == '\\')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4124:                     goto normal_backslash;
        -: 4125:                 }
    #####: 4126:               goto normal_char;
        -: 4127:
        -: 4128:#ifdef emacs
        -: 4129:            /* There is no way to specify the before_dot and after_dot
        -: 4130:               operators.  rms says this is ok.  --karl  */
        -: 4131:            case '=':
        -: 4132:              BUF_PUSH (at_dot);
        -: 4133:              break;
        -: 4134:
        -: 4135:            case 's':	
        -: 4136:              laststart = b;
        -: 4137:              PATFETCH (c);
        -: 4138:              BUF_PUSH_2 (syntaxspec, syntax_spec_code[c]);
        -: 4139:              break;
        -: 4140:
        -: 4141:            case 'S':
        -: 4142:              laststart = b;
        -: 4143:              PATFETCH (c);
        -: 4144:              BUF_PUSH_2 (notsyntaxspec, syntax_spec_code[c]);
        -: 4145:              break;
        -: 4146:#endif /* emacs */
        -: 4147:
        -: 4148:
    #####: 4149:            case 'w':
    #####: 4150:              laststart = b;
    #####: 4151:              BUF_PUSH (wordchar);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 4152:              break;
        -: 4153:
        -: 4154:
    #####: 4155:            case 'W':
    #####: 4156:              laststart = b;
    #####: 4157:              BUF_PUSH (notwordchar);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 4158:              break;
        -: 4159:
        -: 4160:
    #####: 4161:            case '<':
    #####: 4162:              BUF_PUSH (wordbeg);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 4163:              break;
        -: 4164:
    #####: 4165:            case '>':
    #####: 4166:              BUF_PUSH (wordend);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 4167:              break;
        -: 4168:
    #####: 4169:            case 'b':
    #####: 4170:              BUF_PUSH (wordbound);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 4171:              break;
        -: 4172:
    #####: 4173:            case 'B':
    #####: 4174:              BUF_PUSH (notwordbound);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 4175:              break;
        -: 4176:
      152: 4177:            case '`':
     152*: 4178:              BUF_PUSH (begbuf);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 152 (fallthrough)
      152: 4179:              break;
        -: 4180:
      102: 4181:            case '\'':
     102*: 4182:              BUF_PUSH (endbuf);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 102 (fallthrough)
      102: 4183:              break;
        -: 4184:
    #####: 4185:            case '1': case '2': case '3': case '4': case '5':
        -: 4186:            case '6': case '7': case '8': case '9':
    #####: 4187:              if (syntax & RE_NO_BK_REFS)
branch  0 never executed
branch  1 never executed
    #####: 4188:                goto normal_char;
        -: 4189:
    #####: 4190:              c1 = c - '0';
        -: 4191:
    #####: 4192:              if (c1 > regnum)
branch  0 never executed
branch  1 never executed
    #####: 4193:                return REG_ESUBREG;
        -: 4194:
        -: 4195:              /* Can't back reference to a subexpression if inside of it.  */
    #####: 4196:              if (group_in_compile_stack (compile_stack, c1))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4197:                goto normal_char;
        -: 4198:
    #####: 4199:              laststart = b;
    #####: 4200:              BUF_PUSH_2 (duplicate, c1);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 4201:              break;
        -: 4202:
        -: 4203:
    #####: 4204:            case '+':
        -: 4205:            case '?':
    #####: 4206:              if (syntax & RE_BK_PLUS_QM)
branch  0 never executed
branch  1 never executed
    #####: 4207:                goto handle_plus;
        -: 4208:              else
    #####: 4209:                goto normal_backslash;
        -: 4210:
        -: 4211:            default:
      312: 4212:            normal_backslash:
        -: 4213:              /* You might think it would be useful for \ to mean
        -: 4214:                 not to translate; but if we don't translate it
        -: 4215:                 it will never match anything.  */
     312*: 4216:              c = TRANSLATE (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 312
      312: 4217:              goto normal_char;
        -: 4218:            }
      279: 4219:          break;
        -: 4220:
        -: 4221:
        -: 4222:	default:
        -: 4223:        /* Expects the character in `c'.  */
     2109: 4224:	normal_char:
        -: 4225:	      /* If no exactn currently being built.  */
     2109: 4226:          if (!pending_exact 
branch  0 taken 1558 (fallthrough)
branch  1 taken 551
        -: 4227:
        -: 4228:              /* If last exactn not at current position.  */
     1558: 4229:              || pending_exact + *pending_exact + 1 != b
branch  0 taken 1558 (fallthrough)
branch  1 taken 0
        -: 4230:              
        -: 4231:              /* We have only one byte following the exactn for the count.  */
     1558: 4232:	      || *pending_exact == (1 << BYTEWIDTH) - 1
branch  0 taken 1558 (fallthrough)
branch  1 taken 0
        -: 4233:
        -: 4234:              /* If followed by a repetition operator.  */
     1558: 4235:              || *p == '*' || *p == '^'
branch  0 taken 1550 (fallthrough)
branch  1 taken 8
branch  2 taken 1548 (fallthrough)
branch  3 taken 2
    3096*: 4236:	      || ((syntax & RE_BK_PLUS_QM)
branch  0 taken 1548 (fallthrough)
branch  1 taken 0
branch  2 taken 1548
branch  3 taken 0
branch  4 never executed
branch  5 never executed
    1548*: 4237:		  ? *p == '\\' && (p[1] == '+' || p[1] == '?')
branch  0 taken 48 (fallthrough)
branch  1 taken 1500
branch  2 taken 48 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 48
    #####: 4238:		  : (*p == '+' || *p == '?'))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
     1548: 4239:	      || ((syntax & RE_INTERVALS)
branch  0 taken 1548 (fallthrough)
branch  1 taken 0
    3096*: 4240:                  && ((syntax & RE_NO_BK_BRACES)
branch  0 taken 0 (fallthrough)
branch  1 taken 1548
branch  2 taken 0 (fallthrough)
branch  3 taken 1548
    #####: 4241:		      ? *p == '{'
branch  0 never executed
branch  1 never executed
    1548*: 4242:                      : (p[0] == '\\' && p[1] == '{'))))
branch  0 taken 48 (fallthrough)
branch  1 taken 1500
branch  2 taken 0 (fallthrough)
branch  3 taken 48
        -: 4243:	    {
        -: 4244:	      /* Start building a new exactn.  */
        -: 4245:              
      561: 4246:              laststart = b;
        -: 4247:
     561*: 4248:	      BUF_PUSH_2 (exactn, 0);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0
branch 15 taken 561 (fallthrough)
      561: 4249:	      pending_exact = b - 1;
        -: 4250:            }
        -: 4251:            
    2113*: 4252:	  BUF_PUSH (c);
branch  0 taken 0 (fallthrough)
branch  1 taken 4
branch  2 taken 0 (fallthrough)
branch  3 taken 4
branch  4 taken 0 (fallthrough)
branch  5 taken 4
branch  6 taken 4 (fallthrough)
branch  7 taken 0
branch  8 taken 0 (fallthrough)
branch  9 taken 4
branch 10 taken 4 (fallthrough)
branch 11 taken 0
branch 12 taken 4 (fallthrough)
branch 13 taken 0
branch 14 taken 4
branch 15 taken 2109 (fallthrough)
     2109: 4253:          (*pending_exact)++;
     2109: 4254:	  break;
        -: 4255:        } /* switch (c) */
        -: 4256:    } /* while p != pend */
        -: 4257:
        -: 4258:  
        -: 4259:  /* Through the pattern now.  */
        -: 4260:  
      603: 4261:  if (fixup_alt_jump)
branch  0 taken 0 (fallthrough)
branch  1 taken 603
    #####: 4262:    STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
call    0 never executed
        -: 4263:
      603: 4264:  if (!COMPILE_STACK_EMPTY) 
branch  0 taken 0 (fallthrough)
branch  1 taken 603
    #####: 4265:    return REG_EPAREN;
        -: 4266:
      603: 4267:  free (compile_stack.stack);
        -: 4268:
        -: 4269:  /* We have succeeded; set the length of the buffer.  */
      603: 4270:  bufp->used = b - bufp->buffer;
        -: 4271:
        -: 4272:#ifdef DEBUG
        -: 4273:  if (debug)
        -: 4274:    {
        -: 4275:      DEBUG_PRINT1 ("\nCompiled pattern: ");
        -: 4276:      print_compiled_pattern (bufp);
        -: 4277:    }
        -: 4278:#endif /* DEBUG */
        -: 4279:
      603: 4280:  return REG_NOERROR;
        -: 4281:} /* regex_compile */
        -: 4282:
        -: 4283:/* Subroutines for `regex_compile'.  */
        -: 4284:
        -: 4285:/* Store OP at LOC followed by two-byte integer parameter ARG.  */
        -: 4286:
        -: 4287:static void
function store_op1 called 258 returned 100% blocks executed 100%
      258: 4288:store_op1 (op, loc, arg)
        -: 4289:    re_opcode_t op;
        -: 4290:    unsigned char *loc;
        -: 4291:    int arg;
        -: 4292:{
      258: 4293:  *loc = (unsigned char) op;
      258: 4294:  STORE_NUMBER (loc + 1, arg);
      258: 4295:}
        -: 4296:
        -: 4297:
        -: 4298:/* Like `store_op1', but for two two-byte parameters ARG1 and ARG2.  */
        -: 4299:
        -: 4300:static void
function store_op2 called 4 returned 100% blocks executed 100%
        4: 4301:store_op2 (op, loc, arg1, arg2)
        -: 4302:    re_opcode_t op;
        -: 4303:    unsigned char *loc;
        -: 4304:    int arg1, arg2;
        -: 4305:{
        4: 4306:  *loc = (unsigned char) op;
        4: 4307:  STORE_NUMBER (loc + 1, arg1);
        4: 4308:  STORE_NUMBER (loc + 3, arg2);
        4: 4309:}
        -: 4310:
        -: 4311:
        -: 4312:/* Copy the bytes from LOC to END to open up three bytes of space at LOC
        -: 4313:   for OP followed by two-byte integer parameter ARG.  */
        -: 4314:
        -: 4315:static void
function insert_op1 called 129 returned 100% blocks executed 100%
      129: 4316:insert_op1 (op, loc, arg, end)
        -: 4317:    re_opcode_t op;
        -: 4318:    unsigned char *loc;
        -: 4319:    int arg;
        -: 4320:    unsigned char *end;    
        -: 4321:{
      129: 4322:  register unsigned char *pfrom = end;
      129: 4323:  register unsigned char *pto = end + 3;
        -: 4324:
      661: 4325:  while (pfrom != loc)
branch  0 taken 532
branch  1 taken 129 (fallthrough)
      532: 4326:    *--pto = *--pfrom;
        -: 4327:    
      129: 4328:  store_op1 (op, loc, arg);
call    0 returned 129
      129: 4329:}
        -: 4330:
        -: 4331:
        -: 4332:/* Like `insert_op1', but for two two-byte parameters ARG1 and ARG2.  */
        -: 4333:
        -: 4334:static void
function insert_op2 called 3 returned 100% blocks executed 100%
        3: 4335:insert_op2 (op, loc, arg1, arg2, end)
        -: 4336:    re_opcode_t op;
        -: 4337:    unsigned char *loc;
        -: 4338:    int arg1, arg2;
        -: 4339:    unsigned char *end;    
        -: 4340:{
        3: 4341:  register unsigned char *pfrom = end;
        3: 4342:  register unsigned char *pto = end + 5;
        -: 4343:
       32: 4344:  while (pfrom != loc)
branch  0 taken 29
branch  1 taken 3 (fallthrough)
       29: 4345:    *--pto = *--pfrom;
        -: 4346:    
        3: 4347:  store_op2 (op, loc, arg1, arg2);
call    0 returned 3
        3: 4348:}
        -: 4349:
        -: 4350:
        -: 4351:/* P points to just after a ^ in PATTERN.  Return true if that ^ comes
        -: 4352:   after an alternative or a begin-subexpression.  We assume there is at
        -: 4353:   least one character before the ^.  */
        -: 4354:
        -: 4355:static boolean
function at_begline_loc_p called 0 returned 0% blocks executed 0%
    #####: 4356:at_begline_loc_p (pattern, p, syntax)
        -: 4357:    const char *pattern, *p;
        -: 4358:    reg_syntax_t syntax;
        -: 4359:{
    #####: 4360:  const char *prev = p - 2;
    #####: 4361:  boolean prev_prev_backslash = prev > pattern && prev[-1] == '\\';
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 4362:  
        -: 4363:  return
        -: 4364:       /* After a subexpression?  */
    #####: 4365:       (*prev == '(' && (syntax & RE_NO_BK_PARENS || prev_prev_backslash))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 4366:       /* After an alternative?  */
    #####: 4367:    || (*prev == '|' && (syntax & RE_NO_BK_VBAR || prev_prev_backslash));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 4368:}
        -: 4369:
        -: 4370:
        -: 4371:/* The dual of at_begline_loc_p.  This one is for $.  We assume there is
        -: 4372:   at least one character after the $, i.e., `P < PEND'.  */
        -: 4373:
        -: 4374:static boolean
function at_endline_loc_p called 0 returned 0% blocks executed 0%
    #####: 4375:at_endline_loc_p (p, pend, syntax)
        -: 4376:    const char *p, *pend;
        -: 4377:    int syntax;
        -: 4378:{
    #####: 4379:  const char *next = p;
    #####: 4380:  boolean next_backslash = *next == '\\';
    #####: 4381:  const char *next_next = p + 1 < pend ? p + 1 : NULL;
branch  0 never executed
branch  1 never executed
        -: 4382:  
        -: 4383:  return
        -: 4384:       /* Before a subexpression?  */
    #####: 4385:       (syntax & RE_NO_BK_PARENS ? *next == ')'
    #####: 4386:        : next_backslash && next_next && *next_next == ')')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 4387:       /* Before an alternative?  */
    #####: 4388:    || (syntax & RE_NO_BK_VBAR ? *next == '|'
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4389:        : next_backslash && next_next && *next_next == '|');
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 4390:}
        -: 4391:
        -: 4392:
        -: 4393:/* Returns true if REGNUM is in one of COMPILE_STACK's elements and 
        -: 4394:   false if it's not.  */
        -: 4395:
        -: 4396:static boolean
function group_in_compile_stack called 0 returned 0% blocks executed 0%
    #####: 4397:group_in_compile_stack (compile_stack, regnum)
        -: 4398:    compile_stack_type compile_stack;
        -: 4399:    regnum_t regnum;
        -: 4400:{
        -: 4401:  int this_element;
        -: 4402:
    #####: 4403:  for (this_element = compile_stack.avail - 1;  
    #####: 4404:       this_element >= 0; 
branch  0 never executed
branch  1 never executed
    #####: 4405:       this_element--)
    #####: 4406:    if (compile_stack.stack[this_element].regnum == regnum)
branch  0 never executed
branch  1 never executed
    #####: 4407:      return true;
        -: 4408:
    #####: 4409:  return false;
        -: 4410:}
        -: 4411:
        -: 4412:
        -: 4413:/* Read the ending character of a range (in a bracket expression) from the
        -: 4414:   uncompiled pattern *P_PTR (which ends at PEND).  We assume the
        -: 4415:   starting character is in `P[-2]'.  (`P[-1]' is the character `-'.)
        -: 4416:   Then we set the translation of all bits between the starting and
        -: 4417:   ending characters (inclusive) in the compiled pattern B.
        -: 4418:   
        -: 4419:   Return an error code.
        -: 4420:   
        -: 4421:   We use these short variable names so we can use the same macros as
        -: 4422:   `regex_compile' itself.  */
        -: 4423:
        -: 4424:static reg_errcode_t
function compile_range called 0 returned 0% blocks executed 0%
    #####: 4425:compile_range (p_ptr, pend, translate, syntax, b)
        -: 4426:    const char **p_ptr, *pend;
        -: 4427:    char *translate;
        -: 4428:    reg_syntax_t syntax;
        -: 4429:    unsigned char *b;
        -: 4430:{
        -: 4431:  unsigned this_char;
        -: 4432:
    #####: 4433:  const char *p = *p_ptr;
        -: 4434:  int range_start, range_end;
        -: 4435:  
    #####: 4436:  if (p == pend)
branch  0 never executed
branch  1 never executed
    #####: 4437:    return REG_ERANGE;
        -: 4438:
        -: 4439:  /* Even though the pattern is a signed `char *', we need to fetch
        -: 4440:     with unsigned char *'s; if the high bit of the pattern character
        -: 4441:     is set, the range endpoints will be negative if we fetch using a
        -: 4442:     signed char *.
        -: 4443:
        -: 4444:     We also want to fetch the endpoints without translating them; the 
        -: 4445:     appropriate translation is done in the bit-setting loop below.  */
    #####: 4446:  range_start = ((unsigned char *) p)[-2];
    #####: 4447:  range_end   = ((unsigned char *) p)[0];
        -: 4448:
        -: 4449:  /* Have to increment the pointer into the pattern string, so the
        -: 4450:     caller isn't still at the ending character.  */
    #####: 4451:  (*p_ptr)++;
        -: 4452:
        -: 4453:  /* If the start is after the end, the range is empty.  */
    #####: 4454:  if (range_start > range_end)
branch  0 never executed
branch  1 never executed
    #####: 4455:    return syntax & RE_NO_EMPTY_RANGES ? REG_ERANGE : REG_NOERROR;
branch  0 never executed
branch  1 never executed
        -: 4456:
        -: 4457:  /* Here we see why `this_char' has to be larger than an `unsigned
        -: 4458:     char' -- the range is inclusive, so if `range_end' == 0xff
        -: 4459:     (assuming 8-bit characters), we would otherwise go into an infinite
        -: 4460:     loop, since all characters <= 0xff.  */
    #####: 4461:  for (this_char = range_start; this_char <= range_end; this_char++)
branch  0 never executed
branch  1 never executed
        -: 4462:    {
    #####: 4463:      SET_LIST_BIT (TRANSLATE (this_char));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 4464:    }
        -: 4465:  
    #####: 4466:  return REG_NOERROR;
        -: 4467:}
        -: 4468:
        -: 4469:/* Failure stack declarations and macros; both re_compile_fastmap and
        -: 4470:   re_match_2 use a failure stack.  These have to be macros because of
        -: 4471:   REGEX_ALLOCATE.  */
        -: 4472:   
        -: 4473:
        -: 4474:/* Number of failure points for which to initially allocate space
        -: 4475:   when matching.  If this number is exceeded, we allocate more
        -: 4476:   space, so it is not a hard limit.  */
        -: 4477:#ifndef INIT_FAILURE_ALLOC
        -: 4478:#define INIT_FAILURE_ALLOC 5
        -: 4479:#endif
        -: 4480:
        -: 4481:/* Roughly the maximum number of failure points on the stack.  Would be
        -: 4482:   exactly that if always used MAX_FAILURE_SPACE each time we failed.
        -: 4483:   This is a variable only so users of regex can assign to it; we never
        -: 4484:   change it ourselves.  */
        -: 4485:int re_max_failures = 2000;
        -: 4486:
        -: 4487:typedef const unsigned char *fail_stack_elt_t;
        -: 4488:
        -: 4489:typedef struct
        -: 4490:{
        -: 4491:  fail_stack_elt_t *stack;
        -: 4492:  unsigned size;
        -: 4493:  unsigned avail;			/* Offset of next open position.  */
        -: 4494:} fail_stack_type;
        -: 4495:
        -: 4496:#define FAIL_STACK_EMPTY()     (fail_stack.avail == 0)
        -: 4497:#define FAIL_STACK_PTR_EMPTY() (fail_stack_ptr->avail == 0)
        -: 4498:#define FAIL_STACK_FULL()      (fail_stack.avail == fail_stack.size)
        -: 4499:#define FAIL_STACK_TOP()       (fail_stack.stack[fail_stack.avail])
        -: 4500:
        -: 4501:
        -: 4502:/* Initialize `fail_stack'.  Do `return -2' if the alloc fails.  */
        -: 4503:
        -: 4504:#define INIT_FAIL_STACK()						\
        -: 4505:  do {									\
        -: 4506:    fail_stack.stack = (fail_stack_elt_t *)				\
        -: 4507:      REGEX_ALLOCATE (INIT_FAILURE_ALLOC * sizeof (fail_stack_elt_t));	\
        -: 4508:									\
        -: 4509:    if (fail_stack.stack == NULL)					\
        -: 4510:      return -2;							\
        -: 4511:									\
        -: 4512:    fail_stack.size = INIT_FAILURE_ALLOC;				\
        -: 4513:    fail_stack.avail = 0;						\
        -: 4514:  } while (0)
        -: 4515:
        -: 4516:
        -: 4517:/* Double the size of FAIL_STACK, up to approximately `re_max_failures' items.
        -: 4518:
        -: 4519:   Return 1 if succeeds, and 0 if either ran out of memory
        -: 4520:   allocating space for it or it was already too large.  
        -: 4521:   
        -: 4522:   REGEX_REALLOCATE requires `destination' be declared.   */
        -: 4523:
        -: 4524:#define DOUBLE_FAIL_STACK(fail_stack)					\
        -: 4525:  ((fail_stack).size > re_max_failures * MAX_FAILURE_ITEMS		\
        -: 4526:   ? 0									\
        -: 4527:   : ((fail_stack).stack = (fail_stack_elt_t *)				\
        -: 4528:        REGEX_REALLOCATE ((fail_stack).stack, 				\
        -: 4529:          (fail_stack).size * sizeof (fail_stack_elt_t),		\
        -: 4530:          ((fail_stack).size << 1) * sizeof (fail_stack_elt_t)),	\
        -: 4531:									\
        -: 4532:      (fail_stack).stack == NULL					\
        -: 4533:      ? 0								\
        -: 4534:      : ((fail_stack).size <<= 1, 					\
        -: 4535:         1)))
        -: 4536:
        -: 4537:
        -: 4538:/* Push PATTERN_OP on FAIL_STACK. 
        -: 4539:
        -: 4540:   Return 1 if was able to do so and 0 if ran out of memory allocating
        -: 4541:   space to do so.  */
        -: 4542:#define PUSH_PATTERN_OP(pattern_op, fail_stack)				\
        -: 4543:  ((FAIL_STACK_FULL ()							\
        -: 4544:    && !DOUBLE_FAIL_STACK (fail_stack))					\
        -: 4545:    ? 0									\
        -: 4546:    : ((fail_stack).stack[(fail_stack).avail++] = pattern_op,		\
        -: 4547:       1))
        -: 4548:
        -: 4549:/* This pushes an item onto the failure stack.  Must be a four-byte
        -: 4550:   value.  Assumes the variable `fail_stack'.  Probably should only
        -: 4551:   be called from within `PUSH_FAILURE_POINT'.  */
        -: 4552:#define PUSH_FAILURE_ITEM(item)						\
        -: 4553:  fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) item
        -: 4554:
        -: 4555:/* The complement operation.  Assumes `fail_stack' is nonempty.  */
        -: 4556:#define POP_FAILURE_ITEM() fail_stack.stack[--fail_stack.avail]
        -: 4557:
        -: 4558:/* Used to omit pushing failure point id's when we're not debugging.  */
        -: 4559:#ifdef DEBUG
        -: 4560:#define DEBUG_PUSH PUSH_FAILURE_ITEM
        -: 4561:#define DEBUG_POP(item_addr) *(item_addr) = POP_FAILURE_ITEM ()
        -: 4562:#else
        -: 4563:#define DEBUG_PUSH(item)
        -: 4564:#define DEBUG_POP(item_addr)
        -: 4565:#endif
        -: 4566:
        -: 4567:
        -: 4568:/* Push the information about the state we will need
        -: 4569:   if we ever fail back to it.  
        -: 4570:   
        -: 4571:   Requires variables fail_stack, regstart, regend, reg_info, and
        -: 4572:   num_regs be declared.  DOUBLE_FAIL_STACK requires `destination' be
        -: 4573:   declared.
        -: 4574:   
        -: 4575:   Does `return FAILURE_CODE' if runs out of memory.  */
        -: 4576:
        -: 4577:#define PUSH_FAILURE_POINT(pattern_place, string_place, failure_code)	\
        -: 4578:  do {									\
        -: 4579:    char *destination;							\
        -: 4580:    /* Must be int, so when we don't save any registers, the arithmetic	\
        -: 4581:       of 0 + -1 isn't done as unsigned.  */				\
        -: 4582:    int this_reg;							\
        -: 4583:    									\
        -: 4584:    DEBUG_STATEMENT (failure_id++);					\
        -: 4585:    DEBUG_STATEMENT (nfailure_points_pushed++);				\
        -: 4586:    DEBUG_PRINT2 ("\nPUSH_FAILURE_POINT #%u:\n", failure_id);		\
        -: 4587:    DEBUG_PRINT2 ("  Before push, next avail: %d\n", (fail_stack).avail);\
        -: 4588:    DEBUG_PRINT2 ("                     size: %d\n", (fail_stack).size);\
        -: 4589:									\
        -: 4590:    DEBUG_PRINT2 ("  slots needed: %d\n", NUM_FAILURE_ITEMS);		\
        -: 4591:    DEBUG_PRINT2 ("     available: %d\n", REMAINING_AVAIL_SLOTS);	\
        -: 4592:									\
        -: 4593:    /* Ensure we have enough space allocated for what we will push.  */	\
        -: 4594:    while (REMAINING_AVAIL_SLOTS < NUM_FAILURE_ITEMS)			\
        -: 4595:      {									\
        -: 4596:        if (!DOUBLE_FAIL_STACK (fail_stack))			\
        -: 4597:          return failure_code;						\
        -: 4598:									\
        -: 4599:        DEBUG_PRINT2 ("\n  Doubled stack; size now: %d\n",		\
        -: 4600:		       (fail_stack).size);				\
        -: 4601:        DEBUG_PRINT2 ("  slots available: %d\n", REMAINING_AVAIL_SLOTS);\
        -: 4602:      }									\
        -: 4603:									\
        -: 4604:    /* Push the info, starting with the registers.  */			\
        -: 4605:    DEBUG_PRINT1 ("\n");						\
        -: 4606:									\
        -: 4607:    for (this_reg = lowest_active_reg; this_reg <= highest_active_reg;	\
        -: 4608:         this_reg++)							\
        -: 4609:      {									\
        -: 4610:	DEBUG_PRINT2 ("  Pushing reg: %d\n", this_reg);			\
        -: 4611:        DEBUG_STATEMENT (num_regs_pushed++);				\
        -: 4612:									\
        -: 4613:	DEBUG_PRINT2 ("    start: 0x%x\n", regstart[this_reg]);		\
        -: 4614:        PUSH_FAILURE_ITEM (regstart[this_reg]);				\
        -: 4615:                                                                        \
        -: 4616:	DEBUG_PRINT2 ("    end: 0x%x\n", regend[this_reg]);		\
        -: 4617:        PUSH_FAILURE_ITEM (regend[this_reg]);				\
        -: 4618:									\
        -: 4619:	DEBUG_PRINT2 ("    info: 0x%x\n      ", reg_info[this_reg]);	\
        -: 4620:        DEBUG_PRINT2 (" match_null=%d",					\
        -: 4621:                      REG_MATCH_NULL_STRING_P (reg_info[this_reg]));	\
        -: 4622:        DEBUG_PRINT2 (" active=%d", IS_ACTIVE (reg_info[this_reg]));	\
        -: 4623:        DEBUG_PRINT2 (" matched_something=%d",				\
        -: 4624:                      MATCHED_SOMETHING (reg_info[this_reg]));		\
        -: 4625:        DEBUG_PRINT2 (" ever_matched=%d",				\
        -: 4626:                      EVER_MATCHED_SOMETHING (reg_info[this_reg]));	\
        -: 4627:	DEBUG_PRINT1 ("\n");						\
        -: 4628:        PUSH_FAILURE_ITEM (reg_info[this_reg].word);			\
        -: 4629:      }									\
        -: 4630:									\
        -: 4631:    DEBUG_PRINT2 ("  Pushing  low active reg: %d\n", lowest_active_reg);\
        -: 4632:    PUSH_FAILURE_ITEM (lowest_active_reg);				\
        -: 4633:									\
        -: 4634:    DEBUG_PRINT2 ("  Pushing high active reg: %d\n", highest_active_reg);\
        -: 4635:    PUSH_FAILURE_ITEM (highest_active_reg);				\
        -: 4636:									\
        -: 4637:    DEBUG_PRINT2 ("  Pushing pattern 0x%x: ", pattern_place);		\
        -: 4638:    DEBUG_PRINT_COMPILED_PATTERN (bufp, pattern_place, pend);		\
        -: 4639:    PUSH_FAILURE_ITEM (pattern_place);					\
        -: 4640:									\
        -: 4641:    DEBUG_PRINT2 ("  Pushing string 0x%x: `", string_place);		\
        -: 4642:    DEBUG_PRINT_DOUBLE_STRING (string_place, string1, size1, string2,   \
        -: 4643:				 size2);				\
        -: 4644:    DEBUG_PRINT1 ("'\n");						\
        -: 4645:    PUSH_FAILURE_ITEM (string_place);					\
        -: 4646:									\
        -: 4647:    DEBUG_PRINT2 ("  Pushing failure id: %u\n", failure_id);		\
        -: 4648:    DEBUG_PUSH (failure_id);						\
        -: 4649:  } while (0)
        -: 4650:
        -: 4651:/* This is the number of items that are pushed and popped on the stack
        -: 4652:   for each register.  */
        -: 4653:#define NUM_REG_ITEMS  3
        -: 4654:
        -: 4655:/* Individual items aside from the registers.  */
        -: 4656:#ifdef DEBUG
        -: 4657:#define NUM_NONREG_ITEMS 5 /* Includes failure point id.  */
        -: 4658:#else
        -: 4659:#define NUM_NONREG_ITEMS 4
        -: 4660:#endif
        -: 4661:
        -: 4662:/* We push at most this many items on the stack.  */
        -: 4663:#define MAX_FAILURE_ITEMS ((num_regs - 1) * NUM_REG_ITEMS + NUM_NONREG_ITEMS)
        -: 4664:
        -: 4665:/* We actually push this many items.  */
        -: 4666:#define NUM_FAILURE_ITEMS						\
        -: 4667:  ((highest_active_reg - lowest_active_reg + 1) * NUM_REG_ITEMS 	\
        -: 4668:    + NUM_NONREG_ITEMS)
        -: 4669:
        -: 4670:/* How many items can still be added to the stack without overflowing it.  */
        -: 4671:#define REMAINING_AVAIL_SLOTS ((fail_stack).size - (fail_stack).avail)
        -: 4672:
        -: 4673:
        -: 4674:/* Pops what PUSH_FAIL_STACK pushes.
        -: 4675:
        -: 4676:   We restore into the parameters, all of which should be lvalues:
        -: 4677:     STR -- the saved data position.
        -: 4678:     PAT -- the saved pattern position.
        -: 4679:     LOW_REG, HIGH_REG -- the highest and lowest active registers.
        -: 4680:     REGSTART, REGEND -- arrays of string positions.
        -: 4681:     REG_INFO -- array of information about each subexpression.
        -: 4682:   
        -: 4683:   Also assumes the variables `fail_stack' and (if debugging), `bufp',
        -: 4684:   `pend', `string1', `size1', `string2', and `size2'.  */
        -: 4685:
        -: 4686:#define POP_FAILURE_POINT(str, pat, low_reg, high_reg, regstart, regend, reg_info)\
        -: 4687:{									\
        -: 4688:  DEBUG_STATEMENT (fail_stack_elt_t failure_id;)			\
        -: 4689:  int this_reg;								\
        -: 4690:  const unsigned char *string_temp;					\
        -: 4691:									\
        -: 4692:  assert (!FAIL_STACK_EMPTY ());					\
        -: 4693:									\
        -: 4694:  /* Remove failure points and point to how many regs pushed.  */	\
        -: 4695:  DEBUG_PRINT1 ("POP_FAILURE_POINT:\n");				\
        -: 4696:  DEBUG_PRINT2 ("  Before pop, next avail: %d\n", fail_stack.avail);	\
        -: 4697:  DEBUG_PRINT2 ("                    size: %d\n", fail_stack.size);	\
        -: 4698:									\
        -: 4699:  assert (fail_stack.avail >= NUM_NONREG_ITEMS);			\
        -: 4700:									\
        -: 4701:  DEBUG_POP (&failure_id);						\
        -: 4702:  DEBUG_PRINT2 ("  Popping failure id: %u\n", failure_id);		\
        -: 4703:									\
        -: 4704:  /* If the saved string location is NULL, it came from an		\
        -: 4705:     on_failure_keep_string_jump opcode, and we want to throw away the	\
        -: 4706:     saved NULL, thus retaining our current position in the string.  */	\
        -: 4707:  string_temp = POP_FAILURE_ITEM ();					\
        -: 4708:  if (string_temp != NULL)						\
        -: 4709:    str = (const char *) string_temp;					\
        -: 4710:									\
        -: 4711:  DEBUG_PRINT2 ("  Popping string 0x%x: `", str);			\
        -: 4712:  DEBUG_PRINT_DOUBLE_STRING (str, string1, size1, string2, size2);	\
        -: 4713:  DEBUG_PRINT1 ("'\n");							\
        -: 4714:									\
        -: 4715:  pat = (unsigned char *) POP_FAILURE_ITEM ();				\
        -: 4716:  DEBUG_PRINT2 ("  Popping pattern 0x%x: ", pat);			\
        -: 4717:  DEBUG_PRINT_COMPILED_PATTERN (bufp, pat, pend);			\
        -: 4718:									\
        -: 4719:  /* Restore register info.  */						\
        -: 4720:  high_reg = (unsigned) POP_FAILURE_ITEM ();				\
        -: 4721:  DEBUG_PRINT2 ("  Popping high active reg: %d\n", high_reg);		\
        -: 4722:									\
        -: 4723:  low_reg = (unsigned) POP_FAILURE_ITEM ();				\
        -: 4724:  DEBUG_PRINT2 ("  Popping  low active reg: %d\n", low_reg);		\
        -: 4725:									\
        -: 4726:  for (this_reg = high_reg; this_reg >= low_reg; this_reg--)		\
        -: 4727:    {									\
        -: 4728:      DEBUG_PRINT2 ("    Popping reg: %d\n", this_reg);			\
        -: 4729:									\
        -: 4730:      reg_info[this_reg].word = POP_FAILURE_ITEM ();			\
        -: 4731:      DEBUG_PRINT2 ("      info: 0x%x\n", reg_info[this_reg]);		\
        -: 4732:									\
        -: 4733:      regend[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
        -: 4734:      DEBUG_PRINT2 ("      end: 0x%x\n", regend[this_reg]);		\
        -: 4735:									\
        -: 4736:      regstart[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
        -: 4737:      DEBUG_PRINT2 ("      start: 0x%x\n", regstart[this_reg]);		\
        -: 4738:    }									\
        -: 4739:									\
        -: 4740:  DEBUG_STATEMENT (nfailure_points_popped++);				\
        -: 4741:} /* POP_FAILURE_POINT */
        -: 4742:
        -: 4743:/* re_compile_fastmap computes a ``fastmap'' for the compiled pattern in
        -: 4744:   BUFP.  A fastmap records which of the (1 << BYTEWIDTH) possible
        -: 4745:   characters can start a string that matches the pattern.  This fastmap
        -: 4746:   is used by re_search to skip quickly over impossible starting points.
        -: 4747:
        -: 4748:   The caller must supply the address of a (1 << BYTEWIDTH)-byte data
        -: 4749:   area as BUFP->fastmap.
        -: 4750:   
        -: 4751:   We set the `fastmap', `fastmap_accurate', and `can_be_null' fields in
        -: 4752:   the pattern buffer.
        -: 4753:
        -: 4754:   Returns 0 if we succeed, -2 if an internal error.   */
        -: 4755:
        -: 4756:int
function re_compile_fastmap called 597 returned 100% blocks executed 56%
      597: 4757:re_compile_fastmap (bufp)
        -: 4758:     struct re_pattern_buffer *bufp;
        -: 4759:{
        -: 4760:  int j, k;
        -: 4761:  fail_stack_type fail_stack;
        -: 4762:#ifndef REGEX_MALLOC
        -: 4763:  char *destination;
        -: 4764:#endif
        -: 4765:  /* We don't push any register information onto the failure stack.  */
      597: 4766:  unsigned num_regs = 0;
        -: 4767:  
      597: 4768:  register char *fastmap = bufp->fastmap;
      597: 4769:  unsigned char *pattern = bufp->buffer;
      597: 4770:  unsigned long size = bufp->used;
      597: 4771:  const unsigned char *p = pattern;
      597: 4772:  register unsigned char *pend = pattern + size;
        -: 4773:
        -: 4774:  /* Assume that each path through the pattern can be null until
        -: 4775:     proven otherwise.  We set this false at the bottom of switch
        -: 4776:     statement, to which we get only if a particular path doesn't
        -: 4777:     match the empty string.  */
      597: 4778:  boolean path_can_be_null = true;
        -: 4779:
        -: 4780:  /* We aren't doing a `succeed_n' to begin with.  */
      597: 4781:  boolean succeed_n_p = false;
        -: 4782:
        -: 4783:  assert (fastmap != NULL && p != NULL);
        -: 4784:  
     597*: 4785:  INIT_FAIL_STACK ();
branch  0 taken 0 (fallthrough)
branch  1 taken 597
      597: 4786:  bzero (fastmap, 1 << BYTEWIDTH);  /* Assume nothing's valid.  */
      597: 4787:  bufp->fastmap_accurate = 1;	    /* It will be when we're done.  */
      597: 4788:  bufp->can_be_null = 0;
        -: 4789:      
     1398: 4790:  while (p != pend || !FAIL_STACK_EMPTY ())
branch  0 taken 786
branch  1 taken 612 (fallthrough)
branch  2 taken 31
branch  3 taken 581 (fallthrough)
        -: 4791:    {
      817: 4792:      if (p == pend)
branch  0 taken 31 (fallthrough)
branch  1 taken 786
        -: 4793:        {
       31: 4794:          bufp->can_be_null |= path_can_be_null;
        -: 4795:          
        -: 4796:          /* Reset for next path.  */
       31: 4797:          path_can_be_null = true;
        -: 4798:          
       31: 4799:          p = fail_stack.stack[--fail_stack.avail];
        -: 4800:	}
        -: 4801:
        -: 4802:      /* We should never be about to go beyond the end of the pattern.  */
        -: 4803:      assert (p < pend);
        -: 4804:      
        -: 4805:#ifdef SWITCH_ENUM_BUG
        -: 4806:      switch ((int) ((re_opcode_t) *p++))
        -: 4807:#else
     817*: 4808:      switch ((re_opcode_t) *p++)
branch  0 taken 0
branch  1 taken 520
branch  2 taken 2
branch  3 taken 1
branch  4 taken 0
branch  5 taken 0
branch  6 taken 47
branch  7 taken 197
branch  8 taken 0
branch  9 taken 47
branch 10 taken 1
branch 11 taken 2
branch 12 taken 0
branch 13 taken 0
        -: 4809:#endif
        -: 4810:	{
        -: 4811:
        -: 4812:        /* I guess the idea here is to simply not bother with a fastmap
        -: 4813:           if a backreference is used, since it's too hard to figure out
        -: 4814:           the fastmap for the corresponding group.  Setting
        -: 4815:           `can_be_null' stops `re_search_2' from using the fastmap, so
        -: 4816:           that is all we do.  */
    #####: 4817:	case duplicate:
    #####: 4818:	  bufp->can_be_null = 1;
    #####: 4819:          return 0;
        -: 4820:
        -: 4821:
        -: 4822:      /* Following are the cases which match a character.  These end
        -: 4823:         with `break'.  */
        -: 4824:
      520: 4825:	case exactn:
      520: 4826:          fastmap[p[1]] = 1;
      520: 4827:	  break;
        -: 4828:
        -: 4829:
        2: 4830:        case charset:
      242: 4831:          for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
branch  0 taken 240
branch  1 taken 2 (fallthrough)
      240: 4832:	    if (p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH)))
branch  0 taken 4 (fallthrough)
branch  1 taken 236
        4: 4833:              fastmap[j] = 1;
        2: 4834:	  break;
        -: 4835:
        -: 4836:
        1: 4837:	case charset_not:
        -: 4838:	  /* Chars beyond end of map must be allowed.  */
      137: 4839:	  for (j = *p * BYTEWIDTH; j < (1 << BYTEWIDTH); j++)
branch  0 taken 136
branch  1 taken 1 (fallthrough)
      136: 4840:            fastmap[j] = 1;
        -: 4841:
      121: 4842:	  for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
branch  0 taken 120
branch  1 taken 1 (fallthrough)
      120: 4843:	    if (!(p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH))))
branch  0 taken 104 (fallthrough)
branch  1 taken 16
      104: 4844:              fastmap[j] = 1;
        1: 4845:          break;
        -: 4846:
        -: 4847:
    #####: 4848:	case wordchar:
    #####: 4849:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
branch  0 never executed
branch  1 never executed
    #####: 4850:	    if (SYNTAX (j) == Sword)
branch  0 never executed
branch  1 never executed
    #####: 4851:	      fastmap[j] = 1;
    #####: 4852:	  break;
        -: 4853:
        -: 4854:
    #####: 4855:	case notwordchar:
    #####: 4856:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
branch  0 never executed
branch  1 never executed
    #####: 4857:	    if (SYNTAX (j) != Sword)
branch  0 never executed
branch  1 never executed
    #####: 4858:	      fastmap[j] = 1;
    #####: 4859:	  break;
        -: 4860:
        -: 4861:
       47: 4862:        case anychar:
        -: 4863:          /* `.' matches anything ...  */
    12079: 4864:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
branch  0 taken 12032
branch  1 taken 47 (fallthrough)
    12032: 4865:            fastmap[j] = 1;
        -: 4866:
        -: 4867:          /* ... except perhaps newline.  */
       47: 4868:          if (!(bufp->syntax & RE_DOT_NEWLINE))
branch  0 taken 0 (fallthrough)
branch  1 taken 47
    #####: 4869:            fastmap['\n'] = 0;
        -: 4870:
        -: 4871:          /* Return if we have already set `can_be_null'; if we have,
        -: 4872:             then the fastmap is irrelevant.  Something's wrong here.  */
       47: 4873:	  else if (bufp->can_be_null)
branch  0 taken 16 (fallthrough)
branch  1 taken 31
       16: 4874:	    return 0;
        -: 4875:
        -: 4876:          /* Otherwise, have to check alternative paths.  */
       31: 4877:	  break;
        -: 4878:
        -: 4879:
        -: 4880:#ifdef emacs
        -: 4881:        case syntaxspec:
        -: 4882:	  k = *p++;
        -: 4883:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
        -: 4884:	    if (SYNTAX (j) == (enum syntaxcode) k)
        -: 4885:	      fastmap[j] = 1;
        -: 4886:	  break;
        -: 4887:
        -: 4888:
        -: 4889:	case notsyntaxspec:
        -: 4890:	  k = *p++;
        -: 4891:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
        -: 4892:	    if (SYNTAX (j) != (enum syntaxcode) k)
        -: 4893:	      fastmap[j] = 1;
        -: 4894:	  break;
        -: 4895:
        -: 4896:
        -: 4897:      /* All cases after this match the empty string.  These end with
        -: 4898:         `continue'.  */
        -: 4899:
        -: 4900:
        -: 4901:	case before_dot:
        -: 4902:	case at_dot:
        -: 4903:	case after_dot:
        -: 4904:          continue;
        -: 4905:#endif /* not emacs */
        -: 4906:
        -: 4907:
      197: 4908:        case no_op:
        -: 4909:        case begline:
        -: 4910:        case endline:
        -: 4911:	case begbuf:
        -: 4912:	case endbuf:
        -: 4913:	case wordbound:
        -: 4914:	case notwordbound:
        -: 4915:	case wordbeg:
        -: 4916:	case wordend:
        -: 4917:        case push_dummy_failure:
      197: 4918:          continue;
        -: 4919:
        -: 4920:
    #####: 4921:	case jump_n:
        -: 4922:        case pop_failure_jump:
        -: 4923:	case maybe_pop_jump:
        -: 4924:	case jump:
        -: 4925:        case jump_past_alt:
        -: 4926:	case dummy_failure_jump:
    #####: 4927:          EXTRACT_NUMBER_AND_INCR (j, p);
    #####: 4928:	  p += j;	
    #####: 4929:	  if (j > 0)
branch  0 never executed
branch  1 never executed
    #####: 4930:	    continue;
        -: 4931:            
        -: 4932:          /* Jump backward implies we just went through the body of a
        -: 4933:             loop and matched nothing.  Opcode jumped to should be
        -: 4934:             `on_failure_jump' or `succeed_n'.  Just treat it like an
        -: 4935:             ordinary jump.  For a * loop, it has pushed its failure
        -: 4936:             point already; if so, discard that as redundant.  */
    #####: 4937:          if ((re_opcode_t) *p != on_failure_jump
branch  0 never executed
branch  1 never executed
    #####: 4938:	      && (re_opcode_t) *p != succeed_n)
branch  0 never executed
branch  1 never executed
    #####: 4939:	    continue;
        -: 4940:
    #####: 4941:          p++;
    #####: 4942:          EXTRACT_NUMBER_AND_INCR (j, p);
    #####: 4943:          p += j;		
        -: 4944:	  
        -: 4945:          /* If what's on the stack is where we are now, pop it.  */
    #####: 4946:          if (!FAIL_STACK_EMPTY () 
branch  0 never executed
branch  1 never executed
    #####: 4947:	      && fail_stack.stack[fail_stack.avail - 1] == p)
branch  0 never executed
branch  1 never executed
    #####: 4948:            fail_stack.avail--;
        -: 4949:
    #####: 4950:          continue;
        -: 4951:
        -: 4952:
        -: 4953:        case on_failure_jump:
        -: 4954:        case on_failure_keep_string_jump:
       47: 4955:	handle_on_failure_jump:
       47: 4956:          EXTRACT_NUMBER_AND_INCR (j, p);
        -: 4957:
        -: 4958:          /* For some patterns, e.g., `(a?)?', `p+j' here points to the
        -: 4959:             end of the pattern.  We don't want to push such a point,
        -: 4960:             since when we restore it above, entering the switch will
        -: 4961:             increment `p' past the end of the pattern.  We don't need
        -: 4962:             to push such a point since we obviously won't find any more
        -: 4963:             fastmap entries beyond `pend'.  Such a pattern can match
        -: 4964:             the null string, though.  */
       47: 4965:          if (p + j < pend)
branch  0 taken 31 (fallthrough)
branch  1 taken 16
        -: 4966:            {
      31*: 4967:              if (!PUSH_PATTERN_OP (p + j, fail_stack))
branch  0 taken 0 (fallthrough)
branch  1 taken 31
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0 (fallthrough)
branch  9 taken 31
    #####: 4968:                return -2;
        -: 4969:            }
        -: 4970:          else
       16: 4971:            bufp->can_be_null = 1;
        -: 4972:
       47: 4973:          if (succeed_n_p)
branch  0 taken 0 (fallthrough)
branch  1 taken 47
        -: 4974:            {
    #####: 4975:              EXTRACT_NUMBER_AND_INCR (k, p);	/* Skip the n.  */
    #####: 4976:              succeed_n_p = false;
        -: 4977:	    }
        -: 4978:
       47: 4979:          continue;
        -: 4980:
        -: 4981:
        1: 4982:	case succeed_n:
        -: 4983:          /* Get to the number of times to succeed.  */
        1: 4984:          p += 2;		
        -: 4985:
        -: 4986:          /* Increment p past the n for when k != 0.  */
        1: 4987:          EXTRACT_NUMBER_AND_INCR (k, p);
        1: 4988:          if (k == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 4989:	    {
    #####: 4990:              p -= 4;
    #####: 4991:  	      succeed_n_p = true;  /* Spaghetti code alert.  */
    #####: 4992:              goto handle_on_failure_jump;
        -: 4993:            }
        1: 4994:          continue;
        -: 4995:
        -: 4996:
        2: 4997:	case set_number_at:
        2: 4998:          p += 4;
        2: 4999:          continue;
        -: 5000:
        -: 5001:
    #####: 5002:	case start_memory:
        -: 5003:        case stop_memory:
    #####: 5004:	  p += 2;
    #####: 5005:	  continue;
        -: 5006:
        -: 5007:
    #####: 5008:	default:
    #####: 5009:          abort (); /* We have listed all the cases.  */
call    0 never executed
        -: 5010:        } /* switch *p++ */
        -: 5011:
        -: 5012:      /* Getting here means we have found the possible starting
        -: 5013:         characters for one path of the pattern -- and that the empty
        -: 5014:         string does not match.  We need not follow this path further.
        -: 5015:         Instead, look at the next alternative (remembered on the
        -: 5016:         stack), or quit if no more.  The test at the top of the loop
        -: 5017:         does these things.  */
      554: 5018:      path_can_be_null = false;
      554: 5019:      p = pend;
        -: 5020:    } /* while p */
        -: 5021:
        -: 5022:  /* Set `can_be_null' for the last path (also the first path, if the
        -: 5023:     pattern is empty).  */
      581: 5024:  bufp->can_be_null |= path_can_be_null;
      581: 5025:  return 0;
        -: 5026:} /* re_compile_fastmap */
        -: 5027:
        -: 5028:/* Set REGS to hold NUM_REGS registers, storing them in STARTS and
        -: 5029:   ENDS.  Subsequent matches using PATTERN_BUFFER and REGS will use
        -: 5030:   this memory for recording register information.  STARTS and ENDS
        -: 5031:   must be allocated using the malloc library routine, and must each
        -: 5032:   be at least NUM_REGS * sizeof (regoff_t) bytes long.
        -: 5033:
        -: 5034:   If NUM_REGS == 0, then subsequent matches should allocate their own
        -: 5035:   register data.
        -: 5036:
        -: 5037:   Unless this function is called, the first search or match using
        -: 5038:   PATTERN_BUFFER will allocate its own register data, without
        -: 5039:   freeing the old data.  */
        -: 5040:
        -: 5041:void
function re_set_registers called 0 returned 0% blocks executed 0%
    #####: 5042:re_set_registers (bufp, regs, num_regs, starts, ends)
        -: 5043:    struct re_pattern_buffer *bufp;
        -: 5044:    struct re_registers *regs;
        -: 5045:    unsigned num_regs;
        -: 5046:    regoff_t *starts, *ends;
        -: 5047:{
    #####: 5048:  if (num_regs)
branch  0 never executed
branch  1 never executed
        -: 5049:    {
    #####: 5050:      bufp->regs_allocated = REGS_REALLOCATE;
    #####: 5051:      regs->num_regs = num_regs;
    #####: 5052:      regs->start = starts;
    #####: 5053:      regs->end = ends;
        -: 5054:    }
        -: 5055:  else
        -: 5056:    {
    #####: 5057:      bufp->regs_allocated = REGS_UNALLOCATED;
    #####: 5058:      regs->num_regs = 0;
    #####: 5059:      regs->start = regs->end = (regoff_t) 0;
        -: 5060:    }
    #####: 5061:}
        -: 5062:
        -: 5063:/* Searching routines.  */
        -: 5064:
        -: 5065:/* Like re_search_2, below, but only one string is specified, and
        -: 5066:   doesn't let you say where to stop matching. */
        -: 5067:
        -: 5068:int
function re_search called 46942 returned 100% blocks executed 100%
    46942: 5069:re_search (bufp, string, size, startpos, range, regs)
        -: 5070:     struct re_pattern_buffer *bufp;
        -: 5071:     const char *string;
        -: 5072:     int size, startpos, range;
        -: 5073:     struct re_registers *regs;
        -: 5074:{
    46942: 5075:  return re_search_2 (bufp, NULL, 0, string, size, startpos, range, 
call    0 returned 46942
        -: 5076:		      regs, size);
        -: 5077:}
        -: 5078:
        -: 5079:
        -: 5080:/* Using the compiled pattern in BUFP->buffer, first tries to match the
        -: 5081:   virtual concatenation of STRING1 and STRING2, starting first at index
        -: 5082:   STARTPOS, then at STARTPOS + 1, and so on.
        -: 5083:   
        -: 5084:   STRING1 and STRING2 have length SIZE1 and SIZE2, respectively.
        -: 5085:   
        -: 5086:   RANGE is how far to scan while trying to match.  RANGE = 0 means try
        -: 5087:   only at STARTPOS; in general, the last start tried is STARTPOS +
        -: 5088:   RANGE.
        -: 5089:   
        -: 5090:   In REGS, return the indices of the virtual concatenation of STRING1
        -: 5091:   and STRING2 that matched the entire BUFP->buffer and its contained
        -: 5092:   subexpressions.
        -: 5093:   
        -: 5094:   Do not consider matching one past the index STOP in the virtual
        -: 5095:   concatenation of STRING1 and STRING2.
        -: 5096:
        -: 5097:   We return either the position in the strings at which the match was
        -: 5098:   found, -1 if no match, or -2 if error (such as failure
        -: 5099:   stack overflow).  */
        -: 5100:
        -: 5101:int
function re_search_2 called 46942 returned 100% blocks executed 76%
    46942: 5102:re_search_2 (bufp, string1, size1, string2, size2, startpos, range, regs, stop)
        -: 5103:     struct re_pattern_buffer *bufp;
        -: 5104:     const char *string1, *string2;
        -: 5105:     int size1, size2;
        -: 5106:     int startpos;
        -: 5107:     int range;
        -: 5108:     struct re_registers *regs;
        -: 5109:     int stop;
        -: 5110:{
        -: 5111:  int val;
    46942: 5112:  register char *fastmap = bufp->fastmap;
    46942: 5113:  register char *translate = bufp->translate;
    46942: 5114:  int total_size = size1 + size2;
    46942: 5115:  int endpos = startpos + range;
        -: 5116:
        -: 5117:  /* Check for out-of-range STARTPOS.  */
    46942: 5118:  if (startpos < 0 || startpos > total_size)
branch  0 taken 46942 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 46942
    #####: 5119:    return -1;
        -: 5120:    
        -: 5121:  /* Fix up RANGE if it might eventually take us outside
        -: 5122:     the virtual concatenation of STRING1 and STRING2.  */
    46942: 5123:  if (endpos < -1)
branch  0 taken 0 (fallthrough)
branch  1 taken 46942
    #####: 5124:    range = -1 - startpos;
    46942: 5125:  else if (endpos > total_size)
branch  0 taken 0 (fallthrough)
branch  1 taken 46942
    #####: 5126:    range = total_size - startpos;
        -: 5127:
        -: 5128:  /* If the search isn't to be a backwards one, don't waste time in a
        -: 5129:     search for a pattern that must be anchored.  */
    46942: 5130:  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
branch  0 taken 46942 (fallthrough)
branch  1 taken 0
branch  2 taken 11279 (fallthrough)
branch  3 taken 35663
branch  4 taken 7948 (fallthrough)
branch  5 taken 3331
        -: 5131:    {
     7948: 5132:      if (startpos > 0)
branch  0 taken 522 (fallthrough)
branch  1 taken 7426
      522: 5133:	return -1;
        -: 5134:      else
     7426: 5135:	range = 1;
        -: 5136:    }
        -: 5137:
        -: 5138:  /* Update the fastmap now if not correct already.  */
    46420: 5139:  if (fastmap && !bufp->fastmap_accurate)
branch  0 taken 46420 (fallthrough)
branch  1 taken 0
branch  2 taken 597 (fallthrough)
branch  3 taken 45823
      597: 5140:    if (re_compile_fastmap (bufp) == -2)
call    0 returned 597
branch  1 taken 0 (fallthrough)
branch  2 taken 597
    #####: 5141:      return -2;
        -: 5142:  
        -: 5143:  /* Loop through the string, looking for a place to start matching.  */
        -: 5144:  for (;;)
        -: 5145:    { 
        -: 5146:      /* If a fastmap is supplied, skip quickly over characters that
        -: 5147:         cannot be the start of a match.  If the pattern can match the
        -: 5148:         null string, however, we don't need to skip characters; we want
        -: 5149:         the first null string.  */
    81876: 5150:      if (fastmap && startpos < total_size && !bufp->can_be_null)
branch  0 taken 81876 (fallthrough)
branch  1 taken 0
branch  2 taken 64819 (fallthrough)
branch  3 taken 17057
branch  4 taken 59165 (fallthrough)
branch  5 taken 5654
        -: 5151:	{
    59165: 5152:	  if (range > 0)	/* Searching forwards.  */
branch  0 taken 58825 (fallthrough)
branch  1 taken 340
        -: 5153:	    {
        -: 5154:	      register const char *d;
    58825: 5155:	      register int lim = 0;
    58825: 5156:	      int irange = range;
        -: 5157:
   58825*: 5158:              if (startpos < size1 && startpos + range >= size1)
branch  0 taken 0 (fallthrough)
branch  1 taken 58825
branch  2 never executed
branch  3 never executed
    #####: 5159:                lim = range - (size1 - startpos);
        -: 5160:
   58825*: 5161:	      d = (startpos >= size1 ? string2 - size1 : string1) + startpos;
branch  0 taken 58825 (fallthrough)
branch  1 taken 0
        -: 5162:   
        -: 5163:              /* Written out as an if-else to avoid testing `translate'
        -: 5164:                 inside the loop.  */
    58825: 5165:	      if (translate)
branch  0 taken 0 (fallthrough)
branch  1 taken 58825
    #####: 5166:                while (range > lim
    #####: 5167:                       && !fastmap[(unsigned char)
branch  0 never executed
branch  1 never executed
    #####: 5168:				   translate[(unsigned char) *d++]])
branch  0 never executed
branch  1 never executed
    #####: 5169:                  range--;
        -: 5170:	      else
   489803: 5171:                while (range > lim && !fastmap[(unsigned char) *d++])
branch  0 taken 467644 (fallthrough)
branch  1 taken 22159
branch  2 taken 430978
branch  3 taken 36666 (fallthrough)
   430978: 5172:                  range--;
        -: 5173:
    58825: 5174:	      startpos += irange - range;
        -: 5175:	    }
        -: 5176:	  else				/* Searching backwards.  */
        -: 5177:	    {
     340*: 5178:	      register char c = (size1 == 0 || startpos >= size1
branch  0 taken 0 (fallthrough)
branch  1 taken 340
branch  2 never executed
branch  3 never executed
      340: 5179:                                 ? string2[startpos - size1] 
    #####: 5180:                                 : string1[startpos]);
        -: 5181:
     340*: 5182:	      if (!fastmap[(unsigned char) TRANSLATE (c)])
branch  0 taken 0 (fallthrough)
branch  1 taken 340
branch  2 taken 54 (fallthrough)
branch  3 taken 286
       54: 5183:		goto advance;
        -: 5184:	    }
        -: 5185:	}
        -: 5186:
        -: 5187:      /* If can't match the null string, and that's all we have left, fail.  */
    81822: 5188:      if (range >= 0 && startpos == total_size && fastmap
branch  0 taken 81822 (fallthrough)
branch  1 taken 0
branch  2 taken 35522 (fallthrough)
branch  3 taken 46300
branch  4 taken 35522 (fallthrough)
branch  5 taken 0
    35522: 5189:          && !bufp->can_be_null)
branch  0 taken 33976 (fallthrough)
branch  1 taken 1546
    33976: 5190:	return -1;
        -: 5191:
    47846: 5192:      val = re_match_2 (bufp, string1, size1, string2, size2,
call    0 returned 47846
        -: 5193:	                startpos, regs, stop);
    47846: 5194:      if (val >= 0)
branch  0 taken 5869 (fallthrough)
branch  1 taken 41977
     5869: 5195:	return startpos;
        -: 5196:        
    41977: 5197:      if (val == -2)
branch  0 taken 0 (fallthrough)
branch  1 taken 41977
    #####: 5198:	return -2;
        -: 5199:
    41977: 5200:    advance:
    42031: 5201:      if (!range) 
branch  0 taken 6575 (fallthrough)
branch  1 taken 35456
     6575: 5202:        break;
    35456: 5203:      else if (range > 0) 
branch  0 taken 35456 (fallthrough)
branch  1 taken 0
        -: 5204:        {
    35456: 5205:          range--; 
    35456: 5206:          startpos++;
        -: 5207:        }
        -: 5208:      else
        -: 5209:        {
    #####: 5210:          range++; 
    #####: 5211:          startpos--;
        -: 5212:        }
        -: 5213:    }
     6575: 5214:  return -1;
        -: 5215:} /* re_search_2 */
        -: 5216:
        -: 5217:/* Declarations and macros for re_match_2.  */
        -: 5218:
        -: 5219:static int bcmp_translate ();
        -: 5220:static boolean alt_match_null_string_p (),
        -: 5221:               common_op_match_null_string_p (),
        -: 5222:               group_match_null_string_p ();
        -: 5223:
        -: 5224:/* Structure for per-register (a.k.a. per-group) information.
        -: 5225:   This must not be longer than one word, because we push this value
        -: 5226:   onto the failure stack.  Other register information, such as the
        -: 5227:   starting and ending positions (which are addresses), and the list of
        -: 5228:   inner groups (which is a bits list) are maintained in separate
        -: 5229:   variables.  
        -: 5230:   
        -: 5231:   We are making a (strictly speaking) nonportable assumption here: that
        -: 5232:   the compiler will pack our bit fields into something that fits into
        -: 5233:   the type of `word', i.e., is something that fits into one item on the
        -: 5234:   failure stack.  */
        -: 5235:typedef union
        -: 5236:{
        -: 5237:  fail_stack_elt_t word;
        -: 5238:  struct
        -: 5239:  {
        -: 5240:      /* This field is one if this group can match the empty string,
        -: 5241:         zero if not.  If not yet determined,  `MATCH_NULL_UNSET_VALUE'.  */
        -: 5242:#define MATCH_NULL_UNSET_VALUE 3
        -: 5243:    unsigned match_null_string_p : 2;
        -: 5244:    unsigned is_active : 1;
        -: 5245:    unsigned matched_something : 1;
        -: 5246:    unsigned ever_matched_something : 1;
        -: 5247:  } bits;
        -: 5248:} register_info_type;
        -: 5249:
        -: 5250:#define REG_MATCH_NULL_STRING_P(R)  ((R).bits.match_null_string_p)
        -: 5251:#define IS_ACTIVE(R)  ((R).bits.is_active)
        -: 5252:#define MATCHED_SOMETHING(R)  ((R).bits.matched_something)
        -: 5253:#define EVER_MATCHED_SOMETHING(R)  ((R).bits.ever_matched_something)
        -: 5254:
        -: 5255:
        -: 5256:/* Call this when have matched a real character; it sets `matched' flags
        -: 5257:   for the subexpressions which we are currently inside.  Also records
        -: 5258:   that those subexprs have matched.  */
        -: 5259:#define SET_REGS_MATCHED()						\
        -: 5260:  do									\
        -: 5261:    {									\
        -: 5262:      unsigned r;							\
        -: 5263:      for (r = lowest_active_reg; r <= highest_active_reg; r++)		\
        -: 5264:        {								\
        -: 5265:          MATCHED_SOMETHING (reg_info[r])				\
        -: 5266:            = EVER_MATCHED_SOMETHING (reg_info[r])			\
        -: 5267:            = 1;							\
        -: 5268:        }								\
        -: 5269:    }									\
        -: 5270:  while (0)
        -: 5271:
        -: 5272:
        -: 5273:/* This converts PTR, a pointer into one of the search strings `string1'
        -: 5274:   and `string2' into an offset from the beginning of that string.  */
        -: 5275:#define POINTER_TO_OFFSET(ptr)						\
        -: 5276:  (FIRST_STRING_P (ptr) ? (ptr) - string1 : (ptr) - string2 + size1)
        -: 5277:
        -: 5278:/* Registers are set to a sentinel when they haven't yet matched.  */
        -: 5279:#define REG_UNSET_VALUE ((char *) -1)
        -: 5280:#define REG_UNSET(e) ((e) == REG_UNSET_VALUE)
        -: 5281:
        -: 5282:
        -: 5283:/* Macros for dealing with the split strings in re_match_2.  */
        -: 5284:
        -: 5285:#define MATCHING_IN_FIRST_STRING  (dend == end_match_1)
        -: 5286:
        -: 5287:/* Call before fetching a character with *d.  This switches over to
        -: 5288:   string2 if necessary.  */
        -: 5289:#define PREFETCH()							\
        -: 5290:  while (d == dend)						    	\
        -: 5291:    {									\
        -: 5292:      /* End of string2 => fail.  */					\
        -: 5293:      if (dend == end_match_2) 						\
        -: 5294:        goto fail;							\
        -: 5295:      /* End of string1 => advance to string2.  */ 			\
        -: 5296:      d = string2;						        \
        -: 5297:      dend = end_match_2;						\
        -: 5298:    }
        -: 5299:
        -: 5300:
        -: 5301:/* Test if at very beginning or at very end of the virtual concatenation
        -: 5302:   of `string1' and `string2'.  If only one string, it's `string2'.  */
        -: 5303:#define AT_STRINGS_BEG(d) ((d) == (size1 ? string1 : string2) || !size2)
        -: 5304:#define AT_STRINGS_END(d) ((d) == end2)	
        -: 5305:
        -: 5306:
        -: 5307:/* Test if D points to a character which is word-constituent.  We have
        -: 5308:   two special cases to check for: if past the end of string1, look at
        -: 5309:   the first character in string2; and if before the beginning of
        -: 5310:   string2, look at the last character in string1.  */
        -: 5311:#define WORDCHAR_P(d)							\
        -: 5312:  (SYNTAX ((d) == end1 ? *string2					\
        -: 5313:           : (d) == string2 - 1 ? *(end1 - 1) : *(d))			\
        -: 5314:   == Sword)
        -: 5315:
        -: 5316:/* Test if the character before D and the one at D differ with respect
        -: 5317:   to being word-constituent.  */
        -: 5318:#define AT_WORD_BOUNDARY(d)						\
        -: 5319:  (AT_STRINGS_BEG (d) || AT_STRINGS_END (d)				\
        -: 5320:   || WORDCHAR_P (d - 1) != WORDCHAR_P (d))
        -: 5321:
        -: 5322:
        -: 5323:/* Free everything we malloc.  */
        -: 5324:#ifdef REGEX_MALLOC
        -: 5325:#define FREE_VAR(var) if (var) free (var); var = NULL
        -: 5326:#define FREE_VARIABLES()						\
        -: 5327:  do {									\
        -: 5328:    FREE_VAR (fail_stack.stack);					\
        -: 5329:    FREE_VAR (regstart);						\
        -: 5330:    FREE_VAR (regend);							\
        -: 5331:    FREE_VAR (old_regstart);						\
        -: 5332:    FREE_VAR (old_regend);						\
        -: 5333:    FREE_VAR (best_regstart);						\
        -: 5334:    FREE_VAR (best_regend);						\
        -: 5335:    FREE_VAR (reg_info);						\
        -: 5336:    FREE_VAR (reg_dummy);						\
        -: 5337:    FREE_VAR (reg_info_dummy);						\
        -: 5338:  } while (0)
        -: 5339:#else /* not REGEX_MALLOC */
        -: 5340:/* Some MIPS systems (at least) want this to free alloca'd storage.  */
        -: 5341:#define FREE_VARIABLES() alloca (0)
        -: 5342:#endif /* not REGEX_MALLOC */
        -: 5343:
        -: 5344:
        -: 5345:/* These values must meet several constraints.  They must not be valid
        -: 5346:   register values; since we have a limit of 255 registers (because
        -: 5347:   we use only one byte in the pattern for the register number), we can
        -: 5348:   use numbers larger than 255.  They must differ by 1, because of
        -: 5349:   NUM_FAILURE_ITEMS above.  And the value for the lowest register must
        -: 5350:   be larger than the value for the highest register, so we do not try
        -: 5351:   to actually save any registers when none are active.  */
        -: 5352:#define NO_HIGHEST_ACTIVE_REG (1 << BYTEWIDTH)
        -: 5353:#define NO_LOWEST_ACTIVE_REG (NO_HIGHEST_ACTIVE_REG + 1)
        -: 5354:
        -: 5355:/* Matching routines.  */
        -: 5356:
        -: 5357:#ifndef emacs   /* Emacs never uses this.  */
        -: 5358:/* re_match is like re_match_2 except it takes only a single string.  */
        -: 5359:
        -: 5360:int
function re_match called 0 returned 0% blocks executed 0%
    #####: 5361:re_match (bufp, string, size, pos, regs)
        -: 5362:     struct re_pattern_buffer *bufp;
        -: 5363:     const char *string;
        -: 5364:     int size, pos;
        -: 5365:     struct re_registers *regs;
        -: 5366: {
    #####: 5367:  return re_match_2 (bufp, NULL, 0, string, size, pos, regs, size); 
call    0 never executed
        -: 5368:}
        -: 5369:#endif /* not emacs */
        -: 5370:
        -: 5371:
        -: 5372:/* re_match_2 matches the compiled pattern in BUFP against the
        -: 5373:   the (virtual) concatenation of STRING1 and STRING2 (of length SIZE1
        -: 5374:   and SIZE2, respectively).  We start matching at POS, and stop
        -: 5375:   matching at STOP.
        -: 5376:   
        -: 5377:   If REGS is non-null and the `no_sub' field of BUFP is nonzero, we
        -: 5378:   store offsets for the substring each group matched in REGS.  See the
        -: 5379:   documentation for exactly how many groups we fill.
        -: 5380:
        -: 5381:   We return -1 if no match, -2 if an internal error (such as the
        -: 5382:   failure stack overflowing).  Otherwise, we return the length of the
        -: 5383:   matched substring.  */
        -: 5384:
        -: 5385:int
function re_match_2 called 47846 returned 100% blocks executed 38%
    47846: 5386:re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)
        -: 5387:     struct re_pattern_buffer *bufp;
        -: 5388:     const char *string1, *string2;
        -: 5389:     int size1, size2;
        -: 5390:     int pos;
        -: 5391:     struct re_registers *regs;
        -: 5392:     int stop;
  1188050: 5393:{
        -: 5394:  /* General temporaries.  */
        -: 5395:  int mcnt;
        -: 5396:  unsigned char *p1;
        -: 5397:
        -: 5398:  /* Just past the end of the corresponding string.  */
        -: 5399:  const char *end1, *end2;
        -: 5400:
        -: 5401:  /* Pointers into string1 and string2, just past the last characters in
        -: 5402:     each to consider matching.  */
        -: 5403:  const char *end_match_1, *end_match_2;
        -: 5404:
        -: 5405:  /* Where we are in the data, and the end of the current string.  */
        -: 5406:  const char *d, *dend;
        -: 5407:  
        -: 5408:  /* Where we are in the pattern, and the end of the pattern.  */
    47846: 5409:  unsigned char *p = bufp->buffer;
    47846: 5410:  register unsigned char *pend = p + bufp->used;
        -: 5411:
        -: 5412:  /* We use this to map every character in the string.  */
    47846: 5413:  char *translate = bufp->translate;
        -: 5414:
        -: 5415:  /* Failure point stack.  Each place that can handle a failure further
        -: 5416:     down the line pushes a failure point on this stack.  It consists of
        -: 5417:     restart, regend, and reg_info for all registers corresponding to
        -: 5418:     the subexpressions we're currently inside, plus the number of such
        -: 5419:     registers, and, finally, two char *'s.  The first char * is where
        -: 5420:     to resume scanning the pattern; the second one is where to resume
        -: 5421:     scanning the strings.  If the latter is zero, the failure point is
        -: 5422:     a ``dummy''; if a failure happens and the failure point is a dummy,
        -: 5423:     it gets discarded and the next next one is tried.  */
        -: 5424:  fail_stack_type fail_stack;
        -: 5425:#ifdef DEBUG
        -: 5426:  static unsigned failure_id = 0;
        -: 5427:  unsigned nfailure_points_pushed = 0, nfailure_points_popped = 0;
        -: 5428:#endif
        -: 5429:
        -: 5430:  /* We fill all the registers internally, independent of what we
        -: 5431:     return, for use in backreferences.  The number here includes
        -: 5432:     an element for register zero.  */
    47846: 5433:  unsigned num_regs = bufp->re_nsub + 1;
        -: 5434:  
        -: 5435:  /* The currently active registers.  */
    47846: 5436:  unsigned lowest_active_reg = NO_LOWEST_ACTIVE_REG;
    47846: 5437:  unsigned highest_active_reg = NO_HIGHEST_ACTIVE_REG;
        -: 5438:
        -: 5439:  /* Information on the contents of registers. These are pointers into
        -: 5440:     the input strings; they record just what was matched (on this
        -: 5441:     attempt) by a subexpression part of the pattern, that is, the
        -: 5442:     regnum-th regstart pointer points to where in the pattern we began
        -: 5443:     matching and the regnum-th regend points to right after where we
        -: 5444:     stopped matching the regnum-th subexpression.  (The zeroth register
        -: 5445:     keeps track of what the whole pattern matches.)  */
        -: 5446:  const char **regstart, **regend;
        -: 5447:
        -: 5448:  /* If a group that's operated upon by a repetition operator fails to
        -: 5449:     match anything, then the register for its start will need to be
        -: 5450:     restored because it will have been set to wherever in the string we
        -: 5451:     are when we last see its open-group operator.  Similarly for a
        -: 5452:     register's end.  */
        -: 5453:  const char **old_regstart, **old_regend;
        -: 5454:
        -: 5455:  /* The is_active field of reg_info helps us keep track of which (possibly
        -: 5456:     nested) subexpressions we are currently in. The matched_something
        -: 5457:     field of reg_info[reg_num] helps us tell whether or not we have
        -: 5458:     matched any of the pattern so far this time through the reg_num-th
        -: 5459:     subexpression.  These two fields get reset each time through any
        -: 5460:     loop their register is in.  */
        -: 5461:  register_info_type *reg_info; 
        -: 5462:
        -: 5463:  /* The following record the register info as found in the above
        -: 5464:     variables when we find a match better than any we've seen before. 
        -: 5465:     This happens as we backtrack through the failure points, which in
        -: 5466:     turn happens only if we have not yet matched the entire string. */
    47846: 5467:  unsigned best_regs_set = false;
        -: 5468:  const char **best_regstart, **best_regend;
        -: 5469:  
        -: 5470:  /* Logically, this is `best_regend[0]'.  But we don't want to have to
        -: 5471:     allocate space for that if we're not allocating space for anything
        -: 5472:     else (see below).  Also, we never need info about register 0 for
        -: 5473:     any of the other register vectors, and it seems rather a kludge to
        -: 5474:     treat `best_regend' differently than the rest.  So we keep track of
        -: 5475:     the end of the best match so far in a separate variable.  We
        -: 5476:     initialize this to NULL so that when we backtrack the first time
        -: 5477:     and need to test it, it's not garbage.  */
    47846: 5478:  const char *match_end = NULL;
        -: 5479:
        -: 5480:  /* Used when we pop values we don't care about.  */
        -: 5481:  const char **reg_dummy;
        -: 5482:  register_info_type *reg_info_dummy;
        -: 5483:
        -: 5484:#ifdef DEBUG
        -: 5485:  /* Counts the total number of registers pushed.  */
        -: 5486:  unsigned num_regs_pushed = 0; 	
        -: 5487:#endif
        -: 5488:
        -: 5489:  DEBUG_PRINT1 ("\n\nEntering re_match_2.\n");
        -: 5490:  
   47846*: 5491:  INIT_FAIL_STACK ();
branch  0 taken 0 (fallthrough)
branch  1 taken 47846
        -: 5492:  
        -: 5493:  /* Do not bother to initialize all the register variables if there are
        -: 5494:     no groups in the pattern, as it takes a fair amount of time.  If
        -: 5495:     there are groups, we include space for register 0 (the whole
        -: 5496:     pattern), even though we never use it, since it simplifies the
        -: 5497:     array indexing.  We should fix this.  */
    47846: 5498:  if (bufp->re_nsub)
branch  0 taken 24 (fallthrough)
branch  1 taken 47822
        -: 5499:    {
       24: 5500:      regstart = REGEX_TALLOC (num_regs, const char *);
       24: 5501:      regend = REGEX_TALLOC (num_regs, const char *);
       24: 5502:      old_regstart = REGEX_TALLOC (num_regs, const char *);
       24: 5503:      old_regend = REGEX_TALLOC (num_regs, const char *);
       24: 5504:      best_regstart = REGEX_TALLOC (num_regs, const char *);
       24: 5505:      best_regend = REGEX_TALLOC (num_regs, const char *);
       24: 5506:      reg_info = REGEX_TALLOC (num_regs, register_info_type);
       24: 5507:      reg_dummy = REGEX_TALLOC (num_regs, const char *);
       24: 5508:      reg_info_dummy = REGEX_TALLOC (num_regs, register_info_type);
        -: 5509:
       48: 5510:      if (!(regstart && regend && old_regstart && old_regend && reg_info 
branch  0 taken 24 (fallthrough)
branch  1 taken 0
branch  2 taken 24 (fallthrough)
branch  3 taken 0
branch  4 taken 24 (fallthrough)
branch  5 taken 0
branch  6 taken 24 (fallthrough)
branch  7 taken 0
branch  8 taken 24 (fallthrough)
branch  9 taken 0
branch 10 taken 0 (fallthrough)
branch 11 taken 24
       24: 5511:            && best_regstart && best_regend && reg_dummy && reg_info_dummy)) 
branch  0 taken 24 (fallthrough)
branch  1 taken 0
branch  2 taken 24 (fallthrough)
branch  3 taken 0
branch  4 taken 24 (fallthrough)
branch  5 taken 0
        -: 5512:        {
    #####: 5513:          FREE_VARIABLES ();
    #####: 5514:          return -2;
        -: 5515:        }
        -: 5516:    }
        -: 5517:#ifdef REGEX_MALLOC
        -: 5518:  else
        -: 5519:    {
        -: 5520:      /* We must initialize all our variables to NULL, so that
        -: 5521:         `FREE_VARIABLES' doesn't try to free them.  */
        -: 5522:      regstart = regend = old_regstart = old_regend = best_regstart
        -: 5523:        = best_regend = reg_dummy = NULL;
        -: 5524:      reg_info = reg_info_dummy = (register_info_type *) NULL;
        -: 5525:    }
        -: 5526:#endif /* REGEX_MALLOC */
        -: 5527:
        -: 5528:  /* The starting position is bogus.  */
    47846: 5529:  if (pos < 0 || pos > size1 + size2)
branch  0 taken 47846 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 47846
        -: 5530:    {
    #####: 5531:      FREE_VARIABLES ();
    #####: 5532:      return -1;
        -: 5533:    }
        -: 5534:    
        -: 5535:  /* Initialize subexpression text positions to -1 to mark ones that no
        -: 5536:     start_memory/stop_memory has been seen for. Also initialize the
        -: 5537:     register information struct.  */
    47902: 5538:  for (mcnt = 1; mcnt < num_regs; mcnt++)
branch  0 taken 56
branch  1 taken 47846 (fallthrough)
        -: 5539:    {
       56: 5540:      regstart[mcnt] = regend[mcnt] 
       56: 5541:        = old_regstart[mcnt] = old_regend[mcnt] = REG_UNSET_VALUE;
        -: 5542:        
       56: 5543:      REG_MATCH_NULL_STRING_P (reg_info[mcnt]) = MATCH_NULL_UNSET_VALUE;
       56: 5544:      IS_ACTIVE (reg_info[mcnt]) = 0;
       56: 5545:      MATCHED_SOMETHING (reg_info[mcnt]) = 0;
       56: 5546:      EVER_MATCHED_SOMETHING (reg_info[mcnt]) = 0;
        -: 5547:    }
        -: 5548:  
        -: 5549:  /* We move `string1' into `string2' if the latter's empty -- but not if
        -: 5550:     `string1' is null.  */
    47846: 5551:  if (size2 == 0 && string1 != NULL)
branch  0 taken 1344 (fallthrough)
branch  1 taken 46502
branch  2 taken 0 (fallthrough)
branch  3 taken 1344
        -: 5552:    {
    #####: 5553:      string2 = string1;
    #####: 5554:      size2 = size1;
    #####: 5555:      string1 = 0;
    #####: 5556:      size1 = 0;
        -: 5557:    }
    47846: 5558:  end1 = string1 + size1;
    47846: 5559:  end2 = string2 + size2;
        -: 5560:
        -: 5561:  /* Compute where to stop matching, within the two strings.  */
    47846: 5562:  if (stop <= size1)
branch  0 taken 1344 (fallthrough)
branch  1 taken 46502
        -: 5563:    {
     1344: 5564:      end_match_1 = string1 + stop;
     1344: 5565:      end_match_2 = string2;
        -: 5566:    }
        -: 5567:  else
        -: 5568:    {
    46502: 5569:      end_match_1 = end1;
    46502: 5570:      end_match_2 = string2 + stop - size1;
        -: 5571:    }
        -: 5572:
        -: 5573:  /* `p' scans through the pattern as `d' scans through the data. 
        -: 5574:     `dend' is the end of the input string that `d' points within.  `d'
        -: 5575:     is advanced into the following input string whenever necessary, but
        -: 5576:     this happens before fetching; therefore, at the beginning of the
        -: 5577:     loop, `d' can be pointing at the end of a string, but it cannot
        -: 5578:     equal `string2'.  */
   47846*: 5579:  if (size1 > 0 && pos <= size1)
branch  0 taken 0 (fallthrough)
branch  1 taken 47846
branch  2 never executed
branch  3 never executed
        -: 5580:    {
    #####: 5581:      d = string1 + pos;
    #####: 5582:      dend = end_match_1;
        -: 5583:    }
        -: 5584:  else
        -: 5585:    {
    47846: 5586:      d = string2 + pos - size1;
    47846: 5587:      dend = end_match_2;
        -: 5588:    }
        -: 5589:
        -: 5590:  DEBUG_PRINT1 ("The compiled pattern is: ");
        -: 5591:  DEBUG_PRINT_COMPILED_PATTERN (bufp, p, pend);
        -: 5592:  DEBUG_PRINT1 ("The string to match is: `");
        -: 5593:  DEBUG_PRINT_DOUBLE_STRING (d, string1, size1, string2, size2);
        -: 5594:  DEBUG_PRINT1 ("'\n");
        -: 5595:  
        -: 5596:  /* This loops over pattern commands.  It exits by returning from the
        -: 5597:     function if the match is complete, or it drops through if the match
        -: 5598:     fails at this starting point in the input data.  */
        -: 5599:  for (;;)
        -: 5600:    {
        -: 5601:      DEBUG_PRINT2 ("\n0x%x: ", p);
        -: 5602:
  1622978: 5603:      if (p == pend)
branch  0 taken 5950 (fallthrough)
branch  1 taken 1617028
        -: 5604:	{ /* End of pattern means we might have succeeded.  */
        -: 5605:          DEBUG_PRINT1 ("end of pattern ... ");
        -: 5606:          
        -: 5607:	  /* If we haven't matched the entire string, and we want the
        -: 5608:             longest match, try backtracking.  */
     5950: 5609:          if (d != end_match_2)
branch  0 taken 3224 (fallthrough)
branch  1 taken 2726
        -: 5610:	    {
        -: 5611:              DEBUG_PRINT1 ("backtracking.\n");
        -: 5612:              
     3224: 5613:              if (!FAIL_STACK_EMPTY ())
branch  0 taken 132 (fallthrough)
branch  1 taken 3092
        -: 5614:                { /* More failure points to try.  */
     132*: 5615:                  boolean same_str_p = (FIRST_STRING_P (match_end) 
branch  0 taken 0 (fallthrough)
branch  1 taken 132
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
      132: 5616:	        	                == MATCHING_IN_FIRST_STRING);
        -: 5617:
        -: 5618:                  /* If exceeds best match so far, save it.  */
      132: 5619:                  if (!best_regs_set
branch  0 taken 75 (fallthrough)
branch  1 taken 57
       75: 5620:                      || (same_str_p && d > match_end)
branch  0 taken 75 (fallthrough)
branch  1 taken 0
branch  2 taken 75 (fallthrough)
branch  3 taken 0
      75*: 5621:                      || (!same_str_p && !MATCHING_IN_FIRST_STRING))
branch  0 taken 0 (fallthrough)
branch  1 taken 75
branch  2 never executed
branch  3 never executed
        -: 5622:                    {
       57: 5623:                      best_regs_set = true;
       57: 5624:                      match_end = d;
        -: 5625:                      
        -: 5626:                      DEBUG_PRINT1 ("\nSAVING match as best so far.\n");
        -: 5627:                      
      57*: 5628:                      for (mcnt = 1; mcnt < num_regs; mcnt++)
branch  0 taken 0
branch  1 taken 57 (fallthrough)
        -: 5629:                        {
    #####: 5630:                          best_regstart[mcnt] = regstart[mcnt];
    #####: 5631:                          best_regend[mcnt] = regend[mcnt];
        -: 5632:                        }
        -: 5633:                    }
      132: 5634:                  goto fail;	       
        -: 5635:                }
        -: 5636:
        -: 5637:              /* If no failure points, don't restore garbage.  */
     3092: 5638:              else if (best_regs_set)   
branch  0 taken 6 (fallthrough)
branch  1 taken 3086
        -: 5639:                {
        6: 5640:  	        restore_best_regs:
        -: 5641:                  /* Restore best match.  It may happen that `dend ==
        -: 5642:                     end_match_1' while the restored d is in string2.
        -: 5643:                     For example, the pattern `x.*y.*z' against the
        -: 5644:                     strings `x-' and `y-z-', if the two strings are
        -: 5645:                     not consecutive in memory.  */
        -: 5646:                  DEBUG_PRINT1 ("Restoring best registers.\n");
        -: 5647:                  
       57: 5648:                  d = match_end;
       57: 5649:                  dend = ((d >= string1 && d <= end1)
branch  0 taken 0 (fallthrough)
branch  1 taken 57
     114*: 5650:		           ? end_match_1 : end_match_2);
branch  0 taken 57 (fallthrough)
branch  1 taken 0
        -: 5651:
      57*: 5652:		  for (mcnt = 1; mcnt < num_regs; mcnt++)
branch  0 taken 0
branch  1 taken 57 (fallthrough)
        -: 5653:		    {
    #####: 5654:		      regstart[mcnt] = best_regstart[mcnt];
    #####: 5655:		      regend[mcnt] = best_regend[mcnt];
        -: 5656:		    }
        -: 5657:                }
        -: 5658:            } /* d != end_match_2 */
        -: 5659:
        -: 5660:          DEBUG_PRINT1 ("Accepting match.\n");
        -: 5661:
        -: 5662:          /* If caller wants register contents data back, do it.  */
     5869: 5663:          if (regs && !bufp->no_sub)
branch  0 taken 3588 (fallthrough)
branch  1 taken 2281
branch  2 taken 3588 (fallthrough)
branch  3 taken 0
        -: 5664:	    {
        -: 5665:              /* Have the register data arrays been allocated?  */
     3588: 5666:              if (bufp->regs_allocated == REGS_UNALLOCATED)
branch  0 taken 204 (fallthrough)
branch  1 taken 3384
        -: 5667:                { /* No.  So allocate them with malloc.  We need one
        -: 5668:                     extra element beyond `num_regs' for the `-1' marker
        -: 5669:                     GNU code uses.  */
      204: 5670:                  regs->num_regs = MAX (RE_NREGS, num_regs + 1);
      204: 5671:                  regs->start = TALLOC (regs->num_regs, regoff_t);
      204: 5672:                  regs->end = TALLOC (regs->num_regs, regoff_t);
      204: 5673:                  if (regs->start == NULL || regs->end == NULL)
branch  0 taken 204 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 204
    #####: 5674:                    return -2;
      204: 5675:                  bufp->regs_allocated = REGS_REALLOCATE;
        -: 5676:                }
     3384: 5677:              else if (bufp->regs_allocated == REGS_REALLOCATE)
branch  0 taken 3384 (fallthrough)
branch  1 taken 0
        -: 5678:                { /* Yes.  If we need more elements than were already
        -: 5679:                     allocated, reallocate them.  If we need fewer, just
        -: 5680:                     leave it alone.  */
     3384: 5681:                  if (regs->num_regs < num_regs + 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 3384
        -: 5682:                    {
    #####: 5683:                      regs->num_regs = num_regs + 1;
    #####: 5684:                      RETALLOC (regs->start, regs->num_regs, regoff_t);
    #####: 5685:                      RETALLOC (regs->end, regs->num_regs, regoff_t);
    #####: 5686:                      if (regs->start == NULL || regs->end == NULL)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5687:                        return -2;
        -: 5688:                    }
        -: 5689:                }
        -: 5690:              else
        -: 5691:                assert (bufp->regs_allocated == REGS_FIXED);
        -: 5692:
        -: 5693:              /* Convert the pointer data in `regstart' and `regend' to
        -: 5694:                 indices.  Register zero has to be set differently,
        -: 5695:                 since we haven't kept track of any info for it.  */
     3588: 5696:              if (regs->num_regs > 0)
branch  0 taken 3588 (fallthrough)
branch  1 taken 0
        -: 5697:                {
     3588: 5698:                  regs->start[0] = pos;
    7176*: 5699:                  regs->end[0] = (MATCHING_IN_FIRST_STRING ? d - string1
branch  0 taken 0 (fallthrough)
branch  1 taken 3588
     3588: 5700:			          : d - string2 + size1);
        -: 5701:                }
        -: 5702:              
        -: 5703:              /* Go through the first `min (num_regs, regs->num_regs)'
        -: 5704:                 registers, since that is all we initialized.  */
     3600: 5705:	      for (mcnt = 1; mcnt < MIN (num_regs, regs->num_regs); mcnt++)
branch  0 taken 12
branch  1 taken 3588 (fallthrough)
        -: 5706:		{
       12: 5707:                  if (REG_UNSET (regstart[mcnt]) || REG_UNSET (regend[mcnt]))
branch  0 taken 12 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 12
    #####: 5708:                    regs->start[mcnt] = regs->end[mcnt] = -1;
        -: 5709:                  else
        -: 5710:                    {
      12*: 5711:		      regs->start[mcnt] = POINTER_TO_OFFSET (regstart[mcnt]);
branch  0 taken 0 (fallthrough)
branch  1 taken 12
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
      12*: 5712:                      regs->end[mcnt] = POINTER_TO_OFFSET (regend[mcnt]);
branch  0 taken 0 (fallthrough)
branch  1 taken 12
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 5713:                    }
        -: 5714:		}
        -: 5715:              
        -: 5716:              /* If the regs structure we return has more elements than
        -: 5717:                 were in the pattern, set the extra elements to -1.  If
        -: 5718:                 we (re)allocated the registers, this is the case,
        -: 5719:                 because we always allocate enough to have at least one
        -: 5720:                 -1 at the end.  */
   107628: 5721:              for (mcnt = num_regs; mcnt < regs->num_regs; mcnt++)
branch  0 taken 104040
branch  1 taken 3588 (fallthrough)
   104040: 5722:                regs->start[mcnt] = regs->end[mcnt] = -1;
        -: 5723:	    } /* regs && !bufp->no_sub */
        -: 5724:
     5869: 5725:          FREE_VARIABLES ();
        -: 5726:          DEBUG_PRINT4 ("%u failure points pushed, %u popped (%u remain).\n",
        -: 5727:                        nfailure_points_pushed, nfailure_points_popped,
        -: 5728:                        nfailure_points_pushed - nfailure_points_popped);
        -: 5729:          DEBUG_PRINT2 ("%u registers pushed.\n", num_regs_pushed);
        -: 5730:
    11738: 5731:          mcnt = d - pos - (MATCHING_IN_FIRST_STRING 
        -: 5732:			    ? string1 
    5869*: 5733:			    : string2 - size1);
branch  0 taken 5869 (fallthrough)
branch  1 taken 0
        -: 5734:
        -: 5735:          DEBUG_PRINT2 ("Returning %d from re_match_2.\n", mcnt);
        -: 5736:
     5869: 5737:          return mcnt;
        -: 5738:        }
        -: 5739:
        -: 5740:      /* Otherwise match next pattern command.  */
        -: 5741:#ifdef SWITCH_ENUM_BUG
        -: 5742:      switch ((int) ((re_opcode_t) *p++))
        -: 5743:#else
  1617028: 5744:      switch ((re_opcode_t) *p++)
branch  0 taken 144
branch  1 taken 394876
branch  2 taken 409489
branch  3 taken 2759
branch  4 taken 31
branch  5 taken 259
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 11418
branch 10 taken 6843
branch 11 taken 0
branch 12 taken 409489
branch 13 taken 116
branch 14 taken 13033
branch 15 taken 368205
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 144
branch 20 taken 78
branch 21 taken 144
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
branch 28 taken 0
        -: 5745:#endif
        -: 5746:	{
        -: 5747:        /* Ignore these.  Used to ignore the n of succeed_n's which
        -: 5748:           currently have n == 0.  */
      144: 5749:        case no_op:
        -: 5750:          DEBUG_PRINT1 ("EXECUTING no_op.\n");
      144: 5751:          break;
        -: 5752:
        -: 5753:
        -: 5754:        /* Match the next n pattern characters exactly.  The following
        -: 5755:           byte in the pattern defines n, and the n bytes after that
        -: 5756:           are the characters to match.  */
   394876: 5757:	case exactn:
   394876: 5758:	  mcnt = *p++;
        -: 5759:          DEBUG_PRINT2 ("EXECUTING exactn %d.\n", mcnt);
        -: 5760:
        -: 5761:          /* This is written out as an if-else so we don't waste time
        -: 5762:             testing `translate' inside the loop.  */
   394876: 5763:          if (translate)
branch  0 taken 0 (fallthrough)
branch  1 taken 394876
        -: 5764:	    {
        -: 5765:	      do
        -: 5766:		{
    #####: 5767:		  PREFETCH ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5768:		  if (translate[(unsigned char) *d++] != (char) *p++)
branch  0 never executed
branch  1 never executed
    #####: 5769:                    goto fail;
        -: 5770:		}
    #####: 5771:	      while (--mcnt);
branch  0 never executed
branch  1 never executed
        -: 5772:	    }
        -: 5773:	  else
        -: 5774:	    {
        -: 5775:	      do
        -: 5776:		{
  407084*: 5777:		  PREFETCH ();
branch  0 taken 28157 (fallthrough)
branch  1 taken 0
branch  2 taken 28157
branch  3 taken 378927 (fallthrough)
   378927: 5778:		  if (*d++ != (char) *p++) goto fail;
branch  0 taken 359382 (fallthrough)
branch  1 taken 19545
        -: 5779:		}
    19545: 5780:	      while (--mcnt);
branch  0 taken 12208
branch  1 taken 7337 (fallthrough)
        -: 5781:	    }
    7337*: 5782:	  SET_REGS_MATCHED ();
branch  0 taken 0
branch  1 taken 7337 (fallthrough)
     7337: 5783:          break;
        -: 5784:
        -: 5785:
        -: 5786:        /* Match any character except possibly a newline or a null.  */
   409489: 5787:	case anychar:
        -: 5788:          DEBUG_PRINT1 ("EXECUTING anychar.\n");
        -: 5789:
  409489*: 5790:          PREFETCH ();
branch  0 taken 28135 (fallthrough)
branch  1 taken 0
branch  2 taken 28135
branch  3 taken 381354 (fallthrough)
        -: 5791:
  762708*: 5792:          if ((!(bufp->syntax & RE_DOT_NEWLINE) && TRANSLATE (*d) == '\n')
branch  0 taken 0 (fallthrough)
branch  1 taken 381354
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0 (fallthrough)
branch  9 taken 381354
  762708*: 5793:              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\000'))
branch  0 taken 381354 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
branch  4 taken 0 (fallthrough)
branch  5 taken 381354
    #####: 5794:	    goto fail;
        -: 5795:
   381732: 5796:          SET_REGS_MATCHED ();
branch  0 taken 378
branch  1 taken 381354 (fallthrough)
        -: 5797:          DEBUG_PRINT2 ("  Matched `%d'.\n", *d);
   381354: 5798:          d++;
   381354: 5799:	  break;
        -: 5800:
        -: 5801:
     2759: 5802:	case charset:
        -: 5803:	case charset_not:
        -: 5804:	  {
        -: 5805:	    register unsigned char c;
     2759: 5806:	    boolean not = (re_opcode_t) *(p - 1) == charset_not;
        -: 5807:
        -: 5808:            DEBUG_PRINT2 ("EXECUTING charset%s.\n", not ? "_not" : "");
        -: 5809:
    2759*: 5810:	    PREFETCH ();
branch  0 taken 127 (fallthrough)
branch  1 taken 0
branch  2 taken 127
branch  3 taken 2632 (fallthrough)
    2632*: 5811:	    c = TRANSLATE (*d); /* The character to match.  */
branch  0 taken 0 (fallthrough)
branch  1 taken 2632
        -: 5812:
        -: 5813:            /* Cast to `unsigned' instead of `unsigned char' in case the
        -: 5814:               bit list is a full 32 bytes long.  */
     2632: 5815:	    if (c < (unsigned) (*p * BYTEWIDTH)
branch  0 taken 2566 (fallthrough)
branch  1 taken 66
     2566: 5816:		&& p[1 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
branch  0 taken 835 (fallthrough)
branch  1 taken 1731
      835: 5817:	      not = !not;
        -: 5818:
     2632: 5819:	    p += 1 + *p;
        -: 5820:
     2632: 5821:	    if (!not) goto fail;
branch  0 taken 974 (fallthrough)
branch  1 taken 1658
        -: 5822:            
    1658*: 5823:	    SET_REGS_MATCHED ();
branch  0 taken 0
branch  1 taken 1658 (fallthrough)
     1658: 5824:            d++;
     1658: 5825:	    break;
        -: 5826:	  }
        -: 5827:
        -: 5828:
        -: 5829:        /* The beginning of a group is represented by start_memory.
        -: 5830:           The arguments are the register number in the next byte, and the
        -: 5831:           number of groups inner to this one in the next.  The text
        -: 5832:           matched within the group is recorded (in the internal
        -: 5833:           registers data structure) under the register number.  */
       31: 5834:        case start_memory:
        -: 5835:	  DEBUG_PRINT3 ("EXECUTING start_memory %d (%d):\n", *p, p[1]);
        -: 5836:
        -: 5837:          /* Find out if this group can match the empty string.  */
       31: 5838:	  p1 = p;		/* To send to group_match_null_string_p.  */
        -: 5839:          
       31: 5840:          if (REG_MATCH_NULL_STRING_P (reg_info[*p]) == MATCH_NULL_UNSET_VALUE)
branch  0 taken 30 (fallthrough)
branch  1 taken 1
       30: 5841:            REG_MATCH_NULL_STRING_P (reg_info[*p]) 
       30: 5842:              = group_match_null_string_p (&p1, pend, reg_info);
call    0 returned 30
        -: 5843:
        -: 5844:          /* Save the position in the string where we were the last time
        -: 5845:             we were at this open-group operator in case the group is
        -: 5846:             operated upon by a repetition operator, e.g., with `(a*)*b'
        -: 5847:             against `ab'; then we want to ignore where we are now in
        -: 5848:             the string in case this attempt to match fails.  */
       62: 5849:          old_regstart[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
    #####: 5850:                             ? REG_UNSET (regstart[*p]) ? d : regstart[*p]
branch  0 never executed
branch  1 never executed
      31*: 5851:                             : regstart[*p];
branch  0 taken 0 (fallthrough)
branch  1 taken 31
        -: 5852:	  DEBUG_PRINT2 ("  old_regstart: %d\n", 
        -: 5853:			 POINTER_TO_OFFSET (old_regstart[*p]));
        -: 5854:
       31: 5855:          regstart[*p] = d;
        -: 5856:	  DEBUG_PRINT2 ("  regstart: %d\n", POINTER_TO_OFFSET (regstart[*p]));
        -: 5857:
       31: 5858:          IS_ACTIVE (reg_info[*p]) = 1;
       31: 5859:          MATCHED_SOMETHING (reg_info[*p]) = 0;
        -: 5860:          
        -: 5861:          /* This is the new highest active register.  */
       31: 5862:          highest_active_reg = *p;
        -: 5863:          
        -: 5864:          /* If nothing was active before, this is the new lowest active
        -: 5865:             register.  */
       31: 5866:          if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
branch  0 taken 31 (fallthrough)
branch  1 taken 0
       31: 5867:            lowest_active_reg = *p;
        -: 5868:
        -: 5869:          /* Move past the register number and inner group count.  */
       31: 5870:          p += 2;
       31: 5871:          break;
        -: 5872:
        -: 5873:
        -: 5874:        /* The stop_memory opcode represents the end of a group.  Its
        -: 5875:           arguments are the same as start_memory's: the register
        -: 5876:           number, and the number of inner groups.  */
      259: 5877:	case stop_memory:
        -: 5878:	  DEBUG_PRINT3 ("EXECUTING stop_memory %d (%d):\n", *p, p[1]);
        -: 5879:             
        -: 5880:          /* We need to save the string position the last time we were at
        -: 5881:             this close-group operator in case the group is operated
        -: 5882:             upon by a repetition operator, e.g., with `((a*)*(b*)*)*'
        -: 5883:             against `aba'; then we want to ignore where we are now in
        -: 5884:             the string in case this attempt to match fails.  */
      518: 5885:          old_regend[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
    #####: 5886:                           ? REG_UNSET (regend[*p]) ? d : regend[*p]
branch  0 never executed
branch  1 never executed
     259*: 5887:			   : regend[*p];
branch  0 taken 0 (fallthrough)
branch  1 taken 259
        -: 5888:	  DEBUG_PRINT2 ("      old_regend: %d\n", 
        -: 5889:			 POINTER_TO_OFFSET (old_regend[*p]));
        -: 5890:
      259: 5891:          regend[*p] = d;
        -: 5892:	  DEBUG_PRINT2 ("      regend: %d\n", POINTER_TO_OFFSET (regend[*p]));
        -: 5893:
        -: 5894:          /* This register isn't active anymore.  */
      259: 5895:          IS_ACTIVE (reg_info[*p]) = 0;
        -: 5896:          
        -: 5897:          /* If this was the only register active, nothing is active
        -: 5898:             anymore.  */
      259: 5899:          if (lowest_active_reg == highest_active_reg)
branch  0 taken 259 (fallthrough)
branch  1 taken 0
        -: 5900:            {
      259: 5901:              lowest_active_reg = NO_LOWEST_ACTIVE_REG;
      259: 5902:              highest_active_reg = NO_HIGHEST_ACTIVE_REG;
        -: 5903:            }
        -: 5904:          else
        -: 5905:            { /* We must scan for the new highest active register, since
        -: 5906:                 it isn't necessarily one less than now: consider
        -: 5907:                 (a(b)c(d(e)f)g).  When group 3 ends, after the f), the
        -: 5908:                 new highest active register is 1.  */
    #####: 5909:              unsigned char r = *p - 1;
    #####: 5910:              while (r > 0 && !IS_ACTIVE (reg_info[r]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5911:                r--;
        -: 5912:              
        -: 5913:              /* If we end up at register zero, that means that we saved
        -: 5914:                 the registers as the result of an `on_failure_jump', not
        -: 5915:                 a `start_memory', and we jumped to past the innermost
        -: 5916:                 `stop_memory'.  For example, in ((.)*) we save
        -: 5917:                 registers 1 and 2 as a result of the *, but when we pop
        -: 5918:                 back to the second ), we are at the stop_memory 1.
        -: 5919:                 Thus, nothing is active.  */
    #####: 5920:	      if (r == 0)
branch  0 never executed
branch  1 never executed
        -: 5921:                {
    #####: 5922:                  lowest_active_reg = NO_LOWEST_ACTIVE_REG;
    #####: 5923:                  highest_active_reg = NO_HIGHEST_ACTIVE_REG;
        -: 5924:                }
        -: 5925:              else
    #####: 5926:                highest_active_reg = r;
        -: 5927:            }
        -: 5928:          
        -: 5929:          /* If just failed to match something this time around with a
        -: 5930:             group that's operated on by a repetition operator, try to
        -: 5931:             force exit from the ``loop'', and restore the register
        -: 5932:             information for this group that we had before trying this
        -: 5933:             last match.  */
      259: 5934:          if ((!MATCHED_SOMETHING (reg_info[*p])
branch  0 taken 240 (fallthrough)
branch  1 taken 19
      240: 5935:               || (re_opcode_t) p[-3] == start_memory)
branch  0 taken 0 (fallthrough)
branch  1 taken 240
       19: 5936:	      && (p + 2) < pend)              
branch  0 taken 19 (fallthrough)
branch  1 taken 0
        -: 5937:            {
       19: 5938:              boolean is_a_jump_n = false;
        -: 5939:              
       19: 5940:              p1 = p + 2;
       19: 5941:              mcnt = 0;
       19: 5942:              switch ((re_opcode_t) *p1++)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 19
        -: 5943:                {
    #####: 5944:                  case jump_n:
    #####: 5945:		    is_a_jump_n = true;
    #####: 5946:                  case pop_failure_jump:
        -: 5947:		  case maybe_pop_jump:
        -: 5948:		  case jump:
        -: 5949:		  case dummy_failure_jump:
    #####: 5950:                    EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####: 5951:		    if (is_a_jump_n)
branch  0 never executed
branch  1 never executed
    #####: 5952:		      p1 += 2;
    #####: 5953:                    break;
        -: 5954:                  
       19: 5955:                  default:
        -: 5956:                    /* do nothing */ ;
        -: 5957:                }
       19: 5958:	      p1 += mcnt;
        -: 5959:        
        -: 5960:              /* If the next operation is a jump backwards in the pattern
        -: 5961:	         to an on_failure_jump right before the start_memory
        -: 5962:                 corresponding to this stop_memory, exit from the loop
        -: 5963:                 by forcing a failure after pushing on the stack the
        -: 5964:                 on_failure_jump's jump in the pattern, and d.  */
      19*: 5965:              if (mcnt < 0 && (re_opcode_t) *p1 == on_failure_jump
branch  0 taken 0 (fallthrough)
branch  1 taken 19
branch  2 never executed
branch  3 never executed
    #####: 5966:                  && (re_opcode_t) p1[3] == start_memory && p1[4] == *p)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 5967:		{
        -: 5968:                  /* If this group ever matched anything, then restore
        -: 5969:                     what its registers were before trying this last
        -: 5970:                     failed match, e.g., with `(a*)*b' against `ab' for
        -: 5971:                     regstart[1], and, e.g., with `((a*)*(b*)*)*'
        -: 5972:                     against `aba' for regend[3].
        -: 5973:                     
        -: 5974:                     Also restore the registers for inner groups for,
        -: 5975:                     e.g., `((a*)(b*))*' against `aba' (register 3 would
        -: 5976:                     otherwise get trashed).  */
        -: 5977:                     
    #####: 5978:                  if (EVER_MATCHED_SOMETHING (reg_info[*p]))
branch  0 never executed
branch  1 never executed
        -: 5979:		    {
        -: 5980:		      unsigned r; 
        -: 5981:        
    #####: 5982:                      EVER_MATCHED_SOMETHING (reg_info[*p]) = 0;
        -: 5983:                      
        -: 5984:		      /* Restore this and inner groups' (if any) registers.  */
    #####: 5985:                      for (r = *p; r < *p + *(p + 1); r++)
branch  0 never executed
branch  1 never executed
        -: 5986:                        {
    #####: 5987:                          regstart[r] = old_regstart[r];
        -: 5988:
        -: 5989:                          /* xx why this test?  */
    #####: 5990:                          if ((int) old_regend[r] >= (int) regstart[r])
branch  0 never executed
branch  1 never executed
    #####: 5991:                            regend[r] = old_regend[r];
        -: 5992:                        }     
        -: 5993:                    }
    #####: 5994:		  p1++;
    #####: 5995:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####: 5996:                  PUSH_FAILURE_POINT (p1 + mcnt, d, -2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 5997:
    #####: 5998:                  goto fail;
        -: 5999:                }
        -: 6000:            }
        -: 6001:          
        -: 6002:          /* Move past the register number and the inner group count.  */
      259: 6003:          p += 2;
      259: 6004:          break;
        -: 6005:
        -: 6006:
        -: 6007:	/* \<digit> has been turned into a `duplicate' command which is
        -: 6008:           followed by the numeric value of <digit> as the register number.  */
    #####: 6009:        case duplicate:
        -: 6010:	  {
        -: 6011:	    register const char *d2, *dend2;
    #####: 6012:	    int regno = *p++;   /* Get which register to match against.  */
        -: 6013:	    DEBUG_PRINT2 ("EXECUTING duplicate %d.\n", regno);
        -: 6014:
        -: 6015:	    /* Can't back reference a group which we've never matched.  */
    #####: 6016:            if (REG_UNSET (regstart[regno]) || REG_UNSET (regend[regno]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6017:              goto fail;
        -: 6018:              
        -: 6019:            /* Where in input to try to start matching.  */
    #####: 6020:            d2 = regstart[regno];
        -: 6021:            
        -: 6022:            /* Where to stop matching; if both the place to start and
        -: 6023:               the place to stop matching are in the same string, then
        -: 6024:               set to the place to stop, otherwise, for now have to use
        -: 6025:               the end of the first string.  */
        -: 6026:
    #####: 6027:            dend2 = ((FIRST_STRING_P (regstart[regno]) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6028:		      == FIRST_STRING_P (regend[regno]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6029:		     ? regend[regno] : end_match_1);
branch  0 never executed
branch  1 never executed
        -: 6030:	    for (;;)
        -: 6031:	      {
        -: 6032:		/* If necessary, advance to next segment in register
        -: 6033:                   contents.  */
    #####: 6034:		while (d2 == dend2)
branch  0 never executed
branch  1 never executed
        -: 6035:		  {
    #####: 6036:		    if (dend2 == end_match_2) break;
branch  0 never executed
branch  1 never executed
    #####: 6037:		    if (dend2 == regend[regno]) break;
branch  0 never executed
branch  1 never executed
        -: 6038:
        -: 6039:                    /* End of string1 => advance to string2. */
    #####: 6040:                    d2 = string2;
    #####: 6041:                    dend2 = regend[regno];
        -: 6042:		  }
        -: 6043:		/* At end of register contents => success */
    #####: 6044:		if (d2 == dend2) break;
branch  0 never executed
branch  1 never executed
        -: 6045:
        -: 6046:		/* If necessary, advance to next segment in data.  */
    #####: 6047:		PREFETCH ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 6048:
        -: 6049:		/* How many characters left in this segment to match.  */
    #####: 6050:		mcnt = dend - d;
        -: 6051:                
        -: 6052:		/* Want how many consecutive characters we can match in
        -: 6053:                   one shot, so, if necessary, adjust the count.  */
    #####: 6054:                if (mcnt > dend2 - d2)
branch  0 never executed
branch  1 never executed
    #####: 6055:		  mcnt = dend2 - d2;
        -: 6056:                  
        -: 6057:		/* Compare that many; failure if mismatch, else move
        -: 6058:                   past them.  */
    #####: 6059:		if (translate 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6060:                    ? bcmp_translate (d, d2, mcnt, translate) 
call    0 never executed
    #####: 6061:                    : bcmp (d, d2, mcnt))
    #####: 6062:		  goto fail;
    #####: 6063:		d += mcnt, d2 += mcnt;
        -: 6064:	      }
        -: 6065:	  }
    #####: 6066:	  break;
        -: 6067:
        -: 6068:
        -: 6069:        /* begline matches the empty string at the beginning of the string
        -: 6070:           (unless `not_bol' is set in `bufp'), and, if
        -: 6071:           `newline_anchor' is set, after newlines.  */
    #####: 6072:	case begline:
        -: 6073:          DEBUG_PRINT1 ("EXECUTING begline.\n");
        -: 6074:          
    #####: 6075:          if (AT_STRINGS_BEG (d))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 6076:            {
    #####: 6077:              if (!bufp->not_bol) break;
branch  0 never executed
branch  1 never executed
        -: 6078:            }
    #####: 6079:          else if (d[-1] == '\n' && bufp->newline_anchor)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 6080:            {
    #####: 6081:              break;
        -: 6082:            }
        -: 6083:          /* In all other cases, we fail.  */
    #####: 6084:          goto fail;
        -: 6085:
        -: 6086:
        -: 6087:        /* endline is the dual of begline.  */
    #####: 6088:	case endline:
        -: 6089:          DEBUG_PRINT1 ("EXECUTING endline.\n");
        -: 6090:
    #####: 6091:          if (AT_STRINGS_END (d))
branch  0 never executed
branch  1 never executed
        -: 6092:            {
    #####: 6093:              if (!bufp->not_eol) break;
branch  0 never executed
branch  1 never executed
        -: 6094:            }
        -: 6095:          
        -: 6096:          /* We have to ``prefetch'' the next character.  */
    #####: 6097:          else if ((d == end1 ? *string2 : *d) == '\n'
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6098:                   && bufp->newline_anchor)
branch  0 never executed
branch  1 never executed
        -: 6099:            {
    #####: 6100:              break;
        -: 6101:            }
    #####: 6102:          goto fail;
        -: 6103:
        -: 6104:
        -: 6105:	/* Match at the very beginning of the data.  */
    11418: 6106:        case begbuf:
        -: 6107:          DEBUG_PRINT1 ("EXECUTING begbuf.\n");
   11418*: 6108:          if (AT_STRINGS_BEG (d))
branch  0 taken 0 (fallthrough)
branch  1 taken 11418
branch  2 taken 6521 (fallthrough)
branch  3 taken 4897
branch  4 taken 6521 (fallthrough)
branch  5 taken 0
        -: 6109:            break;
     6521: 6110:          goto fail;
        -: 6111:
        -: 6112:
        -: 6113:	/* Match at the very end of the data.  */
     6843: 6114:        case endbuf:
        -: 6115:          DEBUG_PRINT1 ("EXECUTING endbuf.\n");
     6843: 6116:	  if (AT_STRINGS_END (d))
branch  0 taken 1161 (fallthrough)
branch  1 taken 5682
     1161: 6117:	    break;
     5682: 6118:          goto fail;
        -: 6119:
        -: 6120:
        -: 6121:        /* on_failure_keep_string_jump is used to optimize `.*\n'.  It
        -: 6122:           pushes NULL as the value for the string on the stack.  Then
        -: 6123:           `pop_failure_point' will keep the current value for the
        -: 6124:           string, instead of restoring it.  To see why, consider
        -: 6125:           matching `foo\nbar' against `.*\n'.  The .* matches the foo;
        -: 6126:           then the . fails against the \n.  But the next thing we want
        -: 6127:           to do is match the \n against the \n; if we restored the
        -: 6128:           string value, we would be back at the foo.
        -: 6129:           
        -: 6130:           Because this is used only in specific cases, we don't need to
        -: 6131:           check all the things that `on_failure_jump' does, to make
        -: 6132:           sure the right things get saved on the stack.  Hence we don't
        -: 6133:           share its code.  The only reason to push anything on the
        -: 6134:           stack at all is that otherwise we would have to change
        -: 6135:           `anychar's code to do something besides goto fail in this
        -: 6136:           case; that seems worse than this.  */
    #####: 6137:        case on_failure_keep_string_jump:
        -: 6138:          DEBUG_PRINT1 ("EXECUTING on_failure_keep_string_jump");
        -: 6139:          
    #####: 6140:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
        -: 6141:          DEBUG_PRINT3 (" %d (to 0x%x):\n", mcnt, p + mcnt);
        -: 6142:
    #####: 6143:          PUSH_FAILURE_POINT (p + mcnt, NULL, -2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 6144:          break;
        -: 6145:
        -: 6146:
        -: 6147:	/* Uses of on_failure_jump:
        -: 6148:        
        -: 6149:           Each alternative starts with an on_failure_jump that points
        -: 6150:           to the beginning of the next alternative.  Each alternative
        -: 6151:           except the last ends with a jump that in effect jumps past
        -: 6152:           the rest of the alternatives.  (They really jump to the
        -: 6153:           ending jump of the following alternative, because tensioning
        -: 6154:           these jumps is a hassle.)
        -: 6155:
        -: 6156:           Repeats start with an on_failure_jump that points past both
        -: 6157:           the repetition text and either the following jump or
        -: 6158:           pop_failure_jump back to this on_failure_jump.  */
        -: 6159:	case on_failure_jump:
   409561: 6160:        on_failure:
        -: 6161:          DEBUG_PRINT1 ("EXECUTING on_failure_jump");
        -: 6162:
   409561: 6163:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
        -: 6164:          DEBUG_PRINT3 (" %d (to 0x%x)", mcnt, p + mcnt);
        -: 6165:
        -: 6166:          /* If this on_failure_jump comes right before a group (i.e.,
        -: 6167:             the original * applied to a group), save the information
        -: 6168:             for that group and all inner ones, so that if we fail back
        -: 6169:             to this point, the group's information will be correct.
        -: 6170:             For example, in \(a*\)*\1, we need the preceding group,
        -: 6171:             and in \(\(a*\)b*\)\2, we need the inner group.  */
        -: 6172:
        -: 6173:          /* We can't use `p' to check ahead because we push
        -: 6174:             a failure point to `p + mcnt' after we do this.  */
   409561: 6175:          p1 = p;
        -: 6176:
        -: 6177:          /* We need to skip no_op's before we look for the
        -: 6178:             start_memory in case this on_failure_jump is happening as
        -: 6179:             the result of a completed succeed_n, as in \(a\)\{1,3\}b\1
        -: 6180:             against aba.  */
   409705: 6181:          while (p1 < pend && (re_opcode_t) *p1 == no_op)
branch  0 taken 409705 (fallthrough)
branch  1 taken 0
branch  2 taken 144
branch  3 taken 409561 (fallthrough)
      144: 6182:            p1++;
        -: 6183:
   409561: 6184:          if (p1 < pend && (re_opcode_t) *p1 == start_memory)
branch  0 taken 409561 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 409561
        -: 6185:            {
        -: 6186:              /* We have a new highest active register now.  This will
        -: 6187:                 get reset at the start_memory we are about to get to,
        -: 6188:                 but we will have saved all the registers relevant to
        -: 6189:                 this repetition op, as described above.  */
    #####: 6190:              highest_active_reg = *(p1 + 1) + *(p1 + 2);
    #####: 6191:              if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
branch  0 never executed
branch  1 never executed
    #####: 6192:                lowest_active_reg = *(p1 + 1);
        -: 6193:            }
        -: 6194:
        -: 6195:          DEBUG_PRINT1 (":\n");
  507199*: 6196:          PUSH_FAILURE_POINT (p + mcnt, d, -2);
branch  0 taken 97229 (fallthrough)
branch  1 taken 0
branch  2 taken 97229 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 97229
branch  6 taken 97229
branch  7 taken 409561 (fallthrough)
branch  8 taken 409
branch  9 taken 409561 (fallthrough)
   409561: 6197:          break;
        -: 6198:
        -: 6199:
        -: 6200:        /* A smart repeat ends with `maybe_pop_jump'.
        -: 6201:	   We change it to either `pop_failure_jump' or `jump'.  */
      116: 6202:        case maybe_pop_jump:
      116: 6203:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
        -: 6204:          DEBUG_PRINT2 ("EXECUTING maybe_pop_jump %d.\n", mcnt);
        -: 6205:          {
      116: 6206:	    register unsigned char *p2 = p;
        -: 6207:
        -: 6208:            /* Compare the beginning of the repeat with what in the
        -: 6209:               pattern follows its end. If we can establish that there
        -: 6210:               is nothing that they would both match, i.e., that we
        -: 6211:               would have to backtrack because of (as in, e.g., `a*a')
        -: 6212:               then we can change to pop_failure_jump, because we'll
        -: 6213:               never have to backtrack.
        -: 6214:               
        -: 6215:               This is not true in the case of alternatives: in
        -: 6216:               `(a|ab)*' we do need to backtrack to the `ab' alternative
        -: 6217:               (e.g., if the string was `ab').  But instead of trying to
        -: 6218:               detect that here, the alternative has put on a dummy
        -: 6219:               failure point which is what we will end up popping.  */
        -: 6220:
        -: 6221:	    /* Skip over open/close-group commands.  */
      116: 6222:	    while (p2 + 2 < pend
      127: 6223:		   && ((re_opcode_t) *p2 == stop_memory
branch  0 taken 65 (fallthrough)
branch  1 taken 62
branch  2 taken 11
branch  3 taken 54 (fallthrough)
       54: 6224:		       || (re_opcode_t) *p2 == start_memory))
branch  0 taken 0
branch  1 taken 54 (fallthrough)
       11: 6225:	      p2 += 3;			/* Skip over args, too.  */
        -: 6226:
        -: 6227:            /* If we're at the end of the pattern, we can change.  */
      116: 6228:            if (p2 == pend)
branch  0 taken 61 (fallthrough)
branch  1 taken 55
        -: 6229:	      {
        -: 6230:		/* Consider what happens when matching ":\(.*\)"
        -: 6231:		   against ":/".  I don't really understand this code
        -: 6232:		   yet.  */
       61: 6233:  	        p[-3] = (unsigned char) pop_failure_jump;
        -: 6234:                DEBUG_PRINT1
        -: 6235:                  ("  End of pattern: change to `pop_failure_jump'.\n");
        -: 6236:              }
        -: 6237:
       55: 6238:            else if ((re_opcode_t) *p2 == exactn
branch  0 taken 1 (fallthrough)
branch  1 taken 54
        1: 6239:		     || (bufp->newline_anchor && (re_opcode_t) *p2 == endline))
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -: 6240:	      {
      54*: 6241:		register unsigned char c
       54: 6242:                  = *p2 == (unsigned char) endline ? '\n' : p2[2];
branch  0 taken 54 (fallthrough)
branch  1 taken 0
       54: 6243:		p1 = p + mcnt;
        -: 6244:
        -: 6245:                /* p1[0] ... p1[2] are the `on_failure_jump' corresponding
        -: 6246:                   to the `maybe_finalize_jump' of this case.  Examine what 
        -: 6247:                   follows.  */
      54*: 6248:                if ((re_opcode_t) p1[3] == exactn && p1[5] != c)
branch  0 taken 0 (fallthrough)
branch  1 taken 54
branch  2 never executed
branch  3 never executed
        -: 6249:                  {
    #####: 6250:  		    p[-3] = (unsigned char) pop_failure_jump;
        -: 6251:                    DEBUG_PRINT3 ("  %c != %c => pop_failure_jump.\n",
        -: 6252:                                  c, p1[5]);
        -: 6253:                  }
        -: 6254:                  
       54: 6255:		else if ((re_opcode_t) p1[3] == charset
branch  0 taken 54 (fallthrough)
branch  1 taken 0
       54: 6256:			 || (re_opcode_t) p1[3] == charset_not)
branch  0 taken 0 (fallthrough)
branch  1 taken 54
        -: 6257:		  {
    #####: 6258:		    int not = (re_opcode_t) p1[3] == charset_not;
        -: 6259:                    
    #####: 6260:		    if (c < (unsigned char) (p1[4] * BYTEWIDTH)
branch  0 never executed
branch  1 never executed
    #####: 6261:			&& p1[5 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
branch  0 never executed
branch  1 never executed
    #####: 6262:		      not = !not;
        -: 6263:
        -: 6264:                    /* `not' is equal to 1 if c would match, which means
        -: 6265:                        that we can't change to pop_failure_jump.  */
    #####: 6266:		    if (!not)
branch  0 never executed
branch  1 never executed
        -: 6267:                      {
    #####: 6268:  		        p[-3] = (unsigned char) pop_failure_jump;
        -: 6269:                        DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
        -: 6270:                      }
        -: 6271:		  }
        -: 6272:	      }
        -: 6273:	  }
      116: 6274:	  p -= 2;		/* Point at relative address again.  */
      116: 6275:	  if ((re_opcode_t) p[-1] != pop_failure_jump)
branch  0 taken 55 (fallthrough)
branch  1 taken 61
        -: 6276:	    {
       55: 6277:	      p[-1] = (unsigned char) jump;
        -: 6278:              DEBUG_PRINT1 ("  Match => jump.\n");
       55: 6279:	      goto unconditional_jump;
        -: 6280:	    }
        -: 6281:        /* Note fall through.  */
        -: 6282:
        -: 6283:
        -: 6284:	/* The end of a simple repeat has a pop_failure_jump back to
        -: 6285:           its matching on_failure_jump, where the latter will push a
        -: 6286:           failure point.  The pop_failure_jump takes off failure
        -: 6287:           points put on by this pop_failure_jump's matching
        -: 6288:           on_failure_jump; we got through the pattern to here from the
        -: 6289:           matching on_failure_jump, so didn't fail.  */
        -: 6290:        case pop_failure_jump:
        -: 6291:          {
        -: 6292:            /* We need to pass separate storage for the lowest and
        -: 6293:               highest registers, even though we don't care about the
        -: 6294:               actual values.  Otherwise, we will restore only one
        -: 6295:               register from the stack, since lowest will == highest in
        -: 6296:               `pop_failure_point'.  */
        -: 6297:            unsigned dummy_low_reg, dummy_high_reg;
        -: 6298:            unsigned char *pdummy;
        -: 6299:            const char *sdummy;
        -: 6300:
        -: 6301:            DEBUG_PRINT1 ("EXECUTING pop_failure_jump.\n");
   13094*: 6302:            POP_FAILURE_POINT (sdummy, pdummy,
branch  0 taken 13094 (fallthrough)
branch  1 taken 0
branch  2 taken 0
branch  3 taken 13094 (fallthrough)
        -: 6303:                               dummy_low_reg, dummy_high_reg,
        -: 6304:                               reg_dummy, reg_dummy, reg_info_dummy);
        -: 6305:          }
        -: 6306:          /* Note fall through.  */
        -: 6307:
        -: 6308:          
        -: 6309:        /* Unconditionally jump (without popping any failure points).  */
        -: 6310:        case jump:
    13094: 6311:	unconditional_jump:
   381426: 6312:	  EXTRACT_NUMBER_AND_INCR (mcnt, p);	/* Get the amount to jump.  */
        -: 6313:          DEBUG_PRINT2 ("EXECUTING jump %d ", mcnt);
   381426: 6314:	  p += mcnt;				/* Do the jump.  */
        -: 6315:          DEBUG_PRINT2 ("(to 0x%x).\n", p);
   381426: 6316:	  break;
        -: 6317:
        -: 6318:	
        -: 6319:        /* We need this opcode so we can detect where alternatives end
        -: 6320:           in `group_match_null_string_p' et al.  */
    #####: 6321:        case jump_past_alt:
        -: 6322:          DEBUG_PRINT1 ("EXECUTING jump_past_alt.\n");
    #####: 6323:          goto unconditional_jump;
        -: 6324:
        -: 6325:
        -: 6326:        /* Normally, the on_failure_jump pushes a failure point, which
        -: 6327:           then gets popped at pop_failure_jump.  We will end up at
        -: 6328:           pop_failure_jump, also, and with a pattern of, say, `a+', we
        -: 6329:           are skipping over the on_failure_jump, so we have to push
        -: 6330:           something meaningless for pop_failure_jump to pop.  */
    #####: 6331:        case dummy_failure_jump:
        -: 6332:          DEBUG_PRINT1 ("EXECUTING dummy_failure_jump.\n");
        -: 6333:          /* It doesn't matter what we push for the string here.  What
        -: 6334:             the code at `fail' tests is the value for the pattern.  */
    #####: 6335:          PUSH_FAILURE_POINT (0, 0, -2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 6336:          goto unconditional_jump;
        -: 6337:
        -: 6338:
        -: 6339:        /* At the end of an alternative, we need to push a dummy failure
        -: 6340:           point in case we are followed by a `pop_failure_jump', because
        -: 6341:           we don't want the failure point for the alternative to be
        -: 6342:           popped.  For example, matching `(a|ab)*' against `aab'
        -: 6343:           requires that we match the `ab' alternative.  */
    #####: 6344:        case push_dummy_failure:
        -: 6345:          DEBUG_PRINT1 ("EXECUTING push_dummy_failure.\n");
        -: 6346:          /* See comments just above at `dummy_failure_jump' about the
        -: 6347:             two zeroes.  */
    #####: 6348:          PUSH_FAILURE_POINT (0, 0, -2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 6349:          break;
        -: 6350:
        -: 6351:        /* Have to succeed matching what follows at least n times.
        -: 6352:           After that, handle like `on_failure_jump'.  */
      144: 6353:        case succeed_n: 
      144: 6354:          EXTRACT_NUMBER (mcnt, p + 2);
        -: 6355:          DEBUG_PRINT2 ("EXECUTING succeed_n %d.\n", mcnt);
        -: 6356:
        -: 6357:          assert (mcnt >= 0);
        -: 6358:          /* Originally, this is how many times we HAVE to succeed.  */
      144: 6359:          if (mcnt > 0)
branch  0 taken 72 (fallthrough)
branch  1 taken 72
        -: 6360:            {
       72: 6361:               mcnt--;
       72: 6362:	       p += 2;
       72: 6363:               STORE_NUMBER_AND_INCR (p, mcnt);
        -: 6364:               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p, mcnt);
        -: 6365:            }
       72: 6366:	  else if (mcnt == 0)
branch  0 taken 72 (fallthrough)
branch  1 taken 0
        -: 6367:            {
        -: 6368:              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+2);
       72: 6369:	      p[2] = (unsigned char) no_op;
       72: 6370:              p[3] = (unsigned char) no_op;
       72: 6371:              goto on_failure;
        -: 6372:            }
       72: 6373:          break;
        -: 6374:        
       78: 6375:        case jump_n: 
       78: 6376:          EXTRACT_NUMBER (mcnt, p + 2);
        -: 6377:          DEBUG_PRINT2 ("EXECUTING jump_n %d.\n", mcnt);
        -: 6378:
        -: 6379:          /* Originally, this is how many times we CAN jump.  */
       78: 6380:          if (mcnt)
branch  0 taken 72 (fallthrough)
branch  1 taken 6
        -: 6381:            {
       72: 6382:               mcnt--;
       72: 6383:               STORE_NUMBER (p + 2, mcnt);
       72: 6384:	       goto unconditional_jump;	     
        -: 6385:            }
        -: 6386:          /* If don't have to jump any more, skip over the rest of command.  */
        -: 6387:	  else      
        6: 6388:	    p += 4;		     
        6: 6389:          break;
        -: 6390:        
      144: 6391:	case set_number_at:
        -: 6392:	  {
        -: 6393:            DEBUG_PRINT1 ("EXECUTING set_number_at.\n");
        -: 6394:
      144: 6395:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
      144: 6396:            p1 = p + mcnt;
      144: 6397:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
        -: 6398:            DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p1, mcnt);
      144: 6399:	    STORE_NUMBER (p1, mcnt);
      144: 6400:            break;
        -: 6401:          }
        -: 6402:
    #####: 6403:        case wordbound:
        -: 6404:          DEBUG_PRINT1 ("EXECUTING wordbound.\n");
    #####: 6405:          if (AT_WORD_BOUNDARY (d))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
        -: 6406:	    break;
    #####: 6407:          goto fail;
        -: 6408:
    #####: 6409:	case notwordbound:
        -: 6410:          DEBUG_PRINT1 ("EXECUTING notwordbound.\n");
    #####: 6411:	  if (AT_WORD_BOUNDARY (d))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 6412:	    goto fail;
    #####: 6413:          break;
        -: 6414:
    #####: 6415:	case wordbeg:
        -: 6416:          DEBUG_PRINT1 ("EXECUTING wordbeg.\n");
    #####: 6417:	  if (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - 1)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
        -: 6418:	    break;
    #####: 6419:          goto fail;
        -: 6420:
    #####: 6421:	case wordend:
        -: 6422:          DEBUG_PRINT1 ("EXECUTING wordend.\n");
    #####: 6423:	  if (!AT_STRINGS_BEG (d) && WORDCHAR_P (d - 1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6424:              && (!WORDCHAR_P (d) || AT_STRINGS_END (d)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 6425:	    break;
    #####: 6426:          goto fail;
        -: 6427:
        -: 6428:#ifdef emacs
        -: 6429:#ifdef emacs19
        -: 6430:  	case before_dot:
        -: 6431:          DEBUG_PRINT1 ("EXECUTING before_dot.\n");
        -: 6432: 	  if (PTR_CHAR_POS ((unsigned char *) d) >= point)
        -: 6433:  	    goto fail;
        -: 6434:  	  break;
        -: 6435:  
        -: 6436:  	case at_dot:
        -: 6437:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
        -: 6438: 	  if (PTR_CHAR_POS ((unsigned char *) d) != point)
        -: 6439:  	    goto fail;
        -: 6440:  	  break;
        -: 6441:  
        -: 6442:  	case after_dot:
        -: 6443:          DEBUG_PRINT1 ("EXECUTING after_dot.\n");
        -: 6444:          if (PTR_CHAR_POS ((unsigned char *) d) <= point)
        -: 6445:  	    goto fail;
        -: 6446:  	  break;
        -: 6447:#else /* not emacs19 */
        -: 6448:	case at_dot:
        -: 6449:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
        -: 6450:	  if (PTR_CHAR_POS ((unsigned char *) d) + 1 != point)
        -: 6451:	    goto fail;
        -: 6452:	  break;
        -: 6453:#endif /* not emacs19 */
        -: 6454:
        -: 6455:	case syntaxspec:
        -: 6456:          DEBUG_PRINT2 ("EXECUTING syntaxspec %d.\n", mcnt);
        -: 6457:	  mcnt = *p++;
        -: 6458:	  goto matchsyntax;
        -: 6459:
        -: 6460:        case wordchar:
        -: 6461:          DEBUG_PRINT1 ("EXECUTING Emacs wordchar.\n");
        -: 6462:	  mcnt = (int) Sword;
        -: 6463:        matchsyntax:
        -: 6464:	  PREFETCH ();
        -: 6465:	  if (SYNTAX (*d++) != (enum syntaxcode) mcnt)
        -: 6466:            goto fail;
        -: 6467:          SET_REGS_MATCHED ();
        -: 6468:	  break;
        -: 6469:
        -: 6470:	case notsyntaxspec:
        -: 6471:          DEBUG_PRINT2 ("EXECUTING notsyntaxspec %d.\n", mcnt);
        -: 6472:	  mcnt = *p++;
        -: 6473:	  goto matchnotsyntax;
        -: 6474:
        -: 6475:        case notwordchar:
        -: 6476:          DEBUG_PRINT1 ("EXECUTING Emacs notwordchar.\n");
        -: 6477:	  mcnt = (int) Sword;
        -: 6478:        matchnotsyntax:
        -: 6479:	  PREFETCH ();
        -: 6480:	  if (SYNTAX (*d++) == (enum syntaxcode) mcnt)
        -: 6481:            goto fail;
        -: 6482:	  SET_REGS_MATCHED ();
        -: 6483:          break;
        -: 6484:
        -: 6485:#else /* not emacs */
    #####: 6486:	case wordchar:
        -: 6487:          DEBUG_PRINT1 ("EXECUTING non-Emacs wordchar.\n");
    #####: 6488:	  PREFETCH ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6489:          if (!WORDCHAR_P (d))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6490:            goto fail;
    #####: 6491:	  SET_REGS_MATCHED ();
branch  0 never executed
branch  1 never executed
    #####: 6492:          d++;
    #####: 6493:	  break;
        -: 6494:	  
    #####: 6495:	case notwordchar:
        -: 6496:          DEBUG_PRINT1 ("EXECUTING non-Emacs notwordchar.\n");
    #####: 6497:	  PREFETCH ();
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6498:	  if (WORDCHAR_P (d))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6499:            goto fail;
    #####: 6500:          SET_REGS_MATCHED ();
branch  0 never executed
branch  1 never executed
    #####: 6501:          d++;
    #####: 6502:	  break;
        -: 6503:#endif /* not emacs */
        -: 6504:          
    #####: 6505:        default:
    #####: 6506:          abort ();
call    0 never executed
        -: 6507:	}
  1188050: 6508:      continue;  /* Successfully executed one pattern command; keep going.  */
        -: 6509:
        -: 6510:
        -: 6511:    /* We goto here if a matching operation fails. */
   429110: 6512:    fail:
   429110: 6513:      if (!FAIL_STACK_EMPTY ())
branch  0 taken 387082 (fallthrough)
branch  1 taken 42028
        -: 6514:	{ /* A restart point is known.  Restore to that state.  */
        -: 6515:          DEBUG_PRINT1 ("\nFAIL:\n");
   387341: 6516:          POP_FAILURE_POINT (d, p,
branch  0 taken 387082 (fallthrough)
branch  1 taken 0
branch  2 taken 259
branch  3 taken 387082 (fallthrough)
        -: 6517:                             lowest_active_reg, highest_active_reg,
        -: 6518:                             regstart, regend, reg_info);
        -: 6519:
        -: 6520:          /* If this failure point is a dummy, try the next one.  */
   387082: 6521:          if (!p)
branch  0 taken 0 (fallthrough)
branch  1 taken 387082
    #####: 6522:	    goto fail;
        -: 6523:
        -: 6524:          /* If we failed to the end of the pattern, don't examine *p.  */
        -: 6525:	  assert (p <= pend);
   387082: 6526:          if (p < pend)
branch  0 taken 1044 (fallthrough)
branch  1 taken 386038
        -: 6527:            {
   386038: 6528:              boolean is_a_jump_n = false;
        -: 6529:              
        -: 6530:              /* If failed to a backwards jump that's part of a repetition
        -: 6531:                 loop, need to pop this failure point and use the next one.  */
   386038: 6532:              switch ((re_opcode_t) *p)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 386038
        -: 6533:                {
    #####: 6534:                case jump_n:
    #####: 6535:                  is_a_jump_n = true;
    #####: 6536:                case maybe_pop_jump:
        -: 6537:                case pop_failure_jump:
        -: 6538:                case jump:
    #####: 6539:                  p1 = p + 1;
    #####: 6540:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####: 6541:                  p1 += mcnt;	
        -: 6542:
    #####: 6543:                  if ((is_a_jump_n && (re_opcode_t) *p1 == succeed_n)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6544:                      || (!is_a_jump_n
branch  0 never executed
branch  1 never executed
    #####: 6545:                          && (re_opcode_t) *p1 == on_failure_jump))
branch  0 never executed
branch  1 never executed
    #####: 6546:                    goto fail;
    #####: 6547:                  break;
     1044: 6548:                default:
        -: 6549:                  /* do nothing */ ;
        -: 6550:                }
        -: 6551:            }
        -: 6552:
   387082: 6553:          if (d >= string1 && d <= end1)
branch  0 taken 387082 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 387082
    #####: 6554:	    dend = end_match_1;
        -: 6555:        }
        -: 6556:      else
    42028: 6557:        break;   /* Matching at this starting point really fails.  */
        -: 6558:    } /* for (;;) */
        -: 6559:
    42028: 6560:  if (best_regs_set)
branch  0 taken 51 (fallthrough)
branch  1 taken 41977
       51: 6561:    goto restore_best_regs;
        -: 6562:
    41977: 6563:  FREE_VARIABLES ();
        -: 6564:
    41977: 6565:  return -1;         			/* Failure to match.  */
        -: 6566:} /* re_match_2 */
        -: 6567:
        -: 6568:/* Subroutine definitions for re_match_2.  */
        -: 6569:
        -: 6570:
        -: 6571:/* We are passed P pointing to a register number after a start_memory.
        -: 6572:   
        -: 6573:   Return true if the pattern up to the corresponding stop_memory can
        -: 6574:   match the empty string, and false otherwise.
        -: 6575:   
        -: 6576:   If we find the matching stop_memory, sets P to point to one past its number.
        -: 6577:   Otherwise, sets P to an undefined byte less than or equal to END.
        -: 6578:
        -: 6579:   We don't handle duplicates properly (yet).  */
        -: 6580:
        -: 6581:static boolean
function group_match_null_string_p called 30 returned 100% blocks executed 44%
       30: 6582:group_match_null_string_p (p, end, reg_info)
        -: 6583:    unsigned char **p, *end;
        -: 6584:    register_info_type *reg_info;
        -: 6585:{
        -: 6586:  int mcnt;
        -: 6587:  /* Point to after the args to the start_memory.  */
       30: 6588:  unsigned char *p1 = *p + 2;
        -: 6589:  
       30: 6590:  while (p1 < end)
branch  0 taken 30
branch  1 taken 0 (fallthrough)
        -: 6591:    {
        -: 6592:      /* Skip over opcodes that can match nothing, and return true or
        -: 6593:	 false, as appropriate, when we get to one that can't, or to the
        -: 6594:         matching stop_memory.  */
        -: 6595:      
       30: 6596:      switch ((re_opcode_t) *p1)
branch  0 taken 30
branch  1 taken 0
branch  2 taken 0
        -: 6597:        {
        -: 6598:        /* Could be either a loop or a series of alternatives.  */
       30: 6599:        case on_failure_jump:
       30: 6600:          p1++;
       30: 6601:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
        -: 6602:          
        -: 6603:          /* If the next operation is not a jump backwards in the
        -: 6604:	     pattern.  */
        -: 6605:
       30: 6606:	  if (mcnt >= 0)
branch  0 taken 30 (fallthrough)
branch  1 taken 0
        -: 6607:	    {
        -: 6608:              /* Go through the on_failure_jumps of the alternatives,
        -: 6609:                 seeing if any of the alternatives cannot match nothing.
        -: 6610:                 The last alternative starts with only a jump,
        -: 6611:                 whereas the rest start with on_failure_jump and end
        -: 6612:                 with a jump, e.g., here is the pattern for `a|b|c':
        -: 6613:
        -: 6614:                 /on_failure_jump/0/6/exactn/1/a/jump_past_alt/0/6
        -: 6615:                 /on_failure_jump/0/6/exactn/1/b/jump_past_alt/0/3
        -: 6616:                 /exactn/1/c						
        -: 6617:
        -: 6618:                 So, we have to first go through the first (n-1)
        -: 6619:                 alternatives and then deal with the last one separately.  */
        -: 6620:
        -: 6621:
        -: 6622:              /* Deal with the first (n-1) alternatives, which start
        -: 6623:                 with an on_failure_jump (see above) that jumps to right
        -: 6624:                 past a jump_past_alt.  */
        -: 6625:
       30: 6626:              while ((re_opcode_t) p1[mcnt-3] == jump_past_alt)
branch  0 taken 0
branch  1 taken 30 (fallthrough)
        -: 6627:                {
        -: 6628:                  /* `mcnt' holds how many bytes long the alternative
        -: 6629:                     is, including the ending `jump_past_alt' and
        -: 6630:                     its number.  */
        -: 6631:
    #####: 6632:                  if (!alt_match_null_string_p (p1, p1 + mcnt - 3, 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6633:				                      reg_info))
    #####: 6634:                    return false;
        -: 6635:
        -: 6636:                  /* Move to right after this alternative, including the
        -: 6637:		     jump_past_alt.  */
    #####: 6638:                  p1 += mcnt;	
        -: 6639:
        -: 6640:                  /* Break if it's the beginning of an n-th alternative
        -: 6641:                     that doesn't begin with an on_failure_jump.  */
    #####: 6642:                  if ((re_opcode_t) *p1 != on_failure_jump)
branch  0 never executed
branch  1 never executed
    #####: 6643:                    break;
        -: 6644:		
        -: 6645:		  /* Still have to check that it's not an n-th
        -: 6646:		     alternative that starts with an on_failure_jump.  */
    #####: 6647:		  p1++;
    #####: 6648:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####: 6649:                  if ((re_opcode_t) p1[mcnt-3] != jump_past_alt)
branch  0 never executed
branch  1 never executed
        -: 6650:                    {
        -: 6651:		      /* Get to the beginning of the n-th alternative.  */
    #####: 6652:                      p1 -= 3;
    #####: 6653:                      break;
        -: 6654:                    }
        -: 6655:                }
        -: 6656:
        -: 6657:              /* Deal with the last alternative: go back and get number
        -: 6658:                 of the `jump_past_alt' just before it.  `mcnt' contains
        -: 6659:                 the length of the alternative.  */
       30: 6660:              EXTRACT_NUMBER (mcnt, p1 - 2);
        -: 6661:
       30: 6662:              if (!alt_match_null_string_p (p1, p1 + mcnt, reg_info))
call    0 returned 30
branch  1 taken 30 (fallthrough)
branch  2 taken 0
       30: 6663:                return false;
        -: 6664:
    #####: 6665:              p1 += mcnt;	/* Get past the n-th alternative.  */
        -: 6666:            } /* if mcnt > 0 */
    #####: 6667:          break;
        -: 6668:
        -: 6669:          
    #####: 6670:        case stop_memory:
        -: 6671:	  assert (p1[1] == **p);
    #####: 6672:          *p = p1 + 2;
    #####: 6673:          return true;
        -: 6674:
        -: 6675:        
    #####: 6676:        default: 
    #####: 6677:          if (!common_op_match_null_string_p (&p1, end, reg_info))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6678:            return false;
        -: 6679:        }
        -: 6680:    } /* while p1 < end */
        -: 6681:
    #####: 6682:  return false;
        -: 6683:} /* group_match_null_string_p */
        -: 6684:
        -: 6685:
        -: 6686:/* Similar to group_match_null_string_p, but doesn't deal with alternatives:
        -: 6687:   It expects P to be the first byte of a single alternative and END one
        -: 6688:   byte past the last. The alternative can contain groups.  */
        -: 6689:   
        -: 6690:static boolean
function alt_match_null_string_p called 30 returned 100% blocks executed 80%
       30: 6691:alt_match_null_string_p (p, end, reg_info)
        -: 6692:    unsigned char *p, *end;
        -: 6693:    register_info_type *reg_info;
        -: 6694:{
        -: 6695:  int mcnt;
       30: 6696:  unsigned char *p1 = p;
        -: 6697:  
       30: 6698:  while (p1 < end)
branch  0 taken 30
branch  1 taken 0 (fallthrough)
        -: 6699:    {
        -: 6700:      /* Skip over opcodes that can match nothing, and break when we get 
        -: 6701:         to one that can't.  */
        -: 6702:      
       30: 6703:      switch ((re_opcode_t) *p1)
branch  0 taken 0 (fallthrough)
branch  1 taken 30
        -: 6704:        {
        -: 6705:	/* It's a loop.  */
    #####: 6706:        case on_failure_jump:
    #####: 6707:          p1++;
    #####: 6708:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####: 6709:          p1 += mcnt;
    #####: 6710:          break;
        -: 6711:          
       30: 6712:	default: 
       30: 6713:          if (!common_op_match_null_string_p (&p1, end, reg_info))
call    0 returned 30
branch  1 taken 30 (fallthrough)
branch  2 taken 0
       30: 6714:            return false;
        -: 6715:        }
        -: 6716:    }  /* while p1 < end */
        -: 6717:
    #####: 6718:  return true;
        -: 6719:} /* alt_match_null_string_p */
        -: 6720:
        -: 6721:
        -: 6722:/* Deals with the ops common to group_match_null_string_p and
        -: 6723:   alt_match_null_string_p.  
        -: 6724:   
        -: 6725:   Sets P to one after the op and its arguments, if any.  */
        -: 6726:
        -: 6727:static boolean
function common_op_match_null_string_p called 30 returned 100% blocks executed 17%
       30: 6728:common_op_match_null_string_p (p, end, reg_info)
        -: 6729:    unsigned char **p, *end;
        -: 6730:    register_info_type *reg_info;
        -: 6731:{
        -: 6732:  int mcnt;
        -: 6733:  boolean ret;
        -: 6734:  int reg_no;
       30: 6735:  unsigned char *p1 = *p;
        -: 6736:
       30: 6737:  switch ((re_opcode_t) *p1++)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 30
        -: 6738:    {
    #####: 6739:    case no_op:
        -: 6740:    case begline:
        -: 6741:    case endline:
        -: 6742:    case begbuf:
        -: 6743:    case endbuf:
        -: 6744:    case wordbeg:
        -: 6745:    case wordend:
        -: 6746:    case wordbound:
        -: 6747:    case notwordbound:
        -: 6748:#ifdef emacs
        -: 6749:    case before_dot:
        -: 6750:    case at_dot:
        -: 6751:    case after_dot:
        -: 6752:#endif
    #####: 6753:      break;
        -: 6754:
    #####: 6755:    case start_memory:
    #####: 6756:      reg_no = *p1;
        -: 6757:      assert (reg_no > 0 && reg_no <= MAX_REGNUM);
    #####: 6758:      ret = group_match_null_string_p (&p1, end, reg_info);
call    0 never executed
        -: 6759:      
        -: 6760:      /* Have to set this here in case we're checking a group which
        -: 6761:         contains a group and a back reference to it.  */
        -: 6762:
    #####: 6763:      if (REG_MATCH_NULL_STRING_P (reg_info[reg_no]) == MATCH_NULL_UNSET_VALUE)
branch  0 never executed
branch  1 never executed
    #####: 6764:        REG_MATCH_NULL_STRING_P (reg_info[reg_no]) = ret;
        -: 6765:
    #####: 6766:      if (!ret)
branch  0 never executed
branch  1 never executed
    #####: 6767:        return false;
    #####: 6768:      break;
        -: 6769:          
        -: 6770:    /* If this is an optimized succeed_n for zero times, make the jump.  */
    #####: 6771:    case jump:
    #####: 6772:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####: 6773:      if (mcnt >= 0)
branch  0 never executed
branch  1 never executed
    #####: 6774:        p1 += mcnt;
        -: 6775:      else
    #####: 6776:        return false;
    #####: 6777:      break;
        -: 6778:
    #####: 6779:    case succeed_n:
        -: 6780:      /* Get to the number of times to succeed.  */
    #####: 6781:      p1 += 2;		
    #####: 6782:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
        -: 6783:
    #####: 6784:      if (mcnt == 0)
branch  0 never executed
branch  1 never executed
        -: 6785:        {
    #####: 6786:          p1 -= 4;
    #####: 6787:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    #####: 6788:          p1 += mcnt;
        -: 6789:        }
        -: 6790:      else
    #####: 6791:        return false;
    #####: 6792:      break;
        -: 6793:
    #####: 6794:    case duplicate: 
    #####: 6795:      if (!REG_MATCH_NULL_STRING_P (reg_info[*p1]))
branch  0 never executed
branch  1 never executed
    #####: 6796:        return false;
    #####: 6797:      break;
        -: 6798:
    #####: 6799:    case set_number_at:
    #####: 6800:      p1 += 4;
        -: 6801:
       30: 6802:    default:
        -: 6803:      /* All other opcodes mean we cannot match the empty string.  */
       30: 6804:      return false;
        -: 6805:  }
        -: 6806:
    #####: 6807:  *p = p1;
    #####: 6808:  return true;
        -: 6809:} /* common_op_match_null_string_p */
        -: 6810:
        -: 6811:
        -: 6812:/* Return zero if TRANSLATE[S1] and TRANSLATE[S2] are identical for LEN
        -: 6813:   bytes; nonzero otherwise.  */
        -: 6814:   
        -: 6815:static int
function bcmp_translate called 0 returned 0% blocks executed 0%
    #####: 6816:bcmp_translate (s1, s2, len, translate)
        -: 6817:     unsigned char *s1, *s2;
        -: 6818:     register int len;
        -: 6819:     char *translate;
        -: 6820:{
    #####: 6821:  register unsigned char *p1 = s1, *p2 = s2;
    #####: 6822:  while (len)
branch  0 never executed
branch  1 never executed
        -: 6823:    {
    #####: 6824:      if (translate[*p1++] != translate[*p2++]) return 1;
branch  0 never executed
branch  1 never executed
    #####: 6825:      len--;
        -: 6826:    }
    #####: 6827:  return 0;
        -: 6828:}
        -: 6829:
        -: 6830:/* Entry points for GNU code.  */
        -: 6831:
        -: 6832:/* re_compile_pattern is the GNU regular expression compiler: it
        -: 6833:   compiles PATTERN (of length SIZE) and puts the result in BUFP.
        -: 6834:   Returns 0 if the pattern was valid, otherwise an error string.
        -: 6835:   
        -: 6836:   Assumes the `allocated' (and perhaps `buffer') and `translate' fields
        -: 6837:   are set in BUFP on entry.
        -: 6838:   
        -: 6839:   We call regex_compile to do the actual compilation.  */
        -: 6840:
        -: 6841:const char *
function re_compile_pattern called 603 returned 100% blocks executed 100%
      603: 6842:re_compile_pattern (pattern, length, bufp)
        -: 6843:     const char *pattern;
        -: 6844:     int length;
        -: 6845:     struct re_pattern_buffer *bufp;
        -: 6846:{
        -: 6847:  reg_errcode_t ret;
        -: 6848:  
        -: 6849:  /* GNU code is written to assume at least RE_NREGS registers will be set
        -: 6850:     (and at least one extra will be -1).  */
      603: 6851:  bufp->regs_allocated = REGS_UNALLOCATED;
        -: 6852:  
        -: 6853:  /* And GNU code determines whether or not to get register information
        -: 6854:     by passing null for the REGS argument to re_match, etc., not by
        -: 6855:     setting no_sub.  */
      603: 6856:  bufp->no_sub = 0;
        -: 6857:  
        -: 6858:  /* Match anchors at newline.  */
      603: 6859:  bufp->newline_anchor = 1;
        -: 6860:  
      603: 6861:  ret = regex_compile (pattern, length, re_syntax_options, bufp);
call    0 returned 603
        -: 6862:
      603: 6863:  return re_error_msg[(int) ret];
        -: 6864:}     
        -: 6865:
        -: 6866:/* Entry points compatible with 4.2 BSD regex library.  We don't define
        -: 6867:   them if this is an Emacs or POSIX compilation.  */
        -: 6868:
        -: 6869:#if !defined (emacs) && !defined (_POSIX_SOURCE)
        -: 6870:
        -: 6871:/* BSD has one and only one pattern buffer.  */
        -: 6872:static struct re_pattern_buffer re_comp_buf;
        -: 6873:
        -: 6874:char *
        -: 6875:re_comp (s)
        -: 6876:    const char *s;
        -: 6877:{
        -: 6878:  reg_errcode_t ret;
        -: 6879:  
        -: 6880:  if (!s)
        -: 6881:    {
        -: 6882:      if (!re_comp_buf.buffer)
        -: 6883:	return "No previous regular expression";
        -: 6884:      return 0;
        -: 6885:    }
        -: 6886:
        -: 6887:  if (!re_comp_buf.buffer)
        -: 6888:    {
        -: 6889:      re_comp_buf.buffer = (unsigned char *) malloc (200);
        -: 6890:      if (re_comp_buf.buffer == NULL)
        -: 6891:        return "Memory exhausted";
        -: 6892:      re_comp_buf.allocated = 200;
        -: 6893:
        -: 6894:      re_comp_buf.fastmap = (char *) malloc (1 << BYTEWIDTH);
        -: 6895:      if (re_comp_buf.fastmap == NULL)
        -: 6896:	return "Memory exhausted";
        -: 6897:    }
        -: 6898:
        -: 6899:  /* Since `re_exec' always passes NULL for the `regs' argument, we
        -: 6900:     don't need to initialize the pattern buffer fields which affect it.  */
        -: 6901:
        -: 6902:  /* Match anchors at newlines.  */
        -: 6903:  re_comp_buf.newline_anchor = 1;
        -: 6904:
        -: 6905:  ret = regex_compile (s, strlen (s), re_syntax_options, &re_comp_buf);
        -: 6906:  
        -: 6907:  /* Yes, we're discarding `const' here.  */
        -: 6908:  return (char *) re_error_msg[(int) ret];
        -: 6909:}
        -: 6910:
        -: 6911:
        -: 6912:int
        -: 6913:re_exec (s)
        -: 6914:    const char *s;
        -: 6915:{
        -: 6916:  const int len = strlen (s);
        -: 6917:  return
        -: 6918:    0 <= re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
        -: 6919:}
        -: 6920:#endif /* not emacs and not _POSIX_SOURCE */
        -: 6921:
        -: 6922:/* POSIX.2 functions.  Don't define these for Emacs.  */
        -: 6923:
        -: 6924:#ifndef emacs
        -: 6925:
        -: 6926:/* regcomp takes a regular expression as a string and compiles it.
        -: 6927:
        -: 6928:   PREG is a regex_t *.  We do not expect any fields to be initialized,
        -: 6929:   since POSIX says we shouldn't.  Thus, we set
        -: 6930:
        -: 6931:     `buffer' to the compiled pattern;
        -: 6932:     `used' to the length of the compiled pattern;
        -: 6933:     `syntax' to RE_SYNTAX_POSIX_EXTENDED if the
        -: 6934:       REG_EXTENDED bit in CFLAGS is set; otherwise, to
        -: 6935:       RE_SYNTAX_POSIX_BASIC;
        -: 6936:     `newline_anchor' to REG_NEWLINE being set in CFLAGS;
        -: 6937:     `fastmap' and `fastmap_accurate' to zero;
        -: 6938:     `re_nsub' to the number of subexpressions in PATTERN.
        -: 6939:
        -: 6940:   PATTERN is the address of the pattern string.
        -: 6941:
        -: 6942:   CFLAGS is a series of bits which affect compilation.
        -: 6943:
        -: 6944:     If REG_EXTENDED is set, we use POSIX extended syntax; otherwise, we
        -: 6945:     use POSIX basic syntax.
        -: 6946:
        -: 6947:     If REG_NEWLINE is set, then . and [^...] don't match newline.
        -: 6948:     Also, regexec will try a match beginning after every newline.
        -: 6949:
        -: 6950:     If REG_ICASE is set, then we considers upper- and lowercase
        -: 6951:     versions of letters to be equivalent when matching.
        -: 6952:
        -: 6953:     If REG_NOSUB is set, then when PREG is passed to regexec, that
        -: 6954:     routine will report only success or failure, and nothing about the
        -: 6955:     registers.
        -: 6956:
        -: 6957:   It returns 0 if it succeeds, nonzero if it doesn't.  (See regex.h for
        -: 6958:   the return codes and their meanings.)  */
        -: 6959:
        -: 6960:int
function regcomp called 0 returned 0% blocks executed 0%
    #####: 6961:regcomp (preg, pattern, cflags)
        -: 6962:    regex_t *preg;
        -: 6963:    const char *pattern; 
        -: 6964:    int cflags;
        -: 6965:{
        -: 6966:  reg_errcode_t ret;
    #####: 6967:  unsigned syntax
    #####: 6968:    = (cflags & REG_EXTENDED) ?
    #####: 6969:      RE_SYNTAX_POSIX_EXTENDED : RE_SYNTAX_POSIX_BASIC;
branch  0 never executed
branch  1 never executed
        -: 6970:
        -: 6971:  /* regex_compile will allocate the space for the compiled pattern.  */
    #####: 6972:  preg->buffer = 0;
    #####: 6973:  preg->allocated = 0;
        -: 6974:  
        -: 6975:  /* Don't bother to use a fastmap when searching.  This simplifies the
        -: 6976:     REG_NEWLINE case: if we used a fastmap, we'd have to put all the
        -: 6977:     characters after newlines into the fastmap.  This way, we just try
        -: 6978:     every character.  */
    #####: 6979:  preg->fastmap = 0;
        -: 6980:  
    #####: 6981:  if (cflags & REG_ICASE)
branch  0 never executed
branch  1 never executed
        -: 6982:    {
        -: 6983:      unsigned i;
        -: 6984:      
    #####: 6985:      preg->translate = (char *) malloc (CHAR_SET_SIZE);
    #####: 6986:      if (preg->translate == NULL)
branch  0 never executed
branch  1 never executed
    #####: 6987:        return (int) REG_ESPACE;
        -: 6988:
        -: 6989:      /* Map uppercase characters to corresponding lowercase ones.  */
    #####: 6990:      for (i = 0; i < CHAR_SET_SIZE; i++)
branch  0 never executed
branch  1 never executed
    #####: 6991:        preg->translate[i] = ISUPPER (i) ? tolower (i) : i;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 6992:    }
        -: 6993:  else
    #####: 6994:    preg->translate = NULL;
        -: 6995:
        -: 6996:  /* If REG_NEWLINE is set, newlines are treated differently.  */
    #####: 6997:  if (cflags & REG_NEWLINE)
branch  0 never executed
branch  1 never executed
        -: 6998:    { /* REG_NEWLINE implies neither . nor [^...] match newline.  */
    #####: 6999:      syntax &= ~RE_DOT_NEWLINE;
    #####: 7000:      syntax |= RE_HAT_LISTS_NOT_NEWLINE;
        -: 7001:      /* It also changes the matching behavior.  */
    #####: 7002:      preg->newline_anchor = 1;
        -: 7003:    }
        -: 7004:  else
    #####: 7005:    preg->newline_anchor = 0;
        -: 7006:
    #####: 7007:  preg->no_sub = !!(cflags & REG_NOSUB);
        -: 7008:
        -: 7009:  /* POSIX says a null character in the pattern terminates it, so we 
        -: 7010:     can use strlen here in compiling the pattern.  */
    #####: 7011:  ret = regex_compile (pattern, strlen (pattern), syntax, preg);
call    0 never executed
        -: 7012:  
        -: 7013:  /* POSIX doesn't distinguish between an unmatched open-group and an
        -: 7014:     unmatched close-group: both are REG_EPAREN.  */
    #####: 7015:  if (ret == REG_ERPAREN) ret = REG_EPAREN;
branch  0 never executed
branch  1 never executed
        -: 7016:  
    #####: 7017:  return (int) ret;
        -: 7018:}
        -: 7019:
        -: 7020:
        -: 7021:/* regexec searches for a given pattern, specified by PREG, in the
        -: 7022:   string STRING.
        -: 7023:   
        -: 7024:   If NMATCH is zero or REG_NOSUB was set in the cflags argument to
        -: 7025:   `regcomp', we ignore PMATCH.  Otherwise, we assume PMATCH has at
        -: 7026:   least NMATCH elements, and we set them to the offsets of the
        -: 7027:   corresponding matched substrings.
        -: 7028:   
        -: 7029:   EFLAGS specifies `execution flags' which affect matching: if
        -: 7030:   REG_NOTBOL is set, then ^ does not match at the beginning of the
        -: 7031:   string; if REG_NOTEOL is set, then $ does not match at the end.
        -: 7032:   
        -: 7033:   We return 0 if we find a match and REG_NOMATCH if not.  */
        -: 7034:
        -: 7035:int
function regexec called 0 returned 0% blocks executed 0%
    #####: 7036:regexec (preg, string, nmatch, pmatch, eflags)
        -: 7037:    const regex_t *preg;
        -: 7038:    const char *string; 
        -: 7039:    size_t nmatch; 
        -: 7040:    regmatch_t pmatch[]; 
        -: 7041:    int eflags;
        -: 7042:{
        -: 7043:  int ret;
        -: 7044:  struct re_registers regs;
        -: 7045:  regex_t private_preg;
    #####: 7046:  int len = strlen (string);
    #####: 7047:  boolean want_reg_info = !preg->no_sub && nmatch > 0;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 7048:
    #####: 7049:  private_preg = *preg;
        -: 7050:  
    #####: 7051:  private_preg.not_bol = !!(eflags & REG_NOTBOL);
    #####: 7052:  private_preg.not_eol = !!(eflags & REG_NOTEOL);
        -: 7053:  
        -: 7054:  /* The user has told us exactly how many registers to return
        -: 7055:     information about, via `nmatch'.  We have to pass that on to the
        -: 7056:     matching routines.  */
    #####: 7057:  private_preg.regs_allocated = REGS_FIXED;
        -: 7058:  
    #####: 7059:  if (want_reg_info)
branch  0 never executed
branch  1 never executed
        -: 7060:    {
    #####: 7061:      regs.num_regs = nmatch;
    #####: 7062:      regs.start = TALLOC (nmatch, regoff_t);
    #####: 7063:      regs.end = TALLOC (nmatch, regoff_t);
    #####: 7064:      if (regs.start == NULL || regs.end == NULL)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7065:        return (int) REG_NOMATCH;
        -: 7066:    }
        -: 7067:
        -: 7068:  /* Perform the searching operation.  */
    #####: 7069:  ret = re_search (&private_preg, string, len,
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 7070:                   /* start: */ 0, /* range: */ len,
        -: 7071:                   want_reg_info ? &regs : (struct re_registers *) 0);
        -: 7072:  
        -: 7073:  /* Copy the register information to the POSIX structure.  */
    #####: 7074:  if (want_reg_info)
branch  0 never executed
branch  1 never executed
        -: 7075:    {
    #####: 7076:      if (ret >= 0)
branch  0 never executed
branch  1 never executed
        -: 7077:        {
        -: 7078:          unsigned r;
        -: 7079:
    #####: 7080:          for (r = 0; r < nmatch; r++)
branch  0 never executed
branch  1 never executed
        -: 7081:            {
    #####: 7082:              pmatch[r].rm_so = regs.start[r];
    #####: 7083:              pmatch[r].rm_eo = regs.end[r];
        -: 7084:            }
        -: 7085:        }
        -: 7086:
        -: 7087:      /* If we needed the temporary register info, free the space now.  */
    #####: 7088:      free (regs.start);
    #####: 7089:      free (regs.end);
        -: 7090:    }
        -: 7091:
        -: 7092:  /* We want zero return to mean success, unlike `re_search'.  */
    #####: 7093:  return ret >= 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
        -: 7094:}
        -: 7095:
        -: 7096:
        -: 7097:/* Returns a message corresponding to an error code, ERRCODE, returned
        -: 7098:   from either regcomp or regexec.   We don't use PREG here.  */
        -: 7099:
        -: 7100:size_t
function regerror called 0 returned 0% blocks executed 0%
    #####: 7101:regerror (errcode, preg, errbuf, errbuf_size)
        -: 7102:    int errcode;
        -: 7103:    const regex_t *preg;
        -: 7104:    char *errbuf;
        -: 7105:    size_t errbuf_size;
        -: 7106:{
        -: 7107:  const char *msg;
        -: 7108:  size_t msg_size;
        -: 7109:
    #####: 7110:  if (errcode < 0
branch  0 never executed
branch  1 never executed
    #####: 7111:      || errcode >= (sizeof (re_error_msg) / sizeof (re_error_msg[0])))
branch  0 never executed
branch  1 never executed
        -: 7112:    /* Only error codes returned by the rest of the code should be passed 
        -: 7113:       to this routine.  If we are given anything else, or if other regex
        -: 7114:       code generates an invalid error code, then the program has a bug.
        -: 7115:       Dump core so we can fix it.  */
    #####: 7116:    abort ();
call    0 never executed
        -: 7117:
    #####: 7118:  msg = re_error_msg[errcode];
        -: 7119:
        -: 7120:  /* POSIX doesn't require that we do anything in this case, but why
        -: 7121:     not be nice.  */
    #####: 7122:  if (! msg)
branch  0 never executed
branch  1 never executed
    #####: 7123:    msg = "Success";
        -: 7124:
    #####: 7125:  msg_size = strlen (msg) + 1; /* Includes the null.  */
        -: 7126:  
    #####: 7127:  if (errbuf_size != 0)
branch  0 never executed
branch  1 never executed
        -: 7128:    {
    #####: 7129:      if (msg_size > errbuf_size)
branch  0 never executed
branch  1 never executed
        -: 7130:        {
    #####: 7131:          strncpy (errbuf, msg, errbuf_size - 1);
    #####: 7132:          errbuf[errbuf_size - 1] = 0;
        -: 7133:        }
        -: 7134:      else
    #####: 7135:        strcpy (errbuf, msg);
        -: 7136:    }
        -: 7137:
    #####: 7138:  return msg_size;
        -: 7139:}
        -: 7140:
        -: 7141:
        -: 7142:/* Free dynamically allocated space used by PREG.  */
        -: 7143:
        -: 7144:void
function regfree called 0 returned 0% blocks executed 0%
    #####: 7145:regfree (preg)
        -: 7146:    regex_t *preg;
        -: 7147:{
    #####: 7148:  if (preg->buffer != NULL)
branch  0 never executed
branch  1 never executed
    #####: 7149:    free (preg->buffer);
    #####: 7150:  preg->buffer = NULL;
        -: 7151:  
    #####: 7152:  preg->allocated = 0;
    #####: 7153:  preg->used = 0;
        -: 7154:
    #####: 7155:  if (preg->fastmap != NULL)
branch  0 never executed
branch  1 never executed
    #####: 7156:    free (preg->fastmap);
    #####: 7157:  preg->fastmap = NULL;
    #####: 7158:  preg->fastmap_accurate = 0;
        -: 7159:
    #####: 7160:  if (preg->translate != NULL)
branch  0 never executed
branch  1 never executed
    #####: 7161:    free (preg->translate);
    #####: 7162:  preg->translate = NULL;
    #####: 7163:}
        -: 7164:
        -: 7165:#endif /* not emacs  */
        -: 7166:
        -: 7167:/*
        -: 7168:Local variables:
        -: 7169:make-backup-files: t
        -: 7170:version-control: t
        -: 7171:trim-versions-without-asking: nil
        -: 7172:End:
        -: 7173:*/
        -: 7174:/* Getopt for GNU.
        -: 7175:   NOTE: getopt is now part of the C library, so if you don't know what
        -: 7176:   "Keep this file name-space clean" means, talk to roland@gnu.ai.mit.edu
        -: 7177:   before changing it!
        -: 7178:
        -: 7179:   Copyright (C) 1987, 88, 89, 90, 91, 92, 1993
        -: 7180:   	Free Software Foundation, Inc.
        -: 7181:
        -: 7182:   This program is free software; you can redistribute it and/or modify it
        -: 7183:   under the terms of the GNU General Public License as published by the
        -: 7184:   Free Software Foundation; either version 2, or (at your option) any
        -: 7185:   later version.
        -: 7186:
        -: 7187:   This program is distributed in the hope that it will be useful,
        -: 7188:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 7189:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 7190:   GNU General Public License for more details.
        -: 7191:
        -: 7192:   You should have received a copy of the GNU General Public License
        -: 7193:   along with this program; if not, write to the Free Software
        -: 7194:   Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 7195:
        -: 7196:/* NOTE!!!  AIX requires this to be the first thing in the file.
        -: 7197:   Do not put ANYTHING before it!  */
        -: 7198:#if !defined (__GNUC__) && defined (_AIX)
        -: 7199: #pragma alloca
        -: 7200:#endif
        -: 7201:
        -: 7202:#ifdef HAVE_CONFIG_H
        -: 7203:#include "config.h"
        -: 7204:#endif
        -: 7205:
        -: 7206:#ifdef __GNUC__
        -: 7207:#ifndef alloca
        -: 7208:#define alloca __builtin_alloca
        -: 7209:#endif /* not alloca */
        -: 7210:#else /* not __GNUC__ */
        -: 7211:#if defined (HAVE_ALLOCA_H) || (defined(sparc) && (defined(sun) || (!defined(USG) && !defined(SVR4) && !defined(__svr4__))))
        -: 7212:#include <alloca.h>
        -: 7213:#else
        -: 7214:#ifndef _AIX
        -: 7215:char *alloca ();
        -: 7216:#endif
        -: 7217:#endif /* alloca.h */
        -: 7218:#endif /* not __GNUC__ */
        -: 7219:
        -: 7220:#if !__STDC__ && !defined(const) && IN_GCC
        -: 7221:#define const
        -: 7222:#endif
        -: 7223:
        -: 7224:/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.  */
        -: 7225:#ifndef _NO_PROTO
        -: 7226:#define _NO_PROTO
        -: 7227:#endif
        -: 7228:
        -: 7229:#include <stdio.h>
        -: 7230:
        -: 7231:/* Comment out all this code if we are using the GNU C Library, and are not
        -: 7232:   actually compiling the library itself.  This code is part of the GNU C
        -: 7233:   Library, but also included in many other GNU distributions.  Compiling
        -: 7234:   and linking in this code is a waste when using the GNU C library
        -: 7235:   (especially if it is a shared library).  Rather than having every GNU
        -: 7236:   program understand `configure --with-gnu-libc' and omit the object files,
        -: 7237:   it is simpler to just do this in the source for each such file.  */
        -: 7238:
        -: 7239:#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
        -: 7240:
        -: 7241:
        -: 7242:/* This needs to come after some library #include
        -: 7243:   to get __GNU_LIBRARY__ defined.  */
        -: 7244:#ifdef	__GNU_LIBRARY__
        -: 7245:#undef	alloca
        -: 7246:/* Don't include stdlib.h for non-GNU C libraries because some of them
        -: 7247:   contain conflicting prototypes for getopt.  */
        -: 7248:#include <stdlib.h>
        -: 7249:#else	/* Not GNU C library.  */
        -: 7250:#define	__alloca	alloca
        -: 7251:#endif	/* GNU C library.  */
        -: 7252:
        -: 7253:/* If GETOPT_COMPAT is defined, `+' as well as `--' can introduce a
        -: 7254:   long-named option.  Because this is not POSIX.2 compliant, it is
        -: 7255:   being phased out.  */
        -: 7256:/* #define GETOPT_COMPAT */
        -: 7257:
        -: 7258:/* This version of `getopt' appears to the caller like standard Unix `getopt'
        -: 7259:   but it behaves differently for the user, since it allows the user
        -: 7260:   to intersperse the options with the other arguments.
        -: 7261:
        -: 7262:   As `getopt' works, it permutes the elements of ARGV so that,
        -: 7263:   when it is done, all the options precede everything else.  Thus
        -: 7264:   all application programs are extended to handle flexible argument order.
        -: 7265:
        -: 7266:   Setting the environment variable POSIXLY_CORRECT disables permutation.
        -: 7267:   Then the behavior is completely standard.
        -: 7268:
        -: 7269:   GNU application programs can use a third alternative mode in which
        -: 7270:   they can distinguish the relative order of options and other arguments.  */
        -: 7271:
        -: 7272:#include "getopt.h"
        -: 7273:
        -: 7274:/* For communication from `getopt' to the caller.
        -: 7275:   When `getopt' finds an option that takes an argument,
        -: 7276:   the argument value is returned here.
        -: 7277:   Also, when `ordering' is RETURN_IN_ORDER,
        -: 7278:   each non-option ARGV-element is returned here.  */
        -: 7279:
        -: 7280:char *optarg = 0;
        -: 7281:
        -: 7282:/* Index in ARGV of the next element to be scanned.
        -: 7283:   This is used for communication to and from the caller
        -: 7284:   and for communication between successive calls to `getopt'.
        -: 7285:
        -: 7286:   On entry to `getopt', zero means this is the first call; initialize.
        -: 7287:
        -: 7288:   When `getopt' returns EOF, this is the index of the first of the
        -: 7289:   non-option elements that the caller should itself scan.
        -: 7290:
        -: 7291:   Otherwise, `optind' communicates from one call to the next
        -: 7292:   how much of ARGV has been scanned so far.  */
        -: 7293:
        -: 7294:/* XXX 1003.2 says this must be 1 before any call.  */
        -: 7295:int optind = 0;
        -: 7296:
        -: 7297:/* The next char to be scanned in the option-element
        -: 7298:   in which the last option character we returned was found.
        -: 7299:   This allows us to pick up the scan where we left off.
        -: 7300:
        -: 7301:   If this is zero, or a null string, it means resume the scan
        -: 7302:   by advancing to the next ARGV-element.  */
        -: 7303:
        -: 7304:static char *nextchar;
        -: 7305:
        -: 7306:/* Callers store zero here to inhibit the error message
        -: 7307:   for unrecognized options.  */
        -: 7308:
        -: 7309:int opterr = 1;
        -: 7310:
        -: 7311:/* Set to an option character which was unrecognized.
        -: 7312:   This must be initialized on some systems to avoid linking in the
        -: 7313:   system's own getopt implementation.  */
        -: 7314:
        -: 7315:int optopt = '?';
        -: 7316:
        -: 7317:/* Describe how to deal with options that follow non-option ARGV-elements.
        -: 7318:
        -: 7319:   If the caller did not specify anything,
        -: 7320:   the default is REQUIRE_ORDER if the environment variable
        -: 7321:   POSIXLY_CORRECT is defined, PERMUTE otherwise.
        -: 7322:
        -: 7323:   REQUIRE_ORDER means don't recognize them as options;
        -: 7324:   stop option processing when the first non-option is seen.
        -: 7325:   This is what Unix does.
        -: 7326:   This mode of operation is selected by either setting the environment
        -: 7327:   variable POSIXLY_CORRECT, or using `+' as the first character
        -: 7328:   of the list of option characters.
        -: 7329:
        -: 7330:   PERMUTE is the default.  We permute the contents of ARGV as we scan,
        -: 7331:   so that eventually all the non-options are at the end.  This allows options
        -: 7332:   to be given in any order, even with programs that were not written to
        -: 7333:   expect this.
        -: 7334:
        -: 7335:   RETURN_IN_ORDER is an option available to programs that were written
        -: 7336:   to expect options and other ARGV-elements in any order and that care about
        -: 7337:   the ordering of the two.  We describe each non-option ARGV-element
        -: 7338:   as if it were the argument of an option with character code 1.
        -: 7339:   Using `-' as the first character of the list of option characters
        -: 7340:   selects this mode of operation.
        -: 7341:
        -: 7342:   The special argument `--' forces an end of option-scanning regardless
        -: 7343:   of the value of `ordering'.  In the case of RETURN_IN_ORDER, only
        -: 7344:   `--' can cause `getopt' to return EOF with `optind' != ARGC.  */
        -: 7345:
        -: 7346:static enum
        -: 7347:{
        -: 7348:  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER
        -: 7349:} ordering;
        -: 7350:
        -: 7351:#ifdef	__GNU_LIBRARY__
        -: 7352:/* We want to avoid inclusion of string.h with non-GNU libraries
        -: 7353:   because there are many ways it can cause trouble.
        -: 7354:   On some systems, it contains special magic macros that don't work
        -: 7355:   in GCC.  */
        -: 7356:#include <string.h>
        -: 7357:#define	my_index	strchr
        -: 7358:#define	my_bcopy(src, dst, n)	memcpy ((dst), (src), (n))
        -: 7359:#else
        -: 7360:
        -: 7361:/* Avoid depending on library functions or files
        -: 7362:   whose names are inconsistent.  */
        -: 7363:
        -: 7364:char *getenv ();
        -: 7365:
        -: 7366:static char *
        -: 7367:my_index (str, chr)
        -: 7368:     const char *str;
        -: 7369:     int chr;
        -: 7370:{
        -: 7371:  while (*str)
        -: 7372:    {
        -: 7373:      if (*str == chr)
        -: 7374:	return (char *) str;
        -: 7375:      str++;
        -: 7376:    }
        -: 7377:  return 0;
        -: 7378:}
        -: 7379:
        -: 7380:static void
        -: 7381:my_bcopy (from, to, size)
        -: 7382:     const char *from;
        -: 7383:     char *to;
        -: 7384:     int size;
        -: 7385:{
        -: 7386:  int i;
        -: 7387:  for (i = 0; i < size; i++)
        -: 7388:    to[i] = from[i];
        -: 7389:}
        -: 7390:#endif				/* GNU C library.  */
        -: 7391:
        -: 7392:/* Handle permutation of arguments.  */
        -: 7393:
        -: 7394:/* Describe the part of ARGV that contains non-options that have
        -: 7395:   been skipped.  `first_nonopt' is the index in ARGV of the first of them;
        -: 7396:   `last_nonopt' is the index after the last of them.  */
        -: 7397:
        -: 7398:static int first_nonopt;
        -: 7399:static int last_nonopt;
        -: 7400:
        -: 7401:/* Exchange two adjacent subsequences of ARGV.
        -: 7402:   One subsequence is elements [first_nonopt,last_nonopt)
        -: 7403:   which contains all the non-options that have been skipped so far.
        -: 7404:   The other is elements [last_nonopt,optind), which contains all
        -: 7405:   the options processed since those non-options were skipped.
        -: 7406:
        -: 7407:   `first_nonopt' and `last_nonopt' are relocated so that they describe
        -: 7408:   the new indices of the non-options in ARGV after they are moved.  */
        -: 7409:
        -: 7410:static void
        -: 7411:exchange (argv)
        -: 7412:     char **argv;
        -: 7413:{
        -: 7414:  int nonopts_size = (last_nonopt - first_nonopt) * sizeof (char *);
        -: 7415:  char **temp = (char **) __alloca (nonopts_size);
        -: 7416:
        -: 7417:  /* Interchange the two blocks of data in ARGV.  */
        -: 7418:
        -: 7419:  my_bcopy ((char *) &argv[first_nonopt], (char *) temp, nonopts_size);
        -: 7420:  my_bcopy ((char *) &argv[last_nonopt], (char *) &argv[first_nonopt],
        -: 7421:	    (optind - last_nonopt) * sizeof (char *));
        -: 7422:  my_bcopy ((char *) temp,
        -: 7423:	    (char *) &argv[first_nonopt + optind - last_nonopt],
        -: 7424:	    nonopts_size);
        -: 7425:
        -: 7426:  /* Update records for the slots the non-options now occupy.  */
        -: 7427:
        -: 7428:  first_nonopt += (optind - last_nonopt);
        -: 7429:  last_nonopt = optind;
        -: 7430:}
        -: 7431:
        -: 7432:/* Scan elements of ARGV (whose length is ARGC) for option characters
        -: 7433:   given in OPTSTRING.
        -: 7434:
        -: 7435:   If an element of ARGV starts with '-', and is not exactly "-" or "--",
        -: 7436:   then it is an option element.  The characters of this element
        -: 7437:   (aside from the initial '-') are option characters.  If `getopt'
        -: 7438:   is called repeatedly, it returns successively each of the option characters
        -: 7439:   from each of the option elements.
        -: 7440:
        -: 7441:   If `getopt' finds another option character, it returns that character,
        -: 7442:   updating `optind' and `nextchar' so that the next call to `getopt' can
        -: 7443:   resume the scan with the following option character or ARGV-element.
        -: 7444:
        -: 7445:   If there are no more option characters, `getopt' returns `EOF'.
        -: 7446:   Then `optind' is the index in ARGV of the first ARGV-element
        -: 7447:   that is not an option.  (The ARGV-elements have been permuted
        -: 7448:   so that those that are not options now come last.)
        -: 7449:
        -: 7450:   OPTSTRING is a string containing the legitimate option characters.
        -: 7451:   If an option character is seen that is not listed in OPTSTRING,
        -: 7452:   return '?' after printing an error message.  If you set `opterr' to
        -: 7453:   zero, the error message is suppressed but we still return '?'.
        -: 7454:
        -: 7455:   If a char in OPTSTRING is followed by a colon, that means it wants an arg,
        -: 7456:   so the following text in the same ARGV-element, or the text of the following
        -: 7457:   ARGV-element, is returned in `optarg'.  Two colons mean an option that
        -: 7458:   wants an optional arg; if there is text in the current ARGV-element,
        -: 7459:   it is returned in `optarg', otherwise `optarg' is set to zero.
        -: 7460:
        -: 7461:   If OPTSTRING starts with `-' or `+', it requests different methods of
        -: 7462:   handling the non-option ARGV-elements.
        -: 7463:   See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.
        -: 7464:
        -: 7465:   Long-named options begin with `--' instead of `-'.
        -: 7466:   Their names may be abbreviated as long as the abbreviation is unique
        -: 7467:   or is an exact match for some defined option.  If they have an
        -: 7468:   argument, it follows the option name in the same ARGV-element, separated
        -: 7469:   from the option name by a `=', or else the in next ARGV-element.
        -: 7470:   When `getopt' finds a long-named option, it returns 0 if that option's
        -: 7471:   `flag' field is nonzero, the value of the option's `val' field
        -: 7472:   if the `flag' field is zero.
        -: 7473:
        -: 7474:   The elements of ARGV aren't really const, because we permute them.
        -: 7475:   But we pretend they're const in the prototype to be compatible
        -: 7476:   with other systems.
        -: 7477:
        -: 7478:   LONGOPTS is a vector of `struct option' terminated by an
        -: 7479:   element containing a name which is zero.
        -: 7480:
        -: 7481:   LONGIND returns the index in LONGOPT of the long-named option found.
        -: 7482:   It is only valid when a long-named option has been found by the most
        -: 7483:   recent call.
        -: 7484:
        -: 7485:   If LONG_ONLY is nonzero, '-' as well as '--' can introduce
        -: 7486:   long-named options.  */
        -: 7487:
        -: 7488:int
        -: 7489:_getopt_internal (argc, argv, optstring, longopts, longind, long_only)
        -: 7490:     int argc;
        -: 7491:     char *const *argv;
        -: 7492:     const char *optstring;
        -: 7493:     const struct option *longopts;
        -: 7494:     int *longind;
        -: 7495:     int long_only;
        -: 7496:{
        -: 7497:  int option_index;
        -: 7498:
        -: 7499:  optarg = 0;
        -: 7500:
        -: 7501:  /* Initialize the internal data when the first call is made.
        -: 7502:     Start processing options with ARGV-element 1 (since ARGV-element 0
        -: 7503:     is the program name); the sequence of previously skipped
        -: 7504:     non-option ARGV-elements is empty.  */
        -: 7505:
        -: 7506:  if (optind == 0)
        -: 7507:    {
        -: 7508:      first_nonopt = last_nonopt = optind = 1;
        -: 7509:
        -: 7510:      nextchar = NULL;
        -: 7511:
        -: 7512:      /* Determine how to handle the ordering of options and nonoptions.  */
        -: 7513:
        -: 7514:      if (optstring[0] == '-')
        -: 7515:	{
        -: 7516:	  ordering = RETURN_IN_ORDER;
        -: 7517:	  ++optstring;
        -: 7518:	}
        -: 7519:      else if (optstring[0] == '+')
        -: 7520:	{
        -: 7521:	  ordering = REQUIRE_ORDER;
        -: 7522:	  ++optstring;
        -: 7523:	}
        -: 7524:      else if (getenv ("POSIXLY_CORRECT") != NULL)
        -: 7525:	ordering = REQUIRE_ORDER;
        -: 7526:      else
        -: 7527:	ordering = PERMUTE;
        -: 7528:    }
        -: 7529:
        -: 7530:  if (nextchar == NULL || *nextchar == '\0')
        -: 7531:    {
        -: 7532:      if (ordering == PERMUTE)
        -: 7533:	{
        -: 7534:	  /* If we have just processed some options following some non-options,
        -: 7535:	     exchange them so that the options come first.  */
        -: 7536:
        -: 7537:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
        -: 7538:	    exchange ((char **) argv);
        -: 7539:	  else if (last_nonopt != optind)
        -: 7540:	    first_nonopt = optind;
        -: 7541:
        -: 7542:	  /* Now skip any additional non-options
        -: 7543:	     and extend the range of non-options previously skipped.  */
        -: 7544:
        -: 7545:	  while (optind < argc
        -: 7546:		 && (argv[optind][0] != '-' || argv[optind][1] == '\0')
        -: 7547:#ifdef GETOPT_COMPAT
        -: 7548:		 && (longopts == NULL
        -: 7549:		     || argv[optind][0] != '+' || argv[optind][1] == '\0')
        -: 7550:#endif				/* GETOPT_COMPAT */
        -: 7551:		 )
        -: 7552:	    optind++;
        -: 7553:	  last_nonopt = optind;
        -: 7554:	}
        -: 7555:
        -: 7556:      /* Special ARGV-element `--' means premature end of options.
        -: 7557:	 Skip it like a null option,
        -: 7558:	 then exchange with previous non-options as if it were an option,
        -: 7559:	 then skip everything else like a non-option.  */
        -: 7560:
        -: 7561:      if (optind != argc && !strcmp (argv[optind], "--"))
        -: 7562:	{
        -: 7563:	  optind++;
        -: 7564:
        -: 7565:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
        -: 7566:	    exchange ((char **) argv);
        -: 7567:	  else if (first_nonopt == last_nonopt)
        -: 7568:	    first_nonopt = optind;
        -: 7569:	  last_nonopt = argc;
        -: 7570:
        -: 7571:	  optind = argc;
        -: 7572:	}
        -: 7573:
        -: 7574:      /* If we have done all the ARGV-elements, stop the scan
        -: 7575:	 and back over any non-options that we skipped and permuted.  */
        -: 7576:
        -: 7577:      if (optind == argc)
        -: 7578:	{
        -: 7579:	  /* Set the next-arg-index to point at the non-options
        -: 7580:	     that we previously skipped, so the caller will digest them.  */
        -: 7581:	  if (first_nonopt != last_nonopt)
        -: 7582:	    optind = first_nonopt;
        -: 7583:	  return EOF;
        -: 7584:	}
        -: 7585:
        -: 7586:      /* If we have come to a non-option and did not permute it,
        -: 7587:	 either stop the scan or describe it to the caller and pass it by.  */
        -: 7588:
        -: 7589:      if ((argv[optind][0] != '-' || argv[optind][1] == '\0')
        -: 7590:#ifdef GETOPT_COMPAT
        -: 7591:	  && (longopts == NULL
        -: 7592:	      || argv[optind][0] != '+' || argv[optind][1] == '\0')
        -: 7593:#endif				/* GETOPT_COMPAT */
        -: 7594:	  )
        -: 7595:	{
        -: 7596:	  if (ordering == REQUIRE_ORDER)
        -: 7597:	    return EOF;
        -: 7598:	  optarg = argv[optind++];
        -: 7599:	  return 1;
        -: 7600:	}
        -: 7601:
        -: 7602:      /* We have found another option-ARGV-element.
        -: 7603:	 Start decoding its characters.  */
        -: 7604:
        -: 7605:      nextchar = (argv[optind] + 1
        -: 7606:		  + (longopts != NULL && argv[optind][1] == '-'));
        -: 7607:    }
        -: 7608:
        -: 7609:  if (longopts != NULL
        -: 7610:      && ((argv[optind][0] == '-'
        -: 7611:	   && (argv[optind][1] == '-' || long_only))
        -: 7612:#ifdef GETOPT_COMPAT
        -: 7613:	  || argv[optind][0] == '+'
        -: 7614:#endif				/* GETOPT_COMPAT */
        -: 7615:	  ))
        -: 7616:    {
        -: 7617:      const struct option *p;
        -: 7618:      char *s = nextchar;
        -: 7619:      int exact = 0;
        -: 7620:      int ambig = 0;
        -: 7621:      const struct option *pfound = NULL;
        -: 7622:      int indfound;
        -: 7623:
        -: 7624:      while (*s && *s != '=')
        -: 7625:	s++;
        -: 7626:
        -: 7627:      /* Test all options for either exact match or abbreviated matches.  */
        -: 7628:      for (p = longopts, option_index = 0; p->name;
        -: 7629:	   p++, option_index++)
        -: 7630:	if (!strncmp (p->name, nextchar, s - nextchar))
        -: 7631:	  {
        -: 7632:	    if (s - nextchar == strlen (p->name))
        -: 7633:	      {
        -: 7634:		/* Exact match found.  */
        -: 7635:		pfound = p;
        -: 7636:		indfound = option_index;
        -: 7637:		exact = 1;
        -: 7638:		break;
        -: 7639:	      }
        -: 7640:	    else if (pfound == NULL)
        -: 7641:	      {
        -: 7642:		/* First nonexact match found.  */
        -: 7643:		pfound = p;
        -: 7644:		indfound = option_index;
        -: 7645:	      }
        -: 7646:	    else
        -: 7647:	      /* Second nonexact match found.  */
        -: 7648:	      ambig = 1;
        -: 7649:	  }
        -: 7650:
        -: 7651:      if (ambig && !exact)
        -: 7652:	{
        -: 7653:	  if (opterr)
        -: 7654:	    fprintf (stderr, "%s: option `%s' is ambiguous\n",
        -: 7655:		    myname, argv[optind]);
        -: 7656:	  nextchar += strlen (nextchar);
        -: 7657:	  optind++;
        -: 7658:	  return '?';
        -: 7659:	}
        -: 7660:
        -: 7661:      if (pfound != NULL)
        -: 7662:	{
        -: 7663:	  option_index = indfound;
        -: 7664:	  optind++;
        -: 7665:	  if (*s)
        -: 7666:	    {
        -: 7667:	      /* Don't test has_arg with >, because some C compilers don't
        -: 7668:		 allow it to be used on enums.  */
        -: 7669:	      if (pfound->has_arg)
        -: 7670:		optarg = s + 1;
        -: 7671:	      else
        -: 7672:		{
        -: 7673:		  if (opterr)
        -: 7674:		    {
        -: 7675:		      if (argv[optind - 1][1] == '-')
        -: 7676:			/* --option */
        -: 7677:			fprintf (stderr,
        -: 7678:				 "%s: option `--%s' doesn't allow an argument\n",
        -: 7679:				 myname, pfound->name);
        -: 7680:		      else
        -: 7681:			/* +option or -option */
        -: 7682:			fprintf (stderr,
        -: 7683:			     "%s: option `%c%s' doesn't allow an argument\n",
        -: 7684:			     myname, argv[optind - 1][0], pfound->name);
        -: 7685:		    }
        -: 7686:		  nextchar += strlen (nextchar);
        -: 7687:		  return '?';
        -: 7688:		}
        -: 7689:	    }
        -: 7690:	  else if (pfound->has_arg == 1)
        -: 7691:	    {
        -: 7692:	      if (optind < argc)
        -: 7693:		optarg = argv[optind++];
        -: 7694:	      else
        -: 7695:		{
        -: 7696:		  if (opterr)
        -: 7697:		    fprintf (stderr, "%s: option `%s' requires an argument\n",
        -: 7698:			     myname, argv[optind - 1]);
        -: 7699:		  nextchar += strlen (nextchar);
        -: 7700:		  return optstring[0] == ':' ? ':' : '?';
        -: 7701:		}
        -: 7702:	    }
        -: 7703:	  nextchar += strlen (nextchar);
        -: 7704:	  if (longind != NULL)
        -: 7705:	    *longind = option_index;
        -: 7706:	  if (pfound->flag)
        -: 7707:	    {
        -: 7708:	      *(pfound->flag) = pfound->val;
        -: 7709:	      return 0;
        -: 7710:	    }
        -: 7711:	  return pfound->val;
        -: 7712:	}
        -: 7713:      /* Can't find it as a long option.  If this is not getopt_long_only,
        -: 7714:	 or the option starts with '--' or is not a valid short
        -: 7715:	 option, then it's an error.
        -: 7716:	 Otherwise interpret it as a short option.  */
        -: 7717:      if (!long_only || argv[optind][1] == '-'
        -: 7718:#ifdef GETOPT_COMPAT
        -: 7719:	  || argv[optind][0] == '+'
        -: 7720:#endif				/* GETOPT_COMPAT */
        -: 7721:	  || my_index (optstring, *nextchar) == NULL)
        -: 7722:	{
        -: 7723:	  if (opterr)
        -: 7724:	    {
        -: 7725:	      if (argv[optind][1] == '-')
        -: 7726:		/* --option */
        -: 7727:		fprintf (stderr, "%s: unrecognized option `--%s'\n",
        -: 7728:			 myname, nextchar);
        -: 7729:	      else
        -: 7730:		/* +option or -option */
        -: 7731:		fprintf (stderr, "%s: unrecognized option `%c%s'\n",
        -: 7732:			 myname, argv[optind][0], nextchar);
        -: 7733:	    }
        -: 7734:	  nextchar = (char *) "";
        -: 7735:	  optind++;
        -: 7736:	  return '?';
        -: 7737:	}
        -: 7738:    }
        -: 7739:
        -: 7740:  /* Look at and handle the next option-character.  */
        -: 7741:
        -: 7742:  {
        -: 7743:    char c = *nextchar++;
        -: 7744:    char *temp = my_index (optstring, c);
        -: 7745:
        -: 7746:    /* Increment `optind' when we start to process its last character.  */
        -: 7747:    if (*nextchar == '\0')
        -: 7748:      ++optind;
        -: 7749:
        -: 7750:    if (temp == NULL || c == ':')
        -: 7751:      {
        -: 7752:	if (opterr)
        -: 7753:	  {
        -: 7754:#if 0
        -: 7755:	    if (c < 040 || c >= 0177)
        -: 7756:	      fprintf (stderr, "%s: unrecognized option, character code 0%o\n",
        -: 7757:		       myname, c);
        -: 7758:	    else
        -: 7759:	      fprintf (stderr, "%s: unrecognized option `-%c'\n", myname, c);
        -: 7760:#else
        -: 7761:	    /* 1003.2 specifies the format of this message.  */
        -: 7762:	    fprintf (stderr, "%s: illegal option -- %c\n", myname, c);
        -: 7763:#endif
        -: 7764:	  }
        -: 7765:	optopt = c;
        -: 7766:	return '?';
        -: 7767:      }
        -: 7768:    if (temp[1] == ':')
        -: 7769:      {
        -: 7770:	if (temp[2] == ':')
        -: 7771:	  {
        -: 7772:	    /* This is an option that accepts an argument optionally.  */
        -: 7773:	    if (*nextchar != '\0')
        -: 7774:	      {
        -: 7775:		optarg = nextchar;
        -: 7776:		optind++;
        -: 7777:	      }
        -: 7778:	    else
        -: 7779:	      optarg = 0;
        -: 7780:	    nextchar = NULL;
        -: 7781:	  }
        -: 7782:	else
        -: 7783:	  {
        -: 7784:	    /* This is an option that requires an argument.  */
        -: 7785:	    if (*nextchar != '\0')
        -: 7786:	      {
        -: 7787:		optarg = nextchar;
        -: 7788:		/* If we end this ARGV-element by taking the rest as an arg,
        -: 7789:		   we must advance to the next element now.  */
        -: 7790:		optind++;
        -: 7791:	      }
        -: 7792:	    else if (optind == argc)
        -: 7793:	      {
        -: 7794:		if (opterr)
        -: 7795:		  {
        -: 7796:#if 0
        -: 7797:		    fprintf (stderr, "%s: option `-%c' requires an argument\n",
        -: 7798:			     myname, c);
        -: 7799:#else
        -: 7800:		    /* 1003.2 specifies the format of this message.  */
        -: 7801:		    fprintf (stderr, "%s: option requires an argument -- %c\n",
        -: 7802:			     myname, c);
        -: 7803:#endif
        -: 7804:		  }
        -: 7805:		optopt = c;
        -: 7806:		if (optstring[0] == ':')
        -: 7807:		  c = ':';
        -: 7808:		else
        -: 7809:		  c = '?';
        -: 7810:	      }
        -: 7811:	    else
        -: 7812:	      /* We already incremented `optind' once;
        -: 7813:		 increment it again when taking next ARGV-elt as argument.  */
        -: 7814:	      optarg = argv[optind++];
        -: 7815:	    nextchar = NULL;
        -: 7816:	  }
        -: 7817:      }
        -: 7818:    return c;
        -: 7819:  }
        -: 7820:}
        -: 7821:
        -: 7822:int
        -: 7823:getopt (argc, argv, optstring)
        -: 7824:     int argc;
        -: 7825:     char *const *argv;
        -: 7826:     const char *optstring;
        -: 7827:{
        -: 7828:  return _getopt_internal (argc, argv, optstring,
        -: 7829:			   (const struct option *) 0,
        -: 7830:			   (int *) 0,
        -: 7831:			   0);
        -: 7832:}
        -: 7833:
        -: 7834:#endif	/* _LIBC or not __GNU_LIBRARY__.  */
        -: 7835:
        -: 7836:#ifdef TEST
        -: 7837:
        -: 7838:/* Compile with -DTEST to make an executable for use in testing
        -: 7839:   the above definition of `getopt'.  */
        -: 7840:
        -: 7841:int
        -: 7842:main (argc, argv)
        -: 7843:     int argc;
        -: 7844:     char **argv;
        -: 7845:{
        -: 7846:  int c;
        -: 7847:  int digit_optind = 0;
        -: 7848:
        -: 7849:  while (1)
        -: 7850:    {
        -: 7851:      int this_option_optind = optind ? optind : 1;
        -: 7852:
        -: 7853:      c = getopt (argc, argv, "abc:d:0123456789");
        -: 7854:      if (c == EOF)
        -: 7855:	break;
        -: 7856:
        -: 7857:      switch (c)
        -: 7858:	{
        -: 7859:	case '0':
        -: 7860:	case '1':
        -: 7861:	case '2':
        -: 7862:	case '3':
        -: 7863:	case '4':
        -: 7864:	case '5':
        -: 7865:	case '6':
        -: 7866:	case '7':
        -: 7867:	case '8':
        -: 7868:	case '9':
        -: 7869:	  if (digit_optind != 0 && digit_optind != this_option_optind)
        -: 7870:	    printf ("digits occur in two different argv-elements.\n");
        -: 7871:	  digit_optind = this_option_optind;
        -: 7872:	  printf ("option %c\n", c);
        -: 7873:	  break;
        -: 7874:
        -: 7875:	case 'a':
        -: 7876:	  printf ("option a\n");
        -: 7877:	  break;
        -: 7878:
        -: 7879:	case 'b':
        -: 7880:	  printf ("option b\n");
        -: 7881:	  break;
        -: 7882:
        -: 7883:	case 'c':
        -: 7884:	  printf ("option c with value `%s'\n", optarg);
        -: 7885:	  break;
        -: 7886:
        -: 7887:	case '?':
        -: 7888:	  break;
        -: 7889:
        -: 7890:	default:
        -: 7891:	  printf ("?? getopt returned character code 0%o ??\n", c);
        -: 7892:	}
        -: 7893:    }
        -: 7894:
        -: 7895:  if (optind < argc)
        -: 7896:    {
        -: 7897:      printf ("non-option ARGV-elements: ");
        -: 7898:      while (optind < argc)
        -: 7899:	printf ("%s ", argv[optind++]);
        -: 7900:      printf ("\n");
        -: 7901:    }
        -: 7902:
        -: 7903:  exit (0);
        -: 7904:}
        -: 7905:
        -: 7906:#endif /* TEST */
        -: 7907:/* getopt_long and getopt_long_only entry points for GNU getopt.
        -: 7908:   Copyright (C) 1987, 88, 89, 90, 91, 92, 1993
        -: 7909:	Free Software Foundation, Inc.
        -: 7910:
        -: 7911:   This program is free software; you can redistribute it and/or modify it
        -: 7912:   under the terms of the GNU General Public License as published by the
        -: 7913:   Free Software Foundation; either version 2, or (at your option) any
        -: 7914:   later version.
        -: 7915:
        -: 7916:   This program is distributed in the hope that it will be useful,
        -: 7917:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 7918:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 7919:   GNU General Public License for more details.
        -: 7920:
        -: 7921:   You should have received a copy of the GNU General Public License
        -: 7922:   along with this program; if not, write to the Free Software
        -: 7923:   Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 7924:
        -: 7925:#ifdef HAVE_CONFIG_H
        -: 7926:#include "config.h"
        -: 7927:#endif
        -: 7928:
        -: 7929:#include "getopt.h"
        -: 7930:
        -: 7931:#if !__STDC__ && !defined(const) && IN_GCC
        -: 7932:#define const
        -: 7933:#endif
        -: 7934:
        -: 7935:#include <stdio.h>
        -: 7936:
        -: 7937:/* Comment out all this code if we are using the GNU C Library, and are not
        -: 7938:   actually compiling the library itself.  This code is part of the GNU C
        -: 7939:   Library, but also included in many other GNU distributions.  Compiling
        -: 7940:   and linking in this code is a waste when using the GNU C library
        -: 7941:   (especially if it is a shared library).  Rather than having every GNU
        -: 7942:   program understand `configure --with-gnu-libc' and omit the object files,
        -: 7943:   it is simpler to just do this in the source for each such file.  */
        -: 7944:
        -: 7945:#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
        -: 7946:
        -: 7947:
        -: 7948:/* This needs to come after some library #include
        -: 7949:   to get __GNU_LIBRARY__ defined.  */
        -: 7950:#ifdef __GNU_LIBRARY__
        -: 7951:#include <stdlib.h>
        -: 7952:#else
        -: 7953:char *getenv ();
        -: 7954:#endif
        -: 7955:
        -: 7956:#ifndef	NULL
        -: 7957:#define NULL 0
        -: 7958:#endif
        -: 7959:
        -: 7960:int
        -: 7961:getopt_long (argc, argv, options, long_options, opt_index)
        -: 7962:     int argc;
        -: 7963:     char *const *argv;
        -: 7964:     const char *options;
        -: 7965:     const struct option *long_options;
        -: 7966:     int *opt_index;
        -: 7967:{
        -: 7968:  return _getopt_internal (argc, argv, options, long_options, opt_index, 0);
        -: 7969:}
        -: 7970:
        -: 7971:/* Like getopt_long, but '-' as well as '--' can indicate a long option.
        -: 7972:   If an option that starts with '-' (not '--') doesn't match a long option,
        -: 7973:   but does match a short option, it is parsed as a short option
        -: 7974:   instead.  */
        -: 7975:
        -: 7976:int
        -: 7977:getopt_long_only (argc, argv, options, long_options, opt_index)
        -: 7978:     int argc;
        -: 7979:     char *const *argv;
        -: 7980:     const char *options;
        -: 7981:     const struct option *long_options;
        -: 7982:     int *opt_index;
        -: 7983:{
        -: 7984:  return _getopt_internal (argc, argv, options, long_options, opt_index, 1);
        -: 7985:}
        -: 7986:
        -: 7987:
        -: 7988:#endif	/* _LIBC or not __GNU_LIBRARY__.  */
        -: 7989:
        -: 7990:#ifdef TEST
        -: 7991:
        -: 7992:#include <stdio.h>
        -: 7993:
        -: 7994:int
        -: 7995:main (argc, argv)
        -: 7996:     int argc;
        -: 7997:     char **argv;
        -: 7998:{
        -: 7999:  int c;
        -: 8000:  int digit_optind = 0;
        -: 8001:
        -: 8002:  while (1)
        -: 8003:    {
        -: 8004:      int this_option_optind = optind ? optind : 1;
        -: 8005:      int option_index = 0;
        -: 8006:      static struct option long_options[] =
        -: 8007:      {
        -: 8008:	{"add", 1, 0, 0},
        -: 8009:	{"append", 0, 0, 0},
        -: 8010:	{"delete", 1, 0, 0},
        -: 8011:	{"verbose", 0, 0, 0},
        -: 8012:	{"create", 0, 0, 0},
        -: 8013:	{"file", 1, 0, 0},
        -: 8014:	{0, 0, 0, 0}
        -: 8015:      };
        -: 8016:
        -: 8017:      c = getopt_long (argc, argv, "abc:d:0123456789",
        -: 8018:		       long_options, &option_index);
        -: 8019:      if (c == EOF)
        -: 8020:	break;
        -: 8021:
        -: 8022:      switch (c)
        -: 8023:	{
        -: 8024:	case 0:
        -: 8025:	  printf ("option %s", long_options[option_index].name);
        -: 8026:	  if (optarg)
        -: 8027:	    printf (" with arg %s", optarg);
        -: 8028:	  printf ("\n");
        -: 8029:	  break;
        -: 8030:
        -: 8031:	case '0':
        -: 8032:	case '1':
        -: 8033:	case '2':
        -: 8034:	case '3':
        -: 8035:	case '4':
        -: 8036:	case '5':
        -: 8037:	case '6':
        -: 8038:	case '7':
        -: 8039:	case '8':
        -: 8040:	case '9':
        -: 8041:	  if (digit_optind != 0 && digit_optind != this_option_optind)
        -: 8042:	    printf ("digits occur in two different argv-elements.\n");
        -: 8043:	  digit_optind = this_option_optind;
        -: 8044:	  printf ("option %c\n", c);
        -: 8045:	  break;
        -: 8046:
        -: 8047:	case 'a':
        -: 8048:	  printf ("option a\n");
        -: 8049:	  break;
        -: 8050:
        -: 8051:	case 'b':
        -: 8052:	  printf ("option b\n");
        -: 8053:	  break;
        -: 8054:
        -: 8055:	case 'c':
        -: 8056:	  printf ("option c with value `%s'\n", optarg);
        -: 8057:	  break;
        -: 8058:
        -: 8059:	case 'd':
        -: 8060:	  printf ("option d with value `%s'\n", optarg);
        -: 8061:	  break;
        -: 8062:
        -: 8063:	case '?':
        -: 8064:	  break;
        -: 8065:
        -: 8066:	default:
        -: 8067:	  printf ("?? getopt returned character code 0%o ??\n", c);
        -: 8068:	}
        -: 8069:    }
        -: 8070:
        -: 8071:  if (optind < argc)
        -: 8072:    {
        -: 8073:      printf ("non-option ARGV-elements: ");
        -: 8074:      while (optind < argc)
        -: 8075:	printf ("%s ", argv[optind++]);
        -: 8076:      printf ("\n");
        -: 8077:    }
        -: 8078:
        -: 8079:  exit (0);
        -: 8080:}
        -: 8081:
        -: 8082:#endif /* TEST */
