        -:    0:Source:regcomp.c
        -:    0:Graph:sed.gcno
        -:    0:Data:sed.gcda
        -:    0:Runs:370
        -:    1:/* Extended regular expression matching and search library.
        -:    2:   Copyright (C) 2002 Free Software Foundation, Inc.
        -:    3:   This file is part of the GNU C Library.
        -:    4:   Contributed by Isamu Hasegawa <isamu@yamato.ibm.com>.
        -:    5:
        -:    6:   The GNU C Library is free software; you can redistribute it and/or
        -:    7:   modify it under the terms of the GNU Lesser General Public
        -:    8:   License as published by the Free Software Foundation; either
        -:    9:   version 2.1 of the License, or (at your option) any later version.
        -:   10:
        -:   11:   The GNU C Library is distributed in the hope that it will be useful,
        -:   12:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:   14:   Lesser General Public License for more details.
        -:   15:
        -:   16:   You should have received a copy of the GNU Lesser General Public
        -:   17:   License along with the GNU C Library; if not, write to the Free
        -:   18:   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
        -:   19:   02111-1307 USA.  */
        -:   20:
        -:   21:/*
        -:   22:  Moved function prototypes from this file to regcomp.h to allow
        -:   23:  for the *.c file merge required for C subjects on SIR -- July
        -:   24:  2006 by Kyle R. Murphy
        -:   25:*/
        -:   26:
        -:   27:#include "regcomp.h"
        -:   28:
        -:   29:
        -:   30:/* This table gives an error message for each of the error codes listed
        -:   31:   in regex.h.  Obviously the order here has to be same as there.
        -:   32:   POSIX doesn't require that we do anything for REG_NOERROR,
        -:   33:   but why not be nice?  */
        -:   34:
        -:   35:const char __re_error_msgid[] attribute_hidden =
        -:   36:  {
        -:   37:#define REG_NOERROR_IDX	0
        -:   38:    gettext_noop ("Success")	/* REG_NOERROR */
        -:   39:    "\0"
        -:   40:#define REG_NOMATCH_IDX (REG_NOERROR_IDX + sizeof "Success")
        -:   41:    gettext_noop ("No match")	/* REG_NOMATCH */
        -:   42:    "\0"
        -:   43:#define REG_BADPAT_IDX	(REG_NOMATCH_IDX + sizeof "No match")
        -:   44:    gettext_noop ("Invalid regular expression") /* REG_BADPAT */
        -:   45:    "\0"
        -:   46:#define REG_ECOLLATE_IDX (REG_BADPAT_IDX + sizeof "Invalid regular expression")
        -:   47:    gettext_noop ("Invalid collation character") /* REG_ECOLLATE */
        -:   48:    "\0"
        -:   49:#define REG_ECTYPE_IDX	(REG_ECOLLATE_IDX + sizeof "Invalid collation character")
        -:   50:    gettext_noop ("Invalid character class name") /* REG_ECTYPE */
        -:   51:    "\0"
        -:   52:#define REG_EESCAPE_IDX	(REG_ECTYPE_IDX + sizeof "Invalid character class name")
        -:   53:    gettext_noop ("Trailing backslash") /* REG_EESCAPE */
        -:   54:    "\0"
        -:   55:#define REG_ESUBREG_IDX	(REG_EESCAPE_IDX + sizeof "Trailing backslash")
        -:   56:    gettext_noop ("Invalid back reference") /* REG_ESUBREG */
        -:   57:    "\0"
        -:   58:#define REG_EBRACK_IDX	(REG_ESUBREG_IDX + sizeof "Invalid back reference")
        -:   59:    gettext_noop ("Unmatched [ or [^")	/* REG_EBRACK */
        -:   60:    "\0"
        -:   61:#define REG_EPAREN_IDX	(REG_EBRACK_IDX + sizeof "Unmatched [ or [^")
        -:   62:    gettext_noop ("Unmatched ( or \\(") /* REG_EPAREN */
        -:   63:    "\0"
        -:   64:#define REG_EBRACE_IDX	(REG_EPAREN_IDX + sizeof "Unmatched ( or \\(")
        -:   65:    gettext_noop ("Unmatched \\{") /* REG_EBRACE */
        -:   66:    "\0"
        -:   67:#define REG_BADBR_IDX	(REG_EBRACE_IDX + sizeof "Unmatched \\{")
        -:   68:    gettext_noop ("Invalid content of \\{\\}") /* REG_BADBR */
        -:   69:    "\0"
        -:   70:#define REG_ERANGE_IDX	(REG_BADBR_IDX + sizeof "Invalid content of \\{\\}")
        -:   71:    gettext_noop ("Invalid range end")	/* REG_ERANGE */
        -:   72:    "\0"
        -:   73:#define REG_ESPACE_IDX	(REG_ERANGE_IDX + sizeof "Invalid range end")
        -:   74:    gettext_noop ("Memory exhausted") /* REG_ESPACE */
        -:   75:    "\0"
        -:   76:#define REG_BADRPT_IDX	(REG_ESPACE_IDX + sizeof "Memory exhausted")
        -:   77:    gettext_noop ("Invalid preceding regular expression") /* REG_BADRPT */
        -:   78:    "\0"
        -:   79:#define REG_EEND_IDX	(REG_BADRPT_IDX + sizeof "Invalid preceding regular expression")
        -:   80:    gettext_noop ("Premature end of regular expression") /* REG_EEND */
        -:   81:    "\0"
        -:   82:#define REG_ESIZE_IDX	(REG_EEND_IDX + sizeof "Premature end of regular expression")
        -:   83:    gettext_noop ("Regular expression too big") /* REG_ESIZE */
        -:   84:    "\0"
        -:   85:#define REG_ERPAREN_IDX	(REG_ESIZE_IDX + sizeof "Regular expression too big")
        -:   86:    gettext_noop ("Unmatched ) or \\)") /* REG_ERPAREN */
        -:   87:  };
        -:   88:
        -:   89:const size_t __re_error_msgid_idx[] attribute_hidden =
        -:   90:  {
        -:   91:    REG_NOERROR_IDX,
        -:   92:    REG_NOMATCH_IDX,
        -:   93:    REG_BADPAT_IDX,
        -:   94:    REG_ECOLLATE_IDX,
        -:   95:    REG_ECTYPE_IDX,
        -:   96:    REG_EESCAPE_IDX,
        -:   97:    REG_ESUBREG_IDX,
        -:   98:    REG_EBRACK_IDX,
        -:   99:    REG_EPAREN_IDX,
        -:  100:    REG_EBRACE_IDX,
        -:  101:    REG_BADBR_IDX,
        -:  102:    REG_ERANGE_IDX,
        -:  103:    REG_ESPACE_IDX,
        -:  104:    REG_BADRPT_IDX,
        -:  105:    REG_EEND_IDX,
        -:  106:    REG_ESIZE_IDX,
        -:  107:    REG_ERPAREN_IDX
        -:  108:  };
        -:  109:
        -:  110:/* Entry points for GNU code.  */
        -:  111:
        -:  112:/* re_compile_pattern is the GNU regular expression compiler: it
        -:  113:   compiles PATTERN (of length LENGTH) and puts the result in BUFP.
        -:  114:   Returns 0 if the pattern was valid, otherwise an error string.
        -:  115:
        -:  116:   Assumes the `allocated' (and perhaps `buffer') and `translate' fields
        -:  117:   are set in BUFP on entry.  */
        -:  118:
        -:  119:const char *
function re_compile_pattern called 610 returned 100% blocks executed 80%
      610:  120:re_compile_pattern (pattern, length, bufp)
        -:  121:    const char *pattern;
        -:  122:    size_t length;
        -:  123:    struct re_pattern_buffer *bufp;
        -:  124:{
        -:  125:  reg_errcode_t ret;
        -:  126:
        -:  127:  /* And GNU code determines whether or not to get register information
        -:  128:     by passing null for the REGS argument to re_match, etc., not by
        -:  129:     setting no_sub.  */
      610:  130:  bufp->no_sub = 0;
        -:  131:
        -:  132:  /* Match anchors at newline.  */
      610:  133:  bufp->newline_anchor = 1;
        -:  134:
      610:  135:  ret = re_compile_internal (bufp, pattern, length, re_syntax_options);
call    0 returned 610
        -:  136:
      610:  137:  if (!ret)
branch  0 taken 610 (fallthrough)
branch  1 taken 0
      610:  138:    return NULL;
    #####:  139:  return gettext (__re_error_msgid + __re_error_msgid_idx[(int) ret]);
        -:  140:}
        -:  141:#ifdef _LIBC
        -:  142:weak_alias (__re_compile_pattern, re_compile_pattern)
        -:  143:#endif
        -:  144:
        -:  145:/* Set by `re_set_syntax' to the current regexp syntax to recognize.  Can
        -:  146:   also be assigned to arbitrarily: each pattern buffer stores its own
        -:  147:   syntax, so it can be changed between regex compilations.  */
        -:  148:/* This has no initializer because initialized variables in Emacs
        -:  149:   become read-only after dumping.  */
        -:  150:reg_syntax_t re_syntax_options;
        -:  151:
        -:  152:
        -:  153:/* Specify the precise syntax of regexps for compilation.  This provides
        -:  154:   for compatibility for various utilities which historically have
        -:  155:   different, incompatible syntaxes.
        -:  156:
        -:  157:   The argument SYNTAX is a bit mask comprised of the various bits
        -:  158:   defined in regex.h.  We return the old syntax.  */
        -:  159:
        -:  160:reg_syntax_t
function re_set_syntax called 610 returned 100% blocks executed 100%
      610:  161:re_set_syntax (syntax)
        -:  162:    reg_syntax_t syntax;
        -:  163:{
      610:  164:  reg_syntax_t ret = re_syntax_options;
        -:  165:
      610:  166:  re_syntax_options = syntax;
      610:  167:  return ret;
        -:  168:}
        -:  169:#ifdef _LIBC
        -:  170:weak_alias (__re_set_syntax, re_set_syntax)
        -:  171:#endif
        -:  172:
        -:  173:int
function re_compile_fastmap called 0 returned 0% blocks executed 0%
    #####:  174:re_compile_fastmap (bufp)
        -:  175:    struct re_pattern_buffer *bufp;
        -:  176:{
    #####:  177:  re_dfa_t *dfa = (re_dfa_t *) bufp->buffer;
    #####:  178:  char *fastmap = bufp->fastmap;
        -:  179:
    #####:  180:  memset (fastmap, '\0', sizeof (char) * SBC_MAX);
    #####:  181:  re_compile_fastmap_iter (bufp, dfa->init_state, fastmap);
call    0 never executed
    #####:  182:  if (dfa->init_state != dfa->init_state_word)
branch  0 never executed
branch  1 never executed
    #####:  183:    re_compile_fastmap_iter (bufp, dfa->init_state_word, fastmap);
call    0 never executed
    #####:  184:  if (dfa->init_state != dfa->init_state_nl)
branch  0 never executed
branch  1 never executed
    #####:  185:    re_compile_fastmap_iter (bufp, dfa->init_state_nl, fastmap);
call    0 never executed
    #####:  186:  if (dfa->init_state != dfa->init_state_begbuf)
branch  0 never executed
branch  1 never executed
    #####:  187:    re_compile_fastmap_iter (bufp, dfa->init_state_begbuf, fastmap);
call    0 never executed
    #####:  188:  bufp->fastmap_accurate = 1;
    #####:  189:  return 0;
        -:  190:}
        -:  191:#ifdef _LIBC
        -:  192:weak_alias (__re_compile_fastmap, re_compile_fastmap)
        -:  193:#endif
        -:  194:
        -:  195:static inline void
function re_set_fastmap called 0 returned 0% blocks executed 0%
    #####:  196:re_set_fastmap (char *fastmap, int icase, int ch)
        -:  197:{
    #####:  198:  fastmap[ch] = 1;
    #####:  199:  if (icase)
branch  0 never executed
branch  1 never executed
    #####:  200:    fastmap[tolower (ch)] = 1;
    #####:  201:}
        -:  202:
        -:  203:/* Helper function for re_compile_fastmap.
        -:  204:   Compile fastmap for the initial_state INIT_STATE.  */
        -:  205:
        -:  206:static void
function re_compile_fastmap_iter called 0 returned 0% blocks executed 0%
    #####:  207:re_compile_fastmap_iter (bufp, init_state, fastmap)
        -:  208:     regex_t *bufp;
        -:  209:     const re_dfastate_t *init_state;
        -:  210:     char *fastmap;
        -:  211:{
    #####:  212:  re_dfa_t *dfa = (re_dfa_t *) bufp->buffer;
        -:  213:  int node_cnt;
    #####:  214:  int icase = (MB_CUR_MAX == 1 && (bufp->syntax & RE_ICASE));
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  215:  for (node_cnt = 0; node_cnt < init_state->nodes.nelem; ++node_cnt)
branch  0 never executed
branch  1 never executed
        -:  216:    {
    #####:  217:      int node = init_state->nodes.elems[node_cnt];
    #####:  218:      re_token_type_t type = dfa->nodes[node].type;
        -:  219:
    #####:  220:      if (type == CHARACTER)
branch  0 never executed
branch  1 never executed
    #####:  221:	re_set_fastmap (fastmap, icase, dfa->nodes[node].opr.c);
call    0 never executed
    #####:  222:      else if (type == SIMPLE_BRACKET)
branch  0 never executed
branch  1 never executed
        -:  223:	{
        -:  224:	  int i, j, ch;
    #####:  225:	  for (i = 0, ch = 0; i < BITSET_UINTS; ++i)
branch  0 never executed
branch  1 never executed
    #####:  226:	    for (j = 0; j < UINT_BITS; ++j, ++ch)
branch  0 never executed
branch  1 never executed
    #####:  227:	      if (dfa->nodes[node].opr.sbcset[i] & (1 << j))
branch  0 never executed
branch  1 never executed
    #####:  228:		re_set_fastmap (fastmap, icase, ch);
call    0 never executed
        -:  229:	}
        -:  230:#ifdef RE_ENABLE_I18N
        -:  231:      else if (type == COMPLEX_BRACKET)
        -:  232:	{
        -:  233:	  int i;
        -:  234:	  re_charset_t *cset = dfa->nodes[node].opr.mbcset;
        -:  235:	  if (cset->non_match || cset->ncoll_syms || cset->nequiv_classes
        -:  236:	      || cset->nranges || cset->nchar_classes)
        -:  237:	    {
        -:  238:# ifdef _LIBC
        -:  239:	      if (_NL_CURRENT_WORD (LC_COLLATE, _NL_COLLATE_NRULES) != 0)
        -:  240:		{
        -:  241:		  /* In this case we want to catch the bytes which are
        -:  242:		     the first byte of any collation elements.
        -:  243:		     e.g. In da_DK, we want to catch 'a' since "aa"
        -:  244:			  is a valid collation element, and don't catch
        -:  245:			  'b' since 'b' is the only collation element
        -:  246:			  which starts from 'b'.  */
        -:  247:		  int j, ch;
        -:  248:		  const int32_t *table = (const int32_t *)
        -:  249:		    _NL_CURRENT (LC_COLLATE, _NL_COLLATE_TABLEMB);
        -:  250:		  for (i = 0, ch = 0; i < BITSET_UINTS; ++i)
        -:  251:		    for (j = 0; j < UINT_BITS; ++j, ++ch)
        -:  252:		      if (table[ch] < 0)
        -:  253:			re_set_fastmap (fastmap, icase, ch);
        -:  254:		}
        -:  255:# else
        -:  256:	      if (MB_CUR_MAX > 1)
        -:  257:		for (i = 0; i < SBC_MAX; ++i)
        -:  258:		  if (__btowc (i) == WEOF)
        -:  259:		    re_set_fastmap (fastmap, icase, i);
        -:  260:# endif /* not _LIBC */
        -:  261:	    }
        -:  262:	  for (i = 0; i < cset->nmbchars; ++i)
        -:  263:	    {
        -:  264:	      char buf[256];
        -:  265:	      mbstate_t state;
        -:  266:	      memset (&state, '\0', sizeof (state));
        -:  267:	      wcrtomb (buf, cset->mbchars[i], &state);
        -:  268:	      re_set_fastmap (fastmap, icase, *(unsigned char *) buf);
        -:  269:	    }
        -:  270:	}
        -:  271:#endif /* RE_ENABLE_I18N */
    #####:  272:      else if (type == END_OF_RE || type == OP_PERIOD)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  273:	{
    #####:  274:	  memset (fastmap, '\1', sizeof (char) * SBC_MAX);
    #####:  275:	  if (type == END_OF_RE)
branch  0 never executed
branch  1 never executed
    #####:  276:	    bufp->can_be_null = 1;
    #####:  277:	  return;
        -:  278:	}
        -:  279:    }
        -:  280:}
        -:  281:
        -:  282:/* Entry point for POSIX code.  */
        -:  283:/* regcomp takes a regular expression as a string and compiles it.
        -:  284:
        -:  285:   PREG is a regex_t *.  We do not expect any fields to be initialized,
        -:  286:   since POSIX says we shouldn't.  Thus, we set
        -:  287:
        -:  288:     `buffer' to the compiled pattern;
        -:  289:     `used' to the length of the compiled pattern;
        -:  290:     `syntax' to RE_SYNTAX_POSIX_EXTENDED if the
        -:  291:       REG_EXTENDED bit in CFLAGS is set; otherwise, to
        -:  292:       RE_SYNTAX_POSIX_BASIC;
        -:  293:     `newline_anchor' to REG_NEWLINE being set in CFLAGS;
        -:  294:     `fastmap' to an allocated space for the fastmap;
        -:  295:     `fastmap_accurate' to zero;
        -:  296:     `re_nsub' to the number of subexpressions in PATTERN.
        -:  297:
        -:  298:   PATTERN is the address of the pattern string.
        -:  299:
        -:  300:   CFLAGS is a series of bits which affect compilation.
        -:  301:
        -:  302:     If REG_EXTENDED is set, we use POSIX extended syntax; otherwise, we
        -:  303:     use POSIX basic syntax.
        -:  304:
        -:  305:     If REG_NEWLINE is set, then . and [^...] don't match newline.
        -:  306:     Also, regexec will try a match beginning after every newline.
        -:  307:
        -:  308:     If REG_ICASE is set, then we considers upper- and lowercase
        -:  309:     versions of letters to be equivalent when matching.
        -:  310:
        -:  311:     If REG_NOSUB is set, then when PREG is passed to regexec, that
        -:  312:     routine will report only success or failure, and nothing about the
        -:  313:     registers.
        -:  314:
        -:  315:   It returns 0 if it succeeds, nonzero if it doesn't.  (See regex.h for
        -:  316:   the return codes and their meanings.)  */
        -:  317:
        -:  318:int
function regcomp called 0 returned 0% blocks executed 0%
    #####:  319:regcomp (preg, pattern, cflags)
        -:  320:    regex_t *__restrict preg;
        -:  321:    const char *__restrict pattern;
        -:  322:    int cflags;
        -:  323:{
        -:  324:  reg_errcode_t ret;
    #####:  325:  reg_syntax_t syntax = ((cflags & REG_EXTENDED) ? RE_SYNTAX_POSIX_EXTENDED
    #####:  326:			 : RE_SYNTAX_POSIX_BASIC);
branch  0 never executed
branch  1 never executed
        -:  327:
    #####:  328:  preg->buffer = NULL;
    #####:  329:  preg->allocated = 0;
    #####:  330:  preg->used = 0;
        -:  331:
        -:  332:  /* Try to allocate space for the fastmap.  */
    #####:  333:  preg->fastmap = re_malloc (char, SBC_MAX);
    #####:  334:  if (BE (preg->fastmap == NULL, 0))
branch  0 never executed
branch  1 never executed
    #####:  335:    return REG_ESPACE;
        -:  336:
    #####:  337:  syntax |= (cflags & REG_ICASE) ? RE_ICASE : 0;
        -:  338:
        -:  339:  /* If REG_NEWLINE is set, newlines are treated differently.  */
    #####:  340:  if (cflags & REG_NEWLINE)
branch  0 never executed
branch  1 never executed
        -:  341:    { /* REG_NEWLINE implies neither . nor [^...] match newline.  */
    #####:  342:      syntax &= ~RE_DOT_NEWLINE;
    #####:  343:      syntax |= RE_HAT_LISTS_NOT_NEWLINE;
        -:  344:      /* It also changes the matching behavior.  */
    #####:  345:      preg->newline_anchor = 1;
        -:  346:    }
        -:  347:  else
    #####:  348:    preg->newline_anchor = 0;
    #####:  349:  preg->no_sub = !!(cflags & REG_NOSUB);
    #####:  350:  preg->translate = NULL;
        -:  351:
    #####:  352:  ret = re_compile_internal (preg, pattern, strlen (pattern), syntax);
call    0 never executed
        -:  353:
        -:  354:  /* POSIX doesn't distinguish between an unmatched open-group and an
        -:  355:     unmatched close-group: both are REG_EPAREN.  */
    #####:  356:  if (ret == REG_ERPAREN)
branch  0 never executed
branch  1 never executed
    #####:  357:    ret = REG_EPAREN;
        -:  358:
        -:  359:  /* We have already checked preg->fastmap != NULL.  */
    #####:  360:  if (BE (ret == REG_NOERROR, 1))
branch  0 never executed
branch  1 never executed
        -:  361:    /* Compute the fastmap now, since regexec cannot modify the pattern
        -:  362:       buffer.  This function nevers fails in this implementation.  */
    #####:  363:    (void) re_compile_fastmap (preg);
call    0 never executed
        -:  364:  else
        -:  365:    {
        -:  366:      /* Some error occurred while compiling the expression.  */
    #####:  367:      re_free (preg->fastmap);
    #####:  368:      preg->fastmap = NULL;
        -:  369:    }
        -:  370:
    #####:  371:  return (int) ret;
        -:  372:}
        -:  373:#ifdef _LIBC
        -:  374:weak_alias (__regcomp, regcomp)
        -:  375:#endif
        -:  376:
        -:  377:/* Returns a message corresponding to an error code, ERRCODE, returned
        -:  378:   from either regcomp or regexec.   We don't use PREG here.  */
        -:  379:
        -:  380:size_t
function regerror called 0 returned 0% blocks executed 0%
    #####:  381:regerror (errcode, preg, errbuf, errbuf_size)
        -:  382:    int errcode;
        -:  383:    const regex_t *preg;
        -:  384:    char *errbuf;
        -:  385:    size_t errbuf_size;
        -:  386:{
        -:  387:  const char *msg;
        -:  388:  size_t msg_size;
        -:  389:
    #####:  390:  if (BE (errcode < 0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  391:	  || errcode >= (int) (sizeof (__re_error_msgid_idx)
        -:  392:			       / sizeof (__re_error_msgid_idx[0])), 0))
        -:  393:    /* Only error codes returned by the rest of the code should be passed
        -:  394:       to this routine.  If we are given anything else, or if other regex
        -:  395:       code generates an invalid error code, then the program has a bug.
        -:  396:       Dump core so we can fix it.  */
    #####:  397:    abort ();
call    0 never executed
        -:  398:
    #####:  399:  msg = gettext (__re_error_msgid + __re_error_msgid_idx[errcode]);
        -:  400:
    #####:  401:  msg_size = strlen (msg) + 1; /* Includes the null.  */
        -:  402:
    #####:  403:  if (BE (errbuf_size != 0, 1))
branch  0 never executed
branch  1 never executed
        -:  404:    {
    #####:  405:      if (BE (msg_size > errbuf_size, 0))
branch  0 never executed
branch  1 never executed
        -:  406:	{
        -:  407:#if defined HAVE_MEMPCPY || defined _LIBC
        -:  408:	  *((char *) __mempcpy (errbuf, msg, errbuf_size - 1)) = '\0';
        -:  409:#else
    #####:  410:	  memcpy (errbuf, msg, errbuf_size - 1);
    #####:  411:	  errbuf[errbuf_size - 1] = 0;
        -:  412:#endif
        -:  413:	}
        -:  414:      else
    #####:  415:	memcpy (errbuf, msg, msg_size);
        -:  416:    }
        -:  417:
    #####:  418:  return msg_size;
        -:  419:}
        -:  420:#ifdef _LIBC
        -:  421:weak_alias (__regerror, regerror)
        -:  422:#endif
        -:  423:
        -:  424:
        -:  425:static void
function free_dfa_content called 0 returned 0% blocks executed 0%
    #####:  426:free_dfa_content (re_dfa_t *dfa)
        -:  427:{
        -:  428:  int i, j;
        -:  429:
    #####:  430:  re_free (dfa->subexps);
        -:  431:
    #####:  432:  for (i = 0; i < dfa->nodes_len; ++i)
branch  0 never executed
branch  1 never executed
        -:  433:    {
    #####:  434:      re_token_t *node = dfa->nodes + i;
        -:  435:#ifdef RE_ENABLE_I18N
        -:  436:      if (node->type == COMPLEX_BRACKET && node->duplicated == 0)
        -:  437:	free_charset (node->opr.mbcset);
        -:  438:      else
        -:  439:#endif /* RE_ENABLE_I18N */
    #####:  440:	if (node->type == SIMPLE_BRACKET && node->duplicated == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  441:	  re_free (node->opr.sbcset);
        -:  442:    }
    #####:  443:  re_free (dfa->nexts);
    #####:  444:  for (i = 0; i < dfa->nodes_len; ++i)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (dfa->eclosures != NULL)
branch  0 never executed
branch  1 never executed
    #####:  447:	re_node_set_free (dfa->eclosures + i);
    #####:  448:      if (dfa->inveclosures != NULL)
branch  0 never executed
branch  1 never executed
    #####:  449:	re_node_set_free (dfa->inveclosures + i);
    #####:  450:      if (dfa->edests != NULL)
branch  0 never executed
branch  1 never executed
    #####:  451:	re_node_set_free (dfa->edests + i);
        -:  452:    }
    #####:  453:  re_free (dfa->edests);
    #####:  454:  re_free (dfa->eclosures);
    #####:  455:  re_free (dfa->inveclosures);
    #####:  456:  re_free (dfa->nodes);
        -:  457:
    #####:  458:  for (i = 0; i <= dfa->state_hash_mask; ++i)
branch  0 never executed
branch  1 never executed
        -:  459:    {
    #####:  460:      struct re_state_table_entry *entry = dfa->state_table + i;
    #####:  461:      for (j = 0; j < entry->num; ++j)
branch  0 never executed
branch  1 never executed
        -:  462:	{
    #####:  463:	  re_dfastate_t *state = entry->array[j];
    #####:  464:	  free_state (state);
call    0 never executed
        -:  465:	}
    #####:  466:      re_free (entry->array);
        -:  467:    }
    #####:  468:  re_free (dfa->state_table);
        -:  469:
    #####:  470:  if (dfa->word_char != NULL)
branch  0 never executed
branch  1 never executed
    #####:  471:    re_free (dfa->word_char);
        -:  472:#ifdef DEBUG
        -:  473:  re_free (dfa->re_str);
        -:  474:#endif
        -:  475:
    #####:  476:  re_free (dfa);
    #####:  477:}
        -:  478:
        -:  479:
        -:  480:/* Free dynamically allocated space used by PREG.  */
        -:  481:
        -:  482:void
function regfree called 0 returned 0% blocks executed 0%
    #####:  483:regfree (preg)
        -:  484:    regex_t *preg;
        -:  485:{
    #####:  486:  re_dfa_t *dfa = (re_dfa_t *) preg->buffer;
    #####:  487:  if (BE (dfa != NULL, 1))
branch  0 never executed
branch  1 never executed
    #####:  488:    free_dfa_content (dfa);
call    0 never executed
        -:  489:
    #####:  490:  re_free (preg->fastmap);
    #####:  491:}
        -:  492:#ifdef _LIBC
        -:  493:weak_alias (__regfree, regfree)
        -:  494:#endif
        -:  495:
        -:  496:/* Entry points compatible with 4.2 BSD regex library.  We don't define
        -:  497:   them unless specifically requested.  */
        -:  498:
        -:  499:#if defined _REGEX_RE_COMP || defined _LIBC
        -:  500:
        -:  501:/* BSD has one and only one pattern buffer.  */
        -:  502:static struct re_pattern_buffer re_comp_buf;
        -:  503:
        -:  504:char *
        -:  505:# ifdef _LIBC
        -:  506:/* Make these definitions weak in libc, so POSIX programs can redefine
        -:  507:   these names if they don't use our functions, and still use
        -:  508:   regcomp/regexec above without link errors.  */
        -:  509:weak_function
        -:  510:# endif
        -:  511:re_comp (s)
        -:  512:     const char *s;
        -:  513:{
        -:  514:  reg_errcode_t ret;
        -:  515:  char *fastmap;
        -:  516:
        -:  517:  if (!s)
        -:  518:    {
        -:  519:      if (!re_comp_buf.buffer)
        -:  520:	return gettext ("No previous regular expression");
        -:  521:      return 0;
        -:  522:    }
        -:  523:
        -:  524:  if (re_comp_buf.buffer)
        -:  525:    {
        -:  526:      fastmap = re_comp_buf.fastmap;
        -:  527:      re_comp_buf.fastmap = NULL;
        -:  528:      __regfree (&re_comp_buf);
        -:  529:      memset (&re_comp_buf, '\0', sizeof (re_comp_buf));
        -:  530:      re_comp_buf.fastmap = fastmap;
        -:  531:    }
        -:  532:
        -:  533:  if (re_comp_buf.fastmap == NULL)
        -:  534:    {
        -:  535:      re_comp_buf.fastmap = (char *) malloc (SBC_MAX);
        -:  536:      if (re_comp_buf.fastmap == NULL)
        -:  537:	return (char *) gettext (__re_error_msgid
        -:  538:				 + __re_error_msgid_idx[(int) REG_ESPACE]);
        -:  539:    }
        -:  540:
        -:  541:  /* Since `re_exec' always passes NULL for the `regs' argument, we
        -:  542:     don't need to initialize the pattern buffer fields which affect it.  */
        -:  543:
        -:  544:  /* Match anchors at newlines.  */
        -:  545:  re_comp_buf.newline_anchor = 1;
        -:  546:
        -:  547:  ret = re_compile_internal (&re_comp_buf, s, strlen (s), re_syntax_options);
        -:  548:
        -:  549:  if (!ret)
        -:  550:    return NULL;
        -:  551:
        -:  552:  /* Yes, we're discarding `const' here if !HAVE_LIBINTL.  */
        -:  553:  return (char *) gettext (__re_error_msgid + __re_error_msgid_idx[(int) ret]);
        -:  554:}
        -:  555:
        -:  556:#ifdef _LIBC
        -:  557:libc_freeres_fn (free_mem)
        -:  558:{
        -:  559:  __regfree (&re_comp_buf);
        -:  560:}
        -:  561:#endif
        -:  562:
        -:  563:#endif /* _REGEX_RE_COMP */
        -:  564:
        -:  565:/* Internal entry point.
        -:  566:   Compile the regular expression PATTERN, whose length is LENGTH.
        -:  567:   SYNTAX indicate regular expression's syntax.  */
        -:  568:
        -:  569:reg_errcode_t
function re_compile_internal called 610 returned 100% blocks executed 69%
      610:  570:re_compile_internal (preg, pattern, length, syntax)
        -:  571:     regex_t *preg;
        -:  572:     const char * pattern;
        -:  573:     int length;
        -:  574:     reg_syntax_t syntax;
        -:  575:{
      610:  576:  reg_errcode_t err = REG_NOERROR;
        -:  577:  re_dfa_t *dfa;
        -:  578:  re_string_t regexp;
        -:  579:
        -:  580:  /* Initialize the pattern buffer.  */
      610:  581:  preg->fastmap_accurate = 0;
      610:  582:  preg->syntax = syntax;
      610:  583:  preg->not_bol = preg->not_eol = 0;
      610:  584:  preg->used = 0;
      610:  585:  preg->re_nsub = 0;
      610:  586:  preg->can_be_null = 0;
      610:  587:  preg->regs_allocated = REGS_UNALLOCATED;
        -:  588:
        -:  589:  /* Initialize the dfa.  */
      610:  590:  dfa = (re_dfa_t *) preg->buffer;
      610:  591:  if (preg->allocated < sizeof (re_dfa_t))
branch  0 taken 610 (fallthrough)
branch  1 taken 0
        -:  592:    {
        -:  593:      /* If zero allocated, but buffer is non-null, try to realloc
        -:  594:	 enough space.  This loses if buffer's address is bogus, but
        -:  595:	 that is the user's responsibility.  If ->buffer is NULL this
        -:  596:	 is a simple allocation.  */
      610:  597:      dfa = re_realloc (preg->buffer, re_dfa_t, 1);
      610:  598:      if (dfa == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 610
    #####:  599:	return REG_ESPACE;
      610:  600:      preg->allocated = sizeof (re_dfa_t);
        -:  601:    }
      610:  602:  preg->buffer = (unsigned char *) dfa;
      610:  603:  preg->used = sizeof (re_dfa_t);
        -:  604:
      610:  605:  err = init_dfa (dfa, length);
call    0 returned 610
      610:  606:  if (BE (err != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 610
        -:  607:    {
    #####:  608:      re_free (dfa);
    #####:  609:      preg->buffer = NULL;
    #####:  610:      return err;
        -:  611:    }
        -:  612:#ifdef DEBUG
        -:  613:  dfa->re_str = re_malloc (char, length + 1);
        -:  614:  strncpy (dfa->re_str, pattern, length + 1);
        -:  615:#endif
        -:  616:
     1220:  617:  err = re_string_construct (&regexp, pattern, length, preg->translate,
      610:  618:			     syntax & RE_ICASE);
call    0 returned 610
      610:  619:  if (BE (err != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 610
        -:  620:    {
    #####:  621:      re_free (dfa);
    #####:  622:      preg->buffer = NULL;
    #####:  623:      return err;
        -:  624:    }
        -:  625:
        -:  626:  /* Parse the regular expression, and build a structure tree.  */
      610:  627:  preg->re_nsub = 0;
      610:  628:  dfa->str_tree = parse (&regexp, preg, syntax, &err);
call    0 returned 610
      610:  629:  if (BE (dfa->str_tree == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 610
    #####:  630:    goto re_compile_internal_free_return;
        -:  631:
        -:  632:  /* Analyze the tree and collect information which is necessary to
        -:  633:     create the dfa.  */
      610:  634:  err = analyze (dfa);
call    0 returned 610
      610:  635:  if (BE (err != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 610
    #####:  636:    goto re_compile_internal_free_return;
        -:  637:
        -:  638:  /* Then create the initial state of the dfa.  */
      610:  639:  err = create_initial_state (dfa);
call    0 returned 610
        -:  640:
        -:  641:  /* Release work areas.  */
      610:  642:  free_workarea_compile (preg);
call    0 returned 610
      610:  643:  re_string_destruct (&regexp);
call    0 returned 610
        -:  644:
      610:  645:  if (BE (err != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 610
        -:  646:    {
    #####:  647:    re_compile_internal_free_return:
    #####:  648:      free_dfa_content (dfa);
call    0 never executed
    #####:  649:      preg->buffer = NULL;
        -:  650:    }
        -:  651:
      610:  652:  return err;
        -:  653:}
        -:  654:
        -:  655:/* Initialize DFA.  We use the length of the regular expression PAT_LEN
        -:  656:   as the initial length of some arrays.  */
        -:  657:
        -:  658:static reg_errcode_t
function init_dfa called 610 returned 100% blocks executed 86%
      610:  659:init_dfa (dfa, pat_len)
        -:  660:     re_dfa_t *dfa;
        -:  661:     int pat_len;
        -:  662:{
        -:  663:  int table_size;
        -:  664:
      610:  665:  memset (dfa, '\0', sizeof (re_dfa_t));
        -:  666:
      610:  667:  dfa->nodes_alloc = pat_len + 1;
      610:  668:  dfa->nodes = re_malloc (re_token_t, dfa->nodes_alloc);
        -:  669:
      610:  670:  dfa->states_alloc = pat_len + 1;
        -:  671:
        -:  672:  /*  table_size = 2 ^ ceil(log pat_len) */
     2225:  673:  for (table_size = 1; table_size > 0; table_size <<= 1)
branch  0 taken 2225
branch  1 taken 0 (fallthrough)
     2225:  674:    if (table_size > pat_len)
branch  0 taken 610 (fallthrough)
branch  1 taken 1615
      610:  675:      break;
        -:  676:
      610:  677:  dfa->state_table = calloc (sizeof (struct re_state_table_entry), table_size);
      610:  678:  dfa->state_hash_mask = table_size - 1;
        -:  679:
      610:  680:  dfa->subexps_alloc = 1;
      610:  681:  dfa->subexps = re_malloc (re_subexp_t, dfa->subexps_alloc);
      610:  682:  dfa->word_char = NULL;
        -:  683:
     610*:  684:  if (BE (dfa->nodes == NULL || dfa->state_table == NULL
branch  0 taken 610 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 610
branch  4 taken 610 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 610
        -:  685:	  || dfa->subexps == NULL, 0))
        -:  686:    {
        -:  687:      /* We don't bother to free anything which was allocated.  Very
        -:  688:	 soon the process will go down anyway.  */
    #####:  689:      dfa->subexps = NULL;
    #####:  690:      dfa->state_table = NULL;
    #####:  691:      dfa->nodes = NULL;
    #####:  692:      return REG_ESPACE;
        -:  693:    }
      610:  694:  return REG_NOERROR;
        -:  695:}
        -:  696:
        -:  697:/* Initialize WORD_CHAR table, which indicate which character is
        -:  698:   "word".  In this case "word" means that it is the word construction
        -:  699:   character used by some operators like "\<", "\>", etc.  */
        -:  700:
        -:  701:static reg_errcode_t
function init_word_char called 203 returned 100% blocks executed 92%
      203:  702:init_word_char (dfa)
        -:  703:     re_dfa_t *dfa;
        -:  704:{
        -:  705:  int i, j, ch;
      203:  706:  dfa->word_char = (re_bitset_ptr_t) calloc (sizeof (bitset), 1);
      203:  707:  if (BE (dfa->word_char == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 203
    #####:  708:    return REG_ESPACE;
     1827:  709:  for (i = 0, ch = 0; i < BITSET_UINTS; ++i)
branch  0 taken 1624
branch  1 taken 203 (fallthrough)
    53592:  710:    for (j = 0; j < UINT_BITS; ++j, ++ch)
branch  0 taken 51968
branch  1 taken 1624 (fallthrough)
    51968:  711:      if (isalnum (ch) || ch == '_')
branch  0 taken 39382 (fallthrough)
branch  1 taken 12586
branch  2 taken 203 (fallthrough)
branch  3 taken 39179
    12789:  712:	dfa->word_char[i] |= 1 << j;
      203:  713:  return REG_NOERROR;
        -:  714:}
        -:  715:
        -:  716:/* Free the work area which are only used while compiling.  */
        -:  717:
        -:  718:static void
function free_workarea_compile called 610 returned 100% blocks executed 100%
      610:  719:free_workarea_compile (preg)
        -:  720:     regex_t *preg;
        -:  721:{
      610:  722:  re_dfa_t *dfa = (re_dfa_t *) preg->buffer;
      610:  723:  free_bin_tree (dfa->str_tree);
call    0 returned 610
      610:  724:  dfa->str_tree = NULL;
      610:  725:}
        -:  726:
        -:  727:/* Create initial states for all contexts.  */
        -:  728:
        -:  729:static reg_errcode_t
function create_initial_state called 610 returned 100% blocks executed 45%
      610:  730:create_initial_state (dfa)
        -:  731:     re_dfa_t *dfa;
        -:  732:{
        -:  733:  int first, i;
        -:  734:  reg_errcode_t err;
        -:  735:  re_node_set init_nodes;
        -:  736:
        -:  737:  /* Initial states have the epsilon closure of the node which is
        -:  738:     the first node of the regular expression.  */
      610:  739:  first = dfa->str_tree->first;
      610:  740:  dfa->init_node = first;
      610:  741:  err = re_node_set_init_copy (&init_nodes, dfa->eclosures + first);
call    0 returned 610
      610:  742:  if (BE (err != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 610
    #####:  743:    return err;
        -:  744:
        -:  745:  /* The back-references which are in initial states can epsilon transit,
        -:  746:     since in this case all of the subexpressions can be null.
        -:  747:     Then we add epsilon closures of the nodes which are the next nodes of
        -:  748:     the back-references.  */
      610:  749:  if (dfa->nbackref > 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 610
    #####:  750:    for (i = 0; i < init_nodes.nelem; ++i)
branch  0 never executed
branch  1 never executed
        -:  751:      {
    #####:  752:	int node_idx = init_nodes.elems[i];
    #####:  753:	re_token_type_t type = dfa->nodes[node_idx].type;
        -:  754:
        -:  755:	int clexp_idx;
    #####:  756:	if (type != OP_BACK_REF)
branch  0 never executed
branch  1 never executed
    #####:  757:	  continue;
    #####:  758:	for (clexp_idx = 0; clexp_idx < init_nodes.nelem; ++clexp_idx)
branch  0 never executed
branch  1 never executed
        -:  759:	  {
        -:  760:	    re_token_t *clexp_node;
    #####:  761:	    clexp_node = dfa->nodes + init_nodes.elems[clexp_idx];
    #####:  762:	    if (clexp_node->type == OP_CLOSE_SUBEXP
branch  0 never executed
branch  1 never executed
    #####:  763:		&& clexp_node->opr.idx + 1 == dfa->nodes[node_idx].opr.idx)
branch  0 never executed
branch  1 never executed
    #####:  764:	      break;
        -:  765:	  }
    #####:  766:	if (clexp_idx == init_nodes.nelem)
branch  0 never executed
branch  1 never executed
    #####:  767:	  continue;
        -:  768:
    #####:  769:	if (type == OP_BACK_REF)
branch  0 never executed
branch  1 never executed
        -:  770:	  {
    #####:  771:	    int dest_idx = dfa->edests[node_idx].elems[0];
    #####:  772:	    if (!re_node_set_contains (&init_nodes, dest_idx))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  773:	      {
    #####:  774:		re_node_set_merge (&init_nodes, dfa->eclosures + dest_idx);
call    0 never executed
    #####:  775:		i = 0;
        -:  776:	      }
        -:  777:	  }
        -:  778:      }
        -:  779:
        -:  780:  /* It must be the first time to invoke acquire_state.  */
      610:  781:  dfa->init_state = re_acquire_state_context (&err, dfa, &init_nodes, 0);
call    0 returned 610
        -:  782:  /* We don't check ERR here, since the initial state must not be NULL.  */
      610:  783:  if (BE (dfa->init_state == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 610
    #####:  784:    return err;
      610:  785:  if (dfa->init_state->has_constraint)
branch  0 taken 152 (fallthrough)
branch  1 taken 458
        -:  786:    {
      152:  787:      dfa->init_state_word = re_acquire_state_context (&err, dfa, &init_nodes,
call    0 returned 152
        -:  788:						       CONTEXT_WORD);
      152:  789:      dfa->init_state_nl = re_acquire_state_context (&err, dfa, &init_nodes,
call    0 returned 152
        -:  790:						     CONTEXT_NEWLINE);
      152:  791:      dfa->init_state_begbuf = re_acquire_state_context (&err, dfa,
call    0 returned 152
        -:  792:							 &init_nodes,
        -:  793:							 CONTEXT_NEWLINE
        -:  794:							 | CONTEXT_BEGBUF);
     152*:  795:      if (BE (dfa->init_state_word == NULL || dfa->init_state_nl == NULL
branch  0 taken 152 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 152
branch  4 taken 152 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 152
        -:  796:	      || dfa->init_state_begbuf == NULL, 0))
    #####:  797:	return err;
        -:  798:    }
        -:  799:  else
      458:  800:    dfa->init_state_word = dfa->init_state_nl
      458:  801:      = dfa->init_state_begbuf = dfa->init_state;
        -:  802:
      610:  803:  re_node_set_free (&init_nodes);
      610:  804:  return REG_NOERROR;
        -:  805:}
        -:  806:
        -:  807:/* Analyze the structure tree, and calculate "first", "next", "edest",
        -:  808:   "eclosure", and "inveclosure".  */
        -:  809:
        -:  810:static reg_errcode_t
function analyze called 610 returned 100% blocks executed 86%
      610:  811:analyze (dfa)
        -:  812:     re_dfa_t *dfa;
        -:  813:{
        -:  814:  int i;
        -:  815:  reg_errcode_t ret;
        -:  816:
        -:  817:  /* Allocate arrays.  */
      610:  818:  dfa->nexts = re_malloc (int, dfa->nodes_alloc);
      610:  819:  dfa->edests = re_malloc (re_node_set, dfa->nodes_alloc);
      610:  820:  dfa->eclosures = re_malloc (re_node_set, dfa->nodes_alloc);
      610:  821:  dfa->inveclosures = re_malloc (re_node_set, dfa->nodes_alloc);
     610*:  822:  if (BE (dfa->nexts == NULL || dfa->edests == NULL
branch  0 taken 610 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 610
branch  4 taken 610 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 610
branch  8 taken 610 (fallthrough)
branch  9 taken 0
branch 10 taken 0 (fallthrough)
branch 11 taken 610
        -:  823:	  || dfa->eclosures == NULL || dfa->inveclosures == NULL, 0))
    #####:  824:    return REG_ESPACE;
        -:  825:  /* Initialize them.  */
     3897:  826:  for (i = 0; i < dfa->nodes_len; ++i)
branch  0 taken 3287
branch  1 taken 610 (fallthrough)
        -:  827:    {
     3287:  828:      dfa->nexts[i] = -1;
     3287:  829:      re_node_set_init_empty (dfa->edests + i);
     3287:  830:      re_node_set_init_empty (dfa->eclosures + i);
     3287:  831:      re_node_set_init_empty (dfa->inveclosures + i);
        -:  832:    }
        -:  833:
      610:  834:  ret = analyze_tree (dfa, dfa->str_tree);
call    0 returned 610
      610:  835:  if (BE (ret == REG_NOERROR, 1))
branch  0 taken 610 (fallthrough)
branch  1 taken 0
        -:  836:    {
      610:  837:      ret = calc_eclosure (dfa);
call    0 returned 610
      610:  838:      if (ret == REG_NOERROR)
branch  0 taken 610 (fallthrough)
branch  1 taken 0
      610:  839:	calc_inveclosure (dfa);
call    0 returned 610
        -:  840:    }
      610:  841:  return ret;
        -:  842:}
        -:  843:
        -:  844:/* Helper functions for analyze.
        -:  845:   This function calculate "first", "next", and "edest" for the subtree
        -:  846:   whose root is NODE.  */
        -:  847:
        -:  848:static reg_errcode_t
function analyze_tree called 5830 returned 100% blocks executed 88%
     5830:  849:analyze_tree (dfa, node)
        -:  850:     re_dfa_t *dfa;
        -:  851:     bin_tree_t *node;
        -:  852:{
        -:  853:  reg_errcode_t ret;
     5830:  854:  if (node->first == -1)
branch  0 taken 610 (fallthrough)
branch  1 taken 5220
      610:  855:    calc_first (dfa, node);
call    0 returned 610
     5830:  856:  if (node->next == -1)
branch  0 taken 5830 (fallthrough)
branch  1 taken 0
     5830:  857:    calc_next (dfa, node);
call    0 returned 5830
     5830:  858:  if (node->eclosure.nelem == 0)
branch  0 taken 5830 (fallthrough)
branch  1 taken 0
     5830:  859:    calc_epsdest (dfa, node);
call    0 returned 5830
        -:  860:  /* Calculate "first" etc. for the left child.  */
     5830:  861:  if (node->left != NULL)
branch  0 taken 2675 (fallthrough)
branch  1 taken 3155
        -:  862:    {
     2675:  863:      ret = analyze_tree (dfa, node->left);
call    0 returned 2675
     2675:  864:      if (BE (ret != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 2675
    #####:  865:	return ret;
        -:  866:    }
        -:  867:  /* Calculate "first" etc. for the right child.  */
     5830:  868:  if (node->right != NULL)
branch  0 taken 2545 (fallthrough)
branch  1 taken 3285
        -:  869:    {
     2545:  870:      ret = analyze_tree (dfa, node->right);
call    0 returned 2545
     2545:  871:      if (BE (ret != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 2545
    #####:  872:	return ret;
        -:  873:    }
     5830:  874:  return REG_NOERROR;
        -:  875:}
        -:  876:
        -:  877:/* Calculate "first" for the node NODE.  */
        -:  878:static void
function calc_first called 5830 returned 100% blocks executed 77%
     5830:  879:calc_first (dfa, node)
        -:  880:     re_dfa_t *dfa;
        -:  881:     bin_tree_t *node;
        -:  882:{
        -:  883:  int idx, type;
     5830:  884:  idx = node->node_idx;
     5830:  885:  type = (node->type == 0) ? dfa->nodes[idx].type : node->type;
branch  0 taken 3287 (fallthrough)
branch  1 taken 2543
        -:  886:
     5830:  887:  switch (type)
branch  0 taken 3285
branch  1 taken 0
branch  2 taken 2
branch  3 taken 2543
        -:  888:    {
        -:  889:#ifdef DEBUG
        -:  890:    case OP_OPEN_BRACKET:
        -:  891:    case OP_CLOSE_BRACKET:
        -:  892:    case OP_OPEN_DUP_NUM:
        -:  893:    case OP_CLOSE_DUP_NUM:
        -:  894:    case OP_NON_MATCH_LIST:
        -:  895:    case OP_OPEN_COLL_ELEM:
        -:  896:    case OP_CLOSE_COLL_ELEM:
        -:  897:    case OP_OPEN_EQUIV_CLASS:
        -:  898:    case OP_CLOSE_EQUIV_CLASS:
        -:  899:    case OP_OPEN_CHAR_CLASS:
        -:  900:    case OP_CLOSE_CHAR_CLASS:
        -:  901:      /* These must not be appeared here.  */
        -:  902:      assert (0);
        -:  903:#endif
     3285:  904:    case END_OF_RE:
        -:  905:    case CHARACTER:
        -:  906:    case OP_PERIOD:
        -:  907:    case OP_DUP_ASTERISK:
        -:  908:    case OP_DUP_QUESTION:
        -:  909:#ifdef RE_ENABLE_I18N
        -:  910:    case COMPLEX_BRACKET:
        -:  911:#endif /* RE_ENABLE_I18N */
        -:  912:    case SIMPLE_BRACKET:
        -:  913:    case OP_BACK_REF:
        -:  914:    case ANCHOR:
        -:  915:    case OP_OPEN_SUBEXP:
        -:  916:    case OP_CLOSE_SUBEXP:
     3285:  917:      node->first = idx;
     3285:  918:      break;
    #####:  919:    case OP_DUP_PLUS:
        -:  920:#ifdef DEBUG
        -:  921:      assert (node->left != NULL);
        -:  922:#endif
    #####:  923:      if (node->left->first == -1)
branch  0 never executed
branch  1 never executed
    #####:  924:	calc_first (dfa, node->left);
call    0 never executed
    #####:  925:      node->first = node->left->first;
    #####:  926:      break;
        2:  927:    case OP_ALT:
        2:  928:      node->first = idx;
        2:  929:      break;
        -:  930:      /* else fall through */
     2543:  931:    default:
        -:  932:#ifdef DEBUG
        -:  933:      assert (node->left != NULL);
        -:  934:#endif
     2543:  935:      if (node->left->first == -1)
branch  0 taken 2543 (fallthrough)
branch  1 taken 0
     2543:  936:	calc_first (dfa, node->left);
call    0 returned 2543
     2543:  937:      node->first = node->left->first;
     2543:  938:      break;
        -:  939:    }
     5830:  940:}
        -:  941:
        -:  942:/* Calculate "next" for the node NODE.  */
        -:  943:
        -:  944:static void
function calc_next called 6440 returned 100% blocks executed 95%
     6440:  945:calc_next (dfa, node)
        -:  946:     re_dfa_t *dfa;
        -:  947:     bin_tree_t *node;
        -:  948:{
        -:  949:  int idx, type;
     6440:  950:  bin_tree_t *parent = node->parent;
     6440:  951:  if (parent == NULL)
branch  0 taken 1220 (fallthrough)
branch  1 taken 5220
        -:  952:    {
     1220:  953:      node->next = -1;
     1220:  954:      idx = node->node_idx;
     1220:  955:      if (node->type == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1220
    #####:  956:	dfa->nexts[idx] = node->next;
     1220:  957:      return;
        -:  958:    }
        -:  959:
     5220:  960:  idx = parent->node_idx;
     5220:  961:  type = (parent->type == 0) ? dfa->nodes[idx].type : parent->type;
branch  0 taken 134 (fallthrough)
branch  1 taken 5086
        -:  962:
     5220:  963:  switch (type)
branch  0 taken 129
branch  1 taken 5086
branch  2 taken 5
        -:  964:    {
      129:  965:    case OP_DUP_ASTERISK:
        -:  966:    case OP_DUP_PLUS:
      129:  967:      node->next = idx;
      129:  968:      break;
     5086:  969:    case CONCAT:
     5086:  970:      if (parent->left == node)
branch  0 taken 2543 (fallthrough)
branch  1 taken 2543
        -:  971:	{
     2543:  972:	  if (parent->right->first == -1)
branch  0 taken 2543 (fallthrough)
branch  1 taken 0
     2543:  973:	    calc_first (dfa, parent->right);
call    0 returned 2543
     2543:  974:	  node->next = parent->right->first;
     2543:  975:	  break;
        -:  976:	}
        -:  977:      /* else fall through */
        -:  978:    default:
     2548:  979:      if (parent->next == -1)
branch  0 taken 610 (fallthrough)
branch  1 taken 1938
      610:  980:	calc_next (dfa, parent);
call    0 returned 610
     2548:  981:      node->next = parent->next;
     2548:  982:      break;
        -:  983:    }
     5220:  984:  idx = node->node_idx;
     5220:  985:  if (node->type == 0)
branch  0 taken 3287 (fallthrough)
branch  1 taken 1933
     3287:  986:    dfa->nexts[idx] = node->next;
        -:  987:}
        -:  988:
        -:  989:/* Calculate "edest" for the node NODE.  */
        -:  990:
        -:  991:static void
function calc_epsdest called 5830 returned 100% blocks executed 77%
     5830:  992:calc_epsdest (dfa, node)
        -:  993:     re_dfa_t *dfa;
        -:  994:     bin_tree_t *node;
        -:  995:{
        -:  996:  int idx;
     5830:  997:  idx = node->node_idx;
     5830:  998:  if (node->type == 0)
branch  0 taken 3287 (fallthrough)
branch  1 taken 2543
        -:  999:    {
     3287: 1000:      if (dfa->nodes[idx].type == OP_DUP_ASTERISK
branch  0 taken 3158 (fallthrough)
branch  1 taken 129
     3158: 1001:	  || dfa->nodes[idx].type == OP_DUP_PLUS
branch  0 taken 3158 (fallthrough)
branch  1 taken 0
     3158: 1002:	  || dfa->nodes[idx].type == OP_DUP_QUESTION)
branch  0 taken 1 (fallthrough)
branch  1 taken 3157
        -: 1003:	{
      130: 1004:	  if (node->left->first == -1)
branch  0 taken 130 (fallthrough)
branch  1 taken 0
      130: 1005:	    calc_first (dfa, node->left);
call    0 returned 130
      130: 1006:	  if (node->next == -1)
branch  0 taken 0 (fallthrough)
branch  1 taken 130
    #####: 1007:	    calc_next (dfa, node);
call    0 never executed
      130: 1008:	  re_node_set_init_2 (dfa->edests + idx, node->left->first,
call    0 returned 130
        -: 1009:			      node->next);
        -: 1010:	}
     3157: 1011:      else if (dfa->nodes[idx].type == OP_ALT)
branch  0 taken 2 (fallthrough)
branch  1 taken 3155
        -: 1012:	{
        -: 1013:	  int left, right;
        2: 1014:	  if (node->left != NULL)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -: 1015:	    {
        2: 1016:	      if (node->left->first == -1)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1017:		calc_first (dfa, node->left);
call    0 returned 2
        2: 1018:	      left = node->left->first;
        -: 1019:	    }
        -: 1020:	  else
        -: 1021:	    {
    #####: 1022:	      if (node->next == -1)
branch  0 never executed
branch  1 never executed
    #####: 1023:		calc_next (dfa, node);
call    0 never executed
    #####: 1024:	      left = node->next;
        -: 1025:	    }
        2: 1026:	  if (node->right != NULL)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -: 1027:	    {
        2: 1028:	      if (node->right->first == -1)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 1029:		calc_first (dfa, node->right);
call    0 returned 2
        2: 1030:	      right = node->right->first;
        -: 1031:	    }
        -: 1032:	  else
        -: 1033:	    {
    #####: 1034:	      if (node->next == -1)
branch  0 never executed
branch  1 never executed
    #####: 1035:		calc_next (dfa, node);
call    0 never executed
    #####: 1036:	      right = node->next;
        -: 1037:	    }
        2: 1038:	  re_node_set_init_2 (dfa->edests + idx, left, right);
call    0 returned 2
        -: 1039:	}
     3155: 1040:      else if (dfa->nodes[idx].type == ANCHOR
branch  0 taken 2901 (fallthrough)
branch  1 taken 254
     2901: 1041:	       || dfa->nodes[idx].type == OP_OPEN_SUBEXP
branch  0 taken 2885 (fallthrough)
branch  1 taken 16
     2885: 1042:	       || dfa->nodes[idx].type == OP_CLOSE_SUBEXP
branch  0 taken 2869 (fallthrough)
branch  1 taken 16
     2869: 1043:	       || dfa->nodes[idx].type == OP_BACK_REF)
branch  0 taken 0 (fallthrough)
branch  1 taken 2869
      286: 1044:	re_node_set_init_1 (dfa->edests + idx, node->next);
call    0 returned 286
        -: 1045:    }
     5830: 1046:}
        -: 1047:
        -: 1048:/* Duplicate the epsilon closure of the node ROOT_NODE.
        -: 1049:   Note that duplicated nodes have constraint INIT_CONSTRAINT in addition
        -: 1050:   to their own constraint.  */
        -: 1051:
        -: 1052:static reg_errcode_t
function duplicate_node_closure called 254 returned 100% blocks executed 36%
      254: 1053:duplicate_node_closure (dfa, top_org_node, top_clone_node, root_node,
        -: 1054:			init_constraint)
        -: 1055:     re_dfa_t *dfa;
        -: 1056:     int top_org_node, top_clone_node, root_node;
        -: 1057:     unsigned int init_constraint;
        -: 1058:{
        -: 1059:  reg_errcode_t err;
        -: 1060:  int org_node, clone_node, ret;
      254: 1061:  unsigned int constraint = init_constraint;
      254: 1062:  for (org_node = top_org_node, clone_node = top_clone_node;;)
      301: 1063:    {
        -: 1064:      int org_dest, clone_dest;
      555: 1065:      if (dfa->nodes[org_node].type == OP_BACK_REF)
branch  0 taken 0 (fallthrough)
branch  1 taken 555
        -: 1066:	{
        -: 1067:	  /* If the back reference epsilon-transit, its destination must
        -: 1068:	     also have the constraint.  Then duplicate the epsilon closure
        -: 1069:	     of the destination of the back reference, and store it in
        -: 1070:	     edests of the back reference.  */
    #####: 1071:	  org_dest = dfa->nexts[org_node];
    #####: 1072:	  re_node_set_empty (dfa->edests + clone_node);
    #####: 1073:	  err = duplicate_node (&clone_dest, dfa, org_dest, constraint);
call    0 never executed
    #####: 1074:	  if (BE (err != REG_NOERROR, 0))
branch  0 never executed
branch  1 never executed
    #####: 1075:	    return err;
    #####: 1076:	  dfa->nexts[clone_node] = dfa->nexts[org_node];
    #####: 1077:	  ret = re_node_set_insert (dfa->edests + clone_node, clone_dest);
call    0 never executed
    #####: 1078:	  if (BE (ret < 0, 0))
branch  0 never executed
branch  1 never executed
    #####: 1079:	    return REG_ESPACE;
        -: 1080:	}
      555: 1081:      else if (dfa->edests[org_node].nelem == 0)
branch  0 taken 254 (fallthrough)
branch  1 taken 301
        -: 1082:	{
        -: 1083:	  /* In case of the node can't epsilon-transit, don't duplicate the
        -: 1084:	     destination and store the original destination as the
        -: 1085:	     destination of the node.  */
      254: 1086:	  dfa->nexts[clone_node] = dfa->nexts[org_node];
      254: 1087:	  break;
        -: 1088:	}
      301: 1089:      else if (dfa->edests[org_node].nelem == 1)
branch  0 taken 301 (fallthrough)
branch  1 taken 0
        -: 1090:	{
        -: 1091:	  /* In case of the node can epsilon-transit, and it has only one
        -: 1092:	     destination.  */
      301: 1093:	  org_dest = dfa->edests[org_node].elems[0];
      301: 1094:	  re_node_set_empty (dfa->edests + clone_node);
      301: 1095:	  if (dfa->nodes[org_node].type == ANCHOR)
branch  0 taken 301 (fallthrough)
branch  1 taken 0
        -: 1096:	    {
        -: 1097:	      /* In case of the node has another constraint, append it.  */
      301: 1098:	      if (org_node == root_node && clone_node != org_node)
branch  0 taken 254 (fallthrough)
branch  1 taken 47
branch  2 taken 0 (fallthrough)
branch  3 taken 254
        -: 1099:		{
        -: 1100:		  /* ...but if the node is root_node itself, it means the
        -: 1101:		     epsilon closure have a loop, then tie it to the
        -: 1102:		     destination of the root_node.  */
    #####: 1103:		  ret = re_node_set_insert (dfa->edests + clone_node,
call    0 never executed
        -: 1104:					    org_dest);
    #####: 1105:		  if (BE (ret < 0, 0))
branch  0 never executed
branch  1 never executed
    #####: 1106:		    return REG_ESPACE;
    #####: 1107:		  break;
        -: 1108:		}
      301: 1109:	      constraint |= dfa->nodes[org_node].opr.ctx_type;
        -: 1110:	    }
      301: 1111:	  err = duplicate_node (&clone_dest, dfa, org_dest, constraint);
call    0 returned 301
      301: 1112:	  if (BE (err != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 301
    #####: 1113:	    return err;
      301: 1114:	  ret = re_node_set_insert (dfa->edests + clone_node, clone_dest);
call    0 returned 301
      301: 1115:	  if (BE (ret < 0, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 301
    #####: 1116:	    return REG_ESPACE;
        -: 1117:	}
        -: 1118:      else /* dfa->edests[org_node].nelem == 2 */
        -: 1119:	{
        -: 1120:	  /* In case of the node can epsilon-transit, and it has two
        -: 1121:	     destinations.  */
    #####: 1122:	  org_dest = dfa->edests[org_node].elems[0];
    #####: 1123:	  re_node_set_empty (dfa->edests + clone_node);
    #####: 1124:	  err = duplicate_node (&clone_dest, dfa, org_dest, constraint);
call    0 never executed
    #####: 1125:	  if (BE (err != REG_NOERROR, 0))
branch  0 never executed
branch  1 never executed
    #####: 1126:	    return err;
    #####: 1127:	  ret = re_node_set_insert (dfa->edests + clone_node, clone_dest);
call    0 never executed
    #####: 1128:	  if (BE (ret < 0, 0))
branch  0 never executed
branch  1 never executed
    #####: 1129:	    return REG_ESPACE;
        -: 1130:
    #####: 1131:	  err = duplicate_node_closure (dfa, org_dest, clone_dest, root_node,
call    0 never executed
        -: 1132:					constraint);
    #####: 1133:	  if (BE (err != REG_NOERROR, 0))
branch  0 never executed
branch  1 never executed
    #####: 1134:	    return err;
        -: 1135:
    #####: 1136:	  org_dest = dfa->edests[org_node].elems[1];
    #####: 1137:	  err = duplicate_node (&clone_dest, dfa, org_dest, constraint);
call    0 never executed
    #####: 1138:	  if (BE (err != REG_NOERROR, 0))
branch  0 never executed
branch  1 never executed
    #####: 1139:	    return err;
    #####: 1140:	  ret = re_node_set_insert (dfa->edests + clone_node, clone_dest);
call    0 never executed
    #####: 1141:	  if (BE (ret < 0, 0))
branch  0 never executed
branch  1 never executed
    #####: 1142:	    return REG_ESPACE;
        -: 1143:	}
      301: 1144:      org_node = org_dest;
      301: 1145:      clone_node = clone_dest;
        -: 1146:    }
      254: 1147:  return REG_NOERROR;
        -: 1148:}
        -: 1149:
        -: 1150:/* Duplicate the node whose index is ORG_IDX and set the constraint CONSTRAINT.
        -: 1151:   The new index will be stored in NEW_IDX and return REG_NOERROR if succeeded,
        -: 1152:   otherwise return the error code.  */
        -: 1153:
        -: 1154:static reg_errcode_t
function duplicate_node called 301 returned 100% blocks executed 88%
      301: 1155:duplicate_node (new_idx, dfa, org_idx, constraint)
        -: 1156:     re_dfa_t *dfa;
        -: 1157:     int *new_idx, org_idx;
        -: 1158:     unsigned int constraint;
        -: 1159:{
        -: 1160:  re_token_t dup;
        -: 1161:  int dup_idx;
        -: 1162:
      301: 1163:  dup = dfa->nodes[org_idx];
      301: 1164:  dup_idx = re_dfa_add_node (dfa, dup, 1);
call    0 returned 301
      301: 1165:  if (BE (dup_idx == -1, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 301
    #####: 1166:    return REG_ESPACE;
      301: 1167:  dfa->nodes[dup_idx].constraint = constraint;
      301: 1168:  if (dfa->nodes[org_idx].type == ANCHOR)
branch  0 taken 47 (fallthrough)
branch  1 taken 254
       47: 1169:    dfa->nodes[dup_idx].constraint |= dfa->nodes[org_idx].opr.ctx_type;
      301: 1170:  dfa->nodes[dup_idx].duplicated = 1;
      301: 1171:  re_node_set_init_empty (dfa->edests + dup_idx);
      301: 1172:  re_node_set_init_empty (dfa->eclosures + dup_idx);
      301: 1173:  re_node_set_init_empty (dfa->inveclosures + dup_idx);
        -: 1174:
      301: 1175:  *new_idx = dup_idx;
      301: 1176:  return REG_NOERROR;
        -: 1177:}
        -: 1178:
        -: 1179:static void
function calc_inveclosure called 610 returned 100% blocks executed 100%
      610: 1180:calc_inveclosure (dfa)
        -: 1181:     re_dfa_t *dfa;
        -: 1182:{
        -: 1183:  int src, idx, dest;
     4198: 1184:  for (src = 0; src < dfa->nodes_len; ++src)
branch  0 taken 3588
branch  1 taken 610 (fallthrough)
        -: 1185:    {
     7873: 1186:      for (idx = 0; idx < dfa->eclosures[src].nelem; ++idx)
branch  0 taken 4285
branch  1 taken 3588 (fallthrough)
        -: 1187:	{
     4285: 1188:	  dest = dfa->eclosures[src].elems[idx];
     4285: 1189:	  re_node_set_insert (dfa->inveclosures + dest, src);
call    0 returned 4285
        -: 1190:	}
        -: 1191:    }
      610: 1192:}
        -: 1193:
        -: 1194:/* Calculate "eclosure" for all the node in DFA.  */
        -: 1195:
        -: 1196:static reg_errcode_t
function calc_eclosure called 610 returned 100% blocks executed 80%
      610: 1197:calc_eclosure (dfa)
        -: 1198:     re_dfa_t *dfa;
        -: 1199:{
        -: 1200:  int node_idx, incomplete;
        -: 1201:#ifdef DEBUG
        -: 1202:  assert (dfa->nodes_len > 0);
        -: 1203:#endif
      610: 1204:  incomplete = 0;
        -: 1205:  /* For each nodes, calculate epsilon closure.  */
      610: 1206:  for (node_idx = 0; ; ++node_idx)
     3588: 1207:    {
        -: 1208:      reg_errcode_t err;
        -: 1209:      re_node_set eclosure_elem;
     4198: 1210:      if (node_idx == dfa->nodes_len)
branch  0 taken 610 (fallthrough)
branch  1 taken 3588
        -: 1211:	{
      610: 1212:	  if (!incomplete)
branch  0 taken 610 (fallthrough)
branch  1 taken 0
      610: 1213:	    break;
    #####: 1214:	  incomplete = 0;
    #####: 1215:	  node_idx = 0;
        -: 1216:	}
        -: 1217:
        -: 1218:#ifdef DEBUG
        -: 1219:      assert (dfa->eclosures[node_idx].nelem != -1);
        -: 1220:#endif
        -: 1221:      /* If we have already calculated, skip it.  */
     3588: 1222:      if (dfa->eclosures[node_idx].nelem != 0)
branch  0 taken 475 (fallthrough)
branch  1 taken 3113
      475: 1223:	continue;
        -: 1224:      /* Calculate epsilon closure of `node_idx'.  */
     3113: 1225:      err = calc_eclosure_iter (&eclosure_elem, dfa, node_idx, 1);
call    0 returned 3113
     3113: 1226:      if (BE (err != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 3113
    #####: 1227:	return err;
        -: 1228:
     3113: 1229:      if (dfa->eclosures[node_idx].nelem == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 3113
        -: 1230:	{
    #####: 1231:	  incomplete = 1;
    #####: 1232:	  re_node_set_free (&eclosure_elem);
        -: 1233:	}
        -: 1234:    }
      610: 1235:  return REG_NOERROR;
        -: 1236:}
        -: 1237:
        -: 1238:/* Calculate epsilon closure of NODE.  */
        -: 1239:
        -: 1240:static reg_errcode_t
function calc_eclosure_iter called 3588 returned 100% blocks executed 82%
     3588: 1241:calc_eclosure_iter (new_set, dfa, node, root)
        -: 1242:     re_node_set *new_set;
        -: 1243:     re_dfa_t *dfa;
        -: 1244:     int node, root;
        -: 1245:{
        -: 1246:  reg_errcode_t err;
        -: 1247:  unsigned int constraint;
        -: 1248:  int i, incomplete;
        -: 1249:  re_node_set eclosure;
     3588: 1250:  incomplete = 0;
     3588: 1251:  err = re_node_set_alloc (&eclosure, dfa->edests[node].nelem + 1);
call    0 returned 3588
     3588: 1252:  if (BE (err != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 3588
    #####: 1253:    return err;
        -: 1254:
        -: 1255:  /* This indicates that we are calculating this node now.
        -: 1256:     We reference this value to avoid infinite loop.  */
     3588: 1257:  dfa->eclosures[node].nelem = -1;
        -: 1258:
     7176: 1259:  constraint = ((dfa->nodes[node].type == ANCHOR)
     3588: 1260:		? dfa->nodes[node].opr.ctx_type : 0);
branch  0 taken 301 (fallthrough)
branch  1 taken 3287
        -: 1261:  /* If the current node has constraints, duplicate all nodes.
        -: 1262:     Since they must inherit the constraints.  */
     3588: 1263:  if (constraint && !dfa->nodes[dfa->edests[node].elems[0]].duplicated)
branch  0 taken 301 (fallthrough)
branch  1 taken 3287
branch  2 taken 254 (fallthrough)
branch  3 taken 47
        -: 1264:    {
        -: 1265:      int org_node, cur_node;
      254: 1266:      org_node = cur_node = node;
      254: 1267:      err = duplicate_node_closure (dfa, node, node, node, constraint);
call    0 returned 254
      254: 1268:      if (BE (err != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 254
    #####: 1269:	return err;
        -: 1270:    }
        -: 1271:
        -: 1272:  /* Expand each epsilon destination nodes.  */
     3588: 1273:  if (IS_EPSILON_NODE(dfa->nodes[node].type))
branch  0 taken 3586 (fallthrough)
branch  1 taken 2
branch  2 taken 3457 (fallthrough)
branch  3 taken 129
branch  4 taken 3457 (fallthrough)
branch  5 taken 0
branch  6 taken 3456 (fallthrough)
branch  7 taken 1
branch  8 taken 3155 (fallthrough)
branch  9 taken 301
branch 10 taken 3139 (fallthrough)
branch 11 taken 16
branch 12 taken 16 (fallthrough)
branch 13 taken 3123
     1062: 1274:    for (i = 0; i < dfa->edests[node].nelem; ++i)
branch  0 taken 597
branch  1 taken 465 (fallthrough)
        -: 1275:      {
        -: 1276:	re_node_set eclosure_elem;
      597: 1277:	int edest = dfa->edests[node].elems[i];
        -: 1278:	/* If calculating the epsilon closure of `edest' is in progress,
        -: 1279:	   return intermediate result.  */
     597*: 1280:	if (dfa->eclosures[edest].nelem == -1)
branch  0 taken 0 (fallthrough)
branch  1 taken 597
        -: 1281:	  {
    #####: 1282:	    incomplete = 1;
    #####: 1283:	    continue;
        -: 1284:	  }
        -: 1285:	/* If we haven't calculated the epsilon closure of `edest' yet,
        -: 1286:	   calculate now. Otherwise use calculated epsilon closure.  */
      597: 1287:	if (dfa->eclosures[edest].nelem == 0)
branch  0 taken 475 (fallthrough)
branch  1 taken 122
        -: 1288:	  {
      475: 1289:	    err = calc_eclosure_iter (&eclosure_elem, dfa, edest, 0);
call    0 returned 475
      475: 1290:	    if (BE (err != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 475
    #####: 1291:	      return err;
        -: 1292:	  }
        -: 1293:	else
      122: 1294:	  eclosure_elem = dfa->eclosures[edest];
        -: 1295:	/* Merge the epsilon closure of `edest'.  */
      597: 1296:	re_node_set_merge (&eclosure, &eclosure_elem);
call    0 returned 597
        -: 1297:	/* If the epsilon closure of `edest' is incomplete,
        -: 1298:	   the epsilon closure of this node is also incomplete.  */
      597: 1299:	if (dfa->eclosures[edest].nelem == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 597
        -: 1300:	  {
    #####: 1301:	    incomplete = 1;
    #####: 1302:	    re_node_set_free (&eclosure_elem);
        -: 1303:	  }
        -: 1304:      }
        -: 1305:
        -: 1306:  /* Epsilon closures include itself.  */
     3588: 1307:  re_node_set_insert (&eclosure, node);
call    0 returned 3588
    3588*: 1308:  if (incomplete && !root)
branch  0 taken 0 (fallthrough)
branch  1 taken 3588
branch  2 never executed
branch  3 never executed
    #####: 1309:    dfa->eclosures[node].nelem = 0;
        -: 1310:  else
     3588: 1311:    dfa->eclosures[node] = eclosure;
     3588: 1312:  *new_set = eclosure;
     3588: 1313:  return REG_NOERROR;
        -: 1314:}
        -: 1315:
        -: 1316:/* Functions for token which are used in the parser.  */
        -: 1317:
        -: 1318:/* Fetch a token from INPUT.
        -: 1319:   We must not use this function inside bracket expressions.  */
        -: 1320:
        -: 1321:static re_token_t
function fetch_token called 3290 returned 100% blocks executed 100%
     3290: 1322:fetch_token (input, syntax)
        -: 1323:     re_string_t *input;
        -: 1324:     reg_syntax_t syntax;
        -: 1325:{
        -: 1326:  re_token_t token;
        -: 1327:  int consumed_byte;
     3290: 1328:  consumed_byte = peek_token (&token, input, syntax);
call    0 returned 3290
     3290: 1329:  re_string_skip_bytes (input, consumed_byte);
     3290: 1330:  return token;
        -: 1331:}
        -: 1332:
        -: 1333:/* Peek a token from INPUT, and return the length of the token.
        -: 1334:   We must not use this function inside bracket expressions.  */
        -: 1335:
        -: 1336:static int
function peek_token called 3290 returned 100% blocks executed 41%
     3290: 1337:peek_token (token, input, syntax)
        -: 1338:     re_token_t *token;
        -: 1339:     re_string_t *input;
        -: 1340:     reg_syntax_t syntax;
        -: 1341:{
        -: 1342:  unsigned char c;
        -: 1343:
     3290: 1344:  if (re_string_eoi (input))
branch  0 taken 610 (fallthrough)
branch  1 taken 2680
        -: 1345:    {
      610: 1346:      token->type = END_OF_RE;
      610: 1347:      return 0;
        -: 1348:    }
        -: 1349:
     2680: 1350:  c = re_string_peek_byte (input, 0);
     2680: 1351:  token->opr.c = c;
        -: 1352:
        -: 1353:#ifdef RE_ENABLE_I18N
        -: 1354:  token->mb_partial = 0;
        -: 1355:  if (MB_CUR_MAX > 1 &&
        -: 1356:      !re_string_first_byte (input, re_string_cur_idx (input)))
        -: 1357:    {
        -: 1358:      token->type = CHARACTER;
        -: 1359:      token->mb_partial = 1;
        -: 1360:      return 1;
        -: 1361:    }
        -: 1362:#endif
     2680: 1363:  if (c == '\\')
branch  0 taken 339 (fallthrough)
branch  1 taken 2341
        -: 1364:    {
        -: 1365:      unsigned char c2;
      339: 1366:      if (re_string_cur_idx (input) + 1 >= re_string_length (input))
branch  0 taken 0 (fallthrough)
branch  1 taken 339
        -: 1367:	{
    #####: 1368:	  token->type = BACK_SLASH;
    #####: 1369:	  return 1;
        -: 1370:	}
        -: 1371:
      339: 1372:      c2 = re_string_peek_byte_case (input, 1);
      339: 1373:      token->opr.c = c2;
      339: 1374:      token->type = CHARACTER;
      339: 1375:      switch (c2)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 12
branch 11 taken 12
branch 12 taken 0
branch 13 taken 0
branch 14 taken 1
branch 15 taken 1
branch 16 taken 313
        -: 1376:	{
    #####: 1377:	case '|':
    #####: 1378:	  if (!(syntax & RE_LIMITED_OPS) && !(syntax & RE_NO_BK_VBAR))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1379:	    token->type = OP_ALT;
    #####: 1380:	  break;
    #####: 1381:	case '1': case '2': case '3': case '4': case '5':
        -: 1382:	case '6': case '7': case '8': case '9':
    #####: 1383:	  if (!(syntax & RE_NO_BK_REFS))
branch  0 never executed
branch  1 never executed
        -: 1384:	    {
    #####: 1385:	      token->type = OP_BACK_REF;
    #####: 1386:	      token->opr.idx = c2 - '0';
        -: 1387:	    }
    #####: 1388:	  break;
    #####: 1389:	case '<':
    #####: 1390:	  if (!(syntax & RE_NO_GNU_OPS))
branch  0 never executed
branch  1 never executed
        -: 1391:	    {
    #####: 1392:	      token->type = ANCHOR;
    #####: 1393:	      token->opr.idx = WORD_FIRST;
        -: 1394:	    }
    #####: 1395:	  break;
    #####: 1396:	case '>':
    #####: 1397:	  if (!(syntax & RE_NO_GNU_OPS))
branch  0 never executed
branch  1 never executed
        -: 1398:	    {
    #####: 1399:	      token->type = ANCHOR;
    #####: 1400:	      token->opr.idx = WORD_LAST;
        -: 1401:	    }
    #####: 1402:	  break;
    #####: 1403:	case 'b':
    #####: 1404:	  if (!(syntax & RE_NO_GNU_OPS))
branch  0 never executed
branch  1 never executed
        -: 1405:	    {
    #####: 1406:	      token->type = ANCHOR;
    #####: 1407:	      token->opr.idx = WORD_DELIM;
        -: 1408:	    }
    #####: 1409:	  break;
    #####: 1410:	case 'B':
    #####: 1411:	  if (!(syntax & RE_NO_GNU_OPS))
branch  0 never executed
branch  1 never executed
        -: 1412:	    {
    #####: 1413:	      token->type = ANCHOR;
    #####: 1414:	      token->opr.idx = INSIDE_WORD;
        -: 1415:	    }
    #####: 1416:	  break;
    #####: 1417:	case 'w':
    #####: 1418:	  if (!(syntax & RE_NO_GNU_OPS))
branch  0 never executed
branch  1 never executed
    #####: 1419:	    token->type = OP_WORD;
    #####: 1420:	  break;
    #####: 1421:	case 'W':
    #####: 1422:	  if (!(syntax & RE_NO_GNU_OPS))
branch  0 never executed
branch  1 never executed
    #####: 1423:	    token->type = OP_NOTWORD;
    #####: 1424:	  break;
    #####: 1425:	case '`':
    #####: 1426:	  if (!(syntax & RE_NO_GNU_OPS))
branch  0 never executed
branch  1 never executed
        -: 1427:	    {
    #####: 1428:	      token->type = ANCHOR;
    #####: 1429:	      token->opr.idx = BUF_FIRST;
        -: 1430:	    }
    #####: 1431:	  break;
    #####: 1432:	case '\'':
    #####: 1433:	  if (!(syntax & RE_NO_GNU_OPS))
branch  0 never executed
branch  1 never executed
        -: 1434:	    {
    #####: 1435:	      token->type = ANCHOR;
    #####: 1436:	      token->opr.idx = BUF_LAST;
        -: 1437:	    }
    #####: 1438:	  break;
       12: 1439:	case '(':
       12: 1440:	  if (!(syntax & RE_NO_BK_PARENS))
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 1441:	    token->type = OP_OPEN_SUBEXP;
       12: 1442:	  break;
       12: 1443:	case ')':
       12: 1444:	  if (!(syntax & RE_NO_BK_PARENS))
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 1445:	    token->type = OP_CLOSE_SUBEXP;
       12: 1446:	  break;
    #####: 1447:	case '+':
    #####: 1448:	  if (!(syntax & RE_LIMITED_OPS) && (syntax & RE_BK_PLUS_QM))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1449:	    token->type = OP_DUP_PLUS;
    #####: 1450:	  break;
    #####: 1451:	case '?':
    #####: 1452:	  if (!(syntax & RE_LIMITED_OPS) && (syntax & RE_BK_PLUS_QM))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1453:	    token->type = OP_DUP_QUESTION;
    #####: 1454:	  break;
        1: 1455:	case '{':
        1: 1456:	  if ((syntax & RE_INTERVALS) && (!(syntax & RE_NO_BK_BRACES)))
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1457:	    token->type = OP_OPEN_DUP_NUM;
        1: 1458:	  break;
        1: 1459:	case '}':
        1: 1460:	  if ((syntax & RE_INTERVALS) && (!(syntax & RE_NO_BK_BRACES)))
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 1461:	    token->type = OP_CLOSE_DUP_NUM;
        1: 1462:	  break;
      313: 1463:	default:
      313: 1464:	  break;
        -: 1465:	}
      339: 1466:      return 2;
        -: 1467:    }
        -: 1468:
     2341: 1469:  token->type = CHARACTER;
     2341: 1470:  switch (c)
branch  0 taken 12
branch  1 taken 2
branch  2 taken 137
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 4
branch  8 taken 4
branch  9 taken 9
branch 10 taken 121
branch 11 taken 152
branch 12 taken 102
branch 13 taken 1798
        -: 1471:    {
       12: 1472:    case '\n':
       12: 1473:      if (syntax & RE_NEWLINE_ALT)
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####: 1474:	token->type = OP_ALT;
       12: 1475:      break;
        2: 1476:    case '|':
        2: 1477:      if (!(syntax & RE_LIMITED_OPS) && (syntax & RE_NO_BK_VBAR))
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 1478:	token->type = OP_ALT;
        2: 1479:      break;
      137: 1480:    case '*':
      137: 1481:      token->type = OP_DUP_ASTERISK;
      137: 1482:      break;
    #####: 1483:    case '+':
    #####: 1484:      if (!(syntax & RE_LIMITED_OPS) && !(syntax & RE_BK_PLUS_QM))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1485:	token->type = OP_DUP_PLUS;
    #####: 1486:      break;
    #####: 1487:    case '?':
    #####: 1488:      if (!(syntax & RE_LIMITED_OPS) && !(syntax & RE_BK_PLUS_QM))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1489:	token->type = OP_DUP_QUESTION;
    #####: 1490:      break;
    #####: 1491:    case '{':
    #####: 1492:      if ((syntax & RE_INTERVALS) && (syntax & RE_NO_BK_BRACES))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1493:	token->type = OP_OPEN_DUP_NUM;
    #####: 1494:      break;
    #####: 1495:    case '}':
    #####: 1496:      if ((syntax & RE_INTERVALS) && (syntax & RE_NO_BK_BRACES))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1497:	token->type = OP_CLOSE_DUP_NUM;
    #####: 1498:      break;
        4: 1499:    case '(':
        4: 1500:      if (syntax & RE_NO_BK_PARENS)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 1501:	token->type = OP_OPEN_SUBEXP;
        4: 1502:      break;
        4: 1503:    case ')':
        4: 1504:      if (syntax & RE_NO_BK_PARENS)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 1505:	token->type = OP_CLOSE_SUBEXP;
        4: 1506:      break;
        9: 1507:    case '[':
        9: 1508:      token->type = OP_OPEN_BRACKET;
        9: 1509:      break;
      121: 1510:    case '.':
      121: 1511:      token->type = OP_PERIOD;
      121: 1512:      break;
      152: 1513:    case '^':
      152: 1514:      if (!(syntax & RE_CONTEXT_INDEP_ANCHORS) &&
branch  0 taken 152 (fallthrough)
branch  1 taken 0
      152: 1515:	  re_string_cur_idx (input) != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 152
        -: 1516:	{
    #####: 1517:	  char prev = re_string_peek_byte (input, -1);
    #####: 1518:	  if (prev != '|' && prev != '(' &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1519:	      (!(syntax & RE_NEWLINE_ALT) || prev != '\n'))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1520:	    break;
        -: 1521:	}
      152: 1522:      token->type = ANCHOR;
      152: 1523:      token->opr.idx = LINE_FIRST;
      152: 1524:      break;
      102: 1525:    case '$':
      102: 1526:      if (!(syntax & RE_CONTEXT_INDEP_ANCHORS) &&
branch  0 taken 102 (fallthrough)
branch  1 taken 0
      102: 1527:	  re_string_cur_idx (input) + 1 != re_string_length (input))
branch  0 taken 0 (fallthrough)
branch  1 taken 102
        -: 1528:	{
        -: 1529:	  re_token_t next;
    #####: 1530:	  re_string_skip_bytes (input, 1);
    #####: 1531:	  peek_token (&next, input, syntax);
call    0 never executed
    #####: 1532:	  re_string_skip_bytes (input, -1);
    #####: 1533:	  if (next.type != OP_ALT && next.type != OP_CLOSE_SUBEXP)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1534:	    break;
        -: 1535:	}
      102: 1536:      token->type = ANCHOR;
      102: 1537:      token->opr.idx = LINE_LAST;
      102: 1538:      break;
     1798: 1539:    default:
     1798: 1540:      break;
        -: 1541:    }
     2341: 1542:  return 1;
        -: 1543:}
        -: 1544:
        -: 1545:/* Peek a token from INPUT, and return the length of the token.
        -: 1546:   We must not use this function out of bracket expressions.  */
        -: 1547:
        -: 1548:static int
function peek_token_bracket called 49 returned 100% blocks executed 45%
       49: 1549:peek_token_bracket (token, input, syntax)
        -: 1550:     re_token_t *token;
        -: 1551:     re_string_t *input;
        -: 1552:     reg_syntax_t syntax;
        -: 1553:{
        -: 1554:  unsigned char c;
       49: 1555:  if (re_string_eoi (input))
branch  0 taken 0 (fallthrough)
branch  1 taken 49
        -: 1556:    {
    #####: 1557:      token->type = END_OF_RE;
    #####: 1558:      return 0;
        -: 1559:    }
       49: 1560:  c = re_string_peek_byte (input, 0);
       49: 1561:  token->opr.c = c;
        -: 1562:
        -: 1563:#ifdef RE_ENABLE_I18N
        -: 1564:  if (MB_CUR_MAX > 1 &&
        -: 1565:      !re_string_first_byte (input, re_string_cur_idx (input)))
        -: 1566:    {
        -: 1567:      token->type = CHARACTER;
        -: 1568:      return 1;
        -: 1569:    }
        -: 1570:#endif /* RE_ENABLE_I18N */
        -: 1571:
      49*: 1572:  if (c == '\\' && (syntax & RE_BACKSLASH_ESCAPE_IN_LISTS))
branch  0 taken 0 (fallthrough)
branch  1 taken 49
branch  2 never executed
branch  3 never executed
        -: 1573:    {
        -: 1574:      /* In this case, '\' escape a character.  */
        -: 1575:      unsigned char c2;
    #####: 1576:      re_string_skip_bytes (input, 1);
    #####: 1577:      c2 = re_string_peek_byte (input, 0);
    #####: 1578:      token->opr.c = c2;
    #####: 1579:      token->type = CHARACTER;
    #####: 1580:      return 1;
        -: 1581:    }
       49: 1582:  if (c == '[') /* '[' is a special char in a bracket exps.  */
branch  0 taken 0 (fallthrough)
branch  1 taken 49
        -: 1583:    {
        -: 1584:      unsigned char c2;
        -: 1585:      int token_len;
    #####: 1586:      c2 = re_string_peek_byte (input, 1);
    #####: 1587:      token->opr.c = c2;
    #####: 1588:      token_len = 2;
    #####: 1589:      switch (c2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1590:	{
    #####: 1591:	case '.':
    #####: 1592:	  token->type = OP_OPEN_COLL_ELEM;
    #####: 1593:	  break;
    #####: 1594:	case '=':
    #####: 1595:	  token->type = OP_OPEN_EQUIV_CLASS;
    #####: 1596:	  break;
    #####: 1597:	case ':':
    #####: 1598:	  if (syntax & RE_CHAR_CLASSES)
branch  0 never executed
branch  1 never executed
        -: 1599:	    {
    #####: 1600:	      token->type = OP_OPEN_CHAR_CLASS;
    #####: 1601:	      break;
        -: 1602:	    }
        -: 1603:	  /* else fall through.  */
        -: 1604:	default:
    #####: 1605:	  token->type = CHARACTER;
    #####: 1606:	  token->opr.c = c;
    #####: 1607:	  token_len = 1;
    #####: 1608:	  break;
        -: 1609:	}
    #####: 1610:      return token_len;
        -: 1611:    }
       49: 1612:  switch (c)
branch  0 taken 0
branch  1 taken 9
branch  2 taken 1
branch  3 taken 39
        -: 1613:    {
    #####: 1614:    case '-':
    #####: 1615:      token->type = OP_CHARSET_RANGE;
    #####: 1616:      break;
        9: 1617:    case ']':
        9: 1618:      token->type = OP_CLOSE_BRACKET;
        9: 1619:      break;
        1: 1620:    case '^':
        1: 1621:      token->type = OP_NON_MATCH_LIST;
        1: 1622:      break;
       39: 1623:    default:
       39: 1624:      token->type = CHARACTER;
        -: 1625:    }
       49: 1626:  return 1;
        -: 1627:}
        -: 1628:
        -: 1629:/* Functions for parser.  */
        -: 1630:
        -: 1631:/* Entry point of the parser.
        -: 1632:   Parse the regular expression REGEXP and return the structure tree.
        -: 1633:   If an error is occured, ERR is set by error code, and return NULL.
        -: 1634:   This function build the following tree, from regular expression <reg_exp>:
        -: 1635:	   CAT
        -: 1636:	   / \
        -: 1637:	  /   \
        -: 1638:   <reg_exp>  EOR
        -: 1639:
        -: 1640:   CAT means concatenation.
        -: 1641:   EOR means end of regular expression.  */
        -: 1642:
        -: 1643:static bin_tree_t *
function parse called 610 returned 100% blocks executed 75%
      610: 1644:parse (regexp, preg, syntax, err)
        -: 1645:     re_string_t *regexp;
        -: 1646:     regex_t *preg;
        -: 1647:     reg_syntax_t syntax;
        -: 1648:     reg_errcode_t *err;
        -: 1649:{
      610: 1650:  re_dfa_t *dfa = (re_dfa_t *) preg->buffer;
        -: 1651:  bin_tree_t *tree, *eor, *root;
        -: 1652:  re_token_t current_token;
        -: 1653:  int new_idx;
      610: 1654:  current_token = fetch_token (regexp, syntax);
call    0 returned 610
      610: 1655:  tree = parse_reg_exp (regexp, preg, &current_token, syntax, 0, err);
call    0 returned 610
     610*: 1656:  if (BE (*err != REG_NOERROR && tree == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 610
branch  2 never executed
branch  3 never executed
    #####: 1657:    return NULL;
      610: 1658:  new_idx = re_dfa_add_node (dfa, current_token, 0);
call    0 returned 610
      610: 1659:  eor = create_tree (NULL, NULL, 0, new_idx);
call    0 returned 610
      610: 1660:  if (tree != NULL)
branch  0 taken 610 (fallthrough)
branch  1 taken 0
      610: 1661:    root = create_tree (tree, eor, CONCAT, 0);
call    0 returned 610
        -: 1662:  else
    #####: 1663:    root = eor;
     610*: 1664:  if (BE (new_idx == -1 || eor == NULL || root == NULL, 0))
branch  0 taken 610 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 610
branch  4 taken 610 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 610
        -: 1665:    {
    #####: 1666:      *err = REG_ESPACE;
    #####: 1667:      return NULL;
        -: 1668:    }
      610: 1669:  return root;
        -: 1670:}
        -: 1671:
        -: 1672:/* This function build the following tree, from regular expression
        -: 1673:   <branch1>|<branch2>:
        -: 1674:	   ALT
        -: 1675:	   / \
        -: 1676:	  /   \
        -: 1677:   <branch1> <branch2>
        -: 1678:
        -: 1679:   ALT means alternative, which represents the operator `|'.  */
        -: 1680:
        -: 1681:static bin_tree_t *
function parse_reg_exp called 626 returned 100% blocks executed 67%
      626: 1682:parse_reg_exp (regexp, preg, token, syntax, nest, err)
        -: 1683:     re_string_t *regexp;
        -: 1684:     regex_t *preg;
        -: 1685:     re_token_t *token;
        -: 1686:     reg_syntax_t syntax;
        -: 1687:     int nest;
        -: 1688:     reg_errcode_t *err;
        -: 1689:{
      626: 1690:  re_dfa_t *dfa = (re_dfa_t *) preg->buffer;
      626: 1691:  bin_tree_t *tree, *branch = NULL;
        -: 1692:  int new_idx;
      626: 1693:  tree = parse_branch (regexp, preg, token, syntax, nest, err);
call    0 returned 626
     626*: 1694:  if (BE (*err != REG_NOERROR && tree == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 626
branch  2 never executed
branch  3 never executed
    #####: 1695:    return NULL;
        -: 1696:
      628: 1697:  while (token->type == OP_ALT)
branch  0 taken 2
branch  1 taken 626 (fallthrough)
        -: 1698:    {
        2: 1699:      re_token_t alt_token = *token;
        2: 1700:      new_idx = re_dfa_add_node (dfa, alt_token, 0);
call    0 returned 2
        2: 1701:      *token = fetch_token (regexp, syntax);
call    0 returned 2
        2: 1702:      if (token->type != OP_ALT && token->type != END_OF_RE
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 2 (fallthrough)
branch  3 taken 0
       2*: 1703:	  && (nest == 0 || token->type != OP_CLOSE_SUBEXP))
branch  0 taken 0 (fallthrough)
branch  1 taken 2
branch  2 never executed
branch  3 never executed
        -: 1704:	{
        2: 1705:	  branch = parse_branch (regexp, preg, token, syntax, nest, err);
call    0 returned 2
       2*: 1706:	  if (BE (*err != REG_NOERROR && branch == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 2
branch  2 never executed
branch  3 never executed
        -: 1707:	    {
    #####: 1708:	      free_bin_tree (tree);
call    0 never executed
    #####: 1709:	      return NULL;
        -: 1710:	    }
        -: 1711:	}
        -: 1712:      else
    #####: 1713:	branch = NULL;
        2: 1714:      tree = create_tree (tree, branch, 0, new_idx);
call    0 returned 2
        2: 1715:      if (BE (new_idx == -1 || tree == NULL, 0))
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
        -: 1716:	{
    #####: 1717:	  *err = REG_ESPACE;
    #####: 1718:	  return NULL;
        -: 1719:	}
        2: 1720:      dfa->has_plural_match = 1;
        -: 1721:    }
      626: 1722:  return tree;
        -: 1723:}
        -: 1724:
        -: 1725:/* This function build the following tree, from regular expression
        -: 1726:   <exp1><exp2>:
        -: 1727:	CAT
        -: 1728:	/ \
        -: 1729:       /   \
        -: 1730:   <exp1> <exp2>
        -: 1731:
        -: 1732:   CAT means concatenation.  */
        -: 1733:
        -: 1734:static bin_tree_t *
function parse_branch called 628 returned 100% blocks executed 67%
      628: 1735:parse_branch (regexp, preg, token, syntax, nest, err)
        -: 1736:     re_string_t *regexp;
        -: 1737:     regex_t *preg;
        -: 1738:     re_token_t *token;
        -: 1739:     reg_syntax_t syntax;
        -: 1740:     int nest;
        -: 1741:     reg_errcode_t *err;
        -: 1742:{
        -: 1743:  bin_tree_t *tree, *exp;
      628: 1744:  tree = parse_expression (regexp, preg, token, syntax, nest, err);
call    0 returned 628
     628*: 1745:  if (BE (*err != REG_NOERROR && tree == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 628
branch  2 never executed
branch  3 never executed
    #####: 1746:    return NULL;
        -: 1747:
     3154: 1748:  while (token->type != OP_ALT && token->type != END_OF_RE
branch  0 taken 1916 (fallthrough)
branch  1 taken 610
     4444: 1749:	 && (nest == 0 || token->type != OP_CLOSE_SUBEXP))
branch  0 taken 2526 (fallthrough)
branch  1 taken 2
branch  2 taken 1892
branch  3 taken 24 (fallthrough)
branch  4 taken 8
branch  5 taken 16 (fallthrough)
        -: 1750:    {
     1900: 1751:      exp = parse_expression (regexp, preg, token, syntax, nest, err);
call    0 returned 1900
    1900*: 1752:      if (BE (*err != REG_NOERROR && exp == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 1900
branch  2 never executed
branch  3 never executed
        -: 1753:	{
    #####: 1754:	  free_bin_tree (tree);
call    0 never executed
    #####: 1755:	  return NULL;
        -: 1756:	}
     1900: 1757:      if (tree != NULL && exp != NULL)
branch  0 taken 1900 (fallthrough)
branch  1 taken 0
branch  2 taken 1900 (fallthrough)
branch  3 taken 0
        -: 1758:	{
     1900: 1759:	  tree = create_tree (tree, exp, CONCAT, 0);
call    0 returned 1900
     1900: 1760:	  if (tree == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 1900
        -: 1761:	    {
    #####: 1762:	      *err = REG_ESPACE;
    #####: 1763:	      return NULL;
        -: 1764:	    }
        -: 1765:	}
    #####: 1766:      else if (tree == NULL)
branch  0 never executed
branch  1 never executed
    #####: 1767:	tree = exp;
        -: 1768:      /* Otherwise exp == NULL, we don't need to create new tree.  */
        -: 1769:    }
      628: 1770:  return tree;
        -: 1771:}
        -: 1772:
        -: 1773:/* This function build the following tree, from regular expression a*:
        -: 1774:	 *
        -: 1775:	 |
        -: 1776:	 a
        -: 1777:*/
        -: 1778:
        -: 1779:static bin_tree_t *
function parse_expression called 2528 returned 100% blocks executed 42%
     2528: 1780:parse_expression (regexp, preg, token, syntax, nest, err)
        -: 1781:     re_string_t *regexp;
        -: 1782:     regex_t *preg;
        -: 1783:     re_token_t *token;
        -: 1784:     reg_syntax_t syntax;
        -: 1785:     int nest;
        -: 1786:     reg_errcode_t *err;
        -: 1787:{
     2528: 1788:  re_dfa_t *dfa = (re_dfa_t *) preg->buffer;
        -: 1789:  bin_tree_t *tree;
        -: 1790:  int new_idx;
     2528: 1791:  switch (token->type)
branch  0 taken 2120
branch  1 taken 16
branch  2 taken 9
branch  3 taken 0
branch  4 taken 8
branch  5 taken 0
branch  6 taken 0
branch  7 taken 254
branch  8 taken 121
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
        -: 1792:    {
     2120: 1793:    case CHARACTER:
     2120: 1794:      new_idx = re_dfa_add_node (dfa, *token, 0);
call    0 returned 2120
     2120: 1795:      tree = create_tree (NULL, NULL, 0, new_idx);
call    0 returned 2120
     2120: 1796:      if (BE (new_idx == -1 || tree == NULL, 0))
branch  0 taken 2120 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2120
        -: 1797:	{
    #####: 1798:	  *err = REG_ESPACE;
    #####: 1799:	  return NULL;
        -: 1800:	}
        -: 1801:#ifdef RE_ENABLE_I18N
        -: 1802:      if (MB_CUR_MAX > 1)
        -: 1803:	{
        -: 1804:	  while (!re_string_eoi (regexp)
        -: 1805:		 && !re_string_first_byte (regexp, re_string_cur_idx (regexp)))
        -: 1806:	    {
        -: 1807:	      bin_tree_t *mbc_remain;
        -: 1808:	      *token = fetch_token (regexp, syntax);
        -: 1809:	      new_idx = re_dfa_add_node (dfa, *token, 0);
        -: 1810:	      mbc_remain = create_tree (NULL, NULL, 0, new_idx);
        -: 1811:	      tree = create_tree (tree, mbc_remain, CONCAT, 0);
        -: 1812:	      if (BE (new_idx == -1 || mbc_remain == NULL || tree == NULL, 0))
        -: 1813:		{
        -: 1814:		  *err = REG_ESPACE;
        -: 1815:		  return NULL;
        -: 1816:		}
        -: 1817:	    }
        -: 1818:	}
        -: 1819:#endif
     2120: 1820:      break;
       16: 1821:    case OP_OPEN_SUBEXP:
       16: 1822:      tree = parse_sub_exp (regexp, preg, token, syntax, nest + 1, err);
call    0 returned 16
      16*: 1823:      if (BE (*err != REG_NOERROR && tree == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 16
branch  2 never executed
branch  3 never executed
    #####: 1824:	return NULL;
       16: 1825:      break;
        9: 1826:    case OP_OPEN_BRACKET:
        9: 1827:      tree = parse_bracket_exp (regexp, dfa, token, syntax, err);
call    0 returned 9
       9*: 1828:      if (BE (*err != REG_NOERROR && tree == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 9
branch  2 never executed
branch  3 never executed
    #####: 1829:	return NULL;
        9: 1830:      break;
    #####: 1831:    case OP_BACK_REF:
    #####: 1832:      if (BE (preg->re_nsub < token->opr.idx
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1833:	      || dfa->subexps[token->opr.idx - 1].end == -1, 0))
        -: 1834:	{
    #####: 1835:	  *err = REG_ESUBREG;
    #####: 1836:	  return NULL;
        -: 1837:	}
    #####: 1838:      new_idx = re_dfa_add_node (dfa, *token, 0);
call    0 never executed
    #####: 1839:      tree = create_tree (NULL, NULL, 0, new_idx);
call    0 never executed
    #####: 1840:      if (BE (new_idx == -1 || tree == NULL, 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1841:	{
    #####: 1842:	  *err = REG_ESPACE;
    #####: 1843:	  return NULL;
        -: 1844:	}
    #####: 1845:      ++dfa->nbackref;
    #####: 1846:      dfa->has_mb_node = 1;
    #####: 1847:      break;
        8: 1848:    case OP_DUP_ASTERISK:
        -: 1849:    case OP_DUP_PLUS:
        -: 1850:    case OP_DUP_QUESTION:
        -: 1851:    case OP_OPEN_DUP_NUM:
        8: 1852:      if (syntax & RE_CONTEXT_INVALID_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -: 1853:	{
    #####: 1854:	  *err = REG_BADRPT;
    #####: 1855:	  return NULL;
        -: 1856:	}
        8: 1857:      else if (syntax & RE_CONTEXT_INDEP_OPS)
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -: 1858:	{
    #####: 1859:	  *token = fetch_token (regexp, syntax);
call    0 never executed
    #####: 1860:	  return parse_expression (regexp, preg, token, syntax, nest, err);
call    0 never executed
        -: 1861:	}
        -: 1862:      /* else fall through  */
        -: 1863:    case OP_CLOSE_SUBEXP:
       8*: 1864:      if ((token->type == OP_CLOSE_SUBEXP) &&
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 1865:	  !(syntax & RE_UNMATCHED_RIGHT_PAREN_ORD))
branch  0 never executed
branch  1 never executed
        -: 1866:	{
    #####: 1867:	  *err = REG_ERPAREN;
    #####: 1868:	  return NULL;
        -: 1869:	}
        -: 1870:      /* else fall through  */
        -: 1871:    case OP_CLOSE_DUP_NUM:
        -: 1872:      /* We treat it as a normal character.  */
        -: 1873:
        -: 1874:      /* Then we can these characters as normal characters.  */
        8: 1875:      token->type = CHARACTER;
        8: 1876:      new_idx = re_dfa_add_node (dfa, *token, 0);
call    0 returned 8
        8: 1877:      tree = create_tree (NULL, NULL, 0, new_idx);
call    0 returned 8
        8: 1878:      if (BE (new_idx == -1 || tree == NULL, 0))
branch  0 taken 8 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 8
        -: 1879:	{
    #####: 1880:	  *err = REG_ESPACE;
    #####: 1881:	  return NULL;
        -: 1882:	}
        8: 1883:      break;
      254: 1884:    case ANCHOR:
      254: 1885:      if (dfa->word_char == NULL)
branch  0 taken 203 (fallthrough)
branch  1 taken 51
        -: 1886:	{
      203: 1887:	  *err = init_word_char (dfa);
call    0 returned 203
      203: 1888:	  if (BE (*err != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 203
    #####: 1889:	    return NULL;
        -: 1890:	}
      254: 1891:      if (token->opr.ctx_type == WORD_DELIM)
branch  0 taken 0 (fallthrough)
branch  1 taken 254
        -: 1892:	{
        -: 1893:	  bin_tree_t *tree_first, *tree_last;
        -: 1894:	  int idx_first, idx_last;
    #####: 1895:	  token->opr.ctx_type = WORD_FIRST;
    #####: 1896:	  idx_first = re_dfa_add_node (dfa, *token, 0);
call    0 never executed
    #####: 1897:	  tree_first = create_tree (NULL, NULL, 0, idx_first);
call    0 never executed
    #####: 1898:	  token->opr.ctx_type = WORD_LAST;
    #####: 1899:	  idx_last = re_dfa_add_node (dfa, *token, 0);
call    0 never executed
    #####: 1900:	  tree_last = create_tree (NULL, NULL, 0, idx_last);
call    0 never executed
    #####: 1901:	  token->type = OP_ALT;
    #####: 1902:	  new_idx = re_dfa_add_node (dfa, *token, 0);
call    0 never executed
    #####: 1903:	  tree = create_tree (tree_first, tree_last, 0, new_idx);
call    0 never executed
    #####: 1904:	  if (BE (idx_first == -1 || idx_last == -1 || new_idx == -1
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
        -: 1905:		  || tree_first == NULL || tree_last == NULL
        -: 1906:		  || tree == NULL, 0))
        -: 1907:	    {
    #####: 1908:	      *err = REG_ESPACE;
    #####: 1909:	      return NULL;
        -: 1910:	    }
        -: 1911:	}
        -: 1912:      else
        -: 1913:	{
      254: 1914:	  new_idx = re_dfa_add_node (dfa, *token, 0);
call    0 returned 254
      254: 1915:	  tree = create_tree (NULL, NULL, 0, new_idx);
call    0 returned 254
      254: 1916:	  if (BE (new_idx == -1 || tree == NULL, 0))
branch  0 taken 254 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 254
        -: 1917:	    {
    #####: 1918:	      *err = REG_ESPACE;
    #####: 1919:	      return NULL;
        -: 1920:	    }
        -: 1921:	}
        -: 1922:      /* We must return here, since ANCHORs can't be followed
        -: 1923:	 by repetition operators.
        -: 1924:	 eg. RE"^*" is invalid or "<ANCHOR(^)><CHAR(*)>",
        -: 1925:	     it must not be "<ANCHOR(^)><REPEAT(*)>".  */
      254: 1926:      *token = fetch_token (regexp, syntax);
call    0 returned 254
      254: 1927:      return tree;
      121: 1928:    case OP_PERIOD:
      121: 1929:      new_idx = re_dfa_add_node (dfa, *token, 0);
call    0 returned 121
      121: 1930:      tree = create_tree (NULL, NULL, 0, new_idx);
call    0 returned 121
      121: 1931:      if (BE (new_idx == -1 || tree == NULL, 0))
branch  0 taken 121 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 121
        -: 1932:	{
    #####: 1933:	  *err = REG_ESPACE;
    #####: 1934:	  return NULL;
        -: 1935:	}
      121: 1936:      if (MB_CUR_MAX > 1)
call    0 returned 121
branch  1 taken 0 (fallthrough)
branch  2 taken 121
    #####: 1937:	dfa->has_mb_node = 1;
      121: 1938:      break;
    #####: 1939:    case OP_WORD:
    #####: 1940:      tree = build_word_op (dfa, 0, err);
call    0 never executed
    #####: 1941:      if (BE (*err != REG_NOERROR && tree == NULL, 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1942:	return NULL;
    #####: 1943:      break;
    #####: 1944:    case OP_NOTWORD:
    #####: 1945:      tree = build_word_op (dfa, 1, err);
call    0 never executed
    #####: 1946:      if (BE (*err != REG_NOERROR && tree == NULL, 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1947:	return NULL;
    #####: 1948:      break;
    #####: 1949:    case OP_ALT:
        -: 1950:    case END_OF_RE:
    #####: 1951:      return NULL;
    #####: 1952:    case BACK_SLASH:
    #####: 1953:      *err = REG_EESCAPE;
    #####: 1954:      return NULL;
    #####: 1955:    default:
        -: 1956:      /* Must not happen?  */
        -: 1957:#ifdef DEBUG
        -: 1958:      assert (0);
        -: 1959:#endif
    #####: 1960:      return NULL;
        -: 1961:    }
     2274: 1962:  *token = fetch_token (regexp, syntax);
call    0 returned 2274
        -: 1963:
     4549: 1964:  while (token->type == OP_DUP_ASTERISK || token->type == OP_DUP_PLUS
branch  0 taken 0
branch  1 taken 2275 (fallthrough)
     4679: 1965:	 || token->type == OP_DUP_QUESTION || token->type == OP_OPEN_DUP_NUM)
branch  0 taken 129
branch  1 taken 2275 (fallthrough)
branch  2 taken 0
branch  3 taken 2275 (fallthrough)
branch  4 taken 1
branch  5 taken 2274 (fallthrough)
        -: 1966:    {
      130: 1967:      tree = parse_dup_op (tree, regexp, dfa, token, syntax, err);
call    0 returned 130
     130*: 1968:      if (BE (*err != REG_NOERROR && tree == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 130
branch  2 never executed
branch  3 never executed
    #####: 1969:	return NULL;
      130: 1970:      dfa->has_plural_match = 1;
        -: 1971:    }
        -: 1972:
     2274: 1973:  return tree;
        -: 1974:}
        -: 1975:
        -: 1976:/* This function build the following tree, from regular expression
        -: 1977:   (<reg_exp>):
        -: 1978:	 SUBEXP
        -: 1979:	    |
        -: 1980:	<reg_exp>
        -: 1981:*/
        -: 1982:
        -: 1983:static bin_tree_t *
function parse_sub_exp called 16 returned 100% blocks executed 71%
       16: 1984:parse_sub_exp (regexp, preg, token, syntax, nest, err)
        -: 1985:     re_string_t *regexp;
        -: 1986:     regex_t *preg;
        -: 1987:     re_token_t *token;
        -: 1988:     reg_syntax_t syntax;
        -: 1989:     int nest;
        -: 1990:     reg_errcode_t *err;
        -: 1991:{
       16: 1992:  re_dfa_t *dfa = (re_dfa_t *) preg->buffer;
        -: 1993:  bin_tree_t *tree, *left_par, *right_par;
        -: 1994:  size_t cur_nsub;
        -: 1995:  int new_idx;
       16: 1996:  cur_nsub = preg->re_nsub++;
       16: 1997:  if (dfa->subexps_alloc < preg->re_nsub)
branch  0 taken 8 (fallthrough)
branch  1 taken 8
        -: 1998:    {
        -: 1999:      re_subexp_t *new_array;
        8: 2000:      dfa->subexps_alloc *= 2;
        8: 2001:      new_array = re_realloc (dfa->subexps, re_subexp_t, dfa->subexps_alloc);
        8: 2002:      if (BE (new_array == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -: 2003:	{
    #####: 2004:	  dfa->subexps_alloc /= 2;
    #####: 2005:	  *err = REG_ESPACE;
    #####: 2006:	  return NULL;
        -: 2007:	}
        8: 2008:      dfa->subexps = new_array;
        -: 2009:    }
       16: 2010:  dfa->subexps[cur_nsub].start = dfa->nodes_len;
       16: 2011:  dfa->subexps[cur_nsub].end = -1;
        -: 2012:
       16: 2013:  new_idx = re_dfa_add_node (dfa, *token, 0);
call    0 returned 16
       16: 2014:  left_par = create_tree (NULL, NULL, 0, new_idx);
call    0 returned 16
       16: 2015:  if (BE (new_idx == -1 || left_par == NULL, 0))
branch  0 taken 16 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 16
        -: 2016:    {
    #####: 2017:      *err = REG_ESPACE;
    #####: 2018:      return NULL;
        -: 2019:    }
       16: 2020:  dfa->nodes[new_idx].opr.idx = cur_nsub;
       16: 2021:  *token = fetch_token (regexp, syntax);
call    0 returned 16
        -: 2022:
        -: 2023:  /* The subexpression may be a null string.  */
       16: 2024:  if (token->type == OP_CLOSE_SUBEXP)
branch  0 taken 0 (fallthrough)
branch  1 taken 16
    #####: 2025:    tree = NULL;
        -: 2026:  else
        -: 2027:    {
       16: 2028:      tree = parse_reg_exp (regexp, preg, token, syntax, nest, err);
call    0 returned 16
      16*: 2029:      if (BE (*err != REG_NOERROR && tree == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 16
branch  2 never executed
branch  3 never executed
    #####: 2030:	return NULL;
        -: 2031:    }
       16: 2032:  if (BE (token->type != OP_CLOSE_SUBEXP, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 16
        -: 2033:    {
    #####: 2034:      free_bin_tree (tree);
call    0 never executed
    #####: 2035:      *err = REG_BADPAT;
    #####: 2036:      return NULL;
        -: 2037:    }
       16: 2038:  new_idx = re_dfa_add_node (dfa, *token, 0);
call    0 returned 16
       16: 2039:  dfa->subexps[cur_nsub].end = dfa->nodes_len;
       16: 2040:  right_par = create_tree (NULL, NULL, 0, new_idx);
call    0 returned 16
       16: 2041:  tree = ((tree == NULL) ? right_par
      16*: 2042:	  : create_tree (tree, right_par, CONCAT, 0));
branch  0 taken 16 (fallthrough)
branch  1 taken 0
call    2 returned 16
       16: 2043:  tree = create_tree (left_par, tree, CONCAT, 0);
call    0 returned 16
      16*: 2044:  if (BE (new_idx == -1 || right_par == NULL || tree == NULL, 0))
branch  0 taken 16 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 16
branch  4 taken 16 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 16
        -: 2045:    {
    #####: 2046:      *err = REG_ESPACE;
    #####: 2047:      return NULL;
        -: 2048:    }
       16: 2049:  dfa->nodes[new_idx].opr.idx = cur_nsub;
        -: 2050:
       16: 2051:  return tree;
        -: 2052:}
        -: 2053:
        -: 2054:/* This function parse repetition operators like "*", "+", "{1,3}" etc.  */
        -: 2055:
        -: 2056:static bin_tree_t *
function parse_dup_op called 130 returned 100% blocks executed 39%
      130: 2057:parse_dup_op (dup_elem, regexp, dfa, token, syntax, err)
        -: 2058:     bin_tree_t *dup_elem;
        -: 2059:     re_string_t *regexp;
        -: 2060:     re_dfa_t *dfa;
        -: 2061:     re_token_t *token;
        -: 2062:     reg_syntax_t syntax;
        -: 2063:     reg_errcode_t *err;
        -: 2064:{
        -: 2065:  re_token_t dup_token;
      130: 2066:  bin_tree_t *tree = dup_elem, *work_tree;
      130: 2067:  int new_idx, start_idx = re_string_cur_idx (regexp);
      130: 2068:  re_token_t start_token = *token;
      130: 2069:  if (token->type == OP_OPEN_DUP_NUM)
branch  0 taken 1 (fallthrough)
branch  1 taken 129
        -: 2070:    {
        -: 2071:      int i;
        1: 2072:      int end = 0;
        1: 2073:      int start = fetch_number (regexp, token, syntax);
call    0 returned 1
        -: 2074:      bin_tree_t *elem;
        1: 2075:      if (start == -1)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 2076:	{
    #####: 2077:	  if (token->type == CHARACTER && token->opr.c == ',')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2078:	    start = 0; /* We treat "{,m}" as "{0,m}".  */
        -: 2079:	  else
        -: 2080:	    {
    #####: 2081:	      *err = REG_BADBR; /* <re>{} is invalid.  */
    #####: 2082:	      return NULL;
        -: 2083:	    }
        -: 2084:	}
        1: 2085:      if (BE (start != -2, 1))
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 2086:	{
        -: 2087:	  /* We treat "{n}" as "{n,n}".  */
        1: 2088:	  end = ((token->type == OP_CLOSE_DUP_NUM) ? start
       3*: 2089:		 : ((token->type == CHARACTER && token->opr.c == ',')
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
       2*: 2090:		    ? fetch_number (regexp, token, syntax) : -2));
branch  0 taken 1 (fallthrough)
branch  1 taken 0
call    2 returned 1
        -: 2091:	}
        1: 2092:      if (BE (start == -2 || end == -2, 0))
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -: 2093:	{
        -: 2094:	  /* Invalid sequence.  */
    #####: 2095:	  if (token->type == OP_CLOSE_DUP_NUM)
branch  0 never executed
branch  1 never executed
    #####: 2096:	    goto parse_dup_op_invalid_interval;
        -: 2097:	  else
    #####: 2098:	    goto parse_dup_op_ebrace;
        -: 2099:	}
       1*: 2100:      if (BE (start == 0 && end == 0, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
        -: 2101:	{
        -: 2102:	  /* We treat "<re>{0}" and "<re>{0,0}" as null string.  */
    #####: 2103:	  *token = fetch_token (regexp, syntax);
call    0 never executed
    #####: 2104:	  free_bin_tree (dup_elem);
call    0 never executed
    #####: 2105:	  return NULL;
        -: 2106:	}
        -: 2107:
        -: 2108:      /* Extract "<re>{n,m}" to "<re><re>...<re><re>{0,<m-n>}".  */
        1: 2109:      elem = tree;
        2: 2110:      for (i = 0; i < start; ++i)
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1: 2111:	if (i != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 2112:	  {
    #####: 2113:	    work_tree = duplicate_tree (elem, dfa);
call    0 never executed
    #####: 2114:	    tree = create_tree (tree, work_tree, CONCAT, 0);
call    0 never executed
    #####: 2115:	    if (BE (work_tree == NULL || tree == NULL, 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2116:	      goto parse_dup_op_espace;
        -: 2117:	  }
        -: 2118:
        1: 2119:      if (end == -1)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 2120:	{
        -: 2121:	  /* We treat "<re>{0,}" as "<re>*".  */
    #####: 2122:	  dup_token.type = OP_DUP_ASTERISK;
    #####: 2123:	  if (start > 0)
branch  0 never executed
branch  1 never executed
        -: 2124:	    {
    #####: 2125:	      elem = duplicate_tree (elem, dfa);
call    0 never executed
    #####: 2126:	      new_idx = re_dfa_add_node (dfa, dup_token, 0);
call    0 never executed
    #####: 2127:	      work_tree = create_tree (elem, NULL, 0, new_idx);
call    0 never executed
    #####: 2128:	      tree = create_tree (tree, work_tree, CONCAT, 0);
call    0 never executed
    #####: 2129:	      if (BE (elem == NULL || new_idx == -1 || work_tree == NULL
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
        -: 2130:		      || tree == NULL, 0))
    #####: 2131:		goto parse_dup_op_espace;
        -: 2132:	    }
        -: 2133:	  else
        -: 2134:	    {
    #####: 2135:	      new_idx = re_dfa_add_node (dfa, dup_token, 0);
call    0 never executed
    #####: 2136:	      tree = create_tree (elem, NULL, 0, new_idx);
call    0 never executed
    #####: 2137:	      if (BE (new_idx == -1 || tree == NULL, 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2138:		goto parse_dup_op_espace;
        -: 2139:	    }
        -: 2140:	}
        1: 2141:      else if (end - start > 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 2142:	{
        -: 2143:	  /* Then extract "<re>{0,m}" to "<re>?<re>?...<re>?".  */
        1: 2144:	  dup_token.type = OP_DUP_QUESTION;
        1: 2145:	  if (start > 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 2146:	    {
        1: 2147:	      elem = duplicate_tree (elem, dfa);
call    0 returned 1
        1: 2148:	      new_idx = re_dfa_add_node (dfa, dup_token, 0);
call    0 returned 1
        1: 2149:	      elem = create_tree (elem, NULL, 0, new_idx);
call    0 returned 1
        1: 2150:	      tree = create_tree (tree, elem, CONCAT, 0);
call    0 returned 1
       1*: 2151:	      if (BE (elem == NULL || new_idx == -1 || tree == NULL, 0))
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    #####: 2152:		goto parse_dup_op_espace;
        -: 2153:	    }
        -: 2154:	  else
        -: 2155:	    {
    #####: 2156:	      new_idx = re_dfa_add_node (dfa, dup_token, 0);
call    0 never executed
    #####: 2157:	      tree = elem = create_tree (elem, NULL, 0, new_idx);
call    0 never executed
    #####: 2158:	      if (BE (new_idx == -1 || tree == NULL, 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2159:		goto parse_dup_op_espace;
        -: 2160:	    }
       1*: 2161:	  for (i = 1; i < end - start; ++i)
branch  0 taken 0
branch  1 taken 1
        -: 2162:	    {
    #####: 2163:	      work_tree = duplicate_tree (elem, dfa);
call    0 never executed
    #####: 2164:	      tree = create_tree (tree, work_tree, CONCAT, 0);
call    0 never executed
    #####: 2165:	      if (BE (work_tree == NULL || tree == NULL, 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2166:		{
    #####: 2167:		  *err = REG_ESPACE;
    #####: 2168:		  return NULL;
        -: 2169:		}
        -: 2170:	    }
        -: 2171:	}
        -: 2172:    }
        -: 2173:  else
        -: 2174:    {
      129: 2175:      new_idx = re_dfa_add_node (dfa, *token, 0);
call    0 returned 129
      129: 2176:      tree = create_tree (tree, NULL, 0, new_idx);
call    0 returned 129
      129: 2177:      if (BE (new_idx == -1 || tree == NULL, 0))
branch  0 taken 129 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 129
        -: 2178:	{
    #####: 2179:	  *err = REG_ESPACE;
    #####: 2180:	  return NULL;
        -: 2181:	}
        -: 2182:    }
      130: 2183:  *token = fetch_token (regexp, syntax);
call    0 returned 130
      130: 2184:  return tree;
        -: 2185:
    #####: 2186: parse_dup_op_espace:
    #####: 2187:  free_bin_tree (tree);
call    0 never executed
    #####: 2188:  *err = REG_ESPACE;
    #####: 2189:  return NULL;
        -: 2190:
    #####: 2191: parse_dup_op_ebrace:
    #####: 2192:  if (BE (!(syntax & RE_INVALID_INTERVAL_ORD), 0))
branch  0 never executed
branch  1 never executed
        -: 2193:    {
    #####: 2194:      *err = REG_EBRACE;
    #####: 2195:      return NULL;
        -: 2196:    }
    #####: 2197:  goto parse_dup_op_rollback;
    #####: 2198: parse_dup_op_invalid_interval:
    #####: 2199:  if (BE (!(syntax & RE_INVALID_INTERVAL_ORD), 0))
branch  0 never executed
branch  1 never executed
        -: 2200:    {
    #####: 2201:      *err = REG_BADBR;
    #####: 2202:      return NULL;
        -: 2203:    }
    #####: 2204: parse_dup_op_rollback:
    #####: 2205:  re_string_set_index (regexp, start_idx);
    #####: 2206:  *token = start_token;
    #####: 2207:  token->type = CHARACTER;
    #####: 2208:  return dup_elem;
        -: 2209:}
        -: 2210:
        -: 2211:/* Size of the names for collating symbol/equivalence_class/character_class.
        -: 2212:   I'm not sure, but maybe enough.  */
        -: 2213:#define BRACKET_NAME_BUF_SIZE 32
        -: 2214:
        -: 2215:#ifndef _LIBC
        -: 2216:  /* Local function for parse_bracket_exp only used in case of NOT _LIBC.
        -: 2217:     Build the range expression which starts from START_ELEM, and ends
        -: 2218:     at END_ELEM.  The result are written to MBCSET and SBCSET.
        -: 2219:     RANGE_ALLOC is the allocated size of mbcset->range_starts, and
        -: 2220:     mbcset->range_ends, is a pointer argument sinse we may
        -: 2221:     update it.  */
        -: 2222:
        -: 2223:static reg_errcode_t
        -: 2224:# ifdef RE_ENABLE_I18N
        -: 2225:build_range_exp (sbcset, mbcset, range_alloc, start_elem, end_elem)
        -: 2226:     re_charset_t *mbcset;
        -: 2227:     int *range_alloc;
        -: 2228:# else /* not RE_ENABLE_I18N */
function build_range_exp called 0 returned 0% blocks executed 0%
    #####: 2229:build_range_exp (sbcset, start_elem, end_elem)
        -: 2230:# endif /* not RE_ENABLE_I18N */
        -: 2231:     re_bitset_ptr_t sbcset;
        -: 2232:     bracket_elem_t *start_elem, *end_elem;
        -: 2233:{
        -: 2234:  unsigned int start_ch, end_ch;
        -: 2235:  /* Equivalence Classes and Character Classes can't be a range start/end.  */
    #####: 2236:  if (BE (start_elem->type == EQUIV_CLASS || start_elem->type == CHAR_CLASS
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
        -: 2237:	  || end_elem->type == EQUIV_CLASS || end_elem->type == CHAR_CLASS,
        -: 2238:	  0))
    #####: 2239:    return REG_ERANGE;
        -: 2240:
        -: 2241:  /* We can handle no multi character collating elements without libc
        -: 2242:     support.  */
    #####: 2243:  if (BE ((start_elem->type == COLL_SYM
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
        -: 2244:	   && strlen ((char *) start_elem->opr.name) > 1)
        -: 2245:	  || (end_elem->type == COLL_SYM
        -: 2246:	      && strlen ((char *) end_elem->opr.name) > 1), 0))
    #####: 2247:    return REG_ECOLLATE;
        -: 2248:
        -: 2249:# ifdef RE_ENABLE_I18N
        -: 2250:  {
        -: 2251:    wchar_t wc, start_wc, end_wc;
        -: 2252:    wchar_t cmp_buf[6] = {L'\0', L'\0', L'\0', L'\0', L'\0', L'\0'};
        -: 2253:
        -: 2254:    start_ch = ((start_elem->type == SB_CHAR) ? start_elem->opr.ch
        -: 2255:		: ((start_elem->type == COLL_SYM) ? start_elem->opr.name[0]
        -: 2256:		   : 0));
        -: 2257:    end_ch = ((end_elem->type == SB_CHAR) ? end_elem->opr.ch
        -: 2258:	      : ((end_elem->type == COLL_SYM) ? end_elem->opr.name[0]
        -: 2259:		 : 0));
        -: 2260:    start_wc = ((start_elem->type == SB_CHAR || start_elem->type == COLL_SYM)
        -: 2261:		? __btowc (start_ch) : start_elem->opr.wch);
        -: 2262:    end_wc = ((end_elem->type == SB_CHAR || end_elem->type == COLL_SYM)
        -: 2263:	      ? __btowc (end_ch) : end_elem->opr.wch);
        -: 2264:    cmp_buf[0] = start_wc;
        -: 2265:    cmp_buf[4] = end_wc;
        -: 2266:    if (wcscoll (cmp_buf, cmp_buf + 4) > 0)
        -: 2267:      return REG_ERANGE;
        -: 2268:
        -: 2269:    /* Check the space of the arrays.  */
        -: 2270:    if (*range_alloc == mbcset->nranges)
        -: 2271:      {
        -: 2272:	/* There are not enough space, need realloc.  */
        -: 2273:	wchar_t *new_array_start, *new_array_end;
        -: 2274:	int new_nranges;
        -: 2275:
        -: 2276:	/* +1 in case of mbcset->nranges is 0.  */
        -: 2277:	new_nranges = 2 * mbcset->nranges + 1;
        -: 2278:	/* Use realloc since mbcset->range_starts and mbcset->range_ends
        -: 2279:	   are NULL if *range_alloc == 0.  */
        -: 2280:	new_array_start = re_realloc (mbcset->range_starts, wchar_t,
        -: 2281:				      new_nranges);
        -: 2282:	new_array_end = re_realloc (mbcset->range_ends, wchar_t,
        -: 2283:				    new_nranges);
        -: 2284:
        -: 2285:	if (BE (new_array_start == NULL || new_array_end == NULL, 0))
        -: 2286:	  return REG_ESPACE;
        -: 2287:
        -: 2288:	mbcset->range_starts = new_array_start;
        -: 2289:	mbcset->range_ends = new_array_end;
        -: 2290:	*range_alloc = new_nranges;
        -: 2291:      }
        -: 2292:
        -: 2293:    mbcset->range_starts[mbcset->nranges] = start_wc;
        -: 2294:    mbcset->range_ends[mbcset->nranges++] = end_wc;
        -: 2295:
        -: 2296:    /* Build the table for single byte characters.  */
        -: 2297:    for (wc = 0; wc <= SBC_MAX; ++wc)
        -: 2298:      {
        -: 2299:	cmp_buf[2] = wc;
        -: 2300:	if (wcscoll (cmp_buf, cmp_buf + 2) <= 0
        -: 2301:	    && wcscoll (cmp_buf + 2, cmp_buf + 4) <= 0)
        -: 2302:	  bitset_set (sbcset, wc);
        -: 2303:      }
        -: 2304:  }
        -: 2305:# else /* not RE_ENABLE_I18N */
        -: 2306:  {
        -: 2307:    unsigned int ch;
    #####: 2308:    start_ch = ((start_elem->type == SB_CHAR ) ? start_elem->opr.ch
    #####: 2309:		: ((start_elem->type == COLL_SYM) ? start_elem->opr.name[0]
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2310:		   : 0));
    #####: 2311:    end_ch = ((end_elem->type == SB_CHAR ) ? end_elem->opr.ch
    #####: 2312:	      : ((end_elem->type == COLL_SYM) ? end_elem->opr.name[0]
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2313:		 : 0));
    #####: 2314:    if (start_ch > end_ch)
branch  0 never executed
branch  1 never executed
    #####: 2315:      return REG_ERANGE;
        -: 2316:    /* Build the table for single byte characters.  */
    #####: 2317:    for (ch = 0; ch <= SBC_MAX; ++ch)
branch  0 never executed
branch  1 never executed
    #####: 2318:      if (start_ch <= ch  && ch <= end_ch)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2319:	bitset_set (sbcset, ch);
        -: 2320:  }
        -: 2321:# endif /* not RE_ENABLE_I18N */
    #####: 2322:  return REG_NOERROR;
        -: 2323:}
        -: 2324:#endif /* not _LIBC */
        -: 2325:
        -: 2326:#ifndef _LIBC
        -: 2327:/* Helper function for parse_bracket_exp only used in case of NOT _LIBC..
        -: 2328:   Build the collating element which is represented by NAME.
        -: 2329:   The result are written to MBCSET and SBCSET.
        -: 2330:   COLL_SYM_ALLOC is the allocated size of mbcset->coll_sym, is a
        -: 2331:   pointer argument since we may update it.  */
        -: 2332:
        -: 2333:static reg_errcode_t
        -: 2334:# ifdef RE_ENABLE_I18N
        -: 2335:build_collating_symbol (sbcset, mbcset, coll_sym_alloc, name)
        -: 2336:     re_charset_t *mbcset;
        -: 2337:     int *coll_sym_alloc;
        -: 2338:# else /* not RE_ENABLE_I18N */
function build_collating_symbol called 0 returned 0% blocks executed 0%
    #####: 2339:build_collating_symbol (sbcset, name)
        -: 2340:# endif /* not RE_ENABLE_I18N */
        -: 2341:     re_bitset_ptr_t sbcset;
        -: 2342:     const unsigned char *name;
        -: 2343:{
    #####: 2344:  size_t name_len = strlen ((const char *) name);
    #####: 2345:  if (BE (name_len != 1, 0))
branch  0 never executed
branch  1 never executed
    #####: 2346:    return REG_ECOLLATE;
        -: 2347:  else
        -: 2348:    {
    #####: 2349:      bitset_set (sbcset, name[0]);
    #####: 2350:      return REG_NOERROR;
        -: 2351:    }
        -: 2352:}
        -: 2353:#endif /* not _LIBC */
        -: 2354:
        -: 2355:/* This function parse bracket expression like "[abc]", "[a-c]",
        -: 2356:   "[[.a-a.]]" etc.  */
        -: 2357:
        -: 2358:static bin_tree_t *
function parse_bracket_exp called 9 returned 100% blocks executed 41%
        9: 2359:parse_bracket_exp (regexp, dfa, token, syntax, err)
        -: 2360:     re_string_t *regexp;
        -: 2361:     re_dfa_t *dfa;
        -: 2362:     re_token_t *token;
        -: 2363:     reg_syntax_t syntax;
        -: 2364:     reg_errcode_t *err;
        -: 2365:{
        -: 2366:#ifdef _LIBC
        -: 2367:  const unsigned char *collseqmb;
        -: 2368:  const char *collseqwc;
        -: 2369:  uint32_t nrules;
        -: 2370:  int32_t table_size;
        -: 2371:  const int32_t *symb_table;
        -: 2372:  const unsigned char *extra;
        -: 2373:
        -: 2374:  /* Local function for parse_bracket_exp used in _LIBC environement.
        -: 2375:     Seek the collating symbol entry correspondings to NAME.
        -: 2376:     Return the index of the symbol in the SYMB_TABLE.  */
        -: 2377:
        -: 2378:  static inline int32_t
        -: 2379:  seek_collating_symbol_entry (name, name_len)
        -: 2380:	 const unsigned char *name;
        -: 2381:	 size_t name_len;
        -: 2382:    {
        -: 2383:      int32_t hash = elem_hash ((const char *) name, name_len);
        -: 2384:      int32_t elem = hash % table_size;
        -: 2385:      int32_t second = hash % (table_size - 2);
        -: 2386:      while (symb_table[2 * elem] != 0)
        -: 2387:	{
        -: 2388:	  /* First compare the hashing value.  */
        -: 2389:	  if (symb_table[2 * elem] == hash
        -: 2390:	      /* Compare the length of the name.  */
        -: 2391:	      && name_len == extra[symb_table[2 * elem + 1]]
        -: 2392:	      /* Compare the name.  */
        -: 2393:	      && memcmp (name, &extra[symb_table[2 * elem + 1] + 1],
        -: 2394:			 name_len) == 0)
        -: 2395:	    {
        -: 2396:	      /* Yep, this is the entry.  */
        -: 2397:	      break;
        -: 2398:	    }
        -: 2399:
        -: 2400:	  /* Next entry.  */
        -: 2401:	  elem += second;
        -: 2402:	}
        -: 2403:      return elem;
        -: 2404:    }
        -: 2405:
        -: 2406:  /* Local function for parse_bracket_exp used in _LIBC environement.
        -: 2407:     Look up the collation sequence value of BR_ELEM.
        -: 2408:     Return the value if succeeded, UINT_MAX otherwise.  */
        -: 2409:
        -: 2410:  static inline unsigned int
        -: 2411:  lookup_collation_sequence_value (br_elem)
        -: 2412:	 bracket_elem_t *br_elem;
        -: 2413:    {
        -: 2414:      if (br_elem->type == SB_CHAR)
        -: 2415:	{
        -: 2416:	  /*
        -: 2417:	  if (MB_CUR_MAX == 1)
        -: 2418:	  */
        -: 2419:	  if (nrules == 0)
        -: 2420:	    return collseqmb[br_elem->opr.ch];
        -: 2421:	  else
        -: 2422:	    {
        -: 2423:	      wint_t wc = __btowc (br_elem->opr.ch);
        -: 2424:	      return collseq_table_lookup (collseqwc, wc);
        -: 2425:	    }
        -: 2426:	}
        -: 2427:      else if (br_elem->type == MB_CHAR)
        -: 2428:	{
        -: 2429:	  return collseq_table_lookup (collseqwc, br_elem->opr.wch);
        -: 2430:	}
        -: 2431:      else if (br_elem->type == COLL_SYM)
        -: 2432:	{
        -: 2433:	  size_t sym_name_len = strlen ((char *) br_elem->opr.name);
        -: 2434:	  if (nrules != 0)
        -: 2435:	    {
        -: 2436:	      int32_t elem, idx;
        -: 2437:	      elem = seek_collating_symbol_entry (br_elem->opr.name,
        -: 2438:						  sym_name_len);
        -: 2439:	      if (symb_table[2 * elem] != 0)
        -: 2440:		{
        -: 2441:		  /* We found the entry.  */
        -: 2442:		  idx = symb_table[2 * elem + 1];
        -: 2443:		  /* Skip the name of collating element name.  */
        -: 2444:		  idx += 1 + extra[idx];
        -: 2445:		  /* Skip the byte sequence of the collating element.  */
        -: 2446:		  idx += 1 + extra[idx];
        -: 2447:		  /* Adjust for the alignment.  */
        -: 2448:		  idx = (idx + 3) & ~3;
        -: 2449:		  /* Skip the multibyte collation sequence value.  */
        -: 2450:		  idx += sizeof (unsigned int);
        -: 2451:		  /* Skip the wide char sequence of the collating element.  */
        -: 2452:		  idx += sizeof (unsigned int) *
        -: 2453:		    (1 + *(unsigned int *) (extra + idx));
        -: 2454:		  /* Return the collation sequence value.  */
        -: 2455:		  return *(unsigned int *) (extra + idx);
        -: 2456:		}
        -: 2457:	      else if (symb_table[2 * elem] == 0 && sym_name_len == 1)
        -: 2458:		{
        -: 2459:		  /* No valid character.  Match it as a single byte
        -: 2460:		     character.  */
        -: 2461:		  return collseqmb[br_elem->opr.name[0]];
        -: 2462:		}
        -: 2463:	    }
        -: 2464:	  else if (sym_name_len == 1)
        -: 2465:	    return collseqmb[br_elem->opr.name[0]];
        -: 2466:	}
        -: 2467:      return UINT_MAX;
        -: 2468:    }
        -: 2469:
        -: 2470:  /* Local function for parse_bracket_exp used in _LIBC environement.
        -: 2471:     Build the range expression which starts from START_ELEM, and ends
        -: 2472:     at END_ELEM.  The result are written to MBCSET and SBCSET.
        -: 2473:     RANGE_ALLOC is the allocated size of mbcset->range_starts, and
        -: 2474:     mbcset->range_ends, is a pointer argument sinse we may
        -: 2475:     update it.  */
        -: 2476:
        -: 2477:  static inline reg_errcode_t
        -: 2478:# ifdef RE_ENABLE_I18N
        -: 2479:  build_range_exp (sbcset, mbcset, range_alloc, start_elem, end_elem)
        -: 2480:	 re_charset_t *mbcset;
        -: 2481:	 int *range_alloc;
        -: 2482:# else /* not RE_ENABLE_I18N */
        -: 2483:  build_range_exp (sbcset, start_elem, end_elem)
        -: 2484:# endif /* not RE_ENABLE_I18N */
        -: 2485:	 re_bitset_ptr_t sbcset;
        -: 2486:	 bracket_elem_t *start_elem, *end_elem;
        -: 2487:    {
        -: 2488:      unsigned int ch;
        -: 2489:      uint32_t start_collseq;
        -: 2490:      uint32_t end_collseq;
        -: 2491:
        -: 2492:# ifdef RE_ENABLE_I18N
        -: 2493:      /* Check the space of the arrays.  */
        -: 2494:      if (*range_alloc == mbcset->nranges)
        -: 2495:	{
        -: 2496:	  /* There are not enough space, need realloc.  */
        -: 2497:	  uint32_t *new_array_start;
        -: 2498:	  uint32_t *new_array_end;
        -: 2499:	  int new_nranges;
        -: 2500:
        -: 2501:	  /* +1 in case of mbcset->nranges is 0.  */
        -: 2502:	  new_nranges = 2 * mbcset->nranges + 1;
        -: 2503:	  /* Use realloc since mbcset->range_starts and mbcset->range_ends
        -: 2504:	     are NULL if *range_alloc == 0.  */
        -: 2505:	  new_array_start = re_realloc (mbcset->range_starts, uint32_t,
        -: 2506:					new_nranges);
        -: 2507:	  new_array_end = re_realloc (mbcset->range_ends, uint32_t,
        -: 2508:				      new_nranges);
        -: 2509:
        -: 2510:	  if (BE (new_array_start == NULL || new_array_end == NULL, 0))
        -: 2511:	    return REG_ESPACE;
        -: 2512:
        -: 2513:	  mbcset->range_starts = new_array_start;
        -: 2514:	  mbcset->range_ends = new_array_end;
        -: 2515:	  *range_alloc = new_nranges;
        -: 2516:	}
        -: 2517:# endif /* RE_ENABLE_I18N */
        -: 2518:
        -: 2519:      /* Equivalence Classes and Character Classes can't be a range
        -: 2520:	 start/end.  */
        -: 2521:      if (BE (start_elem->type == EQUIV_CLASS || start_elem->type == CHAR_CLASS
        -: 2522:	      || end_elem->type == EQUIV_CLASS || end_elem->type == CHAR_CLASS,
        -: 2523:	      0))
        -: 2524:	return REG_ERANGE;
        -: 2525:
        -: 2526:      start_collseq = lookup_collation_sequence_value (start_elem);
        -: 2527:      end_collseq = lookup_collation_sequence_value (end_elem);
        -: 2528:      /* Check start/end collation sequence values.  */
        -: 2529:      if (BE (start_collseq == UINT_MAX || end_collseq == UINT_MAX, 0))
        -: 2530:	return REG_ECOLLATE;
        -: 2531:      if (BE ((syntax & RE_NO_EMPTY_RANGES) && start_collseq > end_collseq, 0))
        -: 2532:	return REG_ERANGE;
        -: 2533:
        -: 2534:# ifdef RE_ENABLE_I18N
        -: 2535:      /* Got valid collation sequence values, add them as a new entry.  */
        -: 2536:      mbcset->range_starts[mbcset->nranges] = start_collseq;
        -: 2537:      mbcset->range_ends[mbcset->nranges++] = end_collseq;
        -: 2538:# endif /* RE_ENABLE_I18N */
        -: 2539:
        -: 2540:      /* Build the table for single byte characters.  */
        -: 2541:      for (ch = 0; ch <= SBC_MAX; ch++)
        -: 2542:	{
        -: 2543:	  uint32_t ch_collseq;
        -: 2544:	  /*
        -: 2545:	  if (MB_CUR_MAX == 1)
        -: 2546:	  */
        -: 2547:	  if (nrules == 0)
        -: 2548:	    ch_collseq = collseqmb[ch];
        -: 2549:	  else
        -: 2550:	    ch_collseq = collseq_table_lookup (collseqwc, __btowc (ch));
        -: 2551:	  if (start_collseq <= ch_collseq && ch_collseq <= end_collseq)
        -: 2552:	    bitset_set (sbcset, ch);
        -: 2553:	}
        -: 2554:      return REG_NOERROR;
        -: 2555:    }
        -: 2556:
        -: 2557:  /* Local function for parse_bracket_exp used in _LIBC environement.
        -: 2558:     Build the collating element which is represented by NAME.
        -: 2559:     The result are written to MBCSET and SBCSET.
        -: 2560:     COLL_SYM_ALLOC is the allocated size of mbcset->coll_sym, is a
        -: 2561:     pointer argument sinse we may update it.  */
        -: 2562:
        -: 2563:  static inline reg_errcode_t
        -: 2564:# ifdef RE_ENABLE_I18N
        -: 2565:  build_collating_symbol (sbcset, mbcset, coll_sym_alloc, name)
        -: 2566:	 re_charset_t *mbcset;
        -: 2567:	 int *coll_sym_alloc;
        -: 2568:# else /* not RE_ENABLE_I18N */
        -: 2569:  build_collating_symbol (sbcset, name)
        -: 2570:# endif /* not RE_ENABLE_I18N */
        -: 2571:	 re_bitset_ptr_t sbcset;
        -: 2572:	 const unsigned char *name;
        -: 2573:    {
        -: 2574:      int32_t elem, idx;
        -: 2575:      size_t name_len = strlen ((const char *) name);
        -: 2576:      if (nrules != 0)
        -: 2577:	{
        -: 2578:	  elem = seek_collating_symbol_entry (name, name_len);
        -: 2579:	  if (symb_table[2 * elem] != 0)
        -: 2580:	    {
        -: 2581:	      /* We found the entry.  */
        -: 2582:	      idx = symb_table[2 * elem + 1];
        -: 2583:	      /* Skip the name of collating element name.  */
        -: 2584:	      idx += 1 + extra[idx];
        -: 2585:	    }
        -: 2586:	  else if (symb_table[2 * elem] == 0 && name_len == 1)
        -: 2587:	    {
        -: 2588:	      /* No valid character, treat it as a normal
        -: 2589:		 character.  */
        -: 2590:	      bitset_set (sbcset, name[0]);
        -: 2591:	      return REG_NOERROR;
        -: 2592:	    }
        -: 2593:	  else
        -: 2594:	    return REG_ECOLLATE;
        -: 2595:
        -: 2596:# ifdef RE_ENABLE_I18N
        -: 2597:	  /* Got valid collation sequence, add it as a new entry.  */
        -: 2598:	  /* Check the space of the arrays.  */
        -: 2599:	  if (*coll_sym_alloc == mbcset->ncoll_syms)
        -: 2600:	    {
        -: 2601:	      /* Not enough, realloc it.  */
        -: 2602:	      /* +1 in case of mbcset->ncoll_syms is 0.  */
        -: 2603:	      *coll_sym_alloc = 2 * mbcset->ncoll_syms + 1;
        -: 2604:	      /* Use realloc since mbcset->coll_syms is NULL
        -: 2605:		 if *alloc == 0.  */
        -: 2606:	      mbcset->coll_syms = re_realloc (mbcset->coll_syms, int32_t,
        -: 2607:					      *coll_sym_alloc);
        -: 2608:	      if (BE (mbcset->coll_syms == NULL, 0))
        -: 2609:		return REG_ESPACE;
        -: 2610:	    }
        -: 2611:	  mbcset->coll_syms[mbcset->ncoll_syms++] = idx;
        -: 2612:# endif /* RE_ENABLE_I18N */
        -: 2613:	  return REG_NOERROR;
        -: 2614:	}
        -: 2615:      else
        -: 2616:	{
        -: 2617:	  if (BE (name_len != 1, 0))
        -: 2618:	    return REG_ECOLLATE;
        -: 2619:	  else
        -: 2620:	    {
        -: 2621:	      bitset_set (sbcset, name[0]);
        -: 2622:	      return REG_NOERROR;
        -: 2623:	    }
        -: 2624:	}
        -: 2625:    }
        -: 2626:#endif
        -: 2627:
        -: 2628:  re_token_t br_token;
        -: 2629:  re_bitset_ptr_t sbcset;
        -: 2630:#ifdef RE_ENABLE_I18N
        -: 2631:  re_charset_t *mbcset;
        -: 2632:  int coll_sym_alloc = 0, range_alloc = 0, mbchar_alloc = 0;
        -: 2633:  int equiv_class_alloc = 0, char_class_alloc = 0;
        -: 2634:#else /* not RE_ENABLE_I18N */
        9: 2635:  int non_match = 0;
        -: 2636:#endif /* not RE_ENABLE_I18N */
        -: 2637:  bin_tree_t *work_tree;
        -: 2638:  int token_len, new_idx;
        -: 2639:#ifdef _LIBC
        -: 2640:  collseqmb = (const unsigned char *)
        -: 2641:    _NL_CURRENT (LC_COLLATE, _NL_COLLATE_COLLSEQMB);
        -: 2642:  nrules = _NL_CURRENT_WORD (LC_COLLATE, _NL_COLLATE_NRULES);
        -: 2643:  if (nrules)
        -: 2644:    {
        -: 2645:      /*
        -: 2646:      if (MB_CUR_MAX > 1)
        -: 2647:      */
        -: 2648:	collseqwc = _NL_CURRENT (LC_COLLATE, _NL_COLLATE_COLLSEQWC);
        -: 2649:      table_size = _NL_CURRENT_WORD (LC_COLLATE, _NL_COLLATE_SYMB_HASH_SIZEMB);
        -: 2650:      symb_table = (const int32_t *) _NL_CURRENT (LC_COLLATE,
        -: 2651:						  _NL_COLLATE_SYMB_TABLEMB);
        -: 2652:      extra = (const unsigned char *) _NL_CURRENT (LC_COLLATE,
        -: 2653:						   _NL_COLLATE_SYMB_EXTRAMB);
        -: 2654:    }
        -: 2655:#endif
        9: 2656:  sbcset = (re_bitset_ptr_t) calloc (sizeof (unsigned int), BITSET_UINTS);
        -: 2657:#ifdef RE_ENABLE_I18N
        -: 2658:  mbcset = (re_charset_t *) calloc (sizeof (re_charset_t), 1);
        -: 2659:#endif /* RE_ENABLE_I18N */
        -: 2660:#ifdef RE_ENABLE_I18N
        -: 2661:  if (BE (sbcset == NULL || mbcset == NULL, 0))
        -: 2662:#else
        9: 2663:  if (BE (sbcset == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 9
        -: 2664:#endif /* RE_ENABLE_I18N */
        -: 2665:    {
    #####: 2666:      *err = REG_ESPACE;
    #####: 2667:      return NULL;
        -: 2668:    }
        -: 2669:
        9: 2670:  token_len = peek_token_bracket (token, regexp, syntax);
call    0 returned 9
        9: 2671:  if (BE (token->type == END_OF_RE, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 9
        -: 2672:    {
    #####: 2673:      *err = REG_BADPAT;
    #####: 2674:      goto parse_bracket_exp_free_return;
        -: 2675:    }
        9: 2676:  if (token->type == OP_NON_MATCH_LIST)
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        -: 2677:    {
        -: 2678:#ifdef RE_ENABLE_I18N
        -: 2679:      int i;
        -: 2680:      mbcset->non_match = 1;
        -: 2681:#else /* not RE_ENABLE_I18N */
        1: 2682:      non_match = 1;
        -: 2683:#endif /* not RE_ENABLE_I18N */
        1: 2684:      if (syntax & RE_HAT_LISTS_NOT_NEWLINE)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 2685:	bitset_set (sbcset, '\0');
        1: 2686:      re_string_skip_bytes (regexp, token_len); /* Skip a token.  */
        1: 2687:      token_len = peek_token_bracket (token, regexp, syntax);
call    0 returned 1
        1: 2688:      if (BE (token->type == END_OF_RE, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 2689:	{
    #####: 2690:	  *err = REG_BADPAT;
    #####: 2691:	  goto parse_bracket_exp_free_return;
        -: 2692:	}
        -: 2693:#ifdef RE_ENABLE_I18N
        -: 2694:      if (MB_CUR_MAX > 1)
        -: 2695:	for (i = 0; i < SBC_MAX; ++i)
        -: 2696:	  if (__btowc (i) == WEOF)
        -: 2697:	    bitset_set (sbcset, i);
        -: 2698:#endif /* RE_ENABLE_I18N */
        -: 2699:    }
        -: 2700:
        -: 2701:  /* We treat the first ']' as a normal character.  */
        9: 2702:  if (token->type == OP_CLOSE_BRACKET)
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####: 2703:    token->type = CHARACTER;
        -: 2704:
        -: 2705:  while (1)
       30: 2706:    {
        -: 2707:      bracket_elem_t start_elem, end_elem;
        -: 2708:      unsigned char start_name_buf[BRACKET_NAME_BUF_SIZE];
        -: 2709:      unsigned char end_name_buf[BRACKET_NAME_BUF_SIZE];
        -: 2710:      reg_errcode_t ret;
       39: 2711:      int token_len2 = 0, is_range_exp = 0;
        -: 2712:      re_token_t token2;
        -: 2713:
       39: 2714:      start_elem.opr.name = start_name_buf;
       39: 2715:      ret = parse_bracket_element (&start_elem, regexp, token, token_len, dfa,
call    0 returned 39
        -: 2716:				   syntax);
       39: 2717:      if (BE (ret != REG_NOERROR, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 39
        -: 2718:	{
    #####: 2719:	  *err = ret;
    #####: 2720:	  goto parse_bracket_exp_free_return;
        -: 2721:	}
        -: 2722:
       39: 2723:      token_len = peek_token_bracket (token, regexp, syntax);
call    0 returned 39
       39: 2724:      if (BE (token->type == END_OF_RE, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 39
        -: 2725:	{
    #####: 2726:	  *err = REG_BADPAT;
    #####: 2727:	  goto parse_bracket_exp_free_return;
        -: 2728:	}
       39: 2729:      if (token->type == OP_CHARSET_RANGE)
branch  0 taken 0 (fallthrough)
branch  1 taken 39
        -: 2730:	{
    #####: 2731:	  re_string_skip_bytes (regexp, token_len); /* Skip '-'.  */
    #####: 2732:	  token_len2 = peek_token_bracket (&token2, regexp, syntax);
call    0 never executed
    #####: 2733:	  if (BE (token->type == END_OF_RE, 0))
branch  0 never executed
branch  1 never executed
        -: 2734:	    {
    #####: 2735:	      *err = REG_BADPAT;
    #####: 2736:	      goto parse_bracket_exp_free_return;
        -: 2737:	    }
    #####: 2738:	  if (token2.type == OP_CLOSE_BRACKET)
branch  0 never executed
branch  1 never executed
        -: 2739:	    {
        -: 2740:	      /* We treat the last '-' as a normal character.  */
    #####: 2741:	      re_string_skip_bytes (regexp, -token_len);
    #####: 2742:	      token->type = CHARACTER;
        -: 2743:	    }
        -: 2744:	  else
    #####: 2745:	    is_range_exp = 1;
        -: 2746:	}
        -: 2747:
       39: 2748:      if (is_range_exp == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 39
        -: 2749:	{
    #####: 2750:	  end_elem.opr.name = end_name_buf;
    #####: 2751:	  ret = parse_bracket_element (&end_elem, regexp, &token2, token_len2,
call    0 never executed
        -: 2752:				       dfa, syntax);
    #####: 2753:	  if (BE (ret != REG_NOERROR, 0))
branch  0 never executed
branch  1 never executed
        -: 2754:	    {
    #####: 2755:	      *err = ret;
    #####: 2756:	      goto parse_bracket_exp_free_return;
        -: 2757:	    }
        -: 2758:
    #####: 2759:	  token_len = peek_token_bracket (token, regexp, syntax);
call    0 never executed
    #####: 2760:	  if (BE (token->type == END_OF_RE, 0))
branch  0 never executed
branch  1 never executed
        -: 2761:	    {
    #####: 2762:	      *err = REG_BADPAT;
    #####: 2763:	      goto parse_bracket_exp_free_return;
        -: 2764:	    }
    #####: 2765:	  *err = build_range_exp (sbcset,
call    0 never executed
        -: 2766:#ifdef RE_ENABLE_I18N
        -: 2767:				  mbcset, &range_alloc,
        -: 2768:#endif /* RE_ENABLE_I18N */
        -: 2769:				  &start_elem, &end_elem);
    #####: 2770:	  if (BE (*err != REG_NOERROR, 0))
branch  0 never executed
branch  1 never executed
    #####: 2771:	    goto parse_bracket_exp_free_return;
        -: 2772:	}
        -: 2773:      else
        -: 2774:	{
       39: 2775:	  switch (start_elem.type)
branch  0 taken 39
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
        -: 2776:	    {
       39: 2777:	    case SB_CHAR:
       39: 2778:	      bitset_set (sbcset, start_elem.opr.ch);
       39: 2779:	      break;
        -: 2780:#ifdef RE_ENABLE_I18N
        -: 2781:	    case MB_CHAR:
        -: 2782:	      /* Check whether the array has enough space.  */
        -: 2783:	      if (mbchar_alloc == mbcset->nmbchars)
        -: 2784:		{
        -: 2785:		  /* Not enough, realloc it.  */
        -: 2786:		  /* +1 in case of mbcset->nmbchars is 0.  */
        -: 2787:		  mbchar_alloc = 2 * mbcset->nmbchars + 1;
        -: 2788:		  /* Use realloc since array is NULL if *alloc == 0.  */
        -: 2789:		  mbcset->mbchars = re_realloc (mbcset->mbchars, wchar_t,
        -: 2790:						mbchar_alloc);
        -: 2791:		  if (BE (mbcset->mbchars == NULL, 0))
        -: 2792:		    goto parse_bracket_exp_espace;
        -: 2793:		}
        -: 2794:	      mbcset->mbchars[mbcset->nmbchars++] = start_elem.opr.wch;
        -: 2795:	      break;
        -: 2796:#endif /* RE_ENABLE_I18N */
    #####: 2797:	    case EQUIV_CLASS:
    #####: 2798:	      *err = build_equiv_class (sbcset,
        -: 2799:#ifdef RE_ENABLE_I18N
        -: 2800:					mbcset, &equiv_class_alloc,
        -: 2801:#endif /* RE_ENABLE_I18N */
    #####: 2802:					start_elem.opr.name);
call    0 never executed
    #####: 2803:	      if (BE (*err != REG_NOERROR, 0))
branch  0 never executed
branch  1 never executed
    #####: 2804:		goto parse_bracket_exp_free_return;
    #####: 2805:	      break;
    #####: 2806:	    case COLL_SYM:
    #####: 2807:	      *err = build_collating_symbol (sbcset,
        -: 2808:#ifdef RE_ENABLE_I18N
        -: 2809:					     mbcset, &coll_sym_alloc,
        -: 2810:#endif /* RE_ENABLE_I18N */
    #####: 2811:					     start_elem.opr.name);
call    0 never executed
    #####: 2812:	      if (BE (*err != REG_NOERROR, 0))
branch  0 never executed
branch  1 never executed
    #####: 2813:		goto parse_bracket_exp_free_return;
    #####: 2814:	      break;
    #####: 2815:	    case CHAR_CLASS:
    #####: 2816:	      ret = build_charclass (sbcset,
        -: 2817:#ifdef RE_ENABLE_I18N
        -: 2818:				     mbcset, &char_class_alloc,
        -: 2819:#endif /* RE_ENABLE_I18N */
    #####: 2820:				     start_elem.opr.name, syntax);
call    0 never executed
    #####: 2821:	      if (BE (ret != REG_NOERROR, 0))
branch  0 never executed
branch  1 never executed
    #####: 2822:	       goto parse_bracket_exp_espace;
    #####: 2823:	      break;
    #####: 2824:	    default:
    #####: 2825:	      assert (0);
call    0 never executed
        -: 2826:	      break;
        -: 2827:	    }
        -: 2828:	}
       39: 2829:      if (token->type == OP_CLOSE_BRACKET)
branch  0 taken 9 (fallthrough)
branch  1 taken 30
        9: 2830:	break;
        -: 2831:    }
        -: 2832:
        9: 2833:  re_string_skip_bytes (regexp, token_len); /* Skip a token.  */
        -: 2834:
        -: 2835:  /* If it is non-matching list.  */
        -: 2836:#ifdef RE_ENABLE_I18N
        -: 2837:  if (mbcset->non_match)
        -: 2838:#else /* not RE_ENABLE_I18N */
        9: 2839:  if (non_match)
branch  0 taken 1
branch  1 taken 8
        -: 2840:#endif /* not RE_ENABLE_I18N */
        1: 2841:    bitset_not (sbcset);
call    0 returned 1
        -: 2842:
        -: 2843:  /* Build a tree for simple bracket.  */
        9: 2844:  br_token.type = SIMPLE_BRACKET;
        9: 2845:  br_token.opr.sbcset = sbcset;
        9: 2846:  new_idx = re_dfa_add_node (dfa, br_token, 0);
call    0 returned 9
        9: 2847:  work_tree = create_tree (NULL, NULL, 0, new_idx);
call    0 returned 9
        9: 2848:  if (BE (new_idx == -1 || work_tree == NULL, 0))
branch  0 taken 9 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 9
    #####: 2849:    goto parse_bracket_exp_espace;
        -: 2850:
        -: 2851:#ifdef RE_ENABLE_I18N
        -: 2852:  if (mbcset->nmbchars || mbcset->ncoll_syms || mbcset->nequiv_classes
        -: 2853:      || mbcset->nranges || (MB_CUR_MAX > 1 && (mbcset->nchar_classes
        -: 2854:						|| mbcset->non_match)))
        -: 2855:    {
        -: 2856:      re_token_t alt_token;
        -: 2857:      bin_tree_t *mbc_tree;
        -: 2858:      /* Build a tree for complex bracket.  */
        -: 2859:      br_token.type = COMPLEX_BRACKET;
        -: 2860:      br_token.opr.mbcset = mbcset;
        -: 2861:      dfa->has_mb_node = 1;
        -: 2862:      new_idx = re_dfa_add_node (dfa, br_token, 0);
        -: 2863:      mbc_tree = create_tree (NULL, NULL, 0, new_idx);
        -: 2864:      if (BE (new_idx == -1 || mbc_tree == NULL, 0))
        -: 2865:	goto parse_bracket_exp_espace;
        -: 2866:      /* Then join them by ALT node.  */
        -: 2867:      dfa->has_plural_match = 1;
        -: 2868:      alt_token.type = OP_ALT;
        -: 2869:      new_idx = re_dfa_add_node (dfa, alt_token, 0);
        -: 2870:      work_tree = create_tree (work_tree, mbc_tree, 0, new_idx);
        -: 2871:      if (BE (new_idx != -1 && mbc_tree != NULL, 1))
        -: 2872:	return work_tree;
        -: 2873:    }
        -: 2874:  else
        -: 2875:    {
        -: 2876:      free_charset (mbcset);
        -: 2877:      return work_tree;
        -: 2878:    }
        -: 2879:#else /* not RE_ENABLE_I18N */
        9: 2880:  return work_tree;
        -: 2881:#endif /* not RE_ENABLE_I18N */
        -: 2882:
    #####: 2883: parse_bracket_exp_espace:
    #####: 2884:  *err = REG_ESPACE;
    #####: 2885: parse_bracket_exp_free_return:
    #####: 2886:  re_free (sbcset);
        -: 2887:#ifdef RE_ENABLE_I18N
        -: 2888:  free_charset (mbcset);
        -: 2889:#endif /* RE_ENABLE_I18N */
    #####: 2890:  return NULL;
        -: 2891:}
        -: 2892:
        -: 2893:/* Parse an element in the bracket expression.  */
        -: 2894:
        -: 2895:static reg_errcode_t
function parse_bracket_element called 39 returned 100% blocks executed 71%
       39: 2896:parse_bracket_element (elem, regexp, token, token_len, dfa, syntax)
        -: 2897:     bracket_elem_t *elem;
        -: 2898:     re_string_t *regexp;
        -: 2899:     re_token_t *token;
        -: 2900:     int token_len;
        -: 2901:     re_dfa_t *dfa;
        -: 2902:     reg_syntax_t syntax;
        -: 2903:{
        -: 2904:#ifdef RE_ENABLE_I18N
        -: 2905:  int cur_char_size;
        -: 2906:  cur_char_size = re_string_char_size_at (regexp, re_string_cur_idx (regexp));
        -: 2907:  if (cur_char_size > 1)
        -: 2908:    {
        -: 2909:      elem->type = MB_CHAR;
        -: 2910:      elem->opr.wch = re_string_wchar_at (regexp, re_string_cur_idx (regexp));
        -: 2911:      re_string_skip_bytes (regexp, cur_char_size);
        -: 2912:      return REG_NOERROR;
        -: 2913:    }
        -: 2914:#endif /* RE_ENABLE_I18N */
       39: 2915:  re_string_skip_bytes (regexp, token_len); /* Skip a token.  */
       39: 2916:  if (token->type == OP_OPEN_COLL_ELEM || token->type == OP_OPEN_CHAR_CLASS
branch  0 taken 39 (fallthrough)
branch  1 taken 0
branch  2 taken 39 (fallthrough)
branch  3 taken 0
       39: 2917:      || token->type == OP_OPEN_EQUIV_CLASS)
branch  0 taken 0 (fallthrough)
branch  1 taken 39
    #####: 2918:    return parse_bracket_symbol (elem, regexp, token);
call    0 never executed
       39: 2919:  elem->type = SB_CHAR;
       39: 2920:  elem->opr.ch = token->opr.c;
       39: 2921:  return REG_NOERROR;
        -: 2922:}
        -: 2923:
        -: 2924:/* Parse a bracket symbol in the bracket expression.  Bracket symbols are
        -: 2925:   such as [:<character_class>:], [.<collating_element>.], and
        -: 2926:   [=<equivalent_class>=].  */
        -: 2927:
        -: 2928:static reg_errcode_t
function parse_bracket_symbol called 0 returned 0% blocks executed 0%
    #####: 2929:parse_bracket_symbol (elem, regexp, token)
        -: 2930:     bracket_elem_t *elem;
        -: 2931:     re_string_t *regexp;
        -: 2932:     re_token_t *token;
        -: 2933:{
    #####: 2934:  unsigned char ch, delim = token->opr.c;
    #####: 2935:  int i = 0;
    #####: 2936:  for (;; ++i)
        -: 2937:    {
    #####: 2938:      if (re_string_eoi(regexp) || i >= BRACKET_NAME_BUF_SIZE)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2939:	return REG_EBRACK;
    #####: 2940:      if (token->type == OP_OPEN_CHAR_CLASS)
branch  0 never executed
branch  1 never executed
    #####: 2941:	ch = re_string_fetch_byte_case (regexp);
        -: 2942:      else
    #####: 2943:	ch = re_string_fetch_byte (regexp);
    #####: 2944:      if (ch == delim && re_string_peek_byte (regexp, 0) == ']')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2945:	break;
    #####: 2946:      elem->opr.name[i] = ch;
        -: 2947:    }
    #####: 2948:  re_string_skip_bytes (regexp, 1);
    #####: 2949:  elem->opr.name[i] = '\0';
    #####: 2950:  switch (token->type)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2951:    {
    #####: 2952:    case OP_OPEN_COLL_ELEM:
    #####: 2953:      elem->type = COLL_SYM;
    #####: 2954:      break;
    #####: 2955:    case OP_OPEN_EQUIV_CLASS:
    #####: 2956:      elem->type = EQUIV_CLASS;
    #####: 2957:      break;
    #####: 2958:    case OP_OPEN_CHAR_CLASS:
    #####: 2959:      elem->type = CHAR_CLASS;
    #####: 2960:      break;
    #####: 2961:    default:
    #####: 2962:      break;
        -: 2963:    }
    #####: 2964:  return REG_NOERROR;
        -: 2965:}
        -: 2966:
        -: 2967:  /* Helper function for parse_bracket_exp.
        -: 2968:     Build the equivalence class which is represented by NAME.
        -: 2969:     The result are written to MBCSET and SBCSET.
        -: 2970:     EQUIV_CLASS_ALLOC is the allocated size of mbcset->equiv_classes,
        -: 2971:     is a pointer argument sinse we may update it.  */
        -: 2972:
        -: 2973:static reg_errcode_t
        -: 2974:#ifdef RE_ENABLE_I18N
        -: 2975:build_equiv_class (sbcset, mbcset, equiv_class_alloc, name)
        -: 2976:     re_charset_t *mbcset;
        -: 2977:     int *equiv_class_alloc;
        -: 2978:#else /* not RE_ENABLE_I18N */
function build_equiv_class called 0 returned 0% blocks executed 0%
    #####: 2979:build_equiv_class (sbcset, name)
        -: 2980:#endif /* not RE_ENABLE_I18N */
        -: 2981:     re_bitset_ptr_t sbcset;
        -: 2982:     const unsigned char *name;
        -: 2983:{
        -: 2984:#if defined _LIBC && defined RE_ENABLE_I18N
        -: 2985:  uint32_t nrules = _NL_CURRENT_WORD (LC_COLLATE, _NL_COLLATE_NRULES);
        -: 2986:  if (nrules != 0)
        -: 2987:    {
        -: 2988:      const int32_t *table, *indirect;
        -: 2989:      const unsigned char *weights, *extra, *cp;
        -: 2990:      unsigned char char_buf[2];
        -: 2991:      int32_t idx1, idx2;
        -: 2992:      unsigned int ch;
        -: 2993:      size_t len;
        -: 2994:      /* This #include defines a local function!  */
        -: 2995:# include <locale/weight.h>
        -: 2996:      /* Calculate the index for equivalence class.  */
        -: 2997:      cp = name;
        -: 2998:      table = (const int32_t *) _NL_CURRENT (LC_COLLATE, _NL_COLLATE_TABLEMB);
        -: 2999:      weights = (const unsigned char *) _NL_CURRENT (LC_COLLATE,
        -: 3000:					       _NL_COLLATE_WEIGHTMB);
        -: 3001:      extra = (const unsigned char *) _NL_CURRENT (LC_COLLATE,
        -: 3002:						   _NL_COLLATE_EXTRAMB);
        -: 3003:      indirect = (const int32_t *) _NL_CURRENT (LC_COLLATE,
        -: 3004:						_NL_COLLATE_INDIRECTMB);
        -: 3005:      idx1 = findidx (&cp);
        -: 3006:      if (BE (idx1 == 0 || cp < name + strlen ((const char *) name), 0))
        -: 3007:	/* This isn't a valid character.  */
        -: 3008:	return REG_ECOLLATE;
        -: 3009:
        -: 3010:      /* Build single byte matcing table for this equivalence class.  */
        -: 3011:      char_buf[1] = (unsigned char) '\0';
        -: 3012:      len = weights[idx1];
        -: 3013:      for (ch = 0; ch < SBC_MAX; ++ch)
        -: 3014:	{
        -: 3015:	  char_buf[0] = ch;
        -: 3016:	  cp = char_buf;
        -: 3017:	  idx2 = findidx (&cp);
        -: 3018:/*
        -: 3019:	  idx2 = table[ch];
        -: 3020:*/
        -: 3021:	  if (idx2 == 0)
        -: 3022:	    /* This isn't a valid character.  */
        -: 3023:	    continue;
        -: 3024:	  if (len == weights[idx2])
        -: 3025:	    {
        -: 3026:	      int cnt = 0;
        -: 3027:	      while (cnt <= len &&
        -: 3028:		     weights[idx1 + 1 + cnt] == weights[idx2 + 1 + cnt])
        -: 3029:		++cnt;
        -: 3030:
        -: 3031:	      if (cnt > len)
        -: 3032:		bitset_set (sbcset, ch);
        -: 3033:	    }
        -: 3034:	}
        -: 3035:      /* Check whether the array has enough space.  */
        -: 3036:      if (*equiv_class_alloc == mbcset->nequiv_classes)
        -: 3037:	{
        -: 3038:	  /* Not enough, realloc it.  */
        -: 3039:	  /* +1 in case of mbcset->nequiv_classes is 0.  */
        -: 3040:	  *equiv_class_alloc = 2 * mbcset->nequiv_classes + 1;
        -: 3041:	  /* Use realloc since the array is NULL if *alloc == 0.  */
        -: 3042:	  mbcset->equiv_classes = re_realloc (mbcset->equiv_classes, int32_t,
        -: 3043:					      *equiv_class_alloc);
        -: 3044:	  if (BE (mbcset->equiv_classes == NULL, 0))
        -: 3045:	    return REG_ESPACE;
        -: 3046:	}
        -: 3047:      mbcset->equiv_classes[mbcset->nequiv_classes++] = idx1;
        -: 3048:    }
        -: 3049:  else
        -: 3050:#endif /* _LIBC && RE_ENABLE_I18N */
        -: 3051:    {
    #####: 3052:      if (BE (strlen ((const char *) name) != 1, 0))
branch  0 never executed
branch  1 never executed
    #####: 3053:	return REG_ECOLLATE;
    #####: 3054:      bitset_set (sbcset, *name);
        -: 3055:    }
    #####: 3056:  return REG_NOERROR;
        -: 3057:}
        -: 3058:
        -: 3059:  /* Helper function for parse_bracket_exp.
        -: 3060:     Build the character class which is represented by NAME.
        -: 3061:     The result are written to MBCSET and SBCSET.
        -: 3062:     CHAR_CLASS_ALLOC is the allocated size of mbcset->char_classes,
        -: 3063:     is a pointer argument sinse we may update it.  */
        -: 3064:
        -: 3065:static reg_errcode_t
        -: 3066:#ifdef RE_ENABLE_I18N
        -: 3067:build_charclass (sbcset, mbcset, char_class_alloc, class_name, syntax)
        -: 3068:     re_charset_t *mbcset;
        -: 3069:     int *char_class_alloc;
        -: 3070:#else /* not RE_ENABLE_I18N */
function build_charclass called 0 returned 0% blocks executed 0%
    #####: 3071:build_charclass (sbcset, class_name, syntax)
        -: 3072:#endif /* not RE_ENABLE_I18N */
        -: 3073:     re_bitset_ptr_t sbcset;
        -: 3074:     const unsigned char *class_name;
        -: 3075:     reg_syntax_t syntax;
        -: 3076:{
        -: 3077:  int i;
    #####: 3078:  const char *name = (const char *) class_name;
        -: 3079:
        -: 3080:  /* In case of REG_ICASE "upper" and "lower" match the both of
        -: 3081:     upper and lower cases.  */
    #####: 3082:  if ((syntax & RE_ICASE)
branch  0 never executed
branch  1 never executed
    #####: 3083:      && (strcmp (name, "upper") == 0 || strcmp (name, "lower") == 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3084:    name = "alpha";
        -: 3085:
        -: 3086:#ifdef RE_ENABLE_I18N
        -: 3087:  /* Check the space of the arrays.  */
        -: 3088:  if (*char_class_alloc == mbcset->nchar_classes)
        -: 3089:    {
        -: 3090:      /* Not enough, realloc it.  */
        -: 3091:      /* +1 in case of mbcset->nchar_classes is 0.  */
        -: 3092:      *char_class_alloc = 2 * mbcset->nchar_classes + 1;
        -: 3093:      /* Use realloc since array is NULL if *alloc == 0.  */
        -: 3094:      mbcset->char_classes = re_realloc (mbcset->char_classes, wctype_t,
        -: 3095:					 *char_class_alloc);
        -: 3096:      if (BE (mbcset->char_classes == NULL, 0))
        -: 3097:	return REG_ESPACE;
        -: 3098:    }
        -: 3099:  mbcset->char_classes[mbcset->nchar_classes++] = __wctype (name);
        -: 3100:#endif /* RE_ENABLE_I18N */
        -: 3101:
        -: 3102:#define BUILD_CHARCLASS_LOOP(ctype_func)\
        -: 3103:    for (i = 0; i < SBC_MAX; ++i)	\
        -: 3104:      {					\
        -: 3105:	if (ctype_func (i))		\
        -: 3106:	  bitset_set (sbcset, i);	\
        -: 3107:      }
        -: 3108:
    #####: 3109:  if (strcmp (name, "alnum") == 0)
branch  0 never executed
branch  1 never executed
    #####: 3110:    BUILD_CHARCLASS_LOOP (isalnum)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3111:  else if (strcmp (name, "cntrl") == 0)
branch  0 never executed
branch  1 never executed
    #####: 3112:    BUILD_CHARCLASS_LOOP (iscntrl)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3113:  else if (strcmp (name, "lower") == 0)
branch  0 never executed
branch  1 never executed
    #####: 3114:    BUILD_CHARCLASS_LOOP (islower)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3115:  else if (strcmp (name, "space") == 0)
branch  0 never executed
branch  1 never executed
    #####: 3116:    BUILD_CHARCLASS_LOOP (isspace)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3117:  else if (strcmp (name, "alpha") == 0)
branch  0 never executed
branch  1 never executed
    #####: 3118:    BUILD_CHARCLASS_LOOP (isalpha)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3119:  else if (strcmp (name, "digit") == 0)
branch  0 never executed
branch  1 never executed
    #####: 3120:    BUILD_CHARCLASS_LOOP (isdigit)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3121:  else if (strcmp (name, "print") == 0)
branch  0 never executed
branch  1 never executed
    #####: 3122:    BUILD_CHARCLASS_LOOP (isprint)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3123:  else if (strcmp (name, "upper") == 0)
branch  0 never executed
branch  1 never executed
    #####: 3124:    BUILD_CHARCLASS_LOOP (isupper)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3125:  else if (strcmp (name, "blank") == 0)
branch  0 never executed
branch  1 never executed
    #####: 3126:    BUILD_CHARCLASS_LOOP (isblank)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3127:  else if (strcmp (name, "graph") == 0)
branch  0 never executed
branch  1 never executed
    #####: 3128:    BUILD_CHARCLASS_LOOP (isgraph)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3129:  else if (strcmp (name, "punct") == 0)
branch  0 never executed
branch  1 never executed
    #####: 3130:    BUILD_CHARCLASS_LOOP (ispunct)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3131:  else if (strcmp (name, "xdigit") == 0)
branch  0 never executed
branch  1 never executed
    #####: 3132:    BUILD_CHARCLASS_LOOP (isxdigit)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3133:  else
    #####: 3134:    return REG_ECTYPE;
        -: 3135:
    #####: 3136:  return REG_NOERROR;
        -: 3137:}
        -: 3138:
        -: 3139:static bin_tree_t *
function build_word_op called 0 returned 0% blocks executed 0%
    #####: 3140:build_word_op (dfa, not, err)
        -: 3141:     re_dfa_t *dfa;
        -: 3142:     int not;
        -: 3143:     reg_errcode_t *err;
        -: 3144:{
        -: 3145:  re_bitset_ptr_t sbcset;
        -: 3146:#ifdef RE_ENABLE_I18N
        -: 3147:  re_charset_t *mbcset;
        -: 3148:  int alloc = 0;
        -: 3149:#else /* not RE_ENABLE_I18N */
    #####: 3150:  int non_match = 0;
        -: 3151:#endif /* not RE_ENABLE_I18N */
        -: 3152:  reg_errcode_t ret;
        -: 3153:  re_token_t br_token;
        -: 3154:  bin_tree_t *tree;
        -: 3155:  int new_idx;
        -: 3156:
    #####: 3157:  sbcset = (re_bitset_ptr_t) calloc (sizeof (unsigned int), BITSET_UINTS);
        -: 3158:#ifdef RE_ENABLE_I18N
        -: 3159:  mbcset = (re_charset_t *) calloc (sizeof (re_charset_t), 1);
        -: 3160:#endif /* RE_ENABLE_I18N */
        -: 3161:
        -: 3162:#ifdef RE_ENABLE_I18N
        -: 3163:  if (BE (sbcset == NULL || mbcset == NULL, 0))
        -: 3164:#else /* not RE_ENABLE_I18N */
    #####: 3165:  if (BE (sbcset == NULL, 0))
branch  0 never executed
branch  1 never executed
        -: 3166:#endif /* not RE_ENABLE_I18N */
        -: 3167:    {
    #####: 3168:      *err = REG_ESPACE;
    #####: 3169:      return NULL;
        -: 3170:    }
        -: 3171:
    #####: 3172:  if (not)
branch  0 never executed
branch  1 never executed
        -: 3173:    {
        -: 3174:#ifdef RE_ENABLE_I18N
        -: 3175:      int i;
        -: 3176:      /*
        -: 3177:      if (syntax & RE_HAT_LISTS_NOT_NEWLINE)
        -: 3178:	bitset_set(cset->sbcset, '\0');
        -: 3179:      */
        -: 3180:      mbcset->non_match = 1;
        -: 3181:      if (MB_CUR_MAX > 1)
        -: 3182:	for (i = 0; i < SBC_MAX; ++i)
        -: 3183:	  if (__btowc (i) == WEOF)
        -: 3184:	    bitset_set (sbcset, i);
        -: 3185:#else /* not RE_ENABLE_I18N */
    #####: 3186:      non_match = 1;
        -: 3187:#endif /* not RE_ENABLE_I18N */
        -: 3188:    }
        -: 3189:
        -: 3190:  /* We don't care the syntax in this case.  */
    #####: 3191:  ret = build_charclass (sbcset,
call    0 never executed
        -: 3192:#ifdef RE_ENABLE_I18N
        -: 3193:			 mbcset, &alloc,
        -: 3194:#endif /* RE_ENABLE_I18N */
        -: 3195:			 (const unsigned char *) "alpha", 0);
        -: 3196:
    #####: 3197:  if (BE (ret != REG_NOERROR, 0))
branch  0 never executed
branch  1 never executed
        -: 3198:    {
    #####: 3199:      re_free (sbcset);
        -: 3200:#ifdef RE_ENABLE_I18N
        -: 3201:      free_charset (mbcset);
        -: 3202:#endif /* RE_ENABLE_I18N */
    #####: 3203:      *err = REG_ESPACE;
    #####: 3204:      return NULL;
        -: 3205:    }
        -: 3206:  /* \w match '_' also.  */
    #####: 3207:  bitset_set (sbcset, '_');
        -: 3208:
        -: 3209:  /* If it is non-matching list.  */
        -: 3210:#ifdef RE_ENABLE_I18N
        -: 3211:  if (mbcset->non_match)
        -: 3212:#else /* not RE_ENABLE_I18N */
    #####: 3213:  if (non_match)
branch  0 never executed
branch  1 never executed
        -: 3214:#endif /* not RE_ENABLE_I18N */
    #####: 3215:    bitset_not (sbcset);
call    0 never executed
        -: 3216:
        -: 3217:  /* Build a tree for simple bracket.  */
    #####: 3218:  br_token.type = SIMPLE_BRACKET;
    #####: 3219:  br_token.opr.sbcset = sbcset;
    #####: 3220:  new_idx = re_dfa_add_node (dfa, br_token, 0);
call    0 never executed
    #####: 3221:  tree = create_tree (NULL, NULL, 0, new_idx);
call    0 never executed
    #####: 3222:  if (BE (new_idx == -1 || tree == NULL, 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3223:    goto build_word_op_espace;
        -: 3224:
        -: 3225:#ifdef RE_ENABLE_I18N
        -: 3226:  if (MB_CUR_MAX > 1)
        -: 3227:    {
        -: 3228:      re_token_t alt_token;
        -: 3229:      bin_tree_t *mbc_tree;
        -: 3230:      /* Build a tree for complex bracket.  */
        -: 3231:      br_token.type = COMPLEX_BRACKET;
        -: 3232:      br_token.opr.mbcset = mbcset;
        -: 3233:      dfa->has_mb_node = 1;
        -: 3234:      new_idx = re_dfa_add_node (dfa, br_token, 0);
        -: 3235:      mbc_tree = create_tree (NULL, NULL, 0, new_idx);
        -: 3236:      if (BE (new_idx == -1 || mbc_tree == NULL, 0))
        -: 3237:	goto build_word_op_espace;
        -: 3238:      /* Then join them by ALT node.  */
        -: 3239:      alt_token.type = OP_ALT;
        -: 3240:      new_idx = re_dfa_add_node (dfa, alt_token, 0);
        -: 3241:      tree = create_tree (tree, mbc_tree, 0, new_idx);
        -: 3242:      if (BE (new_idx != -1 && mbc_tree != NULL, 1))
        -: 3243:	return tree;
        -: 3244:    }
        -: 3245:  else
        -: 3246:    {
        -: 3247:      free_charset (mbcset);
        -: 3248:      return tree;
        -: 3249:    }
        -: 3250:#else /* not RE_ENABLE_I18N */
    #####: 3251:  return tree;
        -: 3252:#endif /* not RE_ENABLE_I18N */
        -: 3253:
    #####: 3254: build_word_op_espace:
    #####: 3255:  re_free (sbcset);
        -: 3256:#ifdef RE_ENABLE_I18N
        -: 3257:  free_charset (mbcset);
        -: 3258:#endif /* RE_ENABLE_I18N */
    #####: 3259:  *err = REG_ESPACE;
    #####: 3260:  return NULL;
        -: 3261:}
        -: 3262:
        -: 3263:/* This is intended for the expressions like "a{1,3}".
        -: 3264:   Fetch a number from `input', and return the number.
        -: 3265:   Return -1, if the number field is empty like "{,1}".
        -: 3266:   Return -2, If an error is occured.  */
        -: 3267:
        -: 3268:static int
function fetch_number called 2 returned 100% blocks executed 81%
        2: 3269:fetch_number (input, token, syntax)
        -: 3270:     re_string_t *input;
        -: 3271:     re_token_t *token;
        -: 3272:     reg_syntax_t syntax;
        -: 3273:{
        2: 3274:  int num = -1;
        -: 3275:  unsigned char c;
        -: 3276:  while (1)
        -: 3277:    {
        4: 3278:      *token = fetch_token (input, syntax);
call    0 returned 4
        4: 3279:      c = token->opr.c;
        4: 3280:      if (BE (token->type == END_OF_RE, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 3281:	return -2;
        4: 3282:      if (token->type == OP_CLOSE_DUP_NUM || c == ',')
branch  0 taken 3 (fallthrough)
branch  1 taken 1
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        -: 3283:	break;
        2: 3284:      num = ((token->type != CHARACTER || c < '0' || '9' < c || num == -2)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 2 (fallthrough)
branch  5 taken 0
       4*: 3285:	     ? -2 : ((num == -1) ? c - '0' : num * 10 + c - '0'));
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 2 (fallthrough)
branch  3 taken 0
       2*: 3286:      num = (num > RE_DUP_MAX) ? -2 : num;
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -: 3287:    }
        2: 3288:  return num;
        -: 3289:}
        -: 3290:
        -: 3291:#ifdef RE_ENABLE_I18N
        -: 3292:static void
        -: 3293:free_charset (re_charset_t *cset)
        -: 3294:{
        -: 3295:  re_free (cset->mbchars);
        -: 3296:# ifdef _LIBC
        -: 3297:  re_free (cset->coll_syms);
        -: 3298:  re_free (cset->equiv_classes);
        -: 3299:  re_free (cset->range_starts);
        -: 3300:  re_free (cset->range_ends);
        -: 3301:# endif
        -: 3302:  re_free (cset->char_classes);
        -: 3303:  re_free (cset);
        -: 3304:}
        -: 3305:#endif /* RE_ENABLE_I18N */
        -: 3306:
        -: 3307:/* Functions for binary tree operation.  */
        -: 3308:
        -: 3309:/* Create a node of tree.
        -: 3310:   Note: This function automatically free left and right if malloc fails.  */
        -: 3311:
        -: 3312:static bin_tree_t *
function create_tree called 5830 returned 100% blocks executed 70%
     5830: 3313:create_tree (left, right, type, index)
        -: 3314:     bin_tree_t *left;
        -: 3315:     bin_tree_t *right;
        -: 3316:     re_token_type_t type;
        -: 3317:     int index;
        -: 3318:{
        -: 3319:  bin_tree_t *tree;
     5830: 3320:  tree = re_malloc (bin_tree_t, 1);
     5830: 3321:  if (BE (tree == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 5830
        -: 3322:    {
    #####: 3323:      free_bin_tree (left);
call    0 never executed
    #####: 3324:      free_bin_tree (right);
call    0 never executed
    #####: 3325:      return NULL;
        -: 3326:    }
     5830: 3327:  tree->parent = NULL;
     5830: 3328:  tree->left = left;
     5830: 3329:  tree->right = right;
     5830: 3330:  tree->type = type;
     5830: 3331:  tree->node_idx = index;
     5830: 3332:  tree->first = -1;
     5830: 3333:  tree->next = -1;
     5830: 3334:  re_node_set_init_empty (&tree->eclosure);
        -: 3335:
     5830: 3336:  if (left != NULL)
branch  0 taken 2675 (fallthrough)
branch  1 taken 3155
     2675: 3337:    left->parent = tree;
     5830: 3338:  if (right != NULL)
branch  0 taken 2545 (fallthrough)
branch  1 taken 3285
     2545: 3339:    right->parent = tree;
     5830: 3340:  return tree;
        -: 3341:}
        -: 3342:
        -: 3343:/* Free the sub tree pointed by TREE.  */
        -: 3344:
        -: 3345:static void
function free_bin_tree called 12270 returned 100% blocks executed 100%
    12270: 3346:free_bin_tree (tree)
        -: 3347:     bin_tree_t *tree;
        -: 3348:{
    12270: 3349:  if (tree == NULL)
branch  0 taken 6440 (fallthrough)
branch  1 taken 5830
     6440: 3350:    return;
        -: 3351:  /*re_node_set_free (&tree->eclosure);*/
     5830: 3352:  free_bin_tree (tree->left);
call    0 returned 5830
     5830: 3353:  free_bin_tree (tree->right);
call    0 returned 5830
     5830: 3354:  re_free (tree);
        -: 3355:}
        -: 3356:
        -: 3357:/* Duplicate the node SRC, and return new node.  */
        -: 3358:
        -: 3359:static bin_tree_t *
function duplicate_tree called 1 returned 100% blocks executed 41%
        1: 3360:duplicate_tree (src, dfa)
        -: 3361:     const bin_tree_t *src;
        -: 3362:     re_dfa_t *dfa;
        -: 3363:{
        1: 3364:  bin_tree_t *left = NULL, *right = NULL, *new_tree;
        -: 3365:  int new_node_idx;
        -: 3366:  /* Since node indies must be according to Post-order of the tree,
        -: 3367:     we must duplicate the left at first.  */
        1: 3368:  if (src->left != NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 3369:    {
    #####: 3370:      left = duplicate_tree (src->left, dfa);
call    0 never executed
    #####: 3371:      if (left == NULL)
branch  0 never executed
branch  1 never executed
    #####: 3372:	return NULL;
        -: 3373:    }
        -: 3374:
        -: 3375:  /* Secondaly, duplicate the right.  */
        1: 3376:  if (src->right != NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 3377:    {
    #####: 3378:      right = duplicate_tree (src->right, dfa);
call    0 never executed
    #####: 3379:      if (right == NULL)
branch  0 never executed
branch  1 never executed
        -: 3380:	{
    #####: 3381:	  free_bin_tree (left);
call    0 never executed
    #####: 3382:	  return NULL;
        -: 3383:	}
        -: 3384:    }
        -: 3385:
        -: 3386:  /* At last, duplicate itself.  */
        1: 3387:  if (src->type == NON_TYPE)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 3388:    {
        1: 3389:      new_node_idx = re_dfa_add_node (dfa, dfa->nodes[src->node_idx], 0);
call    0 returned 1
        1: 3390:      dfa->nodes[new_node_idx].duplicated = 1;
        1: 3391:      if (BE (new_node_idx == -1, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 3392:	{
    #####: 3393:	  free_bin_tree (left);
call    0 never executed
    #####: 3394:	  free_bin_tree (right);
call    0 never executed
    #####: 3395:	  return NULL;
        -: 3396:	}
        -: 3397:    }
        -: 3398:  else
    #####: 3399:    new_node_idx = src->type;
        -: 3400:
        1: 3401:  new_tree = create_tree (left, right, src->type, new_node_idx);
call    0 returned 1
        1: 3402:  if (BE (new_tree == NULL, 0))
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 3403:    {
    #####: 3404:      free_bin_tree (left);
call    0 never executed
    #####: 3405:      free_bin_tree (right);
call    0 never executed
        -: 3406:    }
        1: 3407:  return new_tree;
        -: 3408:}
