        -:    0:Source:flex.c
        -:    0:Graph:flex.gcno
        -:    0:Data:flex.gcda
        -:    0:Runs:567
        -:    1:#include "FaultSeeds.h"
        -:    2:
        -:    3:/* flex - tool to generate fast lexical analyzers */
        -:    4:
        -:    5:/*-
        -:    6: * Copyright (c) 1990 The Regents of the University of California.
        -:    7: * All rights reserved.
        -:    8: *
        -:    9: * This code is derived from software contributed to Berkeley by
        -:   10: * Vern Paxson.
        -:   11: *
        -:   12: * The United States Government has rights in this work pursuant
        -:   13: * to contract no. DE-AC03-76SF00098 between the United States
        -:   14: * Department of Energy and the University of California.
        -:   15: *
        -:   16: * Redistribution and use in source and binary forms are permitted provided
        -:   17: * that: (1) source distributions retain this entire copyright notice and
        -:   18: * comment, and (2) distributions including binaries display the following
        -:   19: * acknowledgement:  ``This product includes software developed by the
        -:   20: * University of California, Berkeley and its contributors'' in the
        -:   21: * documentation or other materials provided with the distribution and in
        -:   22: * all advertising materials mentioning features or use of this software.
        -:   23: * Neither the name of the University nor the names of its contributors may
        -:   24: * be used to endorse or promote products derived from this software without
        -:   25: * specific prior written permission.
        -:   26: * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
        -:   27: * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
        -:   28: * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
        -:   29: */
        -:   30:
        -:   31:#ifndef lint
        -:   32:char copyright[] =
        -:   33:"@(#) Copyright (c) 1990 The Regents of the University of California.\n\
        -:   34: All rights reserved.\n";
        -:   35:#endif /* not lint */
        -:   36:
        -:   37:/* $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $ */
        -:   38:
        -:   39:
        -:   40:#include "flexdef.h"
        -:   41:#include "version.h"
        -:   42:#include <ctype.h> 
        -:   43:#include "parse.h"
        -:   44:#include "FaultSeeds.h"
        -:   45:
        -:   46:static char flex_version[] = FLEX_VERSION;
        -:   47:
        -:   48:
        -:   49:/* declare functions that have forward references */
        -:   50:
        -:   51:void flexinit PROTO((int, char**));
        -:   52:void readin PROTO((void));
        -:   53:void set_up_initial_allocations PROTO((void));
        -:   54:
        -:   55:#ifdef NEED_ARGV_FIXUP
        -:   56:extern void argv_fixup PROTO((int *, char ***));
        -:   57:#endif
        -:   58:
        -:   59:
        -:   60:/* these globals are all defined and commented in flexdef.h */
        -:   61:int printstats, syntaxerror, eofseen, ddebug, trace, nowarn, spprdflt;
        -:   62:int interactive, caseins, lex_compat, do_yylineno, useecs, fulltbl, usemecs;
        -:   63:int fullspd, gen_line_dirs, performance_report, backing_up_report;
        -:   64:int C_plus_plus, long_align, use_read, yytext_is_array, do_yywrap, csize;
        -:   65:int yymore_used, reject, real_reject, continued_action, in_rule;
        -:   66:int yymore_really_used, reject_really_used;
        -:   67:int datapos, dataline, linenum, out_linenum;
        -:   68:FILE *skelfile = NULL;
        -:   69:
        -:   70:/* ### add for testing ### */
        -:   71:FILE *err = NULL;
        -:   72:/* ####################### */
        -:   73:
        -:   74:int skel_ind = 0;
        -:   75:char *action_array;
        -:   76:int action_size, defs1_offset, prolog_offset, action_offset, action_index;
        -:   77:char *infilename = NULL, *outfilename = NULL;
        -:   78:int did_outfilename;
        -:   79:char *prefix, *yyclass;
        -:   80:int do_stdinit, use_stdout;
        -:   81:int onestate[ONE_STACK_SIZE], onesym[ONE_STACK_SIZE];
        -:   82:int onenext[ONE_STACK_SIZE], onedef[ONE_STACK_SIZE], onesp;
        -:   83:int current_mns, current_max_rules;
        -:   84:int num_rules, num_eof_rules, default_rule, lastnfa;
        -:   85:int *firstst, *lastst, *finalst, *transchar, *trans1, *trans2;
        -:   86:int *accptnum, *assoc_rule, *state_type;
        -:   87:int *rule_type, *rule_linenum, *rule_useful;
        -:   88:int current_state_type;
        -:   89:int variable_trailing_context_rules;
        -:   90:int numtemps, numprots, protprev[MSP], protnext[MSP], prottbl[MSP];
        -:   91:int protcomst[MSP], firstprot, lastprot, protsave[PROT_SAVE_SIZE];
        -:   92:int numecs, nextecm[CSIZE + 1], ecgroup[CSIZE + 1], nummecs, tecfwd[CSIZE + 1];
        -:   93:int tecbck[CSIZE + 1];
        -:   94:int lastsc, *scset, *scbol, *scxclu, *sceof;
        -:   95:int current_max_scs;
        -:   96:char **scname;
        -:   97:int current_max_dfa_size, current_max_xpairs;
        -:   98:int current_max_template_xpairs, current_max_dfas;
        -:   99:int lastdfa, *nxt, *chk, *tnxt;
        -:  100:int *base, *def, *nultrans, NUL_ec, tblend, firstfree, **dss, *dfasiz;
        -:  101:union dfaacc_union *dfaacc;
        -:  102:int *accsiz, *dhash, numas;
        -:  103:int numsnpairs, jambase, jamstate;
        -:  104:int lastccl, *cclmap, *ccllen, *cclng, cclreuse;
        -:  105:int current_maxccls, current_max_ccl_tbl_size;
        -:  106:Char *ccltbl;
        -:  107:char nmstr[MAXLINE];
        -:  108:int sectnum, nummt, hshcol, dfaeql, numeps, eps2, num_reallocs;
        -:  109:int tmpuses, totnst, peakpairs, numuniq, numdup, hshsave;
        -:  110:int num_backing_up, bol_needed;
        -:  111:FILE *backing_up_file;
        -:  112:int end_of_buffer_state;
        -:  113:char **input_files;
        -:  114:int num_input_files;
        -:  115:
        -:  116:/* Make sure program_name is initialized so we don't crash if writing
        -:  117: * out an error message before getting the program name from argv[0].
        -:  118: */
        -:  119:char *program_name = "flex";
        -:  120:
        -:  121:#ifndef SHORT_FILE_NAMES
        -:  122:static char *outfile_template = "lex.%s.%s";
        -:  123:static char *backing_name = "lex.backup";
        -:  124:#else
        -:  125:static char *outfile_template = "lex%s.%s";
        -:  126:static char *backing_name = "lex.bck";
        -:  127:#endif
        -:  128:
        -:  129:#ifdef THINK_C
        -:  130:#include <console.h>
        -:  131:#endif
        -:  132:
        -:  133:#ifdef MS_DOS
        -:  134:extern unsigned _stklen = 16384;
        -:  135:#endif
        -:  136:
        -:  137:static char outfile_path[MAXLINE];
        -:  138:static int outfile_created = 0;
        -:  139:static char *skelname = NULL;
        -:  140:
        -:  141:
function main called 567 returned 0% blocks executed 95%
      567:  142:int main( argc, argv )
        -:  143:int argc;
        -:  144:char **argv;
        -:  145:	{
        -:  146:	int i;
        -:  147:
        -:  148:#ifdef THINK_C
        -:  149:	argc = ccommand( &argv );
        -:  150:#endif
        -:  151:#ifdef NEED_ARGV_FIXUP
        -:  152:	argv_fixup( &argc, &argv );
        -:  153:#endif
        -:  154:
        -:  155:/* ### add for testing ### */
      567:  156:        if(--argc >0){
branch  0 taken 567 (fallthrough)
branch  1 taken 0
      567:  157:                err = fopen( *++argv, "w" );
call    0 returned 567
      567:  158:                --argv; ++argc;
        -:  159:        }
        -:  160:/* ####################### */
        -:  161:
      567:  162:	flexinit( argc, argv );
call    0 returned 560
        -:  163:
      560:  164:	readin();
call    0 returned 543
        -:  165:
      543:  166:	ntod();
call    0 returned 543
        -:  167:
     4360:  168:	for ( i = 1; i <= num_rules; ++i )
branch  0 taken 3817
branch  1 taken 543 (fallthrough)
     3817:  169:		if ( ! rule_useful[i] && i != default_rule )
branch  0 taken 86 (fallthrough)
branch  1 taken 3731
branch  2 taken 12 (fallthrough)
branch  3 taken 74
       12:  170:			line_warning( _( "rule cannot be matched" ),
       12:  171:					rule_linenum[i] );
call    0 returned 12
        -:  172:
      543:  173:	if ( spprdflt && ! reject && rule_useful[default_rule] )
branch  0 taken 3 (fallthrough)
branch  1 taken 540
branch  2 taken 1 (fallthrough)
branch  3 taken 2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  174:		line_warning(
        -:  175:			_( "-s option given but default rule can be matched" ),
        1:  176:			rule_linenum[default_rule] );
call    0 returned 1
        -:  177:
        -:  178:	/* Generate the C state transition tables from the DFA. */
      543:  179:	make_tables();
call    0 returned 543
        -:  180:
        -:  181:	/* Note, flexend does not return.  It exits with its argument
        -:  182:	 * as status.
        -:  183:	 */
      543:  184:	flexend( 0 );
call    0 returned 0
        -:  185:
    #####:  186:	return 0;	/* keep compilers/lint happy */
        -:  187:	}
        -:  188:
        -:  189:
        -:  190:/* check_options - check user-specified options */
        -:  191:
function check_options called 560 returned 99% blocks executed 87%
      560:  192:void check_options()
        -:  193:	{
        -:  194:	int i;
        -:  195:
      560:  196:	if ( lex_compat )
branch  0 taken 163 (fallthrough)
branch  1 taken 397
        -:  197:		{
      163:  198:		if ( C_plus_plus )
branch  0 taken 0 (fallthrough)
branch  1 taken 163
    #####:  199:			flexerror( _( "Can't use -+ with -l option" ) );
call    0 never executed
        -:  200:
      163:  201:		if ( fulltbl || fullspd )
branch  0 taken 162 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 162
        1:  202:			flexerror( _( "Can't use -f or -F with -l option" ) );
call    0 returned 0
        -:  203:
        -:  204:		/* Don't rely on detecting use of yymore() and REJECT,
        -:  205:		 * just assume they'll be used.
        -:  206:		 */
      162:  207:		yymore_really_used = reject_really_used = true;
        -:  208:
      162:  209:		yytext_is_array = true;
      162:  210:		do_yylineno = true;
      162:  211:		use_read = false;
        -:  212:		}
        -:  213:
      559:  214:	if ( do_yylineno )
branch  0 taken 162 (fallthrough)
branch  1 taken 397
        -:  215:		/* This should really be "maintain_backup_tables = true" */
      162:  216:		reject_really_used = true;
        -:  217:
      559:  218:	if ( csize == unspecified )
branch  0 taken 554 (fallthrough)
branch  1 taken 5
        -:  219:		{
      554:  220:		if ( (fulltbl || fullspd) && ! useecs )
branch  0 taken 526 (fallthrough)
branch  1 taken 28
branch  2 taken 94 (fallthrough)
branch  3 taken 432
branch  4 taken 79 (fallthrough)
branch  5 taken 43
       79:  221:			csize = DEFAULT_CSIZE;
        -:  222:		else
      475:  223:			csize = CSIZE;
        -:  224:		}
        -:  225:
      559:  226:	if ( interactive == unspecified )
branch  0 taken 554 (fallthrough)
branch  1 taken 5
        -:  227:		{
      554:  228:		if ( fulltbl || fullspd )
branch  0 taken 527 (fallthrough)
branch  1 taken 27
branch  2 taken 94 (fallthrough)
branch  3 taken 433
      121:  229:			interactive = false;
        -:  230:		else
      433:  231:			interactive = true;
        -:  232:		}
        -:  233:
      559:  234:	if ( fulltbl || fullspd )
branch  0 taken 531 (fallthrough)
branch  1 taken 28
branch  2 taken 94 (fallthrough)
branch  3 taken 437
        -:  235:		{
      122:  236:		if ( usemecs )
branch  0 taken 3 (fallthrough)
branch  1 taken 119
        3:  237:			flexerror(
call    0 returned 0
        -:  238:			_( "-Cf/-CF and -Cm don't make sense together" ) );
        -:  239:
      119:  240:		if ( interactive )
branch  0 taken 1 (fallthrough)
branch  1 taken 118
        1:  241:			flexerror( _( "-Cf/-CF and -I are incompatible" ) );
call    0 returned 0
        -:  242:
      118:  243:		if ( lex_compat )
branch  0 taken 0 (fallthrough)
branch  1 taken 118
    #####:  244:			flexerror(
call    0 never executed
        -:  245:		_( "-Cf/-CF are incompatible with lex-compatibility mode" ) );
        -:  246:
      118:  247:		if ( do_yylineno )
branch  0 taken 0 (fallthrough)
branch  1 taken 118
    #####:  248:			flexerror(
call    0 never executed
        -:  249:			_( "-Cf/-CF and %option yylineno are incompatible" ) );
        -:  250:
      118:  251:		if ( fulltbl && fullspd )
branch  0 taken 25 (fallthrough)
branch  1 taken 93
branch  2 taken 1 (fallthrough)
branch  3 taken 24
        1:  252:			flexerror( _( "-Cf and -CF are mutually exclusive" ) );
call    0 returned 0
        -:  253:		}
        -:  254:
     554*:  255:	if ( C_plus_plus && fullspd )
branch  0 taken 0 (fallthrough)
branch  1 taken 554
branch  2 never executed
branch  3 never executed
    #####:  256:		flexerror( _( "Can't use -+ with -CF option" ) );
call    0 never executed
        -:  257:
     554*:  258:	if ( C_plus_plus && yytext_is_array )
branch  0 taken 0 (fallthrough)
branch  1 taken 554
branch  2 never executed
branch  3 never executed
        -:  259:		{
    #####:  260:		warn( _( "%array incompatible with -+ option" ) );
call    0 never executed
    #####:  261:		yytext_is_array = false;
        -:  262:		}
        -:  263:
      554:  264:	if ( useecs )
branch  0 taken 305 (fallthrough)
branch  1 taken 249
        -:  265:		{ /* Set up doubly-linked equivalence classes. */
        -:  266:
        -:  267:		/* We loop all the way up to csize, since ecgroup[csize] is
        -:  268:		 * the position used for NUL characters.
        -:  269:		 */
      305:  270:		ecgroup[1] = NIL;
        -:  271:
    77696:  272:		for ( i = 2; i <= csize; ++i )
branch  0 taken 77391
branch  1 taken 305 (fallthrough)
        -:  273:			{
    77391:  274:			ecgroup[i] = i - 1;
    77391:  275:			nextecm[i - 1] = i;
        -:  276:			}
        -:  277:
      305:  278:		nextecm[csize] = NIL;
        -:  279:		}
        -:  280:
        -:  281:	else
        -:  282:		{
        -:  283:		/* Put everything in its own equivalence class. */
    54265:  284:		for ( i = 1; i <= csize; ++i )
branch  0 taken 54016
branch  1 taken 249 (fallthrough)
        -:  285:			{
    54016:  286:			ecgroup[i] = i;
    54016:  287:			nextecm[i] = BAD_SUBSCRIPT;	/* to catch errors */
        -:  288:			}
        -:  289:		}
        -:  290:
      554:  291:	if ( ! use_stdout )
branch  0 taken 551 (fallthrough)
branch  1 taken 3
        -:  292:		{
        -:  293:		FILE *prev_stdout;
        -:  294:
      551:  295:		if ( ! did_outfilename )
branch  0 taken 550 (fallthrough)
branch  1 taken 1
        -:  296:			{
        -:  297:			char *suffix;
        -:  298:
      550:  299:			if ( C_plus_plus )
branch  0 taken 0 (fallthrough)
branch  1 taken 550
    #####:  300:				suffix = "cc";
        -:  301:			else
      550:  302:				suffix = "c";
        -:  303:
      550:  304:			sprintf( outfile_path, outfile_template,
        -:  305:				prefix, suffix );
        -:  306:
      550:  307:			outfilename = outfile_path;
        -:  308:			}
        -:  309:
      551:  310:		prev_stdout = freopen( outfilename, "w", stdout );
call    0 returned 551
        -:  311:
      551:  312:		if ( prev_stdout == NULL )
branch  0 taken 0 (fallthrough)
branch  1 taken 551
    #####:  313:			lerrsf( _( "could not create %s" ), outfilename );
call    0 never executed
        -:  314:
      551:  315:		outfile_created = 1;
        -:  316:		}
        -:  317:
      554:  318:	if ( skelname && (skelfile = fopen( skelname, "r" )) == NULL )
branch  0 taken 3 (fallthrough)
branch  1 taken 551
call    2 returned 3
branch  3 taken 1 (fallthrough)
branch  4 taken 2
        1:  319:		lerrsf( _( "can't open skeleton file %s" ), skelname );
call    0 returned 0
        -:  320:
      553:  321:	if ( strcmp( prefix, "yy" ) )
branch  0 taken 1 (fallthrough)
branch  1 taken 552
        -:  322:		{
        -:  323:#define GEN_PREFIX(name) out_str3( "#define yy%s %s%s\n", name, prefix, name )
        1:  324:		if ( C_plus_plus )
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  325:			GEN_PREFIX( "FlexLexer" );
call    0 never executed
        -:  326:		else
        -:  327:			{
        1:  328:			GEN_PREFIX( "_create_buffer" );
call    0 returned 1
        1:  329:			GEN_PREFIX( "_delete_buffer" );
call    0 returned 1
        1:  330:			GEN_PREFIX( "_scan_buffer" );
call    0 returned 1
        1:  331:			GEN_PREFIX( "_scan_string" );
call    0 returned 1
        1:  332:			GEN_PREFIX( "_scan_bytes" );
call    0 returned 1
        1:  333:			GEN_PREFIX( "_flex_debug" );
call    0 returned 1
        1:  334:			GEN_PREFIX( "_init_buffer" );
call    0 returned 1
        1:  335:			GEN_PREFIX( "_flush_buffer" );
call    0 returned 1
        1:  336:			GEN_PREFIX( "_load_buffer_state" );
call    0 returned 1
        1:  337:			GEN_PREFIX( "_switch_to_buffer" );
call    0 returned 1
        1:  338:			GEN_PREFIX( "in" );
call    0 returned 1
        1:  339:			GEN_PREFIX( "leng" );
call    0 returned 1
        1:  340:			GEN_PREFIX( "lex" );
call    0 returned 1
        1:  341:			GEN_PREFIX( "out" );
call    0 returned 1
        1:  342:			GEN_PREFIX( "restart" );
call    0 returned 1
        1:  343:			GEN_PREFIX( "text" );
call    0 returned 1
        -:  344:
        1:  345:			if ( do_yylineno )
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  346:				GEN_PREFIX( "lineno" );
call    0 never executed
        -:  347:			}
        -:  348:
        1:  349:		if ( do_yywrap )
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  350:			GEN_PREFIX( "wrap" );
call    0 returned 1
        -:  351:
        1:  352:		outn( "" );
call    0 returned 1
        -:  353:		}
        -:  354:
      553:  355:	if ( did_outfilename )
branch  0 taken 1 (fallthrough)
branch  1 taken 552
        1:  356:		line_directive_out( stdout, 0 );
call    0 returned 1
        -:  357:
      553:  358:	skelout();
call    0 returned 553
      553:  359:	}
        -:  360:
        -:  361:
        -:  362:/* flexend - terminate flex
        -:  363: *
        -:  364: * note
        -:  365: *    This routine does not return.
        -:  366: */
        -:  367:
function flexend called 565 returned 0% blocks executed 87%
      565:  368:void flexend( exit_status )
        -:  369:int exit_status;
        -:  370:
        -:  371:	{
        -:  372:	int tblsiz;
        -:  373:	int unlink();
        -:  374:
      565:  375:	if ( skelfile != NULL )
branch  0 taken 2 (fallthrough)
branch  1 taken 563
        -:  376:		{
        2:  377:		if ( ferror( skelfile ) )
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  378:			lerrsf( _( "input error reading skeleton file %s" ),
call    0 never executed
        -:  379:				skelname );
        -:  380:
        2:  381:		else if ( fclose( skelfile ) )
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  382:			lerrsf( _( "error closing skeleton file %s" ),
call    0 never executed
        -:  383:				skelname );
        -:  384:		}
        -:  385:
      565:  386:	if ( exit_status != 0 && outfile_created )
branch  0 taken 22 (fallthrough)
branch  1 taken 543
branch  2 taken 11 (fallthrough)
branch  3 taken 11
        -:  387:		{
       11:  388:		if ( ferror( stdout ) )
call    0 returned 11
branch  1 taken 0 (fallthrough)
branch  2 taken 11
    #####:  389:			lerrsf( _( "error writing output file %s" ),
call    0 never executed
        -:  390:				outfilename );
        -:  391:
       11:  392:		else if ( fclose( stdout ) )
call    0 returned 11
branch  1 taken 0 (fallthrough)
branch  2 taken 11
    #####:  393:			lerrsf( _( "error closing output file %s" ),
call    0 never executed
        -:  394:				outfilename );
        -:  395:
       11:  396:		else if ( unlink( outfilename ) )
call    0 returned 11
branch  1 taken 0 (fallthrough)
branch  2 taken 11
    #####:  397:			lerrsf( _( "error deleting output file %s" ),
call    0 never executed
        -:  398:				outfilename );
        -:  399:		}
        -:  400:
      565:  401:	if ( backing_up_report && backing_up_file )
branch  0 taken 5 (fallthrough)
branch  1 taken 560
branch  2 taken 5 (fallthrough)
branch  3 taken 0
        -:  402:		{
        5:  403:		if ( num_backing_up == 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  404:			fprintf( backing_up_file, _( "No backing up.\n" ) );
call    0 never executed
        5:  405:		else if ( fullspd || fulltbl )
branch  0 taken 5 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 5
    #####:  406:			fprintf( backing_up_file,
call    0 never executed
        -:  407:				_( "%d backing up (non-accepting) states.\n" ),
        -:  408:				num_backing_up );
        -:  409:		else
        5:  410:			fprintf( backing_up_file,
call    0 returned 5
        -:  411:				_( "Compressed tables always back up.\n" ) );
        -:  412:
        5:  413:		if ( ferror( backing_up_file ) )
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    #####:  414:			lerrsf( _( "error writing backup file %s" ),
call    0 never executed
        -:  415:				backing_name );
        -:  416:
        5:  417:		else if ( fclose( backing_up_file ) )
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    #####:  418:			lerrsf( _( "error closing backup file %s" ),
call    0 never executed
        -:  419:				backing_name );
        -:  420:		}
        -:  421:
      565:  422:	if ( printstats )
branch  0 taken 9 (fallthrough)
branch  1 taken 556
        -:  423:		{
        9:  424:		fprintf( err, _( "%s version %s usage statistics:\n" ),
call    0 returned 9
        -:  425:			program_name, flex_version );
        -:  426:
        9:  427:		fprintf( err, _( "  scanner options: -" ) );
call    0 returned 9
        -:  428:
        9:  429:		if ( C_plus_plus )
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:  430:			putc( '+', err );
call    0 never executed
        9:  431:		if ( backing_up_report )
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        3:  432:			putc( 'b', err );
call    0 returned 3
        9:  433:		if ( ddebug )
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  434:			putc( 'd', err );
call    0 returned 2
        9:  435:		if ( caseins )
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  436:			putc( 'i', err );
call    0 returned 2
        9:  437:		if ( lex_compat )
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  438:			putc( 'l', err );
call    0 returned 2
        9:  439:		if ( performance_report > 0 )
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  440:			putc( 'p', err );
call    0 returned 2
        9:  441:		if ( performance_report > 1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:  442:			putc( 'p', err );
call    0 never executed
        9:  443:		if ( spprdflt )
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  444:			putc( 's', err );
call    0 returned 2
        9:  445:		if ( use_stdout )
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  446:			putc( 't', err );
call    0 returned 2
        9:  447:		if ( printstats )
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:  448:			putc( 'v', err );	/* always true! */
call    0 returned 9
        9:  449:		if ( nowarn )
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  450:			putc( 'w', err );
call    0 returned 2
        9:  451:		if ( interactive == false )
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        3:  452:			putc( 'B', err );
call    0 returned 3
        9:  453:		if ( interactive == true )
branch  0 taken 6 (fallthrough)
branch  1 taken 3
        6:  454:			putc( 'I', err );
call    0 returned 6
        9:  455:		if ( ! gen_line_dirs )
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  456:			putc( 'L', err );
call    0 returned 2
        9:  457:		if ( trace )
branch  0 taken 4 (fallthrough)
branch  1 taken 5
        4:  458:			putc( 'T', err );
call    0 returned 4
        -:  459:
        9:  460:		if ( csize == unspecified )
branch  0 taken 0 (fallthrough)
branch  1 taken 9
        -:  461:			/* We encountered an error fairly early on, so csize
        -:  462:			 * never got specified.  Define it now, to prevent
        -:  463:			 * bogus table sizes being written out below.
        -:  464:			 */
    #####:  465:			csize = 256;
        -:  466:
        9:  467:		if ( csize == 128 )
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        1:  468:			putc( '7', err );
call    0 returned 1
        -:  469:		else
        8:  470:			putc( '8', err );
call    0 returned 8
        -:  471:
        9:  472:		fprintf( err, " -C" );
call    0 returned 9
        -:  473:
        9:  474:		if ( long_align )
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        3:  475:			putc( 'a', err );
call    0 returned 3
        9:  476:		if ( fulltbl )
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        1:  477:			putc( 'f', err );
call    0 returned 1
        9:  478:		if ( fullspd )
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        1:  479:			putc( 'F', err );
call    0 returned 1
        9:  480:		if ( useecs )
branch  0 taken 8 (fallthrough)
branch  1 taken 1
        8:  481:			putc( 'e', err );
call    0 returned 8
        9:  482:		if ( usemecs )
branch  0 taken 8 (fallthrough)
branch  1 taken 1
        8:  483:			putc( 'm', err );
call    0 returned 8
        9:  484:		if ( use_read )
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  485:			putc( 'r', err );
call    0 returned 2
        -:  486:
        9:  487:		if ( did_outfilename )
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:  488:			fprintf( err, " -o%s", outfilename );
call    0 never executed
        -:  489:
        9:  490:		if ( skelname )
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        1:  491:			fprintf( err, " -S%s", skelname );
call    0 returned 1
        -:  492:
        9:  493:		if ( strcmp( prefix, "yy" ) )
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:  494:			fprintf( err, " -P%s", prefix );
call    0 never executed
        -:  495:
        9:  496:		putc( '\n', err );
call    0 returned 9
        -:  497:
        9:  498:		fprintf( err, _( "  %d/%d NFA states\n" ),
call    0 returned 9
        -:  499:			lastnfa, current_mns );
        9:  500:		fprintf( err, _( "  %d/%d DFA states (%d words)\n" ),
call    0 returned 9
        -:  501:			lastdfa, current_max_dfas, totnst );
        9:  502:		fprintf( err, _( "  %d rules\n" ),
        9:  503:		num_rules + num_eof_rules - 1 /* - 1 for def. rule */ );
call    0 returned 9
        -:  504:
        9:  505:		if ( num_backing_up == 0 )
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  506:			fprintf( err, _( "  No backing up\n" ) );
call    0 returned 2
        7:  507:		else if ( fullspd || fulltbl )
branch  0 taken 7 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 7
    #####:  508:			fprintf( err,
call    0 never executed
        -:  509:			_( "  %d backing-up (non-accepting) states\n" ),
        -:  510:				num_backing_up );
        -:  511:		else
        7:  512:			fprintf( err,
call    0 returned 7
        -:  513:				_( "  Compressed tables always back-up\n" ) );
        -:  514:
        9:  515:		if ( bol_needed )
branch  0 taken 0 (fallthrough)
branch  1 taken 9
    #####:  516:			fprintf( err,
call    0 never executed
        -:  517:				_( "  Beginning-of-line patterns used\n" ) );
        -:  518:
        9:  519:		fprintf( err, _( "  %d/%d start conditions\n" ), lastsc,
call    0 returned 9
        -:  520:			current_max_scs );
        9:  521:		fprintf( err,
call    0 returned 9
        -:  522:			_( "  %d epsilon states, %d double epsilon states\n" ),
        -:  523:			numeps, eps2 );
        -:  524:
        9:  525:		if ( lastccl == 0 )
branch  0 taken 2 (fallthrough)
branch  1 taken 7
        2:  526:			fprintf( err, _( "  no character classes\n" ) );
call    0 returned 2
        -:  527:		else
        7:  528:			fprintf( err,
        -:  529:_( "  %d/%d character classes needed %d/%d words of storage, %d reused\n" ),
        -:  530:				lastccl, current_maxccls,
        7:  531:				cclmap[lastccl] + ccllen[lastccl],
call    0 returned 7
        -:  532:				current_max_ccl_tbl_size, cclreuse );
        -:  533:
        9:  534:		fprintf( err, _( "  %d state/nextstate pairs created\n" ),
call    0 returned 9
        -:  535:			numsnpairs );
        9:  536:		fprintf( err, _( "  %d/%d unique/duplicate transitions\n" ),
call    0 returned 9
        -:  537:			numuniq, numdup );
        -:  538:
        9:  539:		if ( fulltbl )
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        -:  540:			{
        1:  541:			tblsiz = lastdfa * numecs;
        1:  542:			fprintf( err, _( "  %d table entries\n" ), tblsiz );
call    0 returned 1
        -:  543:			}
        -:  544:
        -:  545:		else
        -:  546:			{
        8:  547:			tblsiz = 2 * (lastdfa + numtemps) + 2 * tblend;
        -:  548:
        8:  549:			fprintf( err,
call    0 returned 8
        -:  550:				_( "  %d/%d base-def entries created\n" ),
        -:  551:				lastdfa + numtemps, current_max_dfas );
        8:  552:			fprintf( err,
call    0 returned 8
        -:  553:			_( "  %d/%d (peak %d) nxt-chk entries created\n" ),
        -:  554:				tblend, current_max_xpairs, peakpairs );
        8:  555:			fprintf( err,
call    0 returned 8
        -:  556:		_( "  %d/%d (peak %d) template nxt-chk entries created\n" ),
        -:  557:				numtemps * nummecs,
        -:  558:				current_max_template_xpairs,
        -:  559:				numtemps * numecs );
        8:  560:			fprintf( err, _( "  %d empty table entries\n" ),
call    0 returned 8
        -:  561:				nummt );
        8:  562:			fprintf( err, _( "  %d protos created\n" ),
call    0 returned 8
        -:  563:				numprots );
        8:  564:			fprintf( err,
call    0 returned 8
        -:  565:				_( "  %d templates created, %d uses\n" ),
        -:  566:				numtemps, tmpuses );
        -:  567:			}
        -:  568:
        9:  569:		if ( useecs )
branch  0 taken 8 (fallthrough)
branch  1 taken 1
        -:  570:			{
        8:  571:			tblsiz = tblsiz + csize;
        8:  572:			fprintf( err,
call    0 returned 8
        -:  573:				_( "  %d/%d equivalence classes created\n" ),
        -:  574:				numecs, csize );
        -:  575:			}
        -:  576:
        9:  577:		if ( usemecs )
branch  0 taken 8 (fallthrough)
branch  1 taken 1
        -:  578:			{
        8:  579:			tblsiz = tblsiz + numecs;
        8:  580:			fprintf( err,
call    0 returned 8
        -:  581:			_( "  %d/%d meta-equivalence classes created\n" ),
        -:  582:				nummecs, csize );
        -:  583:			}
        -:  584:
        9:  585:		fprintf( err,
call    0 returned 9
        -:  586:		_( "  %d (%d saved) hash collisions, %d DFAs equal\n" ),
        -:  587:			hshcol, hshsave, dfaeql );
        9:  588:		fprintf( err, _( "  %d sets of reallocations needed\n" ),
call    0 returned 9
        -:  589:			num_reallocs );
        9:  590:		fprintf( err, _( "  %d total table entries needed\n" ),
call    0 returned 9
        -:  591:			tblsiz );
        -:  592:		}
        -:  593:
      565:  594:	exit( exit_status );
        -:  595:	}
        -:  596:
        -:  597:
        -:  598:/* flexinit - initialize flex */
        -:  599:
function flexinit called 567 returned 99% blocks executed 84%
      567:  600:void flexinit( argc, argv )
        -:  601:int argc;
        -:  602:char **argv;
        -:  603:	{
        -:  604:	int i, sawcmpflag;
        -:  605:	char *arg, *mktemp();
        -:  606:
      567:  607:	printstats = syntaxerror = trace = spprdflt = caseins = false;
      567:  608:	lex_compat = C_plus_plus = backing_up_report = ddebug = fulltbl = false;
      567:  609:	fullspd = long_align = nowarn = yymore_used = continued_action = false;
        -:  610:#ifndef F_JR_1
      567:  611:	do_yylineno = yytext_is_array = in_rule = reject = do_stdinit = false;
        -:  612:#else
        -:  613:    	do_yylineno = yytext_is_array = in_rule = reject = false;
        -:  614:#endif
      567:  615:	yymore_really_used = reject_really_used = unspecified;
      567:  616:	interactive = csize = unspecified;
        -:  617:#ifndef F_AA_4
      567:  618:	do_yywrap = gen_line_dirs = usemecs = useecs = true;
        -:  619:#else
        -:  620:	do_yywrap = gen_line_dirs = usemecs = true;
        -:  621:#endif
        -:  622:
      567:  623:	performance_report = 0;
      567:  624:	did_outfilename = 0;
      567:  625:	prefix = "yy";
      567:  626:	yyclass = 0;
      567:  627:	use_read = use_stdout = false;
        -:  628:
      567:  629:	sawcmpflag = false;
        -:  630:
        -:  631:	/* Initialize dynamic array for holding the rule actions. */
      567:  632:	action_size = 2048;	/* default size of action array in bytes */
      567:  633:	action_array = allocate_character_array( action_size );
call    0 returned 567
      567:  634:	defs1_offset = prolog_offset = action_offset = action_index = 0;
      567:  635:	action_array[0] = '\0';
        -:  636:
        -:  637:/* Commented by Amit Goel on 5th September 2001 to remove nomdeterminism */
        -:  638:/*	program_name = argv[0];    */
        -:  639:/* Added by Amit Goel on 5th September 2001 */
      567:  640:        program_name = "Executable";
      567:  641:	if ( program_name[0] != '\0' &&
branch  0 taken 567 (fallthrough)
branch  1 taken 0
      567:  642:	     program_name[strlen( program_name ) - 1] == '+' )
branch  0 taken 0 (fallthrough)
branch  1 taken 567
    #####:  643:		C_plus_plus = true;
        -:  644:
        -:  645:/* ### add for testing ### */
      567:  646:        ++argv;--argc;
        -:  647:/* ####################### */
        -:  648:
        -:  649:	/* read flags */
     1517:  650:	for ( --argc, ++argv; argc ; --argc, ++argv )
branch  0 taken 1517
branch  1 taken 0 (fallthrough)
        -:  651:		{
     1517:  652:		arg = argv[0];
        -:  653:
     1517:  654:		if ( arg[0] != '-' || arg[1] == '\0' )
branch  0 taken 956 (fallthrough)
branch  1 taken 561
branch  2 taken 956 (fallthrough)
branch  3 taken 0
        -:  655:			break;
        -:  656:
      956:  657:		if ( arg[1] == '-' )
branch  0 taken 0 (fallthrough)
branch  1 taken 956
        -:  658:			{ /* --option */
    #####:  659:			if ( ! strcmp( arg, "--help" ) )
branch  0 never executed
branch  1 never executed
    #####:  660:				arg = "-h";
        -:  661:
    #####:  662:			else if ( ! strcmp( arg, "--version" ) )
branch  0 never executed
branch  1 never executed
    #####:  663:				arg = "-V";
        -:  664:
    #####:  665:			else if ( ! strcmp( arg, "--" ) )
branch  0 never executed
branch  1 never executed
        -:  666:				{ /* end of options */
    #####:  667:				--argc;
        -:  668:#ifndef F_AA_1
    #####:  669:				++argv;
        -:  670:#else
        -:  671:				--argv;
        -:  672:#endif
    #####:  673:				break;
        -:  674:				}
        -:  675:			}
        -:  676:
     1615:  677:		for ( i = 1; arg[i] != '\0'; ++i )
branch  0 taken 1148
branch  1 taken 467 (fallthrough)
     1148:  678:			switch ( arg[i] )
branch  0 taken 0
branch  1 taken 2
branch  2 taken 5
branch  3 taken 1
branch  4 taken 478
branch  5 taken 252
branch  6 taken 84
branch  7 taken 80
branch  8 taken 1
branch  9 taken 3
branch 10 taken 3
branch 11 taken 163
branch 12 taken 3
branch 13 taken 1
branch 14 taken 1
branch 15 taken 4
branch 16 taken 15
branch 17 taken 4
branch 18 taken 3
branch 19 taken 3
branch 20 taken 24
branch 21 taken 9
branch 22 taken 1
branch 23 taken 3
branch 24 taken 3
branch 25 taken 2
branch 26 taken 0
        -:  679:				{
    #####:  680:				case '+':
    #####:  681:					C_plus_plus = true;
    #####:  682:					break;
        -:  683:
        2:  684:				case 'B':
        2:  685:					interactive = false;
        2:  686:					break;
        -:  687:
        5:  688:				case 'b':
        5:  689:					backing_up_report = true;
        5:  690:					break;
        -:  691:
        1:  692:				case 'c':
        1:  693:					break;
        -:  694:
      478:  695:				case 'C':
      478:  696:					if ( i != 1 )
branch  0 taken 1 (fallthrough)
branch  1 taken 477
        1:  697:						flexerror(
call    0 returned 0
        -:  698:				_( "-C flag must be given separately" ) );
        -:  699:
      477:  700:					if ( ! sawcmpflag )
branch  0 taken 476 (fallthrough)
branch  1 taken 1
        -:  701:						{
      476:  702:						useecs = false;
      476:  703:						usemecs = false;
      476:  704:						fulltbl = false;
      476:  705:						sawcmpflag = true;
        -:  706:						}
        -:  707:
     1401:  708:					for ( ++i; arg[i] != '\0'; ++i )
branch  0 taken 925
branch  1 taken 476 (fallthrough)
      925:  709:						switch ( arg[i] )
branch  0 taken 243
branch  1 taken 243
branch  2 taken 15
branch  3 taken 18
branch  4 taken 163
branch  5 taken 242
branch  6 taken 1
        -:  710:							{
      243:  711:							case 'a':
      243:  712:								long_align =
        -:  713:									true;
      243:  714:								break;
        -:  715:
      243:  716:							case 'e':
      243:  717:								useecs = true;
      243:  718:								break;
        -:  719:
       15:  720:							case 'F':
       15:  721:								fullspd = true;
       15:  722:								break;
        -:  723:
       18:  724:							case 'f':
       18:  725:								fulltbl = true;
       18:  726:								break;
        -:  727:
      163:  728:							case 'm':
      163:  729:								usemecs = true;
      163:  730:								break;
        -:  731:
      242:  732:							case 'r':
      242:  733:								use_read = true;
      242:  734:								break;
        -:  735:
        1:  736:							default:
        1:  737:								lerrif(
        -:  738:						_( "unknown -C option '%c'" ),
        1:  739:								(int) arg[i] );
call    0 returned 0
    #####:  740:								break;
        -:  741:							}
        -:  742:
      476:  743:					goto get_next_arg;
        -:  744:
      252:  745:				case 'd':
      252:  746:					ddebug = true;
      252:  747:					break;
        -:  748:
       84:  749:				case 'f':
       84:  750:					useecs = usemecs = false;
       84:  751:					use_read = fulltbl = true;
       84:  752:					break;
        -:  753:
       80:  754:				case 'F':
       80:  755:					useecs = usemecs = false;
       80:  756:					use_read = fullspd = true;
       80:  757:					break;
        -:  758:
        1:  759:				case '?':
        -:  760:				case 'h':
        1:  761:					usage();
call    0 returned 1
        1:  762:					exit( 0 );
call    0 returned 0
        -:  763:
        3:  764:				case 'I':
        3:  765:					interactive = true;
        3:  766:					break;
        -:  767:
        3:  768:				case 'i':
        3:  769:					caseins = true;
        3:  770:					break;
        -:  771:
      163:  772:				case 'l':
      163:  773:					lex_compat = true;
      163:  774:					break;
        -:  775:
        3:  776:				case 'L':
        3:  777:					gen_line_dirs = false;
        3:  778:					break;
        -:  779:
        1:  780:				case 'n':
        -:  781:					/* Stupid do-nothing deprecated
        -:  782:					 * option.
        -:  783:					 */
        1:  784:					break;
        -:  785:
        1:  786:				case 'o':
        1:  787:					if ( i != 1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  788:						flexerror(
call    0 never executed
        -:  789:				_( "-o flag must be given separately" ) );
        -:  790:
        1:  791:					outfilename = arg + i + 1;
        1:  792:					did_outfilename = 1;
        1:  793:					goto get_next_arg;
        -:  794:
        4:  795:				case 'P':
        4:  796:					if ( i != 1 )
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  797:						flexerror(
call    0 returned 0
        -:  798:				_( "-P flag must be given separately" ) );
        -:  799:
        3:  800:					prefix = arg + i + 1;
        3:  801:					goto get_next_arg;
        -:  802:
       15:  803:				case 'p':
       15:  804:					++performance_report;
       15:  805:					break;
        -:  806:
        4:  807:				case 'S':
        4:  808:					if ( i != 1 )
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  809:						flexerror(
call    0 returned 0
        -:  810:				_( "-S flag must be given separately" ) );
        -:  811:
        3:  812:					skelname = arg + i + 1;
        3:  813:					goto get_next_arg;
        -:  814:
        3:  815:				case 's':
        3:  816:					spprdflt = true;
        3:  817:					break;
        -:  818:
        3:  819:				case 't':
        3:  820:					use_stdout = true;
        3:  821:					break;
        -:  822:
       24:  823:				case 'T':
       24:  824:					trace = true;
       24:  825:					break;
        -:  826:
        9:  827:				case 'v':
        9:  828:					printstats = true;
        9:  829:					break;
        -:  830:
        1:  831:				case 'V':
        1:  832:					printf( _( "%s version %s\n" ),
call    0 returned 1
        -:  833:						program_name, flex_version );
        1:  834:					exit( 0 );
call    0 returned 0
        -:  835:
        3:  836:				case 'w':
        3:  837:					nowarn = true;
        3:  838:					break;
        -:  839:
        3:  840:				case '7':
        3:  841:					csize = 128;
        3:  842:					break;
        -:  843:
        2:  844:				case '8':
        2:  845:					csize = CSIZE;
        2:  846:					break;
        -:  847:
    #####:  848:				default:
    #####:  849:					fprintf( err,
        -:  850:		_( "%s: unknown flag '%c'.  For usage, try\n\t%s --help\n" ),
    #####:  851:						program_name, (int) arg[i],
call    0 never executed
        -:  852:						program_name );
    #####:  853:					exit( 1 );
call    0 never executed
        -:  854:				}
        -:  855:
        -:  856:		/* Used by -C, -S, -o, and -P flags in lieu of a "continue 2"
        -:  857:		 * control.
        -:  858:		 */
      950:  859:		get_next_arg: ;
        -:  860:		}
        -:  861:
      561:  862:	num_input_files = argc;
      561:  863:	input_files = argv;
     561*:  864:	set_input_file( num_input_files > 0 ? input_files[0] : NULL );
branch  0 taken 561 (fallthrough)
branch  1 taken 0
call    2 returned 560
        -:  865:
      560:  866:	lastccl = lastsc = lastdfa = lastnfa = 0;
      560:  867:	num_rules = num_eof_rules = default_rule = 0;
      560:  868:	numas = numsnpairs = tmpuses = 0;
      560:  869:	numecs = numeps = eps2 = num_reallocs = hshcol = dfaeql = totnst = 0;
      560:  870:	numuniq = numdup = hshsave = eofseen = datapos = dataline = 0;
      560:  871:	num_backing_up = onesp = numprots = 0;
      560:  872:	variable_trailing_context_rules = bol_needed = false;
        -:  873:
      560:  874:	out_linenum = linenum = sectnum = 1;
      560:  875:	firstprot = NIL;
        -:  876:
        -:  877:	/* Used in mkprot() so that the first proto goes in slot 1
        -:  878:	 * of the proto queue.
        -:  879:	 */
      560:  880:	lastprot = 1;
        -:  881:
      560:  882:	set_up_initial_allocations();
call    0 returned 560
      560:  883:	}
        -:  884:
        -:  885:
        -:  886:/* readin - read in the rules section of the input file(s) */
        -:  887:
function readin called 560 returned 97% blocks executed 71%
      560:  888:void readin()
        -:  889:	{
        -:  890:	static char yy_stdinit[] = "FILE *yyin = stdin, *yyout = stdout;";
        -:  891:	static char yy_nostdinit[] =
        -:  892:		"FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;";
        -:  893:
      560:  894:	line_directive_out( (FILE *) 0, 1 );
call    0 returned 560
        -:  895:
      560:  896:	if ( yyparse() )
call    0 returned 552
branch  1 taken 1 (fallthrough)
branch  2 taken 551
        -:  897:		{
        1:  898:		pinpoint_message( _( "fatal parse error" ) );
call    0 returned 1
        1:  899:		flexend( 1 );
call    0 returned 0
        -:  900:		}
        -:  901:
      551:  902:	if ( syntaxerror )
branch  0 taken 6 (fallthrough)
branch  1 taken 545
        6:  903:		flexend( 1 );
call    0 returned 0
        -:  904:
      545:  905:	if ( backing_up_report )
branch  0 taken 5 (fallthrough)
branch  1 taken 540
        -:  906:		{
        5:  907:		backing_up_file = fopen( backing_name, "w" );
call    0 returned 5
        5:  908:		if ( backing_up_file == NULL )
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  909:			lerrsf(
call    0 never executed
        -:  910:			_( "could not create backing-up info file %s" ),
        -:  911:				backing_name );
        -:  912:		}
        -:  913:
        -:  914:	else
      540:  915:		backing_up_file = NULL;
        -:  916:
      545:  917:	if ( yymore_really_used == true )
branch  0 taken 161 (fallthrough)
branch  1 taken 384
      161:  918:		yymore_used = true;
      384:  919:	else if ( yymore_really_used == false )
branch  0 taken 0 (fallthrough)
branch  1 taken 384
    #####:  920:		yymore_used = false;
        -:  921:
      545:  922:	if ( reject_really_used == true )
branch  0 taken 161 (fallthrough)
branch  1 taken 384
      161:  923:		reject = true;
      384:  924:	else if ( reject_really_used == false )
branch  0 taken 0 (fallthrough)
branch  1 taken 384
    #####:  925:		reject = false;
        -:  926:
      545:  927:	if ( performance_report > 0 )
branch  0 taken 12 (fallthrough)
branch  1 taken 533
        -:  928:		{
       12:  929:		if ( lex_compat )
branch  0 taken 2 (fallthrough)
branch  1 taken 10
        -:  930:			{
        2:  931:			fprintf( err,
call    0 returned 2
        -:  932:_( "-l AT&T lex compatibility option entails a large performance penalty\n" ) );
        2:  933:			fprintf( err,
call    0 returned 2
        -:  934:_( " and may be the actual source of other reported performance penalties\n" ) );
        -:  935:			}
        -:  936:
       10:  937:		else if ( do_yylineno )
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -:  938:			{
    #####:  939:			fprintf( err,
call    0 never executed
        -:  940:	_( "%%option yylineno entails a large performance penalty\n" ) );
        -:  941:			}
        -:  942:
       12:  943:		if ( performance_report > 1 )
branch  0 taken 1 (fallthrough)
branch  1 taken 11
        -:  944:			{
        1:  945:			if ( interactive )
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  946:				fprintf( err,
call    0 returned 1
        -:  947:	_( "-I (interactive) entails a minor performance penalty\n" ) );
        -:  948:
        1:  949:			if ( yymore_used )
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  950:				fprintf( err,
call    0 never executed
        -:  951:		_( "yymore() entails a minor performance penalty\n" ) );
        -:  952:			}
        -:  953:
       12:  954:		if ( reject )
branch  0 taken 5 (fallthrough)
branch  1 taken 7
        5:  955:			fprintf( err,
call    0 returned 5
        -:  956:			_( "REJECT entails a large performance penalty\n" ) );
        -:  957:
       12:  958:		if ( variable_trailing_context_rules )
branch  0 taken 1 (fallthrough)
branch  1 taken 11
        1:  959:			fprintf( err,
call    0 returned 1
        -:  960:_( "Variable trailing context rules entail a large performance penalty\n" ) );
        -:  961:		}
        -:  962:
      545:  963:	if ( reject )
branch  0 taken 168 (fallthrough)
branch  1 taken 377
      168:  964:		real_reject = true;
        -:  965:
      545:  966:	if ( variable_trailing_context_rules )
branch  0 taken 33 (fallthrough)
branch  1 taken 512
       33:  967:		reject = true;
        -:  968:
      545:  969:	if ( (fulltbl || fullspd) && reject )
branch  0 taken 521 (fallthrough)
branch  1 taken 24
branch  2 taken 93 (fallthrough)
branch  3 taken 428
branch  4 taken 2 (fallthrough)
branch  5 taken 115
        -:  970:		{
        2:  971:		if ( real_reject )
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  972:			flexerror(
call    0 returned 0
        -:  973:				_( "REJECT cannot be used with -f or -F" ) );
    #####:  974:		else if ( do_yylineno )
branch  0 never executed
branch  1 never executed
    #####:  975:			flexerror(
call    0 never executed
        -:  976:			_( "%option yylineno cannot be used with -f or -F" ) );
        -:  977:		else
    #####:  978:			flexerror(
call    0 never executed
        -:  979:	_( "variable trailing context rules cannot be used with -f or -F" ) );
        -:  980:		}
        -:  981:
      543:  982:	if ( reject )
branch  0 taken 168 (fallthrough)
branch  1 taken 375
      168:  983:		outn( "\n#define YY_USES_REJECT" );
call    0 returned 168
        -:  984:
      543:  985:	if ( ! do_yywrap )
branch  0 taken 0 (fallthrough)
branch  1 taken 543
        -:  986:		{
    #####:  987:		outn( "\n#define yywrap() 1" );
call    0 never executed
    #####:  988:		outn( "#define YY_SKIP_YYWRAP" );
call    0 never executed
        -:  989:		}
        -:  990:
      543:  991:	if ( ddebug )
branch  0 taken 252 (fallthrough)
branch  1 taken 291
      252:  992:		outn( "\n#define FLEX_DEBUG" );
call    0 returned 252
        -:  993:
      543:  994:	if ( csize == 256 )
branch  0 taken 467 (fallthrough)
branch  1 taken 76
      467:  995:		outn( "typedef unsigned char YY_CHAR;" );
call    0 returned 467
        -:  996:	else
       76:  997:		outn( "typedef char YY_CHAR;" );
call    0 returned 76
        -:  998:
      543:  999:	if ( C_plus_plus )
branch  0 taken 0 (fallthrough)
branch  1 taken 543
        -: 1000:		{
    #####: 1001:		outn( "#define yytext_ptr yytext" );
call    0 never executed
        -: 1002:
    #####: 1003:		if ( interactive )
branch  0 never executed
branch  1 never executed
    #####: 1004:			outn( "#define YY_INTERACTIVE" );
call    0 never executed
        -: 1005:		}
        -: 1006:
        -: 1007:	else
        -: 1008:		{
      543: 1009:		if ( do_stdinit )
branch  0 taken 0 (fallthrough)
branch  1 taken 543
        -: 1010:			{
    #####: 1011:			outn( "#ifdef VMS" );
call    0 never executed
    #####: 1012:			outn( "#ifndef __VMS_POSIX" );
call    0 never executed
    #####: 1013:			outn( yy_nostdinit );
call    0 never executed
    #####: 1014:			outn( "#else" );
call    0 never executed
    #####: 1015:			outn( yy_stdinit );
call    0 never executed
    #####: 1016:			outn( "#endif" );
call    0 never executed
    #####: 1017:			outn( "#else" );
call    0 never executed
    #####: 1018:			outn( yy_stdinit );
call    0 never executed
    #####: 1019:			outn( "#endif" );
call    0 never executed
        -: 1020:			}
        -: 1021:
        -: 1022:		else
      543: 1023:			outn( yy_nostdinit );
call    0 returned 543
        -: 1024:		}
        -: 1025:
      543: 1026:	if ( fullspd )
branch  0 taken 92 (fallthrough)
branch  1 taken 451
        -: 1027:#ifndef F_HD_6
       92: 1028:		outn( "typedef yyconst struct yy_trans_info *yy_state_type;" );
call    0 returned 92
        -: 1029:#else
        -: 1030:		outn( "typedef yyconst struct yy_trans_info yy_state_type;" );
        -: 1031:#endif
      451: 1032:	else if ( ! C_plus_plus )
branch  0 taken 451 (fallthrough)
branch  1 taken 0
      451: 1033:		outn( "typedef int yy_state_type;" );
call    0 returned 451
        -: 1034:
      543: 1035:	if ( ddebug )
branch  0 taken 252 (fallthrough)
branch  1 taken 291
      252: 1036:		outn( "\n#define FLEX_DEBUG" );
call    0 returned 252
        -: 1037:
      543: 1038:	if ( lex_compat )
branch  0 taken 161 (fallthrough)
branch  1 taken 382
      161: 1039:		outn( "#define YY_FLEX_LEX_COMPAT" );
call    0 returned 161
        -: 1040:
      543: 1041:	if ( do_yylineno && ! C_plus_plus )
branch  0 taken 161 (fallthrough)
branch  1 taken 382
branch  2 taken 161 (fallthrough)
branch  3 taken 0
        -: 1042:		{
      161: 1043:		outn( "extern int yylineno;" );
call    0 returned 161
      161: 1044:		outn( "int yylineno = 1;" );
call    0 returned 161
        -: 1045:		}
        -: 1046:
      543: 1047:	if ( C_plus_plus )
branch  0 taken 0 (fallthrough)
branch  1 taken 543
        -: 1048:		{
    #####: 1049:		outn( "\n#include <FlexLexer.h>" );
call    0 never executed
        -: 1050:
    #####: 1051:		if ( yyclass )
branch  0 never executed
branch  1 never executed
        -: 1052:			{
    #####: 1053:			outn( "int yyFlexLexer::yylex()" );
call    0 never executed
    #####: 1054:			outn( "\t{" );
call    0 never executed
    #####: 1055:			outn(
call    0 never executed
        -: 1056:"\tLexerError( \"yyFlexLexer::yylex invoked but %option yyclass used\" );" );
    #####: 1057:			outn( "\treturn 0;" );
call    0 never executed
    #####: 1058:			outn( "\t}" );
call    0 never executed
        -: 1059:	
    #####: 1060:			out_str( "\n#define YY_DECL int %s::yylex()\n",
call    0 never executed
        -: 1061:				yyclass );
        -: 1062:			}
        -: 1063:		}
        -: 1064:
        -: 1065:	else
        -: 1066:		{
      543: 1067:		if ( yytext_is_array )
branch  0 taken 161 (fallthrough)
branch  1 taken 382
      161: 1068:			outn( "extern char yytext[];\n" );
call    0 returned 161
        -: 1069:
        -: 1070:		else
        -: 1071:			{
      382: 1072:			outn( "extern char *yytext;" );
call    0 returned 382
      382: 1073:			outn( "#define yytext_ptr yytext" );
call    0 returned 382
        -: 1074:			}
        -: 1075:
      543: 1076:		if ( yyclass )
branch  0 taken 0 (fallthrough)
branch  1 taken 543
    #####: 1077:			flexerror(
call    0 never executed
        -: 1078:		_( "%option yyclass only meaningful for C++ scanners" ) );
        -: 1079:		}
        -: 1080:
      543: 1081:	if ( useecs )
branch  0 taken 296 (fallthrough)
branch  1 taken 247
      296: 1082:		numecs = cre8ecs( nextecm, ecgroup, csize );
call    0 returned 296
        -: 1083:	else
      247: 1084:		numecs = csize;
        -: 1085:
        -: 1086:	/* Now map the equivalence class for NUL to its expected place. */
      543: 1087:	ecgroup[0] = ecgroup[csize];
      543: 1088:	NUL_ec = ABS( ecgroup[0] );
        -: 1089:
      543: 1090:	if ( useecs )
branch  0 taken 296 (fallthrough)
branch  1 taken 247
      296: 1091:		ccl2ecl();
call    0 returned 296
      543: 1092:	}
        -: 1093:
        -: 1094:
        -: 1095:/* set_up_initial_allocations - allocate memory for internal tables */
        -: 1096:
function set_up_initial_allocations called 560 returned 100% blocks executed 100%
      560: 1097:void set_up_initial_allocations()
        -: 1098:	{
      560: 1099:	current_mns = INITIAL_MNS;
      560: 1100:	firstst = allocate_integer_array( current_mns );
call    0 returned 560
      560: 1101:	lastst = allocate_integer_array( current_mns );
call    0 returned 560
      560: 1102:	finalst = allocate_integer_array( current_mns );
call    0 returned 560
      560: 1103:	transchar = allocate_integer_array( current_mns );
call    0 returned 560
      560: 1104:	trans1 = allocate_integer_array( current_mns );
call    0 returned 560
      560: 1105:	trans2 = allocate_integer_array( current_mns );
call    0 returned 560
      560: 1106:	accptnum = allocate_integer_array( current_mns );
call    0 returned 560
      560: 1107:	assoc_rule = allocate_integer_array( current_mns );
call    0 returned 560
      560: 1108:	state_type = allocate_integer_array( current_mns );
call    0 returned 560
        -: 1109:
      560: 1110:	current_max_rules = INITIAL_MAX_RULES;
      560: 1111:	rule_type = allocate_integer_array( current_max_rules );
call    0 returned 560
      560: 1112:	rule_linenum = allocate_integer_array( current_max_rules );
call    0 returned 560
      560: 1113:	rule_useful = allocate_integer_array( current_max_rules );
call    0 returned 560
        -: 1114:
      560: 1115:	current_max_scs = INITIAL_MAX_SCS;
      560: 1116:	scset = allocate_integer_array( current_max_scs );
call    0 returned 560
      560: 1117:	scbol = allocate_integer_array( current_max_scs );
call    0 returned 560
      560: 1118:	scxclu = allocate_integer_array( current_max_scs );
call    0 returned 560
      560: 1119:	sceof = allocate_integer_array( current_max_scs );
call    0 returned 560
      560: 1120:	scname = allocate_char_ptr_array( current_max_scs );
call    0 returned 560
        -: 1121:
      560: 1122:	current_maxccls = INITIAL_MAX_CCLS;
      560: 1123:	cclmap = allocate_integer_array( current_maxccls );
call    0 returned 560
      560: 1124:	ccllen = allocate_integer_array( current_maxccls );
call    0 returned 560
      560: 1125:	cclng = allocate_integer_array( current_maxccls );
call    0 returned 560
        -: 1126:
      560: 1127:	current_max_ccl_tbl_size = INITIAL_MAX_CCL_TBL_SIZE;
      560: 1128:	ccltbl = allocate_Character_array( current_max_ccl_tbl_size );
call    0 returned 560
        -: 1129:
      560: 1130:	current_max_dfa_size = INITIAL_MAX_DFA_SIZE;
        -: 1131:
      560: 1132:	current_max_xpairs = INITIAL_MAX_XPAIRS;
      560: 1133:	nxt = allocate_integer_array( current_max_xpairs );
call    0 returned 560
      560: 1134:	chk = allocate_integer_array( current_max_xpairs );
call    0 returned 560
        -: 1135:
      560: 1136:	current_max_template_xpairs = INITIAL_MAX_TEMPLATE_XPAIRS;
      560: 1137:	tnxt = allocate_integer_array( current_max_template_xpairs );
call    0 returned 560
        -: 1138:
      560: 1139:	current_max_dfas = INITIAL_MAX_DFAS;
      560: 1140:	base = allocate_integer_array( current_max_dfas );
call    0 returned 560
      560: 1141:	def = allocate_integer_array( current_max_dfas );
call    0 returned 560
      560: 1142:	dfasiz = allocate_integer_array( current_max_dfas );
call    0 returned 560
      560: 1143:	accsiz = allocate_integer_array( current_max_dfas );
call    0 returned 560
      560: 1144:	dhash = allocate_integer_array( current_max_dfas );
call    0 returned 560
      560: 1145:	dss = allocate_int_ptr_array( current_max_dfas );
call    0 returned 560
      560: 1146:	dfaacc = allocate_dfaacc_union( current_max_dfas );
call    0 returned 560
        -: 1147:
      560: 1148:	nultrans = (int *) 0;
      560: 1149:	}
        -: 1150:
        -: 1151:
function usage called 1 returned 100% blocks executed 98%
        1: 1152:void usage()
        -: 1153:	{
        -: 1154:/*	FILE *f = stdout;*/ /* #### f is replaced by err for testing. #### */
        -: 1155:
        1: 1156:	fprintf( err,
call    0 returned 1
        -: 1157:_( "%s [-bcdfhilnpstvwBFILTV78+? -C[aefFmr] -ooutput -Pprefix -Sskeleton]\n" ),
        -: 1158:		program_name );
        1: 1159:	fprintf( err, _( "\t[--help --version] [file ...]\n" ) );
call    0 returned 1
        -: 1160:
        1: 1161:	fprintf( err, _( "\t-b  generate backing-up information to %s\n" ),
call    0 returned 1
        -: 1162:		backing_name );
        1: 1163:	fprintf( err, _( "\t-c  do-nothing POSIX option\n" ) );
call    0 returned 1
        1: 1164:	fprintf( err, _( "\t-d  turn on debug mode in generated scanner\n" ) );
call    0 returned 1
        1: 1165:	fprintf( err, _( "\t-f  generate fast, large scanner\n" ) );
call    0 returned 1
        1: 1166:	fprintf( err, _( "\t-h  produce this help message\n" ) );
call    0 returned 1
        1: 1167:	fprintf( err, _( "\t-i  generate case-insensitive scanner\n" ) );
call    0 returned 1
        1: 1168:	fprintf( err, _( "\t-l  maximal compatibility with original lex\n" ) );
call    0 returned 1
        1: 1169:	fprintf( err, _( "\t-n  do-nothing POSIX option\n" ) );
call    0 returned 1
        1: 1170:	fprintf( err, _( "\t-p  generate performance report to err\n" ) );
call    0 returned 1
        1: 1171:	fprintf( err,
call    0 returned 1
        -: 1172:		_( "\t-s  suppress default rule to ECHO unmatched text\n" ) );
        -: 1173:
        1: 1174:	if ( ! did_outfilename )
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 1175:		{
       1*: 1176:		sprintf( outfile_path, outfile_template,
        1: 1177:			prefix, C_plus_plus ? "cc" : "c" );
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 1178:		outfilename = outfile_path;
        -: 1179:		}
        -: 1180:
        1: 1181:	fprintf( err,
call    0 returned 1
        -: 1182:		_( "\t-t  write generated scanner on stdout instead of %s\n" ),
        -: 1183:		outfilename );
        -: 1184:
        1: 1185:	fprintf( err,
call    0 returned 1
        -: 1186:		_( "\t-v  write summary of scanner statistics to f\n" ) );
        1: 1187:	fprintf( err, _( "\t-w  do not generate warnings\n" ) );
call    0 returned 1
        1: 1188:	fprintf( err, _( "\t-B  generate batch scanner (opposite of -I)\n" ) );
call    0 returned 1
        1: 1189:	fprintf( err,
call    0 returned 1
        -: 1190:		_( "\t-F  use alternative fast scanner representation\n" ) );
        1: 1191:	fprintf( err,
call    0 returned 1
        -: 1192:		_( "\t-I  generate interactive scanner (opposite of -B)\n" ) );
        1: 1193:	fprintf( err, _( "\t-L  suppress #line directives in scanner\n" ) );
call    0 returned 1
        1: 1194:	fprintf( err, _( "\t-T  %s should run in trace mode\n" ), program_name );
call    0 returned 1
        1: 1195:	fprintf( err, _( "\t-V  report %s version\n" ), program_name );
call    0 returned 1
        1: 1196:	fprintf( err, _( "\t-7  generate 7-bit scanner\n" ) );
call    0 returned 1
        1: 1197:	fprintf( err, _( "\t-8  generate 8-bit scanner\n" ) );
call    0 returned 1
        1: 1198:	fprintf( err, _( "\t-+  generate C++ scanner class\n" ) );
call    0 returned 1
        1: 1199:	fprintf( err, _( "\t-?  produce this help message\n" ) );
call    0 returned 1
        1: 1200:	fprintf( err,
call    0 returned 1
        -: 1201:_( "\t-C  specify degree of table compression (default is -Cem):\n" ) );
        1: 1202:	fprintf( err,
call    0 returned 1
        -: 1203:_( "\t\t-Ca  trade off larger tables for better memory alignment\n" ) );
        1: 1204:	fprintf( err, _( "\t\t-Ce  construct equivalence classes\n" ) );
call    0 returned 1
        1: 1205:	fprintf( err,
call    0 returned 1
        -: 1206:_( "\t\t-Cf  do not compress scanner tables; use -f representation\n" ) );
        1: 1207:	fprintf( err,
call    0 returned 1
        -: 1208:_( "\t\t-CF  do not compress scanner tables; use -F representation\n" ) );
        1: 1209:	fprintf( err, _( "\t\t-Cm  construct meta-equivalence classes\n" ) );
call    0 returned 1
        1: 1210:	fprintf( err,
call    0 returned 1
        -: 1211:	_( "\t\t-Cr  use read() instead of stdio for scanner input\n" ) );
        1: 1212:	fprintf( err, _( "\t-o  specify output filename\n" ) );
call    0 returned 1
        1: 1213:	fprintf( err, _( "\t-P  specify scanner prefix other than \"yy\"\n" ) );
call    0 returned 1
        1: 1214:	fprintf( err, _( "\t-S  specify skeleton file\n" ) );
call    0 returned 1
        1: 1215:	fprintf( err, _( "\t--help     produce this help message\n" ) );
call    0 returned 1
        1: 1216:	fprintf( err, _( "\t--version  report %s version\n" ), program_name );
call    0 returned 1
        1: 1217:	}
        -: 1218:/* ccl - routines for character classes */
        -: 1219:
        -: 1220:/*-
        -: 1221: * Copyright (c) 1990 The Regents of the University of California.
        -: 1222: * All rights reserved.
        -: 1223: *
        -: 1224: * This code is derived from software contributed to Berkeley by
        -: 1225: * Vern Paxson.
        -: 1226: * 
        -: 1227: * The United States Government has rights in this work pursuant
        -: 1228: * to contract no. DE-AC03-76SF00098 between the United States
        -: 1229: * Department of Energy and the University of California.
        -: 1230: *
        -: 1231: * Redistribution and use in source and binary forms are permitted provided
        -: 1232: * that: (1) source distributions retain this entire copyright notice and
        -: 1233: * comment, and (2) distributions including binaries display the following
        -: 1234: * acknowledgement:  ``This product includes software developed by the
        -: 1235: * University of California, Berkeley and its contributors'' in the
        -: 1236: * documentation or other materials provided with the distribution and in
        -: 1237: * all advertising materials mentioning features or use of this software.
        -: 1238: * Neither the name of the University nor the names of its contributors may
        -: 1239: * be used to endorse or promote products derived from this software without
        -: 1240: * specific prior written permission.
        -: 1241: * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
        -: 1242: * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
        -: 1243: * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
        -: 1244: */
        -: 1245:
        -: 1246:/* $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $ */
        -: 1247:
        -: 1248:
        -: 1249:/* ccladd - add a single character to a ccl */
        -: 1250:
function ccladd called 25222 returned 100% blocks executed 100%
    25222: 1251:void ccladd( cclp, ch )
        -: 1252:int cclp;
        -: 1253:int ch;
        -: 1254:	{
        -: 1255:	int ind, len, newpos, i;
        -: 1256:
    25222: 1257:	check_char( ch );
call    0 returned 25222
        -: 1258:
    25222: 1259:	len = ccllen[cclp];
    25222: 1260:	ind = cclmap[cclp];
        -: 1261:
        -: 1262:	/* check to see if the character is already in the ccl */
        -: 1263:
   486630: 1264:	for ( i = 0; i < len; ++i )
branch  0 taken 461619
branch  1 taken 25011 (fallthrough)
   461619: 1265:		if ( ccltbl[ind + i] == ch )
branch  0 taken 211 (fallthrough)
branch  1 taken 461408
      211: 1266:			return;
        -: 1267:
    25011: 1268:	newpos = ind + len;
        -: 1269:
    25011: 1270:	if ( newpos >= current_max_ccl_tbl_size )
branch  0 taken 40 (fallthrough)
branch  1 taken 24971
        -: 1271:		{
       40: 1272:		current_max_ccl_tbl_size += MAX_CCL_TBL_SIZE_INCREMENT;
        -: 1273:
       40: 1274:		++num_reallocs;
        -: 1275:
       40: 1276:		ccltbl = reallocate_Character_array( ccltbl,
call    0 returned 40
        -: 1277:						current_max_ccl_tbl_size );
        -: 1278:		}
        -: 1279:
    25011: 1280:	ccllen[cclp] = len + 1;
    25011: 1281:	ccltbl[newpos] = ch;
        -: 1282:	}
        -: 1283:
        -: 1284:
        -: 1285:/* cclinit - return an empty ccl */
        -: 1286:
function cclinit called 2060 returned 100% blocks executed 100%
     2060: 1287:int cclinit()
        -: 1288:	{
     2060: 1289:	if ( ++lastccl >= current_maxccls )
branch  0 taken 2 (fallthrough)
branch  1 taken 2058
        -: 1290:		{
        2: 1291:		current_maxccls += MAX_CCLS_INCREMENT;
        -: 1292:
        2: 1293:		++num_reallocs;
        -: 1294:
        2: 1295:		cclmap = reallocate_integer_array( cclmap, current_maxccls );
call    0 returned 2
        2: 1296:		ccllen = reallocate_integer_array( ccllen, current_maxccls );
call    0 returned 2
        2: 1297:		cclng = reallocate_integer_array( cclng, current_maxccls );
call    0 returned 2
        -: 1298:		}
        -: 1299:
     2060: 1300:	if ( lastccl == 1 )
branch  0 taken 551 (fallthrough)
branch  1 taken 1509
        -: 1301:		/* we're making the first ccl */
      551: 1302:		cclmap[lastccl] = 0;
        -: 1303:
        -: 1304:	else
        -: 1305:		/* The new pointer is just past the end of the last ccl.
        -: 1306:		 * Since the cclmap points to the \first/ character of a
        -: 1307:		 * ccl, adding the length of the ccl to the cclmap pointer
        -: 1308:		 * will produce a cursor to the first free space.
        -: 1309:		 */
     1509: 1310:		cclmap[lastccl] = cclmap[lastccl - 1] + ccllen[lastccl - 1];
        -: 1311:
     2060: 1312:	ccllen[lastccl] = 0;
     2060: 1313:	cclng[lastccl] = 0;	/* ccl's start out life un-negated */
        -: 1314:
     2060: 1315:	return lastccl;
        -: 1316:	}
        -: 1317:
        -: 1318:
        -: 1319:/* cclnegate - negate the given ccl */
        -: 1320:
function cclnegate called 981 returned 100% blocks executed 100%
      981: 1321:void cclnegate( cclp )
        -: 1322:int cclp;
        -: 1323:	{
      981: 1324:	cclng[cclp] = 1;
      981: 1325:	}
        -: 1326:
        -: 1327:
        -: 1328:/* list_character_set - list the members of a set of characters in CCL form
        -: 1329: *
        -: 1330: * Writes to the given file a character-class representation of those
        -: 1331: * characters present in the given CCL.  A character is present if it
        -: 1332: * has a non-zero value in the cset array.
        -: 1333: */
        -: 1334:
function list_character_set called 8 returned 100% blocks executed 100%
        8: 1335:void list_character_set( file, cset )
        -: 1336:FILE *file;
        -: 1337:int cset[];
        -: 1338:	{
        -: 1339:	register int i;
        -: 1340:
        8: 1341:	putc( '[', file );
call    0 returned 8
        -: 1342:
      908: 1343:	for ( i = 0; i < csize; ++i )
branch  0 taken 900
branch  1 taken 8 (fallthrough)
        -: 1344:		{
      900: 1345:		if ( cset[i] )
branch  0 taken 12 (fallthrough)
branch  1 taken 888
        -: 1346:			{
       12: 1347:			register int start_char = i;
        -: 1348:
       12: 1349:			putc( ' ', file );
call    0 returned 12
        -: 1350:
       12: 1351:			fputs( readable_form( i ), file );
call    0 returned 12
call    1 returned 12
        -: 1352:
      896: 1353:			while ( ++i < csize && cset[i] )
branch  0 taken 892 (fallthrough)
branch  1 taken 4
branch  2 taken 884
branch  3 taken 8 (fallthrough)
        -: 1354:				;
        -: 1355:
       12: 1356:			if ( i - 1 > start_char )
branch  0 taken 8 (fallthrough)
branch  1 taken 4
        -: 1357:				/* this was a run */
        -: 1358:#ifndef F_JR_5
        8: 1359:				fprintf( file, "-%s", readable_form( i - 1 ) );
call    0 returned 8
call    1 returned 8
        -: 1360:#else
        -: 1361:                fprintf( err, "-%s", readable_form( i - 1 ) );
        -: 1362:#endif
        -: 1363:
       12: 1364:			putc( ' ', file );
call    0 returned 12
        -: 1365:			}
        -: 1366:		}
        -: 1367:
        8: 1368:	putc( ']', file );
call    0 returned 8
        8: 1369:	}
        -: 1370:/* dfa - DFA construction routines */
        -: 1371:
        -: 1372:/*-
        -: 1373: * Copyright (c) 1990 The Regents of the University of California.
        -: 1374: * All rights reserved.
        -: 1375: *
        -: 1376: * This code is derived from software contributed to Berkeley by
        -: 1377: * Vern Paxson.
        -: 1378: * 
        -: 1379: * The United States Government has rights in this work pursuant
        -: 1380: * to contract no. DE-AC03-76SF00098 between the United States
        -: 1381: * Department of Energy and the University of California.
        -: 1382: *
        -: 1383: * Redistribution and use in source and binary forms are permitted provided
        -: 1384: * that: (1) source distributions retain this entire copyright notice and
        -: 1385: * comment, and (2) distributions including binaries display the following
        -: 1386: * acknowledgement:  ``This product includes software developed by the
        -: 1387: * University of California, Berkeley and its contributors'' in the
        -: 1388: * documentation or other materials provided with the distribution and in
        -: 1389: * all advertising materials mentioning features or use of this software.
        -: 1390: * Neither the name of the University nor the names of its contributors may
        -: 1391: * be used to endorse or promote products derived from this software without
        -: 1392: * specific prior written permission.
        -: 1393: * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
        -: 1394: * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
        -: 1395: * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
        -: 1396: */
        -: 1397:
        -: 1398:/* $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $ */
        -: 1399:
        -: 1400:
        -: 1401:
        -: 1402:/* declare functions that have forward references */
        -: 1403:
        -: 1404:void dump_associated_rules PROTO((FILE*, int));
        -: 1405:void dump_transitions PROTO((FILE*, int[]));
        -: 1406:void sympartition PROTO((int[], int, int[], int[]));
        -: 1407:int symfollowset PROTO((int[], int, int, int[]));
        -: 1408:
        -: 1409:
        -: 1410:/* check_for_backing_up - check a DFA state for backing up
        -: 1411: *
        -: 1412: * synopsis
        -: 1413: *     void check_for_backing_up( int ds, int state[numecs] );
        -: 1414: *
        -: 1415: * ds is the number of the state to check and state[] is its out-transitions,
        -: 1416: * indexed by equivalence class.
        -: 1417: */
        -: 1418:
function check_for_backing_up called 12403 returned 100% blocks executed 100%
    12403: 1419:void check_for_backing_up( ds, state )
        -: 1420:int ds;
        -: 1421:int state[];
        -: 1422:	{
    12403: 1423:	if ( (reject && ! dfaacc[ds].dfaacc_set) ||
branch  0 taken 4663 (fallthrough)
branch  1 taken 7740
branch  2 taken 3907 (fallthrough)
branch  3 taken 756
    11647: 1424:	     (! reject && ! dfaacc[ds].dfaacc_state) )
branch  0 taken 7740 (fallthrough)
branch  1 taken 3907
branch  2 taken 1722 (fallthrough)
branch  3 taken 6018
        -: 1425:		{ /* state is non-accepting */
     2478: 1426:		++num_backing_up;
        -: 1427:
     2478: 1428:		if ( backing_up_report )
branch  0 taken 4 (fallthrough)
branch  1 taken 2474
        -: 1429:			{
        4: 1430:			fprintf( backing_up_file,
call    0 returned 4
        -: 1431:				_( "State #%d is non-accepting -\n" ), ds );
        -: 1432:
        -: 1433:			/* identify the state */
        4: 1434:			dump_associated_rules( backing_up_file, ds );
call    0 returned 4
        -: 1435:
        -: 1436:			/* Now identify it further using the out- and
        -: 1437:			 * jam-transitions.
        -: 1438:			 */
        4: 1439:			dump_transitions( backing_up_file, state );
call    0 returned 4
        -: 1440:
        4: 1441:			putc( '\n', backing_up_file );
call    0 returned 4
        -: 1442:			}
        -: 1443:		}
    12403: 1444:	}
        -: 1445:
        -: 1446:
        -: 1447:/* check_trailing_context - check to see if NFA state set constitutes
        -: 1448: *                          "dangerous" trailing context
        -: 1449: *
        -: 1450: * synopsis
        -: 1451: *    void check_trailing_context( int nfa_states[num_states+1], int num_states,
        -: 1452: *				int accset[nacc+1], int nacc );
        -: 1453: *
        -: 1454: * NOTES
        -: 1455: *  Trailing context is "dangerous" if both the head and the trailing
        -: 1456: *  part are of variable size \and/ there's a DFA state which contains
        -: 1457: *  both an accepting state for the head part of the rule and NFA states
        -: 1458: *  which occur after the beginning of the trailing context.
        -: 1459: *
        -: 1460: *  When such a rule is matched, it's impossible to tell if having been
        -: 1461: *  in the DFA state indicates the beginning of the trailing context or
        -: 1462: *  further-along scanning of the pattern.  In these cases, a warning
        -: 1463: *  message is issued.
        -: 1464: *
        -: 1465: *    nfa_states[1 .. num_states] is the list of NFA states in the DFA.
        -: 1466: *    accset[1 .. nacc] is the list of accepting numbers for the DFA state.
        -: 1467: */
        -: 1468:
function check_trailing_context called 446 returned 100% blocks executed 100%
      446: 1469:void check_trailing_context( nfa_states, num_states, accset, nacc )
        -: 1470:int *nfa_states, num_states;
        -: 1471:int *accset;
        -: 1472:int nacc;
        -: 1473:	{
        -: 1474:	register int i, j;
        -: 1475:
     1191: 1476:	for ( i = 1; i <= num_states; ++i )
branch  0 taken 778
branch  1 taken 413 (fallthrough)
        -: 1477:		{
      778: 1478:		int ns = nfa_states[i];
      778: 1479:		register int type = state_type[ns];
      778: 1480:		register int ar = assoc_rule[ns];
        -: 1481:
      778: 1482:		if ( type == STATE_NORMAL || rule_type[ar] != RULE_VARIABLE )
branch  0 taken 101 (fallthrough)
branch  1 taken 677
branch  2 taken 101 (fallthrough)
branch  3 taken 0
        -: 1483:			{ /* do nothing */
        -: 1484:			}
        -: 1485:
      101: 1486:		else if ( type == STATE_TRAILING_CONTEXT )
branch  0 taken 101 (fallthrough)
branch  1 taken 0
        -: 1487:			{
        -: 1488:			/* Potential trouble.  Scan set of accepting numbers
        -: 1489:			 * for the one marking the end of the "head".  We
        -: 1490:			 * assume that this looping will be fairly cheap
        -: 1491:			 * since it's rare that an accepting number set
        -: 1492:			 * is large.
        -: 1493:			 */
      202: 1494:			for ( j = 1; j <= nacc; ++j )
branch  0 taken 134
branch  1 taken 68 (fallthrough)
      134: 1495:				if ( accset[j] & YY_TRAILING_HEAD_MASK )
branch  0 taken 33 (fallthrough)
branch  1 taken 101
        -: 1496:					{
       33: 1497:					line_warning(
        -: 1498:					_( "dangerous trailing context" ),
       33: 1499:						rule_linenum[ar] );
call    0 returned 33
       33: 1500:					return;
        -: 1501:					}
        -: 1502:			}
        -: 1503:		}
        -: 1504:	}
        -: 1505:
        -: 1506:
        -: 1507:/* dump_associated_rules - list the rules associated with a DFA state
        -: 1508: *
        -: 1509: * Goes through the set of NFA states associated with the DFA and
        -: 1510: * extracts the first MAX_ASSOC_RULES unique rules, sorts them,
        -: 1511: * and writes a report to the given file.
        -: 1512: */
        -: 1513:
function dump_associated_rules called 4 returned 100% blocks executed 95%
        4: 1514:void dump_associated_rules( file, ds )
        -: 1515:FILE *file;
        -: 1516:int ds;
        -: 1517:	{
        -: 1518:	register int i, j;
        4: 1519:	register int num_associated_rules = 0;
        -: 1520:	int rule_set[MAX_ASSOC_RULES + 1];
        4: 1521:	int *dset = dss[ds];
        4: 1522:	int size = dfasiz[ds];
        -: 1523:
       16: 1524:	for ( i = 1; i <= size; ++i )
branch  0 taken 12
branch  1 taken 4 (fallthrough)
        -: 1525:		{
       12: 1526:		register int rule_num = rule_linenum[assoc_rule[dset[i]]];
        -: 1527:
      12*: 1528:		for ( j = 1; j <= num_associated_rules; ++j )
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        8: 1529:			if ( rule_num == rule_set[j] )
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8: 1530:				break;
        -: 1531:
       12: 1532:		if ( j > num_associated_rules )
branch  0 taken 4 (fallthrough)
branch  1 taken 8
        -: 1533:			{ /* new rule */
        4: 1534:			if ( num_associated_rules < MAX_ASSOC_RULES )
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 1535:				rule_set[++num_associated_rules] = rule_num;
        -: 1536:			}
        -: 1537:		}
        -: 1538:
        4: 1539:	bubble( rule_set, num_associated_rules );
call    0 returned 4
        -: 1540:
        4: 1541:	fprintf( file, _( " associated rule line numbers:" ) );
call    0 returned 4
        -: 1542:
        8: 1543:	for ( i = 1; i <= num_associated_rules; ++i )
branch  0 taken 4
branch  1 taken 4 (fallthrough)
        -: 1544:		{
        4: 1545:		if ( i % 8 == 1 )
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -: 1546:#ifndef F_JR_3
        4: 1547:			putc( '\n', file );
call    0 returned 4
        -: 1548:#else
        -: 1549:            putc( '\n', err );
        -: 1550:#endif
        -: 1551:
        4: 1552:		fprintf( file, "\t%d", rule_set[i] );
call    0 returned 4
        -: 1553:		}
        -: 1554:
        4: 1555:	putc( '\n', file );
call    0 returned 4
        4: 1556:	}
        -: 1557:
        -: 1558:
        -: 1559:/* dump_transitions - list the transitions associated with a DFA state
        -: 1560: *
        -: 1561: * synopsis
        -: 1562: *     dump_transitions( FILE *file, int state[numecs] );
        -: 1563: *
        -: 1564: * Goes through the set of out-transitions and lists them in human-readable
        -: 1565: * form (i.e., not as equivalence classes); also lists jam transitions
        -: 1566: * (i.e., all those which are not out-transitions, plus EOF).  The dump
        -: 1567: * is done to the given file.
        -: 1568: */
        -: 1569:
function dump_transitions called 4 returned 100% blocks executed 100%
        4: 1570:void dump_transitions( file, state )
        -: 1571:FILE *file;
        -: 1572:int state[];
        -: 1573:	{
        -: 1574:	register int i, ec;
        -: 1575:	int out_char_set[CSIZE];
        -: 1576:
      900: 1577:	for ( i = 0; i < csize; ++i )
branch  0 taken 896
branch  1 taken 4 (fallthrough)
        -: 1578:		{
      896: 1579:		ec = ABS( ecgroup[i] );
      896: 1580:		out_char_set[i] = state[ec];
        -: 1581:		}
        -: 1582:
        4: 1583:	fprintf( file, _( " out-transitions: " ) );
call    0 returned 4
        -: 1584:
        4: 1585:	list_character_set( file, out_char_set );
call    0 returned 4
        -: 1586:
        -: 1587:	/* now invert the members of the set to get the jam transitions */
      900: 1588:	for ( i = 0; i < csize; ++i )
branch  0 taken 896
branch  1 taken 4 (fallthrough)
      896: 1589:		out_char_set[i] = ! out_char_set[i];
        -: 1590:
        4: 1591:	fprintf( file, _( "\n jam-transitions: EOF " ) );
call    0 returned 4
        -: 1592:
        4: 1593:	list_character_set( file, out_char_set );
call    0 returned 4
        -: 1594:
        4: 1595:	putc( '\n', file );
call    0 returned 4
        4: 1596:	}
        -: 1597:
        -: 1598:
        -: 1599:/* epsclosure - construct the epsilon closure of a set of ndfa states
        -: 1600: *
        -: 1601: * synopsis
        -: 1602: *    int *epsclosure( int t[num_states], int *numstates_addr,
        -: 1603: *			int accset[num_rules+1], int *nacc_addr,
        -: 1604: *			int *hashval_addr );
        -: 1605: *
        -: 1606: * NOTES
        -: 1607: *  The epsilon closure is the set of all states reachable by an arbitrary
        -: 1608: *  number of epsilon transitions, which themselves do not have epsilon
        -: 1609: *  transitions going out, unioned with the set of states which have non-null
        -: 1610: *  accepting numbers.  t is an array of size numstates of nfa state numbers.
        -: 1611: *  Upon return, t holds the epsilon closure and *numstates_addr is updated.
        -: 1612: *  accset holds a list of the accepting numbers, and the size of accset is
        -: 1613: *  given by *nacc_addr.  t may be subjected to reallocation if it is not
        -: 1614: *  large enough to hold the epsilon closure.
        -: 1615: *
        -: 1616: *  hashval is the hash value for the dfa corresponding to the state set.
        -: 1617: */
        -: 1618:
function epsclosure called 26774 returned 100% blocks executed 75%
    26774: 1619:int *epsclosure( t, ns_addr, accset, nacc_addr, hv_addr )
        -: 1620:int *t, *ns_addr, accset[], *nacc_addr, *hv_addr;
        -: 1621:	{
        -: 1622:	register int stkpos, ns, tsp;
    26774: 1623:	int numstates = *ns_addr, nacc, hashval, transsym, nfaccnum;
        -: 1624:	int stkend, nstate;
        -: 1625:	static int did_stk_init = false, *stk; 
        -: 1626:
        -: 1627:#define MARK_STATE(state) \
        -: 1628:trans1[state] = trans1[state] - MARKER_DIFFERENCE;
        -: 1629:
        -: 1630:#define IS_MARKED(state) (trans1[state] < 0)
        -: 1631:
        -: 1632:#define UNMARK_STATE(state) \
        -: 1633:trans1[state] = trans1[state] + MARKER_DIFFERENCE;
        -: 1634:
        -: 1635:#define CHECK_ACCEPT(state) \
        -: 1636:{ \
        -: 1637:nfaccnum = accptnum[state]; \
        -: 1638:if ( nfaccnum != NIL ) \
        -: 1639:accset[++nacc] = nfaccnum; \
        -: 1640:}
        -: 1641:
        -: 1642:#define DO_REALLOCATION \
        -: 1643:{ \
        -: 1644:current_max_dfa_size += MAX_DFA_SIZE_INCREMENT; \
        -: 1645:++num_reallocs; \
        -: 1646:t = reallocate_integer_array( t, current_max_dfa_size ); \
        -: 1647:stk = reallocate_integer_array( stk, current_max_dfa_size ); \
        -: 1648:} \
        -: 1649:
        -: 1650:#define PUT_ON_STACK(state) \
        -: 1651:{ \
        -: 1652:if ( ++stkend >= current_max_dfa_size ) \
        -: 1653:DO_REALLOCATION \
        -: 1654:stk[stkend] = state; \
        -: 1655:MARK_STATE(state) \
        -: 1656:}
        -: 1657:
        -: 1658:#define ADD_STATE(state) \
        -: 1659:{ \
        -: 1660:if ( ++numstates >= current_max_dfa_size ) \
        -: 1661:DO_REALLOCATION \
        -: 1662:t[numstates] = state; \
        -: 1663:hashval += state; \
        -: 1664:}
        -: 1665:
        -: 1666:#define STACK_STATE(state) \
        -: 1667:{ \
        -: 1668:PUT_ON_STACK(state) \
        -: 1669:CHECK_ACCEPT(state) \
        -: 1670:if ( nfaccnum != NIL || transchar[state] != SYM_EPSILON ) \
        -: 1671:ADD_STATE(state) \
        -: 1672:}
        -: 1673:
        -: 1674:
    26774: 1675:	if ( ! did_stk_init )
branch  0 taken 543 (fallthrough)
branch  1 taken 26231
        -: 1676:		{
      543: 1677:		stk = allocate_integer_array( current_max_dfa_size );
call    0 returned 543
      543: 1678:		did_stk_init = true;
        -: 1679:		}
        -: 1680:
    26774: 1681:	nacc = stkend = hashval = 0;
        -: 1682:
    83883: 1683:	for ( nstate = 1; nstate <= numstates; ++nstate )
branch  0 taken 57109
branch  1 taken 26774 (fallthrough)
        -: 1684:		{
    57109: 1685:		ns = t[nstate];
        -: 1686:
        -: 1687:		/* The state could be marked if we've already pushed it onto
        -: 1688:		 * the stack.
        -: 1689:		 */
    57109: 1690:		if ( ! IS_MARKED(ns) )
branch  0 taken 57109 (fallthrough)
branch  1 taken 0
        -: 1691:			{
   57109*: 1692:			PUT_ON_STACK(ns)
branch  0 taken 0 (fallthrough)
branch  1 taken 57109
call    2 never executed
call    3 never executed
    57109: 1693:			CHECK_ACCEPT(ns)
branch  0 taken 31638 (fallthrough)
branch  1 taken 25471
    57109: 1694:			hashval += ns;
        -: 1695:			}
        -: 1696:		}
        -: 1697:
   151870: 1698:	for ( stkpos = 1; stkpos <= stkend; ++stkpos )
branch  0 taken 125096
branch  1 taken 26774 (fallthrough)
        -: 1699:		{
   125096: 1700:		ns = stk[stkpos];
   125096: 1701:		transsym = transchar[ns];
        -: 1702:
   125096: 1703:		if ( transsym == SYM_EPSILON )
branch  0 taken 77165 (fallthrough)
branch  1 taken 47931
        -: 1704:			{
    77165: 1705:			tsp = trans1[ns] + MARKER_DIFFERENCE;
        -: 1706:
    77165: 1707:			if ( tsp != NO_TRANSITION )
branch  0 taken 42528 (fallthrough)
branch  1 taken 34637
        -: 1708:				{
    42528: 1709:				if ( ! IS_MARKED(tsp) )
branch  0 taken 42528 (fallthrough)
branch  1 taken 0
   42528*: 1710:					STACK_STATE(tsp)
branch  0 taken 1 (fallthrough)
branch  1 taken 42527
call    2 returned 1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 42528
branch  6 taken 42528 (fallthrough)
branch  7 taken 0
branch  8 taken 31562 (fallthrough)
branch  9 taken 10966
branch 10 taken 0 (fallthrough)
branch 11 taken 31562
call   12 never executed
call   13 never executed
        -: 1711:
    42528: 1712:				tsp = trans2[ns];
        -: 1713:
    42528: 1714:				if ( tsp != NO_TRANSITION && ! IS_MARKED(tsp) )
branch  0 taken 25460 (fallthrough)
branch  1 taken 17068
branch  2 taken 25459 (fallthrough)
branch  3 taken 1
   25459*: 1715:					STACK_STATE(tsp)
branch  0 taken 0 (fallthrough)
branch  1 taken 25459
call    2 never executed
call    3 never executed
branch  4 taken 12895 (fallthrough)
branch  5 taken 12564
branch  6 taken 12564 (fallthrough)
branch  7 taken 12895
branch  8 taken 7016 (fallthrough)
branch  9 taken 5548
branch 10 taken 0 (fallthrough)
branch 11 taken 19911
call   12 never executed
call   13 never executed
        -: 1716:				}
        -: 1717:			}
        -: 1718:		}
        -: 1719:
        -: 1720:	/* Clear out "visit" markers. */
        -: 1721:
   151870: 1722:	for ( stkpos = 1; stkpos <= stkend; ++stkpos )
branch  0 taken 125096
branch  1 taken 26774 (fallthrough)
        -: 1723:		{
   125096: 1724:		if ( IS_MARKED(stk[stkpos]) )
branch  0 taken 125096 (fallthrough)
branch  1 taken 0
   125096: 1725:			UNMARK_STATE(stk[stkpos])
        -: 1726:		else
    #####: 1727:			flexfatal(
call    0 never executed
        -: 1728:			_( "consistency check failed in epsclosure()" ) );
        -: 1729:		}
        -: 1730:
    26774: 1731:	*ns_addr = numstates;
    26774: 1732:	*hv_addr = hashval;
    26774: 1733:	*nacc_addr = nacc;
        -: 1734:
    26774: 1735:	return t;
        -: 1736:	}
        -: 1737:
        -: 1738:
        -: 1739:/* increase_max_dfas - increase the maximum number of DFAs */
        -: 1740:
function increase_max_dfas called 1 returned 100% blocks executed 82%
        1: 1741:void increase_max_dfas()
        -: 1742:	{
        1: 1743:	current_max_dfas += MAX_DFAS_INCREMENT;
        -: 1744:
        1: 1745:	++num_reallocs;
        -: 1746:
        1: 1747:	base = reallocate_integer_array( base, current_max_dfas );
call    0 returned 1
        1: 1748:	def = reallocate_integer_array( def, current_max_dfas );
call    0 returned 1
        1: 1749:	dfasiz = reallocate_integer_array( dfasiz, current_max_dfas );
call    0 returned 1
        1: 1750:	accsiz = reallocate_integer_array( accsiz, current_max_dfas );
call    0 returned 1
        1: 1751:	dhash = reallocate_integer_array( dhash, current_max_dfas );
call    0 returned 1
        1: 1752:	dss = reallocate_int_ptr_array( dss, current_max_dfas );
call    0 returned 1
        1: 1753:	dfaacc = reallocate_dfaacc_union( dfaacc, current_max_dfas );
call    0 returned 1
        -: 1754:
        1: 1755:	if ( nultrans )
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1756:		nultrans =
    #####: 1757:			reallocate_integer_array( nultrans, current_max_dfas );
call    0 never executed
        1: 1758:	}
        -: 1759:
        -: 1760:
        -: 1761:/* ntod - convert an ndfa to a dfa
        -: 1762: *
        -: 1763: * Creates the dfa corresponding to the ndfa we've constructed.  The
        -: 1764: * dfa starts out in state #1.
        -: 1765: */
        -: 1766:
function ntod called 543 returned 100% blocks executed 88%
      543: 1767:void ntod()
        -: 1768:	{
        -: 1769:	int *accset, ds, nacc, newds;
        -: 1770:	int sym, hashval, numstates, dsize;
        -: 1771:	int num_full_table_rows;	/* used only for -f */
        -: 1772:	int *nset, *dset;
        -: 1773:	int targptr, totaltrans, i, comstate, comfreq, targ;
        -: 1774:	int symlist[CSIZE + 1];
        -: 1775:	int num_start_states;
        -: 1776:	int todo_head, todo_next;
        -: 1777:
        -: 1778:	/* Note that the following are indexed by *equivalence classes*
        -: 1779:	 * and not by characters.  Since equivalence classes are indexed
        -: 1780:	 * beginning with 1, even if the scanner accepts NUL's, this
        -: 1781:	 * means that (since every character is potentially in its own
        -: 1782:	 * equivalence class) these arrays must have room for indices
        -: 1783:	 * from 1 to CSIZE, so their size must be CSIZE + 1.
        -: 1784:	 */
        -: 1785:	int duplist[CSIZE + 1], state[CSIZE + 1];
        -: 1786:	int targfreq[CSIZE + 1], targstate[CSIZE + 1];
        -: 1787:
      543: 1788:	accset = allocate_integer_array( num_rules + 1 );
call    0 returned 543
      543: 1789:	nset = allocate_integer_array( current_max_dfa_size );
call    0 returned 543
        -: 1790:
        -: 1791:	/* The "todo" queue is represented by the head, which is the DFA
        -: 1792:	 * state currently being processed, and the "next", which is the
        -: 1793:	 * next DFA state number available (not in use).  We depend on the
        -: 1794:	 * fact that snstods() returns DFA's \in increasing order/, and thus
        -: 1795:	 * need only know the bounds of the dfas to be processed.
        -: 1796:	 */
      543: 1797:	todo_head = todo_next = 0;
        -: 1798:
   130366: 1799:	for ( i = 0; i <= csize; ++i )
branch  0 taken 129823
branch  1 taken 543 (fallthrough)
        -: 1800:		{
   129823: 1801:		duplist[i] = NIL;
   129823: 1802:		symlist[i] = false;
        -: 1803:		}
        -: 1804:
     4903: 1805:	for ( i = 0; i <= num_rules; ++i )
branch  0 taken 4360
branch  1 taken 543 (fallthrough)
     4360: 1806:		accset[i] = NIL;
        -: 1807:
      543: 1808:	if ( trace )
branch  0 taken 14 (fallthrough)
branch  1 taken 529
        -: 1809:		{
       14: 1810:		dumpnfa( scset[1] );
call    0 returned 14
       14: 1811:		fputs( _( "\n\nDFA Dump:\n\n" ), err );
call    0 returned 14
        -: 1812:		}
        -: 1813:
      543: 1814:	inittbl();
call    0 returned 543
        -: 1815:
        -: 1816:	/* Check to see whether we should build a separate table for
        -: 1817:	 * transitions on NUL characters.  We don't do this for full-speed
        -: 1818:	 * (-F) scanners, since for them we don't have a simple state
        -: 1819:	 * number lying around with which to index the table.  We also
        -: 1820:	 * don't bother doing it for scanners unless (1) NUL is in its own
        -: 1821:	 * equivalence class (indicated by a positive value of
        -: 1822:	 * ecgroup[NUL]), (2) NUL's equivalence class is the last
        -: 1823:	 * equivalence class, and (3) the number of equivalence classes is
        -: 1824:	 * the same as the number of characters.  This latter case comes
        -: 1825:	 * about when useecs is false or when it's true but every character
        -: 1826:	 * still manages to land in its own class (unlikely, but it's
        -: 1827:	 * cheap to check for).  If all these things are true then the
        -: 1828:	 * character code needed to represent NUL's equivalence class for
        -: 1829:	 * indexing the tables is going to take one more bit than the
        -: 1830:	 * number of characters, and therefore we won't be assured of
        -: 1831:	 * being able to fit it into a YY_CHAR variable.  This rules out
        -: 1832:	 * storing the transitions in a compressed table, since the code
        -: 1833:	 * for interpreting them uses a YY_CHAR variable (perhaps it
        -: 1834:	 * should just use an integer, though; this is worth pondering ...
        -: 1835:	 * ###).
        -: 1836:	 *
        -: 1837:	 * Finally, for full tables, we want the number of entries in the
        -: 1838:	 * table to be a power of two so the array references go fast (it
        -: 1839:	 * will just take a shift to compute the major index).  If
        -: 1840:	 * encoding NUL's transitions in the table will spoil this, we
        -: 1841:	 * give it its own table (note that this will be the case if we're
        -: 1842:	 * not using equivalence classes).
        -: 1843:	 */
        -: 1844:
        -: 1845:	/* Note that the test for ecgroup[0] == numecs below accomplishes
        -: 1846:	 * both (1) and (2) above
        -: 1847:	 */
      543: 1848:	if ( ! fullspd && ecgroup[0] == numecs )
branch  0 taken 451 (fallthrough)
branch  1 taken 92
branch  2 taken 197 (fallthrough)
branch  3 taken 254
        -: 1849:		{
        -: 1850:		/* NUL is alone in its equivalence class, which is the
        -: 1851:		 * last one.
        -: 1852:		 */
      197: 1853:		int use_NUL_table = (numecs == csize);
        -: 1854:
      197: 1855:		if ( fulltbl && ! use_NUL_table )
branch  0 taken 22 (fallthrough)
branch  1 taken 175
branch  2 taken 0 (fallthrough)
branch  3 taken 22
        -: 1856:			{
        -: 1857:			/* We still may want to use the table if numecs
        -: 1858:			 * is a power of 2.
        -: 1859:			 */
        -: 1860:			int power_of_two;
        -: 1861:
    #####: 1862:			for ( power_of_two = 1; power_of_two <= csize;
branch  0 never executed
branch  1 never executed
    #####: 1863:			      power_of_two *= 2 )
    #####: 1864:				if ( numecs == power_of_two )
branch  0 never executed
branch  1 never executed
        -: 1865:					{
    #####: 1866:					use_NUL_table = true;
    #####: 1867:					break;
        -: 1868:					}
        -: 1869:			}
        -: 1870:
      197: 1871:		if ( use_NUL_table )
branch  0 taken 195 (fallthrough)
branch  1 taken 2
      195: 1872:			nultrans = allocate_integer_array( current_max_dfas );
call    0 returned 195
        -: 1873:
        -: 1874:		/* From now on, nultrans != nil indicates that we're
        -: 1875:		 * saving null transitions for later, separate encoding.
        -: 1876:		 */
        -: 1877:		}
        -: 1878:
        -: 1879:
      543: 1880:	if ( fullspd )
branch  0 taken 92 (fallthrough)
branch  1 taken 451
        -: 1881:		{
     7416: 1882:		for ( i = 0; i <= numecs; ++i )
branch  0 taken 7324
branch  1 taken 92 (fallthrough)
     7324: 1883:			state[i] = 0;
        -: 1884:
       92: 1885:		place_state( state, 0, 0 );
call    0 returned 92
       92: 1886:		dfaacc[0].dfaacc_state = 0;
        -: 1887:		}
        -: 1888:
      451: 1889:	else if ( fulltbl )
branch  0 taken 23 (fallthrough)
branch  1 taken 428
        -: 1890:		{
       23: 1891:		if ( nultrans )
branch  0 taken 22 (fallthrough)
branch  1 taken 1
        -: 1892:			/* We won't be including NUL's transitions in the
        -: 1893:			 * table, so build it for entries from 0 .. numecs - 1.
        -: 1894:			 */
       22: 1895:			num_full_table_rows = numecs;
        -: 1896:
        -: 1897:		else
        -: 1898:			/* Take into account the fact that we'll be including
        -: 1899:			 * the NUL entries in the transition table.  Build it
        -: 1900:			 * from 0 .. numecs.
        -: 1901:			 */
        1: 1902:			num_full_table_rows = numecs + 1;
        -: 1903:
        -: 1904:		/* Unless -Ca, declare it "short" because it's a real
        -: 1905:		 * long-shot that that won't be large enough.
        -: 1906:		 */
      23*: 1907:		out_str_dec( "static yyconst %s yy_nxt[][%d] =\n    {\n",
call    0 returned 23
        -: 1908:			/* '}' so vi doesn't get too confused */
       23: 1909:			long_align ? "long" : "short", num_full_table_rows );
branch  0 taken 0 (fallthrough)
branch  1 taken 23
        -: 1910:
       23: 1911:		outn( "    {" );
call    0 returned 23
        -: 1912:
        -: 1913:		/* Generate 0 entries for state #0. */
     2851: 1914:		for ( i = 0; i < num_full_table_rows; ++i )
branch  0 taken 2828
branch  1 taken 23 (fallthrough)
     2828: 1915:			mk2data( 0 );
call    0 returned 2828
        -: 1916:
       23: 1917:		dataflush();
call    0 returned 23
       23: 1918:		outn( "    },\n" );
call    0 returned 23
        -: 1919:		}
        -: 1920:
        -: 1921:	/* Create the first states. */
        -: 1922:
      543: 1923:	num_start_states = lastsc * 2;
        -: 1924:
     1667: 1925:	for ( i = 1; i <= num_start_states; ++i )
branch  0 taken 1124
branch  1 taken 543 (fallthrough)
        -: 1926:		{
     1124: 1927:		numstates = 1;
        -: 1928:
        -: 1929:		/* For each start condition, make one state for the case when
        -: 1930:		 * we're at the beginning of the line (the '^' operator) and
        -: 1931:		 * one for the case when we're not.
        -: 1932:		 */
     1124: 1933:		if ( i % 2 == 1 )
branch  0 taken 562 (fallthrough)
branch  1 taken 562
      562: 1934:			nset[numstates] = scset[(i / 2) + 1];
        -: 1935:		else
      562: 1936:			nset[numstates] =
      562: 1937:				mkbranch( scbol[i / 2], scset[i / 2] );
call    0 returned 562
        -: 1938:
     1124: 1939:		nset = epsclosure( nset, &numstates, accset, &nacc, &hashval );
call    0 returned 1124
        -: 1940:
     1124: 1941:		if ( snstods( nset, numstates, accset, nacc, hashval, &ds ) )
call    0 returned 1124
branch  1 taken 1124 (fallthrough)
branch  2 taken 0
        -: 1942:			{
     1124: 1943:			numas += nacc;
     1124: 1944:			totnst += numstates;
     1124: 1945:			++todo_next;
        -: 1946:
     1124: 1947:			if ( variable_trailing_context_rules && nacc > 0 )
branch  0 taken 66 (fallthrough)
branch  1 taken 1058
branch  2 taken 0 (fallthrough)
branch  3 taken 66
    #####: 1948:				check_trailing_context( nset, numstates,
call    0 never executed
        -: 1949:							accset, nacc );
        -: 1950:			}
        -: 1951:		}
        -: 1952:
      543: 1953:	if ( ! fullspd )
branch  0 taken 451 (fallthrough)
branch  1 taken 92
        -: 1954:		{
      451: 1955:		if ( ! snstods( nset, 0, accset, 0, 0, &end_of_buffer_state ) )
call    0 returned 451
branch  1 taken 0 (fallthrough)
branch  2 taken 451
    #####: 1956:			flexfatal(
call    0 never executed
        -: 1957:			_( "could not create unique end-of-buffer state" ) );
        -: 1958:
      451: 1959:		++numas;
      451: 1960:		++num_start_states;
      451: 1961:		++todo_next;
        -: 1962:		}
        -: 1963:
    14521: 1964:	while ( todo_head < todo_next )
branch  0 taken 13978
branch  1 taken 543 (fallthrough)
        -: 1965:		{
    13978: 1966:		targptr = 0;
    13978: 1967:		totaltrans = 0;
        -: 1968:
  1490169: 1969:		for ( i = 1; i <= numecs; ++i )
branch  0 taken 1476191
branch  1 taken 13978 (fallthrough)
  1476191: 1970:			state[i] = 0;
        -: 1971:
    13978: 1972:		ds = ++todo_head;
        -: 1973:
    13978: 1974:		dset = dss[ds];
    13978: 1975:		dsize = dfasiz[ds];
        -: 1976:
    13978: 1977:		if ( trace )
branch  0 taken 1396 (fallthrough)
branch  1 taken 12582
     1396: 1978:			fprintf( err, _( "state # %d:\n" ), ds );
call    0 returned 1396
        -: 1979:
    13978: 1980:		sympartition( dset, dsize, symlist, duplist );
call    0 returned 13978
        -: 1981:
  1490169: 1982:		for ( sym = 1; sym <= numecs; ++sym )
branch  0 taken 1476191
branch  1 taken 13978 (fallthrough)
        -: 1983:			{
  1476191: 1984:			if ( symlist[sym] )
branch  0 taken 286139 (fallthrough)
branch  1 taken 1190052
        -: 1985:				{
   286139: 1986:				symlist[sym] = 0;
        -: 1987:
   286139: 1988:				if ( duplist[sym] == NIL )
branch  0 taken 25650 (fallthrough)
branch  1 taken 260489
        -: 1989:					{
        -: 1990:					/* Symbol has unique out-transitions. */
    25650: 1991:					numstates = symfollowset( dset, dsize,
call    0 returned 25650
        -: 1992:								sym, nset );
    25650: 1993:					nset = epsclosure( nset, &numstates,
call    0 returned 25650
        -: 1994:						accset, &nacc, &hashval );
        -: 1995:
    25650: 1996:					if ( snstods( nset, numstates, accset,
call    0 returned 25650
branch  1 taken 12403 (fallthrough)
branch  2 taken 13247
        -: 1997:						nacc, hashval, &newds ) )
        -: 1998:						{
    12403: 1999:						totnst = totnst + numstates;
    12403: 2000:						++todo_next;
    12403: 2001:						numas += nacc;
        -: 2002:
    12403: 2003:						if (
    12403: 2004:					variable_trailing_context_rules &&
branch  0 taken 696 (fallthrough)
branch  1 taken 11707
      696: 2005:							nacc > 0 )
branch  0 taken 446 (fallthrough)
branch  1 taken 250
      446: 2006:							check_trailing_context(
call    0 returned 446
        -: 2007:								nset, numstates,
        -: 2008:								accset, nacc );
        -: 2009:						}
        -: 2010:
    25650: 2011:					state[sym] = newds;
        -: 2012:
    25650: 2013:					if ( trace )
branch  0 taken 4878 (fallthrough)
branch  1 taken 20772
     4878: 2014:						fprintf( err, "\t%d\t%d\n",
call    0 returned 4878
        -: 2015:							sym, newds );
        -: 2016:
    25650: 2017:					targfreq[++targptr] = 1;
    25650: 2018:					targstate[targptr] = newds;
    25650: 2019:					++numuniq;
        -: 2020:					}
        -: 2021:
        -: 2022:				else
        -: 2023:					{
        -: 2024:					/* sym's equivalence class has the same
        -: 2025:					 * transitions as duplist(sym)'s
        -: 2026:					 * equivalence class.
        -: 2027:					 */
   260489: 2028:					targ = state[duplist[sym]];
   260489: 2029:					state[sym] = targ;
        -: 2030:
   260489: 2031:					if ( trace )
branch  0 taken 57113 (fallthrough)
branch  1 taken 203376
    57113: 2032:						fprintf( err, "\t%d\t%d\n",
call    0 returned 57113
        -: 2033:							sym, targ );
        -: 2034:
        -: 2035:					/* Update frequency count for
        -: 2036:					 * destination state.
        -: 2037:					 */
        -: 2038:
   260489: 2039:					i = 0;
   355053: 2040:					while ( targstate[++i] != targ )
branch  0 taken 94564
branch  1 taken 260489 (fallthrough)
        -: 2041:						;
        -: 2042:
   260489: 2043:					++targfreq[i];
   260489: 2044:					++numdup;
        -: 2045:					}
        -: 2046:
   286139: 2047:				++totaltrans;
   286139: 2048:				duplist[sym] = NIL;
        -: 2049:				}
        -: 2050:			}
        -: 2051:
    13978: 2052:		if ( caseins && ! useecs )
branch  0 taken 106 (fallthrough)
branch  1 taken 13872
branch  2 taken 0 (fallthrough)
branch  3 taken 106
        -: 2053:			{
        -: 2054:			register int j;
        -: 2055:
    #####: 2056:			for ( i = 'A', j = 'a'; i <= 'Z'; ++i, ++j )
branch  0 never executed
branch  1 never executed
        -: 2057:				{
    #####: 2058:				if ( state[i] == 0 && state[j] != 0 )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2059:					/* We're adding a transition. */
    #####: 2060:					++totaltrans;
        -: 2061:
    #####: 2062:				else if ( state[i] != 0 && state[j] == 0 )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2063:					/* We're taking away a transition. */
    #####: 2064:					--totaltrans;
        -: 2065:
    #####: 2066:				state[i] = state[j];
        -: 2067:				}
        -: 2068:			}
        -: 2069:
    13978: 2070:		numsnpairs += totaltrans;
        -: 2071:
    13978: 2072:		if ( ds > num_start_states )
branch  0 taken 12403 (fallthrough)
branch  1 taken 1575
    12403: 2073:			check_for_backing_up( ds, state );
call    0 returned 12403
        -: 2074:
    13978: 2075:		if ( nultrans )
branch  0 taken 4704 (fallthrough)
branch  1 taken 9274
        -: 2076:			{
     4704: 2077:			nultrans[ds] = state[NUL_ec];
     4704: 2078:			state[NUL_ec] = 0;	/* remove transition */
        -: 2079:			}
        -: 2080:
    13978: 2081:		if ( fulltbl )
branch  0 taken 542 (fallthrough)
branch  1 taken 13436
        -: 2082:			{
      542: 2083:			outn( "    {" );
call    0 returned 542
        -: 2084:
        -: 2085:			/* Supply array's 0-element. */
      542: 2086:			if ( ds == end_of_buffer_state )
branch  0 taken 23 (fallthrough)
branch  1 taken 519
       23: 2087:				mk2data( -end_of_buffer_state );
call    0 returned 23
        -: 2088:			else
      519: 2089:				mk2data( end_of_buffer_state );
call    0 returned 519
        -: 2090:
    67288: 2091:			for ( i = 1; i < num_full_table_rows; ++i )
branch  0 taken 66746
branch  1 taken 542 (fallthrough)
        -: 2092:				/* Jams are marked by negative of state
        -: 2093:				 * number.
        -: 2094:				 */
    66746: 2095:				mk2data( state[i] ? state[i] : -ds );
branch  0 taken 11603 (fallthrough)
branch  1 taken 55143
call    2 returned 66746
        -: 2096:
      542: 2097:			dataflush();
call    0 returned 542
      542: 2098:			outn( "    },\n" );
call    0 returned 542
        -: 2099:			}
        -: 2100:
    13436: 2101:		else if ( fullspd )
branch  0 taken 2170 (fallthrough)
branch  1 taken 11266
     2170: 2102:			place_state( state, ds, totaltrans );
call    0 returned 2170
        -: 2103:
    11266: 2104:		else if ( ds == end_of_buffer_state )
branch  0 taken 428 (fallthrough)
branch  1 taken 10838
        -: 2105:			/* Special case this state to make sure it does what
        -: 2106:			 * it's supposed to, i.e., jam on end-of-buffer.
        -: 2107:			 */
      428: 2108:			stack1( ds, 0, 0, JAMSTATE );
call    0 returned 428
        -: 2109:
        -: 2110:		else /* normal, compressed state */
        -: 2111:			{
        -: 2112:			/* Determine which destination state is the most
        -: 2113:			 * common, and how many transitions to it there are.
        -: 2114:			 */
        -: 2115:
    10838: 2116:			comfreq = 0;
    10838: 2117:			comstate = 0;
        -: 2118:
    31916: 2119:			for ( i = 1; i <= targptr; ++i )
branch  0 taken 21078
branch  1 taken 10838 (fallthrough)
    21078: 2120:				if ( targfreq[i] > comfreq )
branch  0 taken 9139 (fallthrough)
branch  1 taken 11939
        -: 2121:					{
     9139: 2122:					comfreq = targfreq[i];
     9139: 2123:					comstate = targstate[i];
        -: 2124:					}
        -: 2125:
    10838: 2126:			bldtbl( state, ds, totaltrans, comstate, comfreq );
call    0 returned 10838
        -: 2127:			}
        -: 2128:		}
        -: 2129:
      543: 2130:	if ( fulltbl )
branch  0 taken 23 (fallthrough)
branch  1 taken 520
       23: 2131:		dataend();
call    0 returned 23
        -: 2132:
      520: 2133:	else if ( ! fullspd )
branch  0 taken 428 (fallthrough)
branch  1 taken 92
        -: 2134:		{
      428: 2135:		cmptmps();  /* create compressed template entries */
call    0 returned 428
        -: 2136:
        -: 2137:		/* Create tables for all the states with only one
        -: 2138:		 * out-transition.
        -: 2139:		 */
     6135: 2140:		while ( onesp > 0 )
branch  0 taken 5707
branch  1 taken 428 (fallthrough)
        -: 2141:			{
     5707: 2142:			mk1tbl( onestate[onesp], onesym[onesp], onenext[onesp],
call    0 returned 5707
        -: 2143:			onedef[onesp] );
     5707: 2144:			--onesp;
        -: 2145:			}
        -: 2146:
      428: 2147:		mkdeftbl();
call    0 returned 428
        -: 2148:		}
        -: 2149:
      543: 2150:	flex_free( (void *) accset );
call    0 returned 543
      543: 2151:	flex_free( (void *) nset );
call    0 returned 543
      543: 2152:	}
        -: 2153:
        -: 2154:
        -: 2155:/* snstods - converts a set of ndfa states into a dfa state
        -: 2156: *
        -: 2157: * synopsis
        -: 2158: *    is_new_state = snstods( int sns[numstates], int numstates,
        -: 2159: *				int accset[num_rules+1], int nacc,
        -: 2160: *				int hashval, int *newds_addr );
        -: 2161: *
        -: 2162: * On return, the dfa state number is in newds.
        -: 2163: */
        -: 2164:
function snstods called 27225 returned 100% blocks executed 100%
    27225: 2165:int snstods( sns, numstates, accset, nacc, hashval, newds_addr )
        -: 2166:int sns[], numstates, accset[], nacc, hashval, *newds_addr;
        -: 2167:	{
    27225: 2168:	int didsort = 0;
        -: 2169:	register int i, j;
        -: 2170:	int newds, *oldsns;
        -: 2171:
  1249498: 2172:	for ( i = 1; i <= lastdfa; ++i )
branch  0 taken 1235520
branch  1 taken 13978 (fallthrough)
  1235520: 2173:		if ( hashval == dhash[i] )
branch  0 taken 13393 (fallthrough)
branch  1 taken 1222127
        -: 2174:			{
    13393: 2175:			if ( numstates == dfasiz[i] )
branch  0 taken 13251 (fallthrough)
branch  1 taken 142
        -: 2176:				{
    13251: 2177:				oldsns = dss[i];
        -: 2178:
    13251: 2179:				if ( ! didsort )
branch  0 taken 13251 (fallthrough)
branch  1 taken 0
        -: 2180:					{
        -: 2181:					/* We sort the states in sns so we
        -: 2182:					 * can compare it to oldsns quickly.
        -: 2183:					 * We use bubble because there probably
        -: 2184:					 * aren't very many states.
        -: 2185:					 */
    13251: 2186:					bubble( sns, numstates );
call    0 returned 13251
    13251: 2187:					didsort = 1;
        -: 2188:					}
        -: 2189:
    64633: 2190:				for ( j = 1; j <= numstates; ++j )
branch  0 taken 51386
branch  1 taken 13247 (fallthrough)
    51386: 2191:					if ( sns[j] != oldsns[j] )
branch  0 taken 4 (fallthrough)
branch  1 taken 51382
        4: 2192:						break;
        -: 2193:
    13251: 2194:				if ( j > numstates )
branch  0 taken 13247 (fallthrough)
branch  1 taken 4
        -: 2195:					{
    13247: 2196:					++dfaeql;
    13247: 2197:					*newds_addr = i;
    13247: 2198:					return 0;
        -: 2199:					}
        -: 2200:
        4: 2201:				++hshcol;
        -: 2202:				}
        -: 2203:
        -: 2204:			else
      142: 2205:				++hshsave;
        -: 2206:			}
        -: 2207:
        -: 2208:	/* Make a new dfa. */
        -: 2209:
    13978: 2210:	if ( ++lastdfa >= current_max_dfas )
branch  0 taken 1 (fallthrough)
branch  1 taken 13977
        1: 2211:		increase_max_dfas();
call    0 returned 1
        -: 2212:
    13978: 2213:	newds = lastdfa;
        -: 2214:
    13978: 2215:	dss[newds] = allocate_integer_array( numstates + 1 );
call    0 returned 13978
        -: 2216:
        -: 2217:	/* If we haven't already sorted the states in sns, we do so now,
        -: 2218:	 * so that future comparisons with it can be made quickly.
        -: 2219:	 */
        -: 2220:
    13978: 2221:	if ( ! didsort )
branch  0 taken 13974 (fallthrough)
branch  1 taken 4
    13974: 2222:		bubble( sns, numstates );
call    0 returned 13974
        -: 2223:
    71196: 2224:	for ( i = 1; i <= numstates; ++i )
branch  0 taken 57218
branch  1 taken 13978 (fallthrough)
    57218: 2225:		dss[newds][i] = sns[i];
        -: 2226:
    13978: 2227:	dfasiz[newds] = numstates;
    13978: 2228:	dhash[newds] = hashval;
        -: 2229:
    13978: 2230:	if ( nacc == 0 )
branch  0 taken 3635 (fallthrough)
branch  1 taken 10343
        -: 2231:		{
     3635: 2232:		if ( reject )
branch  0 taken 1138 (fallthrough)
branch  1 taken 2497
     1138: 2233:			dfaacc[newds].dfaacc_set = (int *) 0;
        -: 2234:		else
     2497: 2235:			dfaacc[newds].dfaacc_state = 0;
        -: 2236:
     3635: 2237:		accsiz[newds] = 0;
        -: 2238:		}
        -: 2239:
    10343: 2240:	else if ( reject )
branch  0 taken 4041 (fallthrough)
branch  1 taken 6302
        -: 2241:		{
        -: 2242:		/* We sort the accepting set in increasing order so the
        -: 2243:		 * disambiguating rule that the first rule listed is considered
        -: 2244:		 * match in the event of ties will work.  We use a bubble
        -: 2245:		 * sort since the list is probably quite small.
        -: 2246:		 */
        -: 2247:
     4041: 2248:		bubble( accset, nacc );
call    0 returned 4041
        -: 2249:
     4041: 2250:		dfaacc[newds].dfaacc_set = allocate_integer_array( nacc + 1 );
call    0 returned 4041
        -: 2251:
        -: 2252:		/* Save the accepting set for later */
    14438: 2253:		for ( i = 1; i <= nacc; ++i )
branch  0 taken 10397
branch  1 taken 4041 (fallthrough)
        -: 2254:			{
    10397: 2255:			dfaacc[newds].dfaacc_set[i] = accset[i];
        -: 2256:
    10397: 2257:			if ( accset[i] <= num_rules )
branch  0 taken 10331 (fallthrough)
branch  1 taken 66
        -: 2258:				/* Who knows, perhaps a REJECT can yield
        -: 2259:				 * this rule.
        -: 2260:				 */
    10331: 2261:				rule_useful[accset[i]] = true;
        -: 2262:			}
        -: 2263:
     4041: 2264:		accsiz[newds] = nacc;
        -: 2265:		}
        -: 2266:
        -: 2267:	else
        -: 2268:		{
        -: 2269:		/* Find lowest numbered rule so the disambiguating rule
        -: 2270:		 * will work.
        -: 2271:		 */
     6302: 2272:		j = num_rules + 1;
        -: 2273:
    15752: 2274:		for ( i = 1; i <= nacc; ++i )
branch  0 taken 9450
branch  1 taken 6302 (fallthrough)
     9450: 2275:			if ( accset[i] < j )
branch  0 taken 6954 (fallthrough)
branch  1 taken 2496
     6954: 2276:				j = accset[i];
        -: 2277:
     6302: 2278:		dfaacc[newds].dfaacc_state = j;
        -: 2279:
     6302: 2280:		if ( j <= num_rules )
branch  0 taken 6302 (fallthrough)
branch  1 taken 0
     6302: 2281:			rule_useful[j] = true;
        -: 2282:		}
        -: 2283:
    13978: 2284:	*newds_addr = newds;
        -: 2285:
    13978: 2286:	return 1;
        -: 2287:	}
        -: 2288:
        -: 2289:
        -: 2290:/* symfollowset - follow the symbol transitions one step
        -: 2291: *
        -: 2292: * synopsis
        -: 2293: *    numstates = symfollowset( int ds[current_max_dfa_size], int dsize,
        -: 2294: *				int transsym, int nset[current_max_dfa_size] );
        -: 2295: */
        -: 2296:
function symfollowset called 25650 returned 100% blocks executed 94%
    25650: 2297:int symfollowset( ds, dsize, transsym, nset )
        -: 2298:int ds[], dsize, transsym, nset[];
        -: 2299:	{
        -: 2300:	int ns, tsp, sym, i, j, lenccl, ch, numstates, ccllist;
        -: 2301:
    25650: 2302:	numstates = 0;
        -: 2303:
   297542: 2304:	for ( i = 1; i <= dsize; ++i )
branch  0 taken 271892
branch  1 taken 25650 (fallthrough)
        -: 2305:		{ /* for each nfa state ns in the state set of ds */
   271892: 2306:		ns = ds[i];
   271892: 2307:		sym = transchar[ns];
   271892: 2308:		tsp = trans1[ns];
        -: 2309:
   271892: 2310:		if ( sym < 0 )
branch  0 taken 66783 (fallthrough)
branch  1 taken 205109
        -: 2311:			{ /* it's a character class */
    66783: 2312:			sym = -sym;
    66783: 2313:			ccllist = cclmap[sym];
    66783: 2314:			lenccl = ccllen[sym];
        -: 2315:
    66783: 2316:			if ( cclng[sym] )
branch  0 taken 21147 (fallthrough)
branch  1 taken 45636
        -: 2317:				{
    51892: 2318:				for ( j = 0; j < lenccl; ++j )
branch  0 taken 34539
branch  1 taken 17353 (fallthrough)
        -: 2319:					{
        -: 2320:					/* Loop through negated character
        -: 2321:					 * class.
        -: 2322:					 */
    34539: 2323:					ch = ccltbl[ccllist + j];
        -: 2324:
    34539: 2325:					if ( ch == 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 34539
    #####: 2326:						ch = NUL_ec;
        -: 2327:
    34539: 2328:					if ( ch > transsym )
branch  0 taken 2336 (fallthrough)
branch  1 taken 32203
        -: 2329:						/* Transsym isn't in negated
        -: 2330:						 * ccl.
        -: 2331:						 */
     2336: 2332:						break;
        -: 2333:
    32203: 2334:					else if ( ch == transsym )
branch  0 taken 1458 (fallthrough)
branch  1 taken 30745
     1458: 2335:						/* next 2 */ goto bottom;
        -: 2336:					}
        -: 2337:
        -: 2338:				/* Didn't find transsym in ccl. */
    19689: 2339:				nset[++numstates] = tsp;
        -: 2340:				}
        -: 2341:
        -: 2342:			else
   180565: 2343:				for ( j = 0; j < lenccl; ++j )
branch  0 taken 171937
branch  1 taken 8628 (fallthrough)
        -: 2344:					{
   171937: 2345:					ch = ccltbl[ccllist + j];
        -: 2346:
   171937: 2347:					if ( ch == 0 )
branch  0 taken 6 (fallthrough)
branch  1 taken 171931
        6: 2348:						ch = NUL_ec;
        -: 2349:
   171937: 2350:					if ( ch > transsym )
branch  0 taken 17081 (fallthrough)
branch  1 taken 154856
    17081: 2351:						break;
   154856: 2352:					else if ( ch == transsym )
branch  0 taken 19927 (fallthrough)
branch  1 taken 134929
        -: 2353:						{
    19927: 2354:						nset[++numstates] = tsp;
    19927: 2355:						break;
        -: 2356:						}
        -: 2357:					}
        -: 2358:			}
        -: 2359:
   205109: 2360:		else if ( sym >= 'A' && sym <= 'Z' && caseins )
branch  0 taken 186923 (fallthrough)
branch  1 taken 18186
branch  2 taken 6091 (fallthrough)
branch  3 taken 180832
branch  4 taken 0 (fallthrough)
branch  5 taken 6091
    #####: 2361:			flexfatal(
call    0 never executed
        -: 2362:			_( "consistency check failed in symfollowset" ) );
        -: 2363:
   205109: 2364:		else if ( sym == SYM_EPSILON )
branch  0 taken 138409 (fallthrough)
branch  1 taken 66700
        -: 2365:			{ /* do nothing */
        -: 2366:			}
        -: 2367:
   138409: 2368:		else if ( ABS( ecgroup[sym] ) == transsym )
branch  0 taken 122040 (fallthrough)
branch  1 taken 16369
    16369: 2369:			nset[++numstates] = tsp;
        -: 2370:
   271892: 2371:		bottom: ;
        -: 2372:		}
        -: 2373:
    25650: 2374:	return numstates;
        -: 2375:	}
        -: 2376:
        -: 2377:
        -: 2378:/* sympartition - partition characters with same out-transitions
        -: 2379: *
        -: 2380: * synopsis
        -: 2381: *    sympartition( int ds[current_max_dfa_size], int numstates,
        -: 2382: *			int symlist[numecs], int duplist[numecs] );
        -: 2383: */
        -: 2384:
function sympartition called 13978 returned 100% blocks executed 94%
    13978: 2385:void sympartition( ds, numstates, symlist, duplist )
        -: 2386:int ds[], numstates;
        -: 2387:int symlist[], duplist[];
        -: 2388:	{
        -: 2389:	int tch, i, j, k, ns, dupfwd[CSIZE + 1], lenccl, cclp, ich;
        -: 2390:
        -: 2391:	/* Partitioning is done by creating equivalence classes for those
        -: 2392:	 * characters which have out-transitions from the given state.  Thus
        -: 2393:	 * we are really creating equivalence classes of equivalence classes.
        -: 2394:	 */
        -: 2395:
  1490169: 2396:	for ( i = 1; i <= numecs; ++i )
branch  0 taken 1476191
branch  1 taken 13978 (fallthrough)
        -: 2397:		{ /* initialize equivalence class list */
  1476191: 2398:		duplist[i] = i - 1;
  1476191: 2399:		dupfwd[i] = i + 1;
        -: 2400:		}
        -: 2401:
    13978: 2402:	duplist[1] = NIL;
    13978: 2403:	dupfwd[numecs] = NIL;
        -: 2404:
    71196: 2405:	for ( i = 1; i <= numstates; ++i )
branch  0 taken 57218
branch  1 taken 13978 (fallthrough)
        -: 2406:		{
    57218: 2407:		ns = ds[i];
    57218: 2408:		tch = transchar[ns];
        -: 2409:
    57218: 2410:		if ( tch != SYM_EPSILON )
branch  0 taken 29590 (fallthrough)
branch  1 taken 27628
        -: 2411:			{
    29590: 2412:			if ( tch < -lastccl || tch >= csize )
branch  0 taken 29590 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 29590
        -: 2413:				{
    #####: 2414:				flexfatal(
call    0 never executed
        -: 2415:		_( "bad transition character detected in sympartition()" ) );
        -: 2416:				}
        -: 2417:
    29590: 2418:			if ( tch >= 0 )
branch  0 taken 16369 (fallthrough)
branch  1 taken 13221
        -: 2419:				{ /* character transition */
    16369: 2420:				int ec = ecgroup[tch];
        -: 2421:
    16369: 2422:				mkechar( ec, dupfwd, duplist );
call    0 returned 16369
    16369: 2423:				symlist[ec] = 1;
        -: 2424:				}
        -: 2425:
        -: 2426:			else
        -: 2427:				{ /* character class */
    13221: 2428:				tch = -tch;
        -: 2429:
    13221: 2430:				lenccl = ccllen[tch];
    13221: 2431:				cclp = cclmap[tch];
    13221: 2432:				mkeccl( ccltbl + cclp, lenccl, dupfwd,
call    0 returned 13221
        -: 2433:					duplist, numecs, NUL_ec );
        -: 2434:
    13221: 2435:				if ( cclng[tch] )
branch  0 taken 3112 (fallthrough)
branch  1 taken 10109
        -: 2436:					{
     3112: 2437:					j = 0;
        -: 2438:
    11409: 2439:					for ( k = 0; k < lenccl; ++k )
branch  0 taken 8297
branch  1 taken 3112 (fallthrough)
        -: 2440:						{
     8297: 2441:						ich = ccltbl[cclp + k];
        -: 2442:
     8297: 2443:						if ( ich == 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 8297
    #####: 2444:							ich = NUL_ec;
        -: 2445:
    35771: 2446:						for ( ++j; j < ich; ++j )
branch  0 taken 27474
branch  1 taken 8297 (fallthrough)
    27474: 2447:							symlist[j] = 1;
        -: 2448:						}
        -: 2449:
   243219: 2450:					for ( ++j; j <= numecs; ++j )
branch  0 taken 240107
branch  1 taken 3112
   240107: 2451:						symlist[j] = 1;
        -: 2452:					}
        -: 2453:
        -: 2454:				else
   203775: 2455:					for ( k = 0; k < lenccl; ++k )
branch  0 taken 193666
branch  1 taken 10109 (fallthrough)
        -: 2456:						{
   193666: 2457:						ich = ccltbl[cclp + k];
        -: 2458:
   193666: 2459:						if ( ich == 0 )
branch  0 taken 2 (fallthrough)
branch  1 taken 193664
        2: 2460:							ich = NUL_ec;
        -: 2461:
   193666: 2462:						symlist[ich] = 1;
        -: 2463:						}
        -: 2464:				}
        -: 2465:			}
        -: 2466:		}
    13978: 2467:	}
        -: 2468:/* ecs - equivalence class routines */
        -: 2469:
        -: 2470:/*-
        -: 2471: * Copyright (c) 1990 The Regents of the University of California.
        -: 2472: * All rights reserved.
        -: 2473: *
        -: 2474: * This code is derived from software contributed to Berkeley by
        -: 2475: * Vern Paxson.
        -: 2476: * 
        -: 2477: * The United States Government has rights in this work pursuant
        -: 2478: * to contract no. DE-AC03-76SF00098 between the United States
        -: 2479: * Department of Energy and the University of California.
        -: 2480: *
        -: 2481: * Redistribution and use in source and binary forms are permitted provided
        -: 2482: * that: (1) source distributions retain this entire copyright notice and
        -: 2483: * comment, and (2) distributions including binaries display the following
        -: 2484: * acknowledgement:  ``This product includes software developed by the
        -: 2485: * University of California, Berkeley and its contributors'' in the
        -: 2486: * documentation or other materials provided with the distribution and in
        -: 2487: * all advertising materials mentioning features or use of this software.
        -: 2488: * Neither the name of the University nor the names of its contributors may
        -: 2489: * be used to endorse or promote products derived from this software without
        -: 2490: * specific prior written permission.
        -: 2491: * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
        -: 2492: * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
        -: 2493: * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
        -: 2494: */
        -: 2495:
        -: 2496:/* $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $ */
        -: 2497:
        -: 2498:
        -: 2499:/* ccl2ecl - convert character classes to set of equivalence classes */
        -: 2500:
function ccl2ecl called 296 returned 100% blocks executed 100%
      296: 2501:void ccl2ecl()
        -: 2502:	{
        -: 2503:	int i, ich, newlen, cclp, ccls, cclmec;
        -: 2504:
     1295: 2505:	for ( i = 1; i <= lastccl; ++i )
branch  0 taken 999
branch  1 taken 296 (fallthrough)
        -: 2506:		{
        -: 2507:		/* We loop through each character class, and for each character
        -: 2508:		 * in the class, add the character's equivalence class to the
        -: 2509:		 * new "character" class we are creating.  Thus when we are all
        -: 2510:		 * done, character classes will really consist of collections
        -: 2511:		 * of equivalence classes
        -: 2512:		 */
        -: 2513:
      999: 2514:		newlen = 0;
      999: 2515:		cclp = cclmap[i];
        -: 2516:
     8618: 2517:		for ( ccls = 0; ccls < ccllen[i]; ++ccls )
branch  0 taken 7619
branch  1 taken 999 (fallthrough)
        -: 2518:			{
     7619: 2519:			ich = ccltbl[cclp + ccls];
     7619: 2520:			cclmec = ecgroup[ich];
        -: 2521:
     7619: 2522:			if ( cclmec > 0 )
branch  0 taken 3187 (fallthrough)
branch  1 taken 4432
        -: 2523:				{
     3187: 2524:				ccltbl[cclp + newlen] = cclmec;
     3187: 2525:				++newlen;
        -: 2526:				}
        -: 2527:			}
        -: 2528:
      999: 2529:		ccllen[i] = newlen;
        -: 2530:		}
      296: 2531:	}
        -: 2532:
        -: 2533:
        -: 2534:/* cre8ecs - associate equivalence class numbers with class members
        -: 2535: *
        -: 2536: * fwd is the forward linked-list of equivalence class members.  bck
        -: 2537: * is the backward linked-list, and num is the number of class members.
        -: 2538: *
        -: 2539: * Returned is the number of classes.
        -: 2540: */
        -: 2541:
function cre8ecs called 511 returned 100% blocks executed 100%
      511: 2542:int cre8ecs( fwd, bck, num )
        -: 2543:int fwd[], bck[], num;
        -: 2544:	{
        -: 2545:	int i, j, numcl;
        -: 2546:
      511: 2547:	numcl = 0;
        -: 2548:
        -: 2549:	/* Create equivalence class numbers.  From now on, ABS( bck(x) )
        -: 2550:	 * is the equivalence class number for object x.  If bck(x)
        -: 2551:	 * is positive, then x is the representative of its equivalence
        -: 2552:	 * class.
        -: 2553:	 */
    98349: 2554:	for ( i = 1; i <= num; ++i )
branch  0 taken 97838
branch  1 taken 511 (fallthrough)
    97838: 2555:		if ( bck[i] == NIL )
branch  0 taken 4572 (fallthrough)
branch  1 taken 93266
        -: 2556:			{
     4572: 2557:			bck[i] = ++numcl;
    97838: 2558:			for ( j = fwd[i]; j != NIL; j = fwd[j] )
branch  0 taken 93266
branch  1 taken 4572 (fallthrough)
    93266: 2559:				bck[j] = -numcl;
        -: 2560:			}
        -: 2561:
      511: 2562:	return numcl;
        -: 2563:	}
        -: 2564:
        -: 2565:
        -: 2566:/* mkeccl - update equivalence classes based on character class xtions
        -: 2567: *
        -: 2568: * synopsis
        -: 2569: *    Char ccls[];
        -: 2570: *    int lenccl, fwd[llsiz], bck[llsiz], llsiz, NUL_mapping;
        -: 2571: *    void mkeccl( Char ccls[], int lenccl, int fwd[llsiz], int bck[llsiz],
        -: 2572: *			int llsiz, int NUL_mapping );
        -: 2573: *
        -: 2574: * ccls contains the elements of the character class, lenccl is the
        -: 2575: * number of elements in the ccl, fwd is the forward link-list of equivalent
        -: 2576: * characters, bck is the backward link-list, and llsiz size of the link-list.
        -: 2577: *
        -: 2578: * NUL_mapping is the value which NUL (0) should be mapped to.
        -: 2579: */
        -: 2580:
function mkeccl called 14475 returned 100% blocks executed 100%
    14475: 2581:void mkeccl( ccls, lenccl, fwd, bck, llsiz, NUL_mapping )
        -: 2582:Char ccls[];
        -: 2583:int lenccl, fwd[], bck[], llsiz, NUL_mapping;
        -: 2584:	{
        -: 2585:	int cclp, oldec, newec;
        -: 2586:	int cclm, i, j;
        -: 2587:	static unsigned char cclflags[CSIZE];	/* initialized to all '\0' */
        -: 2588:
        -: 2589:	/* Note that it doesn't matter whether or not the character class is
        -: 2590:	 * negated.  The same results will be obtained in either case.
        -: 2591:	 */
        -: 2592:
    14475: 2593:	cclp = 0;
        -: 2594:
    36419: 2595:	while ( cclp < lenccl )
branch  0 taken 21944
branch  1 taken 14475 (fallthrough)
        -: 2596:		{
    21944: 2597:		cclm = ccls[cclp];
        -: 2598:
    21944: 2599:		if ( NUL_mapping && cclm == 0 )
branch  0 taken 21589 (fallthrough)
branch  1 taken 355
branch  2 taken 4 (fallthrough)
branch  3 taken 21585
        4: 2600:			cclm = NUL_mapping;
        -: 2601:
    21944: 2602:		oldec = bck[cclm];
    21944: 2603:		newec = cclm;
        -: 2604:
    21944: 2605:		j = cclp + 1;
        -: 2606:
   799070: 2607:		for ( i = fwd[cclm]; i != NIL && i <= llsiz; i = fwd[i] )
branch  0 taken 777126 (fallthrough)
branch  1 taken 21944
branch  2 taken 777126
branch  3 taken 0 (fallthrough)
        -: 2608:			{ /* look for the symbol in the character class */
  1006718: 2609:			for ( ; j < lenccl; ++j )
branch  0 taken 562914
branch  1 taken 443804 (fallthrough)
        -: 2610:				{
        -: 2611:				register int ccl_char;
        -: 2612:
   562914: 2613:				if ( NUL_mapping && ccls[j] == 0 )
branch  0 taken 510342 (fallthrough)
branch  1 taken 52572
branch  2 taken 750 (fallthrough)
branch  3 taken 509592
      750: 2614:					ccl_char = NUL_mapping;
        -: 2615:				else
   562164: 2616:					ccl_char = ccls[j];
        -: 2617:
   562914: 2618:				if ( ccl_char > i )
branch  0 taken 107973 (fallthrough)
branch  1 taken 454941
   107973: 2619:					break;
        -: 2620:
   454941: 2621:				if ( ccl_char == i && ! cclflags[j] )
branch  0 taken 225349 (fallthrough)
branch  1 taken 229592
branch  2 taken 225349 (fallthrough)
branch  3 taken 0
        -: 2622:					{
        -: 2623:					/* We found an old companion of cclm
        -: 2624:					 * in the ccl.  Link it into the new
        -: 2625:					 * equivalence class and flag it as
        -: 2626:					 * having been processed.
        -: 2627:					 */
        -: 2628:
   225349: 2629:					bck[i] = newec;
   225349: 2630:					fwd[newec] = i;
   225349: 2631:					newec = i;
        -: 2632:					/* Set flag so we don't reprocess. */
   225349: 2633:					cclflags[j] = 1;
        -: 2634:
        -: 2635:					/* Get next equivalence class member. */
        -: 2636:					/* continue 2 */
   225349: 2637:					goto next_pt;
        -: 2638:					}
        -: 2639:				}
        -: 2640:
        -: 2641:			/* Symbol isn't in character class.  Put it in the old
        -: 2642:			 * equivalence class.
        -: 2643:			 */
        -: 2644:
   551777: 2645:			bck[i] = oldec;
        -: 2646:
   551777: 2647:			if ( oldec != NIL )
branch  0 taken 551140 (fallthrough)
branch  1 taken 637
   551140: 2648:				fwd[oldec] = i;
        -: 2649:
   551777: 2650:			oldec = i;
        -: 2651:
   777126: 2652:			next_pt: ;
        -: 2653:			}
        -: 2654:
    21944: 2655:		if ( bck[cclm] != NIL || oldec != bck[cclm] )
branch  0 taken 11812 (fallthrough)
branch  1 taken 10132
branch  2 taken 637 (fallthrough)
branch  3 taken 11175
        -: 2656:			{
    10769: 2657:			bck[cclm] = NIL;
    10769: 2658:			fwd[oldec] = NIL;
        -: 2659:			}
        -: 2660:
    21944: 2661:		fwd[newec] = NIL;
        -: 2662:
        -: 2663:		/* Find next ccl member to process. */
        -: 2664:
   247293: 2665:		for ( ++cclp; cclflags[cclp] && cclp < lenccl; ++cclp )
branch  0 taken 225349 (fallthrough)
branch  1 taken 21944
branch  2 taken 225349
branch  3 taken 0 (fallthrough)
        -: 2666:			{
        -: 2667:			/* Reset "doesn't need processing" flag. */
   225349: 2668:			cclflags[cclp] = 0;
        -: 2669:			}
        -: 2670:		}
    14475: 2671:	}
        -: 2672:
        -: 2673:
        -: 2674:/* mkechar - create equivalence class for single character */
        -: 2675:
function mkechar called 23930 returned 100% blocks executed 100%
    23930: 2676:void mkechar( tch, fwd, bck )
        -: 2677:int tch, fwd[], bck[];
        -: 2678:	{
        -: 2679:	/* If until now the character has been a proper subset of
        -: 2680:	 * an equivalence class, break it away to create a new ec
        -: 2681:	 */
        -: 2682:
    23930: 2683:	if ( fwd[tch] != NIL )
branch  0 taken 16745 (fallthrough)
branch  1 taken 7185
    16745: 2684:		bck[fwd[tch]] = bck[tch];
        -: 2685:
    23930: 2686:	if ( bck[tch] != NIL )
branch  0 taken 17785 (fallthrough)
branch  1 taken 6145
    17785: 2687:		fwd[bck[tch]] = fwd[tch];
        -: 2688:
    23930: 2689:	fwd[tch] = NIL;
    23930: 2690:	bck[tch] = NIL;
    23930: 2691:	}
        -: 2692:/* gen - actual generation (writing) of flex scanners */
        -: 2693:
        -: 2694:/*-
        -: 2695: * Copyright (c) 1990 The Regents of the University of California.
        -: 2696: * All rights reserved.
        -: 2697: *
        -: 2698: * This code is derived from software contributed to Berkeley by
        -: 2699: * Vern Paxson.
        -: 2700: * 
        -: 2701: * The United States Government has rights in this work pursuant
        -: 2702: * to contract no. DE-AC03-76SF00098 between the United States
        -: 2703: * Department of Energy and the University of California.
        -: 2704: *
        -: 2705: * Redistribution and use in source and binary forms are permitted provided
        -: 2706: * that: (1) source distributions retain this entire copyright notice and
        -: 2707: * comment, and (2) distributions including binaries display the following
        -: 2708: * acknowledgement:  ``This product includes software developed by the
        -: 2709: * University of California, Berkeley and its contributors'' in the
        -: 2710: * documentation or other materials provided with the distribution and in
        -: 2711: * all advertising materials mentioning features or use of this software.
        -: 2712: * Neither the name of the University nor the names of its contributors may
        -: 2713: * be used to endorse or promote products derived from this software without
        -: 2714: * specific prior written permission.
        -: 2715: * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
        -: 2716: * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
        -: 2717: * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
        -: 2718: */
        -: 2719:
        -: 2720:/* $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $ */
        -: 2721:
        -: 2722:
        -: 2723:
        -: 2724:/* declare functions that have forward references */
        -: 2725:
        -: 2726:void gen_next_state PROTO((int));
        -: 2727:void genecs PROTO((void));
        -: 2728:void indent_put2s PROTO((char [], char []));
        -: 2729:void indent_puts PROTO((char []));
        -: 2730:
        -: 2731:
        -: 2732:static int indent_level = 0; /* each level is 8 spaces */
        -: 2733:
        -: 2734:#define indent_up() (++indent_level)
        -: 2735:#define indent_down() (--indent_level)
        -: 2736:#define set_indent(indent_val) indent_level = indent_val
        -: 2737:
        -: 2738:/* Almost everything is done in terms of arrays starting at 1, so provide
        -: 2739: * a null entry for the zero element of all C arrays.  (The exception
        -: 2740: * to this is that the fast table representation generally uses the
        -: 2741: * 0 elements of its arrays, too.)
        -: 2742: */
        -: 2743:static char C_int_decl[] = "static yyconst int %s[%d] =\n    {   0,\n";
        -: 2744:static char C_short_decl[] = "static yyconst short int %s[%d] =\n    {   0,\n";
        -: 2745:static char C_long_decl[] = "static yyconst long int %s[%d] =\n    {   0,\n";
        -: 2746:static char C_state_decl[] =
        -: 2747:	"static yyconst yy_state_type %s[%d] =\n    {   0,\n";
        -: 2748:
        -: 2749:
        -: 2750:/* Indent to the current level. */
        -: 2751:
function do_indent called 43395 returned 100% blocks executed 78%
    43395: 2752:void do_indent()
        -: 2753:	{
    43395: 2754:	register int i = indent_level * 8;
        -: 2755:
   152143: 2756:	while ( i >= 8 )
branch  0 taken 108748
branch  1 taken 43395 (fallthrough)
        -: 2757:		{
   108748: 2758:		outc( '\t' );
call    0 returned 108748
   108748: 2759:		i -= 8;
        -: 2760:		}
        -: 2761:
    43395: 2762:	while ( i > 0 )
branch  0 taken 0
branch  1 taken 43395 (fallthrough)
        -: 2763:		{
    #####: 2764:		outc( ' ' );
call    0 never executed
    #####: 2765:		--i;
        -: 2766:		}
    43395: 2767:	}
        -: 2768:
        -: 2769:
        -: 2770:/* Generate the code to keep backing-up information. */
        -: 2771:
function gen_backing_up called 1625 returned 100% blocks executed 100%
     1625: 2772:void gen_backing_up()
        -: 2773:	{
     1625: 2774:	if ( reject || num_backing_up == 0 )
branch  0 taken 1121 (fallthrough)
branch  1 taken 504
branch  2 taken 2 (fallthrough)
branch  3 taken 1119
      506: 2775:		return;
        -: 2776:
     1119: 2777:	if ( fullspd )
branch  0 taken 276 (fallthrough)
branch  1 taken 843
      276: 2778:		indent_puts( "if ( yy_current_state[-1].yy_nxt )" );
call    0 returned 276
        -: 2779:	else
      843: 2780:		indent_puts( "if ( yy_accept[yy_current_state] )" );
call    0 returned 843
        -: 2781:
     1119: 2782:	indent_up();
     1119: 2783:	indent_puts( "{" );
call    0 returned 1119
     1119: 2784:	indent_puts( "yy_last_accepting_state = yy_current_state;" );
call    0 returned 1119
     1119: 2785:	indent_puts( "yy_last_accepting_cpos = yy_cp;" );
call    0 returned 1119
     1119: 2786:	indent_puts( "}" );
call    0 returned 1119
     1119: 2787:	indent_down();
        -: 2788:	}
        -: 2789:
        -: 2790:
        -: 2791:/* Generate the code to perform the backing up. */
        -: 2792:
function gen_bu_action called 543 returned 100% blocks executed 100%
      543: 2793:void gen_bu_action()
        -: 2794:	{
      543: 2795:	if ( reject || num_backing_up == 0 )
branch  0 taken 375 (fallthrough)
branch  1 taken 168
branch  2 taken 2 (fallthrough)
branch  3 taken 373
      170: 2796:		return;
        -: 2797:
      373: 2798:	set_indent( 3 );
        -: 2799:
      373: 2800:	indent_puts( "case 0: /* must back up */" );
call    0 returned 373
      373: 2801:	indent_puts( "/* undo the effects of YY_DO_BEFORE_ACTION */" );
call    0 returned 373
      373: 2802:	indent_puts( "*yy_cp = yy_hold_char;" );
call    0 returned 373
        -: 2803:
      373: 2804:	if ( fullspd || fulltbl )
branch  0 taken 281 (fallthrough)
branch  1 taken 92
branch  2 taken 21 (fallthrough)
branch  3 taken 260
      113: 2805:		indent_puts( "yy_cp = yy_last_accepting_cpos + 1;" );
call    0 returned 113
        -: 2806:	else
        -: 2807:		/* Backing-up info for compressed tables is taken \after/
        -: 2808:		 * yy_cp has been incremented for the next state.
        -: 2809:		 */
      260: 2810:		indent_puts( "yy_cp = yy_last_accepting_cpos;" );
call    0 returned 260
        -: 2811:
      373: 2812:	indent_puts( "yy_current_state = yy_last_accepting_state;" );
call    0 returned 373
      373: 2813:	indent_puts( "goto yy_find_action;" );
call    0 returned 373
      373: 2814:	outc( '\n' );
call    0 returned 373
        -: 2815:
      373: 2816:	set_indent( 0 );
        -: 2817:	}
        -: 2818:
        -: 2819:
        -: 2820:/* genctbl - generates full speed compressed transition table */
        -: 2821:
function genctbl called 92 returned 100% blocks executed 94%
       92: 2822:void genctbl()
        -: 2823:	{
        -: 2824:	register int i;
       92: 2825:	int end_of_buffer_action = num_rules + 1;
        -: 2826:
        -: 2827:	/* Table of verify for transition and offset to next state. */
        -: 2828:
        -: 2829:#ifndef F_AA_5
       92: 2830:	out_dec( "static yyconst struct yy_trans_info yy_transition[%d] =\n",
       92: 2831:		tblend + numecs + 1 );
call    0 returned 92
        -: 2832:#else
        -: 2833:
        -: 2834:#endif
       92: 2835:	outn( "    {" );
call    0 returned 92
        -: 2836:
        -: 2837:	/* We want the transition to be represented as the offset to the
        -: 2838:	 * next state, not the actual state number, which is what it currently
        -: 2839:	 * is.  The offset is base[nxt[i]] - (base of current state)].  That's
        -: 2840:	 * just the difference between the starting points of the two involved
        -: 2841:	 * states (to - from).
        -: 2842:	 *
        -: 2843:	 * First, though, we need to find some way to put in our end-of-buffer
        -: 2844:	 * flags and states.  We do this by making a state with absolutely no
        -: 2845:	 * transitions.  We put it at the end of the table.
        -: 2846:	 */
        -: 2847:
        -: 2848:	/* We need to have room in nxt/chk for two more slots: One for the
        -: 2849:	 * action and one for the end-of-buffer transition.  We now *assume*
        -: 2850:	 * that we're guaranteed the only character we'll try to index this
        -: 2851:	 * nxt/chk pair with is EOB, i.e., 0, so we don't have to make sure
        -: 2852:	 * there's room for jam entries for other characters.
        -: 2853:	 */
        -: 2854:
       92: 2855:	while ( tblend + 2 >= current_max_xpairs )
branch  0 taken 0
branch  1 taken 92 (fallthrough)
    #####: 2856:		expand_nxt_chk();
call    0 never executed
        -: 2857:
       92: 2858:	while ( lastdfa + 1 >= current_max_dfas )
branch  0 taken 0
branch  1 taken 92 (fallthrough)
    #####: 2859:		increase_max_dfas();
call    0 never executed
        -: 2860:
       92: 2861:	base[lastdfa + 1] = tblend + 2;
       92: 2862:	nxt[tblend + 1] = end_of_buffer_action;
       92: 2863:	chk[tblend + 1] = numecs + 1;
       92: 2864:	chk[tblend + 2] = 1; /* anything but EOB */
        -: 2865:
        -: 2866:	/* So that "make test" won't show arb. differences. */
       92: 2867:	nxt[tblend + 2] = 0;
        -: 2868:
        -: 2869:	/* Make sure every state has an end-of-buffer transition and an
        -: 2870:	 * action #.
        -: 2871:	 */
     2354: 2872:	for ( i = 0; i <= lastdfa; ++i )
branch  0 taken 2262
branch  1 taken 92 (fallthrough)
        -: 2873:		{
     2262: 2874:		int anum = dfaacc[i].dfaacc_state;
     2262: 2875:		int offset = base[i];
        -: 2876:
     2262: 2877:		chk[offset] = EOB_POSITION;
     2262: 2878:		chk[offset - 1] = ACTION_POSITION;
     2262: 2879:		nxt[offset - 1] = anum;	/* action number */
        -: 2880:		}
        -: 2881:
    55605: 2882:	for ( i = 0; i <= tblend; ++i )
branch  0 taken 55513
branch  1 taken 92 (fallthrough)
        -: 2883:		{
    55513: 2884:		if ( chk[i] == EOB_POSITION )
branch  0 taken 2262 (fallthrough)
branch  1 taken 53251
     2262: 2885:			transition_struct_out( 0, base[lastdfa + 1] - i );
call    0 returned 2262
        -: 2886:
    53251: 2887:		else if ( chk[i] == ACTION_POSITION )
branch  0 taken 2262 (fallthrough)
branch  1 taken 50989
     2262: 2888:			transition_struct_out( 0, nxt[i] );
call    0 returned 2262
        -: 2889:
    50989: 2890:		else if ( chk[i] > numecs || chk[i] == 0 )
branch  0 taken 50989 (fallthrough)
branch  1 taken 0
branch  2 taken 18266 (fallthrough)
branch  3 taken 32723
    18266: 2891:			transition_struct_out( 0, 0 );	/* unused slot */
call    0 returned 18266
        -: 2892:
        -: 2893:		else	/* verify, transition */
    32723: 2894:			transition_struct_out( chk[i],
    32723: 2895:						base[nxt[i]] - (i - chk[i]) );
call    0 returned 32723
        -: 2896:		}
        -: 2897:
        -: 2898:
        -: 2899:	/* Here's the final, end-of-buffer state. */
       92: 2900:	transition_struct_out( chk[tblend + 1], nxt[tblend + 1] );
call    0 returned 92
       92: 2901:	transition_struct_out( chk[tblend + 2], nxt[tblend + 2] );
call    0 returned 92
        -: 2902:
       92: 2903:	outn( "    };\n" );
call    0 returned 92
        -: 2904:
        -: 2905:	/* Table of pointers to start states. */
       92: 2906:	out_dec(
        -: 2907:	"static yyconst struct yy_trans_info *yy_start_state_list[%d] =\n",
       92: 2908:		lastsc * 2 + 1 );
call    0 returned 92
       92: 2909:	outn( "    {" );	/* } so vi doesn't get confused */
call    0 returned 92
        -: 2910:
      368: 2911:	for ( i = 0; i <= lastsc * 2; ++i )
branch  0 taken 276
branch  1 taken 92 (fallthrough)
      276: 2912:		out_dec( "    &yy_transition[%d],\n", base[i] );
call    0 returned 276
        -: 2913:
       92: 2914:	dataend();
call    0 returned 92
        -: 2915:
       92: 2916:	if ( useecs )
branch  0 taken 40 (fallthrough)
branch  1 taken 52
       40: 2917:		genecs();
call    0 returned 40
       92: 2918:	}
        -: 2919:
        -: 2920:
        -: 2921:/* Generate equivalence-class tables. */
        -: 2922:
function genecs called 296 returned 100% blocks executed 100%
      296: 2923:void genecs()
        -: 2924:	{
        -: 2925:	register int i, j;
        -: 2926:	int numrows;
        -: 2927:
      296: 2928:	out_str_dec( C_int_decl, "yy_ec", csize );
call    0 returned 296
        -: 2929:
    75520: 2930:	for ( i = 1; i < csize; ++i )
branch  0 taken 75224
branch  1 taken 296 (fallthrough)
        -: 2931:		{
    75224: 2932:		if ( caseins && (i >= 'A') && (i <= 'Z') )
branch  0 taken 637 (fallthrough)
branch  1 taken 74587
branch  2 taken 445 (fallthrough)
branch  3 taken 192
branch  4 taken 78 (fallthrough)
branch  5 taken 367
       78: 2933:			ecgroup[i] = ecgroup[clower( i )];
call    0 returned 78
        -: 2934:
    75224: 2935:		ecgroup[i] = ABS( ecgroup[i] );
    75224: 2936:		mkdata( ecgroup[i] );
call    0 returned 75224
        -: 2937:		}
        -: 2938:
      296: 2939:	dataend();
call    0 returned 296
        -: 2940:
      296: 2941:	if ( trace )
branch  0 taken 14 (fallthrough)
branch  1 taken 282
        -: 2942:		{
       14: 2943:		fputs( _( "\n\nEquivalence Classes:\n\n" ), err );
call    0 returned 14
        -: 2944:
       14: 2945:		numrows = csize / 8;
        -: 2946:
      446: 2947:		for ( j = 0; j < numrows; ++j )
branch  0 taken 432
branch  1 taken 14 (fallthrough)
        -: 2948:			{
     3888: 2949:			for ( i = j; i < csize; i = i + numrows )
branch  0 taken 3456
branch  1 taken 432 (fallthrough)
        -: 2950:				{
     3456: 2951:				fprintf( err, "%4s = %-2d",
call    0 returned 3456
call    1 returned 3456
        -: 2952:					readable_form( i ), ecgroup[i] );
        -: 2953:
     3456: 2954:				putc( ' ', err );
call    0 returned 3456
        -: 2955:				}
        -: 2956:
      432: 2957:			putc( '\n', err );
call    0 returned 432
        -: 2958:			}
        -: 2959:		}
      296: 2960:	}
        -: 2961:
        -: 2962:
        -: 2963:/* Generate the code to find the action number. */
        -: 2964:
function gen_find_action called 543 returned 100% blocks executed 100%
      543: 2965:void gen_find_action()
        -: 2966:	{
      543: 2967:	if ( fullspd )
branch  0 taken 92 (fallthrough)
branch  1 taken 451
       92: 2968:		indent_puts( "yy_act = yy_current_state[-1].yy_nxt;" );
call    0 returned 92
        -: 2969:
      451: 2970:	else if ( fulltbl )
branch  0 taken 23 (fallthrough)
branch  1 taken 428
       23: 2971:		indent_puts( "yy_act = yy_accept[yy_current_state];" );
call    0 returned 23
        -: 2972:
      428: 2973:	else if ( reject )
branch  0 taken 168 (fallthrough)
branch  1 taken 260
        -: 2974:		{
      168: 2975:		indent_puts( "yy_current_state = *--yy_state_ptr;" );
call    0 returned 168
      168: 2976:		indent_puts( "yy_lp = yy_accept[yy_current_state];" );
call    0 returned 168
        -: 2977:
      168: 2978:		outn(
call    0 returned 168
        -: 2979:		"find_rule: /* we branch to this label when backing up */" );
        -: 2980:
      168: 2981:		indent_puts(
call    0 returned 168
        -: 2982:		"for ( ; ; ) /* until we find what rule we matched */" );
        -: 2983:
      168: 2984:		indent_up();
        -: 2985:
      168: 2986:		indent_puts( "{" );
call    0 returned 168
        -: 2987:
      168: 2988:		indent_puts(
call    0 returned 168
        -: 2989:		"if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )" );
      168: 2990:		indent_up();
      168: 2991:		indent_puts( "{" );
call    0 returned 168
      168: 2992:		indent_puts( "yy_act = yy_acclist[yy_lp];" );
call    0 returned 168
        -: 2993:
      168: 2994:		if ( variable_trailing_context_rules )
branch  0 taken 33 (fallthrough)
branch  1 taken 135
        -: 2995:			{
       33: 2996:			indent_puts( "if ( yy_act & YY_TRAILING_HEAD_MASK ||" );
call    0 returned 33
       33: 2997:			indent_puts( "     yy_looking_for_trail_begin )" );
call    0 returned 33
       33: 2998:			indent_up();
       33: 2999:			indent_puts( "{" );
call    0 returned 33
        -: 3000:
       33: 3001:			indent_puts(
call    0 returned 33
        -: 3002:				"if ( yy_act == yy_looking_for_trail_begin )" );
       33: 3003:			indent_up();
       33: 3004:			indent_puts( "{" );
call    0 returned 33
       33: 3005:			indent_puts( "yy_looking_for_trail_begin = 0;" );
call    0 returned 33
       33: 3006:			indent_puts( "yy_act &= ~YY_TRAILING_HEAD_MASK;" );
call    0 returned 33
       33: 3007:			indent_puts( "break;" );
call    0 returned 33
       33: 3008:			indent_puts( "}" );
call    0 returned 33
       33: 3009:			indent_down();
        -: 3010:
       33: 3011:			indent_puts( "}" );
call    0 returned 33
       33: 3012:			indent_down();
        -: 3013:
       33: 3014:			indent_puts( "else if ( yy_act & YY_TRAILING_MASK )" );
call    0 returned 33
       33: 3015:			indent_up();
       33: 3016:			indent_puts( "{" );
call    0 returned 33
       33: 3017:			indent_puts(
call    0 returned 33
        -: 3018:		"yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;" );
       33: 3019:			indent_puts(
call    0 returned 33
        -: 3020:		"yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;" );
        -: 3021:
       33: 3022:			if ( real_reject )
branch  0 taken 31 (fallthrough)
branch  1 taken 2
        -: 3023:				{
        -: 3024:				/* Remember matched text in case we back up
        -: 3025:				 * due to REJECT.
        -: 3026:				 */
       31: 3027:				indent_puts( "yy_full_match = yy_cp;" );
call    0 returned 31
       31: 3028:				indent_puts( "yy_full_state = yy_state_ptr;" );
call    0 returned 31
       31: 3029:				indent_puts( "yy_full_lp = yy_lp;" );
call    0 returned 31
        -: 3030:				}
        -: 3031:
       33: 3032:			indent_puts( "}" );
call    0 returned 33
       33: 3033:			indent_down();
        -: 3034:
       33: 3035:			indent_puts( "else" );
call    0 returned 33
       33: 3036:			indent_up();
       33: 3037:			indent_puts( "{" );
call    0 returned 33
       33: 3038:			indent_puts( "yy_full_match = yy_cp;" );
call    0 returned 33
       33: 3039:			indent_puts( "yy_full_state = yy_state_ptr;" );
call    0 returned 33
       33: 3040:			indent_puts( "yy_full_lp = yy_lp;" );
call    0 returned 33
       33: 3041:			indent_puts( "break;" );
call    0 returned 33
       33: 3042:			indent_puts( "}" );
call    0 returned 33
       33: 3043:			indent_down();
        -: 3044:
       33: 3045:			indent_puts( "++yy_lp;" );
call    0 returned 33
       33: 3046:			indent_puts( "goto find_rule;" );
call    0 returned 33
        -: 3047:			}
        -: 3048:
        -: 3049:		else
        -: 3050:			{
        -: 3051:			/* Remember matched text in case we back up due to
        -: 3052:			 * trailing context plus REJECT.
        -: 3053:			 */
      135: 3054:			indent_up();
      135: 3055:			indent_puts( "{" );
call    0 returned 135
      135: 3056:			indent_puts( "yy_full_match = yy_cp;" );
call    0 returned 135
      135: 3057:			indent_puts( "break;" );
call    0 returned 135
      135: 3058:			indent_puts( "}" );
call    0 returned 135
      135: 3059:			indent_down();
        -: 3060:			}
        -: 3061:
      168: 3062:		indent_puts( "}" );
call    0 returned 168
      168: 3063:		indent_down();
        -: 3064:
      168: 3065:		indent_puts( "--yy_cp;" );
call    0 returned 168
        -: 3066:
        -: 3067:		/* We could consolidate the following two lines with those at
        -: 3068:		 * the beginning, but at the cost of complaints that we're
        -: 3069:		 * branching inside a loop.
        -: 3070:		 */
      168: 3071:		indent_puts( "yy_current_state = *--yy_state_ptr;" );
call    0 returned 168
      168: 3072:		indent_puts( "yy_lp = yy_accept[yy_current_state];" );
call    0 returned 168
        -: 3073:
      168: 3074:		indent_puts( "}" );
call    0 returned 168
        -: 3075:
      168: 3076:		indent_down();
        -: 3077:		}
        -: 3078:
        -: 3079:	else
        -: 3080:		{ /* compressed */
      260: 3081:		indent_puts( "yy_act = yy_accept[yy_current_state];" );
call    0 returned 260
        -: 3082:
      260: 3083:		if ( interactive && ! reject )
branch  0 taken 259 (fallthrough)
branch  1 taken 1
branch  2 taken 259 (fallthrough)
branch  3 taken 0
        -: 3084:			{
        -: 3085:			/* Do the guaranteed-needed backing up to figure out
        -: 3086:			 * the match.
        -: 3087:			 */
      259: 3088:			indent_puts( "if ( yy_act == 0 )" );
call    0 returned 259
      259: 3089:			indent_up();
      259: 3090:			indent_puts( "{ /* have to back up */" );
call    0 returned 259
      259: 3091:			indent_puts( "yy_cp = yy_last_accepting_cpos;" );
call    0 returned 259
      259: 3092:			indent_puts(
call    0 returned 259
        -: 3093:				"yy_current_state = yy_last_accepting_state;" );
      259: 3094:			indent_puts( "yy_act = yy_accept[yy_current_state];" );
call    0 returned 259
      259: 3095:			indent_puts( "}" );
call    0 returned 259
      259: 3096:			indent_down();
        -: 3097:			}
        -: 3098:		}
      543: 3099:	}
        -: 3100:
        -: 3101:
        -: 3102:/* genftbl - generate full transition table */
        -: 3103:
function genftbl called 23 returned 100% blocks executed 93%
       23: 3104:void genftbl()
        -: 3105:	{
        -: 3106:	register int i;
       23: 3107:	int end_of_buffer_action = num_rules + 1;
        -: 3108:
      23*: 3109:	out_str_dec( long_align ? C_long_decl : C_short_decl,
branch  0 taken 0 (fallthrough)
branch  1 taken 23
call    2 returned 23
        -: 3110:		"yy_accept", lastdfa + 1 );
        -: 3111:
       23: 3112:	dfaacc[end_of_buffer_state].dfaacc_state = end_of_buffer_action;
        -: 3113:
      565: 3114:	for ( i = 1; i <= lastdfa; ++i )
branch  0 taken 542
branch  1 taken 23 (fallthrough)
        -: 3115:		{
      542: 3116:		register int anum = dfaacc[i].dfaacc_state;
        -: 3117:
      542: 3118:		mkdata( anum );
call    0 returned 542
        -: 3119:
      542: 3120:		if ( trace && anum )
branch  0 taken 18 (fallthrough)
branch  1 taken 524
branch  2 taken 16 (fallthrough)
branch  3 taken 2
       16: 3121:			fprintf( err, _( "state # %d accepts: [%d]\n" ),
call    0 returned 16
        -: 3122:				i, anum );
        -: 3123:		}
        -: 3124:
       23: 3125:	dataend();
call    0 returned 23
        -: 3126:
       23: 3127:	if ( useecs )
branch  0 taken 1 (fallthrough)
branch  1 taken 22
        1: 3128:		genecs();
call    0 returned 1
        -: 3129:
        -: 3130:	/* Don't have to dump the actual full table entries - they were
        -: 3131:	 * created on-the-fly.
        -: 3132:	 */
       23: 3133:	}
        -: 3134:
        -: 3135:
        -: 3136:/* Generate the code to find the next compressed-table state. */
        -: 3137:
function gen_next_compressed_state called 1111 returned 100% blocks executed 100%
     1111: 3138:void gen_next_compressed_state( char_map )
        -: 3139:char *char_map;
        -: 3140:	{
     1111: 3141:	indent_put2s( "register YY_CHAR yy_c = %s;", char_map );
call    0 returned 1111
        -: 3142:
        -: 3143:	/* Save the backing-up info \before/ computing the next state
        -: 3144:	 * because we always compute one more state than needed - we
        -: 3145:	 * always proceed until we reach a jam state
        -: 3146:	 */
     1111: 3147:	gen_backing_up();
call    0 returned 1111
        -: 3148:
     1111: 3149:	indent_puts(
call    0 returned 1111
        -: 3150:"while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )" );
     1111: 3151:	indent_up();
     1111: 3152:	indent_puts( "{" );
call    0 returned 1111
     1111: 3153:	indent_puts( "yy_current_state = (int) yy_def[yy_current_state];" );
call    0 returned 1111
        -: 3154:
     1111: 3155:	if ( usemecs )
branch  0 taken 565 (fallthrough)
branch  1 taken 546
        -: 3156:		{
        -: 3157:		/* We've arrange it so that templates are never chained
        -: 3158:		 * to one another.  This means we can afford to make a
        -: 3159:		 * very simple test to see if we need to convert to
        -: 3160:		 * yy_c's meta-equivalence class without worrying
        -: 3161:		 * about erroneously looking up the meta-equivalence
        -: 3162:		 * class twice
        -: 3163:		 */
      565: 3164:		do_indent();
call    0 returned 565
        -: 3165:
        -: 3166:		/* lastdfa + 2 is the beginning of the templates */
      565: 3167:		out_dec( "if ( yy_current_state >= %d )\n", lastdfa + 2 );
call    0 returned 565
        -: 3168:
      565: 3169:		indent_up();
      565: 3170:		indent_puts( "yy_c = yy_meta[(unsigned int) yy_c];" );
call    0 returned 565
      565: 3171:		indent_down();
        -: 3172:		}
        -: 3173:
     1111: 3174:	indent_puts( "}" );
call    0 returned 1111
     1111: 3175:	indent_down();
        -: 3176:
     1111: 3177:	indent_puts(
call    0 returned 1111
        -: 3178:"yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];" );
     1111: 3179:	}
        -: 3180:
        -: 3181:
        -: 3182:/* Generate the code to find the next match. */
        -: 3183:
function gen_next_match called 543 returned 100% blocks executed 100%
      543: 3184:void gen_next_match()
        -: 3185:	{
        -: 3186:	/* NOTE - changes in here should be reflected in gen_next_state() and
        -: 3187:	 * gen_NUL_trans().
        -: 3188:	 */
     1086: 3189:	char *char_map = useecs ?
      543: 3190:				"yy_ec[YY_SC_TO_UI(*yy_cp)]" :
branch  0 taken 296 (fallthrough)
branch  1 taken 247
        -: 3191:				"YY_SC_TO_UI(*yy_cp)";
        -: 3192:
     1086: 3193:	char *char_map_2 = useecs ?
      543: 3194:				"yy_ec[YY_SC_TO_UI(*++yy_cp)]" :
branch  0 taken 296 (fallthrough)
branch  1 taken 247
        -: 3195:				"YY_SC_TO_UI(*++yy_cp)";
        -: 3196:
      543: 3197:	if ( fulltbl )
branch  0 taken 23 (fallthrough)
branch  1 taken 520
        -: 3198:		{
       23: 3199:		indent_put2s(
call    0 returned 23
        -: 3200:	"while ( (yy_current_state = yy_nxt[yy_current_state][%s]) > 0 )",
        -: 3201:				char_map );
        -: 3202:
       23: 3203:		indent_up();
        -: 3204:
       23: 3205:		if ( num_backing_up > 0 )
branch  0 taken 21 (fallthrough)
branch  1 taken 2
        -: 3206:			{
       21: 3207:			indent_puts( "{" );	/* } for vi */
call    0 returned 21
       21: 3208:			gen_backing_up();
call    0 returned 21
       21: 3209:			outc( '\n' );
call    0 returned 21
        -: 3210:			}
        -: 3211:
       23: 3212:		indent_puts( "++yy_cp;" );
call    0 returned 23
        -: 3213:
       23: 3214:		if ( num_backing_up > 0 )
branch  0 taken 21 (fallthrough)
branch  1 taken 2
        -: 3215:			/* { for vi */
       21: 3216:			indent_puts( "}" );
call    0 returned 21
        -: 3217:
       23: 3218:		indent_down();
        -: 3219:
       23: 3220:		outc( '\n' );
call    0 returned 23
       23: 3221:		indent_puts( "yy_current_state = -yy_current_state;" );
call    0 returned 23
        -: 3222:		}
        -: 3223:
      520: 3224:	else if ( fullspd )
branch  0 taken 92 (fallthrough)
branch  1 taken 428
        -: 3225:		{
       92: 3226:		indent_puts( "{" );	/* } for vi */
call    0 returned 92
       92: 3227:		indent_puts(
call    0 returned 92
        -: 3228:		"register yyconst struct yy_trans_info *yy_trans_info;\n" );
       92: 3229:		indent_puts( "register YY_CHAR yy_c;\n" );
call    0 returned 92
       92: 3230:		indent_put2s( "for ( yy_c = %s;", char_map );
call    0 returned 92
       92: 3231:		indent_puts(
call    0 returned 92
        -: 3232:	"      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->" );
       92: 3233:		indent_puts( "yy_verify == yy_c;" );
call    0 returned 92
       92: 3234:		indent_put2s( "      yy_c = %s )", char_map_2 );
call    0 returned 92
        -: 3235:
       92: 3236:		indent_up();
        -: 3237:
       92: 3238:		if ( num_backing_up > 0 )
branch  0 taken 92 (fallthrough)
branch  1 taken 0
       92: 3239:			indent_puts( "{" );	/* } for vi */
call    0 returned 92
        -: 3240:
       92: 3241:		indent_puts( "yy_current_state += yy_trans_info->yy_nxt;" );
call    0 returned 92
        -: 3242:
       92: 3243:		if ( num_backing_up > 0 )
branch  0 taken 92 (fallthrough)
branch  1 taken 0
        -: 3244:			{
       92: 3245:			outc( '\n' );
call    0 returned 92
       92: 3246:			gen_backing_up();	/* { for vi */
call    0 returned 92
       92: 3247:			indent_puts( "}" );
call    0 returned 92
        -: 3248:			}
        -: 3249:
       92: 3250:		indent_down();	/* { for vi */
       92: 3251:		indent_puts( "}" );
call    0 returned 92
        -: 3252:		}
        -: 3253:
        -: 3254:	else
        -: 3255:		{ /* compressed */
      428: 3256:		indent_puts( "do" );
call    0 returned 428
        -: 3257:
      428: 3258:		indent_up();
      428: 3259:		indent_puts( "{" );	/* } for vi */
call    0 returned 428
        -: 3260:
      428: 3261:		gen_next_state( false );
call    0 returned 428
        -: 3262:
      428: 3263:		indent_puts( "++yy_cp;" );
call    0 returned 428
        -: 3264:
        -: 3265:		/* { for vi */
      428: 3266:		indent_puts( "}" );
call    0 returned 428
      428: 3267:		indent_down();
        -: 3268:
      428: 3269:		do_indent();
call    0 returned 428
        -: 3270:
      428: 3271:		if ( interactive )
branch  0 taken 426 (fallthrough)
branch  1 taken 2
      426: 3272:			out_dec( "while ( yy_base[yy_current_state] != %d );\n",
call    0 returned 426
        -: 3273:				jambase );
        -: 3274:		else
        2: 3275:			out_dec( "while ( yy_current_state != %d );\n",
call    0 returned 2
        -: 3276:				jamstate );
        -: 3277:
      428: 3278:		if ( ! reject && ! interactive )
branch  0 taken 260 (fallthrough)
branch  1 taken 168
branch  2 taken 1 (fallthrough)
branch  3 taken 259
        -: 3279:			{
        -: 3280:			/* Do the guaranteed-needed backing up to figure out
        -: 3281:			 * the match.
        -: 3282:			 */
        1: 3283:			indent_puts( "yy_cp = yy_last_accepting_cpos;" );
call    0 returned 1
        1: 3284:			indent_puts(
call    0 returned 1
        -: 3285:				"yy_current_state = yy_last_accepting_state;" );
        -: 3286:			}
        -: 3287:		}
      543: 3288:	}
        -: 3289:
        -: 3290:
        -: 3291:/* Generate the code to find the next state. */
        -: 3292:
function gen_next_state called 971 returned 100% blocks executed 100%
      971: 3293:void gen_next_state( worry_about_NULs )
        -: 3294:int worry_about_NULs;
        -: 3295:	{ /* NOTE - changes in here should be reflected in gen_next_match() */
        -: 3296:	char char_map[256];
        -: 3297:
      971: 3298:	if ( worry_about_NULs && ! nultrans )
branch  0 taken 543 (fallthrough)
branch  1 taken 428
branch  2 taken 348 (fallthrough)
branch  3 taken 195
        -: 3299:		{
      348: 3300:		if ( useecs )
branch  0 taken 296 (fallthrough)
branch  1 taken 52
      296: 3301:			(void) sprintf( char_map,
        -: 3302:				"(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : %d)",
        -: 3303:					NUL_ec );
        -: 3304:		else
       52: 3305:			(void) sprintf( char_map,
        -: 3306:				"(*yy_cp ? YY_SC_TO_UI(*yy_cp) : %d)", NUL_ec );
        -: 3307:		}
        -: 3308:
        -: 3309:	else
      623: 3310:		strcpy( char_map, useecs ?
branch  0 taken 255 (fallthrough)
branch  1 taken 368
        -: 3311:			"yy_ec[YY_SC_TO_UI(*yy_cp)]" : "YY_SC_TO_UI(*yy_cp)" );
        -: 3312:
      971: 3313:	if ( worry_about_NULs && nultrans )
branch  0 taken 543 (fallthrough)
branch  1 taken 428
branch  2 taken 195 (fallthrough)
branch  3 taken 348
        -: 3314:		{
      195: 3315:		if ( ! fulltbl && ! fullspd )
branch  0 taken 173 (fallthrough)
branch  1 taken 22
branch  2 taken 173 (fallthrough)
branch  3 taken 0
        -: 3316:			/* Compressed tables back up *before* they match. */
      173: 3317:			gen_backing_up();
call    0 returned 173
        -: 3318:
      195: 3319:		indent_puts( "if ( *yy_cp )" );
call    0 returned 195
      195: 3320:		indent_up();
      195: 3321:		indent_puts( "{" );	/* } for vi */
call    0 returned 195
        -: 3322:		}
        -: 3323:
      971: 3324:	if ( fulltbl )
branch  0 taken 23 (fallthrough)
branch  1 taken 948
       23: 3325:		indent_put2s(
call    0 returned 23
        -: 3326:			"yy_current_state = yy_nxt[yy_current_state][%s];", 
        -: 3327:				char_map );
        -: 3328:
      948: 3329:	else if ( fullspd )
branch  0 taken 92 (fallthrough)
branch  1 taken 856
       92: 3330:		indent_put2s(
call    0 returned 92
        -: 3331:			"yy_current_state += yy_current_state[%s].yy_nxt;",
        -: 3332:				char_map );
        -: 3333:
        -: 3334:	else
      856: 3335:		gen_next_compressed_state( char_map );
call    0 returned 856
        -: 3336:
      971: 3337:	if ( worry_about_NULs && nultrans )
branch  0 taken 543 (fallthrough)
branch  1 taken 428
branch  2 taken 195 (fallthrough)
branch  3 taken 348
        -: 3338:		{
        -: 3339:		/* { for vi */
      195: 3340:		indent_puts( "}" );
call    0 returned 195
      195: 3341:		indent_down();
      195: 3342:		indent_puts( "else" );
call    0 returned 195
      195: 3343:		indent_up();
      195: 3344:		indent_puts(
call    0 returned 195
        -: 3345:			"yy_current_state = yy_NUL_trans[yy_current_state];" );
      195: 3346:		indent_down();
        -: 3347:		}
        -: 3348:
      971: 3349:	if ( fullspd || fulltbl )
branch  0 taken 879 (fallthrough)
branch  1 taken 92
branch  2 taken 23 (fallthrough)
branch  3 taken 856
      115: 3350:		gen_backing_up();
call    0 returned 115
        -: 3351:
      971: 3352:	if ( reject )
branch  0 taken 336 (fallthrough)
branch  1 taken 635
      336: 3353:		indent_puts( "*yy_state_ptr++ = yy_current_state;" );
call    0 returned 336
      971: 3354:	}
        -: 3355:
        -: 3356:
        -: 3357:/* Generate the code to make a NUL transition. */
        -: 3358:
function gen_NUL_trans called 543 returned 100% blocks executed 100%
      543: 3359:void gen_NUL_trans()
        -: 3360:	{ /* NOTE - changes in here should be reflected in gen_next_match() */
        -: 3361:	/* Only generate a definition for "yy_cp" if we'll generate code
        -: 3362:	 * that uses it.  Otherwise lint and the like complain.
        -: 3363:	 */
      543: 3364:	int need_backing_up = (num_backing_up > 0 && ! reject);
branch  0 taken 541 (fallthrough)
branch  1 taken 2
branch  2 taken 373 (fallthrough)
branch  3 taken 168
        -: 3365:
        -: 3366:#ifndef F_AA_3
      543: 3367:	if ( need_backing_up && (! nultrans || fullspd || fulltbl) )
branch  0 taken 373 (fallthrough)
branch  1 taken 170
branch  2 taken 124 (fallthrough)
branch  3 taken 249
branch  4 taken 124 (fallthrough)
branch  5 taken 0
branch  6 taken 21 (fallthrough)
branch  7 taken 103
        -: 3368:#else
        -: 3369:	if ( ( need_backing_up && ! nultrans ) || fullspd || fulltbl )
        -: 3370:#endif
        -: 3371:		/* We're going to need yy_cp lying around for the call
        -: 3372:		 * below to gen_backing_up().
        -: 3373:		 */
      270: 3374:		indent_puts( "register char *yy_cp = yy_c_buf_p;" );
call    0 returned 270
        -: 3375:
      543: 3376:	outc( '\n' );
call    0 returned 543
        -: 3377:
      543: 3378:	if ( nultrans )
branch  0 taken 195 (fallthrough)
branch  1 taken 348
        -: 3379:		{
      195: 3380:		indent_puts(
call    0 returned 195
        -: 3381:			"yy_current_state = yy_NUL_trans[yy_current_state];" );
      195: 3382:		indent_puts( "yy_is_jam = (yy_current_state == 0);" );
call    0 returned 195
        -: 3383:		}
        -: 3384:
      348: 3385:	else if ( fulltbl )
branch  0 taken 1 (fallthrough)
branch  1 taken 347
        -: 3386:		{
        1: 3387:		do_indent();
call    0 returned 1
        1: 3388:		out_dec( "yy_current_state = yy_nxt[yy_current_state][%d];\n",
call    0 returned 1
        -: 3389:			NUL_ec );
        1: 3390:		indent_puts( "yy_is_jam = (yy_current_state <= 0);" );
call    0 returned 1
        -: 3391:		}
        -: 3392:
      347: 3393:	else if ( fullspd )
branch  0 taken 92 (fallthrough)
branch  1 taken 255
        -: 3394:		{
       92: 3395:		do_indent();
call    0 returned 92
       92: 3396:		out_dec( "register int yy_c = %d;\n", NUL_ec );
call    0 returned 92
        -: 3397:
       92: 3398:		indent_puts(
call    0 returned 92
        -: 3399:#ifndef F_JR_2
        -: 3400:		"register yyconst struct yy_trans_info *yy_trans_info;\n" );
        -: 3401:#else
        -: 3402:        "register const struct yy_trans_info *yy_trans_info;\n" );
        -: 3403:#endif
       92: 3404:		indent_puts(
call    0 returned 92
        -: 3405:		"yy_trans_info = &yy_current_state[(unsigned int) yy_c];" );
       92: 3406:		indent_puts( "yy_current_state += yy_trans_info->yy_nxt;" );
call    0 returned 92
        -: 3407:
       92: 3408:		indent_puts(
call    0 returned 92
        -: 3409:			"yy_is_jam = (yy_trans_info->yy_verify != yy_c);" );
        -: 3410:		}
        -: 3411:
        -: 3412:	else
        -: 3413:		{
        -: 3414:		char NUL_ec_str[20];
        -: 3415:
      255: 3416:		(void) sprintf( NUL_ec_str, "%d", NUL_ec );
      255: 3417:		gen_next_compressed_state( NUL_ec_str );
call    0 returned 255
        -: 3418:
      255: 3419:		if ( reject )
branch  0 taken 98 (fallthrough)
branch  1 taken 157
       98: 3420:			indent_puts( "*yy_state_ptr++ = yy_current_state;" );
call    0 returned 98
        -: 3421:
      255: 3422:		do_indent();
call    0 returned 255
        -: 3423:
      255: 3424:		out_dec( "yy_is_jam = (yy_current_state == %d);\n", jamstate );
call    0 returned 255
        -: 3425:		}
        -: 3426:
        -: 3427:	/* If we've entered an accepting state, back up; note that
        -: 3428:	 * compressed tables have *already* done such backing up, so
        -: 3429:	 * we needn't bother with it again.
        -: 3430:	 */
      543: 3431:	if ( need_backing_up && (fullspd || fulltbl) )
branch  0 taken 373 (fallthrough)
branch  1 taken 170
branch  2 taken 281 (fallthrough)
branch  3 taken 92
branch  4 taken 21 (fallthrough)
branch  5 taken 260
        -: 3432:		{
      113: 3433:		outc( '\n' );
call    0 returned 113
      113: 3434:		indent_puts( "if ( ! yy_is_jam )" );
call    0 returned 113
      113: 3435:		indent_up();
      113: 3436:		indent_puts( "{" );
call    0 returned 113
      113: 3437:		gen_backing_up();
call    0 returned 113
      113: 3438:		indent_puts( "}" );
call    0 returned 113
      113: 3439:		indent_down();
        -: 3440:		}
      543: 3441:	}
        -: 3442:
        -: 3443:
        -: 3444:/* Generate the code to find the start state. */
        -: 3445:
function gen_start_state called 1086 returned 100% blocks executed 100%
     1086: 3446:void gen_start_state()
        -: 3447:	{
     1086: 3448:	if ( fullspd )
branch  0 taken 184 (fallthrough)
branch  1 taken 902
        -: 3449:		{
      184: 3450:		if ( bol_needed )
branch  0 taken 36 (fallthrough)
branch  1 taken 148
        -: 3451:			{
       36: 3452:			indent_puts(
call    0 returned 36
        -: 3453:	"yy_current_state = yy_start_state_list[yy_start + YY_AT_BOL()];" );
        -: 3454:			}
        -: 3455:		else
      148: 3456:			indent_puts(
call    0 returned 148
        -: 3457:			"yy_current_state = yy_start_state_list[yy_start];" );
        -: 3458:		}
        -: 3459:
        -: 3460:	else
        -: 3461:		{
      902: 3462:		indent_puts( "yy_current_state = yy_start;" );
call    0 returned 902
        -: 3463:
      902: 3464:		if ( bol_needed )
branch  0 taken 162 (fallthrough)
branch  1 taken 740
      162: 3465:			indent_puts( "yy_current_state += YY_AT_BOL();" );
call    0 returned 162
        -: 3466:
      902: 3467:		if ( reject )
branch  0 taken 336 (fallthrough)
branch  1 taken 566
        -: 3468:			{
        -: 3469:			/* Set up for storing up states. */
      336: 3470:			indent_puts( "yy_state_ptr = yy_state_buf;" );
call    0 returned 336
      336: 3471:			indent_puts( "*yy_state_ptr++ = yy_current_state;" );
call    0 returned 336
        -: 3472:			}
        -: 3473:		}
     1086: 3474:	}
        -: 3475:
        -: 3476:
        -: 3477:/* gentabs - generate data statements for the transition tables */
        -: 3478:
function gentabs called 428 returned 100% blocks executed 100%
      428: 3479:void gentabs()
        -: 3480:	{
        -: 3481:	int i, j, k, *accset, nacc, *acc_array, total_states;
      428: 3482:	int end_of_buffer_action = num_rules + 1;
        -: 3483:
      428: 3484:	acc_array = allocate_integer_array( current_max_dfas );
call    0 returned 428
      428: 3485:	nummt = 0;
        -: 3486:
        -: 3487:	/* The compressed table format jams by entering the "jam state",
        -: 3488:	 * losing information about the previous state in the process.
        -: 3489:	 * In order to recover the previous state, we effectively need
        -: 3490:	 * to keep backing-up information.
        -: 3491:	 */
      428: 3492:	++num_backing_up;
        -: 3493:
      428: 3494:	if ( reject )
branch  0 taken 168 (fallthrough)
branch  1 taken 260
        -: 3495:		{
        -: 3496:		/* Write out accepting list and pointer list.
        -: 3497:		 *
        -: 3498:		 * First we generate the "yy_acclist" array.  In the process,
        -: 3499:		 * we compute the indices that will go into the "yy_accept"
        -: 3500:		 * array, and save the indices in the dfaacc array.
        -: 3501:		 */
        -: 3502:		int EOB_accepting_list[2];
        -: 3503:
        -: 3504:		/* Set up accepting structures for the End Of Buffer state. */
      168: 3505:		EOB_accepting_list[0] = 0;
      168: 3506:		EOB_accepting_list[1] = end_of_buffer_action;
      168: 3507:		accsiz[end_of_buffer_state] = 1;
      168: 3508:		dfaacc[end_of_buffer_state].dfaacc_set = EOB_accepting_list;
        -: 3509:
      168: 3510:		out_str_dec( long_align ? C_long_decl : C_short_decl,
call    0 returned 168
      168: 3511:			"yy_acclist", MAX( numas, 1 ) + 1 );
branch  0 taken 79 (fallthrough)
branch  1 taken 89
        -: 3512:
      168: 3513:		j = 1;	/* index into "yy_acclist" array */
        -: 3514:
     5347: 3515:		for ( i = 1; i <= lastdfa; ++i )
branch  0 taken 5179
branch  1 taken 168 (fallthrough)
        -: 3516:			{
     5179: 3517:			acc_array[i] = j;
        -: 3518:
     5179: 3519:			if ( accsiz[i] != 0 )
branch  0 taken 4209 (fallthrough)
branch  1 taken 970
        -: 3520:				{
     4209: 3521:				accset = dfaacc[i].dfaacc_set;
     4209: 3522:				nacc = accsiz[i];
        -: 3523:
     4209: 3524:				if ( trace )
branch  0 taken 1224 (fallthrough)
branch  1 taken 2985
     1224: 3525:					fprintf( err,
call    0 returned 1224
        -: 3526:						_( "state # %d accepts: " ),
        -: 3527:						i );
        -: 3528:
    14774: 3529:				for ( k = 1; k <= nacc; ++k )
branch  0 taken 10565
branch  1 taken 4209 (fallthrough)
        -: 3530:					{
    10565: 3531:					int accnum = accset[k];
        -: 3532:
    10565: 3533:					++j;
        -: 3534:
    10565: 3535:					if ( variable_trailing_context_rules &&
branch  0 taken 607 (fallthrough)
branch  1 taken 9958
      607: 3536:					  ! (accnum & YY_TRAILING_HEAD_MASK) &&
branch  0 taken 541 (fallthrough)
branch  1 taken 66
branch  2 taken 541 (fallthrough)
branch  3 taken 0
      541: 3537:					   accnum > 0 && accnum <= num_rules &&
branch  0 taken 508 (fallthrough)
branch  1 taken 33
      508: 3538:					  rule_type[accnum] == RULE_VARIABLE )
branch  0 taken 66 (fallthrough)
branch  1 taken 442
        -: 3539:						{
        -: 3540:						/* Special hack to flag
        -: 3541:						 * accepting number as part
        -: 3542:						 * of trailing context rule.
        -: 3543:						 */
       66: 3544:						accnum |= YY_TRAILING_MASK;
        -: 3545:						}
        -: 3546:
    10565: 3547:					mkdata( accnum );
call    0 returned 10565
        -: 3548:
    10565: 3549:					if ( trace )
branch  0 taken 6155 (fallthrough)
branch  1 taken 4410
        -: 3550:						{
     6155: 3551:						fprintf( err, "[%d]",
     6155: 3552:							accset[k] );
call    0 returned 6155
        -: 3553:
     6155: 3554:						if ( k < nacc )
branch  0 taken 4931 (fallthrough)
branch  1 taken 1224
     4931: 3555:							fputs( ", ", err );
call    0 returned 4931
        -: 3556:						else
     1224: 3557:							putc( '\n', err );
call    0 returned 1224
        -: 3558:						}
        -: 3559:					}
        -: 3560:				}
        -: 3561:			}
        -: 3562:
        -: 3563:		/* add accepting number for the "jam" state */
      168: 3564:		acc_array[i] = j;
        -: 3565:
      168: 3566:		dataend();
call    0 returned 168
        -: 3567:		}
        -: 3568:
        -: 3569:	else
        -: 3570:		{
      260: 3571:		dfaacc[end_of_buffer_state].dfaacc_state = end_of_buffer_action;
        -: 3572:
     6347: 3573:		for ( i = 1; i <= lastdfa; ++i )
branch  0 taken 6087
branch  1 taken 260 (fallthrough)
     6087: 3574:			acc_array[i] = dfaacc[i].dfaacc_state;
        -: 3575:
        -: 3576:		/* add accepting number for jam state */
      260: 3577:		acc_array[i] = 0;
        -: 3578:		}
        -: 3579:
        -: 3580:	/* Spit out "yy_accept" array.  If we're doing "reject", it'll be
        -: 3581:	 * pointers into the "yy_acclist" array.  Otherwise it's actual
        -: 3582:	 * accepting numbers.  In either case, we just dump the numbers.
        -: 3583:	 */
        -: 3584:
        -: 3585:	/* "lastdfa + 2" is the size of "yy_accept"; includes room for C arrays
        -: 3586:	 * beginning at 0 and for "jam" state.
        -: 3587:	 */
      428: 3588:	k = lastdfa + 2;
        -: 3589:
      428: 3590:	if ( reject )
branch  0 taken 168 (fallthrough)
branch  1 taken 260
        -: 3591:		/* We put a "cap" on the table associating lists of accepting
        -: 3592:		 * numbers with state numbers.  This is needed because we tell
        -: 3593:		 * where the end of an accepting list is by looking at where
        -: 3594:		 * the list for the next state starts.
        -: 3595:		 */
      168: 3596:		++k;
        -: 3597:
      428: 3598:	out_str_dec( long_align ? C_long_decl : C_short_decl, "yy_accept", k );
branch  0 taken 200 (fallthrough)
branch  1 taken 228
call    2 returned 428
        -: 3599:
    11694: 3600:	for ( i = 1; i <= lastdfa; ++i )
branch  0 taken 11266
branch  1 taken 428 (fallthrough)
        -: 3601:		{
    11266: 3602:		mkdata( acc_array[i] );
call    0 returned 11266
        -: 3603:
    11266: 3604:		if ( ! reject && trace && acc_array[i] )
branch  0 taken 6087 (fallthrough)
branch  1 taken 5179
branch  2 taken 129 (fallthrough)
branch  3 taken 5958
branch  4 taken 93 (fallthrough)
branch  5 taken 36
       93: 3605:			fprintf( err, _( "state # %d accepts: [%d]\n" ),
       93: 3606:				i, acc_array[i] );
call    0 returned 93
        -: 3607:		}
        -: 3608:
        -: 3609:	/* Add entry for "jam" state. */
      428: 3610:	mkdata( acc_array[i] );
call    0 returned 428
        -: 3611:
      428: 3612:	if ( reject )
branch  0 taken 168 (fallthrough)
branch  1 taken 260
        -: 3613:		/* Add "cap" for the list. */
      168: 3614:		mkdata( acc_array[i] );
call    0 returned 168
        -: 3615:
      428: 3616:	dataend();
call    0 returned 428
        -: 3617:
      428: 3618:	if ( useecs )
branch  0 taken 255 (fallthrough)
branch  1 taken 173
      255: 3619:		genecs();
call    0 returned 255
        -: 3620:
      428: 3621:	if ( usemecs )
branch  0 taken 215 (fallthrough)
branch  1 taken 213
        -: 3622:		{
        -: 3623:		/* Write out meta-equivalence classes (used to index
        -: 3624:		 * templates with).
        -: 3625:		 */
        -: 3626:
      215: 3627:		if ( trace )
branch  0 taken 13 (fallthrough)
branch  1 taken 202
       13: 3628:			fputs( _( "\n\nMeta-Equivalence Classes:\n" ),
call    0 returned 13
        -: 3629:			      err );
        -: 3630:
      215: 3631:		out_str_dec( C_int_decl, "yy_meta", numecs + 1 );
call    0 returned 215
        -: 3632:
    22533: 3633:		for ( i = 1; i <= numecs; ++i )
branch  0 taken 22318
branch  1 taken 215 (fallthrough)
        -: 3634:			{
    22318: 3635:			if ( trace )
branch  0 taken 204 (fallthrough)
branch  1 taken 22114
      204: 3636:				fprintf( err, "%d = %d\n",
      204: 3637:					i, ABS( tecbck[i] ) );
call    0 returned 204
        -: 3638:
    22318: 3639:			mkdata( ABS( tecbck[i] ) );
call    0 returned 22318
        -: 3640:			}
        -: 3641:
      215: 3642:		dataend();
call    0 returned 215
        -: 3643:		}
        -: 3644:
      428: 3645:	total_states = lastdfa + numtemps;
        -: 3646:
      428: 3647:	out_str_dec( (tblend >= MAX_SHORT || long_align) ?
branch  0 taken 428 (fallthrough)
branch  1 taken 0
branch  2 taken 200 (fallthrough)
branch  3 taken 228
call    4 returned 428
        -: 3648:			C_long_decl : C_short_decl,
        -: 3649:		"yy_base", total_states + 1 );
        -: 3650:
    11694: 3651:	for ( i = 1; i <= lastdfa; ++i )
branch  0 taken 11266
branch  1 taken 428 (fallthrough)
        -: 3652:		{
    11266: 3653:		register int d = def[i];
        -: 3654:
    11266: 3655:		if ( base[i] == JAMSTATE )
branch  0 taken 1943 (fallthrough)
branch  1 taken 9323
     1943: 3656:			base[i] = jambase;
        -: 3657:
    11266: 3658:		if ( d == JAMSTATE )
branch  0 taken 7474 (fallthrough)
branch  1 taken 3792
     7474: 3659:			def[i] = jamstate;
        -: 3660:
     3792: 3661:		else if ( d < 0 )
branch  0 taken 2479 (fallthrough)
branch  1 taken 1313
        -: 3662:			{
        -: 3663:			/* Template reference. */
     2479: 3664:			++tmpuses;
     2479: 3665:			def[i] = lastdfa - d + 1;
        -: 3666:			}
        -: 3667:
    11266: 3668:		mkdata( base[i] );
call    0 returned 11266
        -: 3669:		}
        -: 3670:
        -: 3671:	/* Generate jam state's base index. */
      428: 3672:	mkdata( base[i] );
call    0 returned 428
        -: 3673:
     1053: 3674:	for ( ++i /* skip jam state */; i <= total_states; ++i )
branch  0 taken 625
branch  1 taken 428 (fallthrough)
        -: 3675:		{
      625: 3676:		mkdata( base[i] );
call    0 returned 625
      625: 3677:		def[i] = jamstate;
        -: 3678:		}
        -: 3679:
      428: 3680:	dataend();
call    0 returned 428
        -: 3681:
      428: 3682:	out_str_dec( (total_states >= MAX_SHORT || long_align) ?
branch  0 taken 428 (fallthrough)
branch  1 taken 0
branch  2 taken 200 (fallthrough)
branch  3 taken 228
call    4 returned 428
        -: 3683:			C_long_decl : C_short_decl,
        -: 3684:		"yy_def", total_states + 1 );
        -: 3685:
    12747: 3686:	for ( i = 1; i <= total_states; ++i )
branch  0 taken 12319
branch  1 taken 428 (fallthrough)
    12319: 3687:		mkdata( def[i] );
call    0 returned 12319
        -: 3688:
      428: 3689:	dataend();
call    0 returned 428
        -: 3690:
      428: 3691:	out_str_dec( (total_states >= MAX_SHORT || long_align) ?
branch  0 taken 428 (fallthrough)
branch  1 taken 0
branch  2 taken 200 (fallthrough)
branch  3 taken 228
call    4 returned 428
        -: 3692:			C_long_decl : C_short_decl,
        -: 3693:		"yy_nxt", tblend + 1 );
        -: 3694:
   159041: 3695:	for ( i = 1; i <= tblend; ++i )
branch  0 taken 158613
branch  1 taken 428 (fallthrough)
        -: 3696:		{
        -: 3697:		/* Note, the order of the following test is important.
        -: 3698:		 * If chk[i] is 0, then nxt[i] is undefined.
        -: 3699:		 */
   158613: 3700:		if ( chk[i] == 0 || nxt[i] == 0 )
branch  0 taken 137420 (fallthrough)
branch  1 taken 21193
branch  2 taken 48234 (fallthrough)
branch  3 taken 89186
    69427: 3701:			nxt[i] = jamstate;	/* new state is the JAM state */
        -: 3702:
   158613: 3703:		mkdata( nxt[i] );
call    0 returned 158613
        -: 3704:		}
        -: 3705:
      428: 3706:	dataend();
call    0 returned 428
        -: 3707:
      428: 3708:	out_str_dec( (total_states >= MAX_SHORT || long_align) ?
branch  0 taken 428 (fallthrough)
branch  1 taken 0
branch  2 taken 200 (fallthrough)
branch  3 taken 228
call    4 returned 428
        -: 3709:			C_long_decl : C_short_decl,
        -: 3710:		"yy_chk", tblend + 1 );
        -: 3711:
   159041: 3712:	for ( i = 1; i <= tblend; ++i )
branch  0 taken 158613
branch  1 taken 428 (fallthrough)
        -: 3713:		{
   158613: 3714:		if ( chk[i] == 0 )
branch  0 taken 21193 (fallthrough)
branch  1 taken 137420
    21193: 3715:			++nummt;
        -: 3716:
   158613: 3717:		mkdata( chk[i] );
call    0 returned 158613
        -: 3718:		}
        -: 3719:
      428: 3720:	dataend();
call    0 returned 428
      428: 3721:	}
        -: 3722:
        -: 3723:
        -: 3724:/* Write out a formatted string (with a secondary string argument) at the
        -: 3725: * current indentation level, adding a final newline.
        -: 3726: */
        -: 3727:
function indent_put2s called 1525 returned 100% blocks executed 100%
     1525: 3728:void indent_put2s( fmt, arg )
        -: 3729:char fmt[], arg[];
        -: 3730:	{
     1525: 3731:	do_indent();
call    0 returned 1525
     1525: 3732:	out_str( fmt, arg );
call    0 returned 1525
     1525: 3733:	outn( "" );
call    0 returned 1525
     1525: 3734:	}
        -: 3735:
        -: 3736:
        -: 3737:/* Write out a string at the current indentation level, adding a final
        -: 3738: * newline.
        -: 3739: */
        -: 3740:
function indent_puts called 38980 returned 100% blocks executed 100%
    38980: 3741:void indent_puts( str )
        -: 3742:char str[];
        -: 3743:	{
    38980: 3744:	do_indent();
call    0 returned 38980
    38980: 3745:	outn( str );
call    0 returned 38980
    38980: 3746:	}
        -: 3747:
        -: 3748:
        -: 3749:/* make_tables - generate transition tables and finishes generating output file
        -: 3750: */
        -: 3751:
function make_tables called 543 returned 100% blocks executed 97%
      543: 3752:void make_tables()
        -: 3753:	{
        -: 3754:	register int i;
      543: 3755:	int did_eof_rule = false;
        -: 3756:
      543: 3757:	skelout();
call    0 returned 543
        -: 3758:
        -: 3759:	/* First, take care of YY_DO_BEFORE_ACTION depending on yymore
        -: 3760:	 * being used.
        -: 3761:	 */
      543: 3762:	set_indent( 1 );
        -: 3763:
      543: 3764:	if ( yymore_used )
branch  0 taken 166 (fallthrough)
branch  1 taken 377
        -: 3765:		{
      166: 3766:		indent_puts( "yytext_ptr -= yy_more_len; \\" );
call    0 returned 166
      166: 3767:		indent_puts( "yyleng = (int) (yy_cp - yytext_ptr); \\" );
call    0 returned 166
        -: 3768:		}
        -: 3769:
        -: 3770:	else
      377: 3771:		indent_puts( "yyleng = (int) (yy_cp - yy_bp); \\" );
call    0 returned 377
        -: 3772:
        -: 3773:	/* Now also deal with copying yytext_ptr to yytext if needed. */
      543: 3774:	skelout();
call    0 returned 543
      543: 3775:	if ( yytext_is_array )
branch  0 taken 161 (fallthrough)
branch  1 taken 382
        -: 3776:		{
      161: 3777:		indent_puts( "if ( yyleng >= YYLMAX ) \\" );
call    0 returned 161
      161: 3778:		indent_up();
      161: 3779:		indent_puts(
call    0 returned 161
        -: 3780:		"YY_FATAL_ERROR( \"token too large, exceeds YYLMAX\" ); \\" );
      161: 3781:		indent_down();
      161: 3782:		indent_puts(
call    0 returned 161
        -: 3783:		"yy_flex_strncpy( yytext, yytext_ptr, yyleng + 1 ); \\" );
        -: 3784:		}
        -: 3785:
      543: 3786:	set_indent( 0 );
        -: 3787:
      543: 3788:	skelout();
call    0 returned 543
        -: 3789:
        -: 3790:
      543: 3791:	out_dec( "#define YY_NUM_RULES %d\n", num_rules );
call    0 returned 543
      543: 3792:	out_dec( "#define YY_END_OF_BUFFER %d\n", num_rules + 1 );
call    0 returned 543
        -: 3793:
      543: 3794:	if ( fullspd )
branch  0 taken 92 (fallthrough)
branch  1 taken 451
        -: 3795:		{
        -: 3796:		/* Need to define the transet type as a size large
        -: 3797:		 * enough to hold the biggest offset.
        -: 3798:		 */
       92: 3799:		int total_table_size = tblend + numecs + 1;
       92: 3800:		char *trans_offset_type =
       92: 3801:			(total_table_size >= MAX_SHORT || long_align) ?
branch  0 taken 40 (fallthrough)
branch  1 taken 52
      184: 3802:				"long" : "short";
branch  0 taken 92 (fallthrough)
branch  1 taken 0
        -: 3803:
       92: 3804:		set_indent( 0 );
       92: 3805:		indent_puts( "struct yy_trans_info" );
call    0 returned 92
       92: 3806:		indent_up();
       92: 3807:		indent_puts( "{" ); 	/* } for vi */
call    0 returned 92
        -: 3808:
       92: 3809:		if ( long_align )
branch  0 taken 40 (fallthrough)
branch  1 taken 52
       40: 3810:			indent_puts( "long yy_verify;" );
call    0 returned 40
        -: 3811:		else
       52: 3812:			indent_puts( "short yy_verify;" );
call    0 returned 52
        -: 3813:
        -: 3814:		/* In cases where its sister yy_verify *is* a "yes, there is
        -: 3815:		 * a transition", yy_nxt is the offset (in records) to the
        -: 3816:		 * next state.  In most cases where there is no transition,
        -: 3817:		 * the value of yy_nxt is irrelevant.  If yy_nxt is the -1th
        -: 3818:		 * record of a state, though, then yy_nxt is the action number
        -: 3819:		 * for that state.
        -: 3820:		 */
        -: 3821:
       92: 3822:		indent_put2s( "%s yy_nxt;", trans_offset_type );
call    0 returned 92
       92: 3823:		indent_puts( "};" );
call    0 returned 92
       92: 3824:		indent_down();
        -: 3825:		}
        -: 3826:
      543: 3827:	if ( fullspd )
branch  0 taken 92 (fallthrough)
branch  1 taken 451
       92: 3828:		genctbl();
call    0 returned 92
      451: 3829:	else if ( fulltbl )
branch  0 taken 23 (fallthrough)
branch  1 taken 428
       23: 3830:		genftbl();
call    0 returned 23
        -: 3831:	else
      428: 3832:		gentabs();
call    0 returned 428
        -: 3833:
        -: 3834:	/* Definitions for backing up.  We don't need them if REJECT
        -: 3835:	 * is being used because then we use an alternative backin-up
        -: 3836:	 * technique instead.
        -: 3837:	 */
      543: 3838:	if ( num_backing_up > 0 && ! reject )
branch  0 taken 541 (fallthrough)
branch  1 taken 2
branch  2 taken 373 (fallthrough)
branch  3 taken 168
        -: 3839:		{
      373: 3840:		if ( ! C_plus_plus )
branch  0 taken 373 (fallthrough)
branch  1 taken 0
        -: 3841:			{
      373: 3842:			indent_puts(
call    0 returned 373
        -: 3843:			"static yy_state_type yy_last_accepting_state;" );
      373: 3844:			indent_puts(
call    0 returned 373
        -: 3845:				"static char *yy_last_accepting_cpos;\n" );
        -: 3846:			}
        -: 3847:		}
        -: 3848:
      543: 3849:	if ( nultrans )
branch  0 taken 195 (fallthrough)
branch  1 taken 348
        -: 3850:		{
      195: 3851:		out_str_dec( C_state_decl, "yy_NUL_trans", lastdfa + 1 );
call    0 returned 195
        -: 3852:
     4899: 3853:		for ( i = 1; i <= lastdfa; ++i )
branch  0 taken 4704
branch  1 taken 195 (fallthrough)
        -: 3854:			{
     4704: 3855:			if ( fullspd )
branch  0 taken 0 (fallthrough)
branch  1 taken 4704
    #####: 3856:				out_dec( "    &yy_transition[%d],\n", base[i] );
call    0 never executed
        -: 3857:			else
     4704: 3858:				mkdata( nultrans[i] );
call    0 returned 4704
        -: 3859:			}
        -: 3860:
      195: 3861:		dataend();
call    0 returned 195
        -: 3862:		}
        -: 3863:
      543: 3864:	if ( ddebug )
branch  0 taken 252 (fallthrough)
branch  1 taken 291
        -: 3865:		{ /* Spit out table mapping rules to line numbers. */
      252: 3866:		if ( ! C_plus_plus )
branch  0 taken 252 (fallthrough)
branch  1 taken 0
        -: 3867:			{
      252: 3868:			indent_puts( "extern int yy_flex_debug;" );
call    0 returned 252
      252: 3869:			indent_puts( "int yy_flex_debug = 1;\n" );
call    0 returned 252
        -: 3870:			}
        -: 3871:
      252: 3872:		out_str_dec( long_align ? C_long_decl : C_short_decl,
branch  0 taken 120 (fallthrough)
branch  1 taken 132
call    2 returned 252
        -: 3873:			"yy_rule_linenum", num_rules );
     1531: 3874:		for ( i = 1; i < num_rules; ++i )
branch  0 taken 1279
branch  1 taken 252 (fallthrough)
     1279: 3875:			mkdata( rule_linenum[i] );
call    0 returned 1279
      252: 3876:		dataend();
call    0 returned 252
        -: 3877:		}
        -: 3878:
      543: 3879:	if ( reject )
branch  0 taken 168 (fallthrough)
branch  1 taken 375
        -: 3880:		{
        -: 3881:		/* Declare state buffer variables. */
      168: 3882:		if ( ! C_plus_plus )
branch  0 taken 168 (fallthrough)
branch  1 taken 0
        -: 3883:			{
      168: 3884:			outn(
call    0 returned 168
        -: 3885:	"static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;" );
      168: 3886:			outn( "static char *yy_full_match;" );
call    0 returned 168
      168: 3887:			outn( "static int yy_lp;" );
call    0 returned 168
        -: 3888:			}
        -: 3889:
      168: 3890:		if ( variable_trailing_context_rules )
branch  0 taken 33 (fallthrough)
branch  1 taken 135
        -: 3891:			{
       33: 3892:			if ( ! C_plus_plus )
branch  0 taken 33 (fallthrough)
branch  1 taken 0
        -: 3893:				{
       33: 3894:				outn(
call    0 returned 33
        -: 3895:				"static int yy_looking_for_trail_begin = 0;" );
       33: 3896:				outn( "static int yy_full_lp;" );
call    0 returned 33
       33: 3897:				outn( "static int *yy_full_state;" );
call    0 returned 33
        -: 3898:				}
        -: 3899:
       33: 3900:			out_hex( "#define YY_TRAILING_MASK 0x%x\n",
call    0 returned 33
        -: 3901:				(unsigned int) YY_TRAILING_MASK );
       33: 3902:			out_hex( "#define YY_TRAILING_HEAD_MASK 0x%x\n",
call    0 returned 33
        -: 3903:				(unsigned int) YY_TRAILING_HEAD_MASK );
        -: 3904:			}
        -: 3905:
      168: 3906:		outn( "#define REJECT \\" );
call    0 returned 168
      168: 3907:		outn( "{ \\" );		/* } for vi */
call    0 returned 168
      168: 3908:		outn(
call    0 returned 168
        -: 3909:	"*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \\" );
      168: 3910:		outn(
call    0 returned 168
        -: 3911:	"yy_cp = yy_full_match; /* restore poss. backed-over text */ \\" );
        -: 3912:
      168: 3913:		if ( variable_trailing_context_rules )
branch  0 taken 33 (fallthrough)
branch  1 taken 135
        -: 3914:			{
       33: 3915:			outn(
call    0 returned 33
        -: 3916:		"yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \\" );
       33: 3917:			outn(
call    0 returned 33
        -: 3918:		"yy_state_ptr = yy_full_state; /* restore orig. state */ \\" );
       33: 3919:			outn(
call    0 returned 33
        -: 3920:	"yy_current_state = *yy_state_ptr; /* restore curr. state */ \\" );
        -: 3921:			}
        -: 3922:
      168: 3923:		outn( "++yy_lp; \\" );
call    0 returned 168
      168: 3924:		outn( "goto find_rule; \\" );
call    0 returned 168
        -: 3925:		/* { for vi */
      168: 3926:		outn( "}" );
call    0 returned 168
        -: 3927:		}
        -: 3928:
        -: 3929:	else
        -: 3930:		{
      375: 3931:		outn(
call    0 returned 375
        -: 3932:		"/* The intent behind this definition is that it'll catch" );
      375: 3933:		outn( " * any uses of REJECT which flex missed." );
call    0 returned 375
      375: 3934:		outn( " */" );
call    0 returned 375
      375: 3935:		outn( "#define REJECT reject_used_but_not_detected" );
call    0 returned 375
        -: 3936:		}
        -: 3937:
      543: 3938:	if ( yymore_used )
branch  0 taken 166 (fallthrough)
branch  1 taken 377
        -: 3939:		{
      166: 3940:		if ( ! C_plus_plus )
branch  0 taken 166 (fallthrough)
branch  1 taken 0
        -: 3941:			{
      166: 3942:			indent_puts( "static int yy_more_flag = 0;" );
call    0 returned 166
      166: 3943:			indent_puts( "static int yy_more_len = 0;" );
call    0 returned 166
        -: 3944:			}
        -: 3945:
      166: 3946:		indent_puts( "#define yymore() (yy_more_flag = 1)" );
call    0 returned 166
      166: 3947:		indent_puts( "#define YY_MORE_ADJ yy_more_len" );
call    0 returned 166
        -: 3948:		}
        -: 3949:
        -: 3950:	else
        -: 3951:		{
      377: 3952:		indent_puts( "#define yymore() yymore_used_but_not_detected" );
call    0 returned 377
      377: 3953:		indent_puts( "#define YY_MORE_ADJ 0" );
call    0 returned 377
        -: 3954:		}
        -: 3955:
      543: 3956:	if ( ! C_plus_plus )
branch  0 taken 543 (fallthrough)
branch  1 taken 0
        -: 3957:		{
      543: 3958:		if ( yytext_is_array )
branch  0 taken 161 (fallthrough)
branch  1 taken 382
        -: 3959:			{
      161: 3960:			outn( "#ifndef YYLMAX" );
call    0 returned 161
      161: 3961:			outn( "#define YYLMAX 8192" );
call    0 returned 161
      161: 3962:			outn( "#endif\n" );
call    0 returned 161
      161: 3963:			outn( "char yytext[YYLMAX];" );
call    0 returned 161
      161: 3964:			outn( "char *yytext_ptr;" );
call    0 returned 161
        -: 3965:			}
        -: 3966:
        -: 3967:		else
      382: 3968:			outn( "char *yytext;" );
call    0 returned 382
        -: 3969:		}
        -: 3970:
      543: 3971:	out( &action_array[defs1_offset] );
call    0 returned 543
        -: 3972:
      543: 3973:	line_directive_out( stdout, 0 );
call    0 returned 543
        -: 3974:
      543: 3975:	skelout();
call    0 returned 543
        -: 3976:
      543: 3977:	if ( ! C_plus_plus )
branch  0 taken 543 (fallthrough)
branch  1 taken 0
        -: 3978:		{
      543: 3979:		if ( use_read )
branch  0 taken 240 (fallthrough)
branch  1 taken 303
        -: 3980:			{
      240: 3981:			outn(
call    0 returned 240
        -: 3982:"\tif ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \\" );
      240: 3983:			outn(
call    0 returned 240
        -: 3984:		"\t\tYY_FATAL_ERROR( \"input in flex scanner failed\" );" );
        -: 3985:			}
        -: 3986:
        -: 3987:		else
        -: 3988:			{
      303: 3989:			outn(
call    0 returned 303
        -: 3990:			"\tif ( yy_current_buffer->yy_is_interactive ) \\" );
      303: 3991:			outn( "\t\t{ \\" );
call    0 returned 303
      303: 3992:			outn( "\t\tint c = '*', n; \\" );
call    0 returned 303
      303: 3993:			outn( "\t\tfor ( n = 0; n < max_size && \\" );
call    0 returned 303
      303: 3994:	outn( "\t\t\t     (c = getc( yyin )) != EOF && c != '\\n'; ++n ) \\" );
call    0 returned 303
      303: 3995:			outn( "\t\t\tbuf[n] = (char) c; \\" );
call    0 returned 303
      303: 3996:			outn( "\t\tif ( c == '\\n' ) \\" );
call    0 returned 303
      303: 3997:			outn( "\t\t\tbuf[n++] = (char) c; \\" );
call    0 returned 303
      303: 3998:			outn( "\t\tif ( c == EOF && ferror( yyin ) ) \\" );
call    0 returned 303
      303: 3999:			outn(
call    0 returned 303
        -: 4000:	"\t\t\tYY_FATAL_ERROR( \"input in flex scanner failed\" ); \\" );
      303: 4001:			outn( "\t\tresult = n; \\" );
call    0 returned 303
      303: 4002:			outn( "\t\t} \\" );
call    0 returned 303
      303: 4003:			outn(
call    0 returned 303
        -: 4004:	"\telse if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \\" );
      303: 4005:			outn( "\t\t  && ferror( yyin ) ) \\" );
call    0 returned 303
      303: 4006:			outn(
call    0 returned 303
        -: 4007:		"\t\tYY_FATAL_ERROR( \"input in flex scanner failed\" );" );
        -: 4008:			}
        -: 4009:		}
        -: 4010:
      543: 4011:	skelout();
call    0 returned 543
        -: 4012:
      543: 4013:	indent_puts( "#define YY_RULE_SETUP \\" );
call    0 returned 543
      543: 4014:	indent_up();
      543: 4015:	if ( bol_needed )
branch  0 taken 99 (fallthrough)
branch  1 taken 444
        -: 4016:		{
       99: 4017:		indent_puts( "if ( yyleng > 0 ) \\" );
call    0 returned 99
       99: 4018:		indent_up();
       99: 4019:		indent_puts( "yy_current_buffer->yy_at_bol = \\" );
call    0 returned 99
       99: 4020:		indent_puts( "\t\t(yytext[yyleng - 1] == '\\n'); \\" );
call    0 returned 99
       99: 4021:		indent_down();
        -: 4022:		}
      543: 4023:	indent_puts( "YY_USER_ACTION" );
call    0 returned 543
      543: 4024:	indent_down();
        -: 4025:
      543: 4026:	skelout();
call    0 returned 543
        -: 4027:
        -: 4028:	/* Copy prolog to output file. */
      543: 4029:	out( &action_array[prolog_offset] );
call    0 returned 543
        -: 4030:
      543: 4031:	line_directive_out( stdout, 0 );
call    0 returned 543
        -: 4032:
      543: 4033:	skelout();
call    0 returned 543
        -: 4034:
      543: 4035:	set_indent( 2 );
        -: 4036:
      543: 4037:	if ( yymore_used )
branch  0 taken 166 (fallthrough)
branch  1 taken 377
        -: 4038:		{
      166: 4039:		indent_puts( "yy_more_len = 0;" );
call    0 returned 166
      166: 4040:		indent_puts( "if ( yy_more_flag )" );
call    0 returned 166
      166: 4041:		indent_up();
      166: 4042:		indent_puts( "{" );
call    0 returned 166
      166: 4043:		indent_puts( "yy_more_len = yyleng;" );
call    0 returned 166
      166: 4044:		indent_puts( "yy_more_flag = 0;" );
call    0 returned 166
      166: 4045:		indent_puts( "}" );
call    0 returned 166
      166: 4046:		indent_down();
        -: 4047:		}
        -: 4048:
      543: 4049:	skelout();
call    0 returned 543
        -: 4050:
      543: 4051:	gen_start_state();
call    0 returned 543
        -: 4052:
        -: 4053:	/* Note, don't use any indentation. */
      543: 4054:	outn( "yy_match:" );
call    0 returned 543
      543: 4055:	gen_next_match();
call    0 returned 543
        -: 4056:
      543: 4057:	skelout();
call    0 returned 543
      543: 4058:	set_indent( 2 );
      543: 4059:	gen_find_action();
call    0 returned 543
        -: 4060:
      543: 4061:	skelout();
call    0 returned 543
      543: 4062:	if ( do_yylineno )
branch  0 taken 161 (fallthrough)
branch  1 taken 382
        -: 4063:		{
      161: 4064:		indent_puts( "if ( yy_act != YY_END_OF_BUFFER )" );
call    0 returned 161
      161: 4065:		indent_up();
      161: 4066:		indent_puts( "{" );
call    0 returned 161
      161: 4067:		indent_puts( "int yyl;" );
call    0 returned 161
      161: 4068:		indent_puts( "for ( yyl = 0; yyl < yyleng; ++yyl )" );
call    0 returned 161
      161: 4069:		indent_up();
      161: 4070:		indent_puts( "if ( yytext[yyl] == '\\n' )" );
call    0 returned 161
      161: 4071:		indent_up();
      161: 4072:		indent_puts( "++yylineno;" );
call    0 returned 161
      161: 4073:		indent_down();
      161: 4074:		indent_down();
      161: 4075:		indent_puts( "}" );
call    0 returned 161
      161: 4076:		indent_down();
        -: 4077:		}
        -: 4078:
      543: 4079:	skelout();
call    0 returned 543
      543: 4080:	if ( ddebug )
branch  0 taken 252 (fallthrough)
branch  1 taken 291
        -: 4081:		{
      252: 4082:		indent_puts( "if ( yy_flex_debug )" );
call    0 returned 252
      252: 4083:		indent_up();
        -: 4084:
      252: 4085:		indent_puts( "{" );
call    0 returned 252
      252: 4086:		indent_puts( "if ( yy_act == 0 )" );
call    0 returned 252
      252: 4087:		indent_up();
     252*: 4088:		indent_puts( C_plus_plus ?
branch  0 taken 0 (fallthrough)
branch  1 taken 252
call    2 returned 252
        -: 4089:			"cerr << \"--scanner backing up\\n\";" :
        -: 4090:			"fprintf( err, \"--scanner backing up\\n\" );" );
      252: 4091:		indent_down();
        -: 4092:
      252: 4093:		do_indent();
call    0 returned 252
      252: 4094:		out_dec( "else if ( yy_act < %d )\n", num_rules );
call    0 returned 252
      252: 4095:		indent_up();
        -: 4096:
      252: 4097:		if ( C_plus_plus )
branch  0 taken 0 (fallthrough)
branch  1 taken 252
        -: 4098:			{
    #####: 4099:			indent_puts(
call    0 never executed
        -: 4100:	"cerr << \"--accepting rule at line \" << yy_rule_linenum[yy_act] <<" );
    #####: 4101:			indent_puts(
call    0 never executed
        -: 4102:			"         \"(\\\"\" << yytext << \"\\\")\\n\";" );
        -: 4103:			}
        -: 4104:		else
        -: 4105:			{
      252: 4106:			indent_puts(
call    0 returned 252
        -: 4107:	"fprintf( err, \"--accepting rule at line %d (\\\"%s\\\")\\n\"," );
        -: 4108:
      252: 4109:			indent_puts(
call    0 returned 252
        -: 4110:				"         yy_rule_linenum[yy_act], yytext );" );
        -: 4111:			}
        -: 4112:
      252: 4113:		indent_down();
        -: 4114:
      252: 4115:		do_indent();
call    0 returned 252
      252: 4116:		out_dec( "else if ( yy_act == %d )\n", num_rules );
call    0 returned 252
      252: 4117:		indent_up();
        -: 4118:
      252: 4119:		if ( C_plus_plus )
branch  0 taken 0 (fallthrough)
branch  1 taken 252
        -: 4120:			{
    #####: 4121:			indent_puts(
call    0 never executed
        -: 4122:"cerr << \"--accepting default rule (\\\"\" << yytext << \"\\\")\\n\";" );
        -: 4123:			}
        -: 4124:		else
        -: 4125:			{
      252: 4126:			indent_puts(
call    0 returned 252
        -: 4127:	"fprintf( err, \"--accepting default rule (\\\"%s\\\")\\n\"," );
      252: 4128:			indent_puts( "         yytext );" );
call    0 returned 252
        -: 4129:			}
        -: 4130:
      252: 4131:		indent_down();
        -: 4132:
      252: 4133:		do_indent();
call    0 returned 252
      252: 4134:		out_dec( "else if ( yy_act == %d )\n", num_rules + 1 );
call    0 returned 252
      252: 4135:		indent_up();
        -: 4136:
     252*: 4137:		indent_puts( C_plus_plus ?
branch  0 taken 0 (fallthrough)
branch  1 taken 252
call    2 returned 252
        -: 4138:			"cerr << \"--(end of buffer or a NUL)\\n\";" :
        -: 4139:		"fprintf( err, \"--(end of buffer or a NUL)\\n\" );" );
        -: 4140:
      252: 4141:		indent_down();
        -: 4142:
      252: 4143:		do_indent();
call    0 returned 252
      252: 4144:		outn( "else" );
call    0 returned 252
      252: 4145:		indent_up();
        -: 4146:
      252: 4147:		if ( C_plus_plus )
branch  0 taken 0 (fallthrough)
branch  1 taken 252
        -: 4148:			{
    #####: 4149:			indent_puts(
call    0 never executed
        -: 4150:	"cerr << \"--EOF (start condition \" << YY_START << \")\\n\";" );
        -: 4151:			}
        -: 4152:		else
        -: 4153:			{
      252: 4154:			indent_puts(
call    0 returned 252
        -: 4155:	"fprintf( err, \"--EOF (start condition %d)\\n\", YY_START );" );
        -: 4156:			}
        -: 4157:
      252: 4158:		indent_down();
        -: 4159:
      252: 4160:		indent_puts( "}" );
call    0 returned 252
      252: 4161:		indent_down();
        -: 4162:		}
        -: 4163:
        -: 4164:	/* Copy actions to output file. */
      543: 4165:	skelout();
call    0 returned 543
      543: 4166:	indent_up();
      543: 4167:	gen_bu_action();
call    0 returned 543
      543: 4168:	out( &action_array[action_offset] );
call    0 returned 543
        -: 4169:
      543: 4170:	line_directive_out( stdout, 0 );
call    0 returned 543
        -: 4171:
        -: 4172:	/* generate cases for any missing EOF rules */
     1105: 4173:	for ( i = 1; i <= lastsc; ++i )
branch  0 taken 562
branch  1 taken 543 (fallthrough)
      562: 4174:		if ( ! sceof[i] )
branch  0 taken 541 (fallthrough)
branch  1 taken 21
        -: 4175:			{
      541: 4176:			do_indent();
call    0 returned 541
      541: 4177:			out_str( "case YY_STATE_EOF(%s):\n", scname[i] );
call    0 returned 541
      541: 4178:			did_eof_rule = true;
        -: 4179:			}
        -: 4180:
      543: 4181:	if ( did_eof_rule )
branch  0 taken 537 (fallthrough)
branch  1 taken 6
        -: 4182:		{
      537: 4183:		indent_up();
      537: 4184:		indent_puts( "yyterminate();" );
call    0 returned 537
      537: 4185:		indent_down();
        -: 4186:		}
        -: 4187:
        -: 4188:
        -: 4189:	/* Generate code for handling NUL's, if needed. */
        -: 4190:
        -: 4191:	/* First, deal with backing up and setting up yy_cp if the scanner
        -: 4192:	 * finds that it should JAM on the NUL.
        -: 4193:	 */
      543: 4194:	skelout();
call    0 returned 543
      543: 4195:	set_indent( 4 );
        -: 4196:
      543: 4197:	if ( fullspd || fulltbl )
branch  0 taken 451 (fallthrough)
branch  1 taken 92
branch  2 taken 23 (fallthrough)
branch  3 taken 428
      115: 4198:		indent_puts( "yy_cp = yy_c_buf_p;" );
call    0 returned 115
        -: 4199:
        -: 4200:	else
        -: 4201:		{ /* compressed table */
      428: 4202:		if ( ! reject && ! interactive )
branch  0 taken 260 (fallthrough)
branch  1 taken 168
branch  2 taken 1 (fallthrough)
branch  3 taken 259
        -: 4203:			{
        -: 4204:			/* Do the guaranteed-needed backing up to figure
        -: 4205:			 * out the match.
        -: 4206:			 */
        1: 4207:			indent_puts( "yy_cp = yy_last_accepting_cpos;" );
call    0 returned 1
        1: 4208:			indent_puts(
call    0 returned 1
        -: 4209:				"yy_current_state = yy_last_accepting_state;" );
        -: 4210:			}
        -: 4211:
        -: 4212:		else
        -: 4213:			/* Still need to initialize yy_cp, though
        -: 4214:			 * yy_current_state was set up by
        -: 4215:			 * yy_get_previous_state().
        -: 4216:			 */
      427: 4217:			indent_puts( "yy_cp = yy_c_buf_p;" );
call    0 returned 427
        -: 4218:		}
        -: 4219:
        -: 4220:
        -: 4221:	/* Generate code for yy_get_previous_state(). */
      543: 4222:	set_indent( 1 );
      543: 4223:	skelout();
call    0 returned 543
        -: 4224:
      543: 4225:	gen_start_state();
call    0 returned 543
        -: 4226:
      543: 4227:	set_indent( 2 );
      543: 4228:	skelout();
call    0 returned 543
      543: 4229:	gen_next_state( true );
call    0 returned 543
        -: 4230:
      543: 4231:	set_indent( 1 );
      543: 4232:	skelout();
call    0 returned 543
      543: 4233:	gen_NUL_trans();
call    0 returned 543
        -: 4234:
      543: 4235:	skelout();
call    0 returned 543
      543: 4236:	if ( do_yylineno )
branch  0 taken 161 (fallthrough)
branch  1 taken 382
        -: 4237:		{ /* update yylineno inside of unput() */
      161: 4238:		indent_puts( "if ( c == '\\n' )" );
call    0 returned 161
      161: 4239:		indent_up();
      161: 4240:		indent_puts( "--yylineno;" );
call    0 returned 161
      161: 4241:		indent_down();
        -: 4242:		}
        -: 4243:
      543: 4244:	skelout();
call    0 returned 543
        -: 4245:	/* Update BOL and yylineno inside of input(). */
      543: 4246:	if ( bol_needed )
branch  0 taken 99 (fallthrough)
branch  1 taken 444
        -: 4247:		{
       99: 4248:		indent_puts( "yy_current_buffer->yy_at_bol = (c == '\\n');" );
call    0 returned 99
       99: 4249:		if ( do_yylineno )
branch  0 taken 31 (fallthrough)
branch  1 taken 68
        -: 4250:			{
       31: 4251:			indent_puts( "if ( yy_current_buffer->yy_at_bol )" );
call    0 returned 31
       31: 4252:			indent_up();
       31: 4253:			indent_puts( "++yylineno;" );
call    0 returned 31
       31: 4254:			indent_down();
        -: 4255:			}
        -: 4256:		}
        -: 4257:
      444: 4258:	else if ( do_yylineno )
branch  0 taken 130 (fallthrough)
branch  1 taken 314
        -: 4259:		{
      130: 4260:		indent_puts( "if ( c == '\\n' )" );
call    0 returned 130
      130: 4261:		indent_up();
      130: 4262:		indent_puts( "++yylineno;" );
call    0 returned 130
      130: 4263:		indent_down();
        -: 4264:		}
        -: 4265:
      543: 4266:	skelout();
call    0 returned 543
        -: 4267:
        -: 4268:	/* Copy remainder of input to output. */
        -: 4269:
      543: 4270:	line_directive_out( stdout, 1 );
call    0 returned 543
        -: 4271:
      543: 4272:	if ( sectnum == 3 )
branch  0 taken 113 (fallthrough)
branch  1 taken 430
      113: 4273:		(void) flexscan(); /* copy remainder of input to output */
call    0 returned 113
      543: 4274:	}
        -: 4275:/* misc - miscellaneous flex routines */
        -: 4276:
        -: 4277:/*-
        -: 4278: * Copyright (c) 1990 The Regents of the University of California.
        -: 4279: * All rights reserved.
        -: 4280: *
        -: 4281: * This code is derived from software contributed to Berkeley by
        -: 4282: * Vern Paxson.
        -: 4283: * 
        -: 4284: * The United States Government has rights in this work pursuant
        -: 4285: * to contract no. DE-AC03-76SF00098 between the United States
        -: 4286: * Department of Energy and the University of California.
        -: 4287: *
        -: 4288: * Redistribution and use in source and binary forms are permitted provided
        -: 4289: * that: (1) source distributions retain this entire copyright notice and
        -: 4290: * comment, and (2) distributions including binaries display the following
        -: 4291: * acknowledgement:  ``This product includes software developed by the
        -: 4292: * University of California, Berkeley and its contributors'' in the
        -: 4293: * documentation or other materials provided with the distribution and in
        -: 4294: * all advertising materials mentioning features or use of this software.
        -: 4295: * Neither the name of the University nor the names of its contributors may
        -: 4296: * be used to endorse or promote products derived from this software without
        -: 4297: * specific prior written permission.
        -: 4298: * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
        -: 4299: * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
        -: 4300: * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
        -: 4301: */
        -: 4302:
        -: 4303:/* $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $ */
        -: 4304:
        -: 4305:
        -: 4306:
function action_define called 579 returned 100% blocks executed 67%
      579: 4307:void action_define( defname, value )
        -: 4308:char *defname;
        -: 4309:int value;
        -: 4310:	{
        -: 4311:	char buf[MAXLINE];
        -: 4312:
        -: 4313:#ifndef F_JR_4
      579: 4314:    if ( (int) strlen( defname ) > MAXLINE / 2 )
branch  0 taken 0 (fallthrough)
branch  1 taken 579
        -: 4315:#else
        -: 4316:    if ( strlen( defname ) > MAXLINE / 2 )
        -: 4317:#endif
        -: 4318:		{
    #####: 4319:		format_pinpoint_message( _( "name \"%s\" ridiculously long" ), 
call    0 never executed
        -: 4320:			defname );
    #####: 4321:		return;
        -: 4322:		}
        -: 4323:
      579: 4324:	sprintf( buf, "#define %s %d\n", defname, value );
      579: 4325:	add_action( buf );
call    0 returned 579
        -: 4326:	}
        -: 4327:
        -: 4328:
function add_action called 63345 returned 100% blocks executed 88%
    63345: 4329:void add_action( new_text )
        -: 4330:char *new_text;
        -: 4331:	{
    63345: 4332:	int len = strlen( new_text );
        -: 4333:
    63358: 4334:	while ( len + action_index >= action_size - 10 /* slop */ )
branch  0 taken 13
branch  1 taken 63345 (fallthrough)
        -: 4335:		{
       13: 4336:		int new_size = action_size * 2;
        -: 4337:
       13: 4338:		if ( new_size <= 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 13
        -: 4339:			/* Increase just a little, to try to avoid overflow
        -: 4340:			 * on 16-bit machines.
        -: 4341:			 */
    #####: 4342:			action_size += action_size / 8;
        -: 4343:		else
       13: 4344:			action_size = new_size;
        -: 4345:
       13: 4346:		action_array =
       13: 4347:			reallocate_character_array( action_array, action_size );
call    0 returned 13
        -: 4348:		}
        -: 4349:
    63345: 4350:	strcpy( &action_array[action_index], new_text );
        -: 4351:
    63345: 4352:	action_index += len;
    63345: 4353:	}
        -: 4354:
        -: 4355:
        -: 4356:/* allocate_array - allocate memory for an integer array of the given size */
        -: 4357:
function allocate_array called 40306 returned 100% blocks executed 80%
    40306: 4358:void *allocate_array( size, element_size )
        -: 4359:int size;
        -: 4360:size_t element_size;
        -: 4361:	{
        -: 4362:	register void *mem;
    40306: 4363:	size_t num_bytes = element_size * size;
        -: 4364:
    40306: 4365:	mem = flex_alloc( num_bytes );
call    0 returned 40306
    40306: 4366:	if ( ! mem )
branch  0 taken 0 (fallthrough)
branch  1 taken 40306
    #####: 4367:		flexfatal(
call    0 never executed
        -: 4368:			_( "memory allocation failed in allocate_array()" ) );
        -: 4369:
    40306: 4370:	return mem;
        -: 4371:	}
        -: 4372:
        -: 4373:
        -: 4374:/* all_lower - true if a string is all lower-case */
        -: 4375:
function all_lower called 5 returned 100% blocks executed 88%
        5: 4376:int all_lower( str )
        -: 4377:register char *str;
        -: 4378:	{
       35: 4379:	while ( *str )
branch  0 taken 30
branch  1 taken 5 (fallthrough)
        -: 4380:		{
       30: 4381:		if ( ! isascii( (Char) *str ) || ! islower( *str ) )
branch  0 taken 30 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 30
    #####: 4382:			return 0;
       30: 4383:		++str;
        -: 4384:		}
        -: 4385:
        5: 4386:	return 1;
        -: 4387:	}
        -: 4388:
        -: 4389:
        -: 4390:/* all_upper - true if a string is all upper-case */
        -: 4391:
function all_upper called 8 returned 100% blocks executed 88%
        8: 4392:int all_upper( str )
        -: 4393:register char *str;
        -: 4394:	{
       56: 4395:	while ( *str )
branch  0 taken 48
branch  1 taken 8 (fallthrough)
        -: 4396:		{
       48: 4397:		if ( ! isascii( (Char) *str ) || ! isupper( *str ) )
branch  0 taken 48 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 48
    #####: 4398:			return 0;
       48: 4399:		++str;
        -: 4400:		}
        -: 4401:
        8: 4402:	return 1;
        -: 4403:	}
        -: 4404:
        -: 4405:
        -: 4406:/* bubble - bubble sort an integer array in increasing order
        -: 4407: *
        -: 4408: * synopsis
        -: 4409: *   int v[n], n;
        -: 4410: *   void bubble( v, n );
        -: 4411: *
        -: 4412: * description
        -: 4413: *   sorts the first n elements of array v and replaces them in
        -: 4414: *   increasing order.
        -: 4415: *
        -: 4416: * passed
        -: 4417: *   v - the array to be sorted
        -: 4418: *   n - the number of elements of 'v' to be sorted
        -: 4419: */
        -: 4420:
function bubble called 31270 returned 100% blocks executed 100%
    31270: 4421:void bubble( v, n )
        -: 4422:int v[], n;
        -: 4423:	{
        -: 4424:	register int i, j, k;
        -: 4425:
   119434: 4426:	for ( i = n; i > 1; --i )
branch  0 taken 88164
branch  1 taken 31270 (fallthrough)
   771767: 4427:		for ( j = 1; j < i; ++j )
branch  0 taken 683603
branch  1 taken 88164 (fallthrough)
   683603: 4428:			if ( v[j] > v[j + 1] )	/* compare */
branch  0 taken 467146 (fallthrough)
branch  1 taken 216457
        -: 4429:				{
   467146: 4430:				k = v[j];	/* exchange */
   467146: 4431:				v[j] = v[j + 1];
   467146: 4432:				v[j + 1] = k;
        -: 4433:				}
    31270: 4434:	}
        -: 4435:
        -: 4436:
        -: 4437:/* check_char - checks a character to make sure it's within the range
        -: 4438: *		we're expecting.  If not, generates fatal error message
        -: 4439: *		and exits.
        -: 4440: */
        -: 4441:
function check_char called 37210 returned 100% blocks executed 71%
    37210: 4442:void check_char( c )
        -: 4443:int c;
        -: 4444:	{
    37210: 4445:	if ( c >= CSIZE )
branch  0 taken 0 (fallthrough)
branch  1 taken 37210
    #####: 4446:		lerrsf( _( "bad character '%s' detected in check_char()" ),
call    0 never executed
    #####: 4447:			readable_form( c ) );
call    0 never executed
        -: 4448:
    37210: 4449:	if ( c >= csize )
branch  0 taken 1 (fallthrough)
branch  1 taken 37209
        1: 4450:		lerrsf(
call    0 returned 0
        -: 4451:		_( "scanner requires -8 flag to use the character %s" ),
        1: 4452:			readable_form( c ) );
call    0 returned 1
    37209: 4453:	}
        -: 4454:
        -: 4455:
        -: 4456:
        -: 4457:/* clower - replace upper-case letter to lower-case */
        -: 4458:
function clower called 78 returned 100% blocks executed 83%
       78: 4459:Char clower( c )
        -: 4460:register int c;
        -: 4461:	{
      78*: 4462:	return (Char) ((isascii( c ) && isupper( c )) ? tolower( c ) : c);
branch  0 taken 78 (fallthrough)
branch  1 taken 0
branch  2 taken 78 (fallthrough)
branch  3 taken 0
        -: 4463:	}
        -: 4464:
        -: 4465:
        -: 4466:/* copy_string - returns a dynamically allocated copy of a string */
        -: 4467:
function copy_string called 1398 returned 100% blocks executed 90%
     1398: 4468:char *copy_string( str )
        -: 4469:register const char *str;
        -: 4470:	{
        -: 4471:	register const char *c1;
        -: 4472:	register char *c2;
        -: 4473:	char *copy;
        -: 4474:	unsigned int size;
        -: 4475:
        -: 4476:	/* find length */
    15980: 4477:	for ( c1 = str; *c1; ++c1 )
branch  0 taken 14582
branch  1 taken 1398 (fallthrough)
        -: 4478:		;
        -: 4479:
     1398: 4480:	size = (c1 - str + 1) * sizeof( char );
     1398: 4481:	copy = (char *) flex_alloc( size );
call    0 returned 1398
        -: 4482:
     1398: 4483:	if ( copy == NULL )
branch  0 taken 0 (fallthrough)
branch  1 taken 1398
    #####: 4484:		flexfatal( _( "dynamic memory failure in copy_string()" ) );
call    0 never executed
        -: 4485:
    15980: 4486:	for ( c2 = copy; (*c2++ = *str++) != 0; )
branch  0 taken 14582
branch  1 taken 1398 (fallthrough)
        -: 4487:		;
        -: 4488:
     1398: 4489:	return copy;
        -: 4490:	}
        -: 4491:
        -: 4492:
        -: 4493:/* copy_unsigned_string -
        -: 4494: *    returns a dynamically allocated copy of a (potentially) unsigned string
        -: 4495: */
        -: 4496:
function copy_unsigned_string called 1555 returned 100% blocks executed 100%
     1555: 4497:Char *copy_unsigned_string( str )
        -: 4498:register Char *str;
        -: 4499:	{
        -: 4500:	register Char *c;
        -: 4501:	Char *copy;
        -: 4502:
        -: 4503:	/* find length */
    11100: 4504:	for ( c = str; *c; ++c )
branch  0 taken 9545
branch  1 taken 1555 (fallthrough)
        -: 4505:		;
        -: 4506:
     1555: 4507:	copy = allocate_Character_array( c - str + 1 );
call    0 returned 1555
        -: 4508:
    11100: 4509:	for ( c = copy; (*c++ = *str++) != 0; )
branch  0 taken 9545
branch  1 taken 1555 (fallthrough)
        -: 4510:		;
        -: 4511:
     1555: 4512:	return copy;
        -: 4513:	}
        -: 4514:
        -: 4515:
        -: 4516:/* cshell - shell sort a character array in increasing order
        -: 4517: *
        -: 4518: * synopsis
        -: 4519: *
        -: 4520: *   Char v[n];
        -: 4521: *   int n, special_case_0;
        -: 4522: *   cshell( v, n, special_case_0 );
        -: 4523: *
        -: 4524: * description
        -: 4525: *   Does a shell sort of the first n elements of array v.
        -: 4526: *   If special_case_0 is true, then any element equal to 0
        -: 4527: *   is instead assumed to have infinite weight.
        -: 4528: *
        -: 4529: * passed
        -: 4530: *   v - array to be sorted
        -: 4531: *   n - number of elements of v to be sorted
        -: 4532: */
        -: 4533:
function cshell called 850 returned 100% blocks executed 89%
      850: 4534:void cshell( v, n, special_case_0 )
        -: 4535:Char v[];
        -: 4536:int n, special_case_0;
        -: 4537:	{
        -: 4538:	int gap, i, j, jg;
        -: 4539:	Char k;
        -: 4540:
     3467: 4541:	for ( gap = n / 2; gap > 0; gap = gap / 2 )
branch  0 taken 2617
branch  1 taken 850 (fallthrough)
    74835: 4542:		for ( i = gap; i < n; ++i )
branch  0 taken 72218
branch  1 taken 2617 (fallthrough)
    97074: 4543:			for ( j = i - gap; j >= 0; j = j - gap )
branch  0 taken 92782
branch  1 taken 4292 (fallthrough)
        -: 4544:				{
    92782: 4545:				jg = j + gap;
        -: 4546:
    92782: 4547:				if ( special_case_0 )
branch  0 taken 92782 (fallthrough)
branch  1 taken 0
        -: 4548:					{
    92782: 4549:					if ( v[jg] == 0 )
branch  0 taken 7 (fallthrough)
branch  1 taken 92775
        7: 4550:						break;
        -: 4551:
    92775: 4552:					else if ( v[j] != 0 && v[j] <= v[jg] )
branch  0 taken 92766 (fallthrough)
branch  1 taken 9
branch  2 taken 67919 (fallthrough)
branch  3 taken 24847
    67919: 4553:						break;
        -: 4554:					}
        -: 4555:
    #####: 4556:				else if ( v[j] <= v[jg] )
branch  0 never executed
branch  1 never executed
    #####: 4557:					break;
        -: 4558:
    24856: 4559:				k = v[j];
    24856: 4560:				v[j] = v[jg];
    24856: 4561:				v[jg] = k;
        -: 4562:				}
      850: 4563:	}
        -: 4564:
        -: 4565:
        -: 4566:/* dataend - finish up a block of data declarations */
        -: 4567:
function dataend called 3404 returned 100% blocks executed 100%
     3404: 4568:void dataend()
        -: 4569:	{
     3404: 4570:	if ( datapos > 0 )
branch  0 taken 3362 (fallthrough)
branch  1 taken 42
     3362: 4571:		dataflush();
call    0 returned 3362
        -: 4572:
        -: 4573:	/* add terminator for initialization; { for vi */
     3404: 4574:	outn( "    } ;\n" );
call    0 returned 3404
        -: 4575:
     3404: 4576:	dataline = 0;
     3404: 4577:	datapos = 0;
     3404: 4578:	}
        -: 4579:
        -: 4580:
        -: 4581:/* dataflush - flush generated data statements */
        -: 4582:
function dataflush called 55642 returned 100% blocks executed 100%
    55642: 4583:void dataflush()
        -: 4584:	{
    55642: 4585:	outc( '\n' );
call    0 returned 55642
        -: 4586:
    55642: 4587:	if ( ++dataline >= NUMDATALINES )
branch  0 taken 4549 (fallthrough)
branch  1 taken 51093
        -: 4588:		{
        -: 4589:		/* Put out a blank line so that the table is grouped into
        -: 4590:		 * large blocks that enable the user to find elements easily.
        -: 4591:		 */
     4549: 4592:		outc( '\n' );
call    0 returned 4549
     4549: 4593:		dataline = 0;
        -: 4594:		}
        -: 4595:
        -: 4596:	/* Reset the number of characters written on the current line. */
    55642: 4597:	datapos = 0;
    55642: 4598:	}
        -: 4599:
        -: 4600:
        -: 4601:/* flexerror - report an error message and terminate */
        -: 4602:
function flexerror called 15 returned 0% blocks executed 100%
       15: 4603:void flexerror( msg )
        -: 4604:const char msg[];
        -: 4605:	{
       15: 4606:	fprintf( err, "%s: %s\n", program_name, msg );
call    0 returned 15
       15: 4607:	flexend( 1 );
call    0 returned 0
    #####: 4608:	}
        -: 4609:
        -: 4610:
        -: 4611:/* flexfatal - report a fatal error message and terminate */
        -: 4612:
function flexfatal called 0 returned 0% blocks executed 0%
    #####: 4613:void flexfatal( msg )
        -: 4614:const char msg[];
        -: 4615:	{
    #####: 4616:	fprintf( err, _( "%s: fatal internal error, %s\n" ),
call    0 never executed
        -: 4617:		program_name, msg );
    #####: 4618:	exit( 1 );
        -: 4619:	}
        -: 4620:
        -: 4621:
        -: 4622:/* htoi - convert a hexadecimal digit string to an integer value */
        -: 4623:
function htoi called 3 returned 100% blocks executed 100%
        3: 4624:int htoi( str )
        -: 4625:Char str[];
        -: 4626:	{
        -: 4627:	unsigned int result;
        -: 4628:
        3: 4629:	(void) sscanf( (char *) str, "%x", &result );
        -: 4630:
        3: 4631:	return result;
        -: 4632:	}
        -: 4633:
        -: 4634:
        -: 4635:/* lerrif - report an error message formatted with one integer argument */
        -: 4636:
function lerrif called 1 returned 0% blocks executed 100%
        1: 4637:void lerrif( msg, arg )
        -: 4638:const char msg[];
        -: 4639:int arg;
        -: 4640:	{
        -: 4641:	char errmsg[MAXLINE];
        1: 4642:	(void) sprintf( errmsg, msg, arg );
        1: 4643:	flexerror( errmsg );
call    0 returned 0
    #####: 4644:	}
        -: 4645:
        -: 4646:
        -: 4647:/* lerrsf - report an error message formatted with one string argument */
        -: 4648:
function lerrsf called 3 returned 0% blocks executed 100%
        3: 4649:void lerrsf( msg, arg )
        -: 4650:const char msg[], arg[];
        -: 4651:	{
        -: 4652:	char errmsg[MAXLINE];
        -: 4653:
        3: 4654:	(void) sprintf( errmsg, msg, arg );
        3: 4655:	flexerror( errmsg );
call    0 returned 0
    #####: 4656:	}
        -: 4657:
        -: 4658:
        -: 4659:/* line_directive_out - spit out a "#line" statement */
        -: 4660:
function line_directive_out called 7494 returned 100% blocks executed 96%
     7494: 4661:void line_directive_out( output_file, do_infile )
        -: 4662:FILE *output_file;
        -: 4663:int do_infile;
        -: 4664:	{
        -: 4665:	char directive[MAXLINE], filename[MAXLINE];
        -: 4666:	char *s1, *s2, *s3;
        -: 4667:	static char line_fmt[] = "#line %d \"%s\"\n";
        -: 4668:
     7494: 4669:	if ( ! gen_line_dirs )
branch  0 taken 46 (fallthrough)
branch  1 taken 7448
       49: 4670:		return;
        -: 4671:
     7448: 4672:	if ( (do_infile && ! infilename) || (! do_infile && ! outfilename) )
branch  0 taken 5827 (fallthrough)
branch  1 taken 1621
branch  2 taken 5827 (fallthrough)
branch  3 taken 0
branch  4 taken 1621 (fallthrough)
branch  5 taken 5827
branch  6 taken 3 (fallthrough)
branch  7 taken 1618
        -: 4673:		/* don't know the filename to use, skip */
        3: 4674:		return;
        -: 4675:
     7445: 4676:	s1 = do_infile ? infilename : outfilename;
branch  0 taken 5827 (fallthrough)
branch  1 taken 1618
     7445: 4677:	s2 = filename;
     7445: 4678:	s3 = &filename[sizeof( filename ) - 2];
        -: 4679:
   116260: 4680:	while ( s2 < s3 && *s1 )
branch  0 taken 116260 (fallthrough)
branch  1 taken 0
branch  2 taken 108815
branch  3 taken 7445 (fallthrough)
        -: 4681:		{
   108815: 4682:		if ( *s1 == '\\' )
branch  0 taken 0 (fallthrough)
branch  1 taken 108815
        -: 4683:			/* Escape the '\' */
    #####: 4684:			*s2++ = '\\';
        -: 4685:
   108815: 4686:		*s2++ = *s1++;
        -: 4687:		}
        -: 4688:
     7445: 4689:	*s2 = '\0';
        -: 4690:
     7445: 4691:	if ( do_infile )
branch  0 taken 5827 (fallthrough)
branch  1 taken 1618
     5827: 4692:		sprintf( directive, line_fmt, linenum, filename );
        -: 4693:	else
        -: 4694:		{
     1618: 4695:		if ( output_file == stdout )
branch  0 taken 1618 (fallthrough)
branch  1 taken 0
        -: 4696:			/* Account for the line directive itself. */
     1618: 4697:			++out_linenum;
        -: 4698:
     1618: 4699:		sprintf( directive, line_fmt, out_linenum, filename );
        -: 4700:		}
        -: 4701:
        -: 4702:	/* If output_file is nil then we should put the directive in
        -: 4703:	 * the accumulated actions.
        -: 4704:	 */
     7445: 4705:	if ( output_file )
branch  0 taken 2158 (fallthrough)
branch  1 taken 5287
        -: 4706:		{
     2158: 4707:		fputs( directive, output_file );
call    0 returned 2158
        -: 4708:		}
        -: 4709:	else
     5287: 4710:		add_action( directive );
call    0 returned 5287
        -: 4711:	}
        -: 4712:
        -: 4713:
        -: 4714:/* mark_defs1 - mark the current position in the action array as
        -: 4715: *               representing where the user's section 1 definitions end
        -: 4716: *		 and the prolog begins
        -: 4717: */
function mark_defs1 called 560 returned 100% blocks executed 100%
      560: 4718:void mark_defs1()
        -: 4719:	{
      560: 4720:	defs1_offset = 0;
      560: 4721:	action_array[action_index++] = '\0';
      560: 4722:	action_offset = prolog_offset = action_index;
      560: 4723:	action_array[action_index] = '\0';
      560: 4724:	}
        -: 4725:
        -: 4726:
        -: 4727:/* mark_prolog - mark the current position in the action array as
        -: 4728: *               representing the end of the action prolog
        -: 4729: */
function mark_prolog called 553 returned 100% blocks executed 100%
      553: 4730:void mark_prolog()
        -: 4731:	{
      553: 4732:	action_array[action_index++] = '\0';
      553: 4733:	action_offset = action_index;
      553: 4734:	action_array[action_index] = '\0';
      553: 4735:	}
        -: 4736:
        -: 4737:
        -: 4738:/* mk2data - generate a data statement for a two-dimensional array
        -: 4739: *
        -: 4740: * Generates a data statement initializing the current 2-D array to "value".
        -: 4741: */
function mk2data called 70116 returned 100% blocks executed 100%
    70116: 4742:void mk2data( value )
        -: 4743:int value;
        -: 4744:	{
    70116: 4745:	if ( datapos >= NUMDATAITEMS )
branch  0 taken 6571 (fallthrough)
branch  1 taken 63545
        -: 4746:		{
     6571: 4747:		outc( ',' );
call    0 returned 6571
     6571: 4748:		dataflush();
call    0 returned 6571
        -: 4749:		}
        -: 4750:
    70116: 4751:	if ( datapos == 0 )
branch  0 taken 7136 (fallthrough)
branch  1 taken 62980
        -: 4752:		/* Indent. */
     7136: 4753:		out( "    " );
call    0 returned 7136
        -: 4754:
        -: 4755:	else
    62980: 4756:		outc( ',' );
call    0 returned 62980
        -: 4757:
    70116: 4758:	++datapos;
        -: 4759:
    70116: 4760:	out_dec( "%5d", value );
call    0 returned 70116
    70116: 4761:	}
        -: 4762:
        -: 4763:
        -: 4764:/* mkdata - generate a data statement
        -: 4765: *
        -: 4766: * Generates a data statement initializing the current array element to
        -: 4767: * "value".
        -: 4768: */
function mkdata called 468358 returned 100% blocks executed 100%
   468358: 4769:void mkdata( value )
        -: 4770:int value;
        -: 4771:	{
   468358: 4772:	if ( datapos >= NUMDATAITEMS )
branch  0 taken 45144 (fallthrough)
branch  1 taken 423214
        -: 4773:		{
    45144: 4774:		outc( ',' );
call    0 returned 45144
    45144: 4775:		dataflush();
call    0 returned 45144
        -: 4776:		}
        -: 4777:
   468358: 4778:	if ( datapos == 0 )
branch  0 taken 48432 (fallthrough)
branch  1 taken 419926
        -: 4779:		/* Indent. */
    48432: 4780:		out( "    " );
call    0 returned 48432
        -: 4781:	else
   419926: 4782:		outc( ',' );
call    0 returned 419926
        -: 4783:
   468358: 4784:	++datapos;
        -: 4785:
   468358: 4786:	out_dec( "%5d", value );
call    0 returned 468358
   468358: 4787:	}
        -: 4788:
        -: 4789:
        -: 4790:/* myctoi - return the integer represented by a string of digits */
        -: 4791:
function myctoi called 396 returned 100% blocks executed 100%
      396: 4792:int myctoi( array )
        -: 4793:char array[];
        -: 4794:	{
      396: 4795:	int val = 0;
        -: 4796:
      396: 4797:	(void) sscanf( array, "%d", &val );
        -: 4798:
      396: 4799:	return val;
        -: 4800:	}
        -: 4801:
        -: 4802:
        -: 4803:/* myesc - return character corresponding to escape sequence */
        -: 4804:
function myesc called 595 returned 100% blocks executed 100%
      595: 4805:Char myesc( array )
        -: 4806:Char array[];
        -: 4807:	{
        -: 4808:	Char c, esc_char;
        -: 4809:
      595: 4810:	switch ( array[1] )
branch  0 taken 1
branch  1 taken 1
branch  2 taken 340
branch  3 taken 1
branch  4 taken 123
branch  5 taken 4
branch  6 taken 1
branch  7 taken 20
branch  8 taken 3
branch  9 taken 101
        -: 4811:		{
        1: 4812:		case 'b': return '\b';
        1: 4813:		case 'f': return '\f';
      340: 4814:		case 'n': return '\n';
        1: 4815:		case 'r': return '\r';
      123: 4816:		case 't': return '\t';
        -: 4817:
        -: 4818:#if __STDC__
        4: 4819:		case 'a': return '\a';
        1: 4820:		case 'v': return '\v';
        -: 4821:#else
        -: 4822:		case 'a': return '\007';
        -: 4823:		case 'v': return '\013';
        -: 4824:#endif
        -: 4825:
       20: 4826:		case '0':
        -: 4827:		case '1':
        -: 4828:		case '2':
        -: 4829:		case '3':
        -: 4830:		case '4':
        -: 4831:		case '5':
        -: 4832:		case '6':
        -: 4833:		case '7':
        -: 4834:#ifndef F_HD_1
        -: 4835:
        -: 4836:#else
        -: 4837:		case '8':
        -: 4838:#endif
        -: 4839:			{ /* \<octal> */
       20: 4840:			int sptr = 1;
        -: 4841:
       69: 4842:			while ( isascii( array[sptr] ) &&
branch  0 taken 69 (fallthrough)
branch  1 taken 0
       69: 4843:				isdigit( array[sptr] ) )
branch  0 taken 49
branch  1 taken 20 (fallthrough)
        -: 4844:				/* Don't increment inside loop control
        -: 4845:				 * because if isdigit() is a macro it might
        -: 4846:				 * expand into multiple increments ...
        -: 4847:				 */
       49: 4848:				++sptr;
        -: 4849:
       20: 4850:			c = array[sptr];
       20: 4851:			array[sptr] = '\0';
        -: 4852:
       20: 4853:			esc_char = otoi( array + 1 );
call    0 returned 20
        -: 4854:
       20: 4855:			array[sptr] = c;
        -: 4856:
       20: 4857:			return esc_char;
        -: 4858:			}
        -: 4859:
        3: 4860:		case 'x':
        -: 4861:			{ /* \x<hex> */
        3: 4862:			int sptr = 2;
        -: 4863:
        7: 4864:			while ( isascii( array[sptr] ) &&
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7: 4865:				isxdigit( (char) array[sptr] ) )
branch  0 taken 4
branch  1 taken 3 (fallthrough)
        -: 4866:				/* Don't increment inside loop control
        -: 4867:				 * because if isdigit() is a macro it might
        -: 4868:				 * expand into multiple increments ...
        -: 4869:				 */
        4: 4870:				++sptr;
        -: 4871:
        3: 4872:			c = array[sptr];
        3: 4873:			array[sptr] = '\0';
        -: 4874:
        3: 4875:			esc_char = htoi( array + 2 );
call    0 returned 3
        -: 4876:
        3: 4877:			array[sptr] = c;
        -: 4878:
        3: 4879:			return esc_char;
        -: 4880:			}
        -: 4881:
      101: 4882:		default:
      101: 4883:			return array[1];
        -: 4884:		}
        -: 4885:	}
        -: 4886:
        -: 4887:
        -: 4888:/* otoi - convert an octal digit string to an integer value */
        -: 4889:
function otoi called 20 returned 100% blocks executed 100%
       20: 4890:int otoi( str )
        -: 4891:Char str[];
        -: 4892:	{
        -: 4893:	unsigned int result;
        -: 4894:
       20: 4895:	(void) sscanf( (char *) str, "%o", &result );
       20: 4896:	return result;
        -: 4897:	}
        -: 4898:
        -: 4899:
        -: 4900:/* out - various flavors of outputing a (possibly formatted) string for the
        -: 4901: *	 generated scanner, keeping track of the line count.
        -: 4902: */
        -: 4903:
function out called 57199 returned 100% blocks executed 100%
    57199: 4904:void out( str )
        -: 4905:const char str[];
        -: 4906:	{
    57199: 4907:	fputs( str, stdout );
call    0 returned 57199
    57199: 4908:	out_line_count( str );
call    0 returned 57199
    57199: 4909:	}
        -: 4910:
function out_dec called 542117 returned 100% blocks executed 100%
   542117: 4911:void out_dec( fmt, n )
        -: 4912:const char fmt[];
        -: 4913:int n;
        -: 4914:	{
   542117: 4915:	printf( fmt, n );
call    0 returned 542117
   542117: 4916:	out_line_count( fmt );
call    0 returned 542117
   542117: 4917:	}
        -: 4918:
function out_dec2 called 55697 returned 100% blocks executed 100%
    55697: 4919:void out_dec2( fmt, n1, n2 )
        -: 4920:const char fmt[];
        -: 4921:int n1, n2;
        -: 4922:	{
    55697: 4923:	printf( fmt, n1, n2 );
call    0 returned 55697
    55697: 4924:	out_line_count( fmt );
call    0 returned 55697
    55697: 4925:	}
        -: 4926:
function out_hex called 66 returned 100% blocks executed 100%
       66: 4927:void out_hex( fmt, x )
        -: 4928:const char fmt[];
        -: 4929:unsigned int x;
        -: 4930:	{
       66: 4931:	printf( fmt, x );
call    0 returned 66
       66: 4932:	out_line_count( fmt );
call    0 returned 66
       66: 4933:	}
        -: 4934:
function out_line_count called 1421122 returned 100% blocks executed 100%
  1421122: 4935:void out_line_count( str )
        -: 4936:const char str[];
        -: 4937:	{
        -: 4938:	register int i;
        -: 4939:
 21396536: 4940:	for ( i = 0; str[i]; ++i )
branch  0 taken 19975414
branch  1 taken 1421122 (fallthrough)
 19975414: 4941:		if ( str[i] == '\n' )
branch  0 taken 40214 (fallthrough)
branch  1 taken 19935200
    40214: 4942:			++out_linenum;
  1421122: 4943:	}
        -: 4944:
function out_str called 2066 returned 100% blocks executed 100%
     2066: 4945:void out_str( fmt, str )
        -: 4946:const char fmt[], str[];
        -: 4947:	{
     2066: 4948:	printf( fmt, str );
call    0 returned 2066
     2066: 4949:	out_line_count( fmt );
call    0 returned 2066
     2066: 4950:	out_line_count( str );
call    0 returned 2066
     2066: 4951:	}
        -: 4952:
function out_str3 called 17 returned 100% blocks executed 100%
       17: 4953:void out_str3( fmt, s1, s2, s3 )
        -: 4954:const char fmt[], s1[], s2[], s3[];
        -: 4955:	{
       17: 4956:	printf( fmt, s1, s2, s3 );
call    0 returned 17
       17: 4957:	out_line_count( fmt );
call    0 returned 17
       17: 4958:	out_line_count( s1 );
call    0 returned 17
       17: 4959:	out_line_count( s2 );
call    0 returned 17
       17: 4960:	out_line_count( s3 );
call    0 returned 17
       17: 4961:	}
        -: 4962:
function out_str_dec called 3312 returned 100% blocks executed 100%
     3312: 4963:void out_str_dec( fmt, str, n )
        -: 4964:const char fmt[], str[];
        -: 4965:int n;
        -: 4966:	{
     3312: 4967:	printf( fmt, str, n );
call    0 returned 3312
     3312: 4968:	out_line_count( fmt );
call    0 returned 3312
     3312: 4969:	out_line_count( str );
call    0 returned 3312
     3312: 4970:	}
        -: 4971:
function outc called 716890 returned 100% blocks executed 100%
   716890: 4972:void outc( c )
        -: 4973:int c;
        -: 4974:	{
   716890: 4975:	putc( c, stdout );
call    0 returned 716890
        -: 4976:
   716890: 4977:	if ( c == '\n' )
branch  0 taken 73521 (fallthrough)
branch  1 taken 643369
    73521: 4978:		++out_linenum;
   716890: 4979:	}
        -: 4980:
function outn called 755219 returned 100% blocks executed 100%
   755219: 4981:void outn( str )
        -: 4982:const char str[];
        -: 4983:	{
   755219: 4984:	puts( str );
call    0 returned 755219
   755219: 4985:	out_line_count( str );
call    0 returned 755219
   755219: 4986:	++out_linenum;
   755219: 4987:	}
        -: 4988:
        -: 4989:
        -: 4990:/* readable_form - return the the human-readable form of a character
        -: 4991: *
        -: 4992: * The returned string is in static storage.
        -: 4993: */
        -: 4994:
function readable_form called 3477 returned 100% blocks executed 100%
     3477: 4995:char *readable_form( c )
        -: 4996:register int c;
        -: 4997:	{
        -: 4998:	static char rform[10];
        -: 4999:
     3477: 5000:	if ( (c >= 0 && c < 32) || c >= 127 )
branch  0 taken 3477 (fallthrough)
branch  1 taken 0
branch  2 taken 3013 (fallthrough)
branch  3 taken 464
branch  4 taken 1683 (fallthrough)
branch  5 taken 1330
        -: 5001:		{
     2147: 5002:		switch ( c )
branch  0 taken 14
branch  1 taken 14
branch  2 taken 18
branch  3 taken 14
branch  4 taken 18
branch  5 taken 14
branch  6 taken 18
branch  7 taken 2037
        -: 5003:			{
       14: 5004:			case '\b': return "\\b";
       14: 5005:			case '\f': return "\\f";
       18: 5006:			case '\n': return "\\n";
       14: 5007:			case '\r': return "\\r";
       18: 5008:			case '\t': return "\\t";
        -: 5009:
        -: 5010:#if __STDC__
       14: 5011:			case '\a': return "\\a";
       18: 5012:			case '\v': return "\\v";
        -: 5013:#endif
        -: 5014:
     2037: 5015:			default:
     2037: 5016:				(void) sprintf( rform, "\\%.3o",
        -: 5017:						(unsigned int) c );
     2037: 5018:				return rform;
        -: 5019:			}
        -: 5020:		}
        -: 5021:
     1330: 5022:	else if ( c == ' ' )
branch  0 taken 14 (fallthrough)
branch  1 taken 1316
       14: 5023:		return "' '";
        -: 5024:
        -: 5025:	else
        -: 5026:		{
     1316: 5027:		rform[0] = c;
     1316: 5028:		rform[1] = '\0';
        -: 5029:
     1316: 5030:		return rform;
        -: 5031:		}
        -: 5032:	}
        -: 5033:
        -: 5034:
        -: 5035:/* reallocate_array - increase the size of a dynamic array */
        -: 5036:
function reallocate_array called 171 returned 100% blocks executed 80%
      171: 5037:void *reallocate_array( array, size, element_size )
        -: 5038:void *array;
        -: 5039:int size;
        -: 5040:size_t element_size;
        -: 5041:	{
        -: 5042:	register void *new_array;
      171: 5043:	size_t num_bytes = element_size * size;
        -: 5044:
      171: 5045:	new_array = flex_realloc( array, num_bytes );
call    0 returned 171
      171: 5046:	if ( ! new_array )
branch  0 taken 0 (fallthrough)
branch  1 taken 171
    #####: 5047:		flexfatal( _( "attempt to increase array size failed" ) );
call    0 never executed
        -: 5048:
      171: 5049:	return new_array;
        -: 5050:	}
        -: 5051:
        -: 5052:
        -: 5053:/* skelout - write out one section of the skeleton file
        -: 5054: *
        -: 5055: * Description
        -: 5056: *    Copies skelfile or skel array to stdout until a line beginning with
        -: 5057: *    "%%" or EOF is found.
        -: 5058: */
function skelout called 10870 returned 100% blocks executed 95%
    10870: 5059:void skelout()
        -: 5060:	{
        -: 5061:	char buf_storage[MAXLINE];
    10870: 5062:	char *buf = buf_storage;
    10870: 5063:	int do_copy = 1;
        -: 5064:
        -: 5065:	/* Loop pulling lines either from the skelfile, if we're using
        -: 5066:	 * one, or from the skel[] array.
        -: 5067:	 */
  1640546: 5068:	while ( skelfile ?
branch  0 taken 42 (fallthrough)
branch  1 taken 820231
branch  2 taken 819692
branch  3 taken 581 (fallthrough)
       42: 5069:		(fgets( buf, MAXLINE, skelfile ) != NULL) :
call    0 returned 42
   820231: 5070:		((buf = (char *) skel[skel_ind++]) != 0) )
        -: 5071:		{ /* copy from skel array */
   819692: 5072:		if ( buf[0] == '%' )
branch  0 taken 63437 (fallthrough)
branch  1 taken 756255
        -: 5073:			{ /* control line */
    63437: 5074:			switch ( buf[1] )
branch  0 taken 10289
branch  1 taken 14086
branch  2 taken 18444
branch  3 taken 20618
branch  4 taken 0
        -: 5075:				{
    10289: 5076:				case '%':
    10289: 5077:					return;
        -: 5078:
    14086: 5079:				case '+':
    14086: 5080:					do_copy = C_plus_plus;
    14086: 5081:					break;
        -: 5082:
    18444: 5083:				case '-':
    18444: 5084:					do_copy = ! C_plus_plus;
    18444: 5085:					break;
        -: 5086:
    20618: 5087:				case '*':
    20618: 5088:					do_copy = 1;
    20618: 5089:					break;
        -: 5090:
    #####: 5091:				default:
    #####: 5092:					flexfatal(
call    0 never executed
        -: 5093:					_( "bad line in skeleton file" ) );
        -: 5094:				}
        -: 5095:			}
        -: 5096:
   756255: 5097:		else if ( do_copy )
branch  0 taken 695643 (fallthrough)
branch  1 taken 60612
        -: 5098:			{
   695643: 5099:			if ( skelfile )
branch  0 taken 2 (fallthrough)
branch  1 taken 695641
        -: 5100:				/* Skeleton file reads include final
        -: 5101:				 * newline, skel[] array does not.
        -: 5102:				 */
        2: 5103:				out( buf );
call    0 returned 2
        -: 5104:			else
   695641: 5105:				outn( buf );
call    0 returned 695641
        -: 5106:			}
        -: 5107:		}
        -: 5108:	}
        -: 5109:
        -: 5110:
        -: 5111:/* transition_struct_out - output a yy_trans_info structure
        -: 5112: *
        -: 5113: * outputs the yy_trans_info structure with the two elements, element_v and
        -: 5114: * element_n.  Formats the output with spaces and carriage returns.
        -: 5115: */
        -: 5116:
function transition_struct_out called 55697 returned 100% blocks executed 100%
    55697: 5117:void transition_struct_out( element_v, element_n )
        -: 5118:int element_v, element_n;
        -: 5119:	{
    55697: 5120:	out_dec2( " {%4d,%4d },", element_v, element_n );
call    0 returned 55697
        -: 5121:
    55697: 5122:	datapos += TRANS_STRUCT_PRINT_LENGTH;
        -: 5123:
    55697: 5124:	if ( datapos >= 79 - TRANS_STRUCT_PRINT_LENGTH )
branch  0 taken 11103 (fallthrough)
branch  1 taken 44594
        -: 5125:		{
    11103: 5126:		outc( '\n' );
call    0 returned 11103
        -: 5127:
    11103: 5128:		if ( ++dataline % 10 == 0 )
branch  0 taken 1062 (fallthrough)
branch  1 taken 10041
     1062: 5129:			outc( '\n' );
call    0 returned 1062
        -: 5130:
    11103: 5131:		datapos = 0;
        -: 5132:		}
    55697: 5133:	}
        -: 5134:
        -: 5135:
        -: 5136:/* The following is only needed when building flex's parser using certain
        -: 5137: * broken versions of bison.
        -: 5138: */
function yy_flex_xmalloc called 0 returned 0% blocks executed 0%
    #####: 5139:void *yy_flex_xmalloc( size )
        -: 5140:int size;
        -: 5141:	{
    #####: 5142:	void *result = flex_alloc( (size_t) size );
call    0 never executed
        -: 5143:
    #####: 5144:	if ( ! result  )
branch  0 never executed
branch  1 never executed
    #####: 5145:		flexfatal(
call    0 never executed
        -: 5146:			_( "memory allocation failed in yy_flex_xmalloc()" ) );
        -: 5147:
    #####: 5148:	return result;
        -: 5149:	}
        -: 5150:
        -: 5151:
        -: 5152:/* zero_out - set a region of memory to 0
        -: 5153: *
        -: 5154: * Sets region_ptr[0] through region_ptr[size_in_bytes - 1] to zero.
        -: 5155: */
        -: 5156:
function zero_out called 575 returned 100% blocks executed 100%
      575: 5157:void zero_out( region_ptr, size_in_bytes )
        -: 5158:char *region_ptr;
        -: 5159:size_t size_in_bytes;
        -: 5160:	{
        -: 5161:	register char *rp, *rp_end;
        -: 5162:
      575: 5163:	rp = region_ptr;
      575: 5164:	rp_end = region_ptr + size_in_bytes;
        -: 5165:
  4600575: 5166:	while ( rp < rp_end )
branch  0 taken 4600000
branch  1 taken 575 (fallthrough)
  4600000: 5167:		*rp++ = 0;
      575: 5168:	}
        -: 5169:/* nfa - NFA construction routines */
        -: 5170:
        -: 5171:/*-
        -: 5172: * Copyright (c) 1990 The Regents of the University of California.
        -: 5173: * All rights reserved.
        -: 5174: *
        -: 5175: * This code is derived from software contributed to Berkeley by
        -: 5176: * Vern Paxson.
        -: 5177: * 
        -: 5178: * The United States Government has rights in this work pursuant
        -: 5179: * to contract no. DE-AC03-76SF00098 between the United States
        -: 5180: * Department of Energy and the University of California.
        -: 5181: *
        -: 5182: * Redistribution and use in source and binary forms are permitted provided
        -: 5183: * that: (1) source distributions retain this entire copyright notice and
        -: 5184: * comment, and (2) distributions including binaries display the following
        -: 5185: * acknowledgement:  ``This product includes software developed by the
        -: 5186: * University of California, Berkeley and its contributors'' in the
        -: 5187: * documentation or other materials provided with the distribution and in
        -: 5188: * all advertising materials mentioning features or use of this software.
        -: 5189: * Neither the name of the University nor the names of its contributors may
        -: 5190: * be used to endorse or promote products derived from this software without
        -: 5191: * specific prior written permission.
        -: 5192: * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
        -: 5193: * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
        -: 5194: * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
        -: 5195: */
        -: 5196:
        -: 5197:/* $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $ */
        -: 5198:
        -: 5199:
        -: 5200:
        -: 5201:/* declare functions that have forward references */
        -: 5202:
        -: 5203:int dupmachine PROTO((int));
        -: 5204:void mkxtion PROTO((int, int));
        -: 5205:
        -: 5206:
        -: 5207:/* add_accept - add an accepting state to a machine
        -: 5208: *
        -: 5209: * accepting_number becomes mach's accepting number.
        -: 5210: */
        -: 5211:
function add_accept called 4131 returned 100% blocks executed 100%
     4131: 5212:void add_accept( mach, accepting_number )
        -: 5213:int mach, accepting_number;
        -: 5214:	{
        -: 5215:	/* Hang the accepting number off an epsilon state.  if it is associated
        -: 5216:	 * with a state that has a non-epsilon out-transition, then the state
        -: 5217:	 * will accept BEFORE it makes that transition, i.e., one character
        -: 5218:	 * too soon.
        -: 5219:	 */
        -: 5220:
     4131: 5221:	if ( transchar[finalst[mach]] == SYM_EPSILON )
branch  0 taken 1411 (fallthrough)
branch  1 taken 2720
     1411: 5222:		accptnum[finalst[mach]] = accepting_number;
        -: 5223:
        -: 5224:	else
        -: 5225:		{
     2720: 5226:		int astate = mkstate( SYM_EPSILON );
call    0 returned 2720
     2720: 5227:		accptnum[astate] = accepting_number;
     2720: 5228:		(void) link_machines( mach, astate );
call    0 returned 2720
        -: 5229:		}
     4131: 5230:	}
        -: 5231:
        -: 5232:
        -: 5233:/* copysingl - make a given number of copies of a singleton machine
        -: 5234: *
        -: 5235: * synopsis
        -: 5236: *
        -: 5237: *   newsng = copysingl( singl, num );
        -: 5238: *
        -: 5239: *     newsng - a new singleton composed of num copies of singl
        -: 5240: *     singl  - a singleton machine
        -: 5241: *     num    - the number of copies of singl to be present in newsng
        -: 5242: */
        -: 5243:
function copysingl called 296 returned 100% blocks executed 100%
      296: 5244:int copysingl( singl, num )
        -: 5245:int singl, num;
        -: 5246:	{
        -: 5247:	int copy, i;
        -: 5248:
      296: 5249:	copy = mkstate( SYM_EPSILON );
call    0 returned 296
        -: 5250:
      786: 5251:	for ( i = 1; i <= num; ++i )
branch  0 taken 490
branch  1 taken 296 (fallthrough)
      490: 5252:		copy = link_machines( copy, dupmachine( singl ) );
call    0 returned 490
call    1 returned 490
        -: 5253:
      296: 5254:	return copy;
        -: 5255:	}
        -: 5256:
        -: 5257:
        -: 5258:/* dumpnfa - debugging routine to write out an nfa */
        -: 5259:
function dumpnfa called 14 returned 100% blocks executed 100%
       14: 5260:void dumpnfa( state1 )
        -: 5261:int state1;
        -: 5262:
        -: 5263:	{
        -: 5264:	int sym, tsp1, tsp2, anum, ns;
        -: 5265:
       14: 5266:	fprintf( err,
call    0 returned 14
        -: 5267:	_( "\n\n********** beginning dump of nfa with start state %d\n" ),
        -: 5268:		state1 );
        -: 5269:
        -: 5270:	/* We probably should loop starting at firstst[state1] and going to
        -: 5271:	 * lastst[state1], but they're not maintained properly when we "or"
        -: 5272:	 * all of the rules together.  So we use our knowledge that the machine
        -: 5273:	 * starts at state 1 and ends at lastnfa.
        -: 5274:	 */
        -: 5275:
        -: 5276:	/* for ( ns = firstst[state1]; ns <= lastst[state1]; ++ns ) */
     4072: 5277:	for ( ns = 1; ns <= lastnfa; ++ns )
branch  0 taken 4058
branch  1 taken 14 (fallthrough)
        -: 5278:		{
     4058: 5279:		fprintf( err, _( "state # %4d\t" ), ns );
call    0 returned 4058
        -: 5280:
     4058: 5281:		sym = transchar[ns];
     4058: 5282:		tsp1 = trans1[ns];
     4058: 5283:		tsp2 = trans2[ns];
     4058: 5284:		anum = accptnum[ns];
        -: 5285:
     4058: 5286:		fprintf( err, "%3d:  %4d, %4d", sym, tsp1, tsp2 );
call    0 returned 4058
        -: 5287:
     4058: 5288:		if ( anum != NIL )
branch  0 taken 639 (fallthrough)
branch  1 taken 3419
      639: 5289:			fprintf( err, "  [%d]", anum );
call    0 returned 639
        -: 5290:
     4058: 5291:		fprintf( err, "\n" );
call    0 returned 4058
        -: 5292:		}
        -: 5293:
       14: 5294:	fprintf( err, _( "********** end of dump\n" ) );
call    0 returned 14
       14: 5295:	}
        -: 5296:
        -: 5297:
        -: 5298:/* dupmachine - make a duplicate of a given machine
        -: 5299: *
        -: 5300: * synopsis
        -: 5301: *
        -: 5302: *   copy = dupmachine( mach );
        -: 5303: *
        -: 5304: *     copy - holds duplicate of mach
        -: 5305: *     mach - machine to be duplicated
        -: 5306: *
        -: 5307: * note that the copy of mach is NOT an exact duplicate; rather, all the
        -: 5308: * transition states values are adjusted so that the copy is self-contained,
        -: 5309: * as the original should have been.
        -: 5310: *
        -: 5311: * also note that the original MUST be contiguous, with its low and high
        -: 5312: * states accessible by the arrays firstst and lastst
        -: 5313: */
        -: 5314:
function dupmachine called 886 returned 100% blocks executed 62%
      886: 5315:int dupmachine( mach )
        -: 5316:int mach;
        -: 5317:	{
        -: 5318:	int i, init, state_offset;
      886: 5319:	int state = 0;
      886: 5320:	int last = lastst[mach];
        -: 5321:
     1772: 5322:	for ( i = firstst[mach]; i <= last; ++i )
branch  0 taken 886
branch  1 taken 886 (fallthrough)
        -: 5323:		{
      886: 5324:		state = mkstate( transchar[i] );
call    0 returned 886
        -: 5325:
      886: 5326:		if ( trans1[i] != NO_TRANSITION )
branch  0 taken 0 (fallthrough)
branch  1 taken 886
        -: 5327:			{
    #####: 5328:			mkxtion( finalst[state], trans1[i] + state - i );
call    0 never executed
        -: 5329:
    #####: 5330:			if ( transchar[i] == SYM_EPSILON &&
branch  0 never executed
branch  1 never executed
    #####: 5331:			     trans2[i] != NO_TRANSITION )
branch  0 never executed
branch  1 never executed
    #####: 5332:				mkxtion( finalst[state],
    #####: 5333:					trans2[i] + state - i );
call    0 never executed
        -: 5334:			}
        -: 5335:
      886: 5336:		accptnum[state] = accptnum[i];
        -: 5337:		}
        -: 5338:
      886: 5339:	if ( state == 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 886
    #####: 5340:		flexfatal( _( "empty machine in dupmachine()" ) );
call    0 never executed
        -: 5341:
      886: 5342:	state_offset = state - i + 1;
        -: 5343:
      886: 5344:	init = mach + state_offset;
      886: 5345:	firstst[init] = firstst[mach] + state_offset;
      886: 5346:	finalst[init] = finalst[mach] + state_offset;
      886: 5347:	lastst[init] = lastst[mach] + state_offset;
        -: 5348:
      886: 5349:	return init;
        -: 5350:	}
        -: 5351:
        -: 5352:
        -: 5353:/* finish_rule - finish up the processing for a rule
        -: 5354: *
        -: 5355: * An accepting number is added to the given machine.  If variable_trail_rule
        -: 5356: * is true then the rule has trailing context and both the head and trail
        -: 5357: * are variable size.  Otherwise if headcnt or trailcnt is non-zero then
        -: 5358: * the machine recognizes a pattern with trailing context and headcnt is
        -: 5359: * the number of characters in the matched part of the pattern, or zero
        -: 5360: * if the matched part has variable length.  trailcnt is the number of
        -: 5361: * trailing context characters in the pattern, or zero if the trailing
        -: 5362: * context has variable length.
        -: 5363: */
        -: 5364:
function finish_rule called 4067 returned 100% blocks executed 100%
     4067: 5365:void finish_rule( mach, variable_trail_rule, headcnt, trailcnt )
        -: 5366:int mach, variable_trail_rule, headcnt, trailcnt;
        -: 5367:	{
        -: 5368:	char action_text[MAXLINE];
        -: 5369:
     4067: 5370:	add_accept( mach, num_rules );
call    0 returned 4067
        -: 5371:
        -: 5372:	/* We did this in new_rule(), but it often gets the wrong
        -: 5373:	 * number because we do it before we start parsing the current rule.
        -: 5374:	 */
     4067: 5375:	rule_linenum[num_rules] = linenum;
        -: 5376:
        -: 5377:	/* If this is a continued action, then the line-number has already
        -: 5378:	 * been updated, giving us the wrong number.
        -: 5379:	 */
     4067: 5380:	if ( continued_action )
branch  0 taken 11 (fallthrough)
branch  1 taken 4056
       11: 5381:		--rule_linenum[num_rules];
        -: 5382:
     4067: 5383:	sprintf( action_text, "case %d:\n", num_rules );
     4067: 5384:	add_action( action_text );
call    0 returned 4067
        -: 5385:
     4067: 5386:	if ( variable_trail_rule )
branch  0 taken 64 (fallthrough)
branch  1 taken 4003
        -: 5387:		{
       64: 5388:		rule_type[num_rules] = RULE_VARIABLE;
        -: 5389:
       64: 5390:		if ( performance_report > 0 )
branch  0 taken 1 (fallthrough)
branch  1 taken 63
        1: 5391:			fprintf( err,
        -: 5392:			_( "Variable trailing context rule at line %d\n" ),
        1: 5393:				rule_linenum[num_rules] );
call    0 returned 1
        -: 5394:
       64: 5395:		variable_trailing_context_rules = true;
        -: 5396:		}
        -: 5397:
        -: 5398:	else
        -: 5399:		{
     4003: 5400:		rule_type[num_rules] = RULE_NORMAL;
        -: 5401:
     4003: 5402:		if ( headcnt > 0 || trailcnt > 0 )
branch  0 taken 3926 (fallthrough)
branch  1 taken 77
branch  2 taken 72 (fallthrough)
branch  3 taken 3854
        -: 5403:			{
        -: 5404:			/* Do trailing context magic to not match the trailing
        -: 5405:			 * characters.
        -: 5406:			 */
      149: 5407:			char *scanner_cp = "yy_c_buf_p = yy_cp";
      149: 5408:			char *scanner_bp = "yy_bp";
        -: 5409:
      149: 5410:			add_action(
call    0 returned 149
        -: 5411:	"*yy_cp = yy_hold_char; /* undo effects of setting up yytext */\n" );
        -: 5412:
      149: 5413:			if ( headcnt > 0 )
branch  0 taken 77 (fallthrough)
branch  1 taken 72
        -: 5414:				{
       77: 5415:				sprintf( action_text, "%s = %s + %d;\n",
        -: 5416:				scanner_cp, scanner_bp, headcnt );
       77: 5417:				add_action( action_text );
call    0 returned 77
        -: 5418:				}
        -: 5419:
        -: 5420:			else
        -: 5421:				{
       72: 5422:				sprintf( action_text, "%s -= %d;\n",
        -: 5423:					scanner_cp, trailcnt );
       72: 5424:				add_action( action_text );
call    0 returned 72
        -: 5425:				}
        -: 5426:
      149: 5427:			add_action(
call    0 returned 149
        -: 5428:			"YY_DO_BEFORE_ACTION; /* set up yytext again */\n" );
        -: 5429:			}
        -: 5430:		}
        -: 5431:
        -: 5432:	/* Okay, in the action code at this point yytext and yyleng have
        -: 5433:	 * their proper final values for this rule, so here's the point
        -: 5434:	 * to do any user action.  But don't do it for continued actions,
        -: 5435:	 * as that'll result in multiple YY_RULE_SETUP's.
        -: 5436:	 */
     4067: 5437:	if ( ! continued_action )
branch  0 taken 4056 (fallthrough)
branch  1 taken 11
     4056: 5438:		add_action( "YY_RULE_SETUP\n" );
call    0 returned 4056
        -: 5439:
     4067: 5440:	line_directive_out( (FILE *) 0, 1 );
call    0 returned 4067
     4067: 5441:	}
        -: 5442:
        -: 5443:
        -: 5444:/* link_machines - connect two machines together
        -: 5445: *
        -: 5446: * synopsis
        -: 5447: *
        -: 5448: *   new = link_machines( first, last );
        -: 5449: *
        -: 5450: *     new    - a machine constructed by connecting first to last
        -: 5451: *     first  - the machine whose successor is to be last
        -: 5452: *     last   - the machine whose predecessor is to be first
        -: 5453: *
        -: 5454: * note: this routine concatenates the machine first with the machine
        -: 5455: *  last to produce a machine new which will pattern-match first first
        -: 5456: *  and then last, and will fail if either of the sub-patterns fails.
        -: 5457: *  FIRST is set to new by the operation.  last is unmolested.
        -: 5458: */
        -: 5459:
function link_machines called 18453 returned 100% blocks executed 71%
    18453: 5460:int link_machines( first, last )
        -: 5461:int first, last;
        -: 5462:	{
    18453: 5463:	if ( first == NIL )
branch  0 taken 0 (fallthrough)
branch  1 taken 18453
    #####: 5464:		return last;
        -: 5465:
    18453: 5466:	else if ( last == NIL )
branch  0 taken 0 (fallthrough)
branch  1 taken 18453
    #####: 5467:		return first;
        -: 5468:
        -: 5469:	else
        -: 5470:		{
    18453: 5471:		mkxtion( finalst[first], last );
call    0 returned 18453
    18453: 5472:		finalst[first] = finalst[last];
    18453: 5473:		lastst[first] = MAX( lastst[first], lastst[last] );
    18453: 5474:		firstst[first] = MIN( firstst[first], firstst[last] );
        -: 5475:
    18453: 5476:		return first;
        -: 5477:		}
        -: 5478:	}
        -: 5479:
        -: 5480:
        -: 5481:/* mark_beginning_as_normal - mark each "beginning" state in a machine
        -: 5482: *                            as being a "normal" (i.e., not trailing context-
        -: 5483: *                            associated) states
        -: 5484: *
        -: 5485: * The "beginning" states are the epsilon closure of the first state
        -: 5486: */
        -: 5487:
function mark_beginning_as_normal called 110 returned 100% blocks executed 36%
      110: 5488:void mark_beginning_as_normal( mach )
        -: 5489:register int mach;
        -: 5490:	{
      110: 5491:	switch ( state_type[mach] )
branch  0 taken 0
branch  1 taken 110
branch  2 taken 0
        -: 5492:		{
    #####: 5493:		case STATE_NORMAL:
        -: 5494:			/* Oh, we've already visited here. */
    #####: 5495:			return;
        -: 5496:
      110: 5497:		case STATE_TRAILING_CONTEXT:
      110: 5498:			state_type[mach] = STATE_NORMAL;
        -: 5499:
      110: 5500:			if ( transchar[mach] == SYM_EPSILON )
branch  0 taken 0 (fallthrough)
branch  1 taken 110
        -: 5501:				{
    #####: 5502:				if ( trans1[mach] != NO_TRANSITION )
branch  0 never executed
branch  1 never executed
    #####: 5503:					mark_beginning_as_normal(
    #####: 5504:						trans1[mach] );
call    0 never executed
        -: 5505:
    #####: 5506:				if ( trans2[mach] != NO_TRANSITION )
branch  0 never executed
branch  1 never executed
    #####: 5507:					mark_beginning_as_normal(
    #####: 5508:						trans2[mach] );
call    0 never executed
        -: 5509:				}
      110: 5510:			break;
        -: 5511:
    #####: 5512:		default:
    #####: 5513:			flexerror(
call    0 never executed
        -: 5514:			_( "bad state type in mark_beginning_as_normal()" ) );
    #####: 5515:			break;
        -: 5516:		}
        -: 5517:	}
        -: 5518:
        -: 5519:
        -: 5520:/* mkbranch - make a machine that branches to two machines
        -: 5521: *
        -: 5522: * synopsis
        -: 5523: *
        -: 5524: *   branch = mkbranch( first, second );
        -: 5525: *
        -: 5526: *     branch - a machine which matches either first's pattern or second's
        -: 5527: *     first, second - machines whose patterns are to be or'ed (the | operator)
        -: 5528: *
        -: 5529: * Note that first and second are NEITHER destroyed by the operation.  Also,
        -: 5530: * the resulting machine CANNOT be used with any other "mk" operation except
        -: 5531: * more mkbranch's.  Compare with mkor()
        -: 5532: */
        -: 5533:
function mkbranch called 4680 returned 100% blocks executed 78%
     4680: 5534:int mkbranch( first, second )
        -: 5535:int first, second;
        -: 5536:	{
        -: 5537:	int eps;
        -: 5538:
     4680: 5539:	if ( first == NO_TRANSITION )
branch  0 taken 0 (fallthrough)
branch  1 taken 4680
    #####: 5540:		return second;
        -: 5541:
     4680: 5542:	else if ( second == NO_TRANSITION )
branch  0 taken 0 (fallthrough)
branch  1 taken 4680
    #####: 5543:		return first;
        -: 5544:
     4680: 5545:	eps = mkstate( SYM_EPSILON );
call    0 returned 4680
        -: 5546:
     4680: 5547:	mkxtion( eps, first );
call    0 returned 4680
     4680: 5548:	mkxtion( eps, second );
call    0 returned 4680
        -: 5549:
     4680: 5550:	return eps;
        -: 5551:	}
        -: 5552:
        -: 5553:
        -: 5554:/* mkclos - convert a machine into a closure
        -: 5555: *
        -: 5556: * synopsis
        -: 5557: *   new = mkclos( state );
        -: 5558: *
        -: 5559: * new - a new state which matches the closure of "state"
        -: 5560: */
        -: 5561:
function mkclos called 944 returned 100% blocks executed 100%
      944: 5562:int mkclos( state )
        -: 5563:int state;
        -: 5564:	{
      944: 5565:	return mkopt( mkposcl( state ) );
call    0 returned 944
call    1 returned 944
        -: 5566:	}
        -: 5567:
        -: 5568:
        -: 5569:/* mkopt - make a machine optional
        -: 5570: *
        -: 5571: * synopsis
        -: 5572: *
        -: 5573: *   new = mkopt( mach );
        -: 5574: *
        -: 5575: *     new  - a machine which optionally matches whatever mach matched
        -: 5576: *     mach - the machine to make optional
        -: 5577: *
        -: 5578: * notes:
        -: 5579: *     1. mach must be the last machine created
        -: 5580: *     2. mach is destroyed by the call
        -: 5581: */
        -: 5582:
function mkopt called 1246 returned 100% blocks executed 100%
     1246: 5583:int mkopt( mach )
        -: 5584:int mach;
        -: 5585:	{
        -: 5586:	int eps;
        -: 5587:
     1246: 5588:	if ( ! SUPER_FREE_EPSILON(finalst[mach]) )
branch  0 taken 1244 (fallthrough)
branch  1 taken 2
branch  2 taken 944 (fallthrough)
branch  3 taken 300
        -: 5589:		{
      946: 5590:		eps = mkstate( SYM_EPSILON );
call    0 returned 946
      946: 5591:		mach = link_machines( mach, eps );
call    0 returned 946
        -: 5592:		}
        -: 5593:
        -: 5594:	/* Can't skimp on the following if FREE_EPSILON(mach) is true because
        -: 5595:	 * some state interior to "mach" might point back to the beginning
        -: 5596:	 * for a closure.
        -: 5597:	 */
     1246: 5598:	eps = mkstate( SYM_EPSILON );
call    0 returned 1246
     1246: 5599:	mach = link_machines( eps, mach );
call    0 returned 1246
        -: 5600:
     1246: 5601:	mkxtion( mach, finalst[mach] );
call    0 returned 1246
        -: 5602:
     1246: 5603:	return mach;
        -: 5604:	}
        -: 5605:
        -: 5606:
        -: 5607:/* mkor - make a machine that matches either one of two machines
        -: 5608: *
        -: 5609: * synopsis
        -: 5610: *
        -: 5611: *   new = mkor( first, second );
        -: 5612: *
        -: 5613: *     new - a machine which matches either first's pattern or second's
        -: 5614: *     first, second - machines whose patterns are to be or'ed (the | operator)
        -: 5615: *
        -: 5616: * note that first and second are both destroyed by the operation
        -: 5617: * the code is rather convoluted because an attempt is made to minimize
        -: 5618: * the number of epsilon states needed
        -: 5619: */
        -: 5620:
function mkor called 1103 returned 100% blocks executed 90%
     1103: 5621:int mkor( first, second )
        -: 5622:int first, second;
        -: 5623:	{
        -: 5624:	int eps, orend;
        -: 5625:
     1103: 5626:	if ( first == NIL )
branch  0 taken 0 (fallthrough)
branch  1 taken 1103
    #####: 5627:		return second;
        -: 5628:
     1103: 5629:	else if ( second == NIL )
branch  0 taken 0 (fallthrough)
branch  1 taken 1103
    #####: 5630:		return first;
        -: 5631:
        -: 5632:	else
        -: 5633:		{
        -: 5634:		/* See comment in mkopt() about why we can't use the first
        -: 5635:		 * state of "first" or "second" if they satisfy "FREE_EPSILON".
        -: 5636:		 */
     1103: 5637:		eps = mkstate( SYM_EPSILON );
call    0 returned 1103
        -: 5638:
     1103: 5639:		first = link_machines( eps, first );
call    0 returned 1103
        -: 5640:
     1103: 5641:		mkxtion( first, second );
call    0 returned 1103
        -: 5642:
     1103: 5643:		if ( SUPER_FREE_EPSILON(finalst[first]) &&
branch  0 taken 672 (fallthrough)
branch  1 taken 431
branch  2 taken 672 (fallthrough)
branch  3 taken 0
      672: 5644:		     accptnum[finalst[first]] == NIL )
branch  0 taken 672 (fallthrough)
branch  1 taken 0
        -: 5645:			{
      672: 5646:			orend = finalst[first];
      672: 5647:			mkxtion( finalst[second], orend );
call    0 returned 672
        -: 5648:			}
        -: 5649:
      431: 5650:		else if ( SUPER_FREE_EPSILON(finalst[second]) &&
branch  0 taken 100 (fallthrough)
branch  1 taken 331
branch  2 taken 100 (fallthrough)
branch  3 taken 0
      100: 5651:			  accptnum[finalst[second]] == NIL )
branch  0 taken 100 (fallthrough)
branch  1 taken 0
        -: 5652:			{
      100: 5653:			orend = finalst[second];
      100: 5654:			mkxtion( finalst[first], orend );
call    0 returned 100
        -: 5655:			}
        -: 5656:
        -: 5657:		else
        -: 5658:			{
      331: 5659:			eps = mkstate( SYM_EPSILON );
call    0 returned 331
        -: 5660:
      331: 5661:			first = link_machines( first, eps );
call    0 returned 331
      331: 5662:			orend = finalst[first];
        -: 5663:
      331: 5664:			mkxtion( finalst[second], orend );
call    0 returned 331
        -: 5665:			}
        -: 5666:		}
        -: 5667:
     1103: 5668:	finalst[first] = orend;
     1103: 5669:	return first;
        -: 5670:	}
        -: 5671:
        -: 5672:
        -: 5673:/* mkposcl - convert a machine into a positive closure
        -: 5674: *
        -: 5675: * synopsis
        -: 5676: *   new = mkposcl( state );
        -: 5677: *
        -: 5678: *    new - a machine matching the positive closure of "state"
        -: 5679: */
        -: 5680:
function mkposcl called 1292 returned 100% blocks executed 67%
     1292: 5681:int mkposcl( state )
        -: 5682:int state;
        -: 5683:	{
        -: 5684:	int eps;
        -: 5685:
    1292*: 5686:	if ( SUPER_FREE_EPSILON(finalst[state]) )
branch  0 taken 0 (fallthrough)
branch  1 taken 1292
branch  2 never executed
branch  3 never executed
        -: 5687:		{
    #####: 5688:		mkxtion( finalst[state], state );
call    0 never executed
    #####: 5689:		return state;
        -: 5690:		}
        -: 5691:
        -: 5692:	else
        -: 5693:		{
     1292: 5694:		eps = mkstate( SYM_EPSILON );
call    0 returned 1292
     1292: 5695:		mkxtion( eps, state );
call    0 returned 1292
     1292: 5696:		return link_machines( state, eps );
call    0 returned 1292
        -: 5697:		}
        -: 5698:	}
        -: 5699:
        -: 5700:
        -: 5701:/* mkrep - make a replicated machine
        -: 5702: *
        -: 5703: * synopsis
        -: 5704: *   new = mkrep( mach, lb, ub );
        -: 5705: *
        -: 5706: *    new - a machine that matches whatever "mach" matched from "lb"
        -: 5707: *          number of times to "ub" number of times
        -: 5708: *
        -: 5709: * note
        -: 5710: *   if "ub" is INFINITY then "new" matches "lb" or more occurrences of "mach"
        -: 5711: */
        -: 5712:
function mkrep called 198 returned 100% blocks executed 100%
      198: 5713:int mkrep( mach, lb, ub )
        -: 5714:int mach, lb, ub;
        -: 5715:	{
        -: 5716:	int base_mach, tail, copy, i;
        -: 5717:
      198: 5718:	base_mach = copysingl( mach, lb - 1 );
call    0 returned 198
        -: 5719:
      198: 5720:	if ( ub == INFINITY )
branch  0 taken 98 (fallthrough)
branch  1 taken 100
        -: 5721:		{
       98: 5722:		copy = dupmachine( mach );
call    0 returned 98
       98: 5723:		mach = link_machines( mach,
call    0 returned 98
call    1 returned 98
call    2 returned 98
        -: 5724:		link_machines( base_mach, mkclos( copy ) ) );
        -: 5725:		}
        -: 5726:
        -: 5727:	else
        -: 5728:		{
      100: 5729:		tail = mkstate( SYM_EPSILON );
call    0 returned 100
        -: 5730:
      398: 5731:		for ( i = lb; i < ub; ++i )
branch  0 taken 298
branch  1 taken 100 (fallthrough)
        -: 5732:			{
      298: 5733:			copy = dupmachine( mach );
call    0 returned 298
      298: 5734:			tail = mkopt( link_machines( copy, tail ) );
call    0 returned 298
call    1 returned 298
        -: 5735:			}
        -: 5736:
      100: 5737:		mach = link_machines( mach, link_machines( base_mach, tail ) );
call    0 returned 100
call    1 returned 100
        -: 5738:		}
        -: 5739:
      198: 5740:	return mach;
        -: 5741:	}
        -: 5742:
        -: 5743:
        -: 5744:/* mkstate - create a state with a transition on a given symbol
        -: 5745: *
        -: 5746: * synopsis
        -: 5747: *
        -: 5748: *   state = mkstate( sym );
        -: 5749: *
        -: 5750: *     state - a new state matching sym
        -: 5751: *     sym   - the symbol the new state is to have an out-transition on
        -: 5752: *
        -: 5753: * note that this routine makes new states in ascending order through the
        -: 5754: * state array (and increments LASTNFA accordingly).  The routine DUPMACHINE
        -: 5755: * relies on machines being made in ascending order and that they are
        -: 5756: * CONTIGUOUS.  Change it and you will have to rewrite DUPMACHINE (kludge
        -: 5757: * that it admittedly is)
        -: 5758: */
        -: 5759:
function mkstate called 29465 returned 100% blocks executed 96%
    29465: 5760:int mkstate( sym )
        -: 5761:int sym;
        -: 5762:	{
    29465: 5763:	if ( ++lastnfa >= current_mns )
branch  0 taken 2 (fallthrough)
branch  1 taken 29463
        -: 5764:		{
        2: 5765:		if ( (current_mns += MNS_INCREMENT) >= MAXIMUM_MNS )
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 5766:			lerrif(
call    0 never executed
        -: 5767:		_( "input rules are too complicated (>= %d NFA states)" ),
        -: 5768:				current_mns );
        -: 5769:
        2: 5770:		++num_reallocs;
        -: 5771:
        2: 5772:		firstst = reallocate_integer_array( firstst, current_mns );
call    0 returned 2
        2: 5773:		lastst = reallocate_integer_array( lastst, current_mns );
call    0 returned 2
        2: 5774:		finalst = reallocate_integer_array( finalst, current_mns );
call    0 returned 2
        2: 5775:		transchar = reallocate_integer_array( transchar, current_mns );
call    0 returned 2
        2: 5776:		trans1 = reallocate_integer_array( trans1, current_mns );
call    0 returned 2
        2: 5777:		trans2 = reallocate_integer_array( trans2, current_mns );
call    0 returned 2
        2: 5778:		accptnum = reallocate_integer_array( accptnum, current_mns );
call    0 returned 2
        2: 5779:		assoc_rule =
        2: 5780:			reallocate_integer_array( assoc_rule, current_mns );
call    0 returned 2
        2: 5781:		state_type =
        2: 5782:			reallocate_integer_array( state_type, current_mns );
call    0 returned 2
        -: 5783:		}
        -: 5784:
    29465: 5785:	firstst[lastnfa] = lastnfa;
    29465: 5786:	finalst[lastnfa] = lastnfa;
    29465: 5787:	lastst[lastnfa] = lastnfa;
    29465: 5788:	transchar[lastnfa] = sym;
    29465: 5789:	trans1[lastnfa] = NO_TRANSITION;
    29465: 5790:	trans2[lastnfa] = NO_TRANSITION;
    29465: 5791:	accptnum[lastnfa] = NIL;
    29465: 5792:	assoc_rule[lastnfa] = num_rules;
    29465: 5793:	state_type[lastnfa] = current_state_type;
        -: 5794:
        -: 5795:	/* Fix up equivalence classes base on this transition.  Note that any
        -: 5796:	 * character which has its own transition gets its own equivalence
        -: 5797:	 * class.  Thus only characters which are only in character classes
        -: 5798:	 * have a chance at being in the same equivalence class.  E.g. "a|b"
        -: 5799:	 * puts 'a' and 'b' into two different equivalence classes.  "[ab]"
        -: 5800:	 * puts them in the same equivalence class (barring other differences
        -: 5801:	 * elsewhere in the input).
        -: 5802:	 */
        -: 5803:
    29465: 5804:	if ( sym < 0 )
branch  0 taken 27169 (fallthrough)
branch  1 taken 2296
        -: 5805:		{
        -: 5806:		/* We don't have to update the equivalence classes since
        -: 5807:		 * that was already done when the ccl was created for the
        -: 5808:		 * first time.
        -: 5809:		 */
        -: 5810:		}
        -: 5811:
    27169: 5812:	else if ( sym == SYM_EPSILON )
branch  0 taken 15181 (fallthrough)
branch  1 taken 11988
    15181: 5813:		++numeps;
        -: 5814:
        -: 5815:	else
        -: 5816:		{
    11988: 5817:		check_char( sym );
call    0 returned 11987
        -: 5818:
    11987: 5819:		if ( useecs )
branch  0 taken 7561 (fallthrough)
branch  1 taken 4426
        -: 5820:			/* Map NUL's to csize. */
     7561: 5821:			mkechar( sym ? sym : csize, nextecm, ecgroup );
branch  0 taken 7559 (fallthrough)
branch  1 taken 2
call    2 returned 7561
        -: 5822:		}
        -: 5823:
    29464: 5824:	return lastnfa;
        -: 5825:	}
        -: 5826:
        -: 5827:
        -: 5828:/* mkxtion - make a transition from one state to another
        -: 5829: *
        -: 5830: * synopsis
        -: 5831: *
        -: 5832: *   mkxtion( statefrom, stateto );
        -: 5833: *
        -: 5834: *     statefrom - the state from which the transition is to be made
        -: 5835: *     stateto   - the state to which the transition is to be made
        -: 5836: */
        -: 5837:
function mkxtion called 32557 returned 100% blocks executed 86%
    32557: 5838:void mkxtion( statefrom, stateto )
        -: 5839:int statefrom, stateto;
        -: 5840:	{
    32557: 5841:	if ( trans1[statefrom] == NO_TRANSITION )
branch  0 taken 24471 (fallthrough)
branch  1 taken 8086
    24471: 5842:		trans1[statefrom] = stateto;
        -: 5843:
     8086: 5844:	else if ( (transchar[statefrom] != SYM_EPSILON) ||
branch  0 taken 8086 (fallthrough)
branch  1 taken 0
     8086: 5845:		  (trans2[statefrom] != NO_TRANSITION) )
branch  0 taken 0 (fallthrough)
branch  1 taken 8086
    #####: 5846:		flexfatal( _( "found too many transitions in mkxtion()" ) );
call    0 never executed
        -: 5847:
        -: 5848:	else
        -: 5849:		{ /* second out-transition for an epsilon state */
     8086: 5850:		++eps2;
     8086: 5851:		trans2[statefrom] = stateto;
        -: 5852:		}
    32557: 5853:	}
        -: 5854:
        -: 5855:/* new_rule - initialize for a new rule */
        -: 5856:
function new_rule called 4086 returned 100% blocks executed 88%
     4086: 5857:void new_rule()
        -: 5858:	{
     4086: 5859:	if ( ++num_rules >= current_max_rules )
branch  0 taken 7 (fallthrough)
branch  1 taken 4079
        -: 5860:		{
        7: 5861:		++num_reallocs;
        7: 5862:		current_max_rules += MAX_RULES_INCREMENT;
        7: 5863:		rule_type = reallocate_integer_array( rule_type,
call    0 returned 7
        -: 5864:							current_max_rules );
        7: 5865:		rule_linenum = reallocate_integer_array( rule_linenum,
call    0 returned 7
        -: 5866:							current_max_rules );
        7: 5867:		rule_useful = reallocate_integer_array( rule_useful,
call    0 returned 7
        -: 5868:							current_max_rules );
        -: 5869:		}
        -: 5870:
     4086: 5871:	if ( num_rules > MAX_RULE )
branch  0 taken 0 (fallthrough)
branch  1 taken 4086
    #####: 5872:		lerrif( _( "too many rules (> %d)!" ), MAX_RULE );
call    0 never executed
        -: 5873:
     4086: 5874:	rule_linenum[num_rules] = linenum;
     4086: 5875:	rule_useful[num_rules] = false;
     4086: 5876:	}
        -: 5877:/* File created from flex.skl via mkskel.sh */
        -: 5878:
        -: 5879:
        -: 5880:const char *skel[] = {
        -: 5881:  "/* A lexical scanner generated by flex */",
        -: 5882:  "",
        -: 5883:  "/* Scanner skeleton version:",
        -: 5884:  " * $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $",
        -: 5885:  " */",
        -: 5886:  "",
        -: 5887:  "#define FLEX_SCANNER",
        -: 5888:  "#define YY_FLEX_MAJOR_VERSION 2",
        -: 5889:  "#define YY_FLEX_MINOR_VERSION 5",
        -: 5890:  "",
        -: 5891:  "%-",
        -: 5892:  "#include <stdio.h>",
        -: 5893:  "%*",
        -: 5894:  "",
        -: 5895:  "",
        -: 5896:  "/* cfront 1.2 defines \"c_plusplus\" instead of \"__cplusplus\" */",
        -: 5897:  "#ifdef c_plusplus",
        -: 5898:  "#ifndef __cplusplus",
        -: 5899:  "#define __cplusplus",
        -: 5900:  "#endif",
        -: 5901:  "#endif",
        -: 5902:  "",
        -: 5903:  "",
        -: 5904:  "#ifdef __cplusplus",
        -: 5905:  "",
        -: 5906:  "#include <stdlib.h>",
        -: 5907:  "%+",
        -: 5908:  "class istream;",
        -: 5909:  "%*",
        -: 5910:  "#include <unistd.h>",
        -: 5911:  "",
        -: 5912:  "/* Use prototypes in function declarations. */",
        -: 5913:  "#define YY_USE_PROTOS",
        -: 5914:  "",
        -: 5915:  "/* The \"const\" storage-class-modifier is valid. */",
        -: 5916:  "#define YY_USE_CONST",
        -: 5917:  "",
        -: 5918:  "#else	/* ! __cplusplus */",
        -: 5919:  "",
        -: 5920:  "#if __STDC__",
        -: 5921:  "",
        -: 5922:  "#define YY_USE_PROTOS",
        -: 5923:  "#define YY_USE_CONST",
        -: 5924:  "",
        -: 5925:  "#endif	/* __STDC__ */",
        -: 5926:  "#endif	/* ! __cplusplus */",
        -: 5927:  "",
        -: 5928:  "#ifdef __TURBOC__",
        -: 5929:  " #pragma warn -rch",
        -: 5930:  " #pragma warn -use",
        -: 5931:  "#include <io.h>",
        -: 5932:  "#include <stdlib.h>",
        -: 5933:  "#define YY_USE_CONST",
        -: 5934:  "#define YY_USE_PROTOS",
        -: 5935:  "#endif",
        -: 5936:  "",
        -: 5937:  "#ifdef YY_USE_CONST",
        -: 5938:  "#define yyconst const",
        -: 5939:  "#else",
        -: 5940:  "#define yyconst",
        -: 5941:  "#endif",
        -: 5942:  "",
        -: 5943:  "",
        -: 5944:  "#ifdef YY_USE_PROTOS",
        -: 5945:  "#define YY_PROTO(proto) proto",
        -: 5946:  "#else",
        -: 5947:  "#define YY_PROTO(proto) ()",
        -: 5948:  "#endif",
        -: 5949:  "",
        -: 5950:  "/* Returned upon end-of-file. */",
        -: 5951:  "#define YY_NULL 0",
        -: 5952:  "",
        -: 5953:  "/* Promotes a possibly negative, possibly signed char to an unsigned",
        -: 5954:  " * integer for use as an array index.  If the signed char is negative,",
        -: 5955:  " * we want to instead treat it as an 8-bit unsigned char, hence the",
        -: 5956:  " * double cast.",
        -: 5957:  " */",
        -: 5958:  "#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)",
        -: 5959:  "",
        -: 5960:  "/* Enter a start condition.  This macro really ought to take a parameter,",
        -: 5961:  " * but we do it the disgusting crufty way forced on us by the ()-less",
        -: 5962:  " * definition of BEGIN.",
        -: 5963:  " */",
        -: 5964:  "#define BEGIN yy_start = 1 + 2 *",
        -: 5965:  "",
        -: 5966:  "/* Translate the current start state into a value that can be later handed",
        -: 5967:  " * to BEGIN to return to the state.  The YYSTATE alias is for lex",
        -: 5968:  " * compatibility.",
        -: 5969:  " */",
        -: 5970:  "#define YY_START ((yy_start - 1) / 2)",
        -: 5971:  "#define YYSTATE YY_START",
        -: 5972:  "",
        -: 5973:  "/* Action number for EOF rule of a given start state. */",
        -: 5974:  "#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)",
        -: 5975:  "",
        -: 5976:  "/* Special action meaning \"start processing a new file\". */",
        -: 5977:  "#define YY_NEW_FILE yyrestart( yyin )",
        -: 5978:  "",
        -: 5979:  "#define YY_END_OF_BUFFER_CHAR 0",
        -: 5980:  "",
        -: 5981:  "/* Size of default input buffer. */",
        -: 5982:  "#define YY_BUF_SIZE 16384",
        -: 5983:  "",
        -: 5984:  "typedef struct yy_buffer_state *YY_BUFFER_STATE;",
        -: 5985:  "",
        -: 5986:  "extern int yyleng;",
        -: 5987:  "%-",
        -: 5988:  "extern FILE *yyin, *yyout;",
        -: 5989:  "%*",
        -: 5990:  "",
        -: 5991:  "#define EOB_ACT_CONTINUE_SCAN 0",
        -: 5992:  "#define EOB_ACT_END_OF_FILE 1",
        -: 5993:  "#define EOB_ACT_LAST_MATCH 2",
        -: 5994:  "",
        -: 5995:  "/* The funky do-while in the following #define is used to turn the definition",
        -: 5996:  " * int a single C statement (which needs a semi-colon terminator).  This",
        -: 5997:  " * avoids problems with code like:",
        -: 5998:  " *",
        -: 5999:  " * 	if ( condition_holds )",
        -: 6000:  " *		yyless( 5 );",
        -: 6001:  " *	else",
        -: 6002:  " *		do_something_else();",
        -: 6003:  " *",
        -: 6004:  " * Prior to using the do-while the compiler would get upset at the",
        -: 6005:  " * \"else\" because it interpreted the \"if\" statement as being all",
        -: 6006:  " * done when it reached the ';' after the yyless() call.",
        -: 6007:  " */",
        -: 6008:  "",
        -: 6009:  "/* Return all but the first 'n' matched characters back to the input stream. */",
        -: 6010:  "",
        -: 6011:  "#define yyless(n) \\",
        -: 6012:  "	do \\",
        -: 6013:  "		{ \\",
        -: 6014:  "		/* Undo effects of setting up yytext. */ \\",
        -: 6015:  "		*yy_cp = yy_hold_char; \\",
        -: 6016:  "		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \\",
        -: 6017:  "		YY_DO_BEFORE_ACTION; /* set up yytext again */ \\",
        -: 6018:  "		} \\",
        -: 6019:  "	while ( 0 )",
        -: 6020:  "",
        -: 6021:  "#define unput(c) yyunput( c, yytext_ptr )",
        -: 6022:  "",
        -: 6023:  "/* The following is because we cannot portably get our hands on size_t",
        -: 6024:  " * (without autoconf's help, which isn't available because we want",
        -: 6025:  " * flex-generated scanners to compile on their own).",
        -: 6026:  " */",
        -: 6027:  "typedef unsigned int yy_size_t;",
        -: 6028:  "",
        -: 6029:  "",
        -: 6030:  "struct yy_buffer_state",
        -: 6031:  "	{",
        -: 6032:  "%-",
        -: 6033:  "	FILE *yy_input_file;",
        -: 6034:  "%+",
        -: 6035:  "	istream* yy_input_file;",
        -: 6036:  "%*",
        -: 6037:  "",
        -: 6038:  "	char *yy_ch_buf;		/* input buffer */",
        -: 6039:  "	char *yy_buf_pos;		/* current position in input buffer */",
        -: 6040:  "",
        -: 6041:  "	/* Size of input buffer in bytes, not including room for EOB",
        -: 6042:  "	 * characters.",
        -: 6043:  "	 */",
        -: 6044:  "	yy_size_t yy_buf_size;",
        -: 6045:  "",
        -: 6046:  "	/* Number of characters read into yy_ch_buf, not including EOB",
        -: 6047:  "	 * characters.",
        -: 6048:  "	 */",
        -: 6049:  "	int yy_n_chars;",
        -: 6050:  "",
        -: 6051:  "	/* Whether we \"own\" the buffer - i.e., we know we created it,",
        -: 6052:  "	 * and can realloc() it to grow it, and should free() it to",
        -: 6053:  "	 * delete it.",
        -: 6054:  "	 */",
        -: 6055:  "	int yy_is_our_buffer;",
        -: 6056:  "",
        -: 6057:  "	/* Whether this is an \"interactive\" input source; if so, and",
        -: 6058:  "	 * if we're using stdio for input, then we want to use getc()",
        -: 6059:  "	 * instead of fread(), to make sure we stop fetching input after",
        -: 6060:  "	 * each newline.",
        -: 6061:  "	 */",
        -: 6062:  "	int yy_is_interactive;",
        -: 6063:  "",
        -: 6064:  "	/* Whether we're considered to be at the beginning of a line.",
        -: 6065:  "	 * If so, '^' rules will be active on the next match, otherwise",
        -: 6066:  "	 * not.",
        -: 6067:  "	 */",
        -: 6068:  "	int yy_at_bol;",
        -: 6069:  "",
        -: 6070:  "	/* Whether to try to fill the input buffer when we reach the",
        -: 6071:  "	 * end of it.",
        -: 6072:  "	 */",
        -: 6073:  "	int yy_fill_buffer;",
        -: 6074:  "",
        -: 6075:  "	int yy_buffer_status;",
        -: 6076:  "#define YY_BUFFER_NEW 0",
        -: 6077:  "#define YY_BUFFER_NORMAL 1",
        -: 6078:  "	/* When an EOF's been seen but there's still some text to process",
        -: 6079:  "	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we",
        -: 6080:  "	 * shouldn't try reading from the input source any more.  We might",
        -: 6081:  "	 * still have a bunch of tokens to match, though, because of",
        -: 6082:  "	 * possible backing-up.",
        -: 6083:  "	 *",
        -: 6084:  "	 * When we actually see the EOF, we change the status to \"new\"",
        -: 6085:  "	 * (via yyrestart()), so that the user can continue scanning by",
        -: 6086:  "	 * just pointing yyin at a new input file.",
        -: 6087:  "	 */",
        -: 6088:  "#define YY_BUFFER_EOF_PENDING 2",
        -: 6089:  "	};",
        -: 6090:  "",
        -: 6091:  "%- Standard (non-C++) definition",
        -: 6092:  "static YY_BUFFER_STATE yy_current_buffer = 0;",
        -: 6093:  "%*",
        -: 6094:  "",
        -: 6095:  "/* We provide macros for accessing buffer states in case in the",
        -: 6096:  " * future we want to put the buffer states in a more general",
        -: 6097:  " * \"scanner state\".",
        -: 6098:  " */",
        -: 6099:  "#define YY_CURRENT_BUFFER yy_current_buffer",
        -: 6100:  "",
        -: 6101:  "",
        -: 6102:  "%- Standard (non-C++) definition",
        -: 6103:  "/* yy_hold_char holds the character lost when yytext is formed. */",
        -: 6104:  "static char yy_hold_char;",
        -: 6105:  "",
        -: 6106:  "static int yy_n_chars;		/* number of characters read into yy_ch_buf */",
        -: 6107:  "",
        -: 6108:  "",
        -: 6109:  "int yyleng;",
        -: 6110:  "",
        -: 6111:  "/* Points to current character in buffer. */",
        -: 6112:  "static char *yy_c_buf_p = (char *) 0;",
        -: 6113:  "static int yy_init = 1;		/* whether we need to initialize */",
        -: 6114:  "static int yy_start = 0;	/* start state number */",
        -: 6115:  "",
        -: 6116:  "/* Flag which is used to allow yywrap()'s to do buffer switches",
        -: 6117:  " * instead of setting up a fresh yyin.  A bit of a hack ...",
        -: 6118:  " */",
        -: 6119:  "static int yy_did_buffer_switch_on_eof;",
        -: 6120:  "",
        -: 6121:  "void yyrestart YY_PROTO(( FILE *input_file ));",
        -: 6122:  "",
        -: 6123:  "void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));",
        -: 6124:  "void yy_load_buffer_state YY_PROTO(( void ));",
        -: 6125:  "YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));",
        -: 6126:  "void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));",
        -: 6127:  "void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));",
        -: 6128:  "void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));",
        -: 6129:  "#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )",
        -: 6130:  "",
        -: 6131:  "YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));",
        -: 6132:  "YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));",
        -: 6133:  "YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));",
        -: 6134:  "%*",
        -: 6135:  "",
        -: 6136:  "static void *yy_flex_alloc YY_PROTO(( yy_size_t ));",
        -: 6137:  "static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));",
        -: 6138:  "static void yy_flex_free YY_PROTO(( void * ));",
        -: 6139:  "",
        -: 6140:  "#define yy_new_buffer yy_create_buffer",
        -: 6141:  "",
        -: 6142:  "#define yy_set_interactive(is_interactive) \\",
        -: 6143:  "	{ \\",
        -: 6144:  "	if ( ! yy_current_buffer ) \\",
        -: 6145:  "		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \\",
        -: 6146:  "	yy_current_buffer->yy_is_interactive = is_interactive; \\",
        -: 6147:  "	}",
        -: 6148:  "",
        -: 6149:  "#define yy_set_bol(at_bol) \\",
        -: 6150:  "	{ \\",
        -: 6151:  "	if ( ! yy_current_buffer ) \\",
        -: 6152:  "		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \\",
        -: 6153:  "	yy_current_buffer->yy_at_bol = at_bol; \\",
        -: 6154:  "	}",
        -: 6155:  "",
        -: 6156:  "#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)",
        -: 6157:  "",
        -: 6158:  "%% yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here",
        -: 6159:  "",
        -: 6160:  "%- Standard (non-C++) definition",
        -: 6161:  "static yy_state_type yy_get_previous_state YY_PROTO(( void ));",
        -: 6162:  "static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));",
        -: 6163:  "static int yy_get_next_buffer YY_PROTO(( void ));",
        -: 6164:  "static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));",
        -: 6165:  "%*",
        -: 6166:  "",
        -: 6167:  "/* Done after the current pattern has been matched and before the",
        -: 6168:  " * corresponding action - sets up yytext.",
        -: 6169:  " */",
        -: 6170:  "#define YY_DO_BEFORE_ACTION \\",
        -: 6171:  "	yytext_ptr = yy_bp; \\",
        -: 6172:  "%% code to fiddle yytext and yyleng for yymore() goes here",
        -: 6173:  "	yy_hold_char = *yy_cp; \\",
        -: 6174:  "	*yy_cp = '\\0'; \\",
        -: 6175:  "%% code to copy yytext_ptr to yytext[] goes here, if %array",
        -: 6176:  "	yy_c_buf_p = yy_cp;",
        -: 6177:  "",
        -: 6178:  "%% data tables for the DFA and the user's section 1 definitions go here",
        -: 6179:  "",
        -: 6180:  "/* Macros after this point can all be overridden by user definitions in",
        -: 6181:  " * section 1.",
        -: 6182:  " */",
        -: 6183:  "",
        -: 6184:  "#ifndef YY_SKIP_YYWRAP",
        -: 6185:  "#ifdef __cplusplus",
        -: 6186:  "extern \"C\" int yywrap YY_PROTO(( void ));",
        -: 6187:  "#else",
        -: 6188:  "extern int yywrap YY_PROTO(( void ));",
        -: 6189:  "#endif",
        -: 6190:  "#endif",
        -: 6191:  "",
        -: 6192:  "%-",
        -: 6193:  "#ifndef YY_NO_UNPUT",
        -: 6194:  "static void yyunput YY_PROTO(( int c, char *buf_ptr ));",
        -: 6195:  "#endif",
        -: 6196:  "%*",
        -: 6197:  "",
        -: 6198:  "#ifndef yytext_ptr",
        -: 6199:  "static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));",
        -: 6200:  "#endif",
        -: 6201:  "",
        -: 6202:  "#ifndef YY_NO_INPUT",
        -: 6203:  "%- Standard (non-C++) definition",
        -: 6204:  "#ifdef __cplusplus",
        -: 6205:  "static int yyinput YY_PROTO(( void ));",
        -: 6206:  "#else",
        -: 6207:  "static int input YY_PROTO(( void ));",
        -: 6208:  "#endif",
        -: 6209:  "%*",
        -: 6210:  "#endif",
        -: 6211:  "",
        -: 6212:  "#if YY_STACK_USED",
        -: 6213:  "static int yy_start_stack_ptr = 0;",
        -: 6214:  "static int yy_start_stack_depth = 0;",
        -: 6215:  "static int *yy_start_stack = 0;",
        -: 6216:  "#ifndef YY_NO_PUSH_STATE",
        -: 6217:  "static void yy_push_state YY_PROTO(( int new_state ));",
        -: 6218:  "#endif",
        -: 6219:  "#ifndef YY_NO_POP_STATE",
        -: 6220:  "static void yy_pop_state YY_PROTO(( void ));",
        -: 6221:  "#endif",
        -: 6222:  "#ifndef YY_NO_TOP_STATE",
        -: 6223:  "static int yy_top_state YY_PROTO(( void ));",
        -: 6224:  "#endif",
        -: 6225:  "",
        -: 6226:  "#else",
        -: 6227:  "#define YY_NO_PUSH_STATE 1",
        -: 6228:  "#define YY_NO_POP_STATE 1",
        -: 6229:  "#define YY_NO_TOP_STATE 1",
        -: 6230:  "#endif",
        -: 6231:  "",
        -: 6232:  "#ifdef YY_MALLOC_DECL",
        -: 6233:  "YY_MALLOC_DECL",
        -: 6234:  "#else",
        -: 6235:  "#if __STDC__",
        -: 6236:  "#ifndef __cplusplus",
        -: 6237:  "#include <stdlib.h>",
        -: 6238:  "#endif",
        -: 6239:  "#else",
        -: 6240:  "/* Just try to get by without declaring the routines.  This will fail",
        -: 6241:  " * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)",
        -: 6242:  " * or sizeof(void*) != sizeof(int).",
        -: 6243:  " */",
        -: 6244:  "#endif",
        -: 6245:  "#endif",
        -: 6246:  "",
        -: 6247:  "/* Amount of stuff to slurp up with each read. */",
        -: 6248:  "#ifndef YY_READ_BUF_SIZE",
        -: 6249:  "#define YY_READ_BUF_SIZE 8192",
        -: 6250:  "#endif",
        -: 6251:  "",
        -: 6252:  "/* Copy whatever the last rule matched to the standard output. */",
        -: 6253:  "",
        -: 6254:  "#ifndef ECHO",
        -: 6255:  "%- Standard (non-C++) definition",
        -: 6256:  "/* This used to be an fputs(), but since the string might contain NUL's,",
        -: 6257:  " * we now use fwrite().",
        -: 6258:  " */",
        -: 6259:  "#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )",
        -: 6260:  "%+ C++ definition",
        -: 6261:  "#define ECHO LexerOutput( yytext, yyleng )",
        -: 6262:  "%*",
        -: 6263:  "#endif",
        -: 6264:  "",
        -: 6265:  "/* Gets input and stuffs it into \"buf\".  number of characters read, or YY_NULL,",
        -: 6266:  " * is returned in \"result\".",
        -: 6267:  " */",
        -: 6268:  "#ifndef YY_INPUT",
        -: 6269:  "#define YY_INPUT(buf,result,max_size) \\",
        -: 6270:  "%% fread()/read() definition of YY_INPUT goes here unless we're doing C++",
        -: 6271:  "%+ C++ definition",
        -: 6272:  "	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \\",
        -: 6273:  "		YY_FATAL_ERROR( \"input in flex scanner failed\" );",
        -: 6274:  "%*",
        -: 6275:  "#endif",
        -: 6276:  "",
        -: 6277:  "/* No semi-colon after return; correct usage is to write \"yyterminate();\" -",
        -: 6278:  " * we don't want an extra ';' after the \"return\" because that will cause",
        -: 6279:  " * some compilers to complain about unreachable statements.",
        -: 6280:  " */",
        -: 6281:  "#ifndef yyterminate",
        -: 6282:  "#define yyterminate() return YY_NULL",
        -: 6283:  "#endif",
        -: 6284:  "",
        -: 6285:  "/* Number of entries by which start-condition stack grows. */",
        -: 6286:  "#ifndef YY_START_STACK_INCR",
        -: 6287:  "#define YY_START_STACK_INCR 25",
        -: 6288:  "#endif",
        -: 6289:  "",
        -: 6290:  "/* Report a fatal error. */",
        -: 6291:  "#ifndef YY_FATAL_ERROR",
        -: 6292:  "%-",
        -: 6293:  "#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )",
        -: 6294:  "%+",
        -: 6295:  "#define YY_FATAL_ERROR(msg) LexerError( msg )",
        -: 6296:  "%*",
        -: 6297:  "#endif",
        -: 6298:  "",
        -: 6299:  "/* Default declaration of generated scanner - a define so the user can",
        -: 6300:  " * easily add parameters.",
        -: 6301:  " */",
        -: 6302:  "#ifndef YY_DECL",
        -: 6303:  "%- Standard (non-C++) definition",
        -: 6304:  "#define YY_DECL int yylex YY_PROTO(( void ))",
        -: 6305:  "%+ C++ definition",
        -: 6306:  "#define YY_DECL int yyFlexLexer::yylex()",
        -: 6307:  "%*",
        -: 6308:  "#endif",
        -: 6309:  "",
        -: 6310:  "/* Code executed at the beginning of each rule, after yytext and yyleng",
        -: 6311:  " * have been set up.",
        -: 6312:  " */",
        -: 6313:  "#ifndef YY_USER_ACTION",
        -: 6314:  "#define YY_USER_ACTION",
        -: 6315:  "#endif",
        -: 6316:  "",
        -: 6317:  "/* Code executed at the end of each rule. */",
        -: 6318:  "#ifndef YY_BREAK",
        -: 6319:  "#define YY_BREAK break;",
        -: 6320:  "#endif",
        -: 6321:  "",
        -: 6322:  "%% YY_RULE_SETUP definition goes here",
        -: 6323:  "",
        -: 6324:  "YY_DECL",
        -: 6325:  "	{",
        -: 6326:  "	register yy_state_type yy_current_state;",
        -: 6327:  "	register char *yy_cp, *yy_bp;",
        -: 6328:  "	register int yy_act;",
        -: 6329:  "",
        -: 6330:  "%% user's declarations go here",
        -: 6331:  "",
        -: 6332:  "	if ( yy_init )",
        -: 6333:  "		{",
        -: 6334:  "		yy_init = 0;",
        -: 6335:  "",
        -: 6336:  "#ifdef YY_USER_INIT",
        -: 6337:  "		YY_USER_INIT;",
        -: 6338:  "#endif",
        -: 6339:  "",
        -: 6340:  "		if ( ! yy_start )",
        -: 6341:  "			yy_start = 1;	/* first start state */",
        -: 6342:  "",
        -: 6343:  "		if ( ! yyin )",
        -: 6344:  "%-",
        -: 6345:  "			yyin = stdin;",
        -: 6346:  "%+",
        -: 6347:  "			yyin = &cin;",
        -: 6348:  "%*",
        -: 6349:  "",
        -: 6350:  "		if ( ! yyout )",
        -: 6351:  "%-",
        -: 6352:  "			yyout = stdout;",
        -: 6353:  "%+",
        -: 6354:  "			yyout = &cout;",
        -: 6355:  "%*",
        -: 6356:  "",
        -: 6357:  "		if ( ! yy_current_buffer )",
        -: 6358:  "			yy_current_buffer =",
        -: 6359:  "				yy_create_buffer( yyin, YY_BUF_SIZE );",
        -: 6360:  "",
        -: 6361:  "		yy_load_buffer_state();",
        -: 6362:  "		}",
        -: 6363:  "",
        -: 6364:  "	while ( 1 )		/* loops until end-of-file is reached */",
        -: 6365:  "		{",
        -: 6366:  "%% yymore()-related code goes here",
        -: 6367:  "		yy_cp = yy_c_buf_p;",
        -: 6368:  "",
        -: 6369:  "		/* Support of yytext. */",
        -: 6370:  "		*yy_cp = yy_hold_char;",
        -: 6371:  "",
        -: 6372:  "		/* yy_bp points to the position in yy_ch_buf of the start of",
        -: 6373:  "		 * the current run.",
        -: 6374:  "		 */",
        -: 6375:  "		yy_bp = yy_cp;",
        -: 6376:  "",
        -: 6377:  "%% code to set up and find next match goes here",
        -: 6378:  "",
        -: 6379:  "yy_find_action:",
        -: 6380:  "%% code to find the action number goes here",
        -: 6381:  "",
        -: 6382:  "		YY_DO_BEFORE_ACTION;",
        -: 6383:  "",
        -: 6384:  "%% code for yylineno update goes here",
        -: 6385:  "",
        -: 6386:  "do_action:	/* This label is used only to access EOF actions. */",
        -: 6387:  "",
        -: 6388:  "%% debug code goes here",
        -: 6389:  "",
        -: 6390:  "		switch ( yy_act )",
        -: 6391:  "	{ /* beginning of action switch */",
        -: 6392:  "%% actions go here",
        -: 6393:  "",
        -: 6394:  "	case YY_END_OF_BUFFER:",
        -: 6395:  "		{",
        -: 6396:  "		/* Amount of text matched not including the EOB char. */",
        -: 6397:  "		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;",
        -: 6398:  "",
        -: 6399:  "		/* Undo the effects of YY_DO_BEFORE_ACTION. */",
        -: 6400:  "		*yy_cp = yy_hold_char;",
        -: 6401:  "",
        -: 6402:  "		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )",
        -: 6403:  "			{",
        -: 6404:  "			/* We're scanning a new file or input source.  It's",
        -: 6405:  "			 * possible that this happened because the user",
        -: 6406:  "			 * just pointed yyin at a new source and called",
        -: 6407:  "			 * yylex().  If so, then we have to assure",
        -: 6408:  "			 * consistency between yy_current_buffer and our",
        -: 6409:  "			 * globals.  Here is the right place to do so, because",
        -: 6410:  "			 * this is the first action (other than possibly a",
        -: 6411:  "			 * back-up) that will match for the new input source.",
        -: 6412:  "			 */",
        -: 6413:  "			yy_n_chars = yy_current_buffer->yy_n_chars;",
        -: 6414:  "			yy_current_buffer->yy_input_file = yyin;",
        -: 6415:  "			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;",
        -: 6416:  "			}",
        -: 6417:  "",
        -: 6418:  "		/* Note that here we test for yy_c_buf_p \"<=\" to the position",
        -: 6419:  "		 * of the first EOB in the buffer, since yy_c_buf_p will",
        -: 6420:  "		 * already have been incremented past the NUL character",
        -: 6421:  "		 * (since all states make transitions on EOB to the",
        -: 6422:  "		 * end-of-buffer state).  Contrast this with the test",
        -: 6423:  "		 * in input().",
        -: 6424:  "		 */",
        -: 6425:  "		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )",
        -: 6426:  "			{ /* This was really a NUL. */",
        -: 6427:  "			yy_state_type yy_next_state;",
        -: 6428:  "",
        -: 6429:  "			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;",
        -: 6430:  "",
        -: 6431:  "			yy_current_state = yy_get_previous_state();",
        -: 6432:  "",
        -: 6433:  "			/* Okay, we're now positioned to make the NUL",
        -: 6434:  "			 * transition.  We couldn't have",
        -: 6435:  "			 * yy_get_previous_state() go ahead and do it",
        -: 6436:  "			 * for us because it doesn't know how to deal",
        -: 6437:  "			 * with the possibility of jamming (and we don't",
        -: 6438:  "			 * want to build jamming into it because then it",
        -: 6439:  "			 * will run more slowly).",
        -: 6440:  "			 */",
        -: 6441:  "",
        -: 6442:  "			yy_next_state = yy_try_NUL_trans( yy_current_state );",
        -: 6443:  "",
        -: 6444:  "			yy_bp = yytext_ptr + YY_MORE_ADJ;",
        -: 6445:  "",
        -: 6446:  "			if ( yy_next_state )",
        -: 6447:  "				{",
        -: 6448:  "				/* Consume the NUL. */",
        -: 6449:  "				yy_cp = ++yy_c_buf_p;",
        -: 6450:  "				yy_current_state = yy_next_state;",
        -: 6451:  "				goto yy_match;",
        -: 6452:  "				}",
        -: 6453:  "",
        -: 6454:  "			else",
        -: 6455:  "				{",
        -: 6456:  "%% code to do back-up for compressed tables and set up yy_cp goes here",
        -: 6457:  "				goto yy_find_action;",
        -: 6458:  "				}",
        -: 6459:  "			}",
        -: 6460:  "",
        -: 6461:  "		else switch ( yy_get_next_buffer() )",
        -: 6462:  "			{",
        -: 6463:  "			case EOB_ACT_END_OF_FILE:",
        -: 6464:  "				{",
        -: 6465:  "				yy_did_buffer_switch_on_eof = 0;",
        -: 6466:  "",
        -: 6467:  "				if ( yywrap() )",
        -: 6468:  "					{",
        -: 6469:  "					/* Note: because we've taken care in",
        -: 6470:  "					 * yy_get_next_buffer() to have set up",
        -: 6471:  "					 * yytext, we can now set up",
        -: 6472:  "					 * yy_c_buf_p so that if some total",
        -: 6473:  "					 * hoser (like flex itself) wants to",
        -: 6474:  "					 * call the scanner after we return the",
        -: 6475:  "					 * YY_NULL, it'll still work - another",
        -: 6476:  "					 * YY_NULL will get returned.",
        -: 6477:  "					 */",
        -: 6478:  "					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;",
        -: 6479:  "",
        -: 6480:  "					yy_act = YY_STATE_EOF(YY_START);",
        -: 6481:  "					goto do_action;",
        -: 6482:  "					}",
        -: 6483:  "",
        -: 6484:  "				else",
        -: 6485:  "					{",
        -: 6486:  "					if ( ! yy_did_buffer_switch_on_eof )",
        -: 6487:  "						YY_NEW_FILE;",
        -: 6488:  "					}",
        -: 6489:  "				break;",
        -: 6490:  "				}",
        -: 6491:  "",
        -: 6492:  "			case EOB_ACT_CONTINUE_SCAN:",
        -: 6493:  "				yy_c_buf_p =",
        -: 6494:  "					yytext_ptr + yy_amount_of_matched_text;",
        -: 6495:  "",
        -: 6496:  "				yy_current_state = yy_get_previous_state();",
        -: 6497:  "",
        -: 6498:  "				yy_cp = yy_c_buf_p;",
        -: 6499:  "				yy_bp = yytext_ptr + YY_MORE_ADJ;",
        -: 6500:  "				goto yy_match;",
        -: 6501:  "",
        -: 6502:  "			case EOB_ACT_LAST_MATCH:",
        -: 6503:  "				yy_c_buf_p =",
        -: 6504:  "				&yy_current_buffer->yy_ch_buf[yy_n_chars];",
        -: 6505:  "",
        -: 6506:  "				yy_current_state = yy_get_previous_state();",
        -: 6507:  "",
        -: 6508:  "				yy_cp = yy_c_buf_p;",
        -: 6509:  "				yy_bp = yytext_ptr + YY_MORE_ADJ;",
        -: 6510:  "				goto yy_find_action;",
        -: 6511:  "			}",
        -: 6512:  "		break;",
        -: 6513:  "		}",
        -: 6514:  "",
        -: 6515:  "	default:",
        -: 6516:  "		YY_FATAL_ERROR(",
        -: 6517:  "			\"fatal flex scanner internal error--no action found\" );",
        -: 6518:  "	} /* end of action switch */",
        -: 6519:  "		} /* end of scanning one token */",
        -: 6520:  "	} /* end of yylex */",
        -: 6521:  "",
        -: 6522:  "%+",
        -: 6523:  "yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )",
        -: 6524:  "	{",
        -: 6525:  "	yyin = arg_yyin;",
        -: 6526:  "	yyout = arg_yyout;",
        -: 6527:  "	yy_c_buf_p = 0;",
        -: 6528:  "	yy_init = 1;",
        -: 6529:  "	yy_start = 0;",
        -: 6530:  "	yy_flex_debug = 0;",
        -: 6531:  "	yylineno = 1;	// this will only get updated if %option yylineno",
        -: 6532:  "",
        -: 6533:  "	yy_did_buffer_switch_on_eof = 0;",
        -: 6534:  "",
        -: 6535:  "	yy_looking_for_trail_begin = 0;",
        -: 6536:  "	yy_more_flag = 0;",
        -: 6537:  "	yy_more_len = 0;",
        -: 6538:  "",
        -: 6539:  "	yy_start_stack_ptr = yy_start_stack_depth = 0;",
        -: 6540:  "	yy_start_stack = 0;",
        -: 6541:  "",
        -: 6542:  "	yy_current_buffer = 0;",
        -: 6543:  "",
        -: 6544:  "#ifdef YY_USES_REJECT",
        -: 6545:  "	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];",
        -: 6546:  "#else",
        -: 6547:  "	yy_state_buf = 0;",
        -: 6548:  "#endif",
        -: 6549:  "	}",
        -: 6550:  "",
        -: 6551:  "yyFlexLexer::~yyFlexLexer()",
        -: 6552:  "	{",
        -: 6553:  "	delete yy_state_buf;",
        -: 6554:  "	yy_delete_buffer( yy_current_buffer );",
        -: 6555:  "	}",
        -: 6556:  "",
        -: 6557:  "void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )",
        -: 6558:  "	{",
        -: 6559:  "	if ( new_in )",
        -: 6560:  "		{",
        -: 6561:  "		yy_delete_buffer( yy_current_buffer );",
        -: 6562:  "		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );",
        -: 6563:  "		}",
        -: 6564:  "",
        -: 6565:  "	if ( new_out )",
        -: 6566:  "		yyout = new_out;",
        -: 6567:  "	}",
        -: 6568:  "",
        -: 6569:  "#ifdef YY_INTERACTIVE",
        -: 6570:  "int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )",
        -: 6571:  "#else",
        -: 6572:  "int yyFlexLexer::LexerInput( char* buf, int max_size )",
        -: 6573:  "#endif",
        -: 6574:  "	{",
        -: 6575:  "	if ( yyin->eof() || yyin->fail() )",
        -: 6576:  "		return 0;",
        -: 6577:  "",
        -: 6578:  "#ifdef YY_INTERACTIVE",
        -: 6579:  "	yyin->get( buf[0] );",
        -: 6580:  "",
        -: 6581:  "	if ( yyin->eof() )",
        -: 6582:  "		return 0;",
        -: 6583:  "",
        -: 6584:  "	if ( yyin->bad() )",
        -: 6585:  "		return -1;",
        -: 6586:  "",
        -: 6587:  "	return 1;",
        -: 6588:  "",
        -: 6589:  "#else",
        -: 6590:  "	(void) yyin->read( buf, max_size );",
        -: 6591:  "",
        -: 6592:  "	if ( yyin->bad() )",
        -: 6593:  "		return -1;",
        -: 6594:  "	else",
        -: 6595:  "		return yyin->gcount();",
        -: 6596:  "#endif",
        -: 6597:  "	}",
        -: 6598:  "",
        -: 6599:  "void yyFlexLexer::LexerOutput( const char* buf, int size )",
        -: 6600:  "	{",
        -: 6601:  "	(void) yyout->write( buf, size );",
        -: 6602:  "	}",
        -: 6603:  "%*",
        -: 6604:  "",
        -: 6605:  "/* yy_get_next_buffer - try to read in a new buffer",
        -: 6606:  " *",
        -: 6607:  " * Returns a code representing an action:",
        -: 6608:  " *	EOB_ACT_LAST_MATCH -",
        -: 6609:  " *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position",
        -: 6610:  " *	EOB_ACT_END_OF_FILE - end of file",
        -: 6611:  " */",
        -: 6612:  "",
        -: 6613:  "%-",
        -: 6614:  "static int yy_get_next_buffer()",
        -: 6615:  "%+",
        -: 6616:  "int yyFlexLexer::yy_get_next_buffer()",
        -: 6617:  "%*",
        -: 6618:  "	{",
        -: 6619:  "	register char *dest = yy_current_buffer->yy_ch_buf;",
        -: 6620:  "	register char *source = yytext_ptr;",
        -: 6621:  "	register int number_to_move, i;",
        -: 6622:  "	int ret_val;",
        -: 6623:  "",
        -: 6624:  "	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )",
        -: 6625:  "		YY_FATAL_ERROR(",
        -: 6626:  "		\"fatal flex scanner internal error--end of buffer missed\" );",
        -: 6627:  "",
        -: 6628:  "	if ( yy_current_buffer->yy_fill_buffer == 0 )",
        -: 6629:  "		{ /* Don't try to fill the buffer, so this is an EOF. */",
        -: 6630:  "		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )",
        -: 6631:  "			{",
        -: 6632:  "			/* We matched a singled characater, the EOB, so",
        -: 6633:  "			 * treat this as a final EOF.",
        -: 6634:  "			 */",
        -: 6635:  "			return EOB_ACT_END_OF_FILE;",
        -: 6636:  "			}",
        -: 6637:  "",
        -: 6638:  "		else",
        -: 6639:  "			{",
        -: 6640:  "			/* We matched some text prior to the EOB, first",
        -: 6641:  "			 * process it.",
        -: 6642:  "			 */",
        -: 6643:  "			return EOB_ACT_LAST_MATCH;",
        -: 6644:  "			}",
        -: 6645:  "		}",
        -: 6646:  "",
        -: 6647:  "	/* Try to read more data. */",
        -: 6648:  "",
        -: 6649:  "	/* First move last chars to start of buffer. */",
        -: 6650:  "	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;",
        -: 6651:  "",
        -: 6652:  "	for ( i = 0; i < number_to_move; ++i )",
        -: 6653:  "		*(dest++) = *(source++);",
        -: 6654:  "",
        -: 6655:  "	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )",
        -: 6656:  "		/* don't do the read, it's not guaranteed to return an EOF,",
        -: 6657:  "		 * just force an EOF",
        -: 6658:  "		 */",
        -: 6659:  "		yy_n_chars = 0;",
        -: 6660:  "",
        -: 6661:  "	else",
        -: 6662:  "		{",
        -: 6663:  "		int num_to_read =",
        -: 6664:  "			yy_current_buffer->yy_buf_size - number_to_move - 1;",
        -: 6665:  "",
        -: 6666:  "		while ( num_to_read <= 0 )",
        -: 6667:  "			{ /* Not enough room in the buffer - grow it. */",
        -: 6668:  "#ifdef YY_USES_REJECT",
        -: 6669:  "			YY_FATAL_ERROR(",
        -: 6670:  "\"input buffer overflow, can't enlarge buffer because scanner uses REJECT\" );",
        -: 6671:  "#else",
        -: 6672:  "",
        -: 6673:  "			/* just a shorter name for the current buffer */",
        -: 6674:  "			YY_BUFFER_STATE b = yy_current_buffer;",
        -: 6675:  "",
        -: 6676:  "			int yy_c_buf_p_offset =",
        -: 6677:  "				(int) (yy_c_buf_p - b->yy_ch_buf);",
        -: 6678:  "",
        -: 6679:  "			if ( b->yy_is_our_buffer )",
        -: 6680:  "				{",
        -: 6681:  "				int new_size = b->yy_buf_size * 2;",
        -: 6682:  "",
        -: 6683:  "				if ( new_size <= 0 )",
        -: 6684:  "					b->yy_buf_size += b->yy_buf_size / 8;",
        -: 6685:  "				else",
        -: 6686:  "					b->yy_buf_size *= 2;",
        -: 6687:  "",
        -: 6688:  "				b->yy_ch_buf = (char *)",
        -: 6689:  "					/* Include room in for 2 EOB chars. */",
        -: 6690:  "					yy_flex_realloc( (void *) b->yy_ch_buf,",
        -: 6691:  "							 b->yy_buf_size + 2 );",
        -: 6692:  "				}",
        -: 6693:  "			else",
        -: 6694:  "				/* Can't grow it, we don't own it. */",
        -: 6695:  "				b->yy_ch_buf = 0;",
        -: 6696:  "",
        -: 6697:  "			if ( ! b->yy_ch_buf )",
        -: 6698:  "				YY_FATAL_ERROR(",
        -: 6699:  "				\"fatal error - scanner input buffer overflow\" );",
        -: 6700:  "",
        -: 6701:  "			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];",
        -: 6702:  "",
        -: 6703:  "			num_to_read = yy_current_buffer->yy_buf_size -",
        -: 6704:  "						number_to_move - 1;",
        -: 6705:  "#endif",
        -: 6706:  "			}",
        -: 6707:  "",
        -: 6708:  "		if ( num_to_read > YY_READ_BUF_SIZE )",
        -: 6709:  "			num_to_read = YY_READ_BUF_SIZE;",
        -: 6710:  "",
        -: 6711:  "		/* Read in more data. */",
        -: 6712:  "		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),",
        -: 6713:  "			yy_n_chars, num_to_read );",
        -: 6714:  "		}",
        -: 6715:  "",
        -: 6716:  "	if ( yy_n_chars == 0 )",
        -: 6717:  "		{",
        -: 6718:  "		if ( number_to_move == YY_MORE_ADJ )",
        -: 6719:  "			{",
        -: 6720:  "			ret_val = EOB_ACT_END_OF_FILE;",
        -: 6721:  "			yyrestart( yyin );",
        -: 6722:  "			}",
        -: 6723:  "",
        -: 6724:  "		else",
        -: 6725:  "			{",
        -: 6726:  "			ret_val = EOB_ACT_LAST_MATCH;",
        -: 6727:  "			yy_current_buffer->yy_buffer_status =",
        -: 6728:  "				YY_BUFFER_EOF_PENDING;",
        -: 6729:  "			}",
        -: 6730:  "		}",
        -: 6731:  "",
        -: 6732:  "	else",
        -: 6733:  "		ret_val = EOB_ACT_CONTINUE_SCAN;",
        -: 6734:  "",
        -: 6735:  "	yy_n_chars += number_to_move;",
        -: 6736:  "	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;",
        -: 6737:  "	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;",
        -: 6738:  "",
        -: 6739:  "	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];",
        -: 6740:  "",
        -: 6741:  "	return ret_val;",
        -: 6742:  "	}",
        -: 6743:  "",
        -: 6744:  "",
        -: 6745:  "/* yy_get_previous_state - get the state just before the EOB char was reached */",
        -: 6746:  "",
        -: 6747:  "%-",
        -: 6748:  "static yy_state_type yy_get_previous_state()",
        -: 6749:  "%+",
        -: 6750:  "yy_state_type yyFlexLexer::yy_get_previous_state()",
        -: 6751:  "%*",
        -: 6752:  "	{",
        -: 6753:  "	register yy_state_type yy_current_state;",
        -: 6754:  "	register char *yy_cp;",
        -: 6755:  "",
        -: 6756:  "%% code to get the start state into yy_current_state goes here",
        -: 6757:  "",
        -: 6758:  "	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )",
        -: 6759:  "		{",
        -: 6760:  "%% code to find the next state goes here",
        -: 6761:  "		}",
        -: 6762:  "",
        -: 6763:  "	return yy_current_state;",
        -: 6764:  "	}",
        -: 6765:  "",
        -: 6766:  "",
        -: 6767:  "/* yy_try_NUL_trans - try to make a transition on the NUL character",
        -: 6768:  " *",
        -: 6769:  " * synopsis",
        -: 6770:  " *	next_state = yy_try_NUL_trans( current_state );",
        -: 6771:  " */",
        -: 6772:  "",
        -: 6773:  "%-",
        -: 6774:  "#ifdef YY_USE_PROTOS",
        -: 6775:  "static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )",
        -: 6776:  "#else",
        -: 6777:  "static yy_state_type yy_try_NUL_trans( yy_current_state )",
        -: 6778:  "yy_state_type yy_current_state;",
        -: 6779:  "#endif",
        -: 6780:  "%+",
        -: 6781:  "yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )",
        -: 6782:  "%*",
        -: 6783:  "	{",
        -: 6784:  "	register int yy_is_jam;",
        -: 6785:  "%% code to find the next state, and perhaps do backing up, goes here",
        -: 6786:  "",
        -: 6787:  "	return yy_is_jam ? 0 : yy_current_state;",
        -: 6788:  "	}",
        -: 6789:  "",
        -: 6790:  "",
        -: 6791:  "%-",
        -: 6792:  "#ifndef YY_NO_UNPUT",
        -: 6793:  "#ifdef YY_USE_PROTOS",
        -: 6794:  "static void yyunput( int c, register char *yy_bp )",
        -: 6795:  "#else",
        -: 6796:  "static void yyunput( c, yy_bp )",
        -: 6797:  "int c;",
        -: 6798:  "register char *yy_bp;",
        -: 6799:  "#endif",
        -: 6800:  "%+",
        -: 6801:  "void yyFlexLexer::yyunput( int c, register char* yy_bp )",
        -: 6802:  "%*",
        -: 6803:  "	{",
        -: 6804:  "	register char *yy_cp = yy_c_buf_p;",
        -: 6805:  "",
        -: 6806:  "	/* undo effects of setting up yytext */",
        -: 6807:  "	*yy_cp = yy_hold_char;",
        -: 6808:  "",
        -: 6809:  "	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )",
        -: 6810:  "		{ /* need to shift things up to make room */",
        -: 6811:  "		/* +2 for EOB chars. */",
        -: 6812:  "		register int number_to_move = yy_n_chars + 2;",
        -: 6813:  "		register char *dest = &yy_current_buffer->yy_ch_buf[",
        -: 6814:  "					yy_current_buffer->yy_buf_size + 2];",
        -: 6815:  "		register char *source =",
        -: 6816:  "				&yy_current_buffer->yy_ch_buf[number_to_move];",
        -: 6817:  "",
        -: 6818:  "		while ( source > yy_current_buffer->yy_ch_buf )",
        -: 6819:  "			*--dest = *--source;",
        -: 6820:  "",
        -: 6821:  "		yy_cp += (int) (dest - source);",
        -: 6822:  "		yy_bp += (int) (dest - source);",
        -: 6823:  "		yy_n_chars = yy_current_buffer->yy_buf_size;",
        -: 6824:  "",
        -: 6825:  "		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )",
        -: 6826:  "			YY_FATAL_ERROR( \"flex scanner push-back overflow\" );",
        -: 6827:  "		}",
        -: 6828:  "",
        -: 6829:  "	*--yy_cp = (char) c;",
        -: 6830:  "",
        -: 6831:  "%% update yylineno here",
        -: 6832:  "",
        -: 6833:  "	yytext_ptr = yy_bp;",
        -: 6834:  "	yy_hold_char = *yy_cp;",
        -: 6835:  "	yy_c_buf_p = yy_cp;",
        -: 6836:  "	}",
        -: 6837:  "%-",
        -: 6838:  "#endif	/* ifndef YY_NO_UNPUT */",
        -: 6839:  "%*",
        -: 6840:  "",
        -: 6841:  "",
        -: 6842:  "%-",
        -: 6843:  "#ifdef __cplusplus",
        -: 6844:  "static int yyinput()",
        -: 6845:  "#else",
        -: 6846:  "static int input()",
        -: 6847:  "#endif",
        -: 6848:  "%+",
        -: 6849:  "int yyFlexLexer::yyinput()",
        -: 6850:  "%*",
        -: 6851:  "	{",
        -: 6852:  "	int c;",
        -: 6853:  "",
        -: 6854:  "	*yy_c_buf_p = yy_hold_char;",
        -: 6855:  "",
        -: 6856:  "	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )",
        -: 6857:  "		{",
        -: 6858:  "		/* yy_c_buf_p now points to the character we want to return.",
        -: 6859:  "		 * If this occurs *before* the EOB characters, then it's a",
        -: 6860:  "		 * valid NUL; if not, then we've hit the end of the buffer.",
        -: 6861:  "		 */",
        -: 6862:  "		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )",
        -: 6863:  "			/* This was really a NUL. */",
        -: 6864:  "			*yy_c_buf_p = '\\0';",
        -: 6865:  "",
        -: 6866:  "		else",
        -: 6867:  "			{ /* need more input */",
        -: 6868:  "			yytext_ptr = yy_c_buf_p;",
        -: 6869:  "			++yy_c_buf_p;",
        -: 6870:  "",
        -: 6871:  "			switch ( yy_get_next_buffer() )",
        -: 6872:  "				{",
        -: 6873:  "				case EOB_ACT_END_OF_FILE:",
        -: 6874:  "					{",
        -: 6875:  "					if ( yywrap() )",
        -: 6876:  "						{",
        -: 6877:  "						yy_c_buf_p =",
        -: 6878:  "						yytext_ptr + YY_MORE_ADJ;",
        -: 6879:  "						return EOF;",
        -: 6880:  "						}",
        -: 6881:  "",
        -: 6882:  "					if ( ! yy_did_buffer_switch_on_eof )",
        -: 6883:  "						YY_NEW_FILE;",
        -: 6884:  "#ifdef __cplusplus",
        -: 6885:  "					return yyinput();",
        -: 6886:  "#else",
        -: 6887:  "					return input();",
        -: 6888:  "#endif",
        -: 6889:  "					}",
        -: 6890:  "",
        -: 6891:  "				case EOB_ACT_CONTINUE_SCAN:",
        -: 6892:  "					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;",
        -: 6893:  "					break;",
        -: 6894:  "",
        -: 6895:  "				case EOB_ACT_LAST_MATCH:",
        -: 6896:  "#ifdef __cplusplus",
        -: 6897:  "					YY_FATAL_ERROR(",
        -: 6898:  "					\"unexpected last match in yyinput()\" );",
        -: 6899:  "#else",
        -: 6900:  "					YY_FATAL_ERROR(",
        -: 6901:  "					\"unexpected last match in input()\" );",
        -: 6902:  "#endif",
        -: 6903:  "				}",
        -: 6904:  "			}",
        -: 6905:  "		}",
        -: 6906:  "",
        -: 6907:  "	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */",
        -: 6908:  "	*yy_c_buf_p = '\\0';	/* preserve yytext */",
        -: 6909:  "	yy_hold_char = *++yy_c_buf_p;",
        -: 6910:  "",
        -: 6911:  "%% update BOL and yylineno",
        -: 6912:  "",
        -: 6913:  "	return c;",
        -: 6914:  "	}",
        -: 6915:  "",
        -: 6916:  "",
        -: 6917:  "%-",
        -: 6918:  "#ifdef YY_USE_PROTOS",
        -: 6919:  "void yyrestart( FILE *input_file )",
        -: 6920:  "#else",
        -: 6921:  "void yyrestart( input_file )",
        -: 6922:  "FILE *input_file;",
        -: 6923:  "#endif",
        -: 6924:  "%+",
        -: 6925:  "void yyFlexLexer::yyrestart( istream* input_file )",
        -: 6926:  "%*",
        -: 6927:  "	{",
        -: 6928:  "	if ( ! yy_current_buffer )",
        -: 6929:  "		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );",
        -: 6930:  "",
        -: 6931:  "	yy_init_buffer( yy_current_buffer, input_file );",
        -: 6932:  "	yy_load_buffer_state();",
        -: 6933:  "	}",
        -: 6934:  "",
        -: 6935:  "",
        -: 6936:  "%-",
        -: 6937:  "#ifdef YY_USE_PROTOS",
        -: 6938:  "void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )",
        -: 6939:  "#else",
        -: 6940:  "void yy_switch_to_buffer( new_buffer )",
        -: 6941:  "YY_BUFFER_STATE new_buffer;",
        -: 6942:  "#endif",
        -: 6943:  "%+",
        -: 6944:  "void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )",
        -: 6945:  "%*",
        -: 6946:  "	{",
        -: 6947:  "	if ( yy_current_buffer == new_buffer )",
        -: 6948:  "		return;",
        -: 6949:  "",
        -: 6950:  "	if ( yy_current_buffer )",
        -: 6951:  "		{",
        -: 6952:  "		/* Flush out information for old buffer. */",
        -: 6953:  "		*yy_c_buf_p = yy_hold_char;",
        -: 6954:  "		yy_current_buffer->yy_buf_pos = yy_c_buf_p;",
        -: 6955:  "		yy_current_buffer->yy_n_chars = yy_n_chars;",
        -: 6956:  "		}",
        -: 6957:  "",
        -: 6958:  "	yy_current_buffer = new_buffer;",
        -: 6959:  "	yy_load_buffer_state();",
        -: 6960:  "",
        -: 6961:  "	/* We don't actually know whether we did this switch during",
        -: 6962:  "	 * EOF (yywrap()) processing, but the only time this flag",
        -: 6963:  "	 * is looked at is after yywrap() is called, so it's safe",
        -: 6964:  "	 * to go ahead and always set it.",
        -: 6965:  "	 */",
        -: 6966:  "	yy_did_buffer_switch_on_eof = 1;",
        -: 6967:  "	}",
        -: 6968:  "",
        -: 6969:  "",
        -: 6970:  "%-",
        -: 6971:  "#ifdef YY_USE_PROTOS",
        -: 6972:  "void yy_load_buffer_state( void )",
        -: 6973:  "#else",
        -: 6974:  "void yy_load_buffer_state()",
        -: 6975:  "#endif",
        -: 6976:  "%+",
        -: 6977:  "void yyFlexLexer::yy_load_buffer_state()",
        -: 6978:  "%*",
        -: 6979:  "	{",
        -: 6980:  "	yy_n_chars = yy_current_buffer->yy_n_chars;",
        -: 6981:  "	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;",
        -: 6982:  "	yyin = yy_current_buffer->yy_input_file;",
        -: 6983:  "	yy_hold_char = *yy_c_buf_p;",
        -: 6984:  "	}",
        -: 6985:  "",
        -: 6986:  "",
        -: 6987:  "%-",
        -: 6988:  "#ifdef YY_USE_PROTOS",
        -: 6989:  "YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )",
        -: 6990:  "#else",
        -: 6991:  "YY_BUFFER_STATE yy_create_buffer( file, size )",
        -: 6992:  "FILE *file;",
        -: 6993:  "int size;",
        -: 6994:  "#endif",
        -: 6995:  "%+",
        -: 6996:  "YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )",
        -: 6997:  "%*",
        -: 6998:  "	{",
        -: 6999:  "	YY_BUFFER_STATE b;",
        -: 7000:  "",
        -: 7001:  "	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );",
        -: 7002:  "	if ( ! b )",
        -: 7003:  "		YY_FATAL_ERROR( \"out of dynamic memory in yy_create_buffer()\" );",
        -: 7004:  "",
        -: 7005:  "	b->yy_buf_size = size;",
        -: 7006:  "",
        -: 7007:  "	/* yy_ch_buf has to be 2 characters longer than the size given because",
        -: 7008:  "	 * we need to put in 2 end-of-buffer characters.",
        -: 7009:  "	 */",
        -: 7010:  "	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );",
        -: 7011:  "	if ( ! b->yy_ch_buf )",
        -: 7012:  "		YY_FATAL_ERROR( \"out of dynamic memory in yy_create_buffer()\" );",
        -: 7013:  "",
        -: 7014:  "	b->yy_is_our_buffer = 1;",
        -: 7015:  "",
        -: 7016:  "	yy_init_buffer( b, file );",
        -: 7017:  "",
        -: 7018:  "	return b;",
        -: 7019:  "	}",
        -: 7020:  "",
        -: 7021:  "",
        -: 7022:  "%-",
        -: 7023:  "#ifdef YY_USE_PROTOS",
        -: 7024:  "void yy_delete_buffer( YY_BUFFER_STATE b )",
        -: 7025:  "#else",
        -: 7026:  "void yy_delete_buffer( b )",
        -: 7027:  "YY_BUFFER_STATE b;",
        -: 7028:  "#endif",
        -: 7029:  "%+",
        -: 7030:  "void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )",
        -: 7031:  "%*",
        -: 7032:  "	{",
        -: 7033:  "	if ( ! b )",
        -: 7034:  "		return;",
        -: 7035:  "",
        -: 7036:  "	if ( b == yy_current_buffer )",
        -: 7037:  "		yy_current_buffer = (YY_BUFFER_STATE) 0;",
        -: 7038:  "",
        -: 7039:  "	if ( b->yy_is_our_buffer )",
        -: 7040:  "		yy_flex_free( (void *) b->yy_ch_buf );",
        -: 7041:  "",
        -: 7042:  "	yy_flex_free( (void *) b );",
        -: 7043:  "	}",
        -: 7044:  "",
        -: 7045:  "",
        -: 7046:  "%-",
        -: 7047:  "#ifndef YY_ALWAYS_INTERACTIVE",
        -: 7048:  "#ifndef YY_NEVER_INTERACTIVE",
        -: 7049:  "extern int isatty YY_PROTO(( int ));",
        -: 7050:  "#endif",
        -: 7051:  "#endif",
        -: 7052:  "",
        -: 7053:  "#ifdef YY_USE_PROTOS",
        -: 7054:  "void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )",
        -: 7055:  "#else",
        -: 7056:  "void yy_init_buffer( b, file )",
        -: 7057:  "YY_BUFFER_STATE b;",
        -: 7058:  "FILE *file;",
        -: 7059:  "#endif",
        -: 7060:  "",
        -: 7061:  "%+",
        -: 7062:  "extern \"C\" int isatty YY_PROTO(( int ));",
        -: 7063:  "void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )",
        -: 7064:  "%*",
        -: 7065:  "",
        -: 7066:  "	{",
        -: 7067:  "	yy_flush_buffer( b );",
        -: 7068:  "",
        -: 7069:  "	b->yy_input_file = file;",
        -: 7070:  "	b->yy_fill_buffer = 1;",
        -: 7071:  "",
        -: 7072:  "%-",
        -: 7073:  "#if YY_ALWAYS_INTERACTIVE",
        -: 7074:  "	b->yy_is_interactive = 1;",
        -: 7075:  "#else",
        -: 7076:  "#if YY_NEVER_INTERACTIVE",
        -: 7077:  "	b->yy_is_interactive = 0;",
        -: 7078:  "#else",
        -: 7079:  "	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;",
        -: 7080:  "#endif",
        -: 7081:  "#endif",
        -: 7082:  "%+",
        -: 7083:  "	b->yy_is_interactive = 0;",
        -: 7084:  "%*",
        -: 7085:  "	}",
        -: 7086:  "",
        -: 7087:  "",
        -: 7088:  "%-",
        -: 7089:  "#ifdef YY_USE_PROTOS",
        -: 7090:  "void yy_flush_buffer( YY_BUFFER_STATE b )",
        -: 7091:  "#else",
        -: 7092:  "void yy_flush_buffer( b )",
        -: 7093:  "YY_BUFFER_STATE b;",
        -: 7094:  "#endif",
        -: 7095:  "",
        -: 7096:  "%+",
        -: 7097:  "void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )",
        -: 7098:  "%*",
        -: 7099:  "	{",
        -: 7100:  "	b->yy_n_chars = 0;",
        -: 7101:  "",
        -: 7102:  "	/* We always need two end-of-buffer characters.  The first causes",
        -: 7103:  "	 * a transition to the end-of-buffer state.  The second causes",
        -: 7104:  "	 * a jam in that state.",
        -: 7105:  "	 */",
        -: 7106:  "	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;",
        -: 7107:  "	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;",
        -: 7108:  "",
        -: 7109:  "	b->yy_buf_pos = &b->yy_ch_buf[0];",
        -: 7110:  "",
        -: 7111:  "	b->yy_at_bol = 1;",
        -: 7112:  "	b->yy_buffer_status = YY_BUFFER_NEW;",
        -: 7113:  "",
        -: 7114:  "	if ( b == yy_current_buffer )",
        -: 7115:  "		yy_load_buffer_state();",
        -: 7116:  "	}",
        -: 7117:  "%*",
        -: 7118:  "",
        -: 7119:  "",
        -: 7120:  "#ifndef YY_NO_SCAN_BUFFER",
        -: 7121:  "%-",
        -: 7122:  "#ifdef YY_USE_PROTOS",
        -: 7123:  "YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )",
        -: 7124:  "#else",
        -: 7125:  "YY_BUFFER_STATE yy_scan_buffer( base, size )",
        -: 7126:  "char *base;",
        -: 7127:  "yy_size_t size;",
        -: 7128:  "#endif",
        -: 7129:  "	{",
        -: 7130:  "	YY_BUFFER_STATE b;",
        -: 7131:  "",
        -: 7132:  "	if ( size < 2 ||",
        -: 7133:  "	     base[size-2] != YY_END_OF_BUFFER_CHAR ||",
        -: 7134:  "	     base[size-1] != YY_END_OF_BUFFER_CHAR )",
        -: 7135:  "		/* They forgot to leave room for the EOB's. */",
        -: 7136:  "		return 0;",
        -: 7137:  "",
        -: 7138:  "	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );",
        -: 7139:  "	if ( ! b )",
        -: 7140:  "		YY_FATAL_ERROR( \"out of dynamic memory in yy_scan_buffer()\" );",
        -: 7141:  "",
        -: 7142:  "	b->yy_buf_size = size - 2;	/* \"- 2\" to take care of EOB's */",
        -: 7143:  "	b->yy_buf_pos = b->yy_ch_buf = base;",
        -: 7144:  "	b->yy_is_our_buffer = 0;",
        -: 7145:  "	b->yy_input_file = 0;",
        -: 7146:  "	b->yy_n_chars = b->yy_buf_size;",
        -: 7147:  "	b->yy_is_interactive = 0;",
        -: 7148:  "	b->yy_at_bol = 1;",
        -: 7149:  "	b->yy_fill_buffer = 0;",
        -: 7150:  "	b->yy_buffer_status = YY_BUFFER_NEW;",
        -: 7151:  "",
        -: 7152:  "	yy_switch_to_buffer( b );",
        -: 7153:  "",
        -: 7154:  "	return b;",
        -: 7155:  "	}",
        -: 7156:  "%*",
        -: 7157:  "#endif",
        -: 7158:  "",
        -: 7159:  "",
        -: 7160:  "#ifndef YY_NO_SCAN_STRING",
        -: 7161:  "%-",
        -: 7162:  "#ifdef YY_USE_PROTOS",
        -: 7163:  "YY_BUFFER_STATE yy_scan_string( yyconst char *str )",
        -: 7164:  "#else",
        -: 7165:  "YY_BUFFER_STATE yy_scan_string( str )",
        -: 7166:  "yyconst char *str;",
        -: 7167:  "#endif",
        -: 7168:  "	{",
        -: 7169:  "	int len;",
        -: 7170:  "	for ( len = 0; str[len]; ++len )",
        -: 7171:  "		;",
        -: 7172:  "",
        -: 7173:  "	return yy_scan_bytes( str, len );",
        -: 7174:  "	}",
        -: 7175:  "%*",
        -: 7176:  "#endif",
        -: 7177:  "",
        -: 7178:  "",
        -: 7179:  "#ifndef YY_NO_SCAN_BYTES",
        -: 7180:  "%-",
        -: 7181:  "#ifdef YY_USE_PROTOS",
        -: 7182:  "YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )",
        -: 7183:  "#else",
        -: 7184:  "YY_BUFFER_STATE yy_scan_bytes( bytes, len )",
        -: 7185:  "yyconst char *bytes;",
        -: 7186:  "int len;",
        -: 7187:  "#endif",
        -: 7188:  "	{",
        -: 7189:  "	YY_BUFFER_STATE b;",
        -: 7190:  "	char *buf;",
        -: 7191:  "	yy_size_t n;",
        -: 7192:  "	int i;",
        -: 7193:  "",
        -: 7194:  "	/* Get memory for full buffer, including space for trailing EOB's. */",
        -: 7195:  "	n = len + 2;",
        -: 7196:  "	buf = (char *) yy_flex_alloc( n );",
        -: 7197:  "	if ( ! buf )",
        -: 7198:  "		YY_FATAL_ERROR( \"out of dynamic memory in yy_scan_bytes()\" );",
        -: 7199:  "",
        -: 7200:  "	for ( i = 0; i < len; ++i )",
        -: 7201:  "		buf[i] = bytes[i];",
        -: 7202:  "",
        -: 7203:  "	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;",
        -: 7204:  "",
        -: 7205:  "	b = yy_scan_buffer( buf, n );",
        -: 7206:  "	if ( ! b )",
        -: 7207:  "		YY_FATAL_ERROR( \"bad buffer in yy_scan_bytes()\" );",
        -: 7208:  "",
        -: 7209:  "	/* It's okay to grow etc. this buffer, and we should throw it",
        -: 7210:  "	 * away when we're done.",
        -: 7211:  "	 */",
        -: 7212:  "	b->yy_is_our_buffer = 1;",
        -: 7213:  "",
        -: 7214:  "	return b;",
        -: 7215:  "	}",
        -: 7216:  "%*",
        -: 7217:  "#endif",
        -: 7218:  "",
        -: 7219:  "",
        -: 7220:  "#ifndef YY_NO_PUSH_STATE",
        -: 7221:  "%-",
        -: 7222:  "#ifdef YY_USE_PROTOS",
        -: 7223:  "static void yy_push_state( int new_state )",
        -: 7224:  "#else",
        -: 7225:  "static void yy_push_state( new_state )",
        -: 7226:  "int new_state;",
        -: 7227:  "#endif",
        -: 7228:  "%+",
        -: 7229:  "void yyFlexLexer::yy_push_state( int new_state )",
        -: 7230:  "%*",
        -: 7231:  "	{",
        -: 7232:  "	if ( yy_start_stack_ptr >= yy_start_stack_depth )",
        -: 7233:  "		{",
        -: 7234:  "		yy_size_t new_size;",
        -: 7235:  "",
        -: 7236:  "		yy_start_stack_depth += YY_START_STACK_INCR;",
        -: 7237:  "		new_size = yy_start_stack_depth * sizeof( int );",
        -: 7238:  "",
        -: 7239:  "		if ( ! yy_start_stack )",
        -: 7240:  "			yy_start_stack = (int *) yy_flex_alloc( new_size );",
        -: 7241:  "",
        -: 7242:  "		else",
        -: 7243:  "			yy_start_stack = (int *) yy_flex_realloc(",
        -: 7244:  "					(void *) yy_start_stack, new_size );",
        -: 7245:  "",
        -: 7246:  "		if ( ! yy_start_stack )",
        -: 7247:  "			YY_FATAL_ERROR(",
        -: 7248:  "			\"out of memory expanding start-condition stack\" );",
        -: 7249:  "		}",
        -: 7250:  "",
        -: 7251:  "	yy_start_stack[yy_start_stack_ptr++] = YY_START;",
        -: 7252:  "",
        -: 7253:  "	BEGIN(new_state);",
        -: 7254:  "	}",
        -: 7255:  "#endif",
        -: 7256:  "",
        -: 7257:  "",
        -: 7258:  "#ifndef YY_NO_POP_STATE",
        -: 7259:  "%-",
        -: 7260:  "static void yy_pop_state()",
        -: 7261:  "%+",
        -: 7262:  "void yyFlexLexer::yy_pop_state()",
        -: 7263:  "%*",
        -: 7264:  "	{",
        -: 7265:  "	if ( --yy_start_stack_ptr < 0 )",
        -: 7266:  "		YY_FATAL_ERROR( \"start-condition stack underflow\" );",
        -: 7267:  "",
        -: 7268:  "	BEGIN(yy_start_stack[yy_start_stack_ptr]);",
        -: 7269:  "	}",
        -: 7270:  "#endif",
        -: 7271:  "",
        -: 7272:  "",
        -: 7273:  "#ifndef YY_NO_TOP_STATE",
        -: 7274:  "%-",
        -: 7275:  "static int yy_top_state()",
        -: 7276:  "%+",
        -: 7277:  "int yyFlexLexer::yy_top_state()",
        -: 7278:  "%*",
        -: 7279:  "	{",
        -: 7280:  "	return yy_start_stack[yy_start_stack_ptr - 1];",
        -: 7281:  "	}",
        -: 7282:  "#endif",
        -: 7283:  "",
        -: 7284:  "#ifndef YY_EXIT_FAILURE",
        -: 7285:  "#define YY_EXIT_FAILURE 2",
        -: 7286:  "#endif",
        -: 7287:  "",
        -: 7288:  "%-",
        -: 7289:  "#ifdef YY_USE_PROTOS",
        -: 7290:  "static void yy_fatal_error( yyconst char msg[] )",
        -: 7291:  "#else",
        -: 7292:  "static void yy_fatal_error( msg )",
        -: 7293:  "char msg[];",
        -: 7294:  "#endif",
        -: 7295:  "	{",
        -: 7296:  "FILE *err;",  /* ### modified(Jan.24.2001) ### */
        -: 7297:  "	(void) fprintf( err, \"%s\\n\", msg );",
        -: 7298:  "	exit( YY_EXIT_FAILURE );",
        -: 7299:  "	}",
        -: 7300:  "",
        -: 7301:  "%+",
        -: 7302:  "",
        -: 7303:  "void yyFlexLexer::LexerError( yyconst char msg[] )",
        -: 7304:  "	{",
        -: 7305:  "	cerr << msg << '\\n';",
        -: 7306:  "	exit( YY_EXIT_FAILURE );",
        -: 7307:  "	}",
        -: 7308:  "%*",
        -: 7309:  "",
        -: 7310:  "",
        -: 7311:  "/* Redefine yyless() so it works in section 3 code. */",
        -: 7312:  "",
        -: 7313:  "#undef yyless",
        -: 7314:  "#define yyless(n) \\",
        -: 7315:  "	do \\",
        -: 7316:  "		{ \\",
        -: 7317:  "		/* Undo effects of setting up yytext. */ \\",
        -: 7318:  "		yytext[yyleng] = yy_hold_char; \\",
        -: 7319:  "		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \\",
        -: 7320:  "		yy_hold_char = *yy_c_buf_p; \\",
        -: 7321:  "		*yy_c_buf_p = '\\0'; \\",
        -: 7322:  "		yyleng = n; \\",
        -: 7323:  "		} \\",
        -: 7324:  "	while ( 0 )",
        -: 7325:  "",
        -: 7326:  "",
        -: 7327:  "/* Internal utility routines. */",
        -: 7328:  "",
        -: 7329:  "#ifndef yytext_ptr",
        -: 7330:  "#ifdef YY_USE_PROTOS",
        -: 7331:  "static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )",
        -: 7332:  "#else",
        -: 7333:  "static void yy_flex_strncpy( s1, s2, n )",
        -: 7334:  "char *s1;",
        -: 7335:  "yyconst char *s2;",
        -: 7336:  "int n;",
        -: 7337:  "#endif",
        -: 7338:  "	{",
        -: 7339:  "	register int i;",
        -: 7340:  "	for ( i = 0; i < n; ++i )",
        -: 7341:  "		s1[i] = s2[i];",
        -: 7342:  "	}",
        -: 7343:  "#endif",
        -: 7344:  "",
        -: 7345:  "",
        -: 7346:  "#ifdef YY_USE_PROTOS",
        -: 7347:  "static void *yy_flex_alloc( yy_size_t size )",
        -: 7348:  "#else",
        -: 7349:  "static void *yy_flex_alloc( size )",
        -: 7350:  "yy_size_t size;",
        -: 7351:  "#endif",
        -: 7352:  "	{",
        -: 7353:  "	return (void *) malloc( size );",
        -: 7354:  "	}",
        -: 7355:  "",
        -: 7356:  "#ifdef YY_USE_PROTOS",
        -: 7357:  "static void *yy_flex_realloc( void *ptr, yy_size_t size )",
        -: 7358:  "#else",
        -: 7359:  "static void *yy_flex_realloc( ptr, size )",
        -: 7360:  "void *ptr;",
        -: 7361:  "yy_size_t size;",
        -: 7362:  "#endif",
        -: 7363:  "	{",
        -: 7364:  "	/* The cast to (char *) in the following accommodates both",
        -: 7365:  "	 * implementations that use char* generic pointers, and those",
        -: 7366:  "	 * that use void* generic pointers.  It works with the latter",
        -: 7367:  "	 * because both ANSI C and C++ allow castless assignment from",
        -: 7368:  "	 * any pointer type to void*, and deal with argument conversions",
        -: 7369:  "	 * as though doing an assignment.",
        -: 7370:  "	 */",
        -: 7371:  "	return (void *) realloc( (char *) ptr, size );",
        -: 7372:  "	}",
        -: 7373:  "",
        -: 7374:  "#ifdef YY_USE_PROTOS",
        -: 7375:  "static void yy_flex_free( void *ptr )",
        -: 7376:  "#else",
        -: 7377:  "static void yy_flex_free( ptr )",
        -: 7378:  "void *ptr;",
        -: 7379:  "#endif",
        -: 7380:  "	{",
        -: 7381:  "	free( ptr );",
        -: 7382:  "	}",
        -: 7383:  "",
        -: 7384:  "#if YY_MAIN",
        -: 7385:  "int main()",
        -: 7386:  "	{",
        -: 7387:  "	yylex();",
        -: 7388:  "	return 0;",
        -: 7389:  "	}",
        -: 7390:  "#endif",
        -: 7391:  0
        -: 7392:};
        -: 7393:/* sym - symbol table routines */
        -: 7394:
        -: 7395:/*-
        -: 7396: * Copyright (c) 1990 The Regents of the University of California.
        -: 7397: * All rights reserved.
        -: 7398: *
        -: 7399: * This code is derived from software contributed to Berkeley by
        -: 7400: * Vern Paxson.
        -: 7401: * 
        -: 7402: * The United States Government has rights in this work pursuant
        -: 7403: * to contract no. DE-AC03-76SF00098 between the United States
        -: 7404: * Department of Energy and the University of California.
        -: 7405: *
        -: 7406: * Redistribution and use in source and binary forms are permitted provided
        -: 7407: * that: (1) source distributions retain this entire copyright notice and
        -: 7408: * comment, and (2) distributions including binaries display the following
        -: 7409: * acknowledgement:  ``This product includes software developed by the
        -: 7410: * University of California, Berkeley and its contributors'' in the
        -: 7411: * documentation or other materials provided with the distribution and in
        -: 7412: * all advertising materials mentioning features or use of this software.
        -: 7413: * Neither the name of the University nor the names of its contributors may
        -: 7414: * be used to endorse or promote products derived from this software without
        -: 7415: * specific prior written permission.
        -: 7416: * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
        -: 7417: * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
        -: 7418: * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
        -: 7419: */
        -: 7420:
        -: 7421:/* $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $ */
        -: 7422:
        -: 7423:
        -: 7424:
        -: 7425:/* declare functions that have forward references */
        -: 7426:
        -: 7427:int hashfunct PROTO((register char[], int));
        -: 7428:
        -: 7429:
        -: 7430:struct hash_entry *ndtbl[NAME_TABLE_HASH_SIZE];
        -: 7431:struct hash_entry *sctbl[START_COND_HASH_SIZE];
        -: 7432:struct hash_entry *ccltab[CCL_HASH_SIZE];
        -: 7433:
        -: 7434:struct hash_entry *findsym();
        -: 7435:
        -: 7436:
        -: 7437:/* addsym - add symbol and definitions to symbol table
        -: 7438: *
        -: 7439: * -1 is returned if the symbol already exists, and the change not made.
        -: 7440: */
        -: 7441:
function addsym called 2134 returned 100% blocks executed 93%
     2134: 7442:int addsym( sym, str_def, int_def, table, table_size )
        -: 7443:register char sym[];
        -: 7444:char *str_def;
        -: 7445:int int_def;
        -: 7446:hash_table table;
        -: 7447:int table_size;
        -: 7448:	{
     2134: 7449:	int hash_val = hashfunct( sym, table_size );
call    0 returned 2134
     2134: 7450:	register struct hash_entry *sym_entry = table[hash_val];
        -: 7451:	register struct hash_entry *new_entry;
        -: 7452:	register struct hash_entry *successor;
        -: 7453:
     2366: 7454:	while ( sym_entry )
branch  0 taken 233
branch  1 taken 2133 (fallthrough)
        -: 7455:		{
      233: 7456:		if ( ! strcmp( sym, sym_entry->name ) )
branch  0 taken 1 (fallthrough)
branch  1 taken 232
        -: 7457:			{ /* entry already exists */
        1: 7458:			return -1;
        -: 7459:			}
        -: 7460:
      232: 7461:		sym_entry = sym_entry->next;
        -: 7462:		}
        -: 7463:
        -: 7464:	/* create new entry */
        -: 7465:	new_entry = (struct hash_entry *)
     2133: 7466:		flex_alloc( sizeof( struct hash_entry ) );
call    0 returned 2133
        -: 7467:
     2133: 7468:	if ( new_entry == NULL )
branch  0 taken 0 (fallthrough)
branch  1 taken 2133
    #####: 7469:		flexfatal( _( "symbol table memory allocation failed" ) );
call    0 never executed
        -: 7470:
     2133: 7471:	if ( (successor = table[hash_val]) != 0 )
branch  0 taken 133 (fallthrough)
branch  1 taken 2000
        -: 7472:		{
      133: 7473:		new_entry->next = successor;
      133: 7474:		successor->prev = new_entry;
        -: 7475:		}
        -: 7476:	else
     2000: 7477:		new_entry->next = NULL;
        -: 7478:
     2133: 7479:	new_entry->prev = NULL;
     2133: 7480:	new_entry->name = sym;
     2133: 7481:	new_entry->str_val = str_def;
     2133: 7482:	new_entry->int_val = int_def;
        -: 7483:
     2133: 7484:	table[hash_val] = new_entry;
        -: 7485:
     2133: 7486:	return 0;
        -: 7487:	}
        -: 7488:
        -: 7489:
        -: 7490:/* cclinstal - save the text of a character class */
        -: 7491:
function cclinstal called 1298 returned 100% blocks executed 100%
     1298: 7492:void cclinstal( ccltxt, cclnum )
        -: 7493:Char ccltxt[];
        -: 7494:int cclnum;
        -: 7495:	{
        -: 7496:	/* We don't bother checking the return status because we are not
        -: 7497:	 * called unless the symbol is new.
        -: 7498:	 */
        -: 7499:	Char *copy_unsigned_string();
        -: 7500:
     1298: 7501:	(void) addsym( (char *) copy_unsigned_string( ccltxt ),
call    0 returned 1298
call    1 returned 1298
        -: 7502:			(char *) 0, cclnum,
        -: 7503:			ccltab, CCL_HASH_SIZE );
     1298: 7504:	}
        -: 7505:
        -: 7506:
        -: 7507:/* ccllookup - lookup the number associated with character class text
        -: 7508: *
        -: 7509: * Returns 0 if there's no CCL associated with the text.
        -: 7510: */
        -: 7511:
function ccllookup called 1531 returned 100% blocks executed 100%
     1531: 7512:int ccllookup( ccltxt )
        -: 7513:Char ccltxt[];
        -: 7514:	{
     1531: 7515:	return findsym( (char *) ccltxt, ccltab, CCL_HASH_SIZE )->int_val;
call    0 returned 1531
        -: 7516:	}
        -: 7517:
        -: 7518:
        -: 7519:/* findsym - find symbol in symbol table */
        -: 7520:
function findsym called 2007 returned 100% blocks executed 100%
     2007: 7521:struct hash_entry *findsym( sym, table, table_size )
        -: 7522:register char sym[];
        -: 7523:hash_table table;
        -: 7524:int table_size;
        -: 7525:	{
        -: 7526:	static struct hash_entry empty_entry =
        -: 7527:		{
        -: 7528:		(struct hash_entry *) 0, (struct hash_entry *) 0,
        -: 7529:		(char *) 0, (char *) 0, 0,
        -: 7530:		} ;
     2007: 7531:	register struct hash_entry *sym_entry =
     2007: 7532:		table[hashfunct( sym, table_size )];
call    0 returned 2007
        -: 7533:
     2239: 7534:	while ( sym_entry )
branch  0 taken 937
branch  1 taken 1302 (fallthrough)
        -: 7535:		{
      937: 7536:		if ( ! strcmp( sym, sym_entry->name ) )
branch  0 taken 705 (fallthrough)
branch  1 taken 232
      705: 7537:			return sym_entry;
      232: 7538:		sym_entry = sym_entry->next;
        -: 7539:		}
        -: 7540:
     1302: 7541:	return &empty_entry;
        -: 7542:	}
        -: 7543:
        -: 7544:
        -: 7545:/* hashfunct - compute the hash value for "str" and hash size "hash_size" */
        -: 7546:
function hashfunct called 4141 returned 100% blocks executed 100%
     4141: 7547:int hashfunct( str, hash_size )
        -: 7548:register char str[];
        -: 7549:int hash_size;
        -: 7550:	{
        -: 7551:	register int hashval;
        -: 7552:	register int locstr;
        -: 7553:
     4141: 7554:	hashval = 0;
     4141: 7555:	locstr = 0;
        -: 7556:
    26263: 7557:	while ( str[locstr] )
branch  0 taken 22122
branch  1 taken 4141 (fallthrough)
        -: 7558:		{
    22122: 7559:		hashval = (hashval << 1) + (unsigned char) str[locstr++];
    22122: 7560:		hashval %= hash_size;
        -: 7561:		}
        -: 7562:
     4141: 7563:	return hashval;
        -: 7564:	}
        -: 7565:
        -: 7566:
        -: 7567:/* ndinstal - install a name definition */
        -: 7568:
function ndinstal called 257 returned 100% blocks executed 100%
      257: 7569:void ndinstal( name, definition )
        -: 7570:char name[];
        -: 7571:Char definition[];
        -: 7572:	{
        -: 7573:	char *copy_string();
        -: 7574:	Char *copy_unsigned_string();
        -: 7575:
      257: 7576:	if ( addsym( copy_string( name ),
call    0 returned 257
call    1 returned 257
branch  2 taken 1 (fallthrough)
branch  3 taken 256
      257: 7577:			(char *) copy_unsigned_string( definition ), 0,
call    0 returned 257
        -: 7578:			ndtbl, NAME_TABLE_HASH_SIZE ) )
        1: 7579:		synerr( _( "name defined twice" ) );
call    0 returned 1
      257: 7580:	}
        -: 7581:
        -: 7582:
        -: 7583:/* ndlookup - lookup a name definition
        -: 7584: *
        -: 7585: * Returns a nil pointer if the name definition does not exist.
        -: 7586: */
        -: 7587:
function ndlookup called 459 returned 100% blocks executed 100%
      459: 7588:Char *ndlookup( nd )
        -: 7589:char nd[];
        -: 7590:	{
      459: 7591:	return (Char *) findsym( nd, ndtbl, NAME_TABLE_HASH_SIZE )->str_val;
call    0 returned 459
        -: 7592:	}
        -: 7593:
        -: 7594:
        -: 7595:/* scextend - increase the maximum number of start conditions */
        -: 7596:
function scextend called 0 returned 0% blocks executed 0%
    #####: 7597:void scextend()
        -: 7598:	{
    #####: 7599:	current_max_scs += MAX_SCS_INCREMENT;
        -: 7600:
    #####: 7601:	++num_reallocs;
        -: 7602:
    #####: 7603:	scset = reallocate_integer_array( scset, current_max_scs );
call    0 never executed
    #####: 7604:	scbol = reallocate_integer_array( scbol, current_max_scs );
call    0 never executed
    #####: 7605:	scxclu = reallocate_integer_array( scxclu, current_max_scs );
call    0 never executed
    #####: 7606:	sceof = reallocate_integer_array( sceof, current_max_scs );
call    0 never executed
    #####: 7607:	scname = reallocate_char_ptr_array( scname, current_max_scs );
call    0 never executed
    #####: 7608:	}
        -: 7609:
        -: 7610:
        -: 7611:/* scinstal - make a start condition
        -: 7612: *
        -: 7613: * NOTE
        -: 7614: *    The start condition is "exclusive" if xcluflg is true.
        -: 7615: */
        -: 7616:
function scinstal called 579 returned 100% blocks executed 80%
      579: 7617:void scinstal( str, xcluflg )
        -: 7618:char str[];
        -: 7619:int xcluflg;
        -: 7620:	{
        -: 7621:	char *copy_string();
        -: 7622:
        -: 7623:	/* Generate start condition definition, for use in BEGIN et al. */
      579: 7624:	action_define( str, lastsc );
call    0 returned 579
        -: 7625:
      579: 7626:	if ( ++lastsc >= current_max_scs )
branch  0 taken 0 (fallthrough)
branch  1 taken 579
    #####: 7627:		scextend();
call    0 never executed
        -: 7628:
      579: 7629:	scname[lastsc] = copy_string( str );
call    0 returned 579
        -: 7630:
      579: 7631:	if ( addsym( scname[lastsc], (char *) 0, lastsc,
call    0 returned 579
branch  1 taken 0 (fallthrough)
branch  2 taken 579
        -: 7632:			sctbl, START_COND_HASH_SIZE ) )
    #####: 7633:		format_pinpoint_message(
call    0 never executed
        -: 7634:				_( "start condition %s declared twice" ),
        -: 7635:					str );
        -: 7636:
      579: 7637:	scset[lastsc] = mkstate( SYM_EPSILON );
call    0 returned 579
      579: 7638:	scbol[lastsc] = mkstate( SYM_EPSILON );
call    0 returned 579
      579: 7639:	scxclu[lastsc] = xcluflg;
      579: 7640:	sceof[lastsc] = false;
      579: 7641:	}
        -: 7642:
        -: 7643:
        -: 7644:/* sclookup - lookup the number associated with a start condition
        -: 7645: *
        -: 7646: * Returns 0 if no such start condition.
        -: 7647: */
        -: 7648:
function sclookup called 17 returned 100% blocks executed 100%
       17: 7649:int sclookup( str )
        -: 7650:char str[];
        -: 7651:	{
       17: 7652:	return findsym( str, sctbl, START_COND_HASH_SIZE )->int_val;
call    0 returned 17
        -: 7653:	}
        -: 7654:/* tblcmp - table compression routines */
        -: 7655:
        -: 7656:/*-
        -: 7657: * Copyright (c) 1990 The Regents of the University of California.
        -: 7658: * All rights reserved.
        -: 7659: *
        -: 7660: * This code is derived from software contributed to Berkeley by
        -: 7661: * Vern Paxson.
        -: 7662: * 
        -: 7663: * The United States Government has rights in this work pursuant
        -: 7664: * to contract no. DE-AC03-76SF00098 between the United States
        -: 7665: * Department of Energy and the University of California.
        -: 7666: *
        -: 7667: * Redistribution and use in source and binary forms are permitted provided
        -: 7668: * that: (1) source distributions retain this entire copyright notice and
        -: 7669: * comment, and (2) distributions including binaries display the following
        -: 7670: * acknowledgement:  ``This product includes software developed by the
        -: 7671: * University of California, Berkeley and its contributors'' in the
        -: 7672: * documentation or other materials provided with the distribution and in
        -: 7673: * all advertising materials mentioning features or use of this software.
        -: 7674: * Neither the name of the University nor the names of its contributors may
        -: 7675: * be used to endorse or promote products derived from this software without
        -: 7676: * specific prior written permission.
        -: 7677: * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
        -: 7678: * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
        -: 7679: * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
        -: 7680: */
        -: 7681:
        -: 7682:/* $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $ */
        -: 7683:
        -: 7684:
        -: 7685:
        -: 7686:/* declarations for functions that have forward references */
        -: 7687:
        -: 7688:void mkentry PROTO((register int*, int, int, int, int));
        -: 7689:void mkprot PROTO((int[], int, int));
        -: 7690:void mktemplate PROTO((int[], int, int));
        -: 7691:void mv2front PROTO((int));
        -: 7692:int tbldiff PROTO((int[], int, int[]));
        -: 7693:
        -: 7694:
        -: 7695:/* bldtbl - build table entries for dfa state
        -: 7696: *
        -: 7697: * synopsis
        -: 7698: *   int state[numecs], statenum, totaltrans, comstate, comfreq;
        -: 7699: *   bldtbl( state, statenum, totaltrans, comstate, comfreq );
        -: 7700: *
        -: 7701: * State is the statenum'th dfa state.  It is indexed by equivalence class and
        -: 7702: * gives the number of the state to enter for a given equivalence class.
        -: 7703: * totaltrans is the total number of transitions out of the state.  Comstate
        -: 7704: * is that state which is the destination of the most transitions out of State.
        -: 7705: * Comfreq is how many transitions there are out of State to Comstate.
        -: 7706: *
        -: 7707: * A note on terminology:
        -: 7708: *    "protos" are transition tables which have a high probability of
        -: 7709: * either being redundant (a state processed later will have an identical
        -: 7710: * transition table) or nearly redundant (a state processed later will have
        -: 7711: * many of the same out-transitions).  A "most recently used" queue of
        -: 7712: * protos is kept around with the hope that most states will find a proto
        -: 7713: * which is similar enough to be usable, and therefore compacting the
        -: 7714: * output tables.
        -: 7715: *    "templates" are a special type of proto.  If a transition table is
        -: 7716: * homogeneous or nearly homogeneous (all transitions go to the same
        -: 7717: * destination) then the odds are good that future states will also go
        -: 7718: * to the same destination state on basically the same character set.
        -: 7719: * These homogeneous states are so common when dealing with large rule
        -: 7720: * sets that they merit special attention.  If the transition table were
        -: 7721: * simply made into a proto, then (typically) each subsequent, similar
        -: 7722: * state will differ from the proto for two out-transitions.  One of these
        -: 7723: * out-transitions will be that character on which the proto does not go
        -: 7724: * to the common destination, and one will be that character on which the
        -: 7725: * state does not go to the common destination.  Templates, on the other
        -: 7726: * hand, go to the common state on EVERY transition character, and therefore
        -: 7727: * cost only one difference.
        -: 7728: */
        -: 7729:
function bldtbl called 10838 returned 100% blocks executed 100%
    10838: 7730:void bldtbl( state, statenum, totaltrans, comstate, comfreq )
        -: 7731:int state[], statenum, totaltrans, comstate, comfreq;
        -: 7732:	{
        -: 7733:	int extptr, extrct[2][CSIZE + 1];
        -: 7734:	int mindiff, minprot, i, d;
        -: 7735:
        -: 7736:	/* If extptr is 0 then the first array of extrct holds the result
        -: 7737:	 * of the "best difference" to date, which is those transitions
        -: 7738:	 * which occur in "state" but not in the proto which, to date,
        -: 7739:	 * has the fewest differences between itself and "state".  If
        -: 7740:	 * extptr is 1 then the second array of extrct hold the best
        -: 7741:	 * difference.  The two arrays are toggled between so that the
        -: 7742:	 * best difference to date can be kept around and also a difference
        -: 7743:	 * just created by checking against a candidate "best" proto.
        -: 7744:	 */
        -: 7745:
    10838: 7746:	extptr = 0;
        -: 7747:
        -: 7748:	/* If the state has too few out-transitions, don't bother trying to
        -: 7749:	 * compact its tables.
        -: 7750:	 */
        -: 7751:
    10838: 7752:	if ( (totaltrans * 100) < (numecs * PROTO_SIZE_PERCENTAGE) )
branch  0 taken 6807 (fallthrough)
branch  1 taken 4031
     6807: 7753:		mkentry( state, numecs, statenum, JAMSTATE, totaltrans );
call    0 returned 6807
        -: 7754:
        -: 7755:	else
        -: 7756:		{
        -: 7757:		/* "checkcom" is true if we should only check "state" against
        -: 7758:		 * protos which have the same "comstate" value.
        -: 7759:		 */
     4031: 7760:		int checkcom =
     4031: 7761:			comfreq * 100 > totaltrans * CHECK_COM_PERCENTAGE;
        -: 7762:
     4031: 7763:		minprot = firstprot;
     4031: 7764:		mindiff = totaltrans;
        -: 7765:
     4031: 7766:		if ( checkcom )
branch  0 taken 2594 (fallthrough)
branch  1 taken 1437
        -: 7767:			{
        -: 7768:			/* Find first proto which has the same "comstate". */
     3853: 7769:			for ( i = firstprot; i != NIL; i = protnext[i] )
branch  0 taken 3183
branch  1 taken 670 (fallthrough)
     3183: 7770:				if ( protcomst[i] == comstate )
branch  0 taken 1924 (fallthrough)
branch  1 taken 1259
        -: 7771:					{
     1924: 7772:					minprot = i;
     1924: 7773:					mindiff = tbldiff( state, minprot,
     1924: 7774:							extrct[extptr] );
call    0 returned 1924
     1924: 7775:					break;
        -: 7776:					}
        -: 7777:			}
        -: 7778:
        -: 7779:		else
        -: 7780:			{
        -: 7781:			/* Since we've decided that the most common destination
        -: 7782:			 * out of "state" does not occur with a high enough
        -: 7783:			 * frequency, we set the "comstate" to zero, assuring
        -: 7784:			 * that if this state is entered into the proto list,
        -: 7785:			 * it will not be considered a template.
        -: 7786:			 */
     1437: 7787:			comstate = 0;
        -: 7788:
     1437: 7789:			if ( firstprot != NIL )
branch  0 taken 1291 (fallthrough)
branch  1 taken 146
        -: 7790:				{
     1291: 7791:				minprot = firstprot;
     1291: 7792:				mindiff = tbldiff( state, minprot,
     1291: 7793:						extrct[extptr] );
call    0 returned 1291
        -: 7794:				}
        -: 7795:			}
        -: 7796:
        -: 7797:		/* We now have the first interesting proto in "minprot".  If
        -: 7798:		 * it matches within the tolerances set for the first proto,
        -: 7799:		 * we don't want to bother scanning the rest of the proto list
        -: 7800:		 * to see if we have any other reasonable matches.
        -: 7801:		 */
        -: 7802:
     4031: 7803:		if ( mindiff * 100 > totaltrans * FIRST_MATCH_DIFF_PERCENTAGE )
branch  0 taken 1655 (fallthrough)
branch  1 taken 2376
        -: 7804:			{
        -: 7805:			/* Not a good enough match.  Scan the rest of the
        -: 7806:			 * protos.
        -: 7807:			 */
    14093: 7808:			for ( i = minprot; i != NIL; i = protnext[i] )
branch  0 taken 12438
branch  1 taken 1655 (fallthrough)
        -: 7809:				{
    12438: 7810:				d = tbldiff( state, i, extrct[1 - extptr] );
call    0 returned 12438
    12438: 7811:				if ( d < mindiff )
branch  0 taken 71 (fallthrough)
branch  1 taken 12367
        -: 7812:					{
       71: 7813:					extptr = 1 - extptr;
       71: 7814:					mindiff = d;
       71: 7815:					minprot = i;
        -: 7816:					}
        -: 7817:				}
        -: 7818:			}
        -: 7819:
        -: 7820:		/* Check if the proto we've decided on as our best bet is close
        -: 7821:		 * enough to the state we want to match to be usable.
        -: 7822:		 */
        -: 7823:
     4031: 7824:		if ( mindiff * 100 > totaltrans * ACCEPTABLE_DIFF_PERCENTAGE )
branch  0 taken 864 (fallthrough)
branch  1 taken 3167
        -: 7825:			{
        -: 7826:			/* No good.  If the state is homogeneous enough,
        -: 7827:			 * we make a template out of it.  Otherwise, we
        -: 7828:			 * make a proto.
        -: 7829:			 */
        -: 7830:
      864: 7831:			if ( comfreq * 100 >=
      864: 7832:			     totaltrans * TEMPLATE_SAME_PERCENTAGE )
branch  0 taken 625 (fallthrough)
branch  1 taken 239
      625: 7833:				mktemplate( state, statenum, comstate );
call    0 returned 625
        -: 7834:
        -: 7835:			else
        -: 7836:				{
      239: 7837:				mkprot( state, statenum, comstate );
call    0 returned 239
      239: 7838:				mkentry( state, numecs, statenum,
call    0 returned 239
        -: 7839:					JAMSTATE, totaltrans );
        -: 7840:				}
        -: 7841:			}
        -: 7842:
        -: 7843:		else
        -: 7844:			{ /* use the proto */
     3167: 7845:			mkentry( extrct[extptr], numecs, statenum,
call    0 returned 3167
        -: 7846:				prottbl[minprot], mindiff );
        -: 7847:
        -: 7848:			/* If this state was sufficiently different from the
        -: 7849:			 * proto we built it from, make it, too, a proto.
        -: 7850:			 */
        -: 7851:
     3167: 7852:			if ( mindiff * 100 >=
     3167: 7853:			     totaltrans * NEW_PROTO_DIFF_PERCENTAGE )
branch  0 taken 117 (fallthrough)
branch  1 taken 3050
      117: 7854:				mkprot( state, statenum, comstate );
call    0 returned 117
        -: 7855:
        -: 7856:			/* Since mkprot added a new proto to the proto queue,
        -: 7857:			 * it's possible that "minprot" is no longer on the
        -: 7858:			 * proto queue (if it happened to have been the last
        -: 7859:			 * entry, it would have been bumped off).  If it's
        -: 7860:			 * not there, then the new proto took its physical
        -: 7861:			 * place (though logically the new proto is at the
        -: 7862:			 * beginning of the queue), so in that case the
        -: 7863:			 * following call will do nothing.
        -: 7864:			 */
        -: 7865:
     3167: 7866:			mv2front( minprot );
call    0 returned 3167
        -: 7867:			}
        -: 7868:		}
    10838: 7869:	}
        -: 7870:
        -: 7871:
        -: 7872:/* cmptmps - compress template table entries
        -: 7873: *
        -: 7874: * Template tables are compressed by using the 'template equivalence
        -: 7875: * classes', which are collections of transition character equivalence
        -: 7876: * classes which always appear together in templates - really meta-equivalence
        -: 7877: * classes.
        -: 7878: */
        -: 7879:
function cmptmps called 428 returned 100% blocks executed 95%
      428: 7880:void cmptmps()
        -: 7881:	{
        -: 7882:	int tmpstorage[CSIZE + 1];
      428: 7883:	register int *tmp = tmpstorage, i, j;
        -: 7884:	int totaltrans, trans;
        -: 7885:
      428: 7886:	peakpairs = numtemps * numecs + tblend;
        -: 7887:
      428: 7888:	if ( usemecs )
branch  0 taken 215 (fallthrough)
branch  1 taken 213
        -: 7889:		{
        -: 7890:		/* Create equivalence classes based on data gathered on
        -: 7891:		 * template transitions.
        -: 7892:		 */
      215: 7893:		nummecs = cre8ecs( tecfwd, tecbck, numecs );
call    0 returned 215
        -: 7894:		}
        -: 7895:
        -: 7896:	else
      213: 7897:		nummecs = numecs;
        -: 7898:
      428: 7899:	while ( lastdfa + numtemps + 1 >= current_max_dfas )
branch  0 taken 0
branch  1 taken 428 (fallthrough)
    #####: 7900:		increase_max_dfas();
call    0 never executed
        -: 7901:
        -: 7902:	/* Loop through each template. */
        -: 7903:
     1053: 7904:	for ( i = 1; i <= numtemps; ++i )
branch  0 taken 625
branch  1 taken 428 (fallthrough)
        -: 7905:		{
        -: 7906:		/* Number of non-jam transitions out of this template. */
      625: 7907:		totaltrans = 0;
        -: 7908:
    58660: 7909:		for ( j = 1; j <= numecs; ++j )
branch  0 taken 58035
branch  1 taken 625 (fallthrough)
        -: 7910:			{
    58035: 7911:			trans = tnxt[numecs * i + j];
        -: 7912:
    58035: 7913:			if ( usemecs )
branch  0 taken 27542 (fallthrough)
branch  1 taken 30493
        -: 7914:				{
        -: 7915:				/* The absolute value of tecbck is the
        -: 7916:				 * meta-equivalence class of a given
        -: 7917:				 * equivalence class, as set up by cre8ecs().
        -: 7918:				 */
    27542: 7919:				if ( tecbck[j] > 0 )
branch  0 taken 948 (fallthrough)
branch  1 taken 26594
        -: 7920:					{
      948: 7921:					tmp[tecbck[j]] = trans;
        -: 7922:
      948: 7923:					if ( trans > 0 )
branch  0 taken 454 (fallthrough)
branch  1 taken 494
      454: 7924:						++totaltrans;
        -: 7925:					}
        -: 7926:				}
        -: 7927:
        -: 7928:			else
        -: 7929:				{
    30493: 7930:				tmp[j] = trans;
        -: 7931:
    30493: 7932:				if ( trans > 0 )
branch  0 taken 29308 (fallthrough)
branch  1 taken 1185
    29308: 7933:					++totaltrans;
        -: 7934:				}
        -: 7935:			}
        -: 7936:
        -: 7937:		/* It is assumed (in a rather subtle way) in the skeleton
        -: 7938:		 * that if we're using meta-equivalence classes, the def[]
        -: 7939:		 * entry for all templates is the jam template, i.e.,
        -: 7940:		 * templates never default to other non-jam table entries
        -: 7941:		 * (e.g., another template)
        -: 7942:		 */
        -: 7943:
        -: 7944:		/* Leave room for the jam-state after the last real state. */
      625: 7945:		mkentry( tmp, nummecs, lastdfa + i + 1, JAMSTATE, totaltrans );
call    0 returned 625
        -: 7946:		}
      428: 7947:	}
        -: 7948:
        -: 7949:
        -: 7950:
        -: 7951:/* expand_nxt_chk - expand the next check arrays */
        -: 7952:
function expand_nxt_chk called 32 returned 100% blocks executed 100%
       32: 7953:void expand_nxt_chk()
        -: 7954:	{
       32: 7955:	register int old_max = current_max_xpairs;
        -: 7956:
       32: 7957:	current_max_xpairs += MAX_XPAIRS_INCREMENT;
        -: 7958:
       32: 7959:	++num_reallocs;
        -: 7960:
       32: 7961:	nxt = reallocate_integer_array( nxt, current_max_xpairs );
call    0 returned 32
       32: 7962:	chk = reallocate_integer_array( chk, current_max_xpairs );
call    0 returned 32
        -: 7963:
       32: 7964:	zero_out( (char *) (chk + old_max),
call    0 returned 32
        -: 7965:		(size_t) (MAX_XPAIRS_INCREMENT * sizeof( int )) );
       32: 7966:	}
        -: 7967:
        -: 7968:
        -: 7969:/* find_table_space - finds a space in the table for a state to be placed
        -: 7970: *
        -: 7971: * synopsis
        -: 7972: *     int *state, numtrans, block_start;
        -: 7973: *     int find_table_space();
        -: 7974: *
        -: 7975: *     block_start = find_table_space( state, numtrans );
        -: 7976: *
        -: 7977: * State is the state to be added to the full speed transition table.
        -: 7978: * Numtrans is the number of out-transitions for the state.
        -: 7979: *
        -: 7980: * find_table_space() returns the position of the start of the first block (in
        -: 7981: * chk) able to accommodate the state
        -: 7982: *
        -: 7983: * In determining if a state will or will not fit, find_table_space() must take
        -: 7984: * into account the fact that an end-of-buffer state will be added at [0],
        -: 7985: * and an action number will be added in [-1].
        -: 7986: */
        -: 7987:
function find_table_space called 2262 returned 100% blocks executed 93%
     2262: 7988:int find_table_space( state, numtrans )
        -: 7989:int *state, numtrans;
        -: 7990:	{
        -: 7991:	/* Firstfree is the position of the first possible occurrence of two
        -: 7992:	 * consecutive unused records in the chk and nxt arrays.
        -: 7993:	 */
        -: 7994:	register int i;
        -: 7995:	register int *state_ptr, *chk_ptr;
        -: 7996:	register int *ptr_to_last_entry_in_state;
        -: 7997:
        -: 7998:	/* If there are too many out-transitions, put the state at the end of
        -: 7999:	 * nxt and chk.
        -: 8000:	 */
     2262: 8001:	if ( numtrans > MAX_XTIONS_FULL_INTERIOR_FIT )
branch  0 taken 764 (fallthrough)
branch  1 taken 1498
        -: 8002:		{
        -: 8003:		/* If table is empty, return the first available spot in
        -: 8004:		 * chk/nxt, which should be 1.
        -: 8005:		 */
      764: 8006:		if ( tblend < 2 )
branch  0 taken 0 (fallthrough)
branch  1 taken 764
    #####: 8007:			return 1;
        -: 8008:
        -: 8009:		/* Start searching for table space near the end of
        -: 8010:		 * chk/nxt arrays.
        -: 8011:		 */
      764: 8012:		i = tblend - numecs;
        -: 8013:		}
        -: 8014:
        -: 8015:	else
        -: 8016:		/* Start searching for table space from the beginning
        -: 8017:		 * (skipping only the elements which will definitely not
        -: 8018:		 * hold the new state).
        -: 8019:		 */
     1498: 8020:		i = firstfree;
        -: 8021:
        -: 8022:	while ( 1 )	/* loops until a space is found */
        -: 8023:		{
    14707: 8024:		while ( i + numecs >= current_max_xpairs )
branch  0 taken 0
branch  1 taken 14707 (fallthrough)
    #####: 8025:			expand_nxt_chk();
call    0 never executed
        -: 8026:
        -: 8027:		/* Loops until space for end-of-buffer and action number
        -: 8028:		 * are found.
        -: 8029:		 */
        -: 8030:		while ( 1 )
        -: 8031:			{
        -: 8032:			/* Check for action number space. */
    58555: 8033:			if ( chk[i - 1] == 0 )
branch  0 taken 15749 (fallthrough)
branch  1 taken 42806
        -: 8034:				{
        -: 8035:				/* Check for end-of-buffer space. */
    15749: 8036:				if ( chk[i] == 0 )
branch  0 taken 14707 (fallthrough)
branch  1 taken 1042
    14707: 8037:					break;
        -: 8038:
        -: 8039:				else
        -: 8040:					/* Since i != 0, there is no use
        -: 8041:					 * checking to see if (++i) - 1 == 0,
        -: 8042:					 * because that's the same as i == 0,
        -: 8043:					 * so we skip a space.
        -: 8044:					 */
     1042: 8045:					i += 2;
        -: 8046:				}
        -: 8047:
        -: 8048:			else
    42806: 8049:				++i;
        -: 8050:
    43858: 8051:			while ( i + numecs >= current_max_xpairs )
branch  0 taken 10
branch  1 taken 43848 (fallthrough)
       10: 8052:				expand_nxt_chk();
call    0 returned 10
        -: 8053:			}
        -: 8054:
        -: 8055:		/* If we started search from the beginning, store the new
        -: 8056:		 * firstfree for the next call of find_table_space().
        -: 8057:		 */
    14707: 8058:		if ( numtrans <= MAX_XTIONS_FULL_INTERIOR_FIT )
branch  0 taken 2239 (fallthrough)
branch  1 taken 12468
     2239: 8059:			firstfree = i + 1;
        -: 8060:
        -: 8061:		/* Check to see if all elements in chk (and therefore nxt)
        -: 8062:		 * that are needed for the new state have not yet been taken.
        -: 8063:		 */
        -: 8064:
    14707: 8065:		state_ptr = &state[1];
    14707: 8066:		ptr_to_last_entry_in_state = &chk[i + numecs + 1];
        -: 8067:
    14707: 8068:		for ( chk_ptr = &chk[i + 1];
   788801: 8069:		      chk_ptr != ptr_to_last_entry_in_state; ++chk_ptr )
branch  0 taken 786539
branch  1 taken 2262 (fallthrough)
   786539: 8070:			if ( *(state_ptr++) != 0 && *chk_ptr != 0 )
branch  0 taken 100036 (fallthrough)
branch  1 taken 686503
branch  2 taken 12445 (fallthrough)
branch  3 taken 87591
    12445: 8071:				break;
        -: 8072:
    14707: 8073:		if ( chk_ptr == ptr_to_last_entry_in_state )
branch  0 taken 2262 (fallthrough)
branch  1 taken 12445
     2262: 8074:			return i;
        -: 8075:
        -: 8076:		else
    12445: 8077:		++i;
        -: 8078:		}
        -: 8079:	}
        -: 8080:
        -: 8081:
        -: 8082:/* inittbl - initialize transition tables
        -: 8083: *
        -: 8084: * Initializes "firstfree" to be one beyond the end of the table.  Initializes
        -: 8085: * all "chk" entries to be zero.
        -: 8086: */
function inittbl called 543 returned 100% blocks executed 100%
      543: 8087:void inittbl()
        -: 8088:	{
        -: 8089:	register int i;
        -: 8090:
      543: 8091:	zero_out( (char *) chk, (size_t) (current_max_xpairs * sizeof( int )) );
call    0 returned 543
        -: 8092:
      543: 8093:	tblend = 0;
      543: 8094:	firstfree = tblend + 1;
      543: 8095:	numtemps = 0;
        -: 8096:
      543: 8097:	if ( usemecs )
branch  0 taken 215 (fallthrough)
branch  1 taken 328
        -: 8098:		{
        -: 8099:		/* Set up doubly-linked meta-equivalence classes; these
        -: 8100:		 * are sets of equivalence classes which all have identical
        -: 8101:		 * transitions out of TEMPLATES.
        -: 8102:		 */
        -: 8103:
      215: 8104:		tecbck[1] = NIL;
        -: 8105:
    22318: 8106:		for ( i = 2; i <= numecs; ++i )
branch  0 taken 22103
branch  1 taken 215 (fallthrough)
        -: 8107:			{
    22103: 8108:			tecbck[i] = i - 1;
    22103: 8109:			tecfwd[i - 1] = i;
        -: 8110:			}
        -: 8111:
      215: 8112:		tecfwd[numecs] = NIL;
        -: 8113:		}
      543: 8114:	}
        -: 8115:
        -: 8116:
        -: 8117:/* mkdeftbl - make the default, "jam" table entries */
        -: 8118:
function mkdeftbl called 428 returned 100% blocks executed 100%
      428: 8119:void mkdeftbl()
        -: 8120:	{
        -: 8121:	int i;
        -: 8122:
      428: 8123:	jamstate = lastdfa + 1;
        -: 8124:
      428: 8125:	++tblend; /* room for transition on end-of-buffer character */
        -: 8126:
      446: 8127:	while ( tblend + numecs >= current_max_xpairs )
branch  0 taken 18
branch  1 taken 428 (fallthrough)
       18: 8128:		expand_nxt_chk();
call    0 returned 18
        -: 8129:
        -: 8130:	/* Add in default end-of-buffer transition. */
      428: 8131:	nxt[tblend] = end_of_buffer_state;
      428: 8132:	chk[tblend] = jamstate;
        -: 8133:
    48234: 8134:	for ( i = 1; i <= numecs; ++i )
branch  0 taken 47806
branch  1 taken 428 (fallthrough)
        -: 8135:		{
    47806: 8136:		nxt[tblend + i] = 0;
    47806: 8137:		chk[tblend + i] = jamstate;
        -: 8138:		}
        -: 8139:
      428: 8140:	jambase = tblend;
        -: 8141:
      428: 8142:	base[jamstate] = jambase;
      428: 8143:	def[jamstate] = 0;
        -: 8144:
      428: 8145:	tblend += numecs;
      428: 8146:	++numtemps;
      428: 8147:	}
        -: 8148:
        -: 8149:
        -: 8150:/* mkentry - create base/def and nxt/chk entries for transition array
        -: 8151: *
        -: 8152: * synopsis
        -: 8153: *   int state[numchars + 1], numchars, statenum, deflink, totaltrans;
        -: 8154: *   mkentry( state, numchars, statenum, deflink, totaltrans );
        -: 8155: *
        -: 8156: * "state" is a transition array "numchars" characters in size, "statenum"
        -: 8157: * is the offset to be used into the base/def tables, and "deflink" is the
        -: 8158: * entry to put in the "def" table entry.  If "deflink" is equal to
        -: 8159: * "JAMSTATE", then no attempt will be made to fit zero entries of "state"
        -: 8160: * (i.e., jam entries) into the table.  It is assumed that by linking to
        -: 8161: * "JAMSTATE" they will be taken care of.  In any case, entries in "state"
        -: 8162: * marking transitions to "SAME_TRANS" are treated as though they will be
        -: 8163: * taken care of by whereever "deflink" points.  "totaltrans" is the total
        -: 8164: * number of transitions out of the state.  If it is below a certain threshold,
        -: 8165: * the tables are searched for an interior spot that will accommodate the
        -: 8166: * state array.
        -: 8167: */
        -: 8168:
function mkentry called 11463 returned 100% blocks executed 98%
    11463: 8169:void mkentry( state, numchars, statenum, deflink, totaltrans )
        -: 8170:register int *state;
        -: 8171:int numchars, statenum, deflink, totaltrans;
        -: 8172:	{
        -: 8173:	register int minec, maxec, i, baseaddr;
        -: 8174:	int tblbase, tbllast;
        -: 8175:
    11463: 8176:	if ( totaltrans == 0 )
branch  0 taken 2601 (fallthrough)
branch  1 taken 8862
        -: 8177:		{ /* there are no out-transitions */
     2601: 8178:		if ( deflink == JAMSTATE )
branch  0 taken 1943 (fallthrough)
branch  1 taken 658
     1943: 8179:			base[statenum] = JAMSTATE;
        -: 8180:		else
      658: 8181:			base[statenum] = 0;
        -: 8182:
     2601: 8183:		def[statenum] = deflink;
     2601: 8184:		return;
        -: 8185:		}
        -: 8186:
   296460: 8187:	for ( minec = 1; minec <= numchars; ++minec )
branch  0 taken 296460
branch  1 taken 0 (fallthrough)
        -: 8188:		{
   296460: 8189:		if ( state[minec] != SAME_TRANS )
branch  0 taken 231113 (fallthrough)
branch  1 taken 65347
   231113: 8190:			if ( state[minec] != 0 || deflink != JAMSTATE )
branch  0 taken 222251 (fallthrough)
branch  1 taken 8862
branch  2 taken 222251 (fallthrough)
branch  3 taken 0
        -: 8191:				break;
        -: 8192:		}
        -: 8193:
     8862: 8194:	if ( totaltrans == 1 )
branch  0 taken 5279 (fallthrough)
branch  1 taken 3583
        -: 8195:		{
        -: 8196:		/* There's only one out-transition.  Save it for later to fill
        -: 8197:		 * in holes in the tables.
        -: 8198:		 */
     5279: 8199:		stack1( statenum, minec, state[minec], deflink );
call    0 returned 5279
     5279: 8200:		return;
        -: 8201:		}
        -: 8202:
   257780: 8203:	for ( maxec = numchars; maxec > 0; --maxec )
branch  0 taken 257780
branch  1 taken 0 (fallthrough)
        -: 8204:		{
   257780: 8205:		if ( state[maxec] != SAME_TRANS )
branch  0 taken 206794 (fallthrough)
branch  1 taken 50986
   206794: 8206:			if ( state[maxec] != 0 || deflink != JAMSTATE )
branch  0 taken 203211 (fallthrough)
branch  1 taken 3583
branch  2 taken 203211 (fallthrough)
branch  3 taken 0
        -: 8207:				break;
        -: 8208:		}
        -: 8209:
        -: 8210:	/* Whether we try to fit the state table in the middle of the table
        -: 8211:	 * entries we have already generated, or if we just take the state
        -: 8212:	 * table at the end of the nxt/chk tables, we must make sure that we
        -: 8213:	 * have a valid base address (i.e., non-negative).  Note that
        -: 8214:	 * negative base addresses dangerous at run-time (because indexing
        -: 8215:	 * the nxt array with one and a low-valued character will access
        -: 8216:	 * memory before the start of the array.
        -: 8217:	 */
        -: 8218:
        -: 8219:	/* Find the first transition of state that we need to worry about. */
     3583: 8220:	if ( totaltrans * 100 <= numchars * INTERIOR_FIT_PERCENTAGE )
branch  0 taken 2778 (fallthrough)
branch  1 taken 805
        -: 8221:		{
        -: 8222:		/* Attempt to squeeze it into the middle of the tables. */
     2778: 8223:		baseaddr = firstfree;
        -: 8224:
    63885: 8225:		while ( baseaddr < minec )
branch  0 taken 61107
branch  1 taken 2778 (fallthrough)
        -: 8226:			{
        -: 8227:			/* Using baseaddr would result in a negative base
        -: 8228:			 * address below; find the next free slot.
        -: 8229:			 */
    93349: 8230:			for ( ++baseaddr; chk[baseaddr] != 0; ++baseaddr )
branch  0 taken 32242
branch  1 taken 61107 (fallthrough)
        -: 8231:				;
        -: 8232:			}
        -: 8233:
     2778: 8234:		while ( baseaddr + maxec - minec + 1 >= current_max_xpairs )
branch  0 taken 0
branch  1 taken 2778 (fallthrough)
    #####: 8235:			expand_nxt_chk();
call    0 never executed
        -: 8236:
 26584246: 8237:		for ( i = minec; i <= maxec; ++i )
branch  0 taken 26581468
branch  1 taken 2778
 26581468: 8238:			if ( state[i] != SAME_TRANS &&
branch  0 taken 4043339 (fallthrough)
branch  1 taken 22538129
  4043339: 8239:			     (state[i] != 0 || deflink != JAMSTATE) &&
branch  0 taken 263037 (fallthrough)
branch  1 taken 3780302
branch  2 taken 0 (fallthrough)
branch  3 taken 263037
  3780302: 8240:			     chk[baseaddr + i - minec] != 0 )
branch  0 taken 1502491 (fallthrough)
branch  1 taken 2277811
        -: 8241:				{ /* baseaddr unsuitable - find another */
  1502491: 8242:				for ( ++baseaddr;
  5211678: 8243:				      baseaddr < current_max_xpairs &&
branch  0 taken 5211678 (fallthrough)
branch  1 taken 0
  5211678: 8244:				      chk[baseaddr] != 0; ++baseaddr )
branch  0 taken 3709187
branch  1 taken 1502491 (fallthrough)
        -: 8245:					;
        -: 8246:
  1502494: 8247:				while ( baseaddr + maxec - minec + 1 >=
branch  0 taken 3
branch  1 taken 1502491 (fallthrough)
        -: 8248:					current_max_xpairs )
        3: 8249:					expand_nxt_chk();
call    0 returned 3
        -: 8250:
        -: 8251:				/* Reset the loop counter so we'll start all
        -: 8252:				 * over again next time it's incremented.
        -: 8253:				 */
        -: 8254:
  1502491: 8255:				i = minec - 1;
        -: 8256:				}
        -: 8257:		}
        -: 8258:
        -: 8259:	else
        -: 8260:		{
        -: 8261:		/* Ensure that the base address we eventually generate is
        -: 8262:		 * non-negative.
        -: 8263:		 */
      805: 8264:		baseaddr = MAX( tblend + 1, minec );
branch  0 taken 487 (fallthrough)
branch  1 taken 318
        -: 8265:		}
        -: 8266:
     3583: 8267:	tblbase = baseaddr - minec;
     3583: 8268:	tbllast = tblbase + maxec;
        -: 8269:
     3584: 8270:	while ( tbllast + 1 >= current_max_xpairs )
branch  0 taken 1
branch  1 taken 3583 (fallthrough)
        1: 8271:		expand_nxt_chk();
call    0 returned 1
        -: 8272:
     3583: 8273:	base[statenum] = tblbase;
     3583: 8274:	def[statenum] = deflink;
        -: 8275:
   186157: 8276:	for ( i = minec; i <= maxec; ++i )
branch  0 taken 182574
branch  1 taken 3583 (fallthrough)
   182574: 8277:		if ( state[i] != SAME_TRANS )
branch  0 taken 128963 (fallthrough)
branch  1 taken 53611
   128963: 8278:			if ( state[i] != 0 || deflink != JAMSTATE )
branch  0 taken 45484 (fallthrough)
branch  1 taken 83479
branch  2 taken 0 (fallthrough)
branch  3 taken 45484
        -: 8279:				{
    83479: 8280:				nxt[tblbase + i] = state[i];
    83479: 8281:				chk[tblbase + i] = statenum;
        -: 8282:				}
        -: 8283:
     3583: 8284:	if ( baseaddr == firstfree )
branch  0 taken 432 (fallthrough)
branch  1 taken 3151
        -: 8285:		/* Find next free slot in tables. */
     4076: 8286:		for ( ++firstfree; chk[firstfree] != 0; ++firstfree )
branch  0 taken 3644
branch  1 taken 432 (fallthrough)
        -: 8287:			;
        -: 8288:
     3583: 8289:	tblend = MAX( tblend, tbllast );
        -: 8290:	}
        -: 8291:
        -: 8292:
        -: 8293:/* mk1tbl - create table entries for a state (or state fragment) which
        -: 8294: *            has only one out-transition
        -: 8295: */
        -: 8296:
function mk1tbl called 5707 returned 100% blocks executed 80%
     5707: 8297:void mk1tbl( state, sym, onenxt, onedef )
        -: 8298:int state, sym, onenxt, onedef;
        -: 8299:	{
     5707: 8300:	if ( firstfree < sym )
branch  0 taken 272 (fallthrough)
branch  1 taken 5435
      272: 8301:		firstfree = sym;
        -: 8302:
    19679: 8303:	while ( chk[firstfree] != 0 )
branch  0 taken 13972
branch  1 taken 5707 (fallthrough)
    13972: 8304:		if ( ++firstfree >= current_max_xpairs )
branch  0 taken 0 (fallthrough)
branch  1 taken 13972
    #####: 8305:			expand_nxt_chk();
call    0 never executed
        -: 8306:
     5707: 8307:	base[state] = firstfree - sym;
     5707: 8308:	def[state] = onedef;
     5707: 8309:	chk[firstfree] = state;
     5707: 8310:	nxt[firstfree] = onenxt;
        -: 8311:
     5707: 8312:	if ( firstfree > tblend )
branch  0 taken 4126 (fallthrough)
branch  1 taken 1581
        -: 8313:		{
     4126: 8314:		tblend = firstfree++;
        -: 8315:
     4126: 8316:		if ( firstfree >= current_max_xpairs )
branch  0 taken 0 (fallthrough)
branch  1 taken 4126
    #####: 8317:			expand_nxt_chk();
call    0 never executed
        -: 8318:		}
     5707: 8319:	}
        -: 8320:
        -: 8321:
        -: 8322:/* mkprot - create new proto entry */
        -: 8323:
function mkprot called 981 returned 100% blocks executed 90%
      981: 8324:void mkprot( state, statenum, comstate )
        -: 8325:int state[], statenum, comstate;
        -: 8326:	{
        -: 8327:	int i, slot, tblbase;
        -: 8328:
      981: 8329:	if ( ++numprots >= MSP || numecs * numprots >= PROT_SAVE_SIZE )
branch  0 taken 981 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 981
        -: 8330:		{
        -: 8331:		/* Gotta make room for the new proto by dropping last entry in
        -: 8332:		 * the queue.
        -: 8333:		 */
    #####: 8334:		slot = lastprot;
    #####: 8335:		lastprot = protprev[lastprot];
    #####: 8336:		protnext[lastprot] = NIL;
        -: 8337:		}
        -: 8338:
        -: 8339:	else
      981: 8340:		slot = numprots;
        -: 8341:
      981: 8342:	protnext[slot] = firstprot;
        -: 8343:
      981: 8344:	if ( firstprot != NIL )
branch  0 taken 553 (fallthrough)
branch  1 taken 428
      553: 8345:		protprev[firstprot] = slot;
        -: 8346:
      981: 8347:	firstprot = slot;
      981: 8348:	prottbl[slot] = statenum;
      981: 8349:	protcomst[slot] = comstate;
        -: 8350:
        -: 8351:	/* Copy state into save area so it can be compared with rapidly. */
      981: 8352:	tblbase = numecs * (slot - 1);
        -: 8353:
    64566: 8354:	for ( i = 1; i <= numecs; ++i )
branch  0 taken 63585
branch  1 taken 981 (fallthrough)
    63585: 8355:		protsave[tblbase + i] = state[i];
      981: 8356:	}
        -: 8357:
        -: 8358:
        -: 8359:/* mktemplate - create a template entry based on a state, and connect the state
        -: 8360: *              to it
        -: 8361: */
        -: 8362:
function mktemplate called 625 returned 100% blocks executed 87%
      625: 8363:void mktemplate( state, statenum, comstate )
        -: 8364:int state[], statenum, comstate;
        -: 8365:	{
        -: 8366:	int i, numdiff, tmpbase, tmp[CSIZE + 1];
        -: 8367:	Char transset[CSIZE + 1];
        -: 8368:	int tsptr;
        -: 8369:
      625: 8370:	++numtemps;
        -: 8371:
      625: 8372:	tsptr = 0;
        -: 8373:
        -: 8374:	/* Calculate where we will temporarily store the transition table
        -: 8375:	 * of the template in the tnxt[] array.  The final transition table
        -: 8376:	 * gets created by cmptmps().
        -: 8377:	 */
        -: 8378:
      625: 8379:	tmpbase = numtemps * numecs;
        -: 8380:
      625: 8381:	if ( tmpbase + numecs >= current_max_template_xpairs )
branch  0 taken 0 (fallthrough)
branch  1 taken 625
        -: 8382:		{
    #####: 8383:		current_max_template_xpairs += MAX_TEMPLATE_XPAIRS_INCREMENT;
        -: 8384:
    #####: 8385:		++num_reallocs;
        -: 8386:
    #####: 8387:		tnxt = reallocate_integer_array( tnxt,
call    0 never executed
        -: 8388:			current_max_template_xpairs );
        -: 8389:		}
        -: 8390:
    58660: 8391:	for ( i = 1; i <= numecs; ++i )
branch  0 taken 58035
branch  1 taken 625 (fallthrough)
    58035: 8392:		if ( state[i] == 0 )
branch  0 taken 2357 (fallthrough)
branch  1 taken 55678
     2357: 8393:			tnxt[tmpbase + i] = 0;
        -: 8394:		else
        -: 8395:			{
    55678: 8396:			transset[tsptr++] = i;
    55678: 8397:			tnxt[tmpbase + i] = comstate;
        -: 8398:			}
        -: 8399:
      625: 8400:	if ( usemecs )
branch  0 taken 320 (fallthrough)
branch  1 taken 305
      320: 8401:		mkeccl( transset, tsptr, tecfwd, tecbck, numecs, 0 );
call    0 returned 320
        -: 8402:
      625: 8403:	mkprot( tnxt + tmpbase, -numtemps, comstate );
call    0 returned 625
        -: 8404:
        -: 8405:	/* We rely on the fact that mkprot adds things to the beginning
        -: 8406:	 * of the proto queue.
        -: 8407:	 */
        -: 8408:
      625: 8409:	numdiff = tbldiff( state, firstprot, tmp );
call    0 returned 625
      625: 8410:	mkentry( tmp, numecs, statenum, -numtemps, numdiff );
call    0 returned 625
      625: 8411:	}
        -: 8412:
        -: 8413:
        -: 8414:/* mv2front - move proto queue element to front of queue */
        -: 8415:
function mv2front called 3167 returned 100% blocks executed 100%
     3167: 8416:void mv2front( qelm )
        -: 8417:int qelm;
        -: 8418:	{
     3167: 8419:	if ( firstprot != qelm )
branch  0 taken 395 (fallthrough)
branch  1 taken 2772
        -: 8420:		{
      395: 8421:		if ( qelm == lastprot )
branch  0 taken 57 (fallthrough)
branch  1 taken 338
       57: 8422:			lastprot = protprev[lastprot];
        -: 8423:
      395: 8424:		protnext[protprev[qelm]] = protnext[qelm];
        -: 8425:
      395: 8426:		if ( protnext[qelm] != NIL )
branch  0 taken 338 (fallthrough)
branch  1 taken 57
      338: 8427:			protprev[protnext[qelm]] = protprev[qelm];
        -: 8428:
      395: 8429:		protprev[qelm] = NIL;
      395: 8430:		protnext[qelm] = firstprot;
      395: 8431:		protprev[firstprot] = qelm;
      395: 8432:		firstprot = qelm;
        -: 8433:		}
     3167: 8434:	}
        -: 8435:
        -: 8436:
        -: 8437:/* place_state - place a state into full speed transition table
        -: 8438: *
        -: 8439: * State is the statenum'th state.  It is indexed by equivalence class and
        -: 8440: * gives the number of the state to enter for a given equivalence class.
        -: 8441: * Transnum is the number of out-transitions for the state.
        -: 8442: */
        -: 8443:
function place_state called 2262 returned 100% blocks executed 100%
     2262: 8444:void place_state( state, statenum, transnum )
        -: 8445:int *state, statenum, transnum;
        -: 8446:	{
        -: 8447:	register int i;
        -: 8448:	register int *state_ptr;
     2262: 8449:	int position = find_table_space( state, transnum );
call    0 returned 2262
        -: 8450:
        -: 8451:	/* "base" is the table of start positions. */
     2262: 8452:	base[statenum] = position;
        -: 8453:
        -: 8454:	/* Put in action number marker; this non-zero number makes sure that
        -: 8455:	 * find_table_space() knows that this position in chk/nxt is taken
        -: 8456:	 * and should not be used for another accepting number in another
        -: 8457:	 * state.
        -: 8458:	 */
     2262: 8459:	chk[position - 1] = 1;
        -: 8460:
        -: 8461:	/* Put in end-of-buffer marker; this is for the same purposes as
        -: 8462:	 * above.
        -: 8463:	 */
     2262: 8464:	chk[position] = 1;
        -: 8465:
        -: 8466:	/* Place the state into chk and nxt. */
     2262: 8467:	state_ptr = &state[1];
        -: 8468:
   181878: 8469:	for ( i = 1; i <= numecs; ++i, ++state_ptr )
branch  0 taken 179616
branch  1 taken 2262 (fallthrough)
   179616: 8470:		if ( *state_ptr != 0 )
branch  0 taken 32723 (fallthrough)
branch  1 taken 146893
        -: 8471:			{
    32723: 8472:			chk[position + i] = i;
    32723: 8473:			nxt[position + i] = *state_ptr;
        -: 8474:			}
        -: 8475:
     2262: 8476:	if ( position + numecs > tblend )
branch  0 taken 2226 (fallthrough)
branch  1 taken 36
     2226: 8477:		tblend = position + numecs;
     2262: 8478:	}
        -: 8479:
        -: 8480:
        -: 8481:/* stack1 - save states with only one out-transition to be processed later
        -: 8482: *
        -: 8483: * If there's room for another state on the "one-transition" stack, the
        -: 8484: * state is pushed onto it, to be processed later by mk1tbl.  If there's
        -: 8485: * no room, we process the sucker right now.
        -: 8486: */
        -: 8487:
function stack1 called 5707 returned 100% blocks executed 75%
     5707: 8488:void stack1( statenum, sym, nextstate, deflink )
        -: 8489:int statenum, sym, nextstate, deflink;
        -: 8490:	{
     5707: 8491:	if ( onesp >= ONE_STACK_SIZE - 1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 5707
    #####: 8492:		mk1tbl( statenum, sym, nextstate, deflink );
call    0 never executed
        -: 8493:
        -: 8494:	else
        -: 8495:		{
     5707: 8496:		++onesp;
     5707: 8497:		onestate[onesp] = statenum;
     5707: 8498:		onesym[onesp] = sym;
     5707: 8499:		onenext[onesp] = nextstate;
     5707: 8500:		onedef[onesp] = deflink;
        -: 8501:		}
     5707: 8502:	}
        -: 8503:
        -: 8504:
        -: 8505:/* tbldiff - compute differences between two state tables
        -: 8506: *
        -: 8507: * "state" is the state array which is to be extracted from the pr'th
        -: 8508: * proto.  "pr" is both the number of the proto we are extracting from
        -: 8509: * and an index into the save area where we can find the proto's complete
        -: 8510: * state table.  Each entry in "state" which differs from the corresponding
        -: 8511: * entry of "pr" will appear in "ext".
        -: 8512: *
        -: 8513: * Entries which are the same in both "state" and "pr" will be marked
        -: 8514: * as transitions to "SAME_TRANS" in "ext".  The total number of differences
        -: 8515: * between "state" and "pr" is returned as function value.  Note that this
        -: 8516: * number is "numecs" minus the number of "SAME_TRANS" entries in "ext".
        -: 8517: */
        -: 8518:
function tbldiff called 16278 returned 100% blocks executed 100%
    16278: 8519:int tbldiff( state, pr, ext )
        -: 8520:int state[], pr, ext[];
        -: 8521:	{
    16278: 8522:	register int i, *sp = state, *ep = ext, *protp;
    16278: 8523:	register int numdiff = 0;
        -: 8524:
    16278: 8525:	protp = &protsave[numecs * (pr - 1)];
        -: 8526:
   910203: 8527:	for ( i = numecs; i > 0; --i )
branch  0 taken 893925
branch  1 taken 16278 (fallthrough)
        -: 8528:		{
   893925: 8529:		if ( *++protp == *++sp )
branch  0 taken 460400 (fallthrough)
branch  1 taken 433525
   460400: 8530:			*++ep = SAME_TRANS;
        -: 8531:		else
        -: 8532:			{
   433525: 8533:			*++ep = *sp;
   433525: 8534:			++numdiff;
        -: 8535:			}
        -: 8536:		}
        -: 8537:
    16278: 8538:	return numdiff;
        -: 8539:	}
        -: 8540:/* yylex - scanner front-end for flex */
        -: 8541:
        -: 8542:/*-
        -: 8543: * Copyright (c) 1990 The Regents of the University of California.
        -: 8544: * All rights reserved.
        -: 8545: *
        -: 8546: * This code is derived from software contributed to Berkeley by
        -: 8547: * Vern Paxson.
        -: 8548: * 
        -: 8549: * The United States Government has rights in this work pursuant
        -: 8550: * to contract no. DE-AC03-76SF00098 between the United States
        -: 8551: * Department of Energy and the University of California.
        -: 8552: *
        -: 8553: * Redistribution and use in source and binary forms are permitted provided
        -: 8554: * that: (1) source distributions retain this entire copyright notice and
        -: 8555: * comment, and (2) distributions including binaries display the following
        -: 8556: * acknowledgement:  ``This product includes software developed by the
        -: 8557: * University of California, Berkeley and its contributors'' in the
        -: 8558: * documentation or other materials provided with the distribution and in
        -: 8559: * all advertising materials mentioning features or use of this software.
        -: 8560: * Neither the name of the University nor the names of its contributors may
        -: 8561: * be used to endorse or promote products derived from this software without
        -: 8562: * specific prior written permission.
        -: 8563: * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
        -: 8564: * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
        -: 8565: * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
        -: 8566: */
        -: 8567:
        -: 8568:/* $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $ */
        -: 8569:
        -: 8570:
        -: 8571:/* yylex - scan for a regular expression token */
        -: 8572:
function yylex called 31314 returned 100% blocks executed 84%
    31314: 8573:int yylex()
        -: 8574:	{
        -: 8575:	int toktype;
        -: 8576:	static int beglin = false;
        -: 8577:	extern char *yytext;
        -: 8578:
    31314: 8579:	if ( eofseen )
branch  0 taken 0 (fallthrough)
branch  1 taken 31314
    #####: 8580:		toktype = EOF;
        -: 8581:	else
    31314: 8582:		toktype = flexscan();
call    0 returned 31314
        -: 8583:
    31314: 8584:	if ( toktype == EOF || toktype == 0 )
branch  0 taken 31314 (fallthrough)
branch  1 taken 0
branch  2 taken 552 (fallthrough)
branch  3 taken 30762
        -: 8585:		{
      552: 8586:		eofseen = 1;
        -: 8587:
      552: 8588:		if ( sectnum == 1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 552
        -: 8589:			{
    #####: 8590:			synerr( _( "premature EOF" ) );
call    0 never executed
    #####: 8591:			sectnum = 2;
    #####: 8592:			toktype = SECTEND;
        -: 8593:			}
        -: 8594:
        -: 8595:		else
      552: 8596:			toktype = 0;
        -: 8597:		}
        -: 8598:
    31314: 8599:	if ( trace )
branch  0 taken 4753 (fallthrough)
branch  1 taken 26561
        -: 8600:		{
     4753: 8601:		if ( beglin )
branch  0 taken 753 (fallthrough)
branch  1 taken 4000
        -: 8602:			{
      753: 8603:			fprintf( err, "%d\t", num_rules + 1 );
call    0 returned 753
      753: 8604:			beglin = 0;
        -: 8605:			}
        -: 8606:
     4753: 8607:		switch ( toktype )
branch  0 taken 866
branch  1 taken 735
branch  2 taken 1
branch  3 taken 10
branch  4 taken 19
branch  5 taken 18
branch  6 taken 3056
branch  7 taken 10
branch  8 taken 18
branch  9 taken 3
branch 10 taken 0
branch 11 taken 0
branch 12 taken 17
branch 13 taken 0
        -: 8608:			{
      866: 8609:			case '<':
        -: 8610:			case '>':
        -: 8611:			case '^':
        -: 8612:			case '$':
        -: 8613:			case '"':
        -: 8614:			case '[':
        -: 8615:			case ']':
        -: 8616:			case '{':
        -: 8617:			case '}':
        -: 8618:			case '|':
        -: 8619:			case '(':
        -: 8620:			case ')':
        -: 8621:			case '-':
        -: 8622:			case '/':
        -: 8623:			case '\\':
        -: 8624:			case '?':
        -: 8625:			case '.':
        -: 8626:			case '*':
        -: 8627:			case '+':
        -: 8628:			case ',':
      866: 8629:				(void) putc( toktype, err );
call    0 returned 866
      866: 8630:				break;
        -: 8631:
      735: 8632:			case '\n':
      735: 8633:				(void) putc( '\n', err );
call    0 returned 735
        -: 8634:
      735: 8635:				if ( sectnum == 2 )
branch  0 taken 735 (fallthrough)
branch  1 taken 0
      735: 8636:				beglin = 1;
        -: 8637:
      735: 8638:				break;
        -: 8639:
        1: 8640:			case SCDECL:
        1: 8641:				fputs( "%s", err );
call    0 returned 1
        1: 8642:				break;
        -: 8643:
       10: 8644:			case XSCDECL:
       10: 8645:				fputs( "%x", err );
call    0 returned 10
       10: 8646:				break;
        -: 8647:
       19: 8648:			case SECTEND:
       19: 8649:				fputs( "%%\n", err );
call    0 returned 19
        -: 8650:
        -: 8651:				/* We set beglin to be true so we'll start
        -: 8652:				 * writing out numbers as we echo rules.
        -: 8653:				 * flexscan() has already assigned sectnum.
        -: 8654:				 */
       19: 8655:				if ( sectnum == 2 )
branch  0 taken 19 (fallthrough)
branch  1 taken 0
       19: 8656:					beglin = 1;
        -: 8657:
       19: 8658:				break;
        -: 8659:
       18: 8660:			case NAME:
       18: 8661:				fprintf( err, "'%s'", nmstr );
call    0 returned 18
       18: 8662:				break;
        -: 8663:
     3056: 8664:			case CHAR:
     3056: 8665:				switch ( yylval )
branch  0 taken 60
branch  1 taken 2996
        -: 8666:					{
       60: 8667:					case '<':
        -: 8668:					case '>':
        -: 8669:					case '^':
        -: 8670:					case '$':
        -: 8671:					case '"':
        -: 8672:					case '[':
        -: 8673:					case ']':
        -: 8674:					case '{':
        -: 8675:					case '}':
        -: 8676:					case '|':
        -: 8677:					case '(':
        -: 8678:					case ')':
        -: 8679:					case '-':
        -: 8680:					case '/':
        -: 8681:					case '\\':
        -: 8682:					case '?':
        -: 8683:					case '.':
        -: 8684:					case '*':
        -: 8685:					case '+':
        -: 8686:					case ',':
       60: 8687:						fprintf( err, "\\%c",
call    0 returned 60
        -: 8688:							yylval );
       60: 8689:						break;
        -: 8690:
     2996: 8691:					default:
     2996: 8692:						if ( ! isascii( yylval ) ||
branch  0 taken 2990 (fallthrough)
branch  1 taken 6
     2990: 8693:						     ! isprint( yylval ) )
branch  0 taken 33 (fallthrough)
branch  1 taken 2957
       39: 8694:							fprintf( err,
call    0 returned 39
        -: 8695:								"\\%.3o",
        -: 8696:							(unsigned int) yylval );
        -: 8697:						else
     2957: 8698:							(void) putc( yylval,
call    0 returned 2957
        -: 8699:								err );
     2996: 8700:					break;
        -: 8701:					}
        -: 8702:
     3056: 8703:				break;
        -: 8704:
       10: 8705:			case NUMBER:
       10: 8706:				fprintf( err, "%d", yylval );
call    0 returned 10
       10: 8707:				break;
        -: 8708:
       18: 8709:			case PREVCCL:
       18: 8710:				fprintf( err, "[%d]", yylval );
call    0 returned 18
       18: 8711:				break;
        -: 8712:
        3: 8713:			case EOF_OP:
        3: 8714:				fprintf( err, "<<EOF>>" );
call    0 returned 3
        3: 8715:				break;
        -: 8716:
    #####: 8717:			case OPTION_OP:
    #####: 8718:				fprintf( err, "%s ", yytext );
call    0 never executed
    #####: 8719:				break;
        -: 8720:
    #####: 8721:			case OPT_OUTFILE:
        -: 8722:			case OPT_PREFIX:
        -: 8723:			case CCE_ALNUM:
        -: 8724:			case CCE_ALPHA:
        -: 8725:			case CCE_BLANK:
        -: 8726:			case CCE_CNTRL:
        -: 8727:			case CCE_DIGIT:
        -: 8728:			case CCE_GRAPH:
        -: 8729:			case CCE_LOWER:
        -: 8730:			case CCE_PRINT:
        -: 8731:			case CCE_PUNCT:
        -: 8732:			case CCE_SPACE:
        -: 8733:			case CCE_UPPER:
        -: 8734:			case CCE_XDIGIT:
    #####: 8735:				fprintf( err, "%s", yytext );
call    0 never executed
    #####: 8736:				break;
        -: 8737:
       17: 8738:			case 0:
       17: 8739:				fprintf( err, _( "End Marker\n" ) );
call    0 returned 17
       17: 8740:				break;
        -: 8741:
    #####: 8742:			default:
    #####: 8743:				fprintf( err,
call    0 never executed
        -: 8744:				_( "*Something Weird* - tok: %d val: %d\n" ),
        -: 8745:					toktype, yylval );
    #####: 8746:				break;
        -: 8747:			}
        -: 8748:		}
        -: 8749:
    31314: 8750:	return toktype;
        -: 8751:	}
        -: 8752:
        -: 8753:/*  A Bison parser, made from ./parse.y
        -: 8754:    by GNU Bison version 1.28  */
        -: 8755:
        -: 8756:#define YYBISON 1  /* Identify Bison output.  */
        -: 8757:
        -: 8758:#define	CHAR	257
        -: 8759:#define	NUMBER	258
        -: 8760:#define	SECTEND	259
        -: 8761:#define	SCDECL	260
        -: 8762:#define	XSCDECL	261
        -: 8763:#define	NAME	262
        -: 8764:#define	PREVCCL	263
        -: 8765:#define	EOF_OP	264
        -: 8766:#define	OPTION_OP	265
        -: 8767:#define	OPT_OUTFILE	266
        -: 8768:#define	OPT_PREFIX	267
        -: 8769:#define	OPT_YYCLASS	268
        -: 8770:#define	CCE_ALNUM	269
        -: 8771:#define	CCE_ALPHA	270
        -: 8772:#define	CCE_BLANK	271
        -: 8773:#define	CCE_CNTRL	272
        -: 8774:#define	CCE_DIGIT	273
        -: 8775:#define	CCE_GRAPH	274
        -: 8776:#define	CCE_LOWER	275
        -: 8777:#define	CCE_PRINT	276
        -: 8778:#define	CCE_PUNCT	277
        -: 8779:#define	CCE_SPACE	278
        -: 8780:#define	CCE_UPPER	279
        -: 8781:#define	CCE_XDIGIT	280
        -: 8782:
        -: 8783:
        -: 8784:/*-
        -: 8785: * Copyright (c) 1990 The Regents of the University of California.
        -: 8786: * All rights reserved.
        -: 8787: *
        -: 8788: * This code is derived from software contributed to Berkeley by
        -: 8789: * Vern Paxson.
        -: 8790: * 
        -: 8791: * The United States Government has rights in this work pursuant
        -: 8792: * to contract no. DE-AC03-76SF00098 between the United States
        -: 8793: * Department of Energy and the University of California.
        -: 8794: *
        -: 8795: * Redistribution and use in source and binary forms are permitted provided
        -: 8796: * that: (1) source distributions retain this entire copyright notice and
        -: 8797: * comment, and (2) distributions including binaries display the following
        -: 8798: * acknowledgement:  ``This product includes software developed by the
        -: 8799: * University of California, Berkeley and its contributors'' in the
        -: 8800: * documentation or other materials provided with the distribution and in
        -: 8801: * all advertising materials mentioning features or use of this software.
        -: 8802: * Neither the name of the University nor the names of its contributors may
        -: 8803: * be used to endorse or promote products derived from this software without
        -: 8804: * specific prior written permission.
        -: 8805: * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
        -: 8806: * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
        -: 8807: * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
        -: 8808: */
        -: 8809:
        -: 8810:/* $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $ */
        -: 8811:
        -: 8812:
        -: 8813:/* Some versions of bison are broken in that they use alloca() but don't
        -: 8814: * declare it properly.  The following is the patented (just kidding!)
        -: 8815: * #ifdef chud to fix the problem, courtesy of Francois Pinard.
        -: 8816: */
        -: 8817:#ifdef YYBISON
        -: 8818:/* AIX requires this to be the first thing in the file.  What a piece.  */
        -: 8819:# ifdef _AIX
        -: 8820: #pragma alloca
        -: 8821:# endif
        -: 8822:#endif
        -: 8823:
        -: 8824:
        -: 8825:/* The remainder of the alloca() cruft has to come after including flexdef.h,
        -: 8826: * so HAVE_ALLOCA_H is (possibly) defined.
        -: 8827: */
        -: 8828:#ifdef YYBISON
        -: 8829:# ifdef __GNUC__
        -: 8830:#  ifndef alloca
        -: 8831:#   define alloca __builtin_alloca
        -: 8832:#  endif
        -: 8833:# else
        -: 8834:#  if HAVE_ALLOCA_H
        -: 8835:#   include <alloca.h>
        -: 8836:#  else
        -: 8837:#   ifdef __hpux
        -: 8838:void *alloca ();
        -: 8839:#   else
        -: 8840:#    ifdef __TURBOC__
        -: 8841:#     include <malloc.h>
        -: 8842:#    else
        -: 8843:char *alloca ();
        -: 8844:#    endif
        -: 8845:#   endif
        -: 8846:#  endif
        -: 8847:# endif
        -: 8848:#endif
        -: 8849:
        -: 8850:/* Bletch, ^^^^ that was ugly! */
        -: 8851:
        -: 8852:
        -: 8853:int pat, scnum, eps, headcnt, trailcnt, anyccl, lastchar, i, rulelen;
        -: 8854:int trlcontxt, xcluflg, currccl, cclsorted, varlength, variable_trail_rule;
        -: 8855:
        -: 8856:int *scon_stk;
        -: 8857:int scon_stk_ptr;
        -: 8858:
        -: 8859:static int madeany = false;  /* whether we've made the '.' character class */
        -: 8860:int previous_continued_action;	/* whether the previous rule's action was '|' */
        -: 8861:
        -: 8862:/* Expand a POSIX character class expression. */
        -: 8863:#define CCL_EXPR(func) \
        -: 8864:	{ \
        -: 8865:	int c; \
        -: 8866:	for ( c = 0; c < csize; ++c ) \
        -: 8867:		if ( isascii(c) && func(c) ) \
        -: 8868:			ccladd( currccl, c ); \
        -: 8869:	}
        -: 8870:
        -: 8871:/* While POSIX defines isblank(), it's not ANSI C. */
        -: 8872:#define IS_BLANK(c) ((c) == ' ' || (c) == '\t')
        -: 8873:
        -: 8874:/* On some over-ambitious machines, such as DEC Alpha's, the default
        -: 8875: * token type is "long" instead of "int"; this leads to problems with
        -: 8876: * declaring yylval in flexdef.h.  But so far, all the yacc's I've seen
        -: 8877: * wrap their definitions of YYSTYPE with "#ifndef YYSTYPE"'s, so the
        -: 8878: * following should ensure that the default token type is "int".
        -: 8879: */
        -: 8880:#define YYSTYPE int
        -: 8881:
        -: 8882:#ifndef YYSTYPE
        -: 8883:#define YYSTYPE int
        -: 8884:#endif
        -: 8885:#include <stdio.h>
        -: 8886:
        -: 8887:#ifndef __cplusplus
        -: 8888:#ifndef __STDC__
        -: 8889:#define const
        -: 8890:#endif
        -: 8891:#endif
        -: 8892:
        -: 8893:
        -: 8894:
        -: 8895:#define	YYFINAL		107
        -: 8896:#define	YYFLAG		-32768
        -: 8897:#define	YYNTBASE	48
        -: 8898:
        -: 8899:#define YYTRANSLATE(x) ((unsigned)(x) <= 280 ? yytranslate[x] : 73)
        -: 8900:
        -: 8901:static const char yytranslate[] = {     0,
        -: 8902:     2,     2,     2,     2,     2,     2,     2,     2,     2,    28,
        -: 8903:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8904:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8905:     2,     2,     2,    42,     2,    36,     2,     2,     2,    43,
        -: 8906:    44,    34,    39,    35,    47,    41,    38,     2,     2,     2,
        -: 8907:     2,     2,     2,     2,     2,     2,     2,     2,     2,    32,
        -: 8908:    27,    33,    40,     2,     2,     2,     2,     2,     2,     2,
        -: 8909:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8910:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8911:    45,     2,    46,    31,     2,     2,     2,     2,     2,     2,
        -: 8912:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8913:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8914:     2,     2,    29,    37,    30,     2,     2,     2,     2,     2,
        -: 8915:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8916:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8917:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8918:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8919:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8920:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8921:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8922:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8923:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8924:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8925:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8926:     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -: 8927:     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
        -: 8928:     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
        -: 8929:    17,    18,    19,    20,    21,    22,    23,    24,    25,    26
        -: 8930:};
        -: 8931:
        -: 8932:#if YYDEBUG != 0
        -: 8933:static const short yyprhs[] = {     0,
        -: 8934:     0,     6,     7,    11,    14,    15,    17,    19,    21,    23,
        -: 8935:    26,    28,    30,    33,    36,    37,    41,    45,    49,    55,
        -: 8936:    61,    62,    63,    66,    68,    70,    72,    73,    78,    82,
        -: 8937:    83,    87,    89,    91,    93,    96,   100,   103,   105,   109,
        -: 8938:   111,   114,   117,   119,   122,   125,   128,   135,   141,   146,
        -: 8939:   148,   150,   152,   156,   160,   162,   166,   171,   176,   179,
        -: 8940:   182,   183,   185,   187,   189,   191,   193,   195,   197,   199,
        -: 8941:   201,   203,   205,   207,   210
        -: 8942:};
        -: 8943:
        -: 8944:static const short yyrhs[] = {    49,
        -: 8945:    50,    51,    57,    58,     0,     0,    50,    52,    53,     0,
        -: 8946:    50,    54,     0,     0,     1,     0,     5,     0,     6,     0,
        -: 8947:     7,     0,    53,     8,     0,     8,     0,     1,     0,    11,
        -: 8948:    55,     0,    55,    56,     0,     0,    12,    27,     8,     0,
        -: 8949:    13,    27,     8,     0,    14,    27,     8,     0,    57,    61,
        -: 8950:    58,    59,    28,     0,    57,    61,    29,    57,    30,     0,
        -: 8951:     0,     0,    31,    64,     0,    64,     0,    10,     0,     1,
        -: 8952:     0,     0,    32,    60,    62,    33,     0,    32,    34,    33,
        -: 8953:     0,     0,    62,    35,    63,     0,    63,     0,     1,     0,
        -: 8954:     8,     0,    66,    65,     0,    66,    65,    36,     0,    65,
        -: 8955:    36,     0,    65,     0,    65,    37,    67,     0,    67,     0,
        -: 8956:    65,    38,     0,    67,    68,     0,    68,     0,    68,    34,
        -: 8957:     0,    68,    39,     0,    68,    40,     0,    68,    29,     4,
        -: 8958:    35,     4,    30,     0,    68,    29,     4,    35,    30,     0,
        -: 8959:    68,    29,     4,    30,     0,    41,     0,    69,     0,     9,
        -: 8960:     0,    42,    72,    42,     0,    43,    65,    44,     0,     3,
        -: 8961:     0,    45,    70,    46,     0,    45,    31,    70,    46,     0,
        -: 8962:    70,     3,    47,     3,     0,    70,     3,     0,    70,    71,
        -: 8963:     0,     0,    15,     0,    16,     0,    17,     0,    18,     0,
        -: 8964:    19,     0,    20,     0,    21,     0,    22,     0,    23,     0,
        -: 8965:    24,     0,    25,     0,    26,     0,    72,     3,     0,     0
        -: 8966:};
        -: 8967:
        -: 8968:#endif
        -: 8969:
        -: 8970:#if YYDEBUG != 0
        -: 8971:static const short yyrline[] = { 0,
        -: 8972:   112,   141,   149,   150,   151,   152,   156,   164,   167,   171,
        -: 8973:   174,   177,   181,   184,   185,   188,   193,   195,   199,   201,
        -: 8974:   203,   206,   219,   255,   279,   302,   306,   310,   313,   330,
        -: 8975:   334,   336,   338,   342,   365,   420,   423,   466,   484,   490,
        -: 8976:   495,   522,   530,   534,   541,   547,   553,   581,   595,   614,
        -: 8977:   636,   654,   661,   664,   667,   678,   681,   688,   716,   727,
        -: 8978:   734,   742,   743,   744,   745,   746,   747,   748,   749,   750,
        -: 8979:   751,   752,   758,   761,   771
        -: 8980:};
        -: 8981:#endif
        -: 8982:
        -: 8983:
        -: 8984:#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
        -: 8985:
        -: 8986:static const char * const yytname[] = {   "$","error","$undefined.","CHAR","NUMBER",
        -: 8987:"SECTEND","SCDECL","XSCDECL","NAME","PREVCCL","EOF_OP","OPTION_OP","OPT_OUTFILE",
        -: 8988:"OPT_PREFIX","OPT_YYCLASS","CCE_ALNUM","CCE_ALPHA","CCE_BLANK","CCE_CNTRL","CCE_DIGIT",
        -: 8989:"CCE_GRAPH","CCE_LOWER","CCE_PRINT","CCE_PUNCT","CCE_SPACE","CCE_UPPER","CCE_XDIGIT",
        -: 8990:"'='","'\\n'","'{'","'}'","'^'","'<'","'>'","'*'","','","'$'","'|'","'/'","'+'",
        -: 8991:"'?'","'.'","'\\\"'","'('","')'","'['","']'","'-'","goal","initlex","sect1",
        -: 8992:"sect1end","startconddecl","namelist1","options","optionlist","option","sect2",
        -: 8993:"initforrule","flexrule","scon_stk_ptr","scon","namelist2","sconname","rule",
        -: 8994:"re","re2","series","singleton","fullccl","ccl","ccl_expr","string", NULL
        -: 8995:};
        -: 8996:#endif
        -: 8997:
        -: 8998:static const short yyr1[] = {     0,
        -: 8999:    48,    49,    50,    50,    50,    50,    51,    52,    52,    53,
        -: 9000:    53,    53,    54,    55,    55,    56,    56,    56,    57,    57,
        -: 9001:    57,    58,    59,    59,    59,    59,    60,    61,    61,    61,
        -: 9002:    62,    62,    62,    63,    64,    64,    64,    64,    65,    65,
        -: 9003:    66,    67,    67,    68,    68,    68,    68,    68,    68,    68,
        -: 9004:    68,    68,    68,    68,    68,    69,    69,    70,    70,    70,
        -: 9005:    70,    71,    71,    71,    71,    71,    71,    71,    71,    71,
        -: 9006:    71,    71,    71,    72,    72
        -: 9007:};
        -: 9008:
        -: 9009:static const short yyr2[] = {     0,
        -: 9010:     5,     0,     3,     2,     0,     1,     1,     1,     1,     2,
        -: 9011:     1,     1,     2,     2,     0,     3,     3,     3,     5,     5,
        -: 9012:     0,     0,     2,     1,     1,     1,     0,     4,     3,     0,
        -: 9013:     3,     1,     1,     1,     2,     3,     2,     1,     3,     1,
        -: 9014:     2,     2,     1,     2,     2,     2,     6,     5,     4,     1,
        -: 9015:     1,     1,     3,     3,     1,     3,     4,     4,     2,     2,
        -: 9016:     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
        -: 9017:     1,     1,     1,     2,     0
        -: 9018:};
        -: 9019:
        -: 9020:static const short yydefact[] = {     2,
        -: 9021:     0,     6,     0,     7,     8,     9,    15,    21,     0,     4,
        -: 9022:    13,    30,    12,    11,     3,     0,     0,     0,    14,    27,
        -: 9023:     1,    22,    10,     0,     0,     0,     0,     0,    21,     0,
        -: 9024:    16,    17,    18,    29,    33,    34,     0,    32,    30,    26,
        -: 9025:    55,    52,    25,     0,    50,    75,     0,    61,     0,    24,
        -: 9026:    38,     0,    40,    43,    51,    28,     0,    20,    23,     0,
        -: 9027:     0,    61,     0,    19,    37,     0,    41,    35,    42,     0,
        -: 9028:    44,    45,    46,    31,    74,    53,    54,     0,    59,    62,
        -: 9029:    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
        -: 9030:    73,    56,    60,    39,    36,     0,    57,     0,    49,     0,
        -: 9031:    58,     0,    48,    47,     0,     0,     0
        -: 9032:};
        -: 9033:
        -: 9034:static const short yydefgoto[] = {   105,
        -: 9035:     1,     3,     8,     9,    15,    10,    11,    19,    12,    21,
        -: 9036:    49,    28,    22,    37,    38,    50,    51,    52,    53,    54,
        -: 9037:    55,    63,    93,    60
        -: 9038:};
        -: 9039:
        -: 9040:static const short yypact[] = {-32768,
        -: 9041:    78,-32768,    81,-32768,-32768,-32768,-32768,-32768,     6,-32768,
        -: 9042:    -2,     5,-32768,-32768,    -7,   -14,     1,     9,-32768,    28,
        -: 9043:-32768,    14,-32768,    55,    65,    74,    57,    30,-32768,    -1,
        -: 9044:-32768,-32768,-32768,-32768,-32768,-32768,    58,-32768,    44,-32768,
        -: 9045:-32768,-32768,-32768,    24,-32768,-32768,    24,    63,    69,-32768,
        -: 9046:    23,    24,    24,    41,-32768,-32768,    90,-32768,-32768,    26,
        -: 9047:    27,-32768,     0,-32768,-32768,    24,-32768,    59,    41,    95,
        -: 9048:-32768,-32768,-32768,-32768,-32768,-32768,-32768,    32,    53,-32768,
        -: 9049:-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
        -: 9050:-32768,-32768,-32768,    24,-32768,     4,-32768,    98,-32768,     2,
        -: 9051:-32768,    72,-32768,-32768,   103,   104,-32768
        -: 9052:};
        -: 9053:
        -: 9054:static const short yypgoto[] = {-32768,
        -: 9055:-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    76,    84,
        -: 9056:-32768,-32768,-32768,-32768,    50,    64,    25,-32768,    43,   -49,
        -: 9057:-32768,    48,-32768,-32768
        -: 9058:};
        -: 9059:
        -: 9060:
        -: 9061:#define	YYLAST		110
        -: 9062:
        -: 9063:
        -: 9064:static const short yytable[] = {    40,
        -: 9065:    23,    41,    79,    69,   -22,   102,    13,    42,    43,    16,
        -: 9066:    17,    18,    24,    14,    80,    81,    82,    83,    84,    85,
        -: 9067:    86,    87,    88,    89,    90,    91,    41,    25,    75,    44,
        -: 9068:    35,   103,    42,    99,    79,    26,    20,    36,   100,    45,
        -: 9069:    46,    47,    29,    48,    69,    92,    80,    81,    82,    83,
        -: 9070:    84,    85,    86,    87,    88,    89,    90,    91,    65,    66,
        -: 9071:    67,    27,    31,    66,    45,    46,    47,    76,    48,    70,
        -: 9072:    77,    61,    32,    58,    71,    20,    68,    97,     2,    72,
        -: 9073:    73,    33,    -5,    -5,    -5,     4,     5,     6,    -5,    34,
        -: 9074:    56,     7,    57,    62,    95,    66,    64,    36,    96,    98,
        -: 9075:   101,   104,   106,   107,    39,    30,    74,    59,    94,    78
        -: 9076:};
        -: 9077:
        -: 9078:static const short yycheck[] = {     1,
        -: 9079:     8,     3,     3,    53,     0,     4,     1,     9,    10,    12,
        -: 9080:    13,    14,    27,     8,    15,    16,    17,    18,    19,    20,
        -: 9081:    21,    22,    23,    24,    25,    26,     3,    27,     3,    31,
        -: 9082:     1,    30,     9,    30,     3,    27,    32,     8,    35,    41,
        -: 9083:    42,    43,    29,    45,    94,    46,    15,    16,    17,    18,
        -: 9084:    19,    20,    21,    22,    23,    24,    25,    26,    36,    37,
        -: 9085:    38,    34,     8,    37,    41,    42,    43,    42,    45,    29,
        -: 9086:    44,    47,     8,    30,    34,    32,    52,    46,     1,    39,
        -: 9087:    40,     8,     5,     6,     7,     5,     6,     7,    11,    33,
        -: 9088:    33,    11,    35,    31,    36,    37,    28,     8,     4,    47,
        -: 9089:     3,    30,     0,     0,    29,    22,    57,    44,    66,    62
        -: 9090:};
        -: 9091:/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
        -: 9092:/* This file comes from bison-1.28.  */
        -: 9093:
        -: 9094:/* Skeleton output parser for bison,
        -: 9095:   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.
        -: 9096:
        -: 9097:   This program is free software; you can redistribute it and/or modify
        -: 9098:   it under the terms of the GNU General Public License as published by
        -: 9099:   the Free Software Foundation; either version 2, or (at your option)
        -: 9100:   any later version.
        -: 9101:
        -: 9102:   This program is distributed in the hope that it will be useful,
        -: 9103:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 9104:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 9105:   GNU General Public License for more details.
        -: 9106:
        -: 9107:   You should have received a copy of the GNU General Public License
        -: 9108:   along with this program; if not, write to the Free Software
        -: 9109:   Foundation, Inc., 59 Temple Place - Suite 330,
        -: 9110:   Boston, MA 02111-1307, USA.  */
        -: 9111:
        -: 9112:/* As a special exception, when this file is copied by Bison into a
        -: 9113:   Bison output file, you may use that output file without restriction.
        -: 9114:   This special exception was added by the Free Software Foundation
        -: 9115:   in version 1.24 of Bison.  */
        -: 9116:
        -: 9117:/* This is the parser code that is written into each bison parser
        -: 9118:  when the %semantic_parser declaration is not specified in the grammar.
        -: 9119:  It was written by Richard Stallman by simplifying the hairy parser
        -: 9120:  used when %semantic_parser is specified.  */
        -: 9121:
        -: 9122:#ifndef YYSTACK_USE_ALLOCA
        -: 9123:#ifdef alloca
        -: 9124:#define YYSTACK_USE_ALLOCA
        -: 9125:#else /* alloca not defined */
        -: 9126:#ifdef __GNUC__
        -: 9127:#define YYSTACK_USE_ALLOCA
        -: 9128:#define alloca __builtin_alloca
        -: 9129:#else /* not GNU C.  */
        -: 9130:#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
        -: 9131:#define YYSTACK_USE_ALLOCA
        -: 9132:#include <alloca.h>
        -: 9133:#else /* not sparc */
        -: 9134:/* We think this test detects Watcom and Microsoft C.  */
        -: 9135:/* This used to test MSDOS, but that is a bad idea
        -: 9136:   since that symbol is in the user namespace.  */
        -: 9137:#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
        -: 9138:#if 0 /* No need for malloc.h, which pollutes the namespace;
        -: 9139:	 instead, just don't use alloca.  */
        -: 9140:#include <malloc.h>
        -: 9141:#endif
        -: 9142:#else /* not MSDOS, or __TURBOC__ */
        -: 9143:#if defined(_AIX)
        -: 9144:/* I don't know what this was needed for, but it pollutes the namespace.
        -: 9145:   So I turned it off.   rms, 2 May 1997.  */
        -: 9146:/* #include <malloc.h>  */
        -: 9147: #pragma alloca
        -: 9148:#define YYSTACK_USE_ALLOCA
        -: 9149:#else /* not MSDOS, or __TURBOC__, or _AIX */
        -: 9150:#if 0
        -: 9151:#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
        -: 9152:		 and on HPUX 10.  Eventually we can turn this on.  */
        -: 9153:#define YYSTACK_USE_ALLOCA
        -: 9154:#define alloca __builtin_alloca
        -: 9155:#endif /* __hpux */
        -: 9156:#endif
        -: 9157:#endif /* not _AIX */
        -: 9158:#endif /* not MSDOS, or __TURBOC__ */
        -: 9159:#endif /* not sparc */
        -: 9160:#endif /* not GNU C */
        -: 9161:#endif /* alloca not defined */
        -: 9162:#endif /* YYSTACK_USE_ALLOCA not defined */
        -: 9163:
        -: 9164:#ifdef YYSTACK_USE_ALLOCA
        -: 9165:#define YYSTACK_ALLOC alloca
        -: 9166:#else
        -: 9167:#define YYSTACK_ALLOC malloc
        -: 9168:#endif
        -: 9169:
        -: 9170:/* Note: there must be only one dollar sign in this file.
        -: 9171:   It is replaced by the list of actions, each action
        -: 9172:   as one case of the switch.  */
        -: 9173:
        -: 9174:#define yyerrok		(yyerrstatus = 0)
        -: 9175:#define yyclearin	(yychar = YYEMPTY)
        -: 9176:#define YYEMPTY		-2
        -: 9177:#define YYEOF		0
        -: 9178:#define YYACCEPT	goto yyacceptlab
        -: 9179:#define YYABORT 	goto yyabortlab
        -: 9180:#define YYERROR		goto yyerrlab1
        -: 9181:/* Like YYERROR except do call yyerror.
        -: 9182:   This remains here temporarily to ease the
        -: 9183:   transition to the new meaning of YYERROR, for GCC.
        -: 9184:   Once GCC version 2 has supplanted version 1, this can go.  */
        -: 9185:#define YYFAIL		goto yyerrlab
        -: 9186:#define YYRECOVERING()  (!!yyerrstatus)
        -: 9187:#define YYBACKUP(token, value) \
        -: 9188:do								\
        -: 9189:  if (yychar == YYEMPTY && yylen == 1)				\
        -: 9190:    { yychar = (token), yylval = (value);			\
        -: 9191:      yychar1 = YYTRANSLATE (yychar);				\
        -: 9192:      YYPOPSTACK;						\
        -: 9193:      goto yybackup;						\
        -: 9194:    }								\
        -: 9195:  else								\
        -: 9196:    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
        -: 9197:while (0)
        -: 9198:
        -: 9199:#define YYTERROR	1
        -: 9200:#define YYERRCODE	256
        -: 9201:
        -: 9202:#ifndef YYPURE
        -: 9203:#define YYLEX		yylex()
        -: 9204:#endif
        -: 9205:
        -: 9206:#ifdef YYPURE
        -: 9207:#ifdef YYLSP_NEEDED
        -: 9208:#ifdef YYLEX_PARAM
        -: 9209:#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
        -: 9210:#else
        -: 9211:#define YYLEX		yylex(&yylval, &yylloc)
        -: 9212:#endif
        -: 9213:#else /* not YYLSP_NEEDED */
        -: 9214:#ifdef YYLEX_PARAM
        -: 9215:#define YYLEX		yylex(&yylval, YYLEX_PARAM)
        -: 9216:#else
        -: 9217:#define YYLEX		yylex(&yylval)
        -: 9218:#endif
        -: 9219:#endif /* not YYLSP_NEEDED */
        -: 9220:#endif
        -: 9221:
        -: 9222:/* If nonreentrant, generate the variables here */
        -: 9223:
        -: 9224:#ifndef YYPURE
        -: 9225:
        -: 9226:int	yychar;			/*  the lookahead symbol		*/
        -: 9227:YYSTYPE	yylval;			/*  the semantic value of the		*/
        -: 9228:				/*  lookahead symbol			*/
        -: 9229:
        -: 9230:#ifdef YYLSP_NEEDED
        -: 9231:YYLTYPE yylloc;			/*  location data for the lookahead	*/
        -: 9232:				/*  symbol				*/
        -: 9233:#endif
        -: 9234:
        -: 9235:int yynerrs;			/*  number of parse errors so far       */
        -: 9236:#endif  /* not YYPURE */
        -: 9237:
        -: 9238:#if YYDEBUG != 0
        -: 9239:int yydebug;			/*  nonzero means print parse trace	*/
        -: 9240:/* Since this is uninitialized, it does not stop multiple parsers
        -: 9241:   from coexisting.  */
        -: 9242:#endif
        -: 9243:
        -: 9244:/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/
        -: 9245:
        -: 9246:#ifndef	YYINITDEPTH
        -: 9247:#define YYINITDEPTH 200
        -: 9248:#endif
        -: 9249:
        -: 9250:/*  YYMAXDEPTH is the maximum size the stacks can grow to
        -: 9251:    (effective only if the built-in stack extension method is used).  */
        -: 9252:
        -: 9253:#if YYMAXDEPTH == 0
        -: 9254:#undef YYMAXDEPTH
        -: 9255:#endif
        -: 9256:
        -: 9257:#ifndef YYMAXDEPTH
        -: 9258:#define YYMAXDEPTH 10000
        -: 9259:#endif
        -: 9260:/* Define __yy_memcpy.  Note that the size argument
        -: 9261:   should be passed with type unsigned int, because that is what the non-GCC
        -: 9262:   definitions require.  With GCC, __builtin_memcpy takes an arg
        -: 9263:   of type size_t, but it can handle unsigned int.  */
        -: 9264:
        -: 9265:#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
        -: 9266:#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
        -: 9267:#else				/* not GNU C or C++ */
        -: 9268:#ifndef __cplusplus
        -: 9269:
        -: 9270:/* This is the most reliable way to avoid incompatibilities
        -: 9271:   in available built-in functions on various systems.  */
        -: 9272:static void
        -: 9273:__yy_memcpy (to, from, count)
        -: 9274:     char *to;
        -: 9275:     char *from;
        -: 9276:     unsigned int count;
        -: 9277:{
        -: 9278:  register char *f = from;
        -: 9279:  register char *t = to;
        -: 9280:  register int i = count;
        -: 9281:
        -: 9282:  while (i-- > 0)
        -: 9283:    *t++ = *f++;
        -: 9284:}
        -: 9285:
        -: 9286:#else /* __cplusplus */
        -: 9287:
        -: 9288:/* This is the most reliable way to avoid incompatibilities
        -: 9289:   in available built-in functions on various systems.  */
        -: 9290:static void
        -: 9291:__yy_memcpy (char *to, char *from, unsigned int count)
        -: 9292:{
        -: 9293:  register char *t = to;
        -: 9294:  register char *f = from;
        -: 9295:  register int i = count;
        -: 9296:
        -: 9297:  while (i-- > 0)
        -: 9298:    *t++ = *f++;
        -: 9299:}
        -: 9300:
        -: 9301:#endif
        -: 9302:#endif
        -: 9303:
        -: 9304:/* The user can define YYPARSE_PARAM as the name of an argument to be passed
        -: 9305:   into yyparse.  The argument should have type void *.
        -: 9306:   It should actually point to an object.
        -: 9307:   Grammar actions can access the variable by casting it
        -: 9308:   to the proper pointer type.  */
        -: 9309:
        -: 9310:#ifdef YYPARSE_PARAM
        -: 9311:#ifdef __cplusplus
        -: 9312:#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
        -: 9313:#define YYPARSE_PARAM_DECL
        -: 9314:#else /* not __cplusplus */
        -: 9315:#define YYPARSE_PARAM_ARG YYPARSE_PARAM
        -: 9316:#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
        -: 9317:#endif /* not __cplusplus */
        -: 9318:#else /* not YYPARSE_PARAM */
        -: 9319:#define YYPARSE_PARAM_ARG
        -: 9320:#define YYPARSE_PARAM_DECL
        -: 9321:#endif /* not YYPARSE_PARAM */
        -: 9322:
        -: 9323:/* Prevent warning if -Wstrict-prototypes.  */
        -: 9324:#ifdef __GNUC__
        -: 9325:#ifdef YYPARSE_PARAM
        -: 9326:int yyparse (void *);
        -: 9327:#else
        -: 9328:int yyparse (void);
        -: 9329:#endif
        -: 9330:#endif
        -: 9331:
        -: 9332:int
function yyparse called 560 returned 99% blocks executed 61%
      560: 9333:yyparse(YYPARSE_PARAM_ARG)
        -: 9334:     YYPARSE_PARAM_DECL
        -: 9335:{
        -: 9336:  register int yystate;
        -: 9337:  register int yyn;
        -: 9338:  register short *yyssp;
        -: 9339:  register YYSTYPE *yyvsp;
        -: 9340:  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
      560: 9341:  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */
        -: 9342:
        -: 9343:  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
        -: 9344:  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/
        -: 9345:
      560: 9346:  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
      560: 9347:  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */
        -: 9348:
        -: 9349:#ifdef YYLSP_NEEDED
        -: 9350:  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
        -: 9351:  YYLTYPE *yyls = yylsa;
        -: 9352:  YYLTYPE *yylsp;
        -: 9353:
        -: 9354:#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
        -: 9355:#else
        -: 9356:#define YYPOPSTACK   (yyvsp--, yyssp--)
        -: 9357:#endif
        -: 9358:
      560: 9359:  int yystacksize = YYINITDEPTH;
      560: 9360:  int yyfree_stacks = 0;
        -: 9361:
        -: 9362:#ifdef YYPURE
        -: 9363:  int yychar;
        -: 9364:  YYSTYPE yylval;
        -: 9365:  int yynerrs;
        -: 9366:#ifdef YYLSP_NEEDED
        -: 9367:  YYLTYPE yylloc;
        -: 9368:#endif
        -: 9369:#endif
        -: 9370:
        -: 9371:  YYSTYPE yyval;		/*  the variable used to return		*/
        -: 9372:				/*  semantic values from the action	*/
        -: 9373:				/*  routines				*/
        -: 9374:
        -: 9375:  int yylen;
        -: 9376:
        -: 9377:#if YYDEBUG != 0
        -: 9378:  if (yydebug)
        -: 9379:    fprintf(err, "Starting parse\n");
        -: 9380:#endif
        -: 9381:
      560: 9382:  yystate = 0;
      560: 9383:  yyerrstatus = 0;
      560: 9384:  yynerrs = 0;
      560: 9385:  yychar = YYEMPTY;		/* Cause a token to be read.  */
        -: 9386:
        -: 9387:  /* Initialize stack pointers.
        -: 9388:     Waste one element of value and location stack
        -: 9389:     so that they stay on the same level as the state stack.
        -: 9390:     The wasted elements are never initialized.  */
        -: 9391:
      560: 9392:  yyssp = yyss - 1;
      560: 9393:  yyvsp = yyvs;
        -: 9394:#ifdef YYLSP_NEEDED
        -: 9395:  yylsp = yyls;
        -: 9396:#endif
        -: 9397:
        -: 9398:/* Push a new state, which is found in  yystate  .  */
        -: 9399:/* In all cases, when you get here, the value and location stacks
        -: 9400:   have just been pushed. so pushing a state here evens the stacks.  */
    93801: 9401:yynewstate:
        -: 9402:
    93801: 9403:  *++yyssp = yystate;
        -: 9404:
    93801: 9405:  if (yyssp >= yyss + yystacksize - 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 93801
        -: 9406:    {
        -: 9407:      /* Give user a chance to reallocate the stack */
        -: 9408:      /* Use copies of these so that the &'s don't force the real ones into memory. */
    #####: 9409:      YYSTYPE *yyvs1 = yyvs;
    #####: 9410:      short *yyss1 = yyss;
        -: 9411:#ifdef YYLSP_NEEDED
        -: 9412:      YYLTYPE *yyls1 = yyls;
        -: 9413:#endif
        -: 9414:
        -: 9415:      /* Get the current used size of the three stacks, in elements.  */
    #####: 9416:      int size = yyssp - yyss + 1;
        -: 9417:
        -: 9418:#ifdef yyoverflow
        -: 9419:      /* Each stack pointer address is followed by the size of
        -: 9420:	 the data in use in that stack, in bytes.  */
        -: 9421:#ifdef YYLSP_NEEDED
        -: 9422:      /* This used to be a conditional around just the two extra args,
        -: 9423:	 but that might be undefined if yyoverflow is a macro.  */
        -: 9424:      yyoverflow("parser stack overflow",
        -: 9425:		 &yyss1, size * sizeof (*yyssp),
        -: 9426:		 &yyvs1, size * sizeof (*yyvsp),
        -: 9427:		 &yyls1, size * sizeof (*yylsp),
        -: 9428:		 &yystacksize);
        -: 9429:#else
        -: 9430:      yyoverflow("parser stack overflow",
        -: 9431:		 &yyss1, size * sizeof (*yyssp),
        -: 9432:		 &yyvs1, size * sizeof (*yyvsp),
        -: 9433:		 &yystacksize);
        -: 9434:#endif
        -: 9435:
        -: 9436:      yyss = yyss1; yyvs = yyvs1;
        -: 9437:#ifdef YYLSP_NEEDED
        -: 9438:      yyls = yyls1;
        -: 9439:#endif
        -: 9440:#else /* no yyoverflow */
        -: 9441:      /* Extend the stack our own way.  */
    #####: 9442:      if (yystacksize >= YYMAXDEPTH)
branch  0 never executed
branch  1 never executed
        -: 9443:	{
    #####: 9444:	  yyerror("parser stack overflow");
call    0 never executed
    #####: 9445:	  if (yyfree_stacks)
branch  0 never executed
branch  1 never executed
        -: 9446:	    {
    #####: 9447:	      free (yyss);
    #####: 9448:	      free (yyvs);
        -: 9449:#ifdef YYLSP_NEEDED
        -: 9450:	      free (yyls);
        -: 9451:#endif
        -: 9452:	    }
    #####: 9453:	  return 2;
        -: 9454:	}
    #####: 9455:      yystacksize *= 2;
    #####: 9456:      if (yystacksize > YYMAXDEPTH)
branch  0 never executed
branch  1 never executed
    #####: 9457:	yystacksize = YYMAXDEPTH;
        -: 9458:#ifndef YYSTACK_USE_ALLOCA
        -: 9459:      yyfree_stacks = 1;
        -: 9460:#endif
    #####: 9461:      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
    #####: 9462:      __yy_memcpy ((char *)yyss, (char *)yyss1,
        -: 9463:		   size * (unsigned int) sizeof (*yyssp));
    #####: 9464:      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
    #####: 9465:      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
        -: 9466:		   size * (unsigned int) sizeof (*yyvsp));
        -: 9467:#ifdef YYLSP_NEEDED
        -: 9468:      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
        -: 9469:      __yy_memcpy ((char *)yyls, (char *)yyls1,
        -: 9470:		   size * (unsigned int) sizeof (*yylsp));
        -: 9471:#endif
        -: 9472:#endif /* no yyoverflow */
        -: 9473:
    #####: 9474:      yyssp = yyss + size - 1;
    #####: 9475:      yyvsp = yyvs + size - 1;
        -: 9476:#ifdef YYLSP_NEEDED
        -: 9477:      yylsp = yyls + size - 1;
        -: 9478:#endif
        -: 9479:
        -: 9480:#if YYDEBUG != 0
        -: 9481:      if (yydebug)
        -: 9482:	fprintf(err, "Stack size increased to %d\n", yystacksize);
        -: 9483:#endif
        -: 9484:
    #####: 9485:      if (yyssp >= yyss + yystacksize - 1)
branch  0 never executed
branch  1 never executed
    #####: 9486:	YYABORT;
        -: 9487:    }
        -: 9488:
        -: 9489:#if YYDEBUG != 0
        -: 9490:  if (yydebug)
        -: 9491:    fprintf(err, "Entering state %d\n", yystate);
        -: 9492:#endif
        -: 9493:
    93801: 9494:  goto yybackup;
    93801: 9495: yybackup:
        -: 9496:
        -: 9497:/* Do appropriate processing given the current state.  */
        -: 9498:/* Read a lookahead token if we need one and don't already have one.  */
        -: 9499:/* yyresume: */
        -: 9500:
        -: 9501:  /* First try to decide what to do without reference to lookahead token.  */
        -: 9502:
    93801: 9503:  yyn = yypact[yystate];
    93801: 9504:  if (yyn == YYFLAG)
branch  0 taken 29029 (fallthrough)
branch  1 taken 64772
    29029: 9505:    goto yydefault;
        -: 9506:
        -: 9507:  /* Not known => get a lookahead token if don't already have one.  */
        -: 9508:
        -: 9509:  /* yychar is either YYEMPTY or YYEOF
        -: 9510:     or a valid token in external form.  */
        -: 9511:
    64772: 9512:  if (yychar == YYEMPTY)
branch  0 taken 31314 (fallthrough)
branch  1 taken 33458
        -: 9513:    {
        -: 9514:#if YYDEBUG != 0
        -: 9515:      if (yydebug)
        -: 9516:	fprintf(err, "Reading a token: ");
        -: 9517:#endif
    31314: 9518:      yychar = YYLEX;
call    0 returned 31314
        -: 9519:    }
        -: 9520:
        -: 9521:  /* Convert token to internal form (in yychar1) for indexing tables with */
        -: 9522:
    64772: 9523:  if (yychar <= 0)		/* This means end of input. */
branch  0 taken 1657 (fallthrough)
branch  1 taken 63115
        -: 9524:    {
     1657: 9525:      yychar1 = 0;
     1657: 9526:      yychar = YYEOF;		/* Don't call YYLEX any more */
        -: 9527:
        -: 9528:#if YYDEBUG != 0
        -: 9529:      if (yydebug)
        -: 9530:	fprintf(err, "Now at end of input.\n");
        -: 9531:#endif
        -: 9532:    }
        -: 9533:  else
        -: 9534:    {
   63115*: 9535:      yychar1 = YYTRANSLATE(yychar);
branch  0 taken 63115 (fallthrough)
branch  1 taken 0
        -: 9536:
        -: 9537:#if YYDEBUG != 0
        -: 9538:      if (yydebug)
        -: 9539:	{
        -: 9540:	  fprintf (err, "Next token is %d (%s", yychar, yytname[yychar1]);
        -: 9541:	  /* Give the individual parser a way to print the precise meaning
        -: 9542:	     of a token, for further debugging info.  */
        -: 9543:#ifdef YYPRINT
        -: 9544:	  YYPRINT (err, yychar, yylval);
        -: 9545:#endif
        -: 9546:	  fprintf (err, ")\n");
        -: 9547:	}
        -: 9548:#endif
        -: 9549:    }
        -: 9550:
    64772: 9551:  yyn += yychar1;
    64772: 9552:  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
branch  0 taken 64764 (fallthrough)
branch  1 taken 8
branch  2 taken 64762 (fallthrough)
branch  3 taken 2
branch  4 taken 31797 (fallthrough)
branch  5 taken 32965
    31807: 9553:    goto yydefault;
        -: 9554:
    32965: 9555:  yyn = yytable[yyn];
        -: 9556:
        -: 9557:  /* yyn is what to do for this token type in this state.
        -: 9558:     Negative => reduce, -yyn is rule number.
        -: 9559:     Positive => shift, yyn is new state.
        -: 9560:       New state is final state => don't bother to shift,
        -: 9561:       just return success.
        -: 9562:     0, or most negative number => error.  */
        -: 9563:
    32965: 9564:  if (yyn < 0)
branch  0 taken 1111 (fallthrough)
branch  1 taken 31854
        -: 9565:    {
     1111: 9566:      if (yyn == YYFLAG)
branch  0 taken 0 (fallthrough)
branch  1 taken 1111
    #####: 9567:	goto yyerrlab;
     1111: 9568:      yyn = -yyn;
     1111: 9569:      goto yyreduce;
        -: 9570:    }
    31854: 9571:  else if (yyn == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 31854
    #####: 9572:    goto yyerrlab;
        -: 9573:
    31854: 9574:  if (yyn == YYFINAL)
branch  0 taken 551 (fallthrough)
branch  1 taken 31303
      551: 9575:    YYACCEPT;
        -: 9576:
        -: 9577:  /* Shift the lookahead token.  */
        -: 9578:
        -: 9579:#if YYDEBUG != 0
        -: 9580:  if (yydebug)
        -: 9581:    fprintf(err, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
        -: 9582:#endif
        -: 9583:
        -: 9584:  /* Discard the token being shifted unless it is eof.  */
    31303: 9585:  if (yychar != YYEOF)
branch  0 taken 30752 (fallthrough)
branch  1 taken 551
    30752: 9586:    yychar = YYEMPTY;
        -: 9587:
    31303: 9588:  *++yyvsp = yylval;
        -: 9589:#ifdef YYLSP_NEEDED
        -: 9590:  *++yylsp = yylloc;
        -: 9591:#endif
        -: 9592:
        -: 9593:  /* count tokens shifted since error; after three, turn off error status.  */
    31303: 9594:  if (yyerrstatus) yyerrstatus--;
branch  0 taken 17 (fallthrough)
branch  1 taken 31286
        -: 9595:
    31303: 9596:  yystate = yyn;
    31303: 9597:  goto yynewstate;
        -: 9598:
        -: 9599:/* Do the default action for the current state.  */
    60836: 9600:yydefault:
        -: 9601:
    60836: 9602:  yyn = yydefact[yystate];
    60836: 9603:  if (yyn == 0)
branch  0 taken 19 (fallthrough)
branch  1 taken 60817
       19: 9604:    goto yyerrlab;
        -: 9605:
        -: 9606:/* Do a reduction.  yyn is the number of a rule to reduce with.  */
    60817: 9607:yyreduce:
    61928: 9608:  yylen = yyr2[yyn];
    61928: 9609:  if (yylen > 0)
branch  0 taken 50239 (fallthrough)
branch  1 taken 11689
    50239: 9610:    yyval = yyvsp[1-yylen]; /* implement default value of the action */
        -: 9611:
        -: 9612:#if YYDEBUG != 0
        -: 9613:  if (yydebug)
        -: 9614:    {
        -: 9615:      int i;
        -: 9616:
        -: 9617:      fprintf (err, "Reducing via rule %d (line %d), ",
        -: 9618:	       yyn, yyrline[yyn]);
        -: 9619:
        -: 9620:      /* Print the symbols being reduced, and their result.  */
        -: 9621:      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
        -: 9622:	fprintf (err, "%s ", yytname[yyrhs[i]]);
        -: 9623:      fprintf (err, " -> %s\n", yytname[yyr1[yyn]]);
        -: 9624:    }
        -: 9625:#endif
        -: 9626:
        -: 9627:
    61928: 9628:  switch (yyn) {
branch  0 taken 551
branch  1 taken 560
branch  2 taken 0
branch  3 taken 560
branch  4 taken 1
branch  5 taken 18
branch  6 taken 0
branch  7 taken 19
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 3533
branch 13 taken 0
branch 14 taken 4086
branch 15 taken 100
branch 16 taken 3416
branch 17 taken 11
branch 18 taken 18
branch 19 taken 13
branch 20 taken 13
branch 21 taken 3
branch 22 taken 3520
branch 23 taken 0
branch 24 taken 17
branch 25 taken 110
branch 26 taken 0
branch 27 taken 103
branch 28 taken 3303
branch 29 taken 1103
branch 30 taken 4222
branch 31 taken 111
branch 32 taken 7092
branch 33 taken 5325
branch 34 taken 846
branch 35 taken 348
branch 36 taken 4
branch 37 taken 100
branch 38 taken 98
branch 39 taken 98
branch 40 taken 214
branch 41 taken 1298
branch 42 taken 233
branch 43 taken 1098
branch 44 taken 593
branch 45 taken 8982
branch 46 taken 1079
branch 47 taken 219
branch 48 taken 880
branch 49 taken 2467
branch 50 taken 0
branch 51 taken 1298
branch 52 taken 0
branch 53 taken 0
branch 54 taken 0
branch 55 taken 0
branch 56 taken 0
branch 57 taken 0
branch 58 taken 0
branch 59 taken 0
branch 60 taken 0
branch 61 taken 0
branch 62 taken 0
branch 63 taken 0
branch 64 taken 2017
branch 65 taken 1098
branch 66 taken 1150
        -: 9629:
      551: 9630:case 1:
        -: 9631:{ /* add default rule */
        -: 9632:			int def_rule;
        -: 9633:
      551: 9634:			pat = cclinit();
call    0 returned 551
      551: 9635:			cclnegate( pat );
call    0 returned 551
        -: 9636:
      551: 9637:			def_rule = mkstate( -pat );
call    0 returned 551
        -: 9638:
        -: 9639:			/* Remember the number of the default rule so we
        -: 9640:			 * don't generate "can't match" warnings for it.
        -: 9641:			 */
      551: 9642:			default_rule = num_rules;
        -: 9643:
      551: 9644:			finish_rule( def_rule, false, 0, 0 );
call    0 returned 551
        -: 9645:
     1121: 9646:			for ( i = 1; i <= lastsc; ++i )
branch  0 taken 570
branch  1 taken 551 (fallthrough)
      570: 9647:				scset[i] = mkbranch( scset[i], def_rule );
call    0 returned 570
        -: 9648:
      551: 9649:			if ( spprdflt )
branch  0 taken 3 (fallthrough)
branch  1 taken 548
        3: 9650:				add_action(
call    0 returned 3
        -: 9651:				"YY_FATAL_ERROR( \"flex scanner jammed\" )" );
        -: 9652:			else
      548: 9653:				add_action( "ECHO" );
call    0 returned 548
        -: 9654:
      551: 9655:			add_action( ";\n\tYY_BREAK\n" );
call    0 returned 551
        -: 9656:			;
      551: 9657:    break;}
      560: 9658:case 2:
        -: 9659:{ /* initialize for processing rules */
        -: 9660:
        -: 9661:			/* Create default DFA start condition. */
      560: 9662:			scinstal( "INITIAL", false );
call    0 returned 560
        -: 9663:			;
      560: 9664:    break;}
    #####: 9665:case 6:
    #####: 9666:{ synerr( "unknown error processing section 1" ); ;
call    0 never executed
    #####: 9667:    break;}
      560: 9668:case 7:
        -: 9669:{
      560: 9670:			check_options();
call    0 returned 553
      553: 9671:			scon_stk = allocate_integer_array( lastsc + 1 );
call    0 returned 553
      553: 9672:			scon_stk_ptr = 0;
        -: 9673:			;
      553: 9674:    break;}
        1: 9675:case 8:
        1: 9676:{ xcluflg = false; ;
        1: 9677:    break;}
       18: 9678:case 9:
       18: 9679:{ xcluflg = true; ;
       18: 9680:    break;}
    #####: 9681:case 10:
    #####: 9682:{ scinstal( nmstr, xcluflg ); ;
call    0 never executed
    #####: 9683:    break;}
       19: 9684:case 11:
       19: 9685:{ scinstal( nmstr, xcluflg ); ;
call    0 returned 19
       19: 9686:    break;}
    #####: 9687:case 12:
    #####: 9688:{ synerr( "bad start condition list" ); ;
call    0 never executed
    #####: 9689:    break;}
    #####: 9690:case 16:
        -: 9691:{
    #####: 9692:			outfilename = copy_string( nmstr );
call    0 never executed
    #####: 9693:			did_outfilename = 1;
        -: 9694:			;
    #####: 9695:    break;}
    #####: 9696:case 17:
    #####: 9697:{ prefix = copy_string( nmstr ); ;
call    0 never executed
    #####: 9698:    break;}
    #####: 9699:case 18:
    #####: 9700:{ yyclass = copy_string( nmstr ); ;
call    0 never executed
    #####: 9701:    break;}
     3533: 9702:case 19:
     3533: 9703:{ scon_stk_ptr = yyvsp[-3]; ;
     3533: 9704:    break;}
    #####: 9705:case 20:
    #####: 9706:{ scon_stk_ptr = yyvsp[-3]; ;
    #####: 9707:    break;}
     4086: 9708:case 22:
        -: 9709:{
        -: 9710:			/* Initialize for a parse of one rule. */
     4086: 9711:			trlcontxt = variable_trail_rule = varlength = false;
     4086: 9712:			trailcnt = headcnt = rulelen = 0;
     4086: 9713:			current_state_type = STATE_NORMAL;
     4086: 9714:			previous_continued_action = continued_action;
     4086: 9715:			in_rule = true;
        -: 9716:
     4086: 9717:			new_rule();
call    0 returned 4086
        -: 9718:			;
     4086: 9719:    break;}
      100: 9720:case 23:
        -: 9721:{
      100: 9722:			pat = yyvsp[0];
      100: 9723:			finish_rule( pat, variable_trail_rule,
call    0 returned 100
        -: 9724:				headcnt, trailcnt );
        -: 9725:
      100: 9726:			if ( scon_stk_ptr > 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 100
        -: 9727:				{
    #####: 9728:				for ( i = 1; i <= scon_stk_ptr; ++i )
branch  0 never executed
branch  1 never executed
    #####: 9729:					scbol[scon_stk[i]] =
    #####: 9730:						mkbranch( scbol[scon_stk[i]],
call    0 never executed
        -: 9731:								pat );
        -: 9732:				}
        -: 9733:
        -: 9734:			else
        -: 9735:				{
        -: 9736:				/* Add to all non-exclusive start conditions,
        -: 9737:				 * including the default (0) start condition.
        -: 9738:				 */
        -: 9739:
      212: 9740:				for ( i = 1; i <= lastsc; ++i )
branch  0 taken 112
branch  1 taken 100 (fallthrough)
      112: 9741:					if ( ! scxclu[i] )
branch  0 taken 100 (fallthrough)
branch  1 taken 12
      100: 9742:						scbol[i] = mkbranch( scbol[i],
call    0 returned 100
        -: 9743:									pat );
        -: 9744:				}
        -: 9745:
      100: 9746:			if ( ! bol_needed )
branch  0 taken 99 (fallthrough)
branch  1 taken 1
        -: 9747:				{
       99: 9748:				bol_needed = true;
        -: 9749:
       99: 9750:				if ( performance_report > 1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 99
    #####: 9751:					pinpoint_message(
call    0 never executed
        -: 9752:			"'^' operator results in sub-optimal performance" );
        -: 9753:				}
        -: 9754:			;
      100: 9755:    break;}
     3416: 9756:case 24:
        -: 9757:{
     3416: 9758:			pat = yyvsp[0];
     3416: 9759:			finish_rule( pat, variable_trail_rule,
call    0 returned 3416
        -: 9760:				headcnt, trailcnt );
        -: 9761:
     3416: 9762:			if ( scon_stk_ptr > 0 )
branch  0 taken 11 (fallthrough)
branch  1 taken 3405
        -: 9763:				{
       42: 9764:				for ( i = 1; i <= scon_stk_ptr; ++i )
branch  0 taken 31
branch  1 taken 11
       31: 9765:					scset[scon_stk[i]] =
       31: 9766:						mkbranch( scset[scon_stk[i]],
call    0 returned 31
        -: 9767:								pat );
        -: 9768:				}
        -: 9769:
        -: 9770:			else
        -: 9771:				{
    10155: 9772:				for ( i = 1; i <= lastsc; ++i )
branch  0 taken 6750
branch  1 taken 3405 (fallthrough)
     6750: 9773:					if ( ! scxclu[i] )
branch  0 taken 3417 (fallthrough)
branch  1 taken 3333
     3417: 9774:						scset[i] =
     3417: 9775:							mkbranch( scset[i],
call    0 returned 3417
        -: 9776:								pat );
        -: 9777:				}
        -: 9778:			;
     3416: 9779:    break;}
       11: 9780:case 25:
        -: 9781:{
       11: 9782:			if ( scon_stk_ptr > 0 )
branch  0 taken 5 (fallthrough)
branch  1 taken 6
        5: 9783:				build_eof_action();
call    0 returned 5
        -: 9784:	
        -: 9785:			else
        -: 9786:				{
        -: 9787:				/* This EOF applies to all start conditions
        -: 9788:				 * which don't already have EOF actions.
        -: 9789:				 */
       27: 9790:				for ( i = 1; i <= lastsc; ++i )
branch  0 taken 21
branch  1 taken 6 (fallthrough)
       21: 9791:					if ( ! sceof[i] )
branch  0 taken 17 (fallthrough)
branch  1 taken 4
       17: 9792:						scon_stk[++scon_stk_ptr] = i;
        -: 9793:
        6: 9794:				if ( scon_stk_ptr == 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####: 9795:					warn(
call    0 never executed
        -: 9796:			"all start conditions already have <<EOF>> rules" );
        -: 9797:
        -: 9798:				else
        6: 9799:					build_eof_action();
call    0 returned 6
        -: 9800:				}
        -: 9801:			;
       11: 9802:    break;}
       18: 9803:case 26:
       18: 9804:{ synerr( "unrecognized rule" ); ;
call    0 returned 18
       18: 9805:    break;}
       13: 9806:case 27:
       13: 9807:{ yyval = scon_stk_ptr; ;
       13: 9808:    break;}
       13: 9809:case 28:
       13: 9810:{ yyval = yyvsp[-2]; ;
       13: 9811:    break;}
        3: 9812:case 29:
        -: 9813:{
        3: 9814:			yyval = scon_stk_ptr;
        -: 9815:
       22: 9816:			for ( i = 1; i <= lastsc; ++i )
branch  0 taken 19
branch  1 taken 3 (fallthrough)
        -: 9817:				{
        -: 9818:				int j;
        -: 9819:
       71: 9820:				for ( j = 1; j <= scon_stk_ptr; ++j )
branch  0 taken 52
branch  1 taken 19 (fallthrough)
       52: 9821:					if ( scon_stk[j] == i )
branch  0 taken 0 (fallthrough)
branch  1 taken 52
    #####: 9822:						break;
        -: 9823:
       19: 9824:				if ( j > scon_stk_ptr )
branch  0 taken 19 (fallthrough)
branch  1 taken 0
       19: 9825:					scon_stk[++scon_stk_ptr] = i;
        -: 9826:				}
        -: 9827:			;
        3: 9828:    break;}
     3520: 9829:case 30:
     3520: 9830:{ yyval = scon_stk_ptr; ;
     3520: 9831:    break;}
    #####: 9832:case 33:
    #####: 9833:{ synerr( "bad start condition list" ); ;
call    0 never executed
    #####: 9834:    break;}
       17: 9835:case 34:
        -: 9836:{
       17: 9837:			if ( (scnum = sclookup( nmstr )) == 0 )
call    0 returned 17
branch  1 taken 0 (fallthrough)
branch  2 taken 17
    #####: 9838:				format_pinpoint_message(
call    0 never executed
        -: 9839:					"undeclared start condition %s",
        -: 9840:					nmstr );
        -: 9841:			else
        -: 9842:				{
       23: 9843:				for ( i = 1; i <= scon_stk_ptr; ++i )
branch  0 taken 6
branch  1 taken 17 (fallthrough)
        6: 9844:					if ( scon_stk[i] == scnum )
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 9845:						{
    #####: 9846:						format_warn(
        -: 9847:							"<%s> specified twice",
    #####: 9848:							scname[scnum] );
call    0 never executed
    #####: 9849:						break;
        -: 9850:						}
        -: 9851:
       17: 9852:				if ( i > scon_stk_ptr )
branch  0 taken 17 (fallthrough)
branch  1 taken 0
       17: 9853:					scon_stk[++scon_stk_ptr] = scnum;
        -: 9854:				}
        -: 9855:			;
       17: 9856:    break;}
      110: 9857:case 35:
        -: 9858:{
      110: 9859:			if ( transchar[lastst[yyvsp[0]]] != SYM_EPSILON )
branch  0 taken 108 (fallthrough)
branch  1 taken 2
        -: 9860:				/* Provide final transition \now/ so it
        -: 9861:				 * will be marked as a trailing context
        -: 9862:				 * state.
        -: 9863:				 */
      108: 9864:				yyvsp[0] = link_machines( yyvsp[0],
call    0 returned 108
call    1 returned 108
        -: 9865:						mkstate( SYM_EPSILON ) );
        -: 9866:
      110: 9867:			mark_beginning_as_normal( yyvsp[0] );
call    0 returned 110
      110: 9868:			current_state_type = STATE_NORMAL;
        -: 9869:
      110: 9870:			if ( previous_continued_action )
branch  0 taken 2 (fallthrough)
branch  1 taken 108
        -: 9871:				{
        -: 9872:				/* We need to treat this as variable trailing
        -: 9873:				 * context so that the backup does not happen
        -: 9874:				 * in the action but before the action switch
        -: 9875:				 * statement.  If the backup happens in the
        -: 9876:				 * action, then the rules "falling into" this
        -: 9877:				 * one's action will *also* do the backup,
        -: 9878:				 * erroneously.
        -: 9879:				 */
        2: 9880:				if ( ! varlength || headcnt != 0 )
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####: 9881:					warn(
call    0 never executed
        -: 9882:		"trailing context made variable due to preceding '|' action" );
        -: 9883:
        -: 9884:				/* Mark as variable. */
        2: 9885:				varlength = true;
        2: 9886:				headcnt = 0;
        -: 9887:				}
        -: 9888:
      110: 9889:			if ( lex_compat || (varlength && headcnt == 0) )
branch  0 taken 79 (fallthrough)
branch  1 taken 31
branch  2 taken 2 (fallthrough)
branch  3 taken 77
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        -: 9890:				{ /* variable trailing context rule */
        -: 9891:				/* Mark the first part of the rule as the
        -: 9892:				 * accepting "head" part of a trailing
        -: 9893:				 * context rule.
        -: 9894:				 *
        -: 9895:				 * By the way, we didn't do this at the
        -: 9896:				 * beginning of this production because back
        -: 9897:				 * then current_state_type was set up for a
        -: 9898:				 * trail rule, and add_accept() can create
        -: 9899:				 * a new state ...
        -: 9900:				 */
       33: 9901:				add_accept( yyvsp[-1],
call    0 returned 33
        -: 9902:					num_rules | YY_TRAILING_HEAD_MASK );
       33: 9903:				variable_trail_rule = true;
        -: 9904:				}
        -: 9905:			
        -: 9906:			else
       77: 9907:				trailcnt = rulelen;
        -: 9908:
      110: 9909:			yyval = link_machines( yyvsp[-1], yyvsp[0] );
call    0 returned 110
        -: 9910:			;
      110: 9911:    break;}
    #####: 9912:case 36:
    #####: 9913:{ synerr( "trailing context used twice" ); ;
call    0 never executed
    #####: 9914:    break;}
      103: 9915:case 37:
        -: 9916:{
      103: 9917:			headcnt = 0;
      103: 9918:			trailcnt = 1;
      103: 9919:			rulelen = 1;
      103: 9920:			varlength = false;
        -: 9921:
      103: 9922:			current_state_type = STATE_TRAILING_CONTEXT;
        -: 9923:
      103: 9924:			if ( trlcontxt )
branch  0 taken 0 (fallthrough)
branch  1 taken 103
        -: 9925:				{
    #####: 9926:				synerr( "trailing context used twice" );
call    0 never executed
    #####: 9927:				yyval = mkstate( SYM_EPSILON );
call    0 never executed
        -: 9928:				}
        -: 9929:
      103: 9930:			else if ( previous_continued_action )
branch  0 taken 0 (fallthrough)
branch  1 taken 103
        -: 9931:				{
        -: 9932:				/* See the comment in the rule for "re2 re"
        -: 9933:				 * above.
        -: 9934:				 */
    #####: 9935:				warn(
call    0 never executed
        -: 9936:		"trailing context made variable due to preceding '|' action" );
        -: 9937:
    #####: 9938:				varlength = true;
        -: 9939:				}
        -: 9940:
      103: 9941:			if ( lex_compat || varlength )
branch  0 taken 72 (fallthrough)
branch  1 taken 31
branch  2 taken 0 (fallthrough)
branch  3 taken 72
        -: 9942:				{
        -: 9943:				/* Again, see the comment in the rule for
        -: 9944:				 * "re2 re" above.
        -: 9945:				 */
       31: 9946:				add_accept( yyvsp[-1],
call    0 returned 31
        -: 9947:					num_rules | YY_TRAILING_HEAD_MASK );
       31: 9948:				variable_trail_rule = true;
        -: 9949:				}
        -: 9950:
      103: 9951:			trlcontxt = true;
        -: 9952:
      103: 9953:			eps = mkstate( SYM_EPSILON );
call    0 returned 103
      103: 9954:			yyval = link_machines( yyvsp[-1],
call    0 returned 103
call    1 returned 103
call    2 returned 103
        -: 9955:				link_machines( eps, mkstate( '\n' ) ) );
        -: 9956:			;
      103: 9957:    break;}
     3303: 9958:case 38:
        -: 9959:{
     3303: 9960:			yyval = yyvsp[0];
        -: 9961:
     3303: 9962:			if ( trlcontxt )
branch  0 taken 0 (fallthrough)
branch  1 taken 3303
        -: 9963:				{
    #####: 9964:				if ( lex_compat || (varlength && headcnt == 0) )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 9965:					/* Both head and trail are
        -: 9966:					 * variable-length.
        -: 9967:					 */
    #####: 9968:					variable_trail_rule = true;
        -: 9969:				else
    #####: 9970:					trailcnt = rulelen;
        -: 9971:				}
        -: 9972:			;
     3303: 9973:    break;}
     1103: 9974:case 39:
        -: 9975:{
     1103: 9976:			varlength = true;
     1103: 9977:			yyval = mkor( yyvsp[-2], yyvsp[0] );
call    0 returned 1103
        -: 9978:			;
     1103: 9979:    break;}
     4222: 9980:case 40:
     4222: 9981:{ yyval = yyvsp[0]; ;
     4222: 9982:    break;}
      111: 9983:case 41:
        -: 9984:{
        -: 9985:			/* This rule is written separately so the
        -: 9986:			 * reduction will occur before the trailing
        -: 9987:			 * series is parsed.
        -: 9988:			 */
        -: 9989:
      111: 9990:			if ( trlcontxt )
branch  0 taken 0 (fallthrough)
branch  1 taken 111
    #####: 9991:				synerr( "trailing context used twice" );
call    0 never executed
        -: 9992:			else
      111: 9993:				trlcontxt = true;
        -: 9994:
      111: 9995:			if ( varlength )
branch  0 taken 3 (fallthrough)
branch  1 taken 108
        -: 9996:				/* We hope the trailing context is
        -: 9997:				 * fixed-length.
        -: 9998:				 */
        3: 9999:				varlength = false;
        -:10000:			else
      108:10001:				headcnt = rulelen;
        -:10002:
      111:10003:			rulelen = 0;
        -:10004:
      111:10005:			current_state_type = STATE_TRAILING_CONTEXT;
      111:10006:			yyval = yyvsp[-1];
        -:10007:			;
      111:10008:    break;}
     7092:10009:case 42:
        -:10010:{
        -:10011:			/* This is where concatenation of adjacent patterns
        -:10012:			 * gets done.
        -:10013:			 */
     7092:10014:			yyval = link_machines( yyvsp[-1], yyvsp[0] );
call    0 returned 7092
        -:10015:			;
     7092:10016:    break;}
     5325:10017:case 43:
     5325:10018:{ yyval = yyvsp[0]; ;
     5325:10019:    break;}
      846:10020:case 44:
        -:10021:{
      846:10022:			varlength = true;
        -:10023:
      846:10024:			yyval = mkclos( yyvsp[-1] );
call    0 returned 846
        -:10025:			;
      846:10026:    break;}
      348:10027:case 45:
        -:10028:{
      348:10029:			varlength = true;
      348:10030:			yyval = mkposcl( yyvsp[-1] );
call    0 returned 348
        -:10031:			;
      348:10032:    break;}
        4:10033:case 46:
        -:10034:{
        4:10035:			varlength = true;
        4:10036:			yyval = mkopt( yyvsp[-1] );
call    0 returned 4
        -:10037:			;
        4:10038:    break;}
      100:10039:case 47:
        -:10040:{
      100:10041:			varlength = true;
        -:10042:
      100:10043:			if ( yyvsp[-3] > yyvsp[-1] || yyvsp[-3] < 0 )
branch  0 taken 100 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 100
        -:10044:				{
    #####:10045:				synerr( "bad iteration values" );
call    0 never executed
    #####:10046:				yyval = yyvsp[-5];
        -:10047:				}
        -:10048:			else
        -:10049:				{
      100:10050:				if ( yyvsp[-3] == 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 100
        -:10051:					{
    #####:10052:					if ( yyvsp[-1] <= 0 )
branch  0 never executed
branch  1 never executed
        -:10053:						{
    #####:10054:						synerr(
call    0 never executed
        -:10055:						"bad iteration values" );
    #####:10056:						yyval = yyvsp[-5];
        -:10057:						}
        -:10058:					else
    #####:10059:						yyval = mkopt(
call    0 never executed
    #####:10060:							mkrep( yyvsp[-5], 1, yyvsp[-1] ) );
call    0 never executed
        -:10061:					}
        -:10062:				else
      100:10063:					yyval = mkrep( yyvsp[-5], yyvsp[-3], yyvsp[-1] );
call    0 returned 100
        -:10064:				}
        -:10065:			;
      100:10066:    break;}
       98:10067:case 48:
        -:10068:{
       98:10069:			varlength = true;
        -:10070:
       98:10071:			if ( yyvsp[-2] <= 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 98
        -:10072:				{
    #####:10073:				synerr( "iteration value must be positive" );
call    0 never executed
    #####:10074:				yyval = yyvsp[-4];
        -:10075:				}
        -:10076:
        -:10077:			else
       98:10078:				yyval = mkrep( yyvsp[-4], yyvsp[-2], INFINITY );
call    0 returned 98
        -:10079:			;
       98:10080:    break;}
       98:10081:case 49:
        -:10082:{
        -:10083:			/* The singleton could be something like "(foo)",
        -:10084:			 * in which case we have no idea what its length
        -:10085:			 * is, so we punt here.
        -:10086:			 */
       98:10087:			varlength = true;
        -:10088:
       98:10089:			if ( yyvsp[-1] <= 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 98
        -:10090:				{
    #####:10091:				synerr( "iteration value must be positive" );
call    0 never executed
    #####:10092:				yyval = yyvsp[-3];
        -:10093:				}
        -:10094:
        -:10095:			else
       98:10096:				yyval = link_machines( yyvsp[-3],
call    0 returned 98
       98:10097:						copysingl( yyvsp[-3], yyvsp[-1] - 1 ) );
call    0 returned 98
        -:10098:			;
       98:10099:    break;}
      214:10100:case 50:
        -:10101:{
      214:10102:			if ( ! madeany )
branch  0 taken 211 (fallthrough)
branch  1 taken 3
        -:10103:				{
        -:10104:				/* Create the '.' character class. */
      211:10105:				anyccl = cclinit();
call    0 returned 211
      211:10106:				ccladd( anyccl, '\n' );
call    0 returned 211
      211:10107:				cclnegate( anyccl );
call    0 returned 211
        -:10108:
      211:10109:				if ( useecs )
branch  0 taken 116 (fallthrough)
branch  1 taken 95
      116:10110:					mkeccl( ccltbl + cclmap[anyccl],
      116:10111:						ccllen[anyccl], nextecm,
call    0 returned 116
        -:10112:						ecgroup, csize, csize );
        -:10113:
      211:10114:				madeany = true;
        -:10115:				}
        -:10116:
      214:10117:			++rulelen;
        -:10118:
      214:10119:			yyval = mkstate( -anyccl );
call    0 returned 214
        -:10120:			;
      214:10121:    break;}
     1298:10122:case 51:
        -:10123:{
     1298:10124:			if ( ! cclsorted )
branch  0 taken 850 (fallthrough)
branch  1 taken 448
        -:10125:				/* Sort characters for fast searching.  We
        -:10126:				 * use a shell sort since this list could
        -:10127:				 * be large.
        -:10128:				 */
      850:10129:				cshell( ccltbl + cclmap[yyvsp[0]], ccllen[yyvsp[0]], true );
call    0 returned 850
        -:10130:
     1298:10131:			if ( useecs )
branch  0 taken 818 (fallthrough)
branch  1 taken 480
      818:10132:				mkeccl( ccltbl + cclmap[yyvsp[0]], ccllen[yyvsp[0]],
call    0 returned 818
        -:10133:					nextecm, ecgroup, csize, csize );
        -:10134:
     1298:10135:			++rulelen;
        -:10136:
     1298:10137:			yyval = mkstate( -yyvsp[0] );
call    0 returned 1298
        -:10138:			;
     1298:10139:    break;}
      233:10140:case 52:
        -:10141:{
      233:10142:			++rulelen;
        -:10143:
      233:10144:			yyval = mkstate( -yyvsp[0] );
call    0 returned 233
        -:10145:			;
      233:10146:    break;}
     1098:10147:case 53:
     1098:10148:{ yyval = yyvsp[-1]; ;
     1098:10149:    break;}
      593:10150:case 54:
      593:10151:{ yyval = yyvsp[-1]; ;
      593:10152:    break;}
     8982:10153:case 55:
        -:10154:{
     8982:10155:			++rulelen;
        -:10156:
     8982:10157:			if ( caseins && yyvsp[0] >= 'A' && yyvsp[0] <= 'Z' )
branch  0 taken 73 (fallthrough)
branch  1 taken 8909
branch  2 taken 72 (fallthrough)
branch  3 taken 1
branch  4 taken 0 (fallthrough)
branch  5 taken 72
    #####:10158:				yyvsp[0] = clower( yyvsp[0] );
call    0 never executed
        -:10159:
     8982:10160:			yyval = mkstate( yyvsp[0] );
call    0 returned 8981
        -:10161:			;
     8981:10162:    break;}
     1079:10163:case 56:
     1079:10164:{ yyval = yyvsp[-1]; ;
     1079:10165:    break;}
      219:10166:case 57:
        -:10167:{
      219:10168:			cclnegate( yyvsp[-1] );
call    0 returned 219
      219:10169:			yyval = yyvsp[-1];
        -:10170:			;
      219:10171:    break;}
      880:10172:case 58:
        -:10173:{
      880:10174:			if ( caseins )
branch  0 taken 9 (fallthrough)
branch  1 taken 871
        -:10175:				{
        9:10176:				if ( yyvsp[-2] >= 'A' && yyvsp[-2] <= 'Z' )
branch  0 taken 4 (fallthrough)
branch  1 taken 5
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    #####:10177:					yyvsp[-2] = clower( yyvsp[-2] );
call    0 never executed
        9:10178:				if ( yyvsp[0] >= 'A' && yyvsp[0] <= 'Z' )
branch  0 taken 4 (fallthrough)
branch  1 taken 5
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    #####:10179:					yyvsp[0] = clower( yyvsp[0] );
call    0 never executed
        -:10180:				}
        -:10181:
      880:10182:			if ( yyvsp[-2] > yyvsp[0] )
branch  0 taken 2 (fallthrough)
branch  1 taken 878
        2:10183:				synerr( "negative range in character class" );
call    0 returned 2
        -:10184:
        -:10185:			else
        -:10186:				{
    23422:10187:				for ( i = yyvsp[-2]; i <= yyvsp[0]; ++i )
branch  0 taken 22544
branch  1 taken 878 (fallthrough)
    22544:10188:					ccladd( yyvsp[-3], i );
call    0 returned 22544
        -:10189:
        -:10190:				/* Keep track if this ccl is staying in
        -:10191:				 * alphabetical order.
        -:10192:				 */
      878:10193:				cclsorted = cclsorted && (yyvsp[-2] > lastchar);
branch  0 taken 848 (fallthrough)
branch  1 taken 30
branch  2 taken 559 (fallthrough)
branch  3 taken 289
      878:10194:				lastchar = yyvsp[0];
        -:10195:				}
        -:10196:
      880:10197:			yyval = yyvsp[-3];
        -:10198:			;
      880:10199:    break;}
     2467:10200:case 59:
        -:10201:{
     2467:10202:			if ( caseins && yyvsp[0] >= 'A' && yyvsp[0] <= 'Z' )
branch  0 taken 10 (fallthrough)
branch  1 taken 2457
branch  2 taken 2 (fallthrough)
branch  3 taken 8
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    #####:10203:				yyvsp[0] = clower( yyvsp[0] );
call    0 never executed
        -:10204:
     2467:10205:			ccladd( yyvsp[-1], yyvsp[0] );
call    0 returned 2467
     2467:10206:			cclsorted = cclsorted && (yyvsp[0] > lastchar);
branch  0 taken 2349 (fallthrough)
branch  1 taken 118
branch  2 taken 1788 (fallthrough)
branch  3 taken 561
     2467:10207:			lastchar = yyvsp[0];
     2467:10208:			yyval = yyvsp[-1];
        -:10209:			;
     2467:10210:    break;}
    #####:10211:case 60:
        -:10212:{
        -:10213:			/* Too hard to properly maintain cclsorted. */
    #####:10214:			cclsorted = false;
    #####:10215:			yyval = yyvsp[-1];
        -:10216:			;
    #####:10217:    break;}
     1298:10218:case 61:
        -:10219:{
     1298:10220:			cclsorted = true;
     1298:10221:			lastchar = 0;
     1298:10222:			currccl = yyval = cclinit();
call    0 returned 1298
        -:10223:			;
     1298:10224:    break;}
    #####:10225:case 62:
    #####:10226:{ CCL_EXPR(isalnum) ;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:10227:    break;}
    #####:10228:case 63:
    #####:10229:{ CCL_EXPR(isalpha) ;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:10230:    break;}
    #####:10231:case 64:
    #####:10232:{ CCL_EXPR(IS_BLANK) ;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:10233:    break;}
    #####:10234:case 65:
    #####:10235:{ CCL_EXPR(iscntrl) ;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:10236:    break;}
    #####:10237:case 66:
    #####:10238:{ CCL_EXPR(isdigit) ;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:10239:    break;}
    #####:10240:case 67:
    #####:10241:{ CCL_EXPR(isgraph) ;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:10242:    break;}
    #####:10243:case 68:
    #####:10244:{ CCL_EXPR(islower) ;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:10245:    break;}
    #####:10246:case 69:
    #####:10247:{ CCL_EXPR(isprint) ;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:10248:    break;}
    #####:10249:case 70:
    #####:10250:{ CCL_EXPR(ispunct) ;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:10251:    break;}
    #####:10252:case 71:
    #####:10253:{ CCL_EXPR(isspace) ;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:10254:    break;}
    #####:10255:case 72:
        -:10256:{
    #####:10257:				if ( caseins )
branch  0 never executed
branch  1 never executed
    #####:10258:					CCL_EXPR(islower)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:10259:				else
    #####:10260:					CCL_EXPR(isupper)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:10261:				;
    #####:10262:    break;}
    #####:10263:case 73:
    #####:10264:{ CCL_EXPR(isxdigit) ;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:10265:    break;}
     2017:10266:case 74:
        -:10267:{
     2017:10268:			if ( caseins && yyvsp[0] >= 'A' && yyvsp[0] <= 'Z' )
branch  0 taken 18 (fallthrough)
branch  1 taken 1999
branch  2 taken 6 (fallthrough)
branch  3 taken 12
branch  4 taken 0 (fallthrough)
branch  5 taken 6
    #####:10269:				yyvsp[0] = clower( yyvsp[0] );
call    0 never executed
        -:10270:
     2017:10271:			++rulelen;
        -:10272:
     2017:10273:			yyval = link_machines( yyvsp[-1], mkstate( yyvsp[0] ) );
call    0 returned 2017
call    1 returned 2017
        -:10274:			;
     2017:10275:    break;}
     1098:10276:case 75:
     1098:10277:{ yyval = mkstate( SYM_EPSILON ); ;
call    0 returned 1098
     1098:10278:    break;}
        -:10279:}
        -:10280:   /* the action file gets copied in in place of this dollarsign */
    61920:10281:  yyvsp -= yylen;
    61920:10282:  yyssp -= yylen;
        -:10283:#ifdef YYLSP_NEEDED
        -:10284:  yylsp -= yylen;
        -:10285:#endif
        -:10286:
        -:10287:#if YYDEBUG != 0
        -:10288:  if (yydebug)
        -:10289:    {
        -:10290:      short *ssp1 = yyss - 1;
        -:10291:      fprintf (err, "state stack now");
        -:10292:      while (ssp1 != yyssp)
        -:10293:	fprintf (err, " %d", *++ssp1);
        -:10294:      fprintf (err, "\n");
        -:10295:    }
        -:10296:#endif
        -:10297:
    61920:10298:  *++yyvsp = yyval;
        -:10299:
        -:10300:#ifdef YYLSP_NEEDED
        -:10301:  yylsp++;
        -:10302:  if (yylen == 0)
        -:10303:    {
        -:10304:      yylsp->first_line = yylloc.first_line;
        -:10305:      yylsp->first_column = yylloc.first_column;
        -:10306:      yylsp->last_line = (yylsp-1)->last_line;
        -:10307:      yylsp->last_column = (yylsp-1)->last_column;
        -:10308:      yylsp->text = 0;
        -:10309:    }
        -:10310:  else
        -:10311:    {
        -:10312:      yylsp->last_line = (yylsp+yylen-1)->last_line;
        -:10313:      yylsp->last_column = (yylsp+yylen-1)->last_column;
        -:10314:    }
        -:10315:#endif
        -:10316:
        -:10317:  /* Now "shift" the result of the reduction.
        -:10318:     Determine what state that goes to,
        -:10319:     based on the state we popped back to
        -:10320:     and the rule number reduced by.  */
        -:10321:
    61920:10322:  yyn = yyr1[yyn];
        -:10323:
    61920:10324:  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
    61920:10325:  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
branch  0 taken 42939 (fallthrough)
branch  1 taken 18981
branch  2 taken 42939 (fallthrough)
branch  3 taken 0
branch  4 taken 16832 (fallthrough)
branch  5 taken 26107
    16832:10326:    yystate = yytable[yystate];
        -:10327:  else
    45088:10328:    yystate = yydefgoto[yyn - YYNTBASE];
        -:10329:
    61920:10330:  goto yynewstate;
        -:10331:
       19:10332:yyerrlab:   /* here on detecting error */
        -:10333:
       19:10334:  if (! yyerrstatus)
branch  0 taken 6 (fallthrough)
branch  1 taken 13
        -:10335:    /* If not already recovering from an error, report this error.  */
        -:10336:    {
        6:10337:      ++yynerrs;
        -:10338:
        -:10339:#ifdef YYERROR_VERBOSE
        -:10340:      yyn = yypact[yystate];
        -:10341:
        -:10342:      if (yyn > YYFLAG && yyn < YYLAST)
        -:10343:	{
        -:10344:	  int size = 0;
        -:10345:	  char *msg;
        -:10346:	  int x, count;
        -:10347:
        -:10348:	  count = 0;
        -:10349:	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
        -:10350:	  for (x = (yyn < 0 ? -yyn : 0);
        -:10351:	       x < (sizeof(yytname) / sizeof(char *)); x++)
        -:10352:	    if (yycheck[x + yyn] == x)
        -:10353:	      size += strlen(yytname[x]) + 15, count++;
        -:10354:	  msg = (char *) malloc(size + 15);
        -:10355:	  if (msg != 0)
        -:10356:	    {
        -:10357:	      strcpy(msg, "parse error");
        -:10358:
        -:10359:	      if (count < 5)
        -:10360:		{
        -:10361:		  count = 0;
        -:10362:		  for (x = (yyn < 0 ? -yyn : 0);
        -:10363:		       x < (sizeof(yytname) / sizeof(char *)); x++)
        -:10364:		    if (yycheck[x + yyn] == x)
        -:10365:		      {
        -:10366:			strcat(msg, count == 0 ? ", expecting `" : " or `");
        -:10367:			strcat(msg, yytname[x]);
        -:10368:			strcat(msg, "'");
        -:10369:			count++;
        -:10370:		      }
        -:10371:		}
        -:10372:	      yyerror(msg);
        -:10373:	      free(msg);
        -:10374:	    }
        -:10375:	  else
        -:10376:	    yyerror ("parse error; also virtual memory exceeded");
        -:10377:	}
        -:10378:      else
        -:10379:#endif /* YYERROR_VERBOSE */
        6:10380:	yyerror("parse error");
call    0 returned 6
        -:10381:    }
        -:10382:
       19:10383:  goto yyerrlab1;
       19:10384:yyerrlab1:   /* here on error raised explicitly by an action */
        -:10385:
       19:10386:  if (yyerrstatus == 3)
branch  0 taken 11 (fallthrough)
branch  1 taken 8
        -:10387:    {
        -:10388:      /* if just tried and failed to reuse lookahead token after an error, discard it.  */
        -:10389:
        -:10390:      /* return failure if at end of input */
       11:10391:      if (yychar == YYEOF)
branch  0 taken 1 (fallthrough)
branch  1 taken 10
        1:10392:	YYABORT;
        -:10393:
        -:10394:#if YYDEBUG != 0
        -:10395:      if (yydebug)
        -:10396:	fprintf(err, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
        -:10397:#endif
        -:10398:
       10:10399:      yychar = YYEMPTY;
        -:10400:    }
        -:10401:
        -:10402:  /* Else will try to reuse lookahead token
        -:10403:     after shifting the error token.  */
        -:10404:
       18:10405:  yyerrstatus = 3;		/* Each real token shifted decrements this */
        -:10406:
       18:10407:  goto yyerrhandle;
        -:10408:
       16:10409:yyerrdefault:  /* current state does not do anything special for the error token. */
        -:10410:
        -:10411:#if 0
        -:10412:  /* This is wrong; only states that explicitly want error tokens
        -:10413:     should shift them.  */
        -:10414:  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
        -:10415:  if (yyn) goto yydefault;
        -:10416:#endif
        -:10417:
       16:10418:yyerrpop:   /* pop the current state because it cannot handle the error token */
        -:10419:
      16*:10420:  if (yyssp == yyss) YYABORT;
branch  0 taken 0 (fallthrough)
branch  1 taken 16
       16:10421:  yyvsp--;
       16:10422:  yystate = *--yyssp;
        -:10423:#ifdef YYLSP_NEEDED
        -:10424:  yylsp--;
        -:10425:#endif
        -:10426:
        -:10427:#if YYDEBUG != 0
        -:10428:  if (yydebug)
        -:10429:    {
        -:10430:      short *ssp1 = yyss - 1;
        -:10431:      fprintf (err, "Error: state stack now");
        -:10432:      while (ssp1 != yyssp)
        -:10433:	fprintf (err, " %d", *++ssp1);
        -:10434:      fprintf (err, "\n");
        -:10435:    }
        -:10436:#endif
        -:10437:
       34:10438:yyerrhandle:
        -:10439:
       34:10440:  yyn = yypact[yystate];
       34:10441:  if (yyn == YYFLAG)
branch  0 taken 0 (fallthrough)
branch  1 taken 34
    #####:10442:    goto yyerrdefault;
        -:10443:
       34:10444:  yyn += YYTERROR;
       34:10445:  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
branch  0 taken 34 (fallthrough)
branch  1 taken 0
branch  2 taken 34 (fallthrough)
branch  3 taken 0
branch  4 taken 16 (fallthrough)
branch  5 taken 18
       16:10446:    goto yyerrdefault;
        -:10447:
       18:10448:  yyn = yytable[yyn];
       18:10449:  if (yyn < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 18
        -:10450:    {
    #####:10451:      if (yyn == YYFLAG)
branch  0 never executed
branch  1 never executed
    #####:10452:	goto yyerrpop;
    #####:10453:      yyn = -yyn;
    #####:10454:      goto yyreduce;
        -:10455:    }
       18:10456:  else if (yyn == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####:10457:    goto yyerrpop;
        -:10458:
       18:10459:  if (yyn == YYFINAL)
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####:10460:    YYACCEPT;
        -:10461:
        -:10462:#if YYDEBUG != 0
        -:10463:  if (yydebug)
        -:10464:    fprintf(err, "Shifting error token, ");
        -:10465:#endif
        -:10466:
       18:10467:  *++yyvsp = yylval;
        -:10468:#ifdef YYLSP_NEEDED
        -:10469:  *++yylsp = yylloc;
        -:10470:#endif
        -:10471:
       18:10472:  yystate = yyn;
       18:10473:  goto yynewstate;
        -:10474:
      551:10475: yyacceptlab:
        -:10476:  /* YYACCEPT comes here.  */
      551:10477:  if (yyfree_stacks)
branch  0 taken 0 (fallthrough)
branch  1 taken 551
        -:10478:    {
    #####:10479:      free (yyss);
    #####:10480:      free (yyvs);
        -:10481:#ifdef YYLSP_NEEDED
        -:10482:      free (yyls);
        -:10483:#endif
        -:10484:    }
      551:10485:  return 0;
        -:10486:
        1:10487: yyabortlab:
        -:10488:  /* YYABORT comes here.  */
        1:10489:  if (yyfree_stacks)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:10490:    {
    #####:10491:      free (yyss);
    #####:10492:      free (yyvs);
        -:10493:#ifdef YYLSP_NEEDED
        -:10494:      free (yyls);
        -:10495:#endif
        -:10496:    }
        1:10497:  return 1;
        -:10498:}
        -:10499:
        -:10500:
        -:10501:
        -:10502:/* build_eof_action - build the "<<EOF>>" action for the active start
        -:10503: *                    conditions
        -:10504: */
        -:10505:
function build_eof_action called 11 returned 100% blocks executed 100%
       11:10506:void build_eof_action()
        -:10507:	{
        -:10508:	register int i;
        -:10509:	char action_text[MAXLINE];
        -:10510:
       33:10511:	for ( i = 1; i <= scon_stk_ptr; ++i )
branch  0 taken 22
branch  1 taken 11 (fallthrough)
        -:10512:		{
       22:10513:		if ( sceof[scon_stk[i]] )
branch  0 taken 1 (fallthrough)
branch  1 taken 21
        1:10514:			format_pinpoint_message(
        -:10515:				"multiple <<EOF>> rules for start condition %s",
        1:10516:				scname[scon_stk[i]] );
call    0 returned 1
        -:10517:
        -:10518:		else
        -:10519:			{
       21:10520:			sceof[scon_stk[i]] = true;
       21:10521:			sprintf( action_text, "case YY_STATE_EOF(%s):\n",
       21:10522:				scname[scon_stk[i]] );
       21:10523:			add_action( action_text );
call    0 returned 21
        -:10524:			}
        -:10525:		}
        -:10526:
       11:10527:	line_directive_out( (FILE *) 0, 1 );
call    0 returned 11
        -:10528:
        -:10529:	/* This isn't a normal rule after all - don't count it as
        -:10530:	 * such, so we don't have any holes in the rule numbering
        -:10531:	 * (which make generating "rule can never match" warnings
        -:10532:	 * more difficult.
        -:10533:	 */
       11:10534:	--num_rules;
       11:10535:	++num_eof_rules;
       11:10536:	}
        -:10537:
        -:10538:
        -:10539:/* format_synerr - write out formatted syntax error */
        -:10540:
function format_synerr called 4 returned 100% blocks executed 100%
        4:10541:void format_synerr( msg, arg )
        -:10542:char msg[], arg[];
        -:10543:	{
        -:10544:	char errmsg[MAXLINE];
        -:10545:
        4:10546:	(void) sprintf( errmsg, msg, arg );
        4:10547:	synerr( errmsg );
call    0 returned 4
        4:10548:	}
        -:10549:
        -:10550:
        -:10551:/* synerr - report a syntax error */
        -:10552:
function synerr called 25 returned 100% blocks executed 100%
       25:10553:void synerr( str )
        -:10554:char str[];
        -:10555:	{
       25:10556:	syntaxerror = true;
       25:10557:	pinpoint_message( str );
call    0 returned 25
       25:10558:	}
        -:10559:
        -:10560:
        -:10561:/* format_warn - write out formatted warning */
        -:10562:
function format_warn called 0 returned 0% blocks executed 0%
    #####:10563:void format_warn( msg, arg )
        -:10564:char msg[], arg[];
        -:10565:	{
        -:10566:	char warn_msg[MAXLINE];
        -:10567:
    #####:10568:	(void) sprintf( warn_msg, msg, arg );
    #####:10569:	warn( warn_msg );
call    0 never executed
    #####:10570:	}
        -:10571:
        -:10572:
        -:10573:/* warn - report a warning, unless -w was given */
        -:10574:
function warn called 0 returned 0% blocks executed 0%
    #####:10575:void warn( str )
        -:10576:char str[];
        -:10577:	{
    #####:10578:	line_warning( str, linenum );
call    0 never executed
    #####:10579:	}
        -:10580:
        -:10581:/* format_pinpoint_message - write out a message formatted with one string,
        -:10582: *			     pinpointing its location
        -:10583: */
        -:10584:
function format_pinpoint_message called 1 returned 100% blocks executed 100%
        1:10585:void format_pinpoint_message( msg, arg )
        -:10586:char msg[], arg[];
        -:10587:	{
        -:10588:	char errmsg[MAXLINE];
        -:10589:
        1:10590:	(void) sprintf( errmsg, msg, arg );
        1:10591:	pinpoint_message( errmsg );
call    0 returned 1
        1:10592:	}
        -:10593:
        -:10594:
        -:10595:/* pinpoint_message - write out a message, pinpointing its location */
        -:10596:
function pinpoint_message called 27 returned 100% blocks executed 100%
       27:10597:void pinpoint_message( str )
        -:10598:char str[];
        -:10599:	{
       27:10600:	line_pinpoint( str, linenum );
call    0 returned 27
       27:10601:	}
        -:10602:
        -:10603:
        -:10604:/* line_warning - report a warning at a given line, unless -w was given */
        -:10605:
function line_warning called 46 returned 100% blocks executed 100%
       46:10606:void line_warning( str, line )
        -:10607:char str[];
        -:10608:int line;
        -:10609:	{
        -:10610:	char warning[MAXLINE];
        -:10611:
       46:10612:	if ( ! nowarn )
branch  0 taken 45 (fallthrough)
branch  1 taken 1
        -:10613:		{
       45:10614:		sprintf( warning, "warning, %s", str );
       45:10615:		line_pinpoint( warning, line );
call    0 returned 45
        -:10616:		}
       46:10617:	}
        -:10618:
        -:10619:
        -:10620:/* line_pinpoint - write out a message, pinpointing it at the given line */
        -:10621:
function line_pinpoint called 72 returned 100% blocks executed 100%
       72:10622:void line_pinpoint( str, line )
        -:10623:char str[];
        -:10624:int line;
        -:10625:	{
       72:10626:	fprintf( err, "\"%s\", line %d: %s\n", infilename, line, str );
call    0 returned 72
       72:10627:	}
        -:10628:
        -:10629:
        -:10630:/* yyerror - eat up an error message from the parser;
        -:10631: *	     currently, messages are ignore
        -:10632: */
        -:10633:
function yyerror called 6 returned 100% blocks executed 100%
        6:10634:void yyerror( msg )
        -:10635:char msg[];
        -:10636:	{
        6:10637:	}
        -:10638:/* A lexical scanner generated by flex */
        -:10639:
        -:10640:/* Scanner skeleton version:
        -:10641: * $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $
        -:10642: */
        -:10643:
        -:10644:#define FLEX_SCANNER
        -:10645:#define YY_FLEX_MAJOR_VERSION 2
        -:10646:#define YY_FLEX_MINOR_VERSION 5
        -:10647:
        -:10648:#include <stdio.h>
        -:10649:
        -:10650:
        -:10651:/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
        -:10652:#ifdef c_plusplus
        -:10653:#ifndef __cplusplus
        -:10654:#define __cplusplus
        -:10655:#endif
        -:10656:#endif
        -:10657:
        -:10658:
        -:10659:#ifdef __cplusplus
        -:10660:
        -:10661:#include <stdlib.h>
        -:10662:#include <unistd.h>
        -:10663:
        -:10664:/* Use prototypes in function declarations. */
        -:10665:#define YY_USE_PROTOS
        -:10666:
        -:10667:/* The "const" storage-class-modifier is valid. */
        -:10668:#define YY_USE_CONST
        -:10669:
        -:10670:#else	/* ! __cplusplus */
        -:10671:
        -:10672:#if __STDC__
        -:10673:
        -:10674:#define YY_USE_PROTOS
        -:10675:#define YY_USE_CONST
        -:10676:
        -:10677:#endif	/* __STDC__ */
        -:10678:#endif	/* ! __cplusplus */
        -:10679:
        -:10680:#ifdef __TURBOC__
        -:10681: #pragma warn -rch
        -:10682: #pragma warn -use
        -:10683:#include <io.h>
        -:10684:#include <stdlib.h>
        -:10685:#define YY_USE_CONST
        -:10686:#define YY_USE_PROTOS
        -:10687:#endif
        -:10688:
        -:10689:#ifdef YY_USE_CONST
        -:10690:#define yyconst const
        -:10691:#else
        -:10692:#define yyconst
        -:10693:#endif
        -:10694:
        -:10695:
        -:10696:#ifdef YY_USE_PROTOS
        -:10697:#define YY_PROTO(proto) proto
        -:10698:#else
        -:10699:#define YY_PROTO(proto) ()
        -:10700:#endif
        -:10701:
        -:10702:/* Returned upon end-of-file. */
        -:10703:#define YY_NULL 0
        -:10704:
        -:10705:/* Promotes a possibly negative, possibly signed char to an unsigned
        -:10706: * integer for use as an array index.  If the signed char is negative,
        -:10707: * we want to instead treat it as an 8-bit unsigned char, hence the
        -:10708: * double cast.
        -:10709: */
        -:10710:#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
        -:10711:
        -:10712:/* Enter a start condition.  This macro really ought to take a parameter,
        -:10713: * but we do it the disgusting crufty way forced on us by the ()-less
        -:10714: * definition of BEGIN.
        -:10715: */
        -:10716:#define BEGIN yy_start = 1 + 2 *
        -:10717:
        -:10718:/* Translate the current start state into a value that can be later handed
        -:10719: * to BEGIN to return to the state.  The YYSTATE alias is for lex
        -:10720: * compatibility.
        -:10721: */
        -:10722:#define YY_START ((yy_start - 1) / 2)
        -:10723:#define YYSTATE YY_START
        -:10724:
        -:10725:/* Action number for EOF rule of a given start state. */
        -:10726:#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
        -:10727:
        -:10728:/* Special action meaning "start processing a new file". */
        -:10729:#define YY_NEW_FILE yyrestart( yyin )
        -:10730:
        -:10731:#define YY_END_OF_BUFFER_CHAR 0
        -:10732:
        -:10733:/* Size of default input buffer. */
        -:10734:#define YY_BUF_SIZE 16384
        -:10735:
        -:10736:typedef struct yy_buffer_state *YY_BUFFER_STATE;
        -:10737:
        -:10738:extern int yyleng;
        -:10739:extern FILE *yyin, *yyout;
        -:10740:
        -:10741:#define EOB_ACT_CONTINUE_SCAN 0
        -:10742:#define EOB_ACT_END_OF_FILE 1
        -:10743:#define EOB_ACT_LAST_MATCH 2
        -:10744:
        -:10745:/* The funky do-while in the following #define is used to turn the definition
        -:10746: * int a single C statement (which needs a semi-colon terminator).  This
        -:10747: * avoids problems with code like:
        -:10748: *
        -:10749: * 	if ( condition_holds )
        -:10750: *		yyless( 5 );
        -:10751: *	else
        -:10752: *		do_something_else();
        -:10753: *
        -:10754: * Prior to using the do-while the compiler would get upset at the
        -:10755: * "else" because it interpreted the "if" statement as being all
        -:10756: * done when it reached the ';' after the yyless() call.
        -:10757: */
        -:10758:
        -:10759:/* Return all but the first 'n' matched characters back to the input stream. */
        -:10760:
        -:10761:#define yyless(n) \
        -:10762:	do \
        -:10763:		{ \
        -:10764:		/* Undo effects of setting up yytext. */ \
        -:10765:		*yy_cp = yy_hold_char; \
        -:10766:		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
        -:10767:		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        -:10768:		} \
        -:10769:	while ( 0 )
        -:10770:
        -:10771:#define unput(c) yyunput( c, yytext_ptr )
        -:10772:
        -:10773:/* The following is because we cannot portably get our hands on size_t
        -:10774: * (without autoconf's help, which isn't available because we want
        -:10775: * flex-generated scanners to compile on their own).
        -:10776: */
        -:10777:typedef unsigned int yy_size_t;
        -:10778:
        -:10779:
        -:10780:struct yy_buffer_state
        -:10781:	{
        -:10782:	FILE *yy_input_file;
        -:10783:
        -:10784:	char *yy_ch_buf;		/* input buffer */
        -:10785:	char *yy_buf_pos;		/* current position in input buffer */
        -:10786:
        -:10787:	/* Size of input buffer in bytes, not including room for EOB
        -:10788:	 * characters.
        -:10789:	 */
        -:10790:	yy_size_t yy_buf_size;
        -:10791:
        -:10792:	/* Number of characters read into yy_ch_buf, not including EOB
        -:10793:	 * characters.
        -:10794:	 */
        -:10795:	int yy_n_chars;
        -:10796:
        -:10797:	/* Whether we "own" the buffer - i.e., we know we created it,
        -:10798:	 * and can realloc() it to grow it, and should free() it to
        -:10799:	 * delete it.
        -:10800:	 */
        -:10801:	int yy_is_our_buffer;
        -:10802:
        -:10803:	/* Whether this is an "interactive" input source; if so, and
        -:10804:	 * if we're using stdio for input, then we want to use getc()
        -:10805:	 * instead of fread(), to make sure we stop fetching input after
        -:10806:	 * each newline.
        -:10807:	 */
        -:10808:	int yy_is_interactive;
        -:10809:
        -:10810:	/* Whether we're considered to be at the beginning of a line.
        -:10811:	 * If so, '^' rules will be active on the next match, otherwise
        -:10812:	 * not.
        -:10813:	 */
        -:10814:	int yy_at_bol;
        -:10815:
        -:10816:	/* Whether to try to fill the input buffer when we reach the
        -:10817:	 * end of it.
        -:10818:	 */
        -:10819:	int yy_fill_buffer;
        -:10820:
        -:10821:	int yy_buffer_status;
        -:10822:#define YY_BUFFER_NEW 0
        -:10823:#define YY_BUFFER_NORMAL 1
        -:10824:	/* When an EOF's been seen but there's still some text to process
        -:10825:	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
        -:10826:	 * shouldn't try reading from the input source any more.  We might
        -:10827:	 * still have a bunch of tokens to match, though, because of
        -:10828:	 * possible backing-up.
        -:10829:	 *
        -:10830:	 * When we actually see the EOF, we change the status to "new"
        -:10831:	 * (via yyrestart()), so that the user can continue scanning by
        -:10832:	 * just pointing yyin at a new input file.
        -:10833:	 */
        -:10834:#define YY_BUFFER_EOF_PENDING 2
        -:10835:	};
        -:10836:
        -:10837:static YY_BUFFER_STATE yy_current_buffer = 0;
        -:10838:
        -:10839:/* We provide macros for accessing buffer states in case in the
        -:10840: * future we want to put the buffer states in a more general
        -:10841: * "scanner state".
        -:10842: */
        -:10843:#define YY_CURRENT_BUFFER yy_current_buffer
        -:10844:
        -:10845:
        -:10846:/* yy_hold_char holds the character lost when yytext is formed. */
        -:10847:static char yy_hold_char;
        -:10848:
        -:10849:static int yy_n_chars;		/* number of characters read into yy_ch_buf */
        -:10850:
        -:10851:
        -:10852:int yyleng;
        -:10853:
        -:10854:/* Points to current character in buffer. */
        -:10855:static char *yy_c_buf_p = (char *) 0;
        -:10856:static int yy_init = 1;		/* whether we need to initialize */
        -:10857:static int yy_start = 0;	/* start state number */
        -:10858:
        -:10859:/* Flag which is used to allow yywrap()'s to do buffer switches
        -:10860: * instead of setting up a fresh yyin.  A bit of a hack ...
        -:10861: */
        -:10862:static int yy_did_buffer_switch_on_eof;
        -:10863:
        -:10864:void yyrestart YY_PROTO(( FILE *input_file ));
        -:10865:
        -:10866:void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
        -:10867:void yy_load_buffer_state YY_PROTO(( void ));
        -:10868:YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
        -:10869:void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
        -:10870:void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
        -:10871:void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
        -:10872:#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )
        -:10873:
        -:10874:YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
        -:10875:YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
        -:10876:YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));
        -:10877:
        -:10878:static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
        -:10879:static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
        -:10880:static void yy_flex_free YY_PROTO(( void * ));
        -:10881:
        -:10882:#define yy_new_buffer yy_create_buffer
        -:10883:
        -:10884:#define yy_set_interactive(is_interactive) \
        -:10885:	{ \
        -:10886:	if ( ! yy_current_buffer ) \
        -:10887:		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        -:10888:	yy_current_buffer->yy_is_interactive = is_interactive; \
        -:10889:	}
        -:10890:
        -:10891:#define yy_set_bol(at_bol) \
        -:10892:	{ \
        -:10893:	if ( ! yy_current_buffer ) \
        -:10894:		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        -:10895:	yy_current_buffer->yy_at_bol = at_bol; \
        -:10896:	}
        -:10897:
        -:10898:#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
        -:10899:
        -:10900:typedef unsigned char YY_CHAR;
        -:10901:FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
        -:10902:typedef int yy_state_type;
        -:10903:extern char *yytext;
        -:10904:#define yytext_ptr yytext
        -:10905:
        -:10906:static yy_state_type yy_get_previous_state YY_PROTO(( void ));
        -:10907:static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
        -:10908:static int yy_get_next_buffer YY_PROTO(( void ));
        -:10909:static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
        -:10910:
        -:10911:/* Done after the current pattern has been matched and before the
        -:10912: * corresponding action - sets up yytext.
        -:10913: */
        -:10914:#define YY_DO_BEFORE_ACTION \
        -:10915:	yytext_ptr = yy_bp; \
        -:10916:	yyleng = (int) (yy_cp - yy_bp); \
        -:10917:	yy_hold_char = *yy_cp; \
        -:10918:	*yy_cp = '\0'; \
        -:10919:	yy_c_buf_p = yy_cp;
        -:10920:
        -:10921:#define YY_NUM_RULES 165
        -:10922:#define YY_END_OF_BUFFER 166
        -:10923:static yyconst short int yy_accept[769] =
        -:10924:    {   0,
        -:10925:        0,    0,    0,    0,   87,   87,  163,  163,    0,    0,
        -:10926:        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        -:10927:        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        -:10928:        0,    0,    0,    0,    0,    0,    0,    0,  166,  164,
        -:10929:        7,   18,  164,   16,    1,   17,  164,  164,  164,  164,
        -:10930:       15,  108,  100,  101,  108,   93,  108,  107,  108,  108,
        -:10931:      108,  107,   99,   89,  108,  108,   91,   92,   87,   88,
        -:10932:       87,   86,   85,   86,   86,  163,  163,   28,   29,   28,
        -:10933:       28,   28,   28,   28,   28,   31,   30,   32,   31,  113,
        -:10934:      109,  110,  112,  114,  141,  142,  141,  139,  138,  140,
        -:10935:
        -:10936:      115,  117,  115,  116,  115,  120,  120,  120,  120,  122,
        -:10937:      124,  122,  122,  122,  122,  123,  151,  155,  151,  154,
        -:10938:      156,  156,  152,  152,  152,  149,  150,  164,   82,  164,
        -:10939:       21,   22,   21,   20,  157,  159,  157,  160,  161,  147,
        -:10940:      147,  148,  147,  147,  147,  147,  147,  147,  147,   81,
        -:10941:       34,   33,   81,   81,   81,   81,   35,   81,   81,   81,
        -:10942:       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
        -:10943:       81,   81,   81,   81,   81,   81,   26,   23,   26,   24,
        -:10944:        7,   18,    0,   16,    1,   17,    0,    0,    0,   14,
        -:10945:        8,    0,    0,    0,    0,    4,    5,    0,    2,   15,
        -:10946:
        -:10947:      100,  101,    0,    0,    0,   95,    0,    0,  105,  105,
        -:10948:        0,  162,  162,  162,   94,    0,   99,   89,    0,    0,
        -:10949:        0,   91,   92,  104,   90,    0,   87,   88,   86,   85,
        -:10950:       85,   83,   84,  163,  163,   28,   29,   28,   28,   28,
        -:10951:       28,   31,   30,   32,  111,  112,  142,  138,  117,    0,
        -:10952:      118,  119,  124,  121,  151,  155,    0,  153,    0,  144,
        -:10953:      152,  152,  152,    0,   82,    0,   21,   22,   21,   19,
        -:10954:      157,  159,  158,  147,  147,  147,  148,  143,  147,  147,
        -:10955:      147,   34,   33,    0,   80,    0,    0,   81,   81,   81,
        -:10956:       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
        -:10957:
        -:10958:       81,   81,   81,   36,   81,   81,   81,   81,   81,   81,
        -:10959:       81,   81,   81,   81,    0,   25,   24,    0,   14,    8,
        -:10960:        0,   12,    0,    0,    0,    0,    0,    4,    5,    0,
        -:10961:        6,    0,   96,    0,   97,    0,    0,  105,  105,    0,
        -:10962:      105,  105,  105,  162,  162,    0,  106,   90,   98,    0,
        -:10963:      104,    0,   83,   84,   28,   28,   28,   27,   28,    0,
        -:10964:        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        -:10965:        0,  152,  152,  143,  143,  147,  147,    0,    0,   81,
        -:10966:       81,   81,   81,   81,   44,   81,   81,   81,   49,   81,
        -:10967:       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
        -:10968:
        -:10969:       81,   81,   81,   81,   81,   81,   81,   81,    0,   81,
        -:10970:       81,   81,   81,    0,    0,    0,   12,    0,    0,    0,
        -:10971:        0,    0,    0,    4,    5,    0,  105,  105,  105,  105,
        -:10972:      105,  105,  162,    0,    0,   28,   28,    0,    0,    0,
        -:10973:        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        -:10974:      152,  152,  147,  147,   37,   38,   81,   81,   81,   81,
        -:10975:       81,   81,   81,   81,   50,   51,   81,   81,   81,   55,
        -:10976:       81,   81,   81,   81,   81,   81,   60,   81,   81,   81,
        -:10977:       81,   81,   81,   67,    0,    0,    0,   81,   81,   81,
        -:10978:       81,    0,   13,    0,    0,    0,    0,    0,    0,  105,
        -:10979:
        -:10980:      105,  105,  105,  105,  105,    0,    0,   28,   28,  137,
        -:10981:        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        -:10982:        0,    0,  152,  152,  147,  147,   39,   81,   41,   81,
        -:10983:       43,   81,   81,   81,   47,   81,   52,   81,   81,   81,
        -:10984:       81,   81,   81,   81,   81,   81,   62,   81,   81,   65,
        -:10985:       81,    0,    0,    0,    0,   81,   81,   81,   81,    3,
        -:10986:        0,    0,    0,    0,  105,  105,  105,    0,    0,   28,
        -:10987:       28,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        -:10988:        0,    0,    0,  145,  146,  145,  146,   81,   42,   81,
        -:10989:       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
        -:10990:
        -:10991:       81,   78,   61,   81,   64,   81,    0,    0,    0,    0,
        -:10992:       81,   81,   69,   70,    0,   10,    0,   11,    0,  103,
        -:10993:        0,  102,    0,    0,    0,    0,    0,    0,    0,    0,
        -:10994:        0,    0,    0,    0,   81,   81,   81,   45,   81,   48,
        -:10995:       81,   81,   81,   81,   77,   81,   59,   63,   66,    0,
        -:10996:        0,    0,    0,   79,   81,    0,  102,    0,    0,    0,
        -:10997:        0,    0,    0,    0,    0,    0,    0,    0,    0,   81,
        -:10998:       81,   81,   46,   81,   81,   56,   81,   81,    0,    0,
        -:10999:        0,    0,   68,    0,    9,    0,  125,  126,  127,  128,
        -:11000:      129,  130,  131,  132,  133,  134,  135,    0,   81,   81,
        -:11001:
        -:11002:       81,   81,   81,   81,   81,    0,    0,    0,    0,    0,
        -:11003:      136,   81,   81,   81,   81,   54,   81,   81,    0,    0,
        -:11004:        0,    0,    0,    0,   81,   81,   81,   53,   81,   58,
        -:11005:        0,    0,    0,    0,    0,    0,   81,   81,   81,   81,
        -:11006:       72,    0,    0,    0,    0,   73,   81,   81,   81,   81,
        -:11007:       71,    0,   75,    0,   81,   81,   81,   74,   76,   81,
        -:11008:       81,   81,   81,   81,   81,   57,   40,    0
        -:11009:    } ;
        -:11010:
        -:11011:static yyconst int yy_ec[256] =
        -:11012:    {   0,
        -:11013:        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        -:11014:        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        -:11015:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11016:        1,    2,    1,    5,    6,    7,    8,    1,    9,   10,
        -:11017:       10,   11,   12,   13,   14,   10,   15,   16,   16,   16,
        -:11018:       16,   16,   16,   16,   17,   18,   19,   20,    1,   21,
        -:11019:       22,   23,   10,    1,   31,   32,   33,   34,   35,   36,
        -:11020:       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        -:11021:       47,   48,   49,   50,   51,   52,   53,   54,   55,   47,
        -:11022:       26,   27,   28,   29,   30,    1,   31,   32,   33,   34,
        -:11023:
        -:11024:       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        -:11025:       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
        -:11026:       55,   47,   56,   57,   58,    1,    1,    1,    1,    1,
        -:11027:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11028:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11029:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11030:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11031:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11032:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11033:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11034:
        -:11035:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11036:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11037:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11038:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11039:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11040:        1,    1,    1,    1,    1
        -:11041:    } ;
        -:11042:
        -:11043:static yyconst int yy_meta[59] =
        -:11044:    {   0,
        -:11045:        1,    1,    2,    1,    3,    1,    1,    1,    4,    1,
        -:11046:        5,    6,    1,    7,    4,    8,    8,    8,    8,    1,
        -:11047:        1,    1,    1,    9,   10,    1,   11,   12,    1,   13,
        -:11048:       14,   14,   14,   14,   14,   14,   15,   15,   15,   15,
        -:11049:       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
        -:11050:       15,   15,   15,   15,   15,    4,    1,   16
        -:11051:    } ;
        -:11052:
        -:11053:
        -:11054:
        -:11055:#ifndef F_AA_6
        -:11056:static yyconst short int yy_base[858] =
        -:11057:#else
        -:11058:static yyconst short int yy_base[838] =
        -:11059:#endif
        -:11060:    {   0,
        -:11061:        0,   58,  115,  172,  120,  129, 2712, 2711,  230, 2705,
        -:11062:      136,  141,  288,    0, 2683, 2682,  144,  151,  185,  191,
        -:11063:      178,  188,  344,  347,  375,    0,  125,  131,  147,  216,
        -:11064:      431,  434,  461,    0,  519,    0,  205,  349, 2710, 2716,
        -:11065:      353, 2716, 2706,    0,  360, 2716, 2705,  144,  570, 2696,
        -:11066:        0, 2716,  577, 2716, 2703, 2716,  438, 2716, 2684,  126,
        -:11067:      149,  427,  591, 2716, 2701,  141, 2682, 2716,    0, 2716,
        -:11068:     2699,    0, 2699, 2697,  155, 2696, 2716,    0, 2716, 2695,
        -:11069:     2716,    0, 2662, 2641, 2637,    0, 2692, 2716, 2690, 2716,
        -:11070:     2716, 2663,    0, 2716, 2716, 2716, 2688, 2716,  431, 2716,
        -:11071:
        -:11072:     2716, 2716, 2687, 2716,  567, 2716, 2669,  571,  164, 2716,
        -:11073:     2716, 2685,    0, 2667,  573, 2716,    0, 2716, 2683, 2716,
        -:11074:      573, 2674,    0, 2649, 2628, 2716, 2716,  222, 2716,  356,
        -:11075:      448, 2716,  450, 2667,    0, 2716, 2678, 2716,    0,    0,
        -:11076:      198, 2716, 2677, 2621, 2716, 2667,    0, 2642, 2621, 2716,
        -:11077:     2673, 2716, 2671, 2668, 2640, 2639, 2716,  544, 2639,  579,
        -:11078:     2634, 2635,  318,    0, 2623, 2631,  424,  562, 2614,  587,
        -:11079:     2629, 2613, 2618, 2626, 2629, 2604, 2716, 2716, 2653,  612,
        -:11080:      634, 2716, 2654,    0,  637, 2716, 2653,  600, 2616,    0,
        -:11081:        0,  641,  647,  651,  669,    0,    0,  453, 2716,    0,
        -:11082:
        -:11083:      672, 2716, 2651, 2597,  605, 2716, 2649, 2616,  620,  657,
        -:11084:      645, 2716,  662,    0, 2716, 2592,  688, 2716, 2646, 2592,
        -:11085:     2636, 2625, 2716,    0, 2716, 2610,    0, 2716,    0,    0,
        -:11086:     2642,    0,    0, 2640, 2716,    0, 2716,    0, 2602, 2598,
        -:11087:      745,    0, 2638, 2716, 2716,    0, 2716,  688, 2716,  773,
        -:11088:     2716, 2716, 2716, 2716,    0, 2716,  673, 2716,    0, 2716,
        -:11089:        0, 2599, 2595,  690, 2716,  698,  707, 2716,  709, 2716,
        -:11090:        0, 2716, 2716,    0,  596, 2579, 2716,  827,    0, 2596,
        -:11091:     2592, 2632, 2716, 2628, 2716, 2593, 2592,    0,  642, 2582,
        -:11092:      563, 2617, 2579,  620, 2578, 2577, 2583,  669, 2570, 2584,
        -:11093:
        -:11094:     2572,    0, 2569, 2716, 2570, 2571, 2579, 2582,  685,  125,
        -:11095:     2570, 2567, 2566,  688, 2608, 2716,  716, 2568,    0,    0,
        -:11096:      720, 2716, 2608,  884, 2562, 2559, 2569,    0,    0,  723,
        -:11097:     2716,  739, 2716,  805, 2716,  808, 2562,  787,  869,  876,
        -:11098:      930,  881,  973,  800,    0, 2548, 2716, 2716, 2716, 2570,
        -:11099:        0, 2559,    0,    0, 2568, 2557,    0, 2716,    0, 1009,
        -:11100:     2581,  678,  870,  871,  874,  879,  913,  992,  974, 1013,
        -:11101:      885, 2565, 2554,    0, 1067, 2563, 2552, 2546, 2545, 2557,
        -:11102:     2562, 2561, 2550, 2557,    0, 2554, 2537, 2556,    0, 2536,
        -:11103:     2543, 2533, 2548, 2568, 2537, 2549, 2544, 2542, 2541, 2532,
        -:11104:
        -:11105:     2539, 2540, 2538, 2539,  578, 2520, 2538, 2525,  860, 2526,
        -:11106:     2528, 2521, 2517, 2529,  817, 1044, 2716,  822, 1095,  914,
        -:11107:     2532, 2523, 2517,    0,    0, 2524, 1102, 1025, 1142, 2539,
        -:11108:     1028, 1163, 2716, 2513, 2521, 2523, 2507,    0, 2526, 1058,
        -:11109:      891, 1014, 1019,  894, 1038, 1080, 1072, 1086, 1083, 1081,
        -:11110:     2520, 2504, 2518, 2502, 2716, 2716, 2505, 2493, 2492, 2495,
        -:11111:     2507, 1148, 2507, 2492,    0,    0, 2492, 2493, 2507,    0,
        -:11112:     2525, 2490, 2498, 2522, 2485, 2495,    0, 2500, 2491, 2487,
        -:11113:     2479, 2479, 2483,    0,  875, 2494, 2481, 2494, 2480, 2475,
        -:11114:     2491, 2519, 2716,  920,  999, 2465, 2474, 2468, 2494, 2496,
        -:11115:
        -:11116:     1105, 1184, 1081,  902,  969, 2479, 2491, 2463, 2477, 2716,
        -:11117:      165, 1090, 1144, 1143, 1147, 1163, 1095, 1145, 1037, 1085,
        -:11118:     1150, 1173, 2461, 2475, 2459, 2473,    0, 2458,    0, 2460,
        -:11119:        0, 1165, 2454, 2469,    0, 2461,    0, 2471, 2410, 2414,
        -:11120:     2434, 2400, 2393, 2405, 2385, 2382,    0, 2383, 2335,    0,
        -:11121:     2335, 2330, 2326, 2309, 2278, 2259, 2269, 2268, 2256, 2297,
        -:11122:     1046, 2238, 2242, 2253, 1179, 1142, 1145, 2247, 2246,    0,
        -:11123:        0, 1191, 1192, 1172, 1201, 1202, 1204, 1205, 1206, 1207,
        -:11124:     1209, 1210, 1208,    0,    0,    0,    0, 2254,    0, 2221,
        -:11125:     2229, 2218, 2208, 2200, 2209, 2198, 2195, 2165, 2168, 2149,
        -:11126:
        -:11127:     2132,    0,    0, 2129,    0, 2139, 2143, 2134, 2124, 2137,
        -:11128:     2117, 2116,    0,    0, 1228, 2716, 1232, 2716, 2111, 2716,
        -:11129:     2117, 2716, 2115, 2114, 2108, 2107, 2106, 2103, 2102, 2098,
        -:11130:     2095, 2063, 2047, 1213, 2012, 1986, 1975,    0, 1954,    0,
        -:11131:     1947, 1950, 1941, 1945,    0, 1942,    0,    0,    0, 1938,
        -:11132:     1940, 1934, 1905,    0, 1872, 1234, 2716, 1888, 1882, 1881,
        -:11133:     1864, 1848, 1832, 1828, 1827, 1826, 1823, 1806, 1809, 1784,
        -:11134:     1787, 1772,    0, 1781, 1786,    0, 1766, 1767, 1759, 1744,
        -:11135:     1213, 1736,    0, 1236, 2716, 1245, 2716, 2716, 2716, 2716,
        -:11136:     2716, 2716, 2716, 2716, 2716, 2716, 2716, 1750, 1727, 1720,
        -:11137:
        -:11138:     1701, 1687, 1670, 1681, 1667, 1679, 1659,  689, 1658, 1671,
        -:11139:     2716, 1657, 1627, 1621, 1635,    0, 1603, 1596, 1595, 1608,
        -:11140:     1602, 1587, 1586, 1583, 1581, 1587, 1555,    0, 1547,    0,
        -:11141:     1527, 1507, 1520, 1503, 1483, 1482, 1485, 1443, 1440, 1228,
        -:11142:     2716, 1225, 1224, 1206, 1210, 2716, 1213, 1202, 1018,  948,
        -:11143:     2716,  945, 2716,  884,  780,  771,  779, 2716, 2716,  689,
        -:11144:      673,  581,  408,  318,   86,    0,    0, 2716, 1263, 1279,
        -:11145:     1295, 1311, 1327, 1343, 1359, 1375, 1391, 1407, 1423, 1439,
        -:11146:     1455, 1471, 1481, 1496, 1505, 1520, 1536, 1545, 1560, 1576,
        -:11147:     1592, 1608, 1624, 1634, 1649, 1659, 1674, 1690, 1706, 1718,
        -:11148:
        -:11149:     1728, 1743, 1759, 1775, 1791, 1807, 1817, 1832, 1843, 1236,
        -:11150:     1858, 1874, 1890, 1898, 1905, 1920, 1936, 1952, 1968, 1977,
        -:11151:     1985, 2001, 2017, 2033, 2049, 2065, 2081, 2097, 2113, 2123,
        -:11152:     2138, 2148, 2155, 2170, 2182, 2192, 2207, 2223, 2239, 2255,
        -:11153:     2265, 2280, 2291, 2306, 2322, 2338, 2354, 2364, 2373, 2388,
        -:11154:     2404, 2420, 2429, 2437, 2453, 2469, 2485
        -:11155:    } ;
        -:11156:
        -:11157:static yyconst short int yy_def[858] =
        -:11158:    {   0,
        -:11159:      768,  768,  769,  769,  770,  771,  772,  772,  768,    9,
        -:11160:      773,  773,  768,   13,  774,  774,  775,  775,  776,  776,
        -:11161:      777,  777,  778,  778,  768,   25,  779,  779,  780,  780,
        -:11162:      781,  781,  768,   33,  768,   35,  782,  782,  768,  768,
        -:11163:      768,  768,  768,  783,  768,  768,  768,  768,  784,  768,
        -:11164:      785,  768,  768,  768,  768,  768,  768,  768,  768,  786,
        -:11165:      787,  788,  768,  768,  768,  768,  768,  768,  789,  768,
        -:11166:      789,  790,  791,  790,  790,  792,  768,  793,  768,  793,
        -:11167:      768,  794,  794,  794,  793,  795,  768,  768,  795,  768,
        -:11168:      768,  768,  796,  768,  768,  768,  768,  768,  768,  768,
        -:11169:
        -:11170:      768,  768,  768,  768,  787,  768,  768,  787,  797,  768,
        -:11171:      768,  768,  798,  768,  787,  768,  799,  768,  799,  768,
        -:11172:      800,  768,  801,  801,  801,  768,  768,  802,  768,  802,
        -:11173:      803,  768,  803,  768,  804,  768,  804,  768,  805,  806,
        -:11174:      806,  768,  806,  806,  768,  806,  807,  807,  807,  768,
        -:11175:      768,  768,  768,  808,  768,  768,  768,  809,  809,  809,
        -:11176:      809,  809,  809,  809,  809,  809,  809,  810,  809,  809,
        -:11177:      809,  809,  809,  809,  809,  809,  768,  768,  811,  768,
        -:11178:      768,  768,  768,  783,  768,  768,  768,  768,  768,  812,
        -:11179:      813,  768,  768,  768,  768,  814,  815,  816,  768,  785,
        -:11180:
        -:11181:      768,  768,  768,  768,  817,  768,  768,  768,  818,  818,
        -:11182:      819,  768,  768,  820,  768,  821,  768,  768,  768,  768,
        -:11183:      768,  768,  768,  822,  768,  768,  823,  768,  824,  825,
        -:11184:      825,  826,  827,  828,  768,  829,  768,  830,  830,  830,
        -:11185:      768,  831,  768,  768,  768,  832,  768,  768,  768,  833,
        -:11186:      768,  768,  768,  768,  834,  768,  835,  768,  835,  768,
        -:11187:      836,  836,  836,  837,  768,  837,  838,  768,  838,  768,
        -:11188:      839,  768,  768,  840,  840,  840,  768,  768,  841,  841,
        -:11189:      841,  768,  768,  842,  768,  768,  768,  843,  843,  843,
        -:11190:      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
        -:11191:
        -:11192:      843,  843,  843,  768,  843,  843,  843,  843,  843,  843,
        -:11193:      843,  843,  843,  843,  844,  768,  768,  768,  845,  846,
        -:11194:      847,  768,  768,  768,  768,  768,  768,  848,  849,  850,
        -:11195:      768,  850,  768,  851,  768,  851,  768,  852,  852,  852,
        -:11196:      768,  852,  852,  768,  853,  854,  768,  768,  768,  768,
        -:11197:      855,  768,  826,  827,  830,  830,  241,  768,  241,  241,
        -:11198:      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
        -:11199:      833,  836,  836,  278,  278,  841,  841,  768,  768,  843,
        -:11200:      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
        -:11201:      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
        -:11202:
        -:11203:      843,  843,  843,  843,  843,  843,  843,  843,  768,  843,
        -:11204:      843,  843,  843,  768,  847,  847,  768,  847,  847,  768,
        -:11205:      768,  768,  768,  848,  849,  768,  341,  852,  343,  341,
        -:11206:      852,  343,  768,  768,  768,  830,  830,  360,  768,  833,
        -:11207:      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
        -:11208:      836,  836,  841,  841,  768,  768,  843,  843,  843,  843,
        -:11209:      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
        -:11210:      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
        -:11211:      843,  843,  843,  843,  768,  768,  768,  843,  843,  843,
        -:11212:      843,  768,  768,  847,  847,  768,  768,  768,  768,  427,
        -:11213:
        -:11214:      852,  343,  852,  852,  852,  768,  768,  830,  830,  768,
        -:11215:      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
        -:11216:      833,  833,  836,  836,  841,  841,  843,  843,  843,  843,
        -:11217:      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
        -:11218:      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
        -:11219:      843,  768,  768,  768,  768,  843,  843,  843,  843,  768,
        -:11220:      856,  768,  768,  768,  852,  852,  852,  768,  768,  830,
        -:11221:      830,  833,  833,  833,  833,  833,  833,  833,  833,  833,
        -:11222:      833,  833,  833,  836,  836,  841,  841,  843,  843,  843,
        -:11223:      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
        -:11224:
        -:11225:      843,  843,  843,  843,  843,  843,  768,  768,  768,  768,
        -:11226:      843,  843,  843,  843,  856,  768,  856,  768,  768,  768,
        -:11227:      768,  768,  833,  833,  833,  833,  833,  833,  833,  833,
        -:11228:      833,  833,  833,  833,  843,  843,  843,  843,  843,  843,
        -:11229:      843,  843,  843,  843,  843,  843,  843,  843,  843,  768,
        -:11230:      768,  768,  768,  843,  843,  857,  768,  768,  768,  768,
        -:11231:      768,  768,  768,  768,  768,  768,  768,  768,  833,  843,
        -:11232:      843,  843,  843,  843,  843,  843,  843,  843,  768,  768,
        -:11233:      768,  768,  843,  857,  768,  857,  768,  768,  768,  768,
        -:11234:      768,  768,  768,  768,  768,  768,  768,  768,  843,  843,
        -:11235:
        -:11236:      843,  843,  843,  843,  843,  768,  768,  768,  768,  768,
        -:11237:      768,  843,  843,  843,  843,  843,  843,  843,  768,  768,
        -:11238:      768,  768,  768,  768,  843,  843,  843,  843,  843,  843,
        -:11239:      768,  768,  768,  768,  768,  768,  843,  843,  843,  843,
        -:11240:      768,  768,  768,  768,  768,  768,  843,  843,  843,  843,
        -:11241:      768,  768,  768,  768,  843,  843,  843,  768,  768,  843,
        -:11242:      843,  843,  843,  843,  843,  843,  843,    0,  768,  768,
        -:11243:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11244:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11245:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11246:
        -:11247:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11248:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11249:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11250:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11251:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11252:      768,  768,  768,  768,  768,  768,  768
        -:11253:    } ;
        -:11254:
        -:11255:static yyconst short int yy_nxt[2775] =
        -:11256:    {   0,
        -:11257:       40,   41,   42,   43,   40,   40,   40,   40,   40,   40,
        -:11258:       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
        -:11259:#ifndef F_HD_3
        -:11260:       40,   40,   40,   44,   44,   40,   40,   40,   40,   44,
        -:11261:#else
        -:11262:       40,   40,   44,   44,   40,   40,   40,   40,   44,   44,
        -:11263:#endif
        -:11264:       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
        -:11265:       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
        -:11266:       44,   44,   44,   44,   44,   40,   40,   40,   40,   45,
        -:11267:       46,   47,   40,   48,   40,   49,   40,   40,   40,   40,
        -:11268:       40,   40,   50,   40,   40,   40,   40,   40,   40,   40,
        -:11269:       40,   51,   51,   40,   40,   40,   40,   51,   51,   51,
        -:11270:       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
        -:11271:
        -:11272:       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
        -:11273:       51,   51,   51,   40,   40,   40,   53,   54,   55,   56,
        -:11274:      767,   57,   70,   71,   58,   58,   58,  129,  130,   58,
        -:11275:       73,   70,   74,  129,  130,   59,   75,   87,   88,   89,
        -:11276:       60,   61,   87,   88,   89,  188,   96,   97,  224,  132,
        -:11277:      133,  210,  211,   96,   97,  404,   98,  134,  405,   99,
        -:11278:       99,   99,   99,   98,  213,  213,   99,   99,   99,   99,
        -:11279:       62,   58,   58,   63,   64,   65,   56,  252,   57,   66,
        -:11280:       40,   58,   58,   58,  439,  189,   58,  102,  103,  104,
        -:11281:       40,  252,   67,  102,  103,  104,  225,   60,   61,  275,
        -:11282:
        -:11283:       68,  100,  214,  107,  108,  276,  109,  178,  100,  179,
        -:11284:      232,  105,  233,  107,  108,  572,  109,  105,  132,  133,
        -:11285:      180,  180,  180,  180,  265,  266,  134,   62,   58,   58,
        -:11286:       78,   78,   79,   80,   78,   78,   78,   78,   78,   78,
        -:11287:       81,   78,   78,   78,   78,   78,   78,   78,   78,   78,
        -:11288:       78,   78,   78,   82,   82,   78,   78,   78,   78,   82,
        -:11289:       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
        -:11290:       82,   82,   82,   82,   82,   82,   82,   83,   82,   82,
        -:11291:       82,   82,   82,   82,   84,   78,   78,   78,   90,   90,
        -:11292:       40,   90,   90,   90,   90,   90,   90,   90,   91,   90,
        -:11293:
        -:11294:       91,   90,   90,   90,   90,   90,   90,   90,   90,   90,
        -:11295:       92,   93,   93,   90,   90,   90,   90,   93,   93,   93,
        -:11296:       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
        -:11297:       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
        -:11298:       93,   93,   93,   90,   90,   90,  111,  112,  296,  111,
        -:11299:      112,  178,  766,  179,  181,  182,  183,  113,  265,  266,
        -:11300:      113,  185,  186,  187,  180,  180,  180,  180,  297,  114,
        -:11301:      115,  116,  114,  115,  116,  117,  117,  118,  119,  120,
        -:11302:      117,  117,  117,  121,  117,  117,  117,  117,  117,  122,
        -:11303:      117,  117,  117,  117,  117,  117,  117,  117,  123,  123,
        -:11304:
        -:11305:      117,  117,  117,  117,  123,  123,  123,  123,  123,  123,
        -:11306:      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
        -:11307:      123,  123,  124,  123,  123,  123,  123,  123,  123,  125,
        -:11308:      126,  117,  127,  136,  137,  138,  136,  137,  138,  206,
        -:11309:      206,  207,  215,  215,  215,  215,  248,  248,  248,  248,
        -:11310:      268,  269,  268,  269,  300,  331,  332,  139,  301,  765,
        -:11311:      139,  140,  141,  142,  143,  140,  140,  140,  144,  140,
        -:11312:      140,  145,  140,  140,  140,  146,  140,  140,  140,  140,
        -:11313:      140,  140,  140,  140,  147,  147,  140,  140,  140,  140,
        -:11314:      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
        -:11315:
        -:11316:      147,  147,  147,  147,  147,  147,  147,  147,  148,  147,
        -:11317:      147,  147,  147,  147,  147,  149,  140,  140,  140,  150,
        -:11318:      151,  152,  153,  154,  150,  150,  150,  150,  150,  150,
        -:11319:      150,  150,  150,  150,  150,  155,  156,  150,  150,  150,
        -:11320:      157,  150,  150,  150,  150,  150,  150,  150,  150,  158,
        -:11321:      159,  160,  161,  162,  163,  164,  164,  165,  164,  164,
        -:11322:      166,  167,  168,  169,  170,  164,  171,  172,  164,  173,
        -:11323:      174,  175,  164,  176,  150,  150,  150,  191,  201,  202,
        -:11324:      203,  258,  213,  213,  204,  289,  213,  213,  213,  213,
        -:11325:      292,  290,  217,  218,  219,  383,  303,  275,  220,  259,
        -:11326:
        -:11327:      192,  188,  193,  276,  193,  221,  304,  335,  336,  293,
        -:11328:      193,  222,  384,  193,  194,  195,  480,  193,  196,  223,
        -:11329:      214,  306,  481,  197,  214,  198,  214,  317,  317,  317,
        -:11330:      317,  307,  764,  205,  308,  181,  182,  183,  185,  186,
        -:11331:      187,  189,  321,  322,  323,  339,  340,  205,  321,  322,
        -:11332:      323,  387,  321,  322,  323,  388,  324,  324,  324,  324,
        -:11333:      342,  342,  324,  324,  324,  324,  324,  324,  324,  324,
        -:11334:      321,  322,  323,  201,  202,  203,  341,  344,  344,  204,
        -:11335:      380,  258,  339,  340,  324,  324,  324,  324,  325,  217,
        -:11336:      218,  219,  265,  266,  381,  220,  326,  439,  343,  259,
        -:11337:
        -:11338:      265,  266,  221,  248,  248,  248,  248,  673,  222,  268,
        -:11339:      269,  268,  269,  327,  392,  402,  223,  409,  393,  440,
        -:11340:      410,  416,  417,  418,  403,  331,  332,  763,  205,  411,
        -:11341:      412,  317,  317,  317,  317,  419,  419,  419,  419,  721,
        -:11342:      413,  331,  332,  722,  205,  357,  357,  358,  359,  357,
        -:11343:      357,  357,  357,  357,  357,  360,  357,  357,  357,  357,
        -:11344:      357,  357,  357,  357,  357,  357,  357,  357,  360,  360,
        -:11345:      357,  357,  357,  357,  360,  360,  360,  360,  360,  360,
        -:11346:      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
        -:11347:      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
        -:11348:
        -:11349:      357,  357,  357,  362,  363,  364,  365,  335,  336,  366,
        -:11350:      335,  336,  339,  340,  367,  212,  212,  762,  368,  493,
        -:11351:      494,  369,  761,  370,  417,  494,  371,  374,  374,  760,
        -:11352:      374,  374,  374,  374,  374,  374,  374,  375,  374,  374,
        -:11353:      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
        -:11354:      375,  375,  374,  374,  374,  374,  375,  375,  375,  375,
        -:11355:      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
        -:11356:      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
        -:11357:      375,  375,  374,  374,  374,  420,  322,  323,  427,  439,
        -:11358:      439,  428,  428,  439,  339,  340,  431,  431,  439,  324,
        -:11359:
        -:11360:      324,  324,  324,  338,  439,  485,  339,  340,  486,  487,
        -:11361:      439,  441,  443,  439,  442,  420,  322,  323,  450,  552,
        -:11362:      759,  513,  493,  494,  516,  553,  444,  339,  340,  429,
        -:11363:      338,  338,  439,  338,  338,  338,  338,  338,  338,  338,
        -:11364:      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
        -:11365:      338,  338,  338,  430,  430,  339,  340,  445,  338,  338,
        -:11366:      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
        -:11367:      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
        -:11368:      430,  430,  430,  430,  430,  338,  338,  338,  432,  432,
        -:11369:      432,  432,  758,  439,  339,  340,  432,  757,  339,  340,
        -:11370:
        -:11371:      495,  417,  418,  432,  432,  432,  432,  432,  432,  360,
        -:11372:      360,  439,  438,  360,  360,  360,  360,  360,  360,  448,
        -:11373:      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
        -:11374:      360,  360,  439,  439,  360,  360,  360,  360,  439,  446,
        -:11375:      501,  501,  447,  504,  504,  416,  417,  418,  616,  617,
        -:11376:      339,  340,  638,  339,  340,  515,  439,  439,  449,  419,
        -:11377:      419,  419,  419,  514,  360,  360,  360,  375,  375,  580,
        -:11378:      375,  375,  375,  375,  375,  375,  375,  439,  375,  375,
        -:11379:      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
        -:11380:      517,  439,  375,  375,  375,  375,  495,  417,  418,  439,
        -:11381:
        -:11382:      439,  511,  439,  512,  439,  439,  339,  340,  209,  439,
        -:11383:      419,  419,  419,  419,  439,  519,  520,  581,  518,  522,
        -:11384:      566,  566,  375,  375,  375,  500,  500,  573,  521,  578,
        -:11385:      339,  340,  500,  500,  500,  500,  500,  500,  500,  500,
        -:11386:      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
        -:11387:      500,  500,  500,  500,  500,  500,  500,  502,  502,  502,
        -:11388:      502,  532,  439,  439,  439,  502,  439,  339,  340,  439,
        -:11389:      339,  340,  502,  502,  502,  502,  502,  502,  505,  505,
        -:11390:      505,  505,  439,  533,  582,  576,  505,  574,  579,  534,
        -:11391:      575,  439,  439,  505,  505,  505,  505,  505,  505,  567,
        -:11392:
        -:11393:      567,  567,  567,  590,  339,  340,  338,  567,  577,  583,
        -:11394:      439,  439,  625,  591,  567,  567,  567,  567,  567,  567,
        -:11395:      439,  439,  624,  439,  439,  439,  439,  439,  439,  439,
        -:11396:      616,  617,  439,  623,  616,  617,  685,  686,  685,  686,
        -:11397:      756,  628,  626,  632,  708,  755,  634,  685,  686,  302,
        -:11398:      302,  627,  629,  754,  753,  630,  631,  633,  752,  751,
        -:11399:      750,  709,  669,   52,   52,   52,   52,   52,   52,   52,
        -:11400:       52,   52,   52,   52,   52,   52,   52,   52,   52,   69,
        -:11401:       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
        -:11402:       69,   69,   69,   69,   69,   72,   72,   72,   72,   72,
        -:11403:
        -:11404:       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
        -:11405:       72,   76,   76,   76,   76,   76,   76,   76,   76,   76,
        -:11406:       76,   76,   76,   76,   76,   76,   76,   86,   86,   86,
        -:11407:       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
        -:11408:       86,   86,   86,   40,   40,   40,   40,   40,   40,   40,
        -:11409:       40,   40,   40,   40,   40,   40,   40,   40,   40,   95,
        -:11410:       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
        -:11411:       95,   95,   95,   95,   95,  101,  101,  101,  101,  101,
        -:11412:      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
        -:11413:      101,  106,  106,  106,  106,  106,  106,  106,  106,  106,
        -:11414:
        -:11415:      106,  106,  106,  106,  106,  106,  106,  110,  110,  110,
        -:11416:      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
        -:11417:      110,  110,  110,  128,  128,  128,  128,  128,  128,  128,
        -:11418:      128,  128,  128,  128,  128,  128,  128,  128,  128,  131,
        -:11419:      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
        -:11420:      131,  131,  131,  131,  131,  135,  135,  135,  135,  135,
        -:11421:      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
        -:11422:      135,  177,  177,  177,  177,  177,  177,  177,  177,  177,
        -:11423:      177,  177,  177,  177,  177,  177,  177,  184,  184,  184,
        -:11424:      184,  749,  748,  184,  184,  184,  190,  190,  190,  190,
        -:11425:
        -:11426:      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
        -:11427:      190,  200,  200,  200,  200,  747,  746,  200,  200,  200,
        -:11428:      209,  745,  209,  209,  209,  209,  209,  209,  209,  209,
        -:11429:      209,  209,  209,  209,  209,  209,  212,  744,  212,  212,
        -:11430:      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
        -:11431:      212,  212,  216,  216,  216,  743,  742,  216,  216,  216,
        -:11432:      227,  741,  227,  227,  227,  227,  227,  227,  227,  227,
        -:11433:      227,  227,  227,  227,  227,  227,  229,  740,  229,  229,
        -:11434:      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
        -:11435:      229,  229,  230,  739,  230,  230,  230,  230,  230,  230,
        -:11436:
        -:11437:      230,  230,  230,  230,  230,  230,  230,  230,  234,  234,
        -:11438:      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
        -:11439:      234,  234,  234,  234,  236,  738,  236,  236,  737,  236,
        -:11440:      236,  236,  736,  735,  236,  236,  734,  733,  732,  236,
        -:11441:      238,  238,  238,  238,  731,  730,  238,  238,  238,  242,
        -:11442:      729,  242,  242,  242,  242,  242,  242,  242,  242,  242,
        -:11443:      242,  242,  242,  242,  242,  246,  246,  246,  246,  728,
        -:11444:      727,  246,  246,  246,  251,  726,  251,  251,  251,  251,
        -:11445:      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
        -:11446:      254,  725,  254,  254,  254,  254,  254,  254,  254,  254,
        -:11447:
        -:11448:      254,  724,  254,  254,  254,  254,  255,  723,  720,  719,
        -:11449:      255,  255,  255,  255,  718,  717,  255,  255,  257,  716,
        -:11450:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:11451:      257,  257,  257,  257,  261,  261,  261,  261,  715,  714,
        -:11452:      261,  261,  261,  264,  264,  264,  264,  264,  264,  264,
        -:11453:      264,  264,  264,  264,  264,  264,  264,  264,  264,  267,
        -:11454:      267,  267,  267,  713,  267,  267,  267,  267,  267,  267,
        -:11455:      267,  267,  267,  267,  267,  271,  712,  711,  271,  271,
        -:11456:      271,  271,  271,  271,  271,  710,  271,  271,  271,  271,
        -:11457:      271,  273,  707,  273,  273,  273,  273,  273,  273,  273,
        -:11458:
        -:11459:      273,  273,  273,  273,  273,  273,  273,  274,  706,  274,
        -:11460:      274,  705,  274,  274,  274,  704,  703,  274,  274,  702,
        -:11461:      701,  700,  274,  279,  279,  279,  279,  699,  698,  279,
        -:11462:      279,  279,  284,  697,  284,  284,  284,  284,  284,  284,
        -:11463:      284,  284,  284,  284,  284,  284,  284,  284,  288,  288,
        -:11464:      696,  288,  288,  695,  694,  693,  288,  288,  315,  692,
        -:11465:      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
        -:11466:      315,  315,  315,  315,  319,  691,  319,  319,  319,  319,
        -:11467:      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
        -:11468:      320,  690,  320,  320,  320,  320,  320,  320,  320,  320,
        -:11469:
        -:11470:      320,  320,  320,  320,  320,  320,  328,  328,  689,  688,
        -:11471:      328,  328,  328,  329,  329,  687,  683,  329,  329,  329,
        -:11472:      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
        -:11473:      330,  330,  330,  330,  330,  330,  334,  334,  334,  334,
        -:11474:      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
        -:11475:      334,  334,  338,  682,  338,  338,  338,  338,  338,  338,
        -:11476:      338,  338,  338,  681,  338,  338,  338,  338,  209,  680,
        -:11477:      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
        -:11478:      209,  209,  209,  209,  345,  345,  679,  678,  677,  676,
        -:11479:      345,  346,  346,  346,  346,  675,  674,  346,  346,  346,
        -:11480:
        -:11481:      346,  351,  673,  351,  351,  351,  351,  351,  351,  351,
        -:11482:      351,  351,  351,  351,  351,  351,  351,  227,  672,  227,
        -:11483:      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
        -:11484:      227,  227,  227,  229,  671,  229,  229,  229,  229,  229,
        -:11485:      229,  229,  229,  229,  229,  229,  229,  229,  229,  230,
        -:11486:      670,  230,  230,  230,  230,  230,  230,  230,  230,  230,
        -:11487:      230,  230,  230,  230,  230,  353,  668,  353,  353,  353,
        -:11488:      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
        -:11489:      353,  354,  667,  354,  354,  354,  354,  354,  354,  354,
        -:11490:      354,  354,  354,  354,  354,  354,  354,  234,  234,  234,
        -:11491:
        -:11492:      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
        -:11493:      234,  234,  234,  236,  666,  236,  236,  665,  236,  236,
        -:11494:      236,  664,  663,  236,  236,  662,  661,  660,  236,  238,
        -:11495:      238,  238,  238,  659,  658,  238,  238,  238,  242,  657,
        -:11496:      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
        -:11497:      242,  242,  242,  242,  246,  246,  246,  246,  656,  655,
        -:11498:      246,  246,  246,  361,  361,  654,  653,  652,  361,  361,
        -:11499:      255,  651,  650,  649,  255,  255,  255,  255,  648,  647,
        -:11500:      255,  255,  257,  646,  257,  257,  257,  257,  257,  257,
        -:11501:      257,  257,  257,  257,  257,  257,  257,  257,  261,  261,
        -:11502:
        -:11503:      261,  261,  645,  644,  261,  261,  261,  264,  264,  264,
        -:11504:      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
        -:11505:      264,  264,  264,  267,  267,  267,  267,  643,  267,  267,
        -:11506:      267,  267,  267,  267,  267,  267,  267,  267,  267,  271,
        -:11507:      642,  641,  271,  271,  271,  271,  271,  271,  271,  640,
        -:11508:      271,  271,  271,  271,  271,  274,  639,  274,  274,  638,
        -:11509:      274,  274,  274,  637,  636,  274,  274,  635,  622,  621,
        -:11510:      274,  279,  279,  279,  279,  620,  619,  279,  279,  279,
        -:11511:      284,  618,  284,  284,  284,  284,  284,  284,  284,  284,
        -:11512:      284,  284,  284,  284,  284,  284,  288,  288,  560,  288,
        -:11513:
        -:11514:      288,  614,  613,  612,  288,  288,  315,  611,  315,  315,
        -:11515:      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
        -:11516:      315,  315,  319,  610,  319,  319,  319,  319,  319,  319,
        -:11517:      319,  319,  319,  319,  319,  319,  319,  319,  320,  609,
        -:11518:      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
        -:11519:      320,  320,  320,  320,  415,  415,  415,  415,  415,  415,
        -:11520:      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
        -:11521:      424,  424,  424,  424,  608,  607,  424,  424,  424,  425,
        -:11522:      425,  425,  425,  606,  605,  425,  425,  425,  330,  330,
        -:11523:      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
        -:11524:
        -:11525:      330,  330,  330,  330,  334,  334,  334,  334,  334,  334,
        -:11526:      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
        -:11527:      338,  604,  338,  338,  338,  338,  338,  338,  338,  338,
        -:11528:      338,  603,  338,  338,  338,  338,  433,  433,  602,  601,
        -:11529:      600,  599,  433,  346,  346,  346,  346,  598,  597,  346,
        -:11530:      346,  346,  346,  351,  596,  351,  351,  351,  351,  351,
        -:11531:      351,  351,  351,  351,  351,  351,  351,  351,  351,  615,
        -:11532:      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
        -:11533:      615,  615,  615,  615,  615,  684,  684,  684,  684,  684,
        -:11534:      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
        -:11535:
        -:11536:      684,  595,  594,  593,  592,  589,  588,  587,  586,  585,
        -:11537:      584,  571,  570,  569,  568,  565,  564,  563,  562,  561,
        -:11538:      560,  559,  558,  557,  556,  555,  554,  551,  550,  549,
        -:11539:      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
        -:11540:      538,  537,  536,  535,  531,  530,  529,  528,  527,  526,
        -:11541:      525,  524,  523,  510,  509,  508,  507,  506,  503,  499,
        -:11542:      498,  497,  496,  492,  491,  490,  489,  488,  484,  483,
        -:11543:      482,  479,  478,  477,  476,  475,  474,  473,  472,  471,
        -:11544:      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
        -:11545:      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,
        -:11546:
        -:11547:      439,  437,  436,  435,  434,  347,  426,  423,  422,  421,
        -:11548:      322,  414,  316,  408,  407,  406,  401,  400,  399,  398,
        -:11549:      397,  396,  395,  394,  391,  390,  389,  386,  385,  382,
        -:11550:      379,  378,  285,  282,  377,  376,  278,  373,  372,  243,
        -:11551:      356,  355,  235,  231,  352,  350,  349,  348,  218,  347,
        -:11552:      337,  206,  333,  202,  318,  186,  182,  316,  314,  313,
        -:11553:      312,  311,  310,  309,  305,  299,  298,  295,  294,  291,
        -:11554:      287,  286,  285,  283,  282,  281,  280,  260,  278,  277,
        -:11555:      272,  270,  263,  262,  260,  256,  250,  253,  250,  249,
        -:11556:      247,  245,  244,  243,  241,  240,  239,  237,  235,  228,
        -:11557:
        -:11558:      231,  228,  226,  218,  208,  202,  199,  186,  182,  768,
        -:11559:       94,   94,   85,   77,   77,   39,  768,  768,  768,  768,
        -:11560:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11561:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11562:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11563:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11564:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11565:      768,  768,  768,  768
        -:11566:    } ;
        -:11567:
        -:11568:static yyconst short int yy_chk[2775] =
        -:11569:    {   0,
        -:11570:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11571:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11572:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11573:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11574:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:11575:        1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
        -:11576:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:11577:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:11578:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:11579:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:11580:
        -:11581:        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        -:11582:        2,    2,    2,    2,    2,    2,    3,    3,    3,    3,
        -:11583:      765,    3,    5,    5,    3,    3,    3,   27,   27,    3,
        -:11584:        6,    6,    6,   28,   28,    3,    6,   11,   11,   11,
        -:11585:        3,    3,   12,   12,   12,   48,   17,   17,   66,   29,
        -:11586:       29,   60,   60,   18,   18,  310,   17,   29,  310,   17,
        -:11587:       17,   17,   17,   18,   61,   61,   18,   18,   18,   18,
        -:11588:        3,    3,    3,    4,    4,    4,    4,  109,    4,    4,
        -:11589:       21,    4,    4,    4,  511,   48,    4,   19,   19,   19,
        -:11590:       22,  109,    4,   20,   20,   20,   66,    4,    4,  141,
        -:11591:
        -:11592:        4,   17,   61,   21,   21,  141,   21,   37,   18,   37,
        -:11593:       75,   19,   75,   22,   22,  511,   22,   20,   30,   30,
        -:11594:       37,   37,   37,   37,  128,  128,   30,    4,    4,    4,
        -:11595:        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        -:11596:        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        -:11597:        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        -:11598:        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        -:11599:        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        -:11600:        9,    9,    9,    9,    9,    9,    9,    9,   13,   13,
        -:11601:       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        -:11602:
        -:11603:       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        -:11604:       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        -:11605:       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        -:11606:       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        -:11607:       13,   13,   13,   13,   13,   13,   23,   23,  163,   24,
        -:11608:       24,   38,  764,   38,   41,   41,   41,   23,  130,  130,
        -:11609:       24,   45,   45,   45,   38,   38,   38,   38,  163,   23,
        -:11610:       23,   23,   24,   24,   24,   25,   25,   25,   25,   25,
        -:11611:       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        -:11612:       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        -:11613:
        -:11614:       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        -:11615:       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        -:11616:       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        -:11617:       25,   25,   25,   31,   31,   31,   32,   32,   32,   57,
        -:11618:       57,   57,   62,   62,   62,   62,   99,   99,   99,   99,
        -:11619:      131,  131,  133,  133,  167,  198,  198,   31,  167,  763,
        -:11620:       32,   33,   33,   33,   33,   33,   33,   33,   33,   33,
        -:11621:       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
        -:11622:       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
        -:11623:       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
        -:11624:
        -:11625:       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
        -:11626:       33,   33,   33,   33,   33,   33,   33,   33,   33,   35,
        -:11627:       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
        -:11628:       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
        -:11629:       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
        -:11630:       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
        -:11631:       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
        -:11632:       35,   35,   35,   35,   35,   35,   35,   49,   53,   53,
        -:11633:       53,  121,  105,  105,   53,  158,  108,  108,  115,  115,
        -:11634:      160,  158,   63,   63,   63,  291,  168,  275,   63,  121,
        -:11635:
        -:11636:       49,  188,   49,  275,   49,   63,  168,  205,  205,  160,
        -:11637:       49,   63,  291,   49,   49,   49,  405,   49,   49,   63,
        -:11638:      105,  170,  405,   49,  108,   49,  115,  180,  180,  180,
        -:11639:      180,  170,  762,   53,  170,  181,  181,  181,  185,  185,
        -:11640:      185,  188,  192,  192,  192,  209,  209,   63,  193,  193,
        -:11641:      193,  294,  194,  194,  194,  294,  192,  192,  192,  192,
        -:11642:      211,  211,  193,  193,  193,  193,  194,  194,  194,  194,
        -:11643:      195,  195,  195,  201,  201,  201,  210,  213,  213,  201,
        -:11644:      289,  257,  210,  210,  195,  195,  195,  195,  192,  217,
        -:11645:      217,  217,  264,  264,  289,  217,  194,  362,  211,  257,
        -:11646:
        -:11647:      266,  266,  217,  248,  248,  248,  248,  761,  217,  267,
        -:11648:      267,  269,  269,  195,  298,  309,  217,  314,  298,  362,
        -:11649:      314,  321,  321,  321,  309,  330,  330,  760,  201,  314,
        -:11650:      314,  317,  317,  317,  317,  321,  321,  321,  321,  708,
        -:11651:      314,  332,  332,  708,  217,  241,  241,  241,  241,  241,
        -:11652:      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
        -:11653:      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
        -:11654:      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
        -:11655:      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
        -:11656:      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
        -:11657:
        -:11658:      241,  241,  241,  250,  250,  250,  250,  334,  334,  250,
        -:11659:      336,  336,  338,  338,  250,  344,  344,  757,  250,  415,
        -:11660:      415,  250,  756,  250,  418,  418,  250,  278,  278,  755,
        -:11661:      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
        -:11662:      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
        -:11663:      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
        -:11664:      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
        -:11665:      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
        -:11666:      278,  278,  278,  278,  278,  324,  324,  324,  339,  363,
        -:11667:      364,  340,  340,  365,  339,  339,  342,  342,  366,  324,
        -:11668:
        -:11669:      324,  324,  324,  340,  371,  409,  342,  342,  409,  409,
        -:11670:      441,  363,  365,  444,  364,  420,  420,  420,  371,  485,
        -:11671:      754,  441,  494,  494,  444,  485,  366,  504,  504,  340,
        -:11672:      341,  341,  367,  341,  341,  341,  341,  341,  341,  341,
        -:11673:      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
        -:11674:      341,  341,  341,  341,  341,  341,  341,  367,  341,  341,
        -:11675:      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
        -:11676:      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
        -:11677:      341,  341,  341,  341,  341,  341,  341,  341,  343,  343,
        -:11678:      343,  343,  752,  369,  505,  505,  343,  750,  343,  343,
        -:11679:
        -:11680:      495,  495,  495,  343,  343,  343,  343,  343,  343,  360,
        -:11681:      360,  368,  360,  360,  360,  360,  360,  360,  360,  369,
        -:11682:      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
        -:11683:      360,  360,  370,  442,  360,  360,  360,  360,  443,  368,
        -:11684:      428,  428,  368,  431,  431,  416,  416,  416,  561,  561,
        -:11685:      428,  428,  749,  431,  431,  443,  519,  445,  370,  416,
        -:11686:      416,  416,  416,  442,  360,  360,  360,  375,  375,  519,
        -:11687:      375,  375,  375,  375,  375,  375,  375,  440,  375,  375,
        -:11688:      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
        -:11689:      445,  447,  375,  375,  375,  375,  419,  419,  419,  446,
        -:11690:
        -:11691:      450,  440,  449,  440,  520,  448,  503,  503,  503,  512,
        -:11692:      419,  419,  419,  419,  517,  447,  448,  520,  446,  450,
        -:11693:      501,  501,  375,  375,  375,  427,  427,  512,  449,  517,
        -:11694:      501,  501,  427,  427,  427,  427,  427,  427,  427,  427,
        -:11695:      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
        -:11696:      427,  427,  427,  427,  427,  427,  427,  429,  429,  429,
        -:11697:      429,  462,  514,  513,  518,  429,  515,  566,  566,  521,
        -:11698:      567,  567,  429,  429,  429,  429,  429,  429,  432,  432,
        -:11699:      432,  432,  516,  462,  521,  515,  432,  513,  518,  462,
        -:11700:      514,  574,  522,  432,  432,  432,  432,  432,  432,  502,
        -:11701:
        -:11702:      502,  502,  502,  532,  565,  565,  565,  502,  516,  522,
        -:11703:      572,  573,  574,  532,  502,  502,  502,  502,  502,  502,
        -:11704:      575,  576,  573,  577,  578,  579,  580,  583,  581,  582,
        -:11705:      615,  615,  634,  572,  617,  617,  656,  656,  684,  684,
        -:11706:      748,  577,  575,  581,  681,  747,  583,  686,  686,  810,
        -:11707:      810,  576,  578,  745,  744,  579,  580,  582,  743,  742,
        -:11708:      740,  681,  634,  769,  769,  769,  769,  769,  769,  769,
        -:11709:      769,  769,  769,  769,  769,  769,  769,  769,  769,  770,
        -:11710:      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
        -:11711:      770,  770,  770,  770,  770,  771,  771,  771,  771,  771,
        -:11712:
        -:11713:      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
        -:11714:      771,  772,  772,  772,  772,  772,  772,  772,  772,  772,
        -:11715:      772,  772,  772,  772,  772,  772,  772,  773,  773,  773,
        -:11716:      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
        -:11717:      773,  773,  773,  774,  774,  774,  774,  774,  774,  774,
        -:11718:      774,  774,  774,  774,  774,  774,  774,  774,  774,  775,
        -:11719:      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
        -:11720:      775,  775,  775,  775,  775,  776,  776,  776,  776,  776,
        -:11721:      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
        -:11722:      776,  777,  777,  777,  777,  777,  777,  777,  777,  777,
        -:11723:
        -:11724:      777,  777,  777,  777,  777,  777,  777,  778,  778,  778,
        -:11725:      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
        -:11726:      778,  778,  778,  779,  779,  779,  779,  779,  779,  779,
        -:11727:      779,  779,  779,  779,  779,  779,  779,  779,  779,  780,
        -:11728:      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
        -:11729:      780,  780,  780,  780,  780,  781,  781,  781,  781,  781,
        -:11730:      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
        -:11731:      781,  782,  782,  782,  782,  782,  782,  782,  782,  782,
        -:11732:      782,  782,  782,  782,  782,  782,  782,  783,  783,  783,
        -:11733:      783,  739,  738,  783,  783,  783,  784,  784,  784,  784,
        -:11734:
        -:11735:      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
        -:11736:      784,  785,  785,  785,  785,  737,  736,  785,  785,  785,
        -:11737:      786,  735,  786,  786,  786,  786,  786,  786,  786,  786,
        -:11738:      786,  786,  786,  786,  786,  786,  787,  734,  787,  787,
        -:11739:      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
        -:11740:      787,  787,  788,  788,  788,  733,  732,  788,  788,  788,
        -:11741:      789,  731,  789,  789,  789,  789,  789,  789,  789,  789,
        -:11742:      789,  789,  789,  789,  789,  789,  790,  729,  790,  790,
        -:11743:      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
        -:11744:      790,  790,  791,  727,  791,  791,  791,  791,  791,  791,
        -:11745:
        -:11746:      791,  791,  791,  791,  791,  791,  791,  791,  792,  792,
        -:11747:      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
        -:11748:      792,  792,  792,  792,  793,  726,  793,  793,  725,  793,
        -:11749:      793,  793,  724,  723,  793,  793,  722,  721,  720,  793,
        -:11750:      794,  794,  794,  794,  719,  718,  794,  794,  794,  795,
        -:11751:      717,  795,  795,  795,  795,  795,  795,  795,  795,  795,
        -:11752:      795,  795,  795,  795,  795,  796,  796,  796,  796,  715,
        -:11753:      714,  796,  796,  796,  797,  713,  797,  797,  797,  797,
        -:11754:      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
        -:11755:      798,  712,  798,  798,  798,  798,  798,  798,  798,  798,
        -:11756:
        -:11757:      798,  710,  798,  798,  798,  798,  799,  709,  707,  706,
        -:11758:      799,  799,  799,  799,  705,  704,  799,  799,  800,  703,
        -:11759:      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
        -:11760:      800,  800,  800,  800,  801,  801,  801,  801,  702,  701,
        -:11761:      801,  801,  801,  802,  802,  802,  802,  802,  802,  802,
        -:11762:      802,  802,  802,  802,  802,  802,  802,  802,  802,  803,
        -:11763:      803,  803,  803,  700,  803,  803,  803,  803,  803,  803,
        -:11764:      803,  803,  803,  803,  803,  804,  699,  698,  804,  804,
        -:11765:      804,  804,  804,  804,  804,  682,  804,  804,  804,  804,
        -:11766:      804,  805,  680,  805,  805,  805,  805,  805,  805,  805,
        -:11767:
        -:11768:      805,  805,  805,  805,  805,  805,  805,  806,  679,  806,
        -:11769:      806,  678,  806,  806,  806,  677,  675,  806,  806,  674,
        -:11770:      672,  671,  806,  807,  807,  807,  807,  670,  669,  807,
        -:11771:      807,  807,  808,  668,  808,  808,  808,  808,  808,  808,
        -:11772:      808,  808,  808,  808,  808,  808,  808,  808,  809,  809,
        -:11773:      667,  809,  809,  666,  665,  664,  809,  809,  811,  663,
        -:11774:      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
        -:11775:      811,  811,  811,  811,  812,  662,  812,  812,  812,  812,
        -:11776:      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
        -:11777:      813,  661,  813,  813,  813,  813,  813,  813,  813,  813,
        -:11778:
        -:11779:      813,  813,  813,  813,  813,  813,  814,  814,  660,  659,
        -:11780:      814,  814,  814,  815,  815,  658,  655,  815,  815,  815,
        -:11781:      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
        -:11782:      816,  816,  816,  816,  816,  816,  817,  817,  817,  817,
        -:11783:      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
        -:11784:      817,  817,  818,  653,  818,  818,  818,  818,  818,  818,
        -:11785:      818,  818,  818,  652,  818,  818,  818,  818,  819,  651,
        -:11786:      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
        -:11787:      819,  819,  819,  819,  820,  820,  650,  646,  644,  643,
        -:11788:      820,  821,  821,  821,  821,  642,  641,  821,  821,  821,
        -:11789:
        -:11790:      821,  822,  639,  822,  822,  822,  822,  822,  822,  822,
        -:11791:      822,  822,  822,  822,  822,  822,  822,  823,  637,  823,
        -:11792:      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
        -:11793:      823,  823,  823,  824,  636,  824,  824,  824,  824,  824,
        -:11794:      824,  824,  824,  824,  824,  824,  824,  824,  824,  825,
        -:11795:      635,  825,  825,  825,  825,  825,  825,  825,  825,  825,
        -:11796:      825,  825,  825,  825,  825,  826,  633,  826,  826,  826,
        -:11797:      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
        -:11798:      826,  827,  632,  827,  827,  827,  827,  827,  827,  827,
        -:11799:      827,  827,  827,  827,  827,  827,  827,  828,  828,  828,
        -:11800:
        -:11801:
        -:11802:      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
        -:11803:      828,  828,  828,  829,  631,  829,  829,  630,  829,  829,
        -:11804:      829,  629,  628,  829,  829,  627,  626,  625,  829,  830,
        -:11805:      830,  830,  830,  624,  623,  830,  830,  830,  831,  621,
        -:11806:      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
        -:11807:      831,  831,  831,  831,  832,  832,  832,  832,  619,  612,
        -:11808:      832,  832,  832,  833,  833,  611,  610,  609,  833,  833,
        -:11809:      834,  608,  607,  606,  834,  834,  834,  834,  604,  601,
        -:11810:      834,  834,  835,  600,  835,  835,  835,  835,  835,  835,
        -:11811:      835,  835,  835,  835,  835,  835,  835,  835,  836,  836,
        -:11812:
        -:11813:#ifndef F_AA_2
        -:11814:      836,  836,  599,  598,  836,  836,  836,  837,  837,  837,
        -:11815:      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
        -:11816:      837,  837,  837,  838,  838,  838,  838,  597,  838,  838,
        -:11817:      838,  838,  838,  838,  838,  838,  838,  838,  838,  839,
        -:11818:      596,  595,  839,  839,  839,  839,  839,  839,  839,  594,
        -:11819:      839,  839,  839,  839,  839,  840,  593,  840,  840,  592,
        -:11820:      840,  840,  840,  591,  590,  840,  840,  588,  569,  568,
        -:11821:      840,  841,  841,  841,  841,  564,  563,  841,  841,  841,
        -:11822:      842,  562,  842,  842,  842,  842,  842,  842,  842,  842,
        -:11823:      842,  842,  842,  842,  842,  842,  843,  843,  560,  843,
        -:11824:#else
        -:11825:      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
        -:11826:      828,  828,  828,  829,  631,  829,  829,  630,  829,  829,
        -:11827:      829,  629,  628,  829,  829,  627,  626,  625,  829,  830,
        -:11828:      830,  830,  830,  624,  623,  830,  830,  830,  831,  621,
        -:11829:      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
        -:11830:      831,  831,  831,  831,  832,  832,  832,  832,  619,  612,
        -:11831:      832,  832,  832,  833,  833,  611,  610,  609,  833,  833,
        -:11832:      834,  608,  607,  606,  834,  834,  834,  834,  604,  601,
        -:11833:      834,  834,  835,  600,  835,  835,  835,  835,  835,  835,
        -:11834:      835,  835,  835,  835,  835,  835,  835,  835,  836,  836,
        -:11835:#endif
        -:11836:
        -:11837:      843,  559,  558,  557,  843,  843,  844,  556,  844,  844,
        -:11838:      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
        -:11839:      844,  844,  845,  555,  845,  845,  845,  845,  845,  845,
        -:11840:      845,  845,  845,  845,  845,  845,  845,  845,  846,  554,
        -:11841:      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
        -:11842:      846,  846,  846,  846,  847,  847,  847,  847,  847,  847,
        -:11843:      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
        -:11844:      848,  848,  848,  848,  553,  552,  848,  848,  848,  849,
        -:11845:      849,  849,  849,  551,  549,  849,  849,  849,  850,  850,
        -:11846:      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
        -:11847:
        -:11848:      850,  850,  850,  850,  851,  851,  851,  851,  851,  851,
        -:11849:      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
        -:11850:      852,  548,  852,  852,  852,  852,  852,  852,  852,  852,
        -:11851:      852,  546,  852,  852,  852,  852,  853,  853,  545,  544,
        -:11852:      543,  542,  853,  854,  854,  854,  854,  541,  540,  854,
        -:11853:      854,  854,  854,  855,  539,  855,  855,  855,  855,  855,
        -:11854:      855,  855,  855,  855,  855,  855,  855,  855,  855,  856,
        -:11855:      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
        -:11856:      856,  856,  856,  856,  856,  857,  857,  857,  857,  857,
        -:11857:      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
        -:11858:
        -:11859:      857,  538,  536,  534,  533,  530,  528,  526,  525,  524,
        -:11860:      523,  509,  508,  507,  506,  500,  499,  498,  497,  496,
        -:11861:      492,  491,  490,  489,  488,  487,  486,  483,  482,  481,
        -:11862:      480,  479,  478,  476,  475,  474,  473,  472,  471,  469,
        -:11863:      468,  467,  464,  463,  461,  460,  459,  458,  457,  454,
        -:11864:      453,  452,  451,  439,  437,  436,  435,  434,  430,  426,
        -:11865:      423,  422,  421,  414,  413,  412,  411,  410,  408,  407,
        -:11866:      406,  404,  403,  402,  401,  400,  399,  398,  397,  396,
        -:11867:      395,  394,  393,  392,  391,  390,  388,  387,  386,  384,
        -:11868:      383,  382,  381,  380,  379,  378,  377,  376,  373,  372,
        -:11869:
        -:11870:      361,  356,  355,  352,  350,  346,  337,  327,  326,  325,
        -:11871:      323,  318,  315,  313,  312,  311,  308,  307,  306,  305,
        -:11872:      303,  301,  300,  299,  297,  296,  295,  293,  292,  290,
        -:11873:      287,  286,  284,  282,  281,  280,  276,  263,  262,  243,
        -:11874:      240,  239,  234,  231,  226,  222,  221,  220,  219,  216,
        -:11875:      208,  207,  204,  203,  189,  187,  183,  179,  176,  175,
        -:11876:      174,  173,  172,  171,  169,  166,  165,  162,  161,  159,
        -:11877:      156,  155,  154,  153,  151,  149,  148,  146,  144,  143,
        -:11878:      137,  134,  125,  124,  122,  119,  114,  112,  107,  103,
        -:11879:       97,   92,   89,   87,   85,   84,   83,   80,   76,   74,
        -:11880:
        -:11881:       73,   71,   67,   65,   59,   55,   50,   47,   43,   39,
        -:11882:       16,   15,   10,    8,    7,  768,  768,  768,  768,  768,
        -:11883:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11884:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11885:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11886:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11887:      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
        -:11888:      768,  768,  768,  768
        -:11889:    } ;
        -:11890:
        -:11891:static yy_state_type yy_last_accepting_state;
        -:11892:static char *yy_last_accepting_cpos;
        -:11893:
        -:11894:/* The intent behind this definition is that it'll catch
        -:11895: * any uses of REJECT which flex missed.
        -:11896: */
        -:11897:#define REJECT reject_used_but_not_detected
        -:11898:#define yymore() yymore_used_but_not_detected
        -:11899:#define YY_MORE_ADJ 0
        -:11900:char *yytext;
        -:11901:#define INITIAL 0
        -:11902:/* scan.l - scanner for flex input */
        -:11903:/*-
        -:11904: * Copyright (c) 1990 The Regents of the University of California.
        -:11905: * All rights reserved.
        -:11906: *
        -:11907: * This code is derived from software contributed to Berkeley by
        -:11908: * Vern Paxson.
        -:11909: * 
        -:11910: * The United States Government has rights in this work pursuant
        -:11911: * to contract no. DE-AC03-76SF00098 between the United States
        -:11912: * Department of Energy and the University of California.
        -:11913: *
        -:11914: * Redistribution and use in source and binary forms are permitted provided
        -:11915: * that: (1) source distributions retain this entire copyright notice and
        -:11916: * comment, and (2) distributions including binaries display the following
        -:11917: * acknowledgement:  ``This product includes software developed by the
        -:11918: * University of California, Berkeley and its contributors'' in the
        -:11919: * documentation or other materials provided with the distribution and in
        -:11920: * all advertising materials mentioning features or use of this software.
        -:11921: * Neither the name of the University nor the names of its contributors may
        -:11922: * be used to endorse or promote products derived from this software without
        -:11923: * specific prior written permission.
        -:11924: * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
        -:11925: * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
        -:11926: * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
        -:11927: */
        -:11928:
        -:11929:/* $Header: /a1/cvsadm/cvsroot/expsir/csubjects/flex/versions.alt/versions.seeded/v3/flex.c,v 1.1.1.2 2003/09/02 20:21:59 expsir Exp $ */
        -:11930:
        -:11931:
        -:11932:#define ACTION_ECHO add_action( yytext )
        -:11933:#define ACTION_IFDEF(def, should_define) \
        -:11934:	{ \
        -:11935:	if ( should_define ) \
        -:11936:		action_define( def, 1 ); \
        -:11937:	}
        -:11938:
        -:11939:#define MARK_END_OF_PROLOG mark_prolog();
        -:11940:
        -:11941:#define YY_DECL \
        -:11942:	int flexscan()
        -:11943:
        -:11944:#define RETURNCHAR \
        -:11945:	yylval = (unsigned char) yytext[0]; \
        -:11946:	return CHAR;
        -:11947:
        -:11948:#define RETURNNAME \
        -:11949:	strcpy( nmstr, yytext ); \
        -:11950:	return NAME;
        -:11951:
        -:11952:#define PUT_BACK_STRING(str, start) \
        -:11953:	for ( i = strlen( str ) - 1; i >= start; --i ) \
        -:11954:		unput((str)[i])
        -:11955:
        -:11956:#define CHECK_REJECT(str) \
        -:11957:	if ( all_upper( str ) ) \
        -:11958:		reject = true;
        -:11959:
        -:11960:#define CHECK_YYMORE(str) \
        -:11961:	if ( all_lower( str ) ) \
        -:11962:		yymore_used = true;
        -:11963:#define YY_STACK_USED 1
        -:11964:#define YY_NO_TOP_STATE 1
        -:11965:#define SECT2 1
        -:11966:#define SECT2PROLOG 2
        -:11967:#define SECT3 3
        -:11968:#define CODEBLOCK 4
        -:11969:#define PICKUPDEF 5
        -:11970:#define SC 6
        -:11971:#define CARETISBOL 7
        -:11972:#define NUM 8
        -:11973:#define QUOTE 9
        -:11974:
        -:11975:#define FIRSTCCL 10
        -:11976:#define CCL 11
        -:11977:#define ACTION 12
        -:11978:#define RECOVER 13
        -:11979:#define COMMENT 14
        -:11980:#define ACTION_STRING 15
        -:11981:#define PERCENT_BRACE_ACTION 16
        -:11982:
        -:11983:#define OPTION 17
        -:11984:#define LINEDIR 18
        -:11985:
        -:11986:
        -:11987:/* Macros after this point can all be overridden by user definitions in
        -:11988: * section 1.
        -:11989: */
        -:11990:
        -:11991:#ifndef YY_SKIP_YYWRAP
        -:11992:#ifdef __cplusplus
        -:11993:extern "C" int yywrap YY_PROTO(( void ));
        -:11994:#else
        -:11995:extern int yywrap YY_PROTO(( void ));
        -:11996:#endif
        -:11997:#endif
        -:11998:
        -:11999:#ifndef YY_NO_UNPUT
        -:12000:static void yyunput YY_PROTO(( int c, char *buf_ptr ));
        -:12001:#endif
        -:12002:
        -:12003:#ifndef yytext_ptr
        -:12004:static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
        -:12005:#endif
        -:12006:
        -:12007:#ifndef YY_NO_INPUT
        -:12008:#ifdef __cplusplus
        -:12009:static int yyinput YY_PROTO(( void ));
        -:12010:#else
        -:12011:static int input YY_PROTO(( void ));
        -:12012:#endif
        -:12013:#endif
        -:12014:
        -:12015:#if YY_STACK_USED
        -:12016:static int yy_start_stack_ptr = 0;
        -:12017:static int yy_start_stack_depth = 0;
        -:12018:static int *yy_start_stack = 0;
        -:12019:#ifndef YY_NO_PUSH_STATE
        -:12020:static void yy_push_state YY_PROTO(( int new_state ));
        -:12021:#endif
        -:12022:#ifndef YY_NO_POP_STATE
        -:12023:static void yy_pop_state YY_PROTO(( void ));
        -:12024:#endif
        -:12025:#ifndef YY_NO_TOP_STATE
        -:12026:static int yy_top_state YY_PROTO(( void ));
        -:12027:#endif
        -:12028:
        -:12029:#else
        -:12030:#define YY_NO_PUSH_STATE 1
        -:12031:#define YY_NO_POP_STATE 1
        -:12032:#define YY_NO_TOP_STATE 1
        -:12033:#endif
        -:12034:
        -:12035:#ifdef YY_MALLOC_DECL
        -:12036:YY_MALLOC_DECL
        -:12037:#else
        -:12038:#if __STDC__
        -:12039:#ifndef __cplusplus
        -:12040:#include <stdlib.h>
        -:12041:#endif
        -:12042:#else
        -:12043:/* Just try to get by without declaring the routines.  This will fail
        -:12044: * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
        -:12045: * or sizeof(void*) != sizeof(int).
        -:12046: */
        -:12047:#endif
        -:12048:#endif
        -:12049:
        -:12050:/* Amount of stuff to slurp up with each read. */
        -:12051:#ifndef YY_READ_BUF_SIZE
        -:12052:#define YY_READ_BUF_SIZE 8192
        -:12053:#endif
        -:12054:
        -:12055:/* Copy whatever the last rule matched to the standard output. */
        -:12056:
        -:12057:#ifndef ECHO
        -:12058:/* This used to be an fputs(), but since the string might contain NUL's,
        -:12059: * we now use fwrite().
        -:12060: */
        -:12061:#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
        -:12062:#endif
        -:12063:
        -:12064:/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
        -:12065: * is returned in "result".
        -:12066: */
        -:12067:#ifndef YY_INPUT
        -:12068:#define YY_INPUT(buf,result,max_size) \
        -:12069:	if ( yy_current_buffer->yy_is_interactive ) \
        -:12070:		{ \
        -:12071:		int c = '*', n; \
        -:12072:		for ( n = 0; n < max_size && \
        -:12073:			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
        -:12074:			buf[n] = (char) c; \
        -:12075:		if ( c == '\n' ) \
        -:12076:			buf[n++] = (char) c; \
        -:12077:		if ( c == EOF && ferror( yyin ) ) \
        -:12078:			YY_FATAL_ERROR( "input in flex scanner failed" ); \
        -:12079:		result = n; \
        -:12080:		} \
        -:12081:	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
        -:12082:		  && ferror( yyin ) ) \
        -:12083:		YY_FATAL_ERROR( "input in flex scanner failed" );
        -:12084:#endif
        -:12085:
        -:12086:/* No semi-colon after return; correct usage is to write "yyterminate();" -
        -:12087: * we don't want an extra ';' after the "return" because that will cause
        -:12088: * some compilers to complain about unreachable statements.
        -:12089: */
        -:12090:#ifndef yyterminate
        -:12091:#define yyterminate() return YY_NULL
        -:12092:#endif
        -:12093:
        -:12094:/* Number of entries by which start-condition stack grows. */
        -:12095:#ifndef YY_START_STACK_INCR
        -:12096:#define YY_START_STACK_INCR 25
        -:12097:#endif
        -:12098:
        -:12099:/* Report a fatal error. */
        -:12100:#ifndef YY_FATAL_ERROR
        -:12101:#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
        -:12102:#endif
        -:12103:
        -:12104:/* Default declaration of generated scanner - a define so the user can
        -:12105: * easily add parameters.
        -:12106: */
        -:12107:#ifndef YY_DECL
        -:12108:#define YY_DECL int yylex YY_PROTO(( void ))
        -:12109:#endif
        -:12110:
        -:12111:/* Code executed at the beginning of each rule, after yytext and yyleng
        -:12112: * have been set up.
        -:12113: */
        -:12114:#ifndef YY_USER_ACTION
        -:12115:#define YY_USER_ACTION
        -:12116:#endif
        -:12117:
        -:12118:/* Code executed at the end of each rule. */
        -:12119:#ifndef YY_BREAK
        -:12120:#define YY_BREAK break;
        -:12121:#endif
        -:12122:
        -:12123:#define YY_RULE_SETUP \
        -:12124:	if ( yyleng > 0 ) \
        -:12125:		yy_current_buffer->yy_at_bol = \
        -:12126:				(yytext[yyleng - 1] == '\n'); \
        -:12127:	YY_USER_ACTION
        -:12128:
function flexscan called 31427 returned 100% blocks executed 46%
    31427:12129:YY_DECL
        -:12130:	{
        -:12131:	register yy_state_type yy_current_state;
        -:12132:	register char *yy_cp, *yy_bp;
        -:12133:	register int yy_act;
        -:12134:
        -:12135:
        -:12136:	static int bracelevel, didadef, indented_code;
        -:12137:	static int doing_rule_action = false;
        -:12138:	static int option_sense;
        -:12139:
    31427:12140:	int doing_codeblock = false;
        -:12141:	int i;
        -:12142:	Char nmdef[MAXLINE], myesc();
        -:12143:
        -:12144:
        -:12145:
    31427:12146:	if ( yy_init )
branch  0 taken 560 (fallthrough)
branch  1 taken 30867
        -:12147:		{
      560:12148:		yy_init = 0;
        -:12149:
        -:12150:#ifdef YY_USER_INIT
        -:12151:		YY_USER_INIT;
        -:12152:#endif
        -:12153:
      560:12154:		if ( ! yy_start )
branch  0 taken 560 (fallthrough)
branch  1 taken 0
      560:12155:			yy_start = 1;	/* first start state */
        -:12156:
      560:12157:		if ( ! yyin )
branch  0 taken 0 (fallthrough)
branch  1 taken 560
    #####:12158:			yyin = stdin;
        -:12159:
      560:12160:		if ( ! yyout )
branch  0 taken 560 (fallthrough)
branch  1 taken 0
      560:12161:			yyout = stdout;
        -:12162:
      560:12163:		if ( ! yy_current_buffer )
branch  0 taken 560 (fallthrough)
branch  1 taken 0
      560:12164:			yy_current_buffer =
      560:12165:				yy_create_buffer( yyin, YY_BUF_SIZE );
call    0 returned 560
        -:12166:
      560:12167:		yy_load_buffer_state();
call    0 returned 560
        -:12168:		}
        -:12169:
        -:12170:	while ( 1 )		/* loops until end-of-file is reached */
        -:12171:		{
    80863:12172:		yy_cp = yy_c_buf_p;
        -:12173:
        -:12174:		/* Support of yytext. */
    80863:12175:		*yy_cp = yy_hold_char;
        -:12176:
        -:12177:		/* yy_bp points to the position in yy_ch_buf of the start of
        -:12178:		 * the current run.
        -:12179:		 */
    80863:12180:		yy_bp = yy_cp;
        -:12181:
    80863:12182:		yy_current_state = yy_start;
    80863:12183:		yy_current_state += YY_AT_BOL();
    81427:12184:yy_match:
        -:12185:		do
        -:12186:			{
   312034:12187:			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
   312034:12188:			if ( yy_accept[yy_current_state] )
branch  0 taken 231179 (fallthrough)
branch  1 taken 80855
        -:12189:				{
   231179:12190:				yy_last_accepting_state = yy_current_state;
   231179:12191:				yy_last_accepting_cpos = yy_cp;
        -:12192:				}
   584169:12193:			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
branch  0 taken 272135
branch  1 taken 312034 (fallthrough)
        -:12194:				{
   272135:12195:				yy_current_state = (int) yy_def[yy_current_state];
   272135:12196:				if ( yy_current_state >= 769 )
branch  0 taken 235958 (fallthrough)
branch  1 taken 36177
   235958:12197:					yy_c = yy_meta[(unsigned int) yy_c];
        -:12198:				}
   312034:12199:			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
   312034:12200:			++yy_cp;
        -:12201:			}
   312034:12202:		while ( yy_base[yy_current_state] != 2716 );
branch  0 taken 230607
branch  1 taken 81427 (fallthrough)
        -:12203:
    81427:12204:yy_find_action:
    81427:12205:		yy_act = yy_accept[yy_current_state];
    81427:12206:		if ( yy_act == 0 )
branch  0 taken 35127 (fallthrough)
branch  1 taken 46300
        -:12207:			{ /* have to back up */
    35127:12208:			yy_cp = yy_last_accepting_cpos;
    35127:12209:			yy_current_state = yy_last_accepting_state;
    35127:12210:			yy_act = yy_accept[yy_current_state];
        -:12211:			}
        -:12212:
    81427:12213:		YY_DO_BEFORE_ACTION;
        -:12214:
        -:12215:
    81973:12216:do_action:	/* This label is used only to access EOF actions. */
        -:12217:
        -:12218:
    81973:12219:		switch ( yy_act )
branch  0 taken 0
branch  1 taken 8
branch  2 taken 119
branch  3 taken 0
branch  4 taken 1
branch  5 taken 18
branch  6 taken 123
branch  7 taken 19
branch  8 taken 560
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 257
branch 16 taken 19
branch 17 taken 370
branch 18 taken 138
branch 19 taken 357
branch 20 taken 0
branch 21 taken 357
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 123
branch 28 taken 3359
branch 29 taken 249
branch 30 taken 257
branch 31 taken 257
branch 32 taken 257
branch 33 taken 0
branch 34 taken 0
branch 35 taken 0
branch 36 taken 0
branch 37 taken 0
branch 38 taken 0
branch 39 taken 0
branch 40 taken 0
branch 41 taken 0
branch 42 taken 0
branch 43 taken 0
branch 44 taken 0
branch 45 taken 0
branch 46 taken 0
branch 47 taken 0
branch 48 taken 0
branch 49 taken 0
branch 50 taken 0
branch 51 taken 0
branch 52 taken 0
branch 53 taken 0
branch 54 taken 0
branch 55 taken 0
branch 56 taken 0
branch 57 taken 0
branch 58 taken 0
branch 59 taken 0
branch 60 taken 0
branch 61 taken 0
branch 62 taken 0
branch 63 taken 0
branch 64 taken 0
branch 65 taken 0
branch 66 taken 0
branch 67 taken 0
branch 68 taken 0
branch 69 taken 0
branch 70 taken 0
branch 71 taken 0
branch 72 taken 0
branch 73 taken 0
branch 74 taken 0
branch 75 taken 0
branch 76 taken 0
branch 77 taken 0
branch 78 taken 0
branch 79 taken 0
branch 80 taken 0
branch 81 taken 0
branch 82 taken 0
branch 83 taken 0
branch 84 taken 0
branch 85 taken 0
branch 86 taken 552
branch 87 taken 0
branch 88 taken 984
branch 89 taken 1
branch 90 taken 932
branch 91 taken 0
branch 92 taken 16
branch 93 taken 100
branch 94 taken 1099
branch 95 taken 296
branch 96 taken 103
branch 97 taken 0
branch 98 taken 11
branch 99 taken 0
branch 100 taken 1
branch 101 taken 3500
branch 102 taken 22
branch 103 taken 11
branch 104 taken 119
branch 105 taken 1531
branch 106 taken 459
branch 107 taken 3822
branch 108 taken 8959
branch 109 taken 7
branch 110 taken 16
branch 111 taken 0
branch 112 taken 17
branch 113 taken 0
branch 114 taken 0
branch 115 taken 1918
branch 116 taken 1099
branch 117 taken 0
branch 118 taken 219
branch 119 taken 0
branch 120 taken 1068
branch 121 taken 880
branch 122 taken 2687
branch 123 taken 1298
branch 124 taken 0
branch 125 taken 0
branch 126 taken 0
branch 127 taken 0
branch 128 taken 0
branch 129 taken 0
branch 130 taken 0
branch 131 taken 0
branch 132 taken 0
branch 133 taken 0
branch 134 taken 0
branch 135 taken 0
branch 136 taken 0
branch 137 taken 0
branch 138 taken 396
branch 139 taken 198
branch 140 taken 296
branch 141 taken 0
branch 142 taken 0
branch 143 taken 0
branch 144 taken 238
branch 145 taken 8
branch 146 taken 5
branch 147 taken 0
branch 148 taken 0
branch 149 taken 379
branch 150 taken 379
branch 151 taken 11882
branch 152 taken 7474
branch 153 taken 9
branch 154 taken 3607
branch 155 taken 4309
branch 156 taken 0
branch 157 taken 3607
branch 158 taken 3197
branch 159 taken 0
branch 160 taken 3607
branch 161 taken 0
branch 162 taken 0
branch 163 taken 595
branch 164 taken 1556
branch 165 taken 113
branch 166 taken 0
branch 167 taken 0
branch 168 taken 432
branch 169 taken 1111
branch 170 taken 0
        -:12220:	{ /* beginning of action switch */
    #####:12221:			case 0: /* must back up */
        -:12222:			/* undo the effects of YY_DO_BEFORE_ACTION */
    #####:12223:			*yy_cp = yy_hold_char;
    #####:12224:			yy_cp = yy_last_accepting_cpos;
    #####:12225:			yy_current_state = yy_last_accepting_state;
    #####:12226:			goto yy_find_action;
        -:12227:
        -:12228:
        8:12229:case 1:
        8:12230:YY_RULE_SETUP
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:12231:indented_code = true; BEGIN(CODEBLOCK);
        8:12232:	YY_BREAK
      119:12233:case 2:
      119:12234:YY_RULE_SETUP
branch  0 taken 119 (fallthrough)
branch  1 taken 0
      119:12235:ACTION_ECHO; yy_push_state( COMMENT );
call    0 returned 119
call    1 returned 119
      119:12236:	YY_BREAK
    #####:12237:case 3:
    #####:12238:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12239:yy_push_state( LINEDIR );
call    0 never executed
    #####:12240:	YY_BREAK
        1:12241:case 4:
        1:12242:YY_RULE_SETUP
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:12243:return SCDECL;
        -:12244:	YY_BREAK
       18:12245:case 5:
       18:12246:YY_RULE_SETUP
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18:12247:return XSCDECL;
        -:12248:	YY_BREAK
      123:12249:case 6:
      123:12250:YY_RULE_SETUP
branch  0 taken 123 (fallthrough)
branch  1 taken 0
        -:12251:{
      123:12252:			++linenum;
      123:12253:			line_directive_out( (FILE *) 0, 1 );
call    0 returned 123
      123:12254:			indented_code = false;
      123:12255:			BEGIN(CODEBLOCK);
        -:12256:			}
      123:12257:	YY_BREAK
       19:12258:case 7:
       19:12259:YY_RULE_SETUP
branch  0 taken 19 (fallthrough)
branch  1 taken 0
        -:12260:/* discard */
       19:12261:	YY_BREAK
      560:12262:case 8:
      560:12263:YY_RULE_SETUP
branch  0 taken 560 (fallthrough)
branch  1 taken 0
        -:12264:{
      560:12265:			sectnum = 2;
      560:12266:			bracelevel = 0;
      560:12267:			mark_defs1();
call    0 returned 560
      560:12268:			line_directive_out( (FILE *) 0, 1 );
call    0 returned 560
      560:12269:			BEGIN(SECT2PROLOG);
      560:12270:			return SECTEND;
        -:12271:			}
        -:12272:	YY_BREAK
    #####:12273:case 9:
    #####:12274:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12275:yytext_is_array = false; ++linenum;
    #####:12276:	YY_BREAK
    #####:12277:case 10:
    #####:12278:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12279:yytext_is_array = true; ++linenum;
    #####:12280:	YY_BREAK
    #####:12281:case 11:
    #####:12282:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12283:BEGIN(OPTION); return OPTION_OP;
        -:12284:	YY_BREAK
    #####:12285:case 12:
    #####:12286:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12287:++linenum; /* ignore */
    #####:12288:	YY_BREAK
    #####:12289:case 13:
    #####:12290:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12291:++linenum;	/* ignore */
    #####:12292:	YY_BREAK
    #####:12293:case 14:
    #####:12294:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12295:synerr( _( "unrecognized '%' directive" ) );
call    0 never executed
    #####:12296:	YY_BREAK
      257:12297:case 15:
      257:12298:YY_RULE_SETUP
branch  0 taken 257 (fallthrough)
branch  1 taken 0
        -:12299:{
      257:12300:			strcpy( nmstr, yytext );
      257:12301:			didadef = false;
      257:12302:			BEGIN(PICKUPDEF);
        -:12303:			}
      257:12304:	YY_BREAK
       19:12305:case 16:
       19:12306:YY_RULE_SETUP
branch  0 taken 19 (fallthrough)
branch  1 taken 0
       19:12307:RETURNNAME;
        -:12308:	YY_BREAK
      370:12309:case 17:
      370:12310:YY_RULE_SETUP
branch  0 taken 370 (fallthrough)
branch  1 taken 0
      370:12311:++linenum; /* allows blank lines in section 1 */
      370:12312:	YY_BREAK
      138:12313:case 18:
      138:12314:YY_RULE_SETUP
branch  0 taken 138 (fallthrough)
branch  1 taken 0
      138:12315:ACTION_ECHO; ++linenum; /* maybe end of comment line */
call    0 returned 138
      138:12316:	YY_BREAK
        -:12317:
        -:12318:
      357:12319:case 19:
      357:12320:YY_RULE_SETUP
branch  0 taken 357 (fallthrough)
branch  1 taken 0
      357:12321:ACTION_ECHO; yy_pop_state();
call    0 returned 357
call    1 returned 357
      357:12322:	YY_BREAK
    #####:12323:case 20:
    #####:12324:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12325:ACTION_ECHO;
call    0 never executed
    #####:12326:	YY_BREAK
      357:12327:case 21:
      357:12328:YY_RULE_SETUP
branch  0 taken 357 (fallthrough)
branch  1 taken 0
      357:12329:ACTION_ECHO;
call    0 returned 357
      357:12330:	YY_BREAK
    #####:12331:case 22:
    #####:12332:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12333:++linenum; ACTION_ECHO;
call    0 never executed
    #####:12334:	YY_BREAK
        -:12335:
        -:12336:
    #####:12337:case 23:
    #####:12338:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12339:yy_pop_state();
call    0 never executed
    #####:12340:	YY_BREAK
    #####:12341:case 24:
    #####:12342:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12343:linenum = myctoi( yytext );
call    0 never executed
    #####:12344:	YY_BREAK
    #####:12345:case 25:
    #####:12346:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12347:{
    #####:12348:			flex_free( (void *) infilename );
call    0 never executed
    #####:12349:			infilename = copy_string( yytext + 1 );
call    0 never executed
    #####:12350:			infilename[strlen( infilename ) - 1] = '\0';
        -:12351:			}
    #####:12352:	YY_BREAK
    #####:12353:case 26:
    #####:12354:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12355:/* ignore spurious characters */
    #####:12356:	YY_BREAK
        -:12357:
        -:12358:
      123:12359:case 27:
      123:12360:YY_RULE_SETUP
branch  0 taken 123 (fallthrough)
branch  1 taken 0
      123:12361:++linenum; BEGIN(INITIAL);
      123:12362:	YY_BREAK
     3359:12363:case 28:
     3359:12364:YY_RULE_SETUP
branch  0 taken 3359 (fallthrough)
branch  1 taken 0
     3359:12365:ACTION_ECHO;
call    0 returned 3359
     3359:12366:	YY_BREAK
      249:12367:case 29:
      249:12368:YY_RULE_SETUP
branch  0 taken 249 (fallthrough)
branch  1 taken 0
        -:12369:{
      249:12370:			++linenum;
      249:12371:			ACTION_ECHO;
call    0 returned 249
      249:12372:			if ( indented_code )
branch  0 taken 8 (fallthrough)
branch  1 taken 241
        8:12373:				BEGIN(INITIAL);
        -:12374:			}
      249:12375:	YY_BREAK
        -:12376:
        -:12377:
      257:12378:case 30:
      257:12379:YY_RULE_SETUP
branch  0 taken 257 (fallthrough)
branch  1 taken 0
        -:12380:/* separates name and definition */
      257:12381:	YY_BREAK
      257:12382:case 31:
      257:12383:YY_RULE_SETUP
branch  0 taken 257 (fallthrough)
branch  1 taken 0
        -:12384:{
      257:12385:			strcpy( (char *) nmdef, yytext );
        -:12386:
        -:12387:			/* Skip trailing whitespace. */
      257:12388:			for ( i = strlen( (char *) nmdef ) - 1;
      257:12389:			      i >= 0 && (nmdef[i] == ' ' || nmdef[i] == '\t');
branch  0 taken 257 (fallthrough)
branch  1 taken 0
branch  2 taken 0
branch  3 taken 257 (fallthrough)
branch  4 taken 0
branch  5 taken 257 (fallthrough)
    #####:12390:			      --i )
        -:12391:				;
        -:12392:
      257:12393:			nmdef[i + 1] = '\0';
        -:12394:
      257:12395:			ndinstal( nmstr, nmdef );
call    0 returned 257
      257:12396:			didadef = true;
        -:12397:			}
      257:12398:	YY_BREAK
      257:12399:case 32:
      257:12400:YY_RULE_SETUP
branch  0 taken 257 (fallthrough)
branch  1 taken 0
        -:12401:{
      257:12402:			if ( ! didadef )
branch  0 taken 0 (fallthrough)
branch  1 taken 257
    #####:12403:				synerr( _( "incomplete name definition" ) );
call    0 never executed
      257:12404:			BEGIN(INITIAL);
      257:12405:			++linenum;
        -:12406:			}
      257:12407:	YY_BREAK
        -:12408:
        -:12409:
    #####:12410:case 33:
    #####:12411:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12412:++linenum; BEGIN(INITIAL);
    #####:12413:	YY_BREAK
    #####:12414:case 34:
    #####:12415:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12416:option_sense = true;
    #####:12417:	YY_BREAK
    #####:12418:case 35:
    #####:12419:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12420:return '=';
        -:12421:	YY_BREAK
    #####:12422:case 36:
    #####:12423:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12424:option_sense = ! option_sense;
    #####:12425:	YY_BREAK
    #####:12426:case 37:
    #####:12427:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12428:csize = option_sense ? 128 : 256;
branch  0 never executed
branch  1 never executed
    #####:12429:	YY_BREAK
    #####:12430:case 38:
    #####:12431:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12432:csize = option_sense ? 256 : 128;
branch  0 never executed
branch  1 never executed
    #####:12433:	YY_BREAK
    #####:12434:case 39:
    #####:12435:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12436:long_align = option_sense;
    #####:12437:	YY_BREAK
    #####:12438:case 40:
    #####:12439:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12440:{
    #####:12441:			action_define( "YY_ALWAYS_INTERACTIVE", option_sense );
call    0 never executed
        -:12442:			}
    #####:12443:	YY_BREAK
    #####:12444:case 41:
    #####:12445:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12446:yytext_is_array = option_sense;
    #####:12447:	YY_BREAK
    #####:12448:case 42:
    #####:12449:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12450:backing_up_report = option_sense;
    #####:12451:	YY_BREAK
    #####:12452:case 43:
    #####:12453:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12454:interactive = ! option_sense;
    #####:12455:	YY_BREAK
    #####:12456:case 44:
    #####:12457:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12458:C_plus_plus = option_sense;
    #####:12459:	YY_BREAK
    #####:12460:case 45:
    #####:12461:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12462:caseins = ! option_sense;
    #####:12463:	YY_BREAK
    #####:12464:case 46:
    #####:12465:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12466:caseins = option_sense;
    #####:12467:	YY_BREAK
    #####:12468:case 47:
    #####:12469:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12470:ddebug = option_sense;
    #####:12471:	YY_BREAK
    #####:12472:case 48:
    #####:12473:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12474:spprdflt = ! option_sense;
    #####:12475:	YY_BREAK
    #####:12476:case 49:
    #####:12477:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12478:useecs = option_sense;
    #####:12479:	YY_BREAK
    #####:12480:case 50:
    #####:12481:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12482:{
    #####:12483:			useecs = usemecs = false;
    #####:12484:			use_read = fullspd = true;
        -:12485:			}
    #####:12486:	YY_BREAK
    #####:12487:case 51:
    #####:12488:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12489:{
    #####:12490:			useecs = usemecs = false;
    #####:12491:			use_read = fulltbl = true;
        -:12492:			}
    #####:12493:	YY_BREAK
    #####:12494:case 52:
    #####:12495:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12496:ACTION_IFDEF("YY_NO_INPUT", ! option_sense);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:12497:	YY_BREAK
    #####:12498:case 53:
    #####:12499:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12500:interactive = option_sense;
    #####:12501:	YY_BREAK
    #####:12502:case 54:
    #####:12503:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12504:lex_compat = option_sense;
    #####:12505:	YY_BREAK
    #####:12506:case 55:
    #####:12507:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12508:{
    #####:12509:			action_define( "YY_MAIN", option_sense );
call    0 never executed
    #####:12510:			do_yywrap = ! option_sense;
        -:12511:			}
    #####:12512:	YY_BREAK
    #####:12513:case 56:
    #####:12514:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12515:usemecs = option_sense;
    #####:12516:	YY_BREAK
    #####:12517:case 57:
    #####:12518:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12519:{
    #####:12520:			action_define( "YY_NEVER_INTERACTIVE", option_sense );
call    0 never executed
        -:12521:			}
    #####:12522:	YY_BREAK
    #####:12523:case 58:
    #####:12524:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12525:performance_report += option_sense ? 1 : -1;
branch  0 never executed
branch  1 never executed
    #####:12526:	YY_BREAK
    #####:12527:case 59:
    #####:12528:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12529:yytext_is_array = ! option_sense;
    #####:12530:	YY_BREAK
    #####:12531:case 60:
    #####:12532:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12533:use_read = option_sense;
    #####:12534:	YY_BREAK
    #####:12535:case 61:
    #####:12536:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12537:reject_really_used = option_sense;
    #####:12538:	YY_BREAK
    #####:12539:case 62:
    #####:12540:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12541:action_define( "YY_STACK_USED", option_sense );
call    0 never executed
    #####:12542:	YY_BREAK
    #####:12543:case 63:
    #####:12544:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12545:do_stdinit = option_sense;
    #####:12546:	YY_BREAK
    #####:12547:case 64:
    #####:12548:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12549:use_stdout = option_sense;
    #####:12550:	YY_BREAK
    #####:12551:case 65:
    #####:12552:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12553:ACTION_IFDEF("YY_NO_UNPUT", ! option_sense);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:12554:	YY_BREAK
    #####:12555:case 66:
    #####:12556:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12557:printstats = option_sense;
    #####:12558:	YY_BREAK
    #####:12559:case 67:
    #####:12560:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12561:nowarn = ! option_sense;
    #####:12562:	YY_BREAK
    #####:12563:case 68:
    #####:12564:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12565:do_yylineno = option_sense;
    #####:12566:	YY_BREAK
    #####:12567:case 69:
    #####:12568:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12569:yymore_really_used = option_sense;
    #####:12570:	YY_BREAK
    #####:12571:case 70:
    #####:12572:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12573:do_yywrap = option_sense;
    #####:12574:	YY_BREAK
    #####:12575:case 71:
    #####:12576:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12577:ACTION_IFDEF("YY_NO_PUSH_STATE", ! option_sense);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:12578:	YY_BREAK
    #####:12579:case 72:
    #####:12580:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12581:ACTION_IFDEF("YY_NO_POP_STATE", ! option_sense);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:12582:	YY_BREAK
    #####:12583:case 73:
    #####:12584:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12585:ACTION_IFDEF("YY_NO_TOP_STATE", ! option_sense);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:12586:	YY_BREAK
    #####:12587:case 74:
    #####:12588:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12589:ACTION_IFDEF("YY_NO_SCAN_BUFFER", ! option_sense);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:12590:	YY_BREAK
    #####:12591:case 75:
    #####:12592:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12593:ACTION_IFDEF("YY_NO_SCAN_BYTES", ! option_sense);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:12594:	YY_BREAK
    #####:12595:case 76:
    #####:12596:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12597:ACTION_IFDEF("YY_NO_SCAN_STRING", ! option_sense);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:12598:	YY_BREAK
    #####:12599:case 77:
    #####:12600:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12601:return OPT_OUTFILE;
        -:12602:	YY_BREAK
    #####:12603:case 78:
    #####:12604:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12605:return OPT_PREFIX;
        -:12606:	YY_BREAK
    #####:12607:case 79:
    #####:12608:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12609:return OPT_YYCLASS;
        -:12610:	YY_BREAK
    #####:12611:case 80:
    #####:12612:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12613:{
    #####:12614:			strcpy( nmstr, yytext + 1 );
    #####:12615:			nmstr[strlen( nmstr ) - 1] = '\0';
    #####:12616:			return NAME;
        -:12617:			}
        -:12618:	YY_BREAK
    #####:12619:case 81:
    #####:12620:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12621:{
    #####:12622:			format_synerr( _( "unrecognized %%option: %s" ),
call    0 never executed
        -:12623:				yytext );
    #####:12624:			BEGIN(RECOVER);
        -:12625:			}
    #####:12626:	YY_BREAK
        -:12627:
    #####:12628:case 82:
    #####:12629:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12630:++linenum; BEGIN(INITIAL);
    #####:12631:	YY_BREAK
        -:12632:
    #####:12633:case 83:
    #####:12634:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12635:++bracelevel; yyless( 2 );	/* eat only %{ */
    #####:12636:	YY_BREAK
    #####:12637:case 84:
    #####:12638:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12639:--bracelevel; yyless( 2 );	/* eat only %} */
    #####:12640:	YY_BREAK
    #####:12641:case 85:
    #####:12642:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12643:ACTION_ECHO;	/* indented code in prolog */
call    0 never executed
    #####:12644:	YY_BREAK
      552:12645:case 86:
      552:12646:YY_RULE_SETUP
branch  0 taken 552 (fallthrough)
branch  1 taken 0
        -:12647:{	/* non-indented code */
      552:12648:			if ( bracelevel <= 0 )
branch  0 taken 552 (fallthrough)
branch  1 taken 0
        -:12649:				{ /* not in %{ ... %} */
      552:12650:				yyless( 0 );	/* put it all back */
     552*:12651:				yy_set_bol( 1 );
branch  0 taken 0 (fallthrough)
branch  1 taken 552
call    2 never executed
      552:12652:				mark_prolog();
call    0 returned 552
      552:12653:				BEGIN(SECT2);
        -:12654:				}
        -:12655:			else
    #####:12656:				ACTION_ECHO;
call    0 never executed
        -:12657:			}
      552:12658:	YY_BREAK
    #####:12659:case 87:
    #####:12660:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12661:ACTION_ECHO;
call    0 never executed
    #####:12662:	YY_BREAK
      984:12663:case 88:
      984:12664:YY_RULE_SETUP
branch  0 taken 984 (fallthrough)
branch  1 taken 0
      984:12665:++linenum; ACTION_ECHO;
call    0 returned 984
      984:12666:	YY_BREAK
        1:12667:case YY_STATE_EOF(SECT2PROLOG):
        -:12668:{
        1:12669:			mark_prolog();
call    0 returned 1
        1:12670:			sectnum = 0;
        1:12671:			yyterminate(); /* to stop the parser */
        -:12672:			}
        -:12673:	YY_BREAK
        -:12674:
        -:12675:
      932:12676:case 89:
      932:12677:YY_RULE_SETUP
branch  0 taken 932 (fallthrough)
branch  1 taken 0
      932:12678:++linenum; /* allow blank lines in section 2 */
      932:12679:	YY_BREAK
    #####:12680:case 90:
    #####:12681:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12682:{
    #####:12683:			indented_code = false;
    #####:12684:			doing_codeblock = true;
    #####:12685:			bracelevel = 1;
    #####:12686:			BEGIN(PERCENT_BRACE_ACTION);
        -:12687:			}
    #####:12688:	YY_BREAK
       16:12689:case 91:
       16:12690:YY_RULE_SETUP
branch  0 taken 16 (fallthrough)
branch  1 taken 0
       16:12691:BEGIN(SC); return '<';
        -:12692:	YY_BREAK
      100:12693:case 92:
      100:12694:YY_RULE_SETUP
branch  0 taken 100 (fallthrough)
branch  1 taken 0
      100:12695:return '^';
        -:12696:	YY_BREAK
     1099:12697:case 93:
     1099:12698:YY_RULE_SETUP
branch  0 taken 1099 (fallthrough)
branch  1 taken 0
     1099:12699:BEGIN(QUOTE); return '"';
        -:12700:	YY_BREAK
      296:12701:case 94:
      296:12702:*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
      296:12703:yy_c_buf_p = yy_cp = yy_bp + 1;
      296:12704:YY_DO_BEFORE_ACTION; /* set up yytext again */
      296:12705:YY_RULE_SETUP
branch  0 taken 296 (fallthrough)
branch  1 taken 0
      296:12706:BEGIN(NUM); return '{';
        -:12707:	YY_BREAK
      103:12708:case 95:
      103:12709:*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
      103:12710:yy_c_buf_p = yy_cp = yy_bp + 1;
      103:12711:YY_DO_BEFORE_ACTION; /* set up yytext again */
      103:12712:YY_RULE_SETUP
branch  0 taken 103 (fallthrough)
branch  1 taken 0
      103:12713:return '$';
        -:12714:	YY_BREAK
    #####:12715:case 96:
    #####:12716:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12717:{
    #####:12718:			bracelevel = 1;
    #####:12719:			BEGIN(PERCENT_BRACE_ACTION);
        -:12720:
    #####:12721:			if ( in_rule )
branch  0 never executed
branch  1 never executed
        -:12722:				{
    #####:12723:				doing_rule_action = true;
    #####:12724:				in_rule = false;
    #####:12725:				return '\n';
        -:12726:				}
        -:12727:			}
    #####:12728:	YY_BREAK
       11:12729:case 97:
       11:12730:YY_RULE_SETUP
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11:12731:continued_action = true; ++linenum; return '\n';
        -:12732:	YY_BREAK
    #####:12733:case 98:
    #####:12734:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12735:{
    #####:12736:			yyless( yyleng - 2 );	/* put back '/', '*' */
    #####:12737:			bracelevel = 0;
    #####:12738:			continued_action = false;
    #####:12739:			BEGIN(ACTION);
        -:12740:			}
    #####:12741:	YY_BREAK
        1:12742:case 99:
        1:12743:YY_RULE_SETUP
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:12744:/* allow indented rules */
        1:12745:	YY_BREAK
     3500:12746:case 100:
     3500:12747:YY_RULE_SETUP
branch  0 taken 3500 (fallthrough)
branch  1 taken 0
        -:12748:{
        -:12749:			/* This rule is separate from the one below because
        -:12750:			 * otherwise we get variable trailing context, so
        -:12751:			 * we can't build the scanner using -{f,F}.
        -:12752:			 */
     3500:12753:			bracelevel = 0;
     3500:12754:			continued_action = false;
     3500:12755:			BEGIN(ACTION);
        -:12756:
     3500:12757:			if ( in_rule )
branch  0 taken 3500 (fallthrough)
branch  1 taken 0
        -:12758:				{
     3500:12759:				doing_rule_action = true;
     3500:12760:				in_rule = false;
     3500:12761:				return '\n';
        -:12762:				}
        -:12763:			}
    #####:12764:	YY_BREAK
       22:12765:case 101:
       22:12766:YY_RULE_SETUP
branch  0 taken 22 (fallthrough)
branch  1 taken 0
        -:12767:{
       22:12768:			bracelevel = 0;
       22:12769:			continued_action = false;
       22:12770:			BEGIN(ACTION);
       22:12771:			unput( '\n' );	/* so <ACTION> sees it */
call    0 returned 22
        -:12772:
       22:12773:			if ( in_rule )
branch  0 taken 22 (fallthrough)
branch  1 taken 0
        -:12774:				{
       22:12775:				doing_rule_action = true;
       22:12776:				in_rule = false;
       22:12777:				return '\n';
        -:12778:				}
        -:12779:			}
    #####:12780:	YY_BREAK
       11:12781:case 102:
        -:12782:case 103:
       11:12783:YY_RULE_SETUP
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11:12784:return EOF_OP;
        -:12785:	YY_BREAK
      119:12786:case 104:
      119:12787:YY_RULE_SETUP
branch  0 taken 119 (fallthrough)
branch  1 taken 0
        -:12788:{
      119:12789:			sectnum = 3;
      119:12790:			BEGIN(SECT3);
      119:12791:			yyterminate(); /* to stop the parser */
        -:12792:			}
        -:12793:	YY_BREAK
     1531:12794:case 105:
     1531:12795:YY_RULE_SETUP
branch  0 taken 1531 (fallthrough)
branch  1 taken 0
        -:12796:{
        -:12797:			int cclval;
        -:12798:
     1531:12799:			strcpy( nmstr, yytext );
        -:12800:
        -:12801:			/* Check to see if we've already encountered this
        -:12802:			 * ccl.
        -:12803:			 */
     1531:12804:			if ( (cclval = ccllookup( (Char *) nmstr )) != 0 )
call    0 returned 1531
branch  1 taken 233 (fallthrough)
branch  2 taken 1298
        -:12805:				{
      233:12806:				if ( input() != ']' )
call    0 returned 233
branch  1 taken 0 (fallthrough)
branch  2 taken 233
    #####:12807:					synerr( _( "bad character class" ) );
call    0 never executed
        -:12808:
      233:12809:				yylval = cclval;
      233:12810:				++cclreuse;
      233:12811:				return PREVCCL;
        -:12812:				}
        -:12813:			else
        -:12814:				{
        -:12815:				/* We fudge a bit.  We know that this ccl will
        -:12816:				 * soon be numbered as lastccl + 1 by cclinit.
        -:12817:				 */
     1298:12818:				cclinstal( (Char *) nmstr, lastccl + 1 );
call    0 returned 1298
        -:12819:
        -:12820:				/* Push back everything but the leading bracket
        -:12821:				 * so the ccl can be rescanned.
        -:12822:				 */
     1298:12823:				yyless( 1 );
        -:12824:
     1298:12825:				BEGIN(FIRSTCCL);
     1298:12826:				return '[';
        -:12827:				}
        -:12828:			}
        -:12829:	YY_BREAK
      459:12830:case 106:
      459:12831:YY_RULE_SETUP
branch  0 taken 459 (fallthrough)
branch  1 taken 0
        -:12832:{
        -:12833:			register Char *nmdefptr;
        -:12834:			Char *ndlookup();
        -:12835:
      459:12836:			strcpy( nmstr, yytext + 1 );
      459:12837:			nmstr[yyleng - 2] = '\0';  /* chop trailing brace */
        -:12838:
      459:12839:			if ( (nmdefptr = ndlookup( nmstr )) == 0 )
call    0 returned 459
branch  1 taken 4 (fallthrough)
branch  2 taken 455
        4:12840:				format_synerr(
call    0 returned 4
        -:12841:					_( "undefined definition {%s}" ),
        -:12842:						nmstr );
        -:12843:
        -:12844:			else
        -:12845:				{ /* push back name surrounded by ()'s */
      455:12846:				int len = strlen( (char *) nmdefptr );
        -:12847:
      455:12848:				if ( lex_compat || nmdefptr[0] == '^' ||
branch  0 taken 318 (fallthrough)
branch  1 taken 137
branch  2 taken 318 (fallthrough)
branch  3 taken 0
branch  4 taken 318 (fallthrough)
branch  5 taken 0
      318:12849:				     (len > 0 && nmdefptr[len - 1] == '$') )
branch  0 taken 0 (fallthrough)
branch  1 taken 318
        -:12850:					{ /* don't use ()'s after all */
     1137:12851:					PUT_BACK_STRING((char *) nmdefptr, 0);
call    0 returned 1000
branch  1 taken 1000
branch  2 taken 137 (fallthrough)
        -:12852:
      137:12853:					if ( nmdefptr[0] == '^' )
branch  0 taken 0 (fallthrough)
branch  1 taken 137
    #####:12854:						BEGIN(CARETISBOL);
        -:12855:					}
        -:12856:
        -:12857:				else
        -:12858:					{
      318:12859:					unput(')');
call    0 returned 318
     2657:12860:					PUT_BACK_STRING((char *) nmdefptr, 0);
call    0 returned 2339
branch  1 taken 2339
branch  2 taken 318 (fallthrough)
      318:12861:					unput('(');
call    0 returned 318
        -:12862:					}
        -:12863:				}
        -:12864:			}
      459:12865:	YY_BREAK
     3822:12866:case 107:
     3822:12867:YY_RULE_SETUP
branch  0 taken 3822 (fallthrough)
branch  1 taken 0
     3822:12868:return (unsigned char) yytext[0];
        -:12869:	YY_BREAK
     8959:12870:case 108:
     8959:12871:YY_RULE_SETUP
branch  0 taken 8959 (fallthrough)
branch  1 taken 0
     8959:12872:RETURNCHAR;
        -:12873:	YY_BREAK
        -:12874:
        -:12875:
        7:12876:case 109:
        7:12877:YY_RULE_SETUP
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:12878:return (unsigned char) yytext[0];
        -:12879:	YY_BREAK
       16:12880:case 110:
       16:12881:YY_RULE_SETUP
branch  0 taken 16 (fallthrough)
branch  1 taken 0
       16:12882:BEGIN(SECT2); return '>';
        -:12883:	YY_BREAK
    #####:12884:case 111:
    #####:12885:*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
    #####:12886:yy_c_buf_p = yy_cp = yy_bp + 1;
    #####:12887:YY_DO_BEFORE_ACTION; /* set up yytext again */
    #####:12888:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12889:BEGIN(CARETISBOL); return '>';
        -:12890:	YY_BREAK
       17:12891:case 112:
       17:12892:YY_RULE_SETUP
branch  0 taken 17 (fallthrough)
branch  1 taken 0
       17:12893:RETURNNAME;
        -:12894:	YY_BREAK
    #####:12895:case 113:
    #####:12896:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12897:{
    #####:12898:			format_synerr( _( "bad <start condition>: %s" ),
call    0 never executed
        -:12899:				yytext );
        -:12900:			}
    #####:12901:	YY_BREAK
        -:12902:
    #####:12903:case 114:
    #####:12904:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12905:BEGIN(SECT2); return '^';
        -:12906:	YY_BREAK
        -:12907:
     1918:12908:case 115:
     1918:12909:YY_RULE_SETUP
branch  0 taken 1918 (fallthrough)
branch  1 taken 0
     1918:12910:RETURNCHAR;
        -:12911:	YY_BREAK
     1099:12912:case 116:
     1099:12913:YY_RULE_SETUP
branch  0 taken 1099 (fallthrough)
branch  1 taken 0
     1099:12914:BEGIN(SECT2); return '"';
        -:12915:	YY_BREAK
    #####:12916:case 117:
    #####:12917:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12918:{
    #####:12919:			synerr( _( "missing quote" ) );
call    0 never executed
    #####:12920:			BEGIN(SECT2);
    #####:12921:			++linenum;
    #####:12922:			return '"';
        -:12923:			}
        -:12924:	YY_BREAK
        -:12925:
        -:12926:
      219:12927:case 118:
      219:12928:*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
      219:12929:yy_c_buf_p = yy_cp = yy_bp + 1;
      219:12930:YY_DO_BEFORE_ACTION; /* set up yytext again */
      219:12931:YY_RULE_SETUP
branch  0 taken 219 (fallthrough)
branch  1 taken 0
      219:12932:BEGIN(CCL); return '^';
        -:12933:	YY_BREAK
    #####:12934:case 119:
    #####:12935:*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
    #####:12936:yy_c_buf_p = yy_cp = yy_bp + 1;
    #####:12937:YY_DO_BEFORE_ACTION; /* set up yytext again */
    #####:12938:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12939:return '^';
        -:12940:	YY_BREAK
     1068:12941:case 120:
     1068:12942:YY_RULE_SETUP
branch  0 taken 1068 (fallthrough)
branch  1 taken 0
     1068:12943:BEGIN(CCL); RETURNCHAR;
        -:12944:	YY_BREAK
        -:12945:
        -:12946:
      880:12947:case 121:
      880:12948:*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
      880:12949:yy_c_buf_p = yy_cp = yy_bp + 1;
      880:12950:YY_DO_BEFORE_ACTION; /* set up yytext again */
      880:12951:YY_RULE_SETUP
branch  0 taken 880 (fallthrough)
branch  1 taken 0
      880:12952:return '-';
        -:12953:	YY_BREAK
     2687:12954:case 122:
     2687:12955:YY_RULE_SETUP
branch  0 taken 2687 (fallthrough)
branch  1 taken 0
     2687:12956:RETURNCHAR;
        -:12957:	YY_BREAK
     1298:12958:case 123:
     1298:12959:YY_RULE_SETUP
branch  0 taken 1298 (fallthrough)
branch  1 taken 0
     1298:12960:BEGIN(SECT2); return ']';
        -:12961:	YY_BREAK
    #####:12962:case 124:
    #####:12963:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:12964:{
    #####:12965:			synerr( _( "bad character class" ) );
call    0 never executed
    #####:12966:			BEGIN(SECT2);
    #####:12967:			return ']';
        -:12968:			}
        -:12969:	YY_BREAK
        -:12970:
        -:12971:
    #####:12972:case 125:
    #####:12973:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12974:BEGIN(CCL); return CCE_ALNUM;
        -:12975:	YY_BREAK
    #####:12976:case 126:
    #####:12977:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12978:BEGIN(CCL); return CCE_ALPHA;
        -:12979:	YY_BREAK
    #####:12980:case 127:
    #####:12981:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12982:BEGIN(CCL); return CCE_BLANK;
        -:12983:	YY_BREAK
    #####:12984:case 128:
    #####:12985:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12986:BEGIN(CCL); return CCE_CNTRL;
        -:12987:	YY_BREAK
    #####:12988:case 129:
    #####:12989:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12990:BEGIN(CCL); return CCE_DIGIT;
        -:12991:	YY_BREAK
    #####:12992:case 130:
    #####:12993:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12994:BEGIN(CCL); return CCE_GRAPH;
        -:12995:	YY_BREAK
    #####:12996:case 131:
    #####:12997:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:12998:BEGIN(CCL); return CCE_LOWER;
        -:12999:	YY_BREAK
    #####:13000:case 132:
    #####:13001:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:13002:BEGIN(CCL); return CCE_PRINT;
        -:13003:	YY_BREAK
    #####:13004:case 133:
    #####:13005:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:13006:BEGIN(CCL); return CCE_PUNCT;
        -:13007:	YY_BREAK
    #####:13008:case 134:
    #####:13009:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:13010:BEGIN(CCL); return CCE_SPACE;
        -:13011:	YY_BREAK
    #####:13012:case 135:
    #####:13013:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:13014:BEGIN(CCL); return CCE_UPPER;
        -:13015:	YY_BREAK
    #####:13016:case 136:
    #####:13017:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:13018:BEGIN(CCL); return CCE_XDIGIT;
        -:13019:	YY_BREAK
    #####:13020:case 137:
    #####:13021:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:13022:{
    #####:13023:			format_synerr(
call    0 never executed
        -:13024:				_( "bad character class expression: %s" ),
        -:13025:					yytext );
    #####:13026:			BEGIN(CCL); return CCE_ALNUM;
        -:13027:			}
        -:13028:	YY_BREAK
        -:13029:
        -:13030:
      396:13031:case 138:
      396:13032:YY_RULE_SETUP
branch  0 taken 396 (fallthrough)
branch  1 taken 0
        -:13033:{
      396:13034:			yylval = myctoi( yytext );
call    0 returned 396
      396:13035:			return NUMBER;
        -:13036:			}
        -:13037:	YY_BREAK
      198:13038:case 139:
      198:13039:YY_RULE_SETUP
branch  0 taken 198 (fallthrough)
branch  1 taken 0
      198:13040:return ',';
        -:13041:	YY_BREAK
      296:13042:case 140:
      296:13043:YY_RULE_SETUP
branch  0 taken 296 (fallthrough)
branch  1 taken 0
      296:13044:BEGIN(SECT2); return '}';
        -:13045:	YY_BREAK
    #####:13046:case 141:
    #####:13047:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:13048:{
    #####:13049:			synerr( _( "bad character inside {}'s" ) );
call    0 never executed
    #####:13050:			BEGIN(SECT2);
    #####:13051:			return '}';
        -:13052:			}
        -:13053:	YY_BREAK
    #####:13054:case 142:
    #####:13055:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:13056:{
    #####:13057:			synerr( _( "missing }" ) );
call    0 never executed
    #####:13058:			BEGIN(SECT2);
    #####:13059:			++linenum;
    #####:13060:			return '}';
        -:13061:			}
        -:13062:	YY_BREAK
        -:13063:
        -:13064:
    #####:13065:case 143:
    #####:13066:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:13067:bracelevel = 0;
    #####:13068:	YY_BREAK
      238:13069:case 144:
      238:13070:YY_RULE_SETUP
branch  0 taken 238 (fallthrough)
branch  1 taken 0
      238:13071:ACTION_ECHO; yy_push_state( COMMENT );
call    0 returned 238
call    1 returned 238
      238:13072:	YY_BREAK
        -:13073:
        8:13074:case 145:
        8:13075:YY_RULE_SETUP
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        -:13076:{
        8:13077:			ACTION_ECHO;
call    0 returned 8
        8:13078:			CHECK_REJECT(yytext);
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0
        -:13079:			}
        8:13080:	YY_BREAK
        5:13081:case 146:
        5:13082:YY_RULE_SETUP
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        -:13083:{
        5:13084:			ACTION_ECHO;
call    0 returned 5
        5:13085:			CHECK_YYMORE(yytext);
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        -:13086:			}
        5:13087:	YY_BREAK
        -:13088:
    #####:13089:case 147:
    #####:13090:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:13091:ACTION_ECHO;
call    0 never executed
    #####:13092:	YY_BREAK
    #####:13093:case 148:
    #####:13094:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
        -:13095:{
    #####:13096:			++linenum;
    #####:13097:			ACTION_ECHO;
call    0 never executed
    #####:13098:			if ( bracelevel == 0 ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:13099:			     (doing_codeblock && indented_code) )
branch  0 never executed
branch  1 never executed
        -:13100:				{
    #####:13101:				if ( doing_rule_action )
branch  0 never executed
branch  1 never executed
    #####:13102:					add_action( "\tYY_BREAK\n" );
call    0 never executed
        -:13103:
    #####:13104:				doing_rule_action = doing_codeblock = false;
    #####:13105:				BEGIN(SECT2);
        -:13106:				}
        -:13107:			}
    #####:13108:	YY_BREAK
        -:13109:
        -:13110:/* Reject and YYmore() are checked for above, in PERCENT_BRACE_ACTION */
        -:13111:
      379:13112:case 149:
      379:13113:YY_RULE_SETUP
branch  0 taken 379 (fallthrough)
branch  1 taken 0
      379:13114:ACTION_ECHO; ++bracelevel;
call    0 returned 379
      379:13115:	YY_BREAK
      379:13116:case 150:
      379:13117:YY_RULE_SETUP
branch  0 taken 379 (fallthrough)
branch  1 taken 0
      379:13118:ACTION_ECHO; --bracelevel;
call    0 returned 379
      379:13119:	YY_BREAK
    11882:13120:case 151:
    11882:13121:YY_RULE_SETUP
branch  0 taken 11882 (fallthrough)
branch  1 taken 0
    11882:13122:ACTION_ECHO;
call    0 returned 11882
    11882:13123:	YY_BREAK
     7474:13124:case 152:
     7474:13125:YY_RULE_SETUP
branch  0 taken 7474 (fallthrough)
branch  1 taken 0
     7474:13126:ACTION_ECHO;
call    0 returned 7474
     7474:13127:	YY_BREAK
        9:13128:case 153:
        9:13129:YY_RULE_SETUP
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:13130:ACTION_ECHO; /* character constant */
call    0 returned 9
        9:13131:	YY_BREAK
     3607:13132:case 154:
     3607:13133:YY_RULE_SETUP
branch  0 taken 3607 (fallthrough)
branch  1 taken 0
     3607:13134:ACTION_ECHO; BEGIN(ACTION_STRING);
call    0 returned 3607
     3607:13135:	YY_BREAK
     4309:13136:case 155:
     4309:13137:YY_RULE_SETUP
branch  0 taken 4309 (fallthrough)
branch  1 taken 0
        -:13138:{
     4309:13139:			++linenum;
     4309:13140:			ACTION_ECHO;
call    0 returned 4309
     4309:13141:			if ( bracelevel == 0 )
branch  0 taken 3522 (fallthrough)
branch  1 taken 787
        -:13142:				{
     3522:13143:				if ( doing_rule_action )
branch  0 taken 3522 (fallthrough)
branch  1 taken 0
     3522:13144:					add_action( "\tYY_BREAK\n" );
call    0 returned 3522
        -:13145:
     3522:13146:				doing_rule_action = false;
     3522:13147:				BEGIN(SECT2);
        -:13148:				}
        -:13149:			}
     4309:13150:	YY_BREAK
    #####:13151:case 156:
    #####:13152:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:13153:ACTION_ECHO;
call    0 never executed
    #####:13154:	YY_BREAK
        -:13155:
        -:13156:
     3607:13157:case 157:
     3607:13158:YY_RULE_SETUP
branch  0 taken 3607 (fallthrough)
branch  1 taken 0
     3607:13159:ACTION_ECHO;
call    0 returned 3607
     3607:13160:	YY_BREAK
     3197:13161:case 158:
     3197:13162:YY_RULE_SETUP
branch  0 taken 3197 (fallthrough)
branch  1 taken 0
     3197:13163:ACTION_ECHO;
call    0 returned 3197
     3197:13164:	YY_BREAK
    #####:13165:case 159:
    #####:13166:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:13167:++linenum; ACTION_ECHO;
call    0 never executed
    #####:13168:	YY_BREAK
     3607:13169:case 160:
     3607:13170:YY_RULE_SETUP
branch  0 taken 3607 (fallthrough)
branch  1 taken 0
     3607:13171:ACTION_ECHO; BEGIN(ACTION);
call    0 returned 3607
     3607:13172:	YY_BREAK
    #####:13173:case 161:
    #####:13174:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:13175:ACTION_ECHO;
call    0 never executed
    #####:13176:	YY_BREAK
        -:13177:
    #####:13178:case YY_STATE_EOF(COMMENT):
        -:13179:case YY_STATE_EOF(ACTION):
        -:13180:case YY_STATE_EOF(ACTION_STRING):
        -:13181:{
    #####:13182:			synerr( _( "EOF encountered inside an action" ) );
call    0 never executed
    #####:13183:			yyterminate();
        -:13184:			}
        -:13185:	YY_BREAK
      595:13186:case 162:
      595:13187:YY_RULE_SETUP
branch  0 taken 595 (fallthrough)
branch  1 taken 0
        -:13188:{
      595:13189:			yylval = myesc( (Char *) yytext );
call    0 returned 595
        -:13190:
      595:13191:			if ( YY_START == FIRSTCCL )
branch  0 taken 11 (fallthrough)
branch  1 taken 584
       11:13192:				BEGIN(CCL);
        -:13193:
      595:13194:			return CHAR;
        -:13195:			}
        -:13196:	YY_BREAK
        -:13197:
     1556:13198:case 163:
     1556:13199:YY_RULE_SETUP
branch  0 taken 1556 (fallthrough)
branch  1 taken 0
     1556:13200:ECHO;
call    0 returned 1556
     1556:13201:	YY_BREAK
      113:13202:case YY_STATE_EOF(SECT3):
      113:13203:sectnum = 0; yyterminate();
        -:13204:	YY_BREAK
        -:13205:
    #####:13206:case 164:
    #####:13207:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:13208:format_synerr( _( "bad character: %s" ), yytext );
call    0 never executed
    #####:13209:	YY_BREAK
    #####:13210:case 165:
    #####:13211:YY_RULE_SETUP
branch  0 never executed
branch  1 never executed
    #####:13212:YY_FATAL_ERROR( "flex scanner jammed" );
call    0 never executed
    #####:13213:	YY_BREAK
      432:13214:case YY_STATE_EOF(INITIAL):
        -:13215:case YY_STATE_EOF(SECT2):
        -:13216:case YY_STATE_EOF(CODEBLOCK):
        -:13217:case YY_STATE_EOF(PICKUPDEF):
        -:13218:case YY_STATE_EOF(SC):
        -:13219:case YY_STATE_EOF(CARETISBOL):
        -:13220:case YY_STATE_EOF(NUM):
        -:13221:case YY_STATE_EOF(QUOTE):
        -:13222:case YY_STATE_EOF(FIRSTCCL):
        -:13223:case YY_STATE_EOF(CCL):
        -:13224:case YY_STATE_EOF(RECOVER):
        -:13225:case YY_STATE_EOF(PERCENT_BRACE_ACTION):
        -:13226:case YY_STATE_EOF(OPTION):
        -:13227:case YY_STATE_EOF(LINEDIR):
      432:13228:	yyterminate();
        -:13229:
     1111:13230:	case YY_END_OF_BUFFER:
        -:13231:		{
        -:13232:		/* Amount of text matched not including the EOB char. */
     1111:13233:		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
        -:13234:
        -:13235:		/* Undo the effects of YY_DO_BEFORE_ACTION. */
     1111:13236:		*yy_cp = yy_hold_char;
        -:13237:
     1111:13238:		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
branch  0 taken 561 (fallthrough)
branch  1 taken 550
        -:13239:			{
        -:13240:			/* We're scanning a new file or input source.  It's
        -:13241:			 * possible that this happened because the user
        -:13242:			 * just pointed yyin at a new source and called
        -:13243:			 * yylex().  If so, then we have to assure
        -:13244:			 * consistency between yy_current_buffer and our
        -:13245:			 * globals.  Here is the right place to do so, because
        -:13246:			 * this is the first action (other than possibly a
        -:13247:			 * back-up) that will match for the new input source.
        -:13248:			 */
      561:13249:			yy_n_chars = yy_current_buffer->yy_n_chars;
      561:13250:			yy_current_buffer->yy_input_file = yyin;
      561:13251:			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
        -:13252:			}
        -:13253:
        -:13254:		/* Note that here we test for yy_c_buf_p "<=" to the position
        -:13255:		 * of the first EOB in the buffer, since yy_c_buf_p will
        -:13256:		 * already have been incremented past the NUL character
        -:13257:		 * (since all states make transitions on EOB to the
        -:13258:		 * end-of-buffer state).  Contrast this with the test
        -:13259:		 * in input().
        -:13260:		 */
     1111:13261:		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
branch  0 taken 0 (fallthrough)
branch  1 taken 1111
        -:13262:			{ /* This was really a NUL. */
        -:13263:			yy_state_type yy_next_state;
        -:13264:
    #####:13265:			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
        -:13266:
    #####:13267:			yy_current_state = yy_get_previous_state();
call    0 never executed
        -:13268:
        -:13269:			/* Okay, we're now positioned to make the NUL
        -:13270:			 * transition.  We couldn't have
        -:13271:			 * yy_get_previous_state() go ahead and do it
        -:13272:			 * for us because it doesn't know how to deal
        -:13273:			 * with the possibility of jamming (and we don't
        -:13274:			 * want to build jamming into it because then it
        -:13275:			 * will run more slowly).
        -:13276:			 */
        -:13277:
    #####:13278:			yy_next_state = yy_try_NUL_trans( yy_current_state );
call    0 never executed
        -:13279:
    #####:13280:			yy_bp = yytext_ptr + YY_MORE_ADJ;
        -:13281:
    #####:13282:			if ( yy_next_state )
branch  0 never executed
branch  1 never executed
        -:13283:				{
        -:13284:				/* Consume the NUL. */
    #####:13285:				yy_cp = ++yy_c_buf_p;
    #####:13286:				yy_current_state = yy_next_state;
    #####:13287:				goto yy_match;
        -:13288:				}
        -:13289:
        -:13290:			else
        -:13291:				{
    #####:13292:				yy_cp = yy_c_buf_p;
    #####:13293:				goto yy_find_action;
        -:13294:				}
        -:13295:			}
        -:13296:
     1111:13297:		else switch ( yy_get_next_buffer() )
call    0 returned 1111
        -:13298:			{
      547:13299:			case EOB_ACT_END_OF_FILE:
        -:13300:				{
      547:13301:				yy_did_buffer_switch_on_eof = 0;
        -:13302:
      547:13303:				if ( yywrap() )
call    0 returned 547
branch  1 taken 546 (fallthrough)
branch  2 taken 1
        -:13304:					{
        -:13305:					/* Note: because we've taken care in
        -:13306:					 * yy_get_next_buffer() to have set up
        -:13307:					 * yytext, we can now set up
        -:13308:					 * yy_c_buf_p so that if some total
        -:13309:					 * hoser (like flex itself) wants to
        -:13310:					 * call the scanner after we return the
        -:13311:					 * YY_NULL, it'll still work - another
        -:13312:					 * YY_NULL will get returned.
        -:13313:					 */
      546:13314:					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
        -:13315:
      546:13316:					yy_act = YY_STATE_EOF(YY_START);
      546:13317:					goto do_action;
        -:13318:					}
        -:13319:
        -:13320:				else
        -:13321:					{
        1:13322:					if ( ! yy_did_buffer_switch_on_eof )
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:13323:						YY_NEW_FILE;
call    0 returned 1
        -:13324:					}
        1:13325:				break;
        -:13326:				}
        -:13327:
      564:13328:			case EOB_ACT_CONTINUE_SCAN:
      564:13329:				yy_c_buf_p =
      564:13330:					yytext_ptr + yy_amount_of_matched_text;
        -:13331:
      564:13332:				yy_current_state = yy_get_previous_state();
call    0 returned 564
        -:13333:
      564:13334:				yy_cp = yy_c_buf_p;
      564:13335:				yy_bp = yytext_ptr + YY_MORE_ADJ;
      564:13336:				goto yy_match;
        -:13337:
    #####:13338:			case EOB_ACT_LAST_MATCH:
    #####:13339:				yy_c_buf_p =
    #####:13340:				&yy_current_buffer->yy_ch_buf[yy_n_chars];
        -:13341:
    #####:13342:				yy_current_state = yy_get_previous_state();
call    0 never executed
        -:13343:
    #####:13344:				yy_cp = yy_c_buf_p;
    #####:13345:				yy_bp = yytext_ptr + YY_MORE_ADJ;
    #####:13346:				goto yy_find_action;
        -:13347:			}
        1:13348:		break;
        -:13349:		}
        -:13350:
    #####:13351:	default:
    #####:13352:		YY_FATAL_ERROR(
call    0 never executed
        -:13353:			"fatal flex scanner internal error--no action found" );
        -:13354:	} /* end of action switch */
        -:13355:		} /* end of scanning one token */
        -:13356:	} /* end of yylex */
        -:13357:
        -:13358:
        -:13359:/* yy_get_next_buffer - try to read in a new buffer
        -:13360: *
        -:13361: * Returns a code representing an action:
        -:13362: *	EOB_ACT_LAST_MATCH -
        -:13363: *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
        -:13364: *	EOB_ACT_END_OF_FILE - end of file
        -:13365: */
        -:13366:
function yy_get_next_buffer called 1111 returned 100% blocks executed 41%
     1111:13367:static int yy_get_next_buffer()
        -:13368:	{
     1111:13369:	register char *dest = yy_current_buffer->yy_ch_buf;
     1111:13370:	register char *source = yytext_ptr;
        -:13371:	register int number_to_move, i;
        -:13372:	int ret_val;
        -:13373:
     1111:13374:	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
branch  0 taken 0 (fallthrough)
branch  1 taken 1111
    #####:13375:		YY_FATAL_ERROR(
call    0 never executed
        -:13376:		"fatal flex scanner internal error--end of buffer missed" );
        -:13377:
     1111:13378:	if ( yy_current_buffer->yy_fill_buffer == 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 1111
        -:13379:		{ /* Don't try to fill the buffer, so this is an EOF. */
    #####:13380:		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
branch  0 never executed
branch  1 never executed
        -:13381:			{
        -:13382:			/* We matched a singled characater, the EOB, so
        -:13383:			 * treat this as a final EOF.
        -:13384:			 */
    #####:13385:			return EOB_ACT_END_OF_FILE;
        -:13386:			}
        -:13387:
        -:13388:		else
        -:13389:			{
        -:13390:			/* We matched some text prior to the EOB, first
        -:13391:			 * process it.
        -:13392:			 */
    #####:13393:			return EOB_ACT_LAST_MATCH;
        -:13394:			}
        -:13395:		}
        -:13396:
        -:13397:	/* Try to read more data. */
        -:13398:
        -:13399:	/* First move last chars to start of buffer. */
     1111:13400:	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
        -:13401:
     1114:13402:	for ( i = 0; i < number_to_move; ++i )
branch  0 taken 3
branch  1 taken 1111 (fallthrough)
        3:13403:		*(dest++) = *(source++);
        -:13404:
     1111:13405:	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
branch  0 taken 0 (fallthrough)
branch  1 taken 1111
        -:13406:		/* don't do the read, it's not guaranteed to return an EOF,
        -:13407:		 * just force an EOF
        -:13408:		 */
    #####:13409:		yy_n_chars = 0;
        -:13410:
        -:13411:	else
        -:13412:		{
     1111:13413:		int num_to_read =
     1111:13414:			yy_current_buffer->yy_buf_size - number_to_move - 1;
        -:13415:
     1111:13416:		while ( num_to_read <= 0 )
branch  0 taken 0
branch  1 taken 1111 (fallthrough)
        -:13417:			{ /* Not enough room in the buffer - grow it. */
        -:13418:#ifdef YY_USES_REJECT
        -:13419:			YY_FATAL_ERROR(
        -:13420:"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
        -:13421:#else
        -:13422:
        -:13423:			/* just a shorter name for the current buffer */
    #####:13424:			YY_BUFFER_STATE b = yy_current_buffer;
        -:13425:
    #####:13426:			int yy_c_buf_p_offset =
    #####:13427:				(int) (yy_c_buf_p - b->yy_ch_buf);
        -:13428:
    #####:13429:			if ( b->yy_is_our_buffer )
branch  0 never executed
branch  1 never executed
        -:13430:				{
    #####:13431:				int new_size = b->yy_buf_size * 2;
        -:13432:
    #####:13433:				if ( new_size <= 0 )
branch  0 never executed
branch  1 never executed
    #####:13434:					b->yy_buf_size += b->yy_buf_size / 8;
        -:13435:				else
    #####:13436:					b->yy_buf_size *= 2;
        -:13437:
    #####:13438:				b->yy_ch_buf = (char *)
        -:13439:					/* Include room in for 2 EOB chars. */
    #####:13440:					yy_flex_realloc( (void *) b->yy_ch_buf,
    #####:13441:							 b->yy_buf_size + 2 );
call    0 never executed
        -:13442:				}
        -:13443:			else
        -:13444:				/* Can't grow it, we don't own it. */
    #####:13445:				b->yy_ch_buf = 0;
        -:13446:
    #####:13447:			if ( ! b->yy_ch_buf )
branch  0 never executed
branch  1 never executed
    #####:13448:				YY_FATAL_ERROR(
call    0 never executed
        -:13449:				"fatal error - scanner input buffer overflow" );
        -:13450:
    #####:13451:			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
        -:13452:
    #####:13453:			num_to_read = yy_current_buffer->yy_buf_size -
    #####:13454:						number_to_move - 1;
        -:13455:#endif
        -:13456:			}
        -:13457:
     1111:13458:		if ( num_to_read > YY_READ_BUF_SIZE )
branch  0 taken 1111 (fallthrough)
branch  1 taken 0
     1111:13459:			num_to_read = YY_READ_BUF_SIZE;
        -:13460:
        -:13461:		/* Read in more data. */
    1111*:13462:		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
branch  0 taken 0 (fallthrough)
branch  1 taken 1111
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 returned 1111
branch 18 taken 547 (fallthrough)
branch 19 taken 564
call   20 returned 547
branch 21 taken 0 (fallthrough)
branch 22 taken 547
call   23 never executed
        -:13463:			yy_n_chars, num_to_read );
        -:13464:		}
        -:13465:
     1111:13466:	if ( yy_n_chars == 0 )
branch  0 taken 547 (fallthrough)
branch  1 taken 564
        -:13467:		{
      547:13468:		if ( number_to_move == YY_MORE_ADJ )
branch  0 taken 547 (fallthrough)
branch  1 taken 0
        -:13469:			{
      547:13470:			ret_val = EOB_ACT_END_OF_FILE;
      547:13471:			yyrestart( yyin );
call    0 returned 547
        -:13472:			}
        -:13473:
        -:13474:		else
        -:13475:			{
    #####:13476:			ret_val = EOB_ACT_LAST_MATCH;
    #####:13477:			yy_current_buffer->yy_buffer_status =
        -:13478:				YY_BUFFER_EOF_PENDING;
        -:13479:			}
        -:13480:		}
        -:13481:
        -:13482:	else
      564:13483:		ret_val = EOB_ACT_CONTINUE_SCAN;
        -:13484:
     1111:13485:	yy_n_chars += number_to_move;
     1111:13486:	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
     1111:13487:	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
        -:13488:
     1111:13489:	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
        -:13490:
     1111:13491:	return ret_val;
        -:13492:	}
        -:13493:
        -:13494:
        -:13495:/* yy_get_previous_state - get the state just before the EOB char was reached */
        -:13496:
function yy_get_previous_state called 564 returned 100% blocks executed 93%
      564:13497:static yy_state_type yy_get_previous_state()
        -:13498:	{
        -:13499:	register yy_state_type yy_current_state;
        -:13500:	register char *yy_cp;
        -:13501:
      564:13502:	yy_current_state = yy_start;
      564:13503:	yy_current_state += YY_AT_BOL();
        -:13504:
      567:13505:	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
branch  0 taken 3
branch  1 taken 564 (fallthrough)
        -:13506:		{
       3*:13507:		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:13508:		if ( yy_accept[yy_current_state] )
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:13509:			{
        1:13510:			yy_last_accepting_state = yy_current_state;
        1:13511:			yy_last_accepting_cpos = yy_cp;
        -:13512:			}
        4:13513:		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
branch  0 taken 1
branch  1 taken 3 (fallthrough)
        -:13514:			{
        1:13515:			yy_current_state = (int) yy_def[yy_current_state];
        1:13516:			if ( yy_current_state >= 769 )
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:13517:				yy_c = yy_meta[(unsigned int) yy_c];
        -:13518:			}
        3:13519:		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        -:13520:		}
        -:13521:
      564:13522:	return yy_current_state;
        -:13523:	}
        -:13524:
        -:13525:
        -:13526:/* yy_try_NUL_trans - try to make a transition on the NUL character
        -:13527: *
        -:13528: * synopsis
        -:13529: *	next_state = yy_try_NUL_trans( current_state );
        -:13530: */
        -:13531:
        -:13532:#ifdef YY_USE_PROTOS
function yy_try_NUL_trans called 0 returned 0% blocks executed 0%
    #####:13533:static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
        -:13534:#else
        -:13535:static yy_state_type yy_try_NUL_trans( yy_current_state )
        -:13536:yy_state_type yy_current_state;
        -:13537:#endif
        -:13538:	{
        -:13539:	register int yy_is_jam;
    #####:13540:	register char *yy_cp = yy_c_buf_p;
        -:13541:
    #####:13542:	register YY_CHAR yy_c = 1;
    #####:13543:	if ( yy_accept[yy_current_state] )
branch  0 never executed
branch  1 never executed
        -:13544:		{
    #####:13545:		yy_last_accepting_state = yy_current_state;
    #####:13546:		yy_last_accepting_cpos = yy_cp;
        -:13547:		}
    #####:13548:	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
branch  0 never executed
branch  1 never executed
        -:13549:		{
    #####:13550:		yy_current_state = (int) yy_def[yy_current_state];
    #####:13551:		if ( yy_current_state >= 769 )
branch  0 never executed
branch  1 never executed
    #####:13552:			yy_c = yy_meta[(unsigned int) yy_c];
        -:13553:		}
    #####:13554:	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    #####:13555:	yy_is_jam = (yy_current_state == 768);
        -:13556:
    #####:13557:	return yy_is_jam ? 0 : yy_current_state;
branch  0 never executed
branch  1 never executed
        -:13558:	}
        -:13559:
        -:13560:
        -:13561:#ifndef YY_NO_UNPUT
        -:13562:#ifdef YY_USE_PROTOS
function yyunput called 3997 returned 100% blocks executed 29%
     3997:13563:static void yyunput( int c, register char *yy_bp )
        -:13564:#else
        -:13565:static void yyunput( c, yy_bp )
        -:13566:int c;
        -:13567:register char *yy_bp;
        -:13568:#endif
        -:13569:	{
     3997:13570:	register char *yy_cp = yy_c_buf_p;
        -:13571:
        -:13572:	/* undo effects of setting up yytext */
     3997:13573:	*yy_cp = yy_hold_char;
        -:13574:
     3997:13575:	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
branch  0 taken 0 (fallthrough)
branch  1 taken 3997
        -:13576:		{ /* need to shift things up to make room */
        -:13577:		/* +2 for EOB chars. */
    #####:13578:		register int number_to_move = yy_n_chars + 2;
    #####:13579:		register char *dest = &yy_current_buffer->yy_ch_buf[
    #####:13580:					yy_current_buffer->yy_buf_size + 2];
    #####:13581:		register char *source =
    #####:13582:				&yy_current_buffer->yy_ch_buf[number_to_move];
        -:13583:
    #####:13584:		while ( source > yy_current_buffer->yy_ch_buf )
branch  0 never executed
branch  1 never executed
    #####:13585:			*--dest = *--source;
        -:13586:
    #####:13587:		yy_cp += (int) (dest - source);
    #####:13588:		yy_bp += (int) (dest - source);
    #####:13589:		yy_n_chars = yy_current_buffer->yy_buf_size;
        -:13590:
    #####:13591:		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
branch  0 never executed
branch  1 never executed
    #####:13592:			YY_FATAL_ERROR( "flex scanner push-back overflow" );
call    0 never executed
        -:13593:		}
        -:13594:
     3997:13595:	*--yy_cp = (char) c;
        -:13596:
        -:13597:
     3997:13598:	yytext_ptr = yy_bp;
     3997:13599:	yy_hold_char = *yy_cp;
     3997:13600:	yy_c_buf_p = yy_cp;
     3997:13601:	}
        -:13602:#endif	/* ifndef YY_NO_UNPUT */
        -:13603:
        -:13604:
        -:13605:#ifdef __cplusplus
        -:13606:static int yyinput()
        -:13607:#else
function input called 233 returned 100% blocks executed 19%
      233:13608:static int input()
        -:13609:#endif
        -:13610:	{
        -:13611:	int c;
        -:13612:
      233:13613:	*yy_c_buf_p = yy_hold_char;
        -:13614:
      233:13615:	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
branch  0 taken 0 (fallthrough)
branch  1 taken 233
        -:13616:		{
        -:13617:		/* yy_c_buf_p now points to the character we want to return.
        -:13618:		 * If this occurs *before* the EOB characters, then it's a
        -:13619:		 * valid NUL; if not, then we've hit the end of the buffer.
        -:13620:		 */
    #####:13621:		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
branch  0 never executed
branch  1 never executed
        -:13622:			/* This was really a NUL. */
    #####:13623:			*yy_c_buf_p = '\0';
        -:13624:
        -:13625:		else
        -:13626:			{ /* need more input */
    #####:13627:			yytext_ptr = yy_c_buf_p;
    #####:13628:			++yy_c_buf_p;
        -:13629:
    #####:13630:			switch ( yy_get_next_buffer() )
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:13631:				{
    #####:13632:				case EOB_ACT_END_OF_FILE:
        -:13633:					{
    #####:13634:					if ( yywrap() )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:13635:						{
    #####:13636:						yy_c_buf_p =
        -:13637:						yytext_ptr + YY_MORE_ADJ;
    #####:13638:						return EOF;
        -:13639:						}
        -:13640:
    #####:13641:					if ( ! yy_did_buffer_switch_on_eof )
branch  0 never executed
branch  1 never executed
    #####:13642:						YY_NEW_FILE;
call    0 never executed
        -:13643:#ifdef __cplusplus
        -:13644:					return yyinput();
        -:13645:#else
    #####:13646:					return input();
call    0 never executed
        -:13647:#endif
        -:13648:					}
        -:13649:
    #####:13650:				case EOB_ACT_CONTINUE_SCAN:
    #####:13651:					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
    #####:13652:					break;
        -:13653:
    #####:13654:				case EOB_ACT_LAST_MATCH:
        -:13655:#ifdef __cplusplus
        -:13656:					YY_FATAL_ERROR(
        -:13657:					"unexpected last match in yyinput()" );
        -:13658:#else
    #####:13659:					YY_FATAL_ERROR(
call    0 never executed
        -:13660:					"unexpected last match in input()" );
        -:13661:#endif
        -:13662:				}
        -:13663:			}
        -:13664:		}
        -:13665:
      233:13666:	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
      233:13667:	*yy_c_buf_p = '\0';	/* preserve yytext */
      233:13668:	yy_hold_char = *++yy_c_buf_p;
        -:13669:
      233:13670:	yy_current_buffer->yy_at_bol = (c == '\n');
        -:13671:
      233:13672:	return c;
        -:13673:	}
        -:13674:
        -:13675:
        -:13676:#ifdef YY_USE_PROTOS
function yyrestart called 548 returned 100% blocks executed 67%
      548:13677:void yyrestart( FILE *input_file )
        -:13678:#else
        -:13679:void yyrestart( input_file )
        -:13680:FILE *input_file;
        -:13681:#endif
        -:13682:	{
      548:13683:	if ( ! yy_current_buffer )
branch  0 taken 0 (fallthrough)
branch  1 taken 548
    #####:13684:		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );
call    0 never executed
        -:13685:
      548:13686:	yy_init_buffer( yy_current_buffer, input_file );
call    0 returned 548
      548:13687:	yy_load_buffer_state();
call    0 returned 548
      548:13688:	}
        -:13689:
        -:13690:
        -:13691:#ifdef YY_USE_PROTOS
function yy_switch_to_buffer called 0 returned 0% blocks executed 0%
    #####:13692:void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
        -:13693:#else
        -:13694:void yy_switch_to_buffer( new_buffer )
        -:13695:YY_BUFFER_STATE new_buffer;
        -:13696:#endif
        -:13697:	{
    #####:13698:	if ( yy_current_buffer == new_buffer )
branch  0 never executed
branch  1 never executed
    #####:13699:		return;
        -:13700:
    #####:13701:	if ( yy_current_buffer )
branch  0 never executed
branch  1 never executed
        -:13702:		{
        -:13703:		/* Flush out information for old buffer. */
    #####:13704:		*yy_c_buf_p = yy_hold_char;
    #####:13705:		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
    #####:13706:		yy_current_buffer->yy_n_chars = yy_n_chars;
        -:13707:		}
        -:13708:
    #####:13709:	yy_current_buffer = new_buffer;
    #####:13710:	yy_load_buffer_state();
call    0 never executed
        -:13711:
        -:13712:	/* We don't actually know whether we did this switch during
        -:13713:	 * EOF (yywrap()) processing, but the only time this flag
        -:13714:	 * is looked at is after yywrap() is called, so it's safe
        -:13715:	 * to go ahead and always set it.
        -:13716:	 */
    #####:13717:	yy_did_buffer_switch_on_eof = 1;
        -:13718:	}
        -:13719:
        -:13720:
        -:13721:#ifdef YY_USE_PROTOS
function yy_load_buffer_state called 1656 returned 100% blocks executed 100%
     1656:13722:void yy_load_buffer_state( void )
        -:13723:#else
        -:13724:void yy_load_buffer_state()
        -:13725:#endif
        -:13726:	{
     1656:13727:	yy_n_chars = yy_current_buffer->yy_n_chars;
     1656:13728:	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
     1656:13729:	yyin = yy_current_buffer->yy_input_file;
     1656:13730:	yy_hold_char = *yy_c_buf_p;
     1656:13731:	}
        -:13732:
        -:13733:
        -:13734:#ifdef YY_USE_PROTOS
function yy_create_buffer called 560 returned 100% blocks executed 78%
      560:13735:YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
        -:13736:#else
        -:13737:YY_BUFFER_STATE yy_create_buffer( file, size )
        -:13738:FILE *file;
        -:13739:int size;
        -:13740:#endif
        -:13741:	{
        -:13742:	YY_BUFFER_STATE b;
        -:13743:
      560:13744:	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
call    0 returned 560
      560:13745:	if ( ! b )
branch  0 taken 0 (fallthrough)
branch  1 taken 560
    #####:13746:		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
call    0 never executed
        -:13747:
      560:13748:	b->yy_buf_size = size;
        -:13749:
        -:13750:	/* yy_ch_buf has to be 2 characters longer than the size given because
        -:13751:	 * we need to put in 2 end-of-buffer characters.
        -:13752:	 */
      560:13753:	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
call    0 returned 560
      560:13754:	if ( ! b->yy_ch_buf )
branch  0 taken 0 (fallthrough)
branch  1 taken 560
    #####:13755:		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
call    0 never executed
        -:13756:
      560:13757:	b->yy_is_our_buffer = 1;
        -:13758:
      560:13759:	yy_init_buffer( b, file );
call    0 returned 560
        -:13760:
      560:13761:	return b;
        -:13762:	}
        -:13763:
        -:13764:
        -:13765:#ifdef YY_USE_PROTOS
function yy_delete_buffer called 0 returned 0% blocks executed 0%
    #####:13766:void yy_delete_buffer( YY_BUFFER_STATE b )
        -:13767:#else
        -:13768:void yy_delete_buffer( b )
        -:13769:YY_BUFFER_STATE b;
        -:13770:#endif
        -:13771:	{
        -:13772:#ifndef F_HD_4
    #####:13773:	if ( ! b )
branch  0 never executed
branch  1 never executed
    #####:13774:               return;
        -:13775:#else
        -:13776:
        -:13777:#endif
        -:13778:
        -:13779:
    #####:13780:	if ( b == yy_current_buffer )
branch  0 never executed
branch  1 never executed
    #####:13781:		yy_current_buffer = (YY_BUFFER_STATE) 0;
        -:13782:
    #####:13783:	if ( b->yy_is_our_buffer )
branch  0 never executed
branch  1 never executed
    #####:13784:		yy_flex_free( (void *) b->yy_ch_buf );
call    0 never executed
        -:13785:
    #####:13786:	yy_flex_free( (void *) b );
call    0 never executed
        -:13787:	}
        -:13788:
        -:13789:
        -:13790:#ifndef YY_ALWAYS_INTERACTIVE
        -:13791:#ifndef YY_NEVER_INTERACTIVE
        -:13792:extern int isatty YY_PROTO(( int ));
        -:13793:#endif
        -:13794:#endif
        -:13795:
        -:13796:#ifdef YY_USE_PROTOS
function yy_init_buffer called 1108 returned 100% blocks executed 88%
     1108:13797:void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
        -:13798:#else
        -:13799:void yy_init_buffer( b, file )
        -:13800:YY_BUFFER_STATE b;
        -:13801:FILE *file;
        -:13802:#endif
        -:13803:
        -:13804:
        -:13805:	{
     1108:13806:	yy_flush_buffer( b );
call    0 returned 1108
        -:13807:
     1108:13808:	b->yy_input_file = file;
     1108:13809:	b->yy_fill_buffer = 1;
        -:13810:
        -:13811:#if YY_ALWAYS_INTERACTIVE
        -:13812:	b->yy_is_interactive = 1;
        -:13813:#else
        -:13814:#if YY_NEVER_INTERACTIVE
        -:13815:	b->yy_is_interactive = 0;
        -:13816:#else
    1108*:13817:	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
branch  0 taken 1108 (fallthrough)
branch  1 taken 0
call    2 returned 1108
call    3 returned 1108
branch  4 taken 0 (fallthrough)
branch  5 taken 1108
        -:13818:#endif
        -:13819:#endif
     1108:13820:	}
        -:13821:
        -:13822:
        -:13823:#ifdef YY_USE_PROTOS
function yy_flush_buffer called 1108 returned 100% blocks executed 100%
     1108:13824:void yy_flush_buffer( YY_BUFFER_STATE b )
        -:13825:#else
        -:13826:void yy_flush_buffer( b )
        -:13827:YY_BUFFER_STATE b;
        -:13828:#endif
        -:13829:
        -:13830:	{
     1108:13831:	b->yy_n_chars = 0;
        -:13832:
        -:13833:	/* We always need two end-of-buffer characters.  The first causes
        -:13834:	 * a transition to the end-of-buffer state.  The second causes
        -:13835:	 * a jam in that state.
        -:13836:	 */
     1108:13837:	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
     1108:13838:	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
        -:13839:
     1108:13840:	b->yy_buf_pos = &b->yy_ch_buf[0];
        -:13841:
     1108:13842:	b->yy_at_bol = 1;
     1108:13843:	b->yy_buffer_status = YY_BUFFER_NEW;
        -:13844:
     1108:13845:	if ( b == yy_current_buffer )
branch  0 taken 548 (fallthrough)
branch  1 taken 560
      548:13846:		yy_load_buffer_state();
call    0 returned 548
     1108:13847:	}
        -:13848:
        -:13849:
        -:13850:#ifndef YY_NO_SCAN_BUFFER
        -:13851:#ifdef YY_USE_PROTOS
function yy_scan_buffer called 0 returned 0% blocks executed 0%
    #####:13852:YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
        -:13853:#else
        -:13854:YY_BUFFER_STATE yy_scan_buffer( base, size )
        -:13855:char *base;
        -:13856:yy_size_t size;
        -:13857:#endif
        -:13858:	{
        -:13859:	YY_BUFFER_STATE b;
        -:13860:
    #####:13861:	if ( size < 2 ||
branch  0 never executed
branch  1 never executed
    #####:13862:	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
branch  0 never executed
branch  1 never executed
    #####:13863:	     base[size-1] != YY_END_OF_BUFFER_CHAR )
branch  0 never executed
branch  1 never executed
        -:13864:		/* They forgot to leave room for the EOB's. */
    #####:13865:		return 0;
        -:13866:
    #####:13867:	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
call    0 never executed
    #####:13868:	if ( ! b )
branch  0 never executed
branch  1 never executed
    #####:13869:		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
call    0 never executed
        -:13870:
    #####:13871:	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
    #####:13872:	b->yy_buf_pos = b->yy_ch_buf = base;
    #####:13873:	b->yy_is_our_buffer = 0;
    #####:13874:	b->yy_input_file = 0;
    #####:13875:	b->yy_n_chars = b->yy_buf_size;
    #####:13876:	b->yy_is_interactive = 0;
    #####:13877:	b->yy_at_bol = 1;
    #####:13878:	b->yy_fill_buffer = 0;
    #####:13879:	b->yy_buffer_status = YY_BUFFER_NEW;
        -:13880:
    #####:13881:	yy_switch_to_buffer( b );
call    0 never executed
        -:13882:
    #####:13883:	return b;
        -:13884:	}
        -:13885:#endif
        -:13886:
        -:13887:
        -:13888:#ifndef YY_NO_SCAN_STRING
        -:13889:#ifdef YY_USE_PROTOS
function yy_scan_string called 0 returned 0% blocks executed 0%
    #####:13890:YY_BUFFER_STATE yy_scan_string( yyconst char *str )
        -:13891:#else
        -:13892:YY_BUFFER_STATE yy_scan_string( str )
        -:13893:yyconst char *str;
        -:13894:#endif
        -:13895:	{
        -:13896:	int len;
    #####:13897:	for ( len = 0; str[len]; ++len )
branch  0 never executed
branch  1 never executed
        -:13898:		;
        -:13899:
    #####:13900:	return yy_scan_bytes( str, len );
call    0 never executed
        -:13901:	}
        -:13902:#endif
        -:13903:
        -:13904:
        -:13905:#ifndef YY_NO_SCAN_BYTES
        -:13906:#ifdef YY_USE_PROTOS
function yy_scan_bytes called 0 returned 0% blocks executed 0%
    #####:13907:YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
        -:13908:#else
        -:13909:YY_BUFFER_STATE yy_scan_bytes( bytes, len )
        -:13910:yyconst char *bytes;
        -:13911:int len;
        -:13912:#endif
        -:13913:	{
        -:13914:	YY_BUFFER_STATE b;
        -:13915:	char *buf;
        -:13916:	yy_size_t n;
        -:13917:	int i;
        -:13918:
        -:13919:	/* Get memory for full buffer, including space for trailing EOB's. */
    #####:13920:	n = len + 2;
    #####:13921:	buf = (char *) yy_flex_alloc( n );
call    0 never executed
    #####:13922:	if ( ! buf )
branch  0 never executed
branch  1 never executed
    #####:13923:		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
call    0 never executed
        -:13924:
    #####:13925:	for ( i = 0; i < len; ++i )
branch  0 never executed
branch  1 never executed
    #####:13926:		buf[i] = bytes[i];
        -:13927:
    #####:13928:	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
        -:13929:
    #####:13930:	b = yy_scan_buffer( buf, n );
call    0 never executed
    #####:13931:	if ( ! b )
branch  0 never executed
branch  1 never executed
    #####:13932:		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
call    0 never executed
        -:13933:
        -:13934:	/* It's okay to grow etc. this buffer, and we should throw it
        -:13935:	 * away when we're done.
        -:13936:	 */
    #####:13937:	b->yy_is_our_buffer = 1;
        -:13938:
    #####:13939:	return b;
        -:13940:	}
        -:13941:#endif
        -:13942:
        -:13943:
        -:13944:#ifndef YY_NO_PUSH_STATE
        -:13945:#ifdef YY_USE_PROTOS
function yy_push_state called 357 returned 100% blocks executed 67%
      357:13946:static void yy_push_state( int new_state )
        -:13947:#else
        -:13948:static void yy_push_state( new_state )
        -:13949:int new_state;
        -:13950:#endif
        -:13951:	{
      357:13952:	if ( yy_start_stack_ptr >= yy_start_stack_depth )
branch  0 taken 124 (fallthrough)
branch  1 taken 233
        -:13953:		{
        -:13954:		yy_size_t new_size;
        -:13955:
      124:13956:		yy_start_stack_depth += YY_START_STACK_INCR;
      124:13957:		new_size = yy_start_stack_depth * sizeof( int );
        -:13958:
      124:13959:		if ( ! yy_start_stack )
branch  0 taken 124 (fallthrough)
branch  1 taken 0
      124:13960:			yy_start_stack = (int *) yy_flex_alloc( new_size );
call    0 returned 124
        -:13961:
        -:13962:		else
    #####:13963:			yy_start_stack = (int *) yy_flex_realloc(
call    0 never executed
        -:13964:					(void *) yy_start_stack, new_size );
        -:13965:
      124:13966:		if ( ! yy_start_stack )
branch  0 taken 0 (fallthrough)
branch  1 taken 124
    #####:13967:			YY_FATAL_ERROR(
call    0 never executed
        -:13968:			"out of memory expanding start-condition stack" );
        -:13969:		}
        -:13970:
      357:13971:	yy_start_stack[yy_start_stack_ptr++] = YY_START;
        -:13972:
      357:13973:	BEGIN(new_state);
      357:13974:	}
        -:13975:#endif
        -:13976:
        -:13977:
        -:13978:#ifndef YY_NO_POP_STATE
function yy_pop_state called 357 returned 100% blocks executed 67%
      357:13979:static void yy_pop_state()
        -:13980:	{
      357:13981:	if ( --yy_start_stack_ptr < 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 357
    #####:13982:		YY_FATAL_ERROR( "start-condition stack underflow" );
call    0 never executed
        -:13983:
      357:13984:	BEGIN(yy_start_stack[yy_start_stack_ptr]);
      357:13985:	}
        -:13986:#endif
        -:13987:
        -:13988:
        -:13989:#ifndef YY_NO_TOP_STATE
        -:13990:static int yy_top_state()
        -:13991:	{
        -:13992:	return yy_start_stack[yy_start_stack_ptr - 1];
        -:13993:	}
        -:13994:#endif
        -:13995:
        -:13996:#ifndef YY_EXIT_FAILURE
        -:13997:#define YY_EXIT_FAILURE 2
        -:13998:#endif
        -:13999:
        -:14000:#ifdef YY_USE_PROTOS
function yy_fatal_error called 0 returned 0% blocks executed 0%
    #####:14001:static void yy_fatal_error( yyconst char msg[] )
        -:14002:#else
        -:14003:static void yy_fatal_error( msg )
        -:14004:char msg[];
        -:14005:#endif
        -:14006:	{
    #####:14007:	(void) fprintf( err, "%s\n", msg );
call    0 never executed
    #####:14008:	exit( YY_EXIT_FAILURE );
        -:14009:	}
        -:14010:
        -:14011:
        -:14012:
        -:14013:/* Redefine yyless() so it works in section 3 code. */
        -:14014:
        -:14015:#undef yyless
        -:14016:#define yyless(n) \
        -:14017:	do \
        -:14018:		{ \
        -:14019:		/* Undo effects of setting up yytext. */ \
        -:14020:		yytext[yyleng] = yy_hold_char; \
        -:14021:		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
        -:14022:		yy_hold_char = *yy_c_buf_p; \
        -:14023:		*yy_c_buf_p = '\0'; \
        -:14024:		yyleng = n; \
        -:14025:		} \
        -:14026:	while ( 0 )
        -:14027:
        -:14028:
        -:14029:/* Internal utility routines. */
        -:14030:
        -:14031:#ifndef yytext_ptr
        -:14032:#ifdef YY_USE_PROTOS
        -:14033:static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
        -:14034:#else
        -:14035:static void yy_flex_strncpy( s1, s2, n )
        -:14036:char *s1;
        -:14037:yyconst char *s2;
        -:14038:int n;
        -:14039:#endif
        -:14040:	{
        -:14041:	register int i;
        -:14042:	for ( i = 0; i < n; ++i )
        -:14043:		s1[i] = s2[i];
        -:14044:	}
        -:14045:#endif
        -:14046:
        -:14047:
        -:14048:#ifdef YY_USE_PROTOS
function yy_flex_alloc called 1244 returned 100% blocks executed 100%
     1244:14049:static void *yy_flex_alloc( yy_size_t size )
        -:14050:#else
        -:14051:static void *yy_flex_alloc( size )
        -:14052:yy_size_t size;
        -:14053:#endif
        -:14054:	{
     1244:14055:	return (void *) malloc( size );
        -:14056:	}
        -:14057:
        -:14058:#ifdef YY_USE_PROTOS
function yy_flex_realloc called 0 returned 0% blocks executed 0%
    #####:14059:static void *yy_flex_realloc( void *ptr, yy_size_t size )
        -:14060:#else
        -:14061:static void *yy_flex_realloc( ptr, size )
        -:14062:void *ptr;
        -:14063:yy_size_t size;
        -:14064:#endif
        -:14065:	{
        -:14066:	/* The cast to (char *) in the following accommodates both
        -:14067:	 * implementations that use char* generic pointers, and those
        -:14068:	 * that use void* generic pointers.  It works with the latter
        -:14069:	 * because both ANSI C and C++ allow castless assignment from
        -:14070:	 * any pointer type to void*, and deal with argument conversions
        -:14071:	 * as though doing an assignment.
        -:14072:	 */
        -:14073:#ifndef F_HD_2
    #####:14074:	return (void *) realloc( (char *) ptr, size );
        -:14075:#else
        -:14076:
        -:14077:#endif
        -:14078:	}
        -:14079:
        -:14080:#ifdef YY_USE_PROTOS
function yy_flex_free called 0 returned 0% blocks executed 0%
    #####:14081:static void yy_flex_free( void *ptr )
        -:14082:#else
        -:14083:static void yy_flex_free( ptr )
        -:14084:void *ptr;
        -:14085:#endif
        -:14086:	{
    #####:14087:	free( ptr );
    #####:14088:	}
        -:14089:
        -:14090:#if YY_MAIN
        -:14091:int main()
        -:14092:	{
        -:14093:	yylex();
        -:14094:	return 0;
        -:14095:	}
        -:14096:#endif
        -:14097:
        -:14098:
        -:14099:
function yywrap called 547 returned 100% blocks executed 100%
      547:14100:int yywrap()
        -:14101:	{
      547:14102:	if ( --num_input_files > 0 )
branch  0 taken 1 (fallthrough)
branch  1 taken 546
        -:14103:		{
        1:14104:		set_input_file( *++input_files );
call    0 returned 1
        1:14105:		return 0;
        -:14106:		}
        -:14107:
        -:14108:	else
      546:14109:		return 1;
        -:14110:	}
        -:14111:
        -:14112:
        -:14113:/* set_input_file - open the given file (if NULL, stdin) for scanning */
        -:14114:
function set_input_file called 562 returned 100% blocks executed 80%
      562:14115:void set_input_file( file )
        -:14116:char *file;
        -:14117:	{
        -:14118:#ifndef F_HD_5
      562:14119:	if ( file && strcmp( file, "-" ) )
branch  0 taken 562 (fallthrough)
branch  1 taken 0
branch  2 taken 562 (fallthrough)
branch  3 taken 0
        -:14120:#else
        -:14121:	if ( file )
        -:14122:#endif
        -:14123:		{
      562:14124:		infilename = copy_string( file );
call    0 returned 562
      562:14125:		yyin = fopen( infilename, "r" );
call    0 returned 562
        -:14126:
      562:14127:		if ( yyin == NULL )
branch  0 taken 1 (fallthrough)
branch  1 taken 561
        1:14128:			lerrsf( _( "can't open %s" ), file );
call    0 returned 0
        -:14129:		}
        -:14130:
        -:14131:	else
        -:14132:		{
    #####:14133:		yyin = stdin;
    #####:14134:		infilename = copy_string( "<stdin>" );
call    0 never executed
        -:14135:		}
        -:14136:
      561:14137:	linenum = 1;
      561:14138:	}
        -:14139:
        -:14140:
        -:14141:/* Wrapper routines for accessing the scanner's malloc routines. */
        -:14142:
function flex_alloc called 43837 returned 100% blocks executed 100%
    43837:14143:void *flex_alloc( size )
        -:14144:size_t size;
        -:14145:	{
    43837:14146:	return (void *) malloc( size );
        -:14147:	}
        -:14148:
function flex_realloc called 171 returned 100% blocks executed 100%
      171:14149:void *flex_realloc( ptr, size )
        -:14150:void *ptr;
        -:14151:size_t size;
        -:14152:	{
      171:14153:	return (void *) realloc( ptr, size );
        -:14154:	}
        -:14155:
function flex_free called 1086 returned 100% blocks executed 100%
     1086:14156:void flex_free( ptr )
        -:14157:void *ptr;
        -:14158:	{
     1086:14159:	if ( ptr )
branch  0 taken 1086 (fallthrough)
branch  1 taken 0
     1086:14160:		free( ptr );
     1086:14161:	}
