        -:    0:Source:make.c
        -:    0:Graph:make.gcno
        -:    0:Data:make.gcda
        -:    0:Runs:796
        -:    1:#include "FaultSeeds.h"
        -:    2:
        -:    3:#define HAVE_CONFIG_H
        -:    4:#define LIBDIR "/usr/local/lib"
        -:    5:#define INCLUDEDIR "/usr/local/include"
        -:    6:
        -:    7:#undef stderr
        -:    8:#define stderr stdout
        -:    9:
        -:   10:/*************************************************************
        -:   11:  ============================================================
        -:   12:  ************************************************************
        -:   13:  ============================================================
        -:   14:  ************************************************************
        -:   15:                         main.c
        -:   16:  ************************************************************
        -:   17:  ============================================================
        -:   18:  ************************************************************
        -:   19:  ============================================================
        -:   20:  *************************************************************/
        -:   21:
        -:   22:/* Argument parsing and main program of GNU Make.
        -:   23:Copyright (C) 1988,89,90,91,94,95,96,97 Free Software Foundation, Inc.
        -:   24:This file is part of GNU Make.
        -:   25:
        -:   26:GNU Make is free software; you can redistribute it and/or modify
        -:   27:it under the terms of the GNU General Public License as published by
        -:   28:the Free Software Foundation; either version 2, or (at your option)
        -:   29:any later version.
        -:   30:
        -:   31:GNU Make is distributed in the hope that it will be useful,
        -:   32:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   33:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   34:GNU General Public License for more details.
        -:   35:
        -:   36:You should have received a copy of the GNU General Public License
        -:   37:along with GNU Make; see the file COPYING.  If not, write to
        -:   38:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:   39:
        -:   40:#include "make.h"
        -:   41:#include "dep.h"
        -:   42:#include "filedef.h"
        -:   43:#include "variable.h"
        -:   44:#include "job.h"
        -:   45:#include "commands.h"
        -:   46:#include "getopt.h"
        -:   47:#include <assert.h>
        -:   48:#undef stderr
        -:   49:#define stderr stdout
        -:   50:#ifdef _AMIGA
        -:   51:#   include <dos/dos.h>
        -:   52:#   include <proto/dos.h>
        -:   53:#undef stderr
        -:   54:#define stderr stdout
        -:   55:#endif
        -:   56:#ifdef WINDOWS32
        -:   57:#include <windows.h>
        -:   58:#include "pathstuff.h"
        -:   59:#undef stderr
        -:   60:#define stderr stdout
        -:   61:#endif
        -:   62:
        -:   63:#ifdef _AMIGA
        -:   64:int __stack = 20000; /* Make sure we have 20K of stack space */
        -:   65:#endif
        -:   66:
        -:   67:extern void init_dir PARAMS ((void));
        -:   68:extern void remote_setup PARAMS ((void));
        -:   69:extern void remote_cleanup PARAMS ((void));
        -:   70:extern RETSIGTYPE fatal_error_signal PARAMS ((int sig));
        -:   71:extern RETSIGTYPE child_handler PARAMS ((int sig));
        -:   72:
        -:   73:extern void print_variable_data_base PARAMS ((void));
        -:   74:extern void print_dir_data_base PARAMS ((void));
        -:   75:extern void print_rule_data_base PARAMS ((void));
        -:   76:extern void print_file_data_base PARAMS ((void));
        -:   77:extern void print_vpath_data_base PARAMS ((void));
        -:   78:
        -:   79:#ifndef	HAVE_UNISTD_H
        -:   80:extern int chdir ();
        -:   81:#endif
        -:   82:#ifndef	STDC_HEADERS
        -:   83:#ifndef	sun			/* Sun has an incorrect decl in a header.  */
        -:   84:extern void exit ();
        -:   85:#endif
        -:   86:extern double atof ();
        -:   87:#endif
        -:   88:extern char *mktemp ();
        -:   89:
        -:   90:static void print_data_base PARAMS((void));
        -:   91:static void print_version PARAMS ((void));
        -:   92:static void decode_switches PARAMS ((int argc, char **argv, int env));
        -:   93:static void decode_env_switches PARAMS ((char *envar, unsigned int len));
        -:   94:static void define_makeflags PARAMS ((int all, int makefile));
        -:   95:static char *quote_as_word PARAMS ((char *out, char *in, int double_dollars));
        -:   96:
        -:   97:/* The structure that describes an accepted command switch.  */
        -:   98:
        -:   99:struct command_switch
        -:  100:  {
        -:  101:    char c;			/* The switch character.  */
        -:  102:
        -:  103:    enum			/* Type of the value.  */
        -:  104:      {
        -:  105:	flag,			/* Turn int flag on.  */
        -:  106:	flag_off,		/* Turn int flag off.  */
        -:  107:	string,			/* One string per switch.  */
        -:  108:	positive_int,		/* A positive integer.  */
        -:  109:	floating,		/* A floating-point number (double).  */
        -:  110:	ignore			/* Ignored.  */
        -:  111:      } type;
        -:  112:
        -:  113:    char *value_ptr;	/* Pointer to the value-holding variable.  */
        -:  114:
        -:  115:    unsigned int env:1;		/* Can come from MAKEFLAGS.  */
        -:  116:    unsigned int toenv:1;	/* Should be put in MAKEFLAGS.  */
        -:  117:    unsigned int no_makefile:1;	/* Don't propagate when remaking makefiles.  */
        -:  118:
        -:  119:    char *noarg_value;	/* Pointer to value used if no argument is given.  */
        -:  120:    char *default_value;/* Pointer to default value.  */
        -:  121:
        -:  122:    char *long_name;		/* Long option name.  */
        -:  123:    char *argdesc;		/* Descriptive word for argument.  */
        -:  124:    char *description;		/* Description for usage message.  */
        -:  125:  };
        -:  126:
        -:  127:
        -:  128:/* The structure used to hold the list of strings given
        -:  129:   in command switches of a type that takes string arguments.  */
        -:  130:
        -:  131:struct stringlist
        -:  132:  {
        -:  133:    char **list;	/* Nil-terminated list of strings.  */
        -:  134:    unsigned int idx;	/* Index into above.  */
        -:  135:    unsigned int max;	/* Number of pointers allocated.  */
        -:  136:  };
        -:  137:
        -:  138:
        -:  139:/* The recognized command switches.  */
        -:  140:
        -:  141:/* Nonzero means do not print commands to be executed (-s).  */
        -:  142:
        -:  143:int silent_flag;
        -:  144:
        -:  145:/* Nonzero means just touch the files
        -:  146:   that would appear to need remaking (-t)  */
        -:  147:
        -:  148:int touch_flag;
        -:  149:
        -:  150:/* Nonzero means just print what commands would need to be executed,
        -:  151:   don't actually execute them (-n).  */
        -:  152:
        -:  153:int just_print_flag;
        -:  154:
        -:  155:/* Print debugging trace info (-d).  */
        -:  156:
        -:  157:int debug_flag = 0;
        -:  158:
        -:  159:#ifdef WINDOWS32
        -:  160:/* Suspend make in main for a short time to allow debugger to attach */
        -:  161:
        -:  162:int suspend_flag = 0;
        -:  163:#endif
        -:  164:
        -:  165:/* Environment variables override makefile definitions.  */
        -:  166:
        -:  167:int env_overrides = 0;
        -:  168:
        -:  169:/* Nonzero means ignore status codes returned by commands
        -:  170:   executed to remake files.  Just treat them all as successful (-i).  */
        -:  171:
        -:  172:int ignore_errors_flag = 0;
        -:  173:
        -:  174:/* Nonzero means don't remake anything, just print the data base
        -:  175:   that results from reading the makefile (-p).  */
        -:  176:
        -:  177:int print_data_base_flag = 0;
        -:  178:
        -:  179:/* Nonzero means don't remake anything; just return a nonzero status
        -:  180:   if the specified targets are not up to date (-q).  */
        -:  181:
        -:  182:int question_flag = 0;
        -:  183:
        -:  184:/* Nonzero means do not use any of the builtin rules (-r).  */
        -:  185:
        -:  186:int no_builtin_rules_flag = 0;
        -:  187:
        -:  188:/* Nonzero means keep going even if remaking some file fails (-k).  */
        -:  189:
        -:  190:int keep_going_flag;
        -:  191:int default_keep_going_flag = 0;
        -:  192:
        -:  193:/* Nonzero means print directory before starting and when done (-w).  */
        -:  194:
        -:  195:int print_directory_flag = 0;
        -:  196:
        -:  197:/* Nonzero means ignore print_directory_flag and never print the directory.
        -:  198:   This is necessary because print_directory_flag is set implicitly.  */
        -:  199:
        -:  200:int inhibit_print_directory_flag = 0;
        -:  201:
        -:  202:/* Nonzero means print version information.  */
        -:  203:
        -:  204:int print_version_flag = 0;
        -:  205:
        -:  206:/* List of makefiles given with -f switches.  */
        -:  207:
        -:  208:static struct stringlist *makefiles = 0;
        -:  209:
        -:  210:
        -:  211:/* Number of job slots (commands that can be run at once).  */
        -:  212:
        -:  213:unsigned int job_slots = 1;
        -:  214:unsigned int default_job_slots = 1;
        -:  215:
        -:  216:/* Value of job_slots that means no limit.  */
        -:  217:
        -:  218:static unsigned int inf_jobs = 0;
        -:  219:
        -:  220:/* Maximum load average at which multiple jobs will be run.
        -:  221:   Negative values mean unlimited, while zero means limit to
        -:  222:   zero load (which could be useful to start infinite jobs remotely
        -:  223:   but one at a time locally).  */
        -:  224:#ifndef NO_FLOAT
        -:  225:double max_load_average = -1.0;
        -:  226:double default_load_average = -1.0;
        -:  227:#else
        -:  228:int max_load_average = -1;
        -:  229:int default_load_average = -1;
        -:  230:#endif
        -:  231:
        -:  232:/* List of directories given with -C switches.  */
        -:  233:
        -:  234:static struct stringlist *directories = 0;
        -:  235:
        -:  236:/* List of include directories given with -I switches.  */
        -:  237:
        -:  238:static struct stringlist *include_directories = 0;
        -:  239:
        -:  240:/* List of files given with -o switches.  */
        -:  241:
        -:  242:static struct stringlist *old_files = 0;
        -:  243:
        -:  244:/* List of files given with -W switches.  */
        -:  245:
        -:  246:static struct stringlist *new_files = 0;
        -:  247:
        -:  248:/* If nonzero, we should just print usage and exit.  */
        -:  249:
        -:  250:static int print_usage_flag = 0;
        -:  251:
        -:  252:/* If nonzero, we should print a warning message
        -:  253:   for each reference to an undefined variable.  */
        -:  254:
        -:  255:int warn_undefined_variables_flag;
        -:  256:
        -:  257:/* The table of command switches.  */
        -:  258:
        -:  259:static const struct command_switch switches[] =
        -:  260:  {
        -:  261:    { 'b', ignore, 0, 0, 0, 0, 0, 0,
        -:  262:	0, 0,
        -:  263:	"Ignored for compatibility" },
        -:  264:    { 'C', string, (char *) &directories, 0, 0, 0, 0, 0,
        -:  265:	"directory", "DIRECTORY",
        -:  266:	"Change to DIRECTORY before doing anything" },
        -:  267:    { 'd', flag, (char *) &debug_flag, 1, 1, 0, 0, 0,
        -:  268:	"debug", 0,
        -:  269:	"Print lots of debugging information" },
        -:  270:#ifdef WINDOWS32
        -:  271:    { 'D', flag, (char *) &suspend_flag, 1, 1, 0, 0, 0,
        -:  272:        "suspend-for-debug", 0,
        -:  273:        "Suspend process to allow a debugger to attach" },
        -:  274:#endif
        -:  275:    { 'e', flag, (char *) &env_overrides, 1, 1, 0, 0, 0,
        -:  276:	"environment-overrides", 0,
        -:  277:	"Environment variables override makefiles" },
        -:  278:    { 'f', string, (char *) &makefiles, 0, 0, 0, 0, 0,
        -:  279:	"file", "FILE",
        -:  280:	"Read FILE as a makefile" },
        -:  281:    { 'h', flag, (char *) &print_usage_flag, 0, 0, 0, 0, 0,
        -:  282:	"help", 0,
        -:  283:	"Print this message and exit" },
        -:  284:    { 'i', flag, (char *) &ignore_errors_flag, 1, 1, 0, 0, 0,
        -:  285:	"ignore-errors", 0,
        -:  286:	"Ignore errors from commands" },
        -:  287:    { 'I', string, (char *) &include_directories, 1, 1, 0, 0, 0,
        -:  288:	"include-dir", "DIRECTORY",
        -:  289:	"Search DIRECTORY for included makefiles" },
        -:  290:    { 'j', positive_int, (char *) &job_slots, 1, 1, 0,
        -:  291:	(char *) &inf_jobs, (char *) &default_job_slots,
        -:  292:	"jobs", "N",
        -:  293:	"Allow N jobs at once; infinite jobs with no arg" },
        -:  294:    { 'k', flag, (char *) &keep_going_flag, 1, 1, 0,
        -:  295:	0, (char *) &default_keep_going_flag,
        -:  296:	"keep-going", 0,
        -:  297:	"Keep going when some targets can't be made" },
        -:  298:#ifndef NO_FLOAT
        -:  299:    { 'l', floating, (char *) &max_load_average, 1, 1, 0,
        -:  300:	(char *) &default_load_average, (char *) &default_load_average,
        -:  301:	"load-average", "N",
        -:  302:	"Don't start multiple jobs unless load is below N" },
        -:  303:#else
        -:  304:    { 'l', positive_int, (char *) &max_load_average, 1, 1, 0,
        -:  305:	(char *) &default_load_average, (char *) &default_load_average,
        -:  306:	"load-average", "N",
        -:  307:	"Don't start multiple jobs unless load is below N" },
        -:  308:#endif
        -:  309:    { 'm', ignore, 0, 0, 0, 0, 0, 0,
        -:  310:	0, 0,
        -:  311:	"-b" },
        -:  312:    { 'n', flag, (char *) &just_print_flag, 1, 1, 1, 0, 0,
        -:  313:	"just-print", 0,
        -:  314:	"Don't actually run any commands; just print them" },
        -:  315:    { 'o', string, (char *) &old_files, 0, 0, 0, 0, 0,
        -:  316:	"old-file", "FILE",
        -:  317:	"Consider FILE to be very old and don't remake it" },
        -:  318:    { 'p', flag, (char *) &print_data_base_flag, 1, 1, 0, 0, 0,
        -:  319:	"print-data-base", 0,
        -:  320:	"Print make's internal database" },
        -:  321:    { 'q', flag, (char *) &question_flag, 1, 1, 1, 0, 0,
        -:  322:	"question", 0,
        -:  323:	"Run no commands; exit status says if up to date" },
        -:  324:    { 'r', flag, (char *) &no_builtin_rules_flag, 1, 1, 0, 0, 0,
        -:  325:	"no-builtin-rules", 0,
        -:  326:	"Disable the built-in implicit rules" },
        -:  327:    { 's', flag, (char *) &silent_flag, 1, 1, 0, 0, 0,
        -:  328:	"silent", 0,
        -:  329:	"Don't echo commands" },
        -:  330:    { 'S', flag_off, (char *) &keep_going_flag, 1, 1, 0,
        -:  331:	0, (char *) &default_keep_going_flag,
        -:  332:	"no-keep-going", 0,
        -:  333:	"Turns off -k" },
        -:  334:    { 't', flag, (char *) &touch_flag, 1, 1, 1, 0, 0,
        -:  335:	"touch", 0,
        -:  336:	"Touch targets instead of remaking them" },
        -:  337:    { 'v', flag, (char *) &print_version_flag, 1, 1, 0, 0, 0,
        -:  338:	"version", 0,
        -:  339:	"Print the version number of make and exit" },
        -:  340:    { 'w', flag, (char *) &print_directory_flag, 1, 1, 0, 0, 0,
        -:  341:	"print-directory", 0,
        -:  342:	"Print the current directory" },
        -:  343:    { 2, flag, (char *) &inhibit_print_directory_flag, 1, 1, 0, 0, 0,
        -:  344:	"no-print-directory", 0,
        -:  345:	"Turn off -w, even if it was turned on implicitly" },
        -:  346:    { 'W', string, (char *) &new_files, 0, 0, 0, 0, 0,
        -:  347:	"what-if", "FILE",
        -:  348:	"Consider FILE to be infinitely new" },
        -:  349:    { 3, flag, (char *) &warn_undefined_variables_flag, 1, 1, 0, 0, 0,
        -:  350:	"warn-undefined-variables", 0,
        -:  351:	"Warn when an undefined variable is referenced" },
        -:  352:    { '\0', }
        -:  353:  };
        -:  354:
        -:  355:/* Secondary long names for options.  */
        -:  356:
        -:  357:static struct option long_option_aliases[] =
        -:  358:  {
        -:  359:    { "quiet",		no_argument,		0, 's' },
        -:  360:    { "stop",		no_argument,		0, 'S' },
        -:  361:    { "new-file",	required_argument,	0, 'W' },
        -:  362:    { "assume-new",	required_argument,	0, 'W' },
        -:  363:    { "assume-old",	required_argument,	0, 'o' },
        -:  364:    { "max-load",	optional_argument,	0, 'l' },
        -:  365:    { "dry-run",	no_argument,		0, 'n' },
        -:  366:    { "recon",		no_argument,		0, 'n' },
        -:  367:    { "makefile",	required_argument,	0, 'f' },
        -:  368:  };
        -:  369:
        -:  370:/* The usage message prints the descriptions of options starting in
        -:  371:   this column.  Make sure it leaves enough room for the longest
        -:  372:   description to fit in less than 80 characters.  */
        -:  373:
        -:  374:#define	DESCRIPTION_COLUMN	30
        -:  375:
        -:  376:/* List of goal targets.  */
        -:  377:
        -:  378:static struct dep *goals, *lastgoal;
        -:  379:
        -:  380:/* List of variables which were defined on the command line
        -:  381:   (or, equivalently, in MAKEFLAGS).  */
        -:  382:
        -:  383:struct command_variable
        -:  384:  {
        -:  385:    struct command_variable *next;
        -:  386:    struct variable *variable;
        -:  387:  };
        -:  388:static struct command_variable *command_variables;
        -:  389:
        -:  390:/* The name we were invoked with.  */
        -:  391:
        -:  392:char *program;
        -:  393:
        -:  394:/* Our current directory before processing any -C options.  */
        -:  395:
        -:  396:char *directory_before_chdir;
        -:  397:
        -:  398:/* Our current directory after processing all -C options.  */
        -:  399:
        -:  400:char *starting_directory;
        -:  401:
        -:  402:/* Value of the MAKELEVEL variable at startup (or 0).  */
        -:  403:
        -:  404:unsigned int makelevel;
        -:  405:
        -:  406:/* First file defined in the makefile whose name does not
        -:  407:   start with `.'.  This is the default to remake if the
        -:  408:   command line does not specify.  */
        -:  409:
        -:  410:struct file *default_goal_file;
        -:  411:
        -:  412:/* Pointer to structure for the file .DEFAULT
        -:  413:   whose commands are used for any file that has none of its own.
        -:  414:   This is zero if the makefiles do not define .DEFAULT.  */
        -:  415:
        -:  416:struct file *default_file;
        -:  417:
        -:  418:/* Nonzero if we have seen the magic `.POSIX' target.
        -:  419:   This turns on pedantic compliance with POSIX.2.  */
        -:  420:
        -:  421:int posix_pedantic;
        -:  422:
        -:  423:/* Nonzero if some rule detected clock skew; we keep track so (a) we only
        -:  424:   print one warning about it during the run, and (b) we can print a final
        -:  425:   warning at the end of the run. */
        -:  426:
        -:  427:int clock_skew_detected;
        -:  428:
        -:  429:/* Mask of signals that are being caught with fatal_error_signal.  */
        -:  430:
        -:  431:#ifdef	POSIX
        -:  432:sigset_t fatal_signal_set;
        -:  433:#else
        -:  434:#ifdef	HAVE_SIGSETMASK
        -:  435:int fatal_signal_mask;
        -:  436:#endif
        -:  437:#endif
        -:  438:
        -:  439:static struct file *
function enter_command_line_file called 5 returned 100% blocks executed 42%
        5:  440:enter_command_line_file (name)
        -:  441:     char *name;
        -:  442:{
        5:  443:  if (name[0] == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  444:    fatal ("empty string invalid as file name");
call    0 never executed
        -:  445:
        5:  446:  if (name[0] == '~')
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -:  447:    {
    #####:  448:      char *expanded = tilde_expand (name);
call    0 never executed
    #####:  449:      if (expanded != 0)
branch  0 never executed
branch  1 never executed
    #####:  450:	name = expanded;	/* Memory leak; I don't care.  */
        -:  451:    }
        -:  452:
        -:  453:  /* This is also done in parse_file_seq, so this is redundant
        -:  454:     for names read from makefiles.  It is here for names passed
        -:  455:     on the command line.  */
       5*:  456:  while (name[0] == '.' && name[1] == '/' && name[2] != '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 5
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  457:    {
    #####:  458:      name += 2;
    #####:  459:      while (*name == '/')
branch  0 never executed
branch  1 never executed
        -:  460:	/* Skip following slashes: ".//foo" is "foo", not "/foo".  */
    #####:  461:	++name;
        -:  462:    }
        -:  463:
        5:  464:  if (*name == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -:  465:    {
        -:  466:      /* It was all slashes!  Move back to the dot and truncate
        -:  467:	 it after the first slash, so it becomes just "./".  */
        -:  468:      do
    #####:  469:	--name;
    #####:  470:      while (name[0] != '.');
branch  0 never executed
branch  1 never executed
    #####:  471:      name[2] = '\0';
        -:  472:    }
        -:  473:
        5:  474:  return enter_file (savestring (name, strlen (name)));
call    0 returned 5
call    1 returned 5
        -:  475:}
        -:  476:
        -:  477:/* Toggle -d on receipt of SIGUSR1.  */
        -:  478:
        -:  479:static RETSIGTYPE
function debug_signal_handler called 0 returned 0% blocks executed 0%
    #####:  480:debug_signal_handler (sig)
        -:  481:     int sig;
        -:  482:{
    #####:  483:  debug_flag = ! debug_flag;
    #####:  484:}
        -:  485:
        -:  486:#ifdef WINDOWS32
        -:  487:/*
        -:  488: * HANDLE runtime exceptions by avoiding a requestor on the GUI. Capture
        -:  489: * exception and print it to stderr instead.
        -:  490: *
        -:  491: * If debug_flag not set, just print a simple message and exit.
        -:  492: * If debug_flag set, print a more verbose message.
        -:  493: * If compiled for DEBUG, let exception pass through to GUI so that
        -:  494: *   debuggers can attach.
        -:  495: */
        -:  496:LONG WINAPI
        -:  497:handle_runtime_exceptions( struct _EXCEPTION_POINTERS *exinfo )
        -:  498:{
        -:  499:  PEXCEPTION_RECORD exrec = exinfo->ExceptionRecord;
        -:  500:  LPSTR cmdline = GetCommandLine();
        -:  501:  LPSTR prg = strtok(cmdline, " ");
        -:  502:  CHAR errmsg[1024];
        -:  503:#ifdef USE_EVENT_LOG
        -:  504:  HANDLE hEventSource;
        -:  505:  LPTSTR lpszStrings[1];
        -:  506:#endif
        -:  507:
        -:  508:  if (!debug_flag)
        -:  509:    {
        -:  510:      sprintf(errmsg, "%s: Interrupt/Exception caught ", prg);
        -:  511:      sprintf(&errmsg[strlen(errmsg)],
        -:  512:              "(code = 0x%x, addr = 0x%x)\r\n",
        -:  513:              exrec->ExceptionCode, exrec->ExceptionAddress);
        -:  514:      fprintf(stderr, errmsg);
        -:  515:      exit(255);
        -:  516:    }
        -:  517:
        -:  518:  sprintf(errmsg,
        -:  519:          "\r\nUnhandled exception filter called from program %s\r\n", prg);
        -:  520:  sprintf(&errmsg[strlen(errmsg)], "ExceptionCode = %x\r\n",
        -:  521:          exrec->ExceptionCode);
        -:  522:  sprintf(&errmsg[strlen(errmsg)], "ExceptionFlags = %x\r\n",
        -:  523:          exrec->ExceptionFlags);
        -:  524:  sprintf(&errmsg[strlen(errmsg)], "ExceptionAddress = %x\r\n",
        -:  525:          exrec->ExceptionAddress);
        -:  526:
        -:  527:  if (exrec->ExceptionCode == EXCEPTION_ACCESS_VIOLATION
        -:  528:      && exrec->NumberParameters >= 2)
        -:  529:    sprintf(&errmsg[strlen(errmsg)],
        -:  530:            "Access violation: %s operation at address %x\r\n",
        -:  531:            exrec->ExceptionInformation[0] ? "write": "read",
        -:  532:            exrec->ExceptionInformation[1]);
        -:  533:
        -:  534:  /* turn this on if we want to put stuff in the event log too */
        -:  535:#ifdef USE_EVENT_LOG
        -:  536:  hEventSource = RegisterEventSource(NULL, "GNU Make");
        -:  537:  lpszStrings[0] = errmsg;
        -:  538:
        -:  539:#ifndef F_JR_2  /* seeded fault #2; J.Ruthruff */
        -:  540:  if (hEventSource != NULL)
        -:  541:#else
        -:  542:  if (hEventSource = NULL)
        -:  543:#endif
        -:  544:    {
        -:  545:      ReportEvent(hEventSource,         /* handle of event source */
        -:  546:                  EVENTLOG_ERROR_TYPE,  /* event type */
        -:  547:                  0,                    /* event category */
        -:  548:                  0,                    /* event ID */
        -:  549:                  NULL,                 /* current user's SID */
        -:  550:                  1,                    /* strings in lpszStrings */
        -:  551:                  0,                    /* no bytes of raw data */
        -:  552:                  lpszStrings,          /* array of error strings */
        -:  553:                  NULL);                /* no raw data */
        -:  554:
        -:  555:      (VOID) DeregisterEventSource(hEventSource);
        -:  556:    }
        -:  557:#endif
        -:  558:
        -:  559:  /* Write the error to stderr too */
        -:  560:  fprintf(stderr, errmsg);
        -:  561:
        -:  562:#ifdef DEBUG
        -:  563:  return EXCEPTION_CONTINUE_SEARCH;
        -:  564:#else
        -:  565:  exit(255);
        -:  566:#endif
        -:  567:}
        -:  568:#endif  /* WINDOWS32 */
        -:  569:
        -:  570:#ifdef  __MSDOS__
        -:  571:
        -:  572:static void
        -:  573:msdos_return_to_initial_directory ()
        -:  574:{
        -:  575:  if (directory_before_chdir)
        -:  576:    chdir (directory_before_chdir);
        -:  577:}
        -:  578:#endif
        -:  579:
        -:  580:#ifndef _AMIGA
        -:  581:int
function main called 793 returned 0% blocks executed 51%
      793:  582:main (argc, argv, envp)
        -:  583:     int argc;
        -:  584:     char **argv;
        -:  585:     char **envp;
        -:  586:#else
        -:  587:int main (int argc, char ** argv)
        -:  588:#endif
        -:  589:{
        -:  590:  register struct file *f;
        -:  591:  register unsigned int i;
        -:  592:  char **p;
        -:  593:  struct dep *read_makefiles;
        -:  594:  PATH_VAR (current_directory);
        -:  595:#ifdef WINDOWS32
        -:  596:  extern int no_default_sh_exe;
        -:  597:  char *unix_path = NULL;
        -:  598:  char *windows32_path = NULL;
        -:  599:
        -:  600:  SetUnhandledExceptionFilter(handle_runtime_exceptions);
        -:  601:#endif
        -:  602:
      793:  603:  default_goal_file = 0;
      793:  604:  reading_filename = 0;
      793:  605:  reading_lineno_ptr = 0;
        -:  606:
        -:  607:#if defined (__MSDOS__) && !defined (_POSIX_SOURCE)
        -:  608:  /* Request the most powerful version of `system', to
        -:  609:     make up for the dumb default shell.  */
        -:  610:  __system_flags = (__system_redirect
        -:  611:		    | __system_use_shell
        -:  612:		    | __system_allow_multiple_cmds
        -:  613:		    | __system_allow_long_cmds
        -:  614:		    | __system_handle_null_commands
        -:  615:		    | __system_emulate_chdir);
        -:  616:
        -:  617:#endif
        -:  618:
        -:  619:#if !defined (HAVE_STRSIGNAL) && !defined (HAVE_SYS_SIGLIST)
        -:  620:  signame_init ();
        -:  621:#endif
        -:  622:
        -:  623:#ifdef	POSIX
      793:  624:  sigemptyset (&fatal_signal_set);
call    0 returned 793
        -:  625:#define	ADD_SIG(sig)	sigaddset (&fatal_signal_set, sig)
        -:  626:#else
        -:  627:#ifdef	HAVE_SIGSETMASK
        -:  628:  fatal_signal_mask = 0;
        -:  629:#define	ADD_SIG(sig)	fatal_signal_mask |= sigmask (sig)
        -:  630:#else
        -:  631:#define	ADD_SIG(sig)
        -:  632:#endif
        -:  633:#endif
        -:  634:
        -:  635:#define	FATAL_SIG(sig)							      \
        -:  636:  if (signal ((sig), fatal_error_signal) == SIG_IGN)			      \
        -:  637:    (void) signal ((sig), SIG_IGN);					      \
        -:  638:  else									      \
        -:  639:    ADD_SIG (sig);
        -:  640:
        -:  641:#ifdef SIGHUP
     793*:  642:  FATAL_SIG (SIGHUP);
call    0 returned 793
branch  1 taken 0 (fallthrough)
branch  2 taken 793
call    3 never executed
call    4 returned 793
        -:  643:#endif
        -:  644:#ifdef SIGQUIT
     793*:  645:  FATAL_SIG (SIGQUIT);
call    0 returned 793
branch  1 taken 0 (fallthrough)
branch  2 taken 793
call    3 never executed
call    4 returned 793
        -:  646:#endif
     793*:  647:  FATAL_SIG (SIGINT);
call    0 returned 793
branch  1 taken 0 (fallthrough)
branch  2 taken 793
call    3 never executed
call    4 returned 793
     793*:  648:  FATAL_SIG (SIGTERM);
call    0 returned 793
branch  1 taken 0 (fallthrough)
branch  2 taken 793
call    3 never executed
call    4 returned 793
        -:  649:
        -:  650:#ifdef	SIGDANGER
        -:  651:  FATAL_SIG (SIGDANGER);
        -:  652:#endif
        -:  653:#ifdef SIGXCPU
     793*:  654:  FATAL_SIG (SIGXCPU);
call    0 returned 793
branch  1 taken 0 (fallthrough)
branch  2 taken 793
call    3 never executed
call    4 returned 793
        -:  655:#endif
        -:  656:#ifdef SIGXFSZ
     793*:  657:  FATAL_SIG (SIGXFSZ);
call    0 returned 793
branch  1 taken 0 (fallthrough)
branch  2 taken 793
call    3 never executed
call    4 returned 793
        -:  658:#endif
        -:  659:
        -:  660:#undef	FATAL_SIG
        -:  661:
        -:  662:  /* Make sure stdout is line-buffered.  */
        -:  663:
        -:  664:#ifdef	HAVE_SETLINEBUF
      793:  665:  setlinebuf (stdout);
call    0 returned 793
        -:  666:#else
        -:  667:#ifndef	SETVBUF_REVERSED
        -:  668:  setvbuf (stdout, (char *) 0, _IOLBF, BUFSIZ);
        -:  669:#else	/* setvbuf not reversed.  */
        -:  670:  /* Some buggy systems lose if we pass 0 instead of allocating ourselves.  */
        -:  671:  setvbuf (stdout, _IOLBF, xmalloc (BUFSIZ), BUFSIZ);
        -:  672:#endif	/* setvbuf reversed.  */
        -:  673:#endif	/* setlinebuf missing.  */
        -:  674:
        -:  675:  /* Figure out where this program lives.  */
        -:  676:
      793:  677:  if (argv[0] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 793
    #####:  678:    argv[0] = "";
      793:  679:  if (argv[0][0] == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 793
    #####:  680:    program = "make";
        -:  681:  else
        -:  682:    {
        -:  683:#ifdef VMS
        -:  684:      program = rindex (argv[0], ']');
        -:  685:#else
      793:  686:      program = rindex (argv[0], '/');
        -:  687:#endif
        -:  688:#ifdef __MSDOS__
        -:  689:      if (program == 0)
        -:  690:	program = rindex (argv[0], '\\');
        -:  691:      else
        -:  692:	{
        -:  693:	  /* Some weird environments might pass us argv[0] with
        -:  694:	     both kinds of slashes; we must find the rightmost.  */
        -:  695:	  char *p = rindex (argv[0], '\\');
        -:  696:#ifndef F_JR_3  /* seeded fault #3; J.Ruthruff */
        -:  697:      if (p && p > program)
        -:  698:#else
        -:  699:      if (p && p < program)
        -:  700:#endif
        -:  701:	    program = p;
        -:  702:	}
        -:  703:      if (program == 0 && argv[0][1] == ':')
        -:  704:	program = argv[0] + 1;
        -:  705:#endif
      793:  706:      if (program == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 793
    #####:  707:	program = argv[0];
        -:  708:      else
      793:  709:	++program;
        -:  710:    }
        -:  711:
        -:  712:  /* Set up to access user data (files).  */
      793:  713:  user_access ();
call    0 returned 793
        -:  714:
        -:  715:  /* Figure out where we are.  */
        -:  716:
        -:  717:#ifdef WINDOWS32
        -:  718:  if (getcwd_fs (current_directory, GET_PATH_MAX) == 0)
        -:  719:#else
      793:  720:  if (getcwd (current_directory, GET_PATH_MAX) == 0)
call    0 returned 793
branch  1 taken 0 (fallthrough)
branch  2 taken 793
        -:  721:#endif
        -:  722:    {
        -:  723:#ifdef	HAVE_GETCWD
    #####:  724:      perror_with_name ("getcwd: ", "");
call    0 never executed
        -:  725:#else
        -:  726:      error ("getwd: %s", current_directory);
        -:  727:#endif
    #####:  728:      current_directory[0] = '\0';
    #####:  729:      directory_before_chdir = 0;
        -:  730:    }
        -:  731:  else
      793:  732:    directory_before_chdir = savestring (current_directory,
call    0 returned 793
        -:  733:					 strlen (current_directory));
        -:  734:#ifdef  __MSDOS__
        -:  735:  /* Make sure we will return to the initial directory, come what may.  */
        -:  736:  atexit (msdos_return_to_initial_directory);
        -:  737:#endif
        -:  738:
        -:  739:  /* Read in variables from the environment.  It is important that this be
        -:  740:     done before $(MAKE) is figured out so its definitions will not be
        -:  741:     from the environment.  */
        -:  742:
        -:  743:#ifndef _AMIGA
    40443:  744:  for (i = 0; envp[i] != 0; ++i)
branch  0 taken 39650
branch  1 taken 793 (fallthrough)
        -:  745:    {
    39650:  746:      register char *ep = envp[i];
   515450:  747:      while (*ep != '=')
branch  0 taken 475800
branch  1 taken 39650 (fallthrough)
   475800:  748:	++ep;
        -:  749:#ifdef WINDOWS32
        -:  750:      if (!unix_path && !strncmp(envp[i], "PATH=", 5))
        -:  751:        unix_path = ep+1;
        -:  752:      if (!windows32_path && !strncmp(envp[i], "Path=", 5))
        -:  753:        windows32_path = ep+1;
        -:  754:#endif
        -:  755:      /* The result of pointer arithmetic is cast to unsigned int for
        -:  756:	 machines where ptrdiff_t is a different size that doesn't widen
        -:  757:	 the same.  */
    39650:  758:      define_variable (envp[i], (unsigned int) (ep - envp[i]),
call    0 returned 39650
        -:  759:		       ep + 1, o_env, 1)
        -:  760:	/* Force exportation of every variable culled from the environment.
        -:  761:	   We used to rely on target_environment's v_default code to do this.
        -:  762:	   But that does not work for the case where an environment variable
        -:  763:	   is redefined in a makefile with `override'; it should then still
        -:  764:	   be exported, because it was originally in the environment.  */
    39650:  765:	->export = v_export;
        -:  766:    }
        -:  767:#ifdef WINDOWS32
        -:  768:    /*
        -:  769:     * PATH defaults to Path iff PATH not found and Path is found.
        -:  770:     */
        -:  771:    if (!unix_path && windows32_path)
        -:  772:      define_variable("PATH", 4, windows32_path, o_env, 1)->export = v_export;
        -:  773:#endif
        -:  774:#else /* For Amiga, read the ENV: device, ignoring all dirs */
        -:  775:    {
        -:  776:	BPTR env, file, old;
        -:  777:	char buffer[1024];
        -:  778:	int len;
        -:  779:	__aligned struct FileInfoBlock fib;
        -:  780:
        -:  781:	env = Lock ("ENV:", ACCESS_READ);
        -:  782:	if (env)
        -:  783:	{
        -:  784:	    old = CurrentDir (DupLock(env));
        -:  785:	    Examine (env, &fib);
        -:  786:
        -:  787:	    while (ExNext (env, &fib))
        -:  788:	    {
        -:  789:		if (fib.fib_DirEntryType < 0) /* File */
        -:  790:		{
        -:  791:		    /* Define an empty variable. It will be filled in
        -:  792:			variable_lookup(). Makes startup quite a bit
        -:  793:			faster. */
        -:  794:			define_variable (fib.fib_FileName,
        -:  795:			    strlen (fib.fib_FileName),
        -:  796:			"", o_env, 1)->export = v_export;
        -:  797:		}
        -:  798:	    }
        -:  799:	    UnLock (env);
        -:  800:	    UnLock(CurrentDir(old));
        -:  801:	}
        -:  802:    }
        -:  803:#endif
        -:  804:
        -:  805:  /* Decode the switches.  */
        -:  806:
      793:  807:  decode_env_switches ("MAKEFLAGS", 9);
call    0 returned 793
        -:  808:#if 0
        -:  809:  /* People write things like:
        -:  810:     	MFLAGS="CC=gcc -pipe" "CFLAGS=-g"
        -:  811:     and we set the -p, -i and -e switches.  Doesn't seem quite right.  */
        -:  812:  decode_env_switches ("MFLAGS", 6);
        -:  813:#endif
      793:  814:  decode_switches (argc, argv, 0);
call    0 returned 793
        -:  815:#ifdef WINDOWS32
        -:  816:  if (suspend_flag) {
        -:  817:        fprintf(stderr, "%s (pid = %d)\n", argv[0], GetCurrentProcessId());
        -:  818:        fprintf(stderr, "%s is suspending for 30 seconds...", argv[0]);
        -:  819:        Sleep(30 * 1000);
        -:  820:        fprintf(stderr, "done sleep(30). Continuing.\n");
        -:  821:  }
        -:  822:#endif
        -:  823:
        -:  824:  /* Print version information.  */
        -:  825:
      793:  826:  if (print_version_flag || print_data_base_flag || debug_flag)
branch  0 taken 792 (fallthrough)
branch  1 taken 1
branch  2 taken 407 (fallthrough)
branch  3 taken 385
branch  4 taken 192 (fallthrough)
branch  5 taken 215
      578:  827:    print_version ();
call    0 returned 578
        -:  828:
        -:  829:  /* `make --version' is supposed to just print the version and exit.  */
      793:  830:  if (print_version_flag)
branch  0 taken 1 (fallthrough)
branch  1 taken 792
        1:  831:    die (0);
call    0 returned 0
        -:  832:
        -:  833:#if !defined(__MSDOS__) && !defined(VMS)
        -:  834:  /* Set the "MAKE_COMMAND" variable to the name we were invoked with.
        -:  835:     (If it is a relative pathname with a slash, prepend our directory name
        -:  836:     so the result will run the same program regardless of the current dir.
        -:  837:     If it is a name with no slash, we can only hope that PATH did not
        -:  838:     find it in the current directory.)  */
        -:  839:#ifdef WINDOWS32
        -:  840:  /*
        -:  841:   * Convert from backslashes to forward slashes for
        -:  842:   * programs like sh which don't like them. Shouldn't
        -:  843:   * matter if the path is one way or the other for
        -:  844:   * CreateProcess().
        -:  845:   */
        -:  846:  if (strpbrk(argv[0], "/:\\") ||
        -:  847:      strstr(argv[0], "..") ||
        -:  848:      !strncmp(argv[0], "//", 2))
        -:  849:    argv[0] = strdup(w32ify(argv[0],1));
        -:  850:#else /* WINDOWS32 */
      792:  851:  if (current_directory[0] != '\0'
branch  0 taken 792 (fallthrough)
branch  1 taken 0
     792*:  852:      && argv[0] != 0 && argv[0][0] != '/' && index (argv[0], '/') != 0)
branch  0 taken 792 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 792
branch  4 never executed
branch  5 never executed
    #####:  853:    argv[0] = concat (current_directory, "/", argv[0]);
call    0 never executed
        -:  854:#endif /* WINDOWS32 */
        -:  855:#endif
        -:  856:
        -:  857:  /* The extra indirection through $(MAKE_COMMAND) is done
        -:  858:     for hysterical raisins.  */
      792:  859:  (void) define_variable ("MAKE_COMMAND", 12, argv[0], o_default, 0);
call    0 returned 792
      792:  860:  (void) define_variable ("MAKE", 4, "$(MAKE_COMMAND)", o_default, 1);
call    0 returned 792
        -:  861:
      792:  862:  if (command_variables != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 792
        -:  863:    {
        -:  864:      struct command_variable *cv;
        -:  865:      struct variable *v;
    #####:  866:      unsigned int len = 0;
        -:  867:      char *value, *p;
        -:  868:
        -:  869:      /* Figure out how much space will be taken up by the command-line
        -:  870:	 variable definitions.  */
    #####:  871:      for (cv = command_variables; cv != 0; cv = cv->next)
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  v = cv->variable;
    #####:  874:	  len += 2 * strlen (v->name);
    #####:  875:	  if (! v->recursive)
branch  0 never executed
branch  1 never executed
    #####:  876:	    ++len;
    #####:  877:	  ++len;
    #####:  878:	  len += 2 * strlen (v->value);
        -:  879:	}
        -:  880:
        -:  881:      /* Now allocate a buffer big enough and fill it.  */
    #####:  882:      p = value = (char *) alloca (len);
    #####:  883:      for (cv = command_variables; cv != 0; cv = cv->next)
branch  0 never executed
branch  1 never executed
        -:  884:	{
    #####:  885:	  v = cv->variable;
    #####:  886:	  p = quote_as_word (p, v->name, 0);
call    0 never executed
    #####:  887:	  if (! v->recursive)
branch  0 never executed
branch  1 never executed
    #####:  888:	    *p++ = ':';
    #####:  889:	  *p++ = '=';
    #####:  890:	  p = quote_as_word (p, v->value, 0);
call    0 never executed
    #####:  891:	  *p++ = ' ';
        -:  892:	}
    #####:  893:      p[-1] = '\0';		/* Kill the final space and terminate.  */
        -:  894:
        -:  895:      /* Define an unchangeable variable with a name that no POSIX.2
        -:  896:	 makefile could validly use for its own variable.  */
    #####:  897:      (void) define_variable ("-*-command-variables-*-", 23,
call    0 never executed
        -:  898:			      value, o_automatic, 0);
        -:  899:
        -:  900:      /* Define the variable; this will not override any user definition.
        -:  901:         Normally a reference to this variable is written into the value of
        -:  902:         MAKEFLAGS, allowing the user to override this value to affect the
        -:  903:         exported value of MAKEFLAGS.  In POSIX-pedantic mode, we cannot
        -:  904:         allow the user's setting of MAKEOVERRIDES to affect MAKEFLAGS, so
        -:  905:         a reference to this hidden variable is written instead. */
    #####:  906:      (void) define_variable ("MAKEOVERRIDES", 13,
call    0 never executed
        -:  907:			      "${-*-command-variables-*-}", o_env, 1);
        -:  908:    }
        -:  909:
        -:  910:  /* If there were -C flags, move ourselves about.  */
      792:  911:  if (directories != 0)
branch  0 taken 4 (fallthrough)
branch  1 taken 788
        8:  912:    for (i = 0; directories->list[i] != 0; ++i)
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        -:  913:      {
        6:  914:	char *dir = directories->list[i];
        6:  915:	if (dir[0] == '~')
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -:  916:	  {
    #####:  917:	    char *expanded = tilde_expand (dir);
call    0 never executed
    #####:  918:	    if (expanded != 0)
branch  0 never executed
branch  1 never executed
    #####:  919:	      dir = expanded;
        -:  920:	  }
        6:  921:	if (chdir (dir) < 0)
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        2:  922:	  pfatal_with_name (dir);
call    0 returned 0
        4:  923:	if (dir != directories->list[i])
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  924:	  free (dir);
        -:  925:      }
        -:  926:
        -:  927:#ifdef WINDOWS32
        -:  928:  /*
        -:  929:   * THIS BLOCK OF CODE MUST COME AFTER chdir() CALL ABOVE IN ORDER
        -:  930:   * TO NOT CONFUSE THE DEPENDENCY CHECKING CODE IN implicit.c.
        -:  931:   *
        -:  932:   * The functions in dir.c can incorrectly cache information for "."
        -:  933:   * before we have changed directory and this can cause file
        -:  934:   * lookups to fail because the current directory (.) was pointing
        -:  935:   * at the wrong place when it was first evaluated.
        -:  936:   */
        -:  937:
        -:  938:  /*
        -:  939:   * On Windows/NT, we don't have the luxury of a /bin directory that
        -:  940:   * is mapped globally to every drive mounted to the system. Since make could
        -:  941:   * be invoked from any drive, and we don't want to propogate /bin/sh
        -:  942:   * to every single drive. Allow ourselves a chance to search for
        -:  943:   * a value for default shell here (if the default path does not exist).
        -:  944:   *
        -:  945:   * The value of default_shell is set here, but it could get reset after
        -:  946:   * the Makefiles are read in. See logic below where SHELL is checked
        -:  947:   * after the call to read_all_makefiles() completes.
        -:  948:   *
        -:  949:   * The reason SHELL is set here is so that macros can be safely evaluated
        -:  950:   * as makefiles are read in (some macros require $SHELL).
        -:  951:   */
        -:  952:
        -:  953:  {
        -:  954:    extern char *default_shell;
        -:  955:
        -:  956:    if (!file_exists_p(default_shell)) {
        -:  957:      char *p;
        -:  958:      struct variable *v = lookup_variable ("Path", 4);
        -:  959:
        -:  960:      /*
        -:  961:       * Try and make sure we have a full path to default_shell before
        -:  962:       * we parse makefiles.
        -:  963:       */
        -:  964:      if (v && v->value) {
        -:  965:        PATH_VAR(sh_path);
        -:  966:        char *ep;
        -:  967:
        -:  968:        p  = v->value;
        -:  969:        ep = strchr(p, PATH_SEPARATOR_CHAR);
        -:  970:
        -:  971:        while (ep && *ep) {
        -:  972:          *ep = '\0';
        -:  973:
        -:  974:          if (dir_file_exists_p(p, default_shell)) {
        -:  975:            sprintf(sh_path, "%s/%s", p, default_shell);
        -:  976:            default_shell = strdup(w32ify(sh_path,0));
        -:  977:            no_default_sh_exe = 0;
        -:  978:            *ep = PATH_SEPARATOR_CHAR;
        -:  979:
        -:  980:            /* terminate loop */
        -:  981:            p += strlen(p);
        -:  982:          } else {
        -:  983:            *ep = PATH_SEPARATOR_CHAR;
        -:  984:             p = ++ep;
        -:  985:          }
        -:  986:
        -:  987:          ep = strchr(p, PATH_SEPARATOR_CHAR);
        -:  988:        }
        -:  989:
        -:  990:        /* be sure to check last element of Path */
        -:  991:        if (p && *p && dir_file_exists_p(p, default_shell)) {
        -:  992:            sprintf(sh_path, "%s/%s", p, default_shell);
        -:  993:            default_shell = strdup(w32ify(sh_path,0));
        -:  994:            no_default_sh_exe = 0;
        -:  995:        }
        -:  996:      }
        -:  997:    }
        -:  998:  }
        -:  999:#endif /* WINDOWS32 */
        -: 1000:  /* Figure out the level of recursion.  */
        -: 1001:  {
      790: 1002:    struct variable *v = lookup_variable ("MAKELEVEL", 9);
call    0 returned 790
        -: 1003:#ifndef F_AA_8
     790*: 1004:    if (v != 0 && *v->value != '\0' && *v->value != '-')
branch  0 taken 0 (fallthrough)
branch  1 taken 790
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1005:#else
        -: 1006:    if (v != 0 && (*v->value != '\0' || *v->value != '-'))
        -: 1007:#endif
    #####: 1008:      makelevel = (unsigned int) atoi (v->value);
        -: 1009:    else
      790: 1010:      makelevel = 0;
        -: 1011:  }
        -: 1012:
        -: 1013:  /* Except under -s, always do -w in sub-makes and under -C.  */
      790: 1014:  if (!silent_flag && (directories != 0 || makelevel > 0))
branch  0 taken 406 (fallthrough)
branch  1 taken 384
branch  2 taken 404 (fallthrough)
branch  3 taken 2
branch  4 taken 0 (fallthrough)
branch  5 taken 404
        2: 1015:    print_directory_flag = 1;
        -: 1016:
        -: 1017:  /* Let the user disable that with --no-print-directory.  */
      790: 1018:  if (inhibit_print_directory_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 790
    #####: 1019:    print_directory_flag = 0;
        -: 1020:
        -: 1021:  /* Construct the list of include directories to search.  */
        -: 1022:
      795: 1023:  construct_include_path (include_directories == 0 ? (char **) 0
branch  0 taken 5 (fallthrough)
branch  1 taken 785
call    2 returned 790
        5: 1024:			  : include_directories->list);
        -: 1025:
        -: 1026:  /* Figure out where we are now, after chdir'ing.  */
      790: 1027:  if (directories == 0)
branch  0 taken 788 (fallthrough)
branch  1 taken 2
        -: 1028:    /* We didn't move, so we're still in the same place.  */
      788: 1029:    starting_directory = current_directory;
        -: 1030:  else
        -: 1031:    {
        -: 1032:#ifdef WINDOWS32
        -: 1033:      if (getcwd_fs (current_directory, GET_PATH_MAX) == 0)
        -: 1034:#else
        2: 1035:      if (getcwd (current_directory, GET_PATH_MAX) == 0)
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -: 1036:#endif
        -: 1037:	{
        -: 1038:#ifdef	HAVE_GETCWD
    #####: 1039:	  perror_with_name ("getcwd: ", "");
call    0 never executed
        -: 1040:#else
        -: 1041:	  error ("getwd: %s", current_directory);
        -: 1042:#endif
    #####: 1043:	  starting_directory = 0;
        -: 1044:	}
        -: 1045:      else
        2: 1046:	starting_directory = current_directory;
        -: 1047:    }
        -: 1048:
        -: 1049:  /* Read any stdin makefiles into temporary files.  */
        -: 1050:
      790: 1051:  if (makefiles != 0)
branch  0 taken 772 (fallthrough)
branch  1 taken 18
        -: 1052:    {
        -: 1053:      register unsigned int i;
     1544: 1054:      for (i = 0; i < makefiles->idx; ++i)
branch  0 taken 772
branch  1 taken 772 (fallthrough)
     772*: 1055:	if (makefiles->list[i][0] == '-' && makefiles->list[i][1] == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 772
branch  2 never executed
branch  3 never executed
        -: 1056:	  {
        -: 1057:	    /* This makefile is standard input.  Since we may re-exec
        -: 1058:	       and thus re-read the makefiles, we read standard input
        -: 1059:	       into a temporary file and read from that.  */
        -: 1060:	    FILE *outfile;
        -: 1061:
        -: 1062:	    /* Make a unique filename.  */
        -: 1063:#ifdef HAVE_MKTEMP
        -: 1064:
        -: 1065:#ifdef VMS
        -: 1066:	    static char name[] = "sys$scratch:GmXXXXXX";
        -: 1067:#else
        -: 1068:	    static char name[] = "/tmp/GmXXXXXX";
        -: 1069:#endif
    #####: 1070:	    (void) mktemp (name);
call    0 never executed
        -: 1071:#else
        -: 1072:	    static char name[L_tmpnam];
        -: 1073:	    (void) tmpnam (name);
        -: 1074:#endif
        -: 1075:
    #####: 1076:	    outfile = fopen (name, "w");
call    0 never executed
    #####: 1077:	    if (outfile == 0)
branch  0 never executed
branch  1 never executed
    #####: 1078:	      pfatal_with_name ("fopen (temporary file)");
call    0 never executed
    #####: 1079:	    while (!feof (stdin))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1080:	      {
        -: 1081:		char buf[2048];
    #####: 1082:		unsigned int n = fread (buf, 1, sizeof(buf), stdin);
call    0 never executed
    #####: 1083:		if (n > 0 && fwrite (buf, 1, n, outfile) != n)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1084:		  pfatal_with_name ("fwrite (temporary file)");
call    0 never executed
        -: 1085:	      }
        -: 1086:	    /* Try to make sure we won't remake the temporary
        -: 1087:	       file when we are re-exec'd.  Kludge-o-matic!  */
    #####: 1088:	    fprintf (outfile, "%s:;\n", name);
call    0 never executed
    #####: 1089:	    (void) fclose (outfile);
call    0 never executed
        -: 1090:
        -: 1091:	    /* Replace the name that read_all_makefiles will
        -: 1092:	       see with the name of the temporary file.  */
        -: 1093:	    {
        -: 1094:	      char *temp;
        -: 1095:	      /* SGI compiler requires alloca's result be assigned simply.  */
    #####: 1096:	      temp = (char *) alloca (sizeof (name));
    #####: 1097:	      bcopy (name, temp, sizeof (name));
    #####: 1098:	      makefiles->list[i] = temp;
        -: 1099:	    }
        -: 1100:
        -: 1101:	    /* Make sure the temporary file will not be remade.  */
    #####: 1102:	    f = enter_file (savestring (name, sizeof name - 1));
call    0 never executed
call    1 never executed
    #####: 1103:	    f->updated = 1;
    #####: 1104:	    f->update_status = 0;
    #####: 1105:	    f->command_state = cs_finished;
        -: 1106:	    /* Let it be removed when we're done.  */
    #####: 1107:	    f->intermediate = 1;
        -: 1108:	    /* But don't mention it.  */
    #####: 1109:	    f->dontcare = 1;
        -: 1110:	  }
        -: 1111:    }
        -: 1112:
        -: 1113:  /* Set up to handle children dying.  This must be done before
        -: 1114:     reading in the makefiles so that `shell' function calls will work.  */
        -: 1115:
        -: 1116:#ifdef SIGCHLD
      790: 1117:  (void) signal (SIGCHLD, child_handler);
call    0 returned 790
        -: 1118:#endif
        -: 1119:#ifdef SIGCLD
      790: 1120:  (void) signal (SIGCLD, child_handler);
call    0 returned 790
        -: 1121:#endif
        -: 1122:
        -: 1123:  /* Let the user send us SIGUSR1 to toggle the -d flag during the run.  */
        -: 1124:#ifdef SIGUSR1
      790: 1125:  (void) signal (SIGUSR1, debug_signal_handler);
call    0 returned 790
        -: 1126:#endif
        -: 1127:
        -: 1128:  /* Define the initial list of suffixes for old-style rules.  */
        -: 1129:
      790: 1130:  set_default_suffixes ();
call    0 returned 790
        -: 1131:
        -: 1132:  /* Define the file rules for the built-in suffix rules.  These will later
        -: 1133:     be converted into pattern rules.  We used to do this in
        -: 1134:     install_default_implicit_rules, but since that happens after reading
        -: 1135:     makefiles, it results in the built-in pattern rules taking precedence
        -: 1136:     over makefile-specified suffix rules, which is wrong.  */
        -: 1137:
      790: 1138:  install_default_suffix_rules ();
call    0 returned 790
        -: 1139:
        -: 1140:  /* Define some internal and special variables.  */
        -: 1141:
      790: 1142:  define_automatic_variables ();
call    0 returned 790
        -: 1143:
        -: 1144:  /* Set up the MAKEFLAGS and MFLAGS variables
        -: 1145:     so makefiles can look at them.  */
        -: 1146:
      790: 1147:  define_makeflags (0, 0);
call    0 returned 790
        -: 1148:
        -: 1149:#ifdef WINDOWS32
        -: 1150:  /*
        -: 1151:   * Now that makefiles are parsed, see if a Makefile gave a
        -: 1152:   * value for SHELL and use that for default_shell instead if
        -: 1153:   * that filename exists. This should speed up the
        -: 1154:   * construct_argv_internal() function by avoiding unnecessary
        -: 1155:   * recursion.
        -: 1156:   */
        -: 1157:  {
        -: 1158:    struct variable *v = lookup_variable("SHELL", 5);
        -: 1159:    extern char* default_shell;
        -: 1160:
        -: 1161:    /*
        -: 1162:     * to change value:
        -: 1163:     *
        -: 1164:     * SHELL must be found, SHELL must be set, value of SHELL
        -: 1165:     * must be different from current value, and the
        -: 1166:     * specified file must exist. Whew!
        -: 1167:     */
        -: 1168:    if (v != 0 && *v->value != '\0') {
        -: 1169:      char *fn = recursively_expand(v);
        -: 1170:
        -: 1171:      if (fn && strcmp(fn, default_shell) && file_exists_p(fn)) {
        -: 1172:        char *p;
        -: 1173:
        -: 1174:        default_shell = fn;
        -: 1175:
        -: 1176:        /* if Makefile says SHELL is sh.exe, believe it */
        -: 1177:        if (strstr(default_shell, "sh.exe"))
        -: 1178:               no_default_sh_exe = 0;
        -: 1179:
        -: 1180:        /*
        -: 1181:         * Convert from backslashes to forward slashes so
        -: 1182:         * create_command_line_argv_internal() is not confused.
        -: 1183:         */
        -: 1184:        for (p = strchr(default_shell, '\\'); p; p = strchr(default_shell, '\\'))
        -: 1185:          *p = '/';
        -: 1186:      }
        -: 1187:    }
        -: 1188:  }
        -: 1189:  if (no_default_sh_exe && job_slots != 1) {
        -: 1190:    error("Do not specify -j or --jobs if sh.exe is not available.");
        -: 1191:    error("Resetting make for single job mode.");
        -: 1192:    job_slots = 1;
        -: 1193:  }
        -: 1194:#endif /* WINDOWS32 */
        -: 1195:
        -: 1196:  /* Define the default variables.  */
      790: 1197:  define_default_variables ();
call    0 returned 790
        -: 1198:
        -: 1199:  /* Read all the makefiles.  */
        -: 1200:
      790: 1201:  default_file = enter_file (".DEFAULT");
call    0 returned 790
        -: 1202:
        -: 1203:  read_makefiles
      790: 1204:    = read_all_makefiles (makefiles == 0 ? (char **) 0 : makefiles->list);
branch  0 taken 772 (fallthrough)
branch  1 taken 18
call    2 returned 790
        -: 1205:
        -: 1206:#ifdef __MSDOS__
        -: 1207:  /* We need to know what kind of shell we will be using.  */
        -: 1208:  {
        -: 1209:    extern int _is_unixy_shell (const char *_path);
        -: 1210:    struct variable *shv = lookup_variable("SHELL", 5);
        -: 1211:    extern int unixy_shell;
        -: 1212:    extern char *default_shell;
        -: 1213:
        -: 1214:    if (shv && *shv->value)
        -: 1215:      {
        -: 1216:	char *shell_path = recursively_expand(shv);
        -: 1217:
        -: 1218:	if (shell_path && _is_unixy_shell (shell_path))
        -: 1219:	  unixy_shell = 1;
        -: 1220:	else
        -: 1221:	  unixy_shell = 0;
        -: 1222:	if (shell_path)
        -: 1223:	  default_shell = shell_path;
        -: 1224:      }
        -: 1225:  }
        -: 1226:#endif /* __MSDOS__ */
        -: 1227:
        -: 1228:  /* Decode switches again, in case the variables were set by the makefile.  */
      790: 1229:  decode_env_switches ("MAKEFLAGS", 9);
call    0 returned 790
        -: 1230:#if 0
        -: 1231:  decode_env_switches ("MFLAGS", 6);
        -: 1232:#endif
        -: 1233:
        -: 1234:  /* Set up MAKEFLAGS and MFLAGS again, so they will be right.  */
        -: 1235:
      790: 1236:  define_makeflags (1, 0);
call    0 returned 790
        -: 1237:
        -: 1238:  /* Make each `struct dep' point at the `struct file' for the file
        -: 1239:     depended on.  Also do magic for special targets.  */
        -: 1240:
      790: 1241:  snap_deps ();
call    0 returned 790
        -: 1242:
        -: 1243:  /* Convert old-style suffix rules to pattern rules.  It is important to
        -: 1244:     do this before installing the built-in pattern rules below, so that
        -: 1245:     makefile-specified suffix rules take precedence over built-in pattern
        -: 1246:     rules.  */
        -: 1247:
      790: 1248:  convert_to_pattern ();
call    0 returned 790
        -: 1249:
        -: 1250:  /* Install the default implicit pattern rules.
        -: 1251:     This used to be done before reading the makefiles.
        -: 1252:     But in that case, built-in pattern rules were in the chain
        -: 1253:     before user-defined ones, so they matched first.  */
        -: 1254:
      790: 1255:  install_default_implicit_rules ();
call    0 returned 790
        -: 1256:
        -: 1257:  /* Compute implicit rule limits.  */
        -: 1258:
      790: 1259:  count_implicit_rule_limits ();
call    0 returned 790
        -: 1260:
        -: 1261:  /* Construct the listings of directories in VPATH lists.  */
        -: 1262:
      790: 1263:  build_vpath_lists ();
call    0 returned 790
        -: 1264:
        -: 1265:  /* Mark files given with -o flags as very old (00:00:01.00 Jan 1, 1970)
        -: 1266:     and as having been updated already, and files given with -W flags as
        -: 1267:     brand new (time-stamp as far as possible into the future).  */
        -: 1268:
      790: 1269:  if (old_files != 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 788
        4: 1270:    for (p = old_files->list; *p != 0; ++p)
branch  0 taken 2
branch  1 taken 2 (fallthrough)
        -: 1271:      {
        2: 1272:	f = enter_command_line_file (*p);
call    0 returned 2
        2: 1273:	f->last_mtime = (time_t) 1;
        2: 1274:	f->updated = 1;
        2: 1275:	f->update_status = 0;
        2: 1276:	f->command_state = cs_finished;
        -: 1277:      }
        -: 1278:
      790: 1279:  if (new_files != 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 787
        -: 1280:    {
        6: 1281:      for (p = new_files->list; *p != 0; ++p)
branch  0 taken 3
branch  1 taken 3 (fallthrough)
        -: 1282:	{
        3: 1283:	  f = enter_command_line_file (*p);
call    0 returned 3
        3: 1284:	  f->last_mtime = NEW_MTIME;
        -: 1285:	}
        -: 1286:    }
        -: 1287:
        -: 1288:  /* Initialize the remote job module.  */
      790: 1289:  remote_setup ();
call    0 returned 790
        -: 1290:
      790: 1291:  if (read_makefiles != 0)
branch  0 taken 790 (fallthrough)
branch  1 taken 0
        -: 1292:    {
        -: 1293:      /* Update any makefiles if necessary.  */
        -: 1294:
      790: 1295:      time_t *makefile_mtimes = 0;
      790: 1296:      unsigned int mm_idx = 0;
      790: 1297:      char **nargv = argv;
      790: 1298:      int nargc = argc;
        -: 1299:
      790: 1300:      if (debug_flag)
branch  0 taken 384 (fallthrough)
branch  1 taken 406
      384: 1301:	puts ("Updating makefiles....");
call    0 returned 384
        -: 1302:
        -: 1303:      /* Remove any makefiles we don't want to try to update.
        -: 1304:	 Also record the current modtimes so we can compare them later.  */
        -: 1305:      {
        -: 1306:	register struct dep *d, *last;
      790: 1307:	last = 0;
      790: 1308:	d = read_makefiles;
     1585: 1309:	while (d != 0)
branch  0 taken 795
branch  1 taken 790 (fallthrough)
        -: 1310:	  {
      795: 1311:	    register struct file *f = d->file;
      795: 1312:	    if (f->double_colon)
branch  0 taken 0 (fallthrough)
branch  1 taken 795
    #####: 1313:	      for (f = f->double_colon; f != NULL; f = f->prev)
branch  0 never executed
branch  1 never executed
        -: 1314:		{
    #####: 1315:		  if (f->deps == 0 && f->cmds != 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1316:		    {
        -: 1317:		      /* This makefile is a :: target with commands, but
        -: 1318:			 no dependencies.  So, it will always be remade.
        -: 1319:			 This might well cause an infinite loop, so don't
        -: 1320:			 try to remake it.  (This will only happen if
        -: 1321:			 your makefiles are written exceptionally
        -: 1322:			 stupidly; but if you work for Athena, that's how
        -: 1323:			 you write your makefiles.)  */
        -: 1324:
    #####: 1325:		      if (debug_flag)
branch  0 never executed
branch  1 never executed
    #####: 1326:			printf ("Makefile `%s' might loop; not remaking it.\n",
call    0 never executed
        -: 1327:				f->name);
        -: 1328:
    #####: 1329:		      if (last == 0)
branch  0 never executed
branch  1 never executed
    #####: 1330:			read_makefiles = d->next;
        -: 1331:		      else
    #####: 1332:			last->next = d->next;
        -: 1333:
        -: 1334:		      /* Free the storage.  */
    #####: 1335:		      free ((char *) d);
        -: 1336:
    #####: 1337:		      d = last == 0 ? 0 : last->next;
branch  0 never executed
branch  1 never executed
        -: 1338:
    #####: 1339:		      break;
        -: 1340:		    }
        -: 1341:		}
      795: 1342:	    if (f == NULL || !f->double_colon)
branch  0 taken 795 (fallthrough)
branch  1 taken 0
branch  2 taken 795 (fallthrough)
branch  3 taken 0
        -: 1343:	      {
      795: 1344:		if (makefile_mtimes == 0)
branch  0 taken 790 (fallthrough)
branch  1 taken 5
      790: 1345:		  makefile_mtimes = (time_t *) xmalloc (sizeof (time_t));
call    0 returned 790
        -: 1346:		else
        -: 1347:		  makefile_mtimes = (time_t *)
        5: 1348:		    xrealloc ((char *) makefile_mtimes,
        5: 1349:			      (mm_idx + 1) * sizeof (time_t));
call    0 returned 5
     795*: 1350:		makefile_mtimes[mm_idx++] = file_mtime_no_search (d->file);
branch  0 taken 0 (fallthrough)
branch  1 taken 795
call    2 returned 795
      795: 1351:		last = d;
      795: 1352:		d = d->next;
        -: 1353:	      }
        -: 1354:	  }
        -: 1355:      }
        -: 1356:
        -: 1357:      /* Set up `MAKEFLAGS' specially while remaking makefiles.  */
      790: 1358:      define_makeflags (1, 1);
call    0 returned 790
        -: 1359:
      790: 1360:      switch (update_goal_chain (read_makefiles, 1))
call    0 returned 273
branch  1 taken 0
branch  2 taken 17
branch  3 taken 256
branch  4 taken 0
        -: 1361:	{
    #####: 1362:	case 1:
        -: 1363:	default:
        -: 1364:#define BOGUS_UPDATE_STATUS 0
    #####: 1365:	  assert (BOGUS_UPDATE_STATUS);
call    0 never executed
        -: 1366:	  break;
        -: 1367:
       17: 1368:	case -1:
        -: 1369:	  /* Did nothing.  */
       17: 1370:	  break;
        -: 1371:
      256: 1372:	case 2:
        -: 1373:	  /* Failed to update.  Figure out if we care.  */
        -: 1374:	  {
        -: 1375:	    /* Nonzero if any makefile was successfully remade.  */
      256: 1376:	    int any_remade = 0;
        -: 1377:	    /* Nonzero if any makefile we care about failed
        -: 1378:	       in updating or could not be found at all.  */
      256: 1379:	    int any_failed = 0;
        -: 1380:	    register unsigned int i;
        -: 1381:            struct dep *d;
        -: 1382:
      512: 1383:	    for (i = 0, d = read_makefiles; d != 0; ++i, d = d->next)
branch  0 taken 256
branch  1 taken 256 (fallthrough)
      256: 1384:              if (d->file->updated)
branch  0 taken 256 (fallthrough)
branch  1 taken 0
        -: 1385:                {
        -: 1386:                  /* This makefile was updated.  */
      256: 1387:                  if (d->file->update_status == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 256
        -: 1388:                    {
        -: 1389:                      /* It was successfully updated.  */
    #####: 1390:                      any_remade |= (file_mtime_no_search (d->file)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1391:                                     != makefile_mtimes[i]);
        -: 1392:                    }
      256: 1393:                  else if (! (d->changed & RM_DONTCARE))
branch  0 taken 256 (fallthrough)
branch  1 taken 0
        -: 1394:                    {
        -: 1395:                      time_t mtime;
        -: 1396:                      /* The update failed and this makefile was not
        -: 1397:                         from the MAKEFILES variable, so we care.  */
      256: 1398:                      error ("Failed to remake makefile `%s'.",
      256: 1399:                             d->file->name);
call    0 returned 256
     256*: 1400:                      mtime = file_mtime_no_search (d->file);
branch  0 taken 256 (fallthrough)
branch  1 taken 0
call    2 never executed
      256: 1401:                      any_remade |= (mtime != (time_t) -1
     256*: 1402:                                     && mtime != makefile_mtimes[i]);
branch  0 taken 0 (fallthrough)
branch  1 taken 256
branch  2 never executed
branch  3 never executed
        -: 1403:                    }
        -: 1404:                }
        -: 1405:              else
        -: 1406:                /* This makefile was not found at all.  */
    #####: 1407:                if (! (d->changed & RM_DONTCARE))
branch  0 never executed
branch  1 never executed
        -: 1408:                  {
        -: 1409:                    /* This is a makefile we care about.  See how much.  */
    #####: 1410:                    if (d->changed & RM_INCLUDED)
branch  0 never executed
branch  1 never executed
        -: 1411:                      /* An included makefile.  We don't need
        -: 1412:                         to die, but we do want to complain.  */
    #####: 1413:                      error ("Included makefile `%s' was not found.",
call    0 never executed
    #####: 1414:                             dep_name (d));
branch  0 never executed
branch  1 never executed
        -: 1415:                    else
        -: 1416:                      {
        -: 1417:                        /* A normal makefile.  We must die later.  */
    #####: 1418:                        error ("Makefile `%s' was not found", dep_name (d));
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1419:                        any_failed = 1;
        -: 1420:                      }
        -: 1421:                  }
        -: 1422:
      256: 1423:	    if (any_remade)
branch  0 taken 0 (fallthrough)
branch  1 taken 256
    #####: 1424:	      goto re_exec;
      256: 1425:	    else if (any_failed)
branch  0 taken 0 (fallthrough)
branch  1 taken 256
    #####: 1426:	      die (2);
call    0 never executed
        -: 1427:	    else
      256: 1428:	      break;
        -: 1429:	  }
        -: 1430:
        -: 1431:	case 0:
    #####: 1432:	re_exec:
        -: 1433:	  /* Updated successfully.  Re-exec ourselves.  */
        -: 1434:
    #####: 1435:	  remove_intermediates (0);
call    0 never executed
        -: 1436:
    #####: 1437:	  if (print_data_base_flag)
branch  0 never executed
branch  1 never executed
    #####: 1438:	    print_data_base ();
call    0 never executed
        -: 1439:
    #####: 1440:	  log_working_directory (0);
call    0 never executed
        -: 1441:
    #####: 1442:	  if (makefiles != 0)
branch  0 never executed
branch  1 never executed
        -: 1443:	    {
        -: 1444:	      /* These names might have changed.  */
    #####: 1445:	      register unsigned int i, j = 0;
    #####: 1446:	      for (i = 1; i < argc; ++i)
branch  0 never executed
branch  1 never executed
    #####: 1447:		if (!strncmp (argv[i], "-f", 2)) /* XXX */
branch  0 never executed
branch  1 never executed
        -: 1448:		  {
    #####: 1449:		    char *p = &argv[i][2];
    #####: 1450:		    if (*p == '\0')
branch  0 never executed
branch  1 never executed
    #####: 1451:		      argv[++i] = makefiles->list[j];
        -: 1452:		    else
    #####: 1453:		      argv[i] = concat ("-f", makefiles->list[j], "");
call    0 never executed
    #####: 1454:		    ++j;
        -: 1455:		  }
        -: 1456:	    }
        -: 1457:
        -: 1458:          /* Add -o options for all makefiles that were remade */
        -: 1459:          {
        -: 1460:            register unsigned int i;
        -: 1461:            struct dep *d;
        -: 1462:
    #####: 1463:            for (i = argc+1, d = read_makefiles; d != 0; d = d->next)
branch  0 never executed
branch  1 never executed
    #####: 1464:              i += d->file->updated != 0;
        -: 1465:
        -: 1466:#ifndef F_JR_4  /* seeded fault #4 */
    #####: 1467:            nargv = (char **)xmalloc(i * sizeof(char *));
call    0 never executed
        -: 1468:#else
        -: 1469:            argv = (char **)xmalloc(i * sizeof(char *));
        -: 1470:#endif
    #####: 1471:            bcopy(argv, nargv, argc * sizeof(char *));
        -: 1472:
    #####: 1473:            for (i = 0, d = read_makefiles; d != 0; ++i, d = d->next)
branch  0 never executed
branch  1 never executed
        -: 1474:              {
    #####: 1475:                if (d->file->updated)
branch  0 never executed
branch  1 never executed
    #####: 1476:                  nargv[nargc++] = concat("-o", dep_name(d), "");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 1477:              }
    #####: 1478:            nargv[nargc] = 0;
        -: 1479:          }
        -: 1480:
    #####: 1481:	  if (directories != 0 && directories->idx > 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1482:	    {
        -: 1483:	      char bad;
    #####: 1484:	      if (directory_before_chdir != 0)
branch  0 never executed
branch  1 never executed
        -: 1485:		{
    #####: 1486:		  if (chdir (directory_before_chdir) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1487:		    {
    #####: 1488:		      perror_with_name ("chdir", "");
call    0 never executed
    #####: 1489:		      bad = 1;
        -: 1490:		    }
        -: 1491:		  else
    #####: 1492:		    bad = 0;
        -: 1493:		}
        -: 1494:	      else
    #####: 1495:		bad = 1;
    #####: 1496:	      if (bad)
branch  0 never executed
branch  1 never executed
    #####: 1497:		fatal ("Couldn't change back to original directory.");
call    0 never executed
        -: 1498:	    }
        -: 1499:
        -: 1500:#ifndef _AMIGA
    #####: 1501:	  for (p = environ; *p != 0; ++p)
branch  0 never executed
branch  1 never executed
    #####: 1502:	    if (!strncmp (*p, "MAKELEVEL=", 10))
branch  0 never executed
branch  1 never executed
        -: 1503:	      {
        -: 1504:		/* The SGI compiler apparently can't understand
        -: 1505:		   the concept of storing the result of a function
        -: 1506:		   in something other than a local variable.  */
        -: 1507:		char *sgi_loses;
    #####: 1508:		sgi_loses = (char *) alloca (40);
    #####: 1509:		*p = sgi_loses;
    #####: 1510:		sprintf (*p, "MAKELEVEL=%u", makelevel);
    #####: 1511:		break;
        -: 1512:	      }
        -: 1513:#else /* AMIGA */
        -: 1514:	  {
        -: 1515:	    char buffer[256];
        -: 1516:	    int len;
        -: 1517:
        -: 1518:	    len = GetVar ("MAKELEVEL", buffer, sizeof (buffer), GVF_GLOBAL_ONLY);
        -: 1519:
        -: 1520:	    if (len != -1)
        -: 1521:	    {
        -: 1522:	    sprintf (buffer, "%u", makelevel);
        -: 1523:	      SetVar ("MAKELEVEL", buffer, -1, GVF_GLOBAL_ONLY);
        -: 1524:	    }
        -: 1525:	  }
        -: 1526:#endif
        -: 1527:
    #####: 1528:	  if (debug_flag)
branch  0 never executed
branch  1 never executed
        -: 1529:	    {
        -: 1530:	      char **p;
    #####: 1531:	      fputs ("Re-executing:", stdout);
call    0 never executed
    #####: 1532:	      for (p = nargv; *p != 0; ++p)
branch  0 never executed
branch  1 never executed
    #####: 1533:		printf (" %s", *p);
call    0 never executed
    #####: 1534:	      puts ("");
call    0 never executed
        -: 1535:	    }
        -: 1536:
    #####: 1537:	  fflush (stdout);
call    0 never executed
    #####: 1538:	  fflush (stderr);
call    0 never executed
        -: 1539:
        -: 1540:#ifndef _AMIGA
    #####: 1541:	  exec_command (nargv, environ);
call    0 never executed
        -: 1542:#else
        -: 1543:	  exec_command (nargv);
        -: 1544:	  exit (0);
        -: 1545:#endif
        -: 1546:	  /* NOTREACHED */
        -: 1547:	}
        -: 1548:    }
        -: 1549:
        -: 1550:  /* Set up `MAKEFLAGS' again for the normal targets.  */
      273: 1551:  define_makeflags (1, 0);
call    0 returned 273
        -: 1552:
        -: 1553:  {
        -: 1554:    int status;
        -: 1555:
        -: 1556:    /* If there were no command-line goals, use the default.  */
      273: 1557:    if (goals == 0)
branch  0 taken 273 (fallthrough)
branch  1 taken 0
        -: 1558:      {
      273: 1559:	if (default_goal_file != 0)
branch  0 taken 16 (fallthrough)
branch  1 taken 257
        -: 1560:	  {
       16: 1561:	    goals = (struct dep *) xmalloc (sizeof (struct dep));
call    0 returned 16
       16: 1562:	    goals->next = 0;
       16: 1563:	    goals->name = 0;
       16: 1564:	    goals->file = default_goal_file;
        -: 1565:	  }
        -: 1566:      }
        -: 1567:    else
    #####: 1568:      lastgoal->next = 0;
        -: 1569:
      273: 1570:    if (goals != 0)
branch  0 taken 16 (fallthrough)
branch  1 taken 257
        -: 1571:      {
        -: 1572:	/* Update the goals.  */
        -: 1573:
       16: 1574:	if (debug_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 16
    #####: 1575:	  puts ("Updating goal targets....");
call    0 never executed
        -: 1576:
       16: 1577:	switch (update_goal_chain (goals, 0))
call    0 returned 14
branch  1 taken 14
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
        -: 1578:	  {
       14: 1579:	  case -1:
        -: 1580:	    /* Nothing happened.  */
        -: 1581:	  case 0:
        -: 1582:	    /* Updated successfully.  */
       14: 1583:	    status = EXIT_SUCCESS;
       14: 1584:	    break;
    #####: 1585:	  case 2:
        -: 1586:	    /* Updating failed.  POSIX.2 specifies exit status >1 for this;
        -: 1587:	       but in VMS, there is only success and failure.  */
    #####: 1588:	    status = EXIT_FAILURE ? 2 : EXIT_FAILURE;
    #####: 1589:	    break;
    #####: 1590:	  case 1:
        -: 1591:	    /* We are under -q and would run some commands.  */
    #####: 1592:	    status = EXIT_FAILURE;
    #####: 1593:	    break;
    #####: 1594:	  default:
    #####: 1595:	    abort ();
call    0 never executed
        -: 1596:	  }
        -: 1597:      }
        -: 1598:    else
        -: 1599:      {
      257: 1600:	if (read_makefiles == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 257
    #####: 1601:	  fatal ("No targets specified and no makefile found");
call    0 never executed
        -: 1602:	else
      257: 1603:	  fatal ("No targets");
call    0 returned 0
        -: 1604:      }
        -: 1605:
        -: 1606:    /* If we detected some clock skew, generate one last warning */
       14: 1607:    if (clock_skew_detected)
branch  0 taken 0 (fallthrough)
branch  1 taken 14
    #####: 1608:      error("*** Warning:  Clock skew detected.  Your build may be incomplete.");
call    0 never executed
        -: 1609:
        -: 1610:    /* Exit.  */
       14: 1611:    die (status);
call    0 returned 0
        -: 1612:  }
        -: 1613:
    #####: 1614:  return 0;
        -: 1615:}
        -: 1616:
        -: 1617:/* Parsing of arguments, decoding of switches.  */
        -: 1618:
        -: 1619:static char options[1 + sizeof (switches) / sizeof (switches[0]) * 3];
        -: 1620:static struct option long_options[(sizeof (switches) / sizeof (switches[0])) +
        -: 1621:				  (sizeof (long_option_aliases) /
        -: 1622:				   sizeof (long_option_aliases[0]))];
        -: 1623:
        -: 1624:/* Fill in the string and vector for getopt.  */
        -: 1625:static void
function init_switches called 1564 returned 100% blocks executed 100%
     1564: 1626:init_switches ()
        -: 1627:{
        -: 1628:  register char *p;
        -: 1629:  register int c;
        -: 1630:  register unsigned int i;
        -: 1631:
     1564: 1632:  if (options[0] != '\0')
branch  0 taken 771 (fallthrough)
branch  1 taken 793
        -: 1633:    /* Already done.  */
      771: 1634:    return;
        -: 1635:
      793: 1636:  p = options;
        -: 1637:
        -: 1638:  /* Return switch and non-switch args in order, regardless of
        -: 1639:     POSIXLY_CORRECT.  Non-switch args are returned as option 1.  */
      793: 1640:  *p++ = '-';
        -: 1641:
    20618: 1642:  for (i = 0; switches[i].c != '\0'; ++i)
branch  0 taken 19825
branch  1 taken 793 (fallthrough)
        -: 1643:    {
    19825: 1644:      long_options[i].name = (switches[i].long_name == 0 ? "" :
branch  0 taken 18239 (fallthrough)
branch  1 taken 1586
        -: 1645:			      switches[i].long_name);
    19825: 1646:      long_options[i].flag = 0;
    19825: 1647:      long_options[i].val = switches[i].c;
    19825: 1648:      if (isalnum (switches[i].c))
branch  0 taken 18239 (fallthrough)
branch  1 taken 1586
    18239: 1649:	*p++ = switches[i].c;
    19825: 1650:      switch (switches[i].type)
branch  0 taken 14274
branch  1 taken 5551
branch  2 taken 0
        -: 1651:	{
    14274: 1652:	case flag:
        -: 1653:	case flag_off:
        -: 1654:	case ignore:
    14274: 1655:	  long_options[i].has_arg = no_argument;
    14274: 1656:	  break;
        -: 1657:
     5551: 1658:	case string:
        -: 1659:	case positive_int:
        -: 1660:	case floating:
     5551: 1661:	  if (isalnum (switches[i].c))
branch  0 taken 5551 (fallthrough)
branch  1 taken 0
     5551: 1662:	    *p++ = ':';
     5551: 1663:	  if (switches[i].noarg_value != 0)
branch  0 taken 1586 (fallthrough)
branch  1 taken 3965
        -: 1664:	    {
     1586: 1665:	      if (isalnum (switches[i].c))
branch  0 taken 1586 (fallthrough)
branch  1 taken 0
     1586: 1666:		*p++ = ':';
     1586: 1667:	      long_options[i].has_arg = optional_argument;
        -: 1668:	    }
        -: 1669:	  else
     3965: 1670:	    long_options[i].has_arg = required_argument;
     5551: 1671:	  break;
        -: 1672:	}
        -: 1673:    }
      793: 1674:  *p = '\0';
     7930: 1675:  for (c = 0; c < (sizeof (long_option_aliases) /
branch  0 taken 7137
branch  1 taken 793 (fallthrough)
        -: 1676:		   sizeof (long_option_aliases[0]));
     7137: 1677:       ++c)
     7137: 1678:    long_options[i++] = long_option_aliases[c];
      793: 1679:  long_options[i].name = 0;
        -: 1680:}
        -: 1681:
        -: 1682:static void
function handle_non_switch_argument called 0 returned 0% blocks executed 0%
    #####: 1683:handle_non_switch_argument (arg, env)
        -: 1684:     char *arg;
        -: 1685:     int env;
        -: 1686:{
        -: 1687:  /* Non-option argument.  It might be a variable definition.  */
        -: 1688:  struct variable *v;
    #####: 1689:  if (arg[0] == '-' && arg[1] == '\0')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1690:    /* Ignore plain `-' for compatibility.  */
    #####: 1691:    return;
    #####: 1692:  v = try_variable_definition ((char *) 0, 0, arg, o_command);
call    0 never executed
    #####: 1693:  if (v != 0)
branch  0 never executed
branch  1 never executed
        -: 1694:    {
        -: 1695:      /* It is indeed a variable definition.  Record a pointer to
        -: 1696:	 the variable for later use in define_makeflags.  */
        -: 1697:      struct command_variable *cv
    #####: 1698:	= (struct command_variable *) xmalloc (sizeof (*cv));
call    0 never executed
    #####: 1699:      cv->variable = v;
    #####: 1700:      cv->next = command_variables;
    #####: 1701:      command_variables = cv;
        -: 1702:    }
    #####: 1703:  else if (! env)
branch  0 never executed
branch  1 never executed
        -: 1704:    {
        -: 1705:      /* Not an option or variable definition; it must be a goal
        -: 1706:	 target!  Enter it as a file and add it to the dep chain of
        -: 1707:	 goals.  */
    #####: 1708:      struct file *f = enter_command_line_file (arg);
call    0 never executed
    #####: 1709:      f->cmd_target = 1;
        -: 1710:
    #####: 1711:      if (goals == 0)
branch  0 never executed
branch  1 never executed
        -: 1712:	{
    #####: 1713:	  goals = (struct dep *) xmalloc (sizeof (struct dep));
call    0 never executed
    #####: 1714:	  lastgoal = goals;
        -: 1715:	}
        -: 1716:      else
        -: 1717:	{
    #####: 1718:	  lastgoal->next
    #####: 1719:	    = (struct dep *) xmalloc (sizeof (struct dep));
call    0 never executed
    #####: 1720:	  lastgoal = lastgoal->next;
        -: 1721:	}
    #####: 1722:      lastgoal->name = 0;
    #####: 1723:      lastgoal->file = f;
        -: 1724:
        -: 1725:      {
        -: 1726:        /* Add this target name to the MAKECMDGOALS variable. */
        -: 1727:        struct variable *v;
        -: 1728:        char *value;
        -: 1729:
    #####: 1730:        v = lookup_variable("MAKECMDGOALS", 12);
call    0 never executed
    #####: 1731:        if (v == 0)
branch  0 never executed
branch  1 never executed
    #####: 1732:          value = f->name;
        -: 1733:        else
        -: 1734:          {
        -: 1735:            /* Paste the old and new values together */
        -: 1736:            unsigned int oldlen, newlen;
        -: 1737:
    #####: 1738:            oldlen = strlen(v->value);
    #####: 1739:            newlen = strlen(f->name);
    #####: 1740:            value = (char *)alloca(oldlen + 1 + newlen + 1);
    #####: 1741:            bcopy(v->value, value, oldlen);
    #####: 1742:            value[oldlen] = ' ';
    #####: 1743:            bcopy(f->name, &value[oldlen + 1], newlen + 1);
        -: 1744:          }
    #####: 1745:        define_variable("MAKECMDGOALS", 12, value, o_default, 0);
call    0 never executed
        -: 1746:      }
        -: 1747:    }
        -: 1748:}
        -: 1749:
        -: 1750:/* Decode switches from ARGC and ARGV.
        -: 1751:   They came from the environment if ENV is nonzero.  */
        -: 1752:
        -: 1753:static void
function decode_switches called 1564 returned 100% blocks executed 31%
     1564: 1754:decode_switches (argc, argv, env)
        -: 1755:     int argc;
        -: 1756:     char **argv;
        -: 1757:     int env;
        -: 1758:{
     1564: 1759:  int bad = 0;
        -: 1760:  register const struct command_switch *cs;
        -: 1761:  register struct stringlist *sl;
        -: 1762:  register int c;
        -: 1763:
        -: 1764:  /* getopt does most of the parsing for us.
        -: 1765:     First, get its vectors set up.  */
        -: 1766:
     1564: 1767:  init_switches ();
call    0 returned 1564
        -: 1768:
        -: 1769:  /* Let getopt produce error messages for the command line,
        -: 1770:     but not for options from the environment.  */
     1564: 1771:  opterr = !env;
        -: 1772:  /* Reset getopt's state.  */
     1564: 1773:  optind = 0;
        -: 1774:
     7997: 1775:  while (optind < argc)
branch  0 taken 6436
branch  1 taken 1561 (fallthrough)
        -: 1776:    {
        -: 1777:      /* Parse the next argument.  */
     6436: 1778:      c = getopt_long (argc, argv, options, long_options, (int *) 0);
call    0 returned 6436
     6436: 1779:      if (c == EOF)
branch  0 taken 3 (fallthrough)
branch  1 taken 6433
        -: 1780:	/* End of arguments, or "--" marker seen.  */
        3: 1781:	break;
     6433: 1782:      else if (c == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 6433
        -: 1783:	/* An argument not starting with a dash.  */
    #####: 1784:	handle_non_switch_argument (optarg, env);
call    0 never executed
     6433: 1785:      else if (c == '?')
branch  0 taken 0 (fallthrough)
branch  1 taken 6433
        -: 1786:	/* Bad option.  We will print a usage message and die later.
        -: 1787:	   But continue to parse the other options so the user can
        -: 1788:	   see all he did wrong.  */
    #####: 1789:	bad = 1;
        -: 1790:      else
    70543: 1791:	for (cs = switches; cs->c != '\0'; ++cs)
branch  0 taken 70543
branch  1 taken 0 (fallthrough)
    70543: 1792:	  if (cs->c == c)
branch  0 taken 6433 (fallthrough)
branch  1 taken 64110
        -: 1793:	    {
        -: 1794:	      /* Whether or not we will actually do anything with
        -: 1795:		 this switch.  We test this individually inside the
        -: 1796:		 switch below rather than just once outside it, so that
        -: 1797:		 options which are to be ignored still consume args.  */
    6433*: 1798:	      int doit = !env || cs->env;
branch  0 taken 2823 (fallthrough)
branch  1 taken 3610
branch  2 taken 2823 (fallthrough)
branch  3 taken 0
        -: 1799:
     6433: 1800:	      switch (cs->type)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 5645
branch  3 taken 788
branch  4 taken 0
branch  5 taken 0
        -: 1801:		{
    #####: 1802:		default:
    #####: 1803:		  abort ();
call    0 never executed
        -: 1804:
    #####: 1805:		case ignore:
    #####: 1806:		  break;
        -: 1807:
     5645: 1808:		case flag:
        -: 1809:		case flag_off:
     5645: 1810:		  if (doit)
branch  0 taken 5645 (fallthrough)
branch  1 taken 0
     5645: 1811:		    *(int *) cs->value_ptr = cs->type == flag;
     5645: 1812:		  break;
        -: 1813:
      788: 1814:		case string:
      788: 1815:		  if (!doit)
branch  0 taken 0 (fallthrough)
branch  1 taken 788
    #####: 1816:		    break;
        -: 1817:
      788: 1818:		  if (optarg == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 788
    #####: 1819:		    optarg = cs->noarg_value;
        -: 1820:
      788: 1821:		  sl = *(struct stringlist **) cs->value_ptr;
      788: 1822:		  if (sl == 0)
branch  0 taken 786 (fallthrough)
branch  1 taken 2
        -: 1823:		    {
        -: 1824:		      sl = (struct stringlist *)
      786: 1825:			xmalloc (sizeof (struct stringlist));
call    0 returned 786
      786: 1826:		      sl->max = 5;
      786: 1827:		      sl->idx = 0;
      786: 1828:		      sl->list = (char **) xmalloc (5 * sizeof (char *));
call    0 returned 786
      786: 1829:		      *(struct stringlist **) cs->value_ptr = sl;
        -: 1830:		    }
        2: 1831:		  else if (sl->idx == sl->max - 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1832:		    {
    #####: 1833:		      sl->max += 5;
    #####: 1834:		      sl->list = (char **)
    #####: 1835:			xrealloc ((char *) sl->list,
    #####: 1836:				  sl->max * sizeof (char *));
call    0 never executed
        -: 1837:		    }
      788: 1838:		  sl->list[sl->idx++] = optarg;
      788: 1839:		  sl->list[sl->idx] = 0;
      788: 1840:		  break;
        -: 1841:
    #####: 1842:		case positive_int:
    #####: 1843:		  if (optarg == 0 && argc > optind
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1844:		      && isdigit (argv[optind][0]))
branch  0 never executed
branch  1 never executed
    #####: 1845:		    optarg = argv[optind++];
        -: 1846:
    #####: 1847:		  if (!doit)
branch  0 never executed
branch  1 never executed
    #####: 1848:		    break;
        -: 1849:
    #####: 1850:		  if (optarg != 0)
branch  0 never executed
branch  1 never executed
        -: 1851:		    {
    #####: 1852:		      int i = atoi (optarg);
    #####: 1853:		      if (i < 1)
branch  0 never executed
branch  1 never executed
        -: 1854:			{
    #####: 1855:			  if (doit)
branch  0 never executed
branch  1 never executed
    #####: 1856:			    error ("the `-%c' option requires a \
        -: 1857:positive integral argument",
    #####: 1858:				   cs->c);
call    0 never executed
    #####: 1859:			  bad = 1;
        -: 1860:			}
        -: 1861:		      else
    #####: 1862:			*(unsigned int *) cs->value_ptr = i;
        -: 1863:		    }
        -: 1864:		  else
    #####: 1865:		    *(unsigned int *) cs->value_ptr
    #####: 1866:		      = *(unsigned int *) cs->noarg_value;
    #####: 1867:		  break;
        -: 1868:
        -: 1869:#ifndef NO_FLOAT
    #####: 1870:		case floating:
    #####: 1871:		  if (optarg == 0 && optind < argc
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1872:		      && (isdigit (argv[optind][0]) || argv[optind][0] == '.'))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1873:		    optarg = argv[optind++];
        -: 1874:
    #####: 1875:		  if (doit)
branch  0 never executed
branch  1 never executed
    #####: 1876:		    *(double *) cs->value_ptr
    #####: 1877:		      = (optarg != 0 ? atof (optarg)
    #####: 1878:			 : *(double *) cs->noarg_value);
branch  0 never executed
branch  1 never executed
        -: 1879:
    #####: 1880:		  break;
        -: 1881:#endif
        -: 1882:		}
        -: 1883:
        -: 1884:	      /* We've found the switch.  Stop looking.  */
     6433: 1885:	      break;
        -: 1886:	    }
        -: 1887:    }
        -: 1888:
        -: 1889:  /* There are no more options according to getting getopt, but there may
        -: 1890:     be some arguments left.  Since we have asked for non-option arguments
        -: 1891:     to be returned in order, this only happens when there is a "--"
        -: 1892:     argument to prevent later arguments from being options.  */
     1564: 1893:  while (optind < argc)
branch  0 taken 0
branch  1 taken 1564 (fallthrough)
    #####: 1894:    handle_non_switch_argument (argv[optind++], env);
call    0 never executed
        -: 1895:
        -: 1896:
     1564: 1897:  if (!env && (bad || print_usage_flag))
branch  0 taken 793 (fallthrough)
branch  1 taken 771
branch  2 taken 793 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 793
        -: 1898:    {
        -: 1899:      /* Print a nice usage message.  */
        -: 1900:      FILE *usageto;
        -: 1901:
    #####: 1902:      if (print_version_flag)
branch  0 never executed
branch  1 never executed
    #####: 1903:	print_version ();
call    0 never executed
        -: 1904:
    #####: 1905:      usageto = bad ? stderr : stdout;
        -: 1906:
    #####: 1907:      fprintf (usageto, "Usage: %s [options] [target] ...\n", program);
call    0 never executed
        -: 1908:
    #####: 1909:      fputs ("Options:\n", usageto);
call    0 never executed
    #####: 1910:      for (cs = switches; cs->c != '\0'; ++cs)
branch  0 never executed
branch  1 never executed
        -: 1911:	{
        -: 1912:	  char buf[1024], shortarg[50], longarg[50], *p;
        -: 1913:
    #####: 1914:	  if (cs->description[0] == '-')
branch  0 never executed
branch  1 never executed
    #####: 1915:	    continue;
        -: 1916:
    #####: 1917:	  switch (long_options[cs - switches].has_arg)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1918:	    {
    #####: 1919:	    case no_argument:
    #####: 1920:	      shortarg[0] = longarg[0] = '\0';
    #####: 1921:	      break;
    #####: 1922:	    case required_argument:
    #####: 1923:	      sprintf (longarg, "=%s", cs->argdesc);
    #####: 1924:	      sprintf (shortarg, " %s", cs->argdesc);
    #####: 1925:	      break;
    #####: 1926:	    case optional_argument:
    #####: 1927:	      sprintf (longarg, "[=%s]", cs->argdesc);
    #####: 1928:	      sprintf (shortarg, " [%s]", cs->argdesc);
    #####: 1929:	      break;
        -: 1930:	    }
        -: 1931:
    #####: 1932:	  p = buf;
        -: 1933:
    #####: 1934:	  if (isalnum (cs->c))
branch  0 never executed
branch  1 never executed
        -: 1935:	    {
    #####: 1936:	      sprintf (buf, "  -%c%s", cs->c, shortarg);
    #####: 1937:	      p += strlen (p);
        -: 1938:	    }
    #####: 1939:	  if (cs->long_name != 0)
branch  0 never executed
branch  1 never executed
        -: 1940:	    {
        -: 1941:	      unsigned int i;
    #####: 1942:	      sprintf (p, "%s--%s%s",
    #####: 1943:		       !isalnum (cs->c) ? "  " : ", ",
    #####: 1944:		       cs->long_name, longarg);
branch  0 never executed
branch  1 never executed
    #####: 1945:	      p += strlen (p);
    #####: 1946:	      for (i = 0; i < (sizeof (long_option_aliases) /
branch  0 never executed
branch  1 never executed
        -: 1947:			       sizeof (long_option_aliases[0]));
    #####: 1948:		   ++i)
    #####: 1949:		if (long_option_aliases[i].val == cs->c)
branch  0 never executed
branch  1 never executed
        -: 1950:		  {
    #####: 1951:		    sprintf (p, ", --%s%s",
        -: 1952:			     long_option_aliases[i].name, longarg);
    #####: 1953:		    p += strlen (p);
        -: 1954:		  }
        -: 1955:	    }
        -: 1956:	  {
    #####: 1957:	    const struct command_switch *ncs = cs;
    #####: 1958:	    while ((++ncs)->c != '\0')
branch  0 never executed
branch  1 never executed
    #####: 1959:	      if (ncs->description[0] == '-' &&
branch  0 never executed
branch  1 never executed
    #####: 1960:		  ncs->description[1] == cs->c)
branch  0 never executed
branch  1 never executed
        -: 1961:		{
        -: 1962:		  /* This is another switch that does the same
        -: 1963:		     one as the one we are processing.  We want
        -: 1964:		     to list them all together on one line.  */
    #####: 1965:		  sprintf (p, ", -%c%s", ncs->c, shortarg);
    #####: 1966:		  p += strlen (p);
    #####: 1967:		  if (ncs->long_name != 0)
branch  0 never executed
branch  1 never executed
        -: 1968:		    {
    #####: 1969:		      sprintf (p, ", --%s%s", ncs->long_name, longarg);
    #####: 1970:		      p += strlen (p);
        -: 1971:		    }
        -: 1972:		}
        -: 1973:	  }
        -: 1974:
    #####: 1975:	  if (p - buf > DESCRIPTION_COLUMN - 2)
branch  0 never executed
branch  1 never executed
        -: 1976:	    /* The list of option names is too long to fit on the same
        -: 1977:	       line with the description, leaving at least two spaces.
        -: 1978:	       Print it on its own line instead.  */
        -: 1979:	    {
    #####: 1980:	      fprintf (usageto, "%s\n", buf);
call    0 never executed
    #####: 1981:	      buf[0] = '\0';
        -: 1982:	    }
        -: 1983:
    #####: 1984:	  fprintf (usageto, "%*s%s.\n",
        -: 1985:		   - DESCRIPTION_COLUMN,
    #####: 1986:		   buf, cs->description);
call    0 never executed
        -: 1987:	}
        -: 1988:
    #####: 1989:      die (bad ? 2 : 0);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 1990:    }
     1564: 1991:}
        -: 1992:
        -: 1993:/* Decode switches from environment variable ENVAR (which is LEN chars long).
        -: 1994:   We do this by chopping the value into a vector of words, prepending a
        -: 1995:   dash to the first word if it lacks one, and passing the vector to
        -: 1996:   decode_switches.  */
        -: 1997:
        -: 1998:static void
function decode_env_switches called 1583 returned 100% blocks executed 80%
     1583: 1999:decode_env_switches (envar, len)
        -: 2000:     char *envar;
        -: 2001:     unsigned int len;
        -: 2002:{
     1583: 2003:  char *varref = (char *) alloca (2 + len + 2);
        -: 2004:  char *value, *p;
        -: 2005:  int argc;
        -: 2006:  char **argv;
        -: 2007:
        -: 2008:  /* Get the variable's value.  */
     1583: 2009:  varref[0] = '$';
     1583: 2010:  varref[1] = '(';
     1583: 2011:  bcopy (envar, &varref[2], len);
     1583: 2012:  varref[2 + len] = ')';
     1583: 2013:  varref[2 + len + 1] = '\0';
     1583: 2014:  value = variable_expand (varref);
call    0 returned 1583
        -: 2015:
        -: 2016:  /* Skip whitespace, and check for an empty value.  */
     1583: 2017:  value = next_token (value);
call    0 returned 1583
     1583: 2018:  len = strlen (value);
     1583: 2019:  if (len == 0)
branch  0 taken 812 (fallthrough)
branch  1 taken 771
      812: 2020:    return;
        -: 2021:
        -: 2022:  /* Allocate a vector that is definitely big enough.  */
      771: 2023:  argv = (char **) alloca ((1 + len + 1) * sizeof (char *));
        -: 2024:
        -: 2025:  /* Allocate a buffer to copy the value into while we split it into words
        -: 2026:     and unquote it.  We must use permanent storage for this because
        -: 2027:     decode_switches may store pointers into the passed argument words.  */
      771: 2028:  p = (char *) xmalloc (2 * len);
call    0 returned 771
        -: 2029:
        -: 2030:  /* getopt will look at the arguments starting at ARGV[1].
        -: 2031:     Prepend a spacer word.  */
      771: 2032:  argv[0] = 0;
      771: 2033:  argc = 1;
      771: 2034:  argv[argc] = p;
     3594: 2035:  while (*value != '\0')
branch  0 taken 2823
branch  1 taken 771 (fallthrough)
        -: 2036:    {
     2823: 2037:      if (*value == '\\')
branch  0 taken 0 (fallthrough)
branch  1 taken 2823
    #####: 2038:	++value;		/* Skip the backslash.  */
    2823*: 2039:      else if (isblank (*value))
branch  0 taken 0 (fallthrough)
branch  1 taken 2823
        -: 2040:	{
        -: 2041:	  /* End of the word.  */
    #####: 2042:	  *p++ = '\0';
    #####: 2043:	  argv[++argc] = p;
        -: 2044:	  do
    #####: 2045:	    ++value;
    #####: 2046:	  while (isblank (*value));
branch  0 never executed
branch  1 never executed
    #####: 2047:	  continue;
        -: 2048:	}
     2823: 2049:      *p++ = *value++;
        -: 2050:    }
      771: 2051:  *p = '\0';
      771: 2052:  argv[++argc] = 0;
        -: 2053:
      771: 2054:  if (argv[1][0] != '-' && index (argv[1], '=') == 0)
branch  0 taken 771 (fallthrough)
branch  1 taken 0
branch  2 taken 771 (fallthrough)
branch  3 taken 0
        -: 2055:    /* The first word doesn't start with a dash and isn't a variable
        -: 2056:       definition.  Add a dash and pass it along to decode_switches.  We
        -: 2057:       need permanent storage for this in case decode_switches saves
        -: 2058:       pointers into the value.  */
      771: 2059:    argv[1] = concat ("-", argv[1], "");
call    0 returned 771
        -: 2060:
        -: 2061:  /* Parse those words.  */
      771: 2062:  decode_switches (argc, argv, 1);
call    0 returned 771
        -: 2063:}
        -: 2064:
        -: 2065:/* Quote the string IN so that it will be interpreted as a single word with
        -: 2066:   no magic by the shell; if DOUBLE_DOLLARS is nonzero, also double dollar
        -: 2067:   signs to avoid variable expansion in make itself.  Write the result into
        -: 2068:   OUT, returning the address of the next character to be written.
        -: 2069:   Allocating space for OUT twice the length of IN (thrice if
        -: 2070:   DOUBLE_DOLLARS is nonzero) is always sufficient.  */
        -: 2071:
        -: 2072:static char *
function quote_as_word called 13 returned 100% blocks executed 80%
       13: 2073:quote_as_word (out, in, double_dollars)
        -: 2074:     char *out, *in;
        -: 2075:     int double_dollars;
        -: 2076:{
      198: 2077:  while (*in != '\0')
branch  0 taken 185
branch  1 taken 13 (fallthrough)
        -: 2078:    {
        -: 2079:#ifdef VMS
        -: 2080:      if (index ("^;'\"*?$<>(){}|&~`\\ \t\r\n\f\v", *in) != 0)
        -: 2081:#else
      185: 2082:      if (index ("^;'\"*?[]$<>(){}|&~`\\ \t\r\n\f\v", *in) != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 185
        -: 2083:#endif
    #####: 2084:	*out++ = '\\';
      185: 2085:      if (double_dollars && *in == '$')
branch  0 taken 185 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 185
    #####: 2086:	*out++ = '$';
      185: 2087:      *out++ = *in++;
        -: 2088:    }
        -: 2089:
       13: 2090:  return out;
        -: 2091:}
        -: 2092:
        -: 2093:/* Define the MAKEFLAGS and MFLAGS variables to reflect the settings of the
        -: 2094:   command switches.  Include options with args if ALL is nonzero.
        -: 2095:   Don't include options with the `no_makefile' flag set if MAKEFILE.  */
        -: 2096:
        -: 2097:static void
function define_makeflags called 2643 returned 100% blocks executed 54%
     2643: 2098:define_makeflags (all, makefile)
        -: 2099:     int all, makefile;
        -: 2100:{
        -: 2101:  static const char ref[] = "$(MAKEOVERRIDES)";
        -: 2102:  static const char posixref[] = "$(-*-command-variables-*-)";
        -: 2103:  register const struct command_switch *cs;
        -: 2104:  char *flagstring;
        -: 2105:  register char *p;
        -: 2106:  unsigned int words;
        -: 2107:  struct variable *v;
        -: 2108:
        -: 2109:  /* We will construct a linked list of `struct flag's describing
        -: 2110:     all the flags which need to go in MAKEFLAGS.  Then, once we
        -: 2111:     know how many there are and their lengths, we can put them all
        -: 2112:     together in a string.  */
        -: 2113:
        -: 2114:  struct flag
        -: 2115:    {
        -: 2116:      struct flag *next;
        -: 2117:      const struct command_switch *cs;
        -: 2118:      char *arg;
        -: 2119:    };
     2643: 2120:  struct flag *flags = 0;
     2643: 2121:  unsigned int flagslen = 0;
        -: 2122:#define	ADD_FLAG(ARG, LEN) \
        -: 2123:  do {									      \
        -: 2124:    struct flag *new = (struct flag *) alloca (sizeof (struct flag));	      \
        -: 2125:    new->cs = cs;							      \
        -: 2126:    new->arg = (ARG);							      \
        -: 2127:    new->next = flags;							      \
        -: 2128:    flags = new;							      \
        -: 2129:    if (new->arg == 0)							      \
        -: 2130:      ++flagslen;		/* Just a single flag letter.  */	      \
        -: 2131:    else								      \
        -: 2132:      flagslen += 1 + 1 + 1 + 1 + 3 * (LEN); /* " -x foo" */		      \
        -: 2133:    if (!isalnum (cs->c))						      \
        -: 2134:      /* This switch has no single-letter version, so we use the long.  */    \
        -: 2135:      flagslen += 2 + strlen (cs->long_name);				      \
        -: 2136:  } while (0)
        -: 2137:
    68718: 2138:  for (cs = switches; cs->c != '\0'; ++cs)
branch  0 taken 66075
branch  1 taken 2643 (fallthrough)
    66075: 2139:    if (cs->toenv && (!makefile || !cs->no_makefile))
branch  0 taken 47574 (fallthrough)
branch  1 taken 18501
branch  2 taken 14220 (fallthrough)
branch  3 taken 33354
branch  4 taken 11850 (fallthrough)
branch  5 taken 2370
    45204: 2140:      switch (cs->type)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 37275
branch  3 taken 2643
branch  4 taken 2643
branch  5 taken 2643
        -: 2141:	{
    #####: 2142:	default:
    #####: 2143:	  abort ();
call    0 never executed
        -: 2144:
    #####: 2145:	case ignore:
    #####: 2146:	  break;
        -: 2147:
    37275: 2148:	case flag:
        -: 2149:	case flag_off:
    37275: 2150:	  if (!*(int *) cs->value_ptr == (cs->type == flag_off)
branch  0 taken 10732 (fallthrough)
branch  1 taken 26543
    10732: 2151:	      && (cs->default_value == 0
branch  0 taken 2643 (fallthrough)
branch  1 taken 8089
     2643: 2152:		  || *(int *) cs->value_ptr != *(int *) cs->default_value))
branch  0 taken 1024 (fallthrough)
branch  1 taken 1619
    9113*: 2153:	    ADD_FLAG (0, 0);
branch  0 taken 9113 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 9113
    37275: 2154:	  break;
        -: 2155:
     2643: 2156:	case positive_int:
     2643: 2157:	  if (all)
branch  0 taken 1853 (fallthrough)
branch  1 taken 790
        -: 2158:	    {
     1853: 2159:	      if ((cs->default_value != 0
branch  0 taken 1853 (fallthrough)
branch  1 taken 0
     1853: 2160:		   && (*(unsigned int *) cs->value_ptr
     1853: 2161:		       == *(unsigned int *) cs->default_value)))
branch  0 taken 0 (fallthrough)
branch  1 taken 1853
        -: 2162:		break;
    #####: 2163:	      else if (cs->noarg_value != 0
branch  0 never executed
branch  1 never executed
    #####: 2164:		       && (*(unsigned int *) cs->value_ptr ==
    #####: 2165:			   *(unsigned int *) cs->noarg_value))
branch  0 never executed
branch  1 never executed
    #####: 2166:		ADD_FLAG ("", 0); /* Optional value omitted; see below.  */
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2167:	      else if (cs->c == 'j')
branch  0 never executed
branch  1 never executed
        -: 2168:		/* Special case for `-j'.  */
    #####: 2169:		ADD_FLAG ("1", 1);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2170:	      else
        -: 2171:		{
    #####: 2172:		  char *buf = (char *) alloca (30);
    #####: 2173:		  sprintf (buf, "%u", *(unsigned int *) cs->value_ptr);
    #####: 2174:		  ADD_FLAG (buf, strlen (buf));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2175:		}
        -: 2176:	    }
      790: 2177:	  break;
        -: 2178:
        -: 2179:#ifndef NO_FLOAT
     2643: 2180:	case floating:
     2643: 2181:	  if (all)
branch  0 taken 1853 (fallthrough)
branch  1 taken 790
        -: 2182:	    {
     1853: 2183:	      if (cs->default_value != 0
branch  0 taken 1853 (fallthrough)
branch  1 taken 0
     1853: 2184:		  && (*(double *) cs->value_ptr
     1853: 2185:		      == *(double *) cs->default_value))
branch  0 taken 0 (fallthrough)
branch  1 taken 1853
        -: 2186:		break;
    #####: 2187:	      else if (cs->noarg_value != 0
branch  0 never executed
branch  1 never executed
    #####: 2188:		       && (*(double *) cs->value_ptr
    #####: 2189:			   == *(double *) cs->noarg_value))
branch  0 never executed
branch  1 never executed
    #####: 2190:		ADD_FLAG ("", 0); /* Optional value omitted; see below.  */
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2191:	      else
        -: 2192:		{
    #####: 2193:		  char *buf = (char *) alloca (100);
    #####: 2194:		  sprintf (buf, "%g", *(double *) cs->value_ptr);
    #####: 2195:		  ADD_FLAG (buf, strlen (buf));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2196:		}
        -: 2197:	    }
      790: 2198:	  break;
        -: 2199:#endif
        -: 2200:
     2643: 2201:	case string:
     2643: 2202:	  if (all)
branch  0 taken 1853 (fallthrough)
branch  1 taken 790
        -: 2203:	    {
     1853: 2204:	      struct stringlist *sl = *(struct stringlist **) cs->value_ptr;
     1853: 2205:	      if (sl != 0)
branch  0 taken 13 (fallthrough)
branch  1 taken 1840
        -: 2206:		{
        -: 2207:		  /* Add the elements in reverse order, because
        -: 2208:		     all the flags get reversed below; and the order
        -: 2209:		     matters for some switches (like -I).  */
       13: 2210:		  register unsigned int i = sl->idx;
       26: 2211:		  while (i-- > 0)
branch  0 taken 13
branch  1 taken 13 (fallthrough)
      13*: 2212:		    ADD_FLAG (sl->list[i], strlen (sl->list[i]));
branch  0 taken 0 (fallthrough)
branch  1 taken 13
branch  2 taken 0 (fallthrough)
branch  3 taken 13
        -: 2213:		}
        -: 2214:	    }
     2643: 2215:	  break;
        -: 2216:	}
        -: 2217:
     2643: 2218:  flagslen += 4 + sizeof posixref; /* Four more for the possible " -- ".  */
        -: 2219:
        -: 2220:#undef	ADD_FLAG
        -: 2221:
        -: 2222:  /* Construct the value in FLAGSTRING.
        -: 2223:     We allocate enough space for a preceding dash and trailing null.  */
     2643: 2224:  flagstring = (char *) alloca (1 + flagslen + 1);
     2643: 2225:  p = flagstring;
     2643: 2226:  words = 1;
     2643: 2227:  *p++ = '-';
    11769: 2228:  while (flags != 0)
branch  0 taken 9126
branch  1 taken 2643 (fallthrough)
        -: 2229:    {
        -: 2230:      /* Add the flag letter or name to the string.  */
     9126: 2231:      if (!isalnum (flags->cs->c))
branch  0 taken 0 (fallthrough)
branch  1 taken 9126
        -: 2232:	{
    #####: 2233:	  *p++ = '-';
    #####: 2234:	  strcpy (p, flags->cs->long_name);
    #####: 2235:	  p += strlen (p);
        -: 2236:	}
        -: 2237:      else
     9126: 2238:	*p++ = flags->cs->c;
     9126: 2239:      if (flags->arg != 0)
branch  0 taken 13 (fallthrough)
branch  1 taken 9113
        -: 2240:	{
        -: 2241:	  /* A flag that takes an optional argument which in this case is
        -: 2242:	     omitted is specified by ARG being "".  We must distinguish
        -: 2243:	     because a following flag appended without an intervening " -"
        -: 2244:	     is considered the arg for the first.  */
       13: 2245:	  if (flags->arg[0] != '\0')
branch  0 taken 13 (fallthrough)
branch  1 taken 0
        -: 2246:	    {
        -: 2247:	      /* Add its argument too.  */
      13*: 2248:	      *p++ = !isalnum (flags->cs->c) ? '=' : ' ';
branch  0 taken 0 (fallthrough)
branch  1 taken 13
       13: 2249:	      p = quote_as_word (p, flags->arg, 1);
call    0 returned 13
        -: 2250:	    }
       13: 2251:	  ++words;
        -: 2252:	  /* Write a following space and dash, for the next flag.  */
       13: 2253:	  *p++ = ' ';
       13: 2254:	  *p++ = '-';
        -: 2255:	}
     9113: 2256:      else if (!isalnum (flags->cs->c))
branch  0 taken 0 (fallthrough)
branch  1 taken 9113
        -: 2257:	{
    #####: 2258:	  ++words;
        -: 2259:	  /* Long options must each go in their own word,
        -: 2260:	     so we write the following space and dash.  */
    #####: 2261:	  *p++ = ' ';
    #####: 2262:	  *p++ = '-';
        -: 2263:	}
     9126: 2264:      flags = flags->next;
        -: 2265:    }
        -: 2266:
        -: 2267:  /* Define MFLAGS before appending variable definitions.  */
        -: 2268:
     2643: 2269:  if (p == &flagstring[1])
branch  0 taken 61 (fallthrough)
branch  1 taken 2582
        -: 2270:    /* No flags.  */
       61: 2271:    flagstring[0] = '\0';
     2582: 2272:  else if (p[-1] == '-')
branch  0 taken 13 (fallthrough)
branch  1 taken 2569
        -: 2273:    {
        -: 2274:      /* Kill the final space and dash.  */
       13: 2275:      p -= 2;
       13: 2276:      *p = '\0';
        -: 2277:    }
        -: 2278:  else
        -: 2279:    /* Terminate the string.  */
     2569: 2280:    *p = '\0';
        -: 2281:
        -: 2282:  /* Since MFLAGS is not parsed for flags, there is no reason to
        -: 2283:     override any makefile redefinition.  */
     2643: 2284:  (void) define_variable ("MFLAGS", 6, flagstring, o_env, 1);
call    0 returned 2643
        -: 2285:
     2643: 2286:  if (all && command_variables != 0)
branch  0 taken 1853 (fallthrough)
branch  1 taken 790
branch  2 taken 0 (fallthrough)
branch  3 taken 1853
        -: 2287:    {
        -: 2288:      /* Now write a reference to $(MAKEOVERRIDES), which contains all the
        -: 2289:	 command-line variable definitions.  */
        -: 2290:
    #####: 2291:      if (p == &flagstring[1])
branch  0 never executed
branch  1 never executed
        -: 2292:	/* No flags written, so elide the leading dash already written.  */
    #####: 2293:	p = flagstring;
        -: 2294:      else
        -: 2295:	{
        -: 2296:	  /* Separate the variables from the switches with a "--" arg.  */
    #####: 2297:	  if (p[-1] != '-')
branch  0 never executed
branch  1 never executed
        -: 2298:	    {
        -: 2299:	      /* We did not already write a trailing " -".  */
    #####: 2300:	      *p++ = ' ';
    #####: 2301:	      *p++ = '-';
        -: 2302:	    }
        -: 2303:	  /* There is a trailing " -"; fill it out to " -- ".  */
    #####: 2304:	  *p++ = '-';
    #####: 2305:	  *p++ = ' ';
        -: 2306:	}
        -: 2307:
        -: 2308:      /* Copy in the string.  */
    #####: 2309:      if (posix_pedantic)
branch  0 never executed
branch  1 never executed
        -: 2310:	{
    #####: 2311:	  bcopy (posixref, p, sizeof posixref - 1);
    #####: 2312:	  p += sizeof posixref - 1;
        -: 2313:	}
        -: 2314:      else
        -: 2315:	{
    #####: 2316:	  bcopy (ref, p, sizeof ref - 1);
    #####: 2317:	  p += sizeof ref - 1;
        -: 2318:	}
        -: 2319:    }
     2643: 2320:  else if (p == &flagstring[1])
branch  0 taken 61 (fallthrough)
branch  1 taken 2582
        -: 2321:    {
       61: 2322:      words = 0;
       61: 2323:      --p;
        -: 2324:    }
     2582: 2325:  else if (p[-1] == '-')
branch  0 taken 0 (fallthrough)
branch  1 taken 2582
        -: 2326:    /* Kill the final space and dash.  */
    #####: 2327:    p -= 2;
        -: 2328:  /* Terminate the string.  */
     2643: 2329:  *p = '\0';
        -: 2330:
     2643: 2331:  v = define_variable ("MAKEFLAGS", 9,
call    0 returned 2643
        -: 2332:		       /* If there are switches, omit the leading dash
        -: 2333:			  unless it is a single long option with two
        -: 2334:			  leading dashes.  */
     2643: 2335:		       &flagstring[(flagstring[0] == '-'
     2582: 2336:				    && flagstring[1] != '-')
branch  0 taken 2582 (fallthrough)
branch  1 taken 0
     5225: 2337:				   ? 1 : 0],
branch  0 taken 2582 (fallthrough)
branch  1 taken 61
        -: 2338:		       /* This used to use o_env, but that lost when a
        -: 2339:			  makefile defined MAKEFLAGS.  Makefiles set
        -: 2340:			  MAKEFLAGS to add switches, but we still want
        -: 2341:			  to redefine its value with the full set of
        -: 2342:			  switches.  Of course, an override or command
        -: 2343:			  definition will still take precedence.  */
        -: 2344:		       o_file, 1);
     2643: 2345:  if (! all)
branch  0 taken 790 (fallthrough)
branch  1 taken 1853
        -: 2346:    /* The first time we are called, set MAKEFLAGS to always be exported.
        -: 2347:       We should not do this again on the second call, because that is
        -: 2348:       after reading makefiles which might have done `unexport MAKEFLAGS'. */
      790: 2349:    v->export = v_export;
     2643: 2350:}
        -: 2351:
        -: 2352:/* Print version information.  */
        -: 2353:
        -: 2354:static void
function print_version called 579 returned 100% blocks executed 83%
      579: 2355:print_version ()
        -: 2356:{
        -: 2357:  static int printed_version = 0;
        -: 2358:
      579: 2359:  char *precede = print_data_base_flag ? "# " : "";
branch  0 taken 385 (fallthrough)
branch  1 taken 194
        -: 2360:
      579: 2361:  if (printed_version)
branch  0 taken 1 (fallthrough)
branch  1 taken 578
        -: 2362:    /* Do it only once.  */
        1: 2363:    return;
        -: 2364:
      578: 2365:  printf ("%sGNU Make version %s", precede, version_string);
call    0 returned 578
     578*: 2366:  if (remote_description != 0 && *remote_description != '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 578
branch  2 never executed
branch  3 never executed
    #####: 2367:    printf ("-%s", remote_description);
call    0 never executed
        -: 2368:
      578: 2369:  printf (", by Richard Stallman and Roland McGrath.\n\
call    0 returned 578
        -: 2370:%sCopyright (C) 1988, 89, 90, 91, 92, 93, 94, 95, 96, 97\n\
        -: 2371:%s\tFree Software Foundation, Inc.\n\
        -: 2372:%sThis is free software; see the source for copying conditions.\n\
        -: 2373:%sThere is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A\n\
        -: 2374:%sPARTICULAR PURPOSE.\n\n\
        -: 2375:%sReport bugs to <bug-gnu-utils@prep.ai.mit.edu>.\n\n",
        -: 2376:	  precede, precede, precede, precede, precede, precede);
        -: 2377:
      578: 2378:  printed_version = 1;
        -: 2379:
        -: 2380:  /* Flush stdout so the user doesn't have to wait to see the
        -: 2381:     version information while things are thought about.  */
      578: 2382:  fflush (stdout);
call    0 returned 578
        -: 2383:}
        -: 2384:
        -: 2385:/* Print a bunch of information about this and that.  */
        -: 2386:
        -: 2387:static void
function print_data_base called 385 returned 100% blocks executed 100%
      385: 2388:print_data_base ()
        -: 2389:{
        -: 2390:  time_t when;
        -: 2391:
      385: 2392:  when = time ((time_t *) 0);
call    0 returned 385
      385: 2393:  printf ("\n# Make data base, printed on Sun Jan 01 2000 00:00:00");
call    0 returned 385
        -: 2394:
      385: 2395:  print_variable_data_base ();
call    0 returned 385
      385: 2396:  print_dir_data_base ();
call    0 returned 385
      385: 2397:  print_rule_data_base ();
call    0 returned 385
      385: 2398:  print_file_data_base ();
call    0 returned 385
      385: 2399:  print_vpath_data_base ();
call    0 returned 385
        -: 2400:
      385: 2401:  when = time ((time_t *) 0);
call    0 returned 385
      385: 2402:  printf ("\n# Finished Make data base on Sun Jan 01 2000 00:00:00");
call    0 returned 385
      385: 2403:}
        -: 2404:
        -: 2405:/* Exit with STATUS, cleaning up as necessary.  */
        -: 2406:
        -: 2407:void
function die called 793 returned 0% blocks executed 87%
      793: 2408:die (status)
        -: 2409:     int status;
        -: 2410:{
        -: 2411:  static char dying = 0;
        -: 2412:
      793: 2413:  if (!dying)
branch  0 taken 793 (fallthrough)
branch  1 taken 0
        -: 2414:    {
        -: 2415:      int err;
        -: 2416:
      793: 2417:      dying = 1;
        -: 2418:
        -: 2419:      /* Try to move back to the original directory.  This is essential on
        -: 2420:	 MS-DOS (where there is really only one process), and on Unix it
        -: 2421:	 puts core files in the original directory instead of the -C
        -: 2422:	 directory.  */
      793: 2423:      if (directory_before_chdir != 0)
branch  0 taken 793 (fallthrough)
branch  1 taken 0
      793: 2424:	chdir (directory_before_chdir);
call    0 returned 793
        -: 2425:
      793: 2426:      if (print_version_flag)
branch  0 taken 1 (fallthrough)
branch  1 taken 792
        1: 2427:	print_version ();
call    0 returned 1
        -: 2428:
        -: 2429:      /* Wait for children to die.  */
     793*: 2430:      for (err = status != 0; job_slots_used > 0; err = 0)
branch  0 taken 0
branch  1 taken 793 (fallthrough)
    #####: 2431:	reap_children (1, err);
call    0 never executed
        -: 2432:
        -: 2433:      /* Let the remote job module clean up its state.  */
      793: 2434:      remote_cleanup ();
call    0 returned 793
        -: 2435:
        -: 2436:      /* Remove the intermediate files.  */
      793: 2437:      remove_intermediates (0);
call    0 returned 793
        -: 2438:
      793: 2439:      if (print_data_base_flag)
branch  0 taken 385 (fallthrough)
branch  1 taken 408
      385: 2440:	print_data_base ();
call    0 returned 385
        -: 2441:
      793: 2442:      log_working_directory (0);
call    0 returned 793
        -: 2443:    }
        -: 2444:
      793: 2445:  exit (status);
        -: 2446:}
        -: 2447:
        -: 2448:/* Write a message indicating that we've just entered or
        -: 2449:   left (according to ENTERING) the current directory.  */
        -: 2450:
        -: 2451:void
function log_working_directory called 2956 returned 100% blocks executed 87%
     2956: 2452:log_working_directory (entering)
        -: 2453:     int entering;
        -: 2454:{
        -: 2455:  static int entered = 0;
     2956: 2456:  char *message = entering ? "Entering" : "Leaving";
branch  0 taken 2163 (fallthrough)
branch  1 taken 793
        -: 2457:
        -: 2458:  /* Print nothing without the flag.  Don't print the entering message
        -: 2459:     again if we already have.  Don't print the leaving message if we
        -: 2460:     haven't printed the entering message.  */
     2956: 2461:  if (! print_directory_flag || entering == entered)
branch  0 taken 1413 (fallthrough)
branch  1 taken 1543
branch  2 taken 641 (fallthrough)
branch  3 taken 772
     2184: 2462:    return;
        -: 2463:
      772: 2464:  entered = entering;
        -: 2465:
      772: 2466:  if (print_data_base_flag)
branch  0 taken 384 (fallthrough)
branch  1 taken 388
      384: 2467:    fputs ("# ", stdout);
call    0 returned 384
        -: 2468:
      772: 2469:  if (makelevel == 0)
branch  0 taken 772 (fallthrough)
branch  1 taken 0
      772: 2470:    printf ("%s: %s ", program, message);
call    0 returned 772
        -: 2471:  else
    #####: 2472:    printf ("%s[%u]: %s ", program, makelevel, message);
call    0 never executed
        -: 2473:
      772: 2474:  if (starting_directory == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 772
    #####: 2475:    puts ("an unknown directory");
call    0 never executed
        -: 2476:  else
      772: 2477:    printf ("directory `%s'\n", starting_directory);
call    0 returned 772
        -: 2478:}
        -: 2479:
        -: 2480:
        -: 2481:
        -: 2482:/*************************************************************
        -: 2483:  ============================================================
        -: 2484:  ************************************************************
        -: 2485:  ============================================================
        -: 2486:  ************************************************************
        -: 2487:                         commands.c
        -: 2488:  ************************************************************
        -: 2489:  ============================================================
        -: 2490:  ************************************************************
        -: 2491:  ============================================================
        -: 2492:  *************************************************************/
        -: 2493:
        -: 2494:/* Command processing for GNU Make.
        -: 2495:Copyright (C) 1988,89,91,92,93,94,95,96,97 Free Software Foundation, Inc.
        -: 2496:This file is part of GNU Make.
        -: 2497:
        -: 2498:GNU Make is free software; you can redistribute it and/or modify
        -: 2499:it under the terms of the GNU General Public License as published by
        -: 2500:the Free Software Foundation; either version 2, or (at your option)
        -: 2501:any later version.
        -: 2502:
        -: 2503:GNU Make is distributed in the hope that it will be useful,
        -: 2504:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 2505:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 2506:GNU General Public License for more details.
        -: 2507:
        -: 2508:You should have received a copy of the GNU General Public License
        -: 2509:along with GNU Make; see the file COPYING.  If not, write to
        -: 2510:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 2511:
        -: 2512:#include "make.h"
        -: 2513:/* #include "dep.h"  <- modification by J.Ruthruff, 7/27 */
        -: 2514:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -: 2515:/* #include "variable.h"  <- modification by J.Ruthruff, 7/27 */
        -: 2516:#include "job.h"
        -: 2517:/* #include "commands.h"  <- modification by J.Ruthruff, 7/27 */
        -: 2518:#undef stderr
        -: 2519:#define stderr stdout
        -: 2520:
        -: 2521:extern int remote_kill PARAMS ((int id, int sig));
        -: 2522:
        -: 2523:#ifndef	HAVE_UNISTD_H
        -: 2524:extern int getpid ();
        -: 2525:#endif
        -: 2526:
        -: 2527:/* Set FILE's automatic variables up.  */
        -: 2528:
        -: 2529:static void
function set_file_variables called 4 returned 100% blocks executed 78%
        4: 2530:set_file_variables (file)
        -: 2531:     register struct file *file;
        -: 2532:{
        -: 2533:  register char *p;
        -: 2534:  char *at, *percent, *star, *less;
        -: 2535:
        -: 2536:#ifndef	NO_ARCHIVES
        -: 2537:  /* If the target is an archive member `lib(member)',
        -: 2538:     then $@ is `lib' and $% is `member'.  */
        -: 2539:
        4: 2540:  if (ar_name (file->name))
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
        -: 2541:    {
        -: 2542:      unsigned int len;
    #####: 2543:      p = index (file->name, '(');
    #####: 2544:      at = (char *) alloca (p - file->name + 1);
    #####: 2545:      bcopy (file->name, at, p - file->name);
    #####: 2546:      at[p - file->name] = '\0';
    #####: 2547:      len = strlen (p + 1);
    #####: 2548:      percent = (char *) alloca (len);
    #####: 2549:      bcopy (p + 1, percent, len - 1);
    #####: 2550:      percent[len - 1] = '\0';
        -: 2551:    }
        -: 2552:  else
        -: 2553:#endif	/* NO_ARCHIVES.  */
        -: 2554:    {
        4: 2555:      at = file->name;
        4: 2556:      percent = "";
        -: 2557:    }
        -: 2558:
        -: 2559:  /* $* is the stem from an implicit or static pattern rule.  */
        4: 2560:  if (file->stem == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        -: 2561:    {
        -: 2562:      /* In Unix make, $* is set to the target name with
        -: 2563:	 any suffix in the .SUFFIXES list stripped off for
        -: 2564:	 explicit rules.  We store this in the `stem' member.  */
        -: 2565:      register struct dep *d;
        -: 2566:      char *name;
        -: 2567:      unsigned int len;
        -: 2568:
        -: 2569:#ifndef	NO_ARCHIVES
        2: 2570:      if (ar_name (file->name))
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -: 2571:	{
    #####: 2572:	  name = index (file->name, '(') + 1;
    #####: 2573:	  len = strlen (name) - 1;
        -: 2574:	}
        -: 2575:      else
        -: 2576:#endif
        -: 2577:	{
        2: 2578:	  name = file->name;
        2: 2579:	  len = strlen (name);
        -: 2580:	}
        -: 2581:
       64: 2582:      for (d = enter_file (".SUFFIXES")->deps; d != 0; d = d->next)
call    0 returned 2
branch  1 taken 62
branch  2 taken 2 (fallthrough)
        -: 2583:	{
      62*: 2584:	  unsigned int slen = strlen (dep_name (d));
branch  0 taken 62 (fallthrough)
branch  1 taken 0
      62*: 2585:	  if (len > slen && !strncmp (dep_name (d), name + (len - slen), slen))
branch  0 taken 54 (fallthrough)
branch  1 taken 8
branch  2 taken 54 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 54
        -: 2586:	    {
    #####: 2587:	      file->stem = savestring (name, len - slen);
call    0 never executed
    #####: 2588:	      break;
        -: 2589:	    }
        -: 2590:	}
        2: 2591:      if (d == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 2592:	file->stem = "";
        -: 2593:    }
        4: 2594:  star = file->stem;
        -: 2595:
        -: 2596:  /* $< is the first dependency.  */
       4*: 2597:  less = file->deps != 0 ? dep_name (file->deps) : "";
branch  0 taken 4 (fallthrough)
branch  1 taken 0
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        -: 2598:
        4: 2599:  if (file->cmds == default_file->cmds)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -: 2600:    /* This file got its commands from .DEFAULT.
        -: 2601:       In this case $< is the same as $@.  */
    #####: 2602:    less = at;
        -: 2603:
        -: 2604:#define	DEFINE_VARIABLE(name, len, value) \
        -: 2605:  (void) define_variable_for_file (name, len, value, o_automatic, 0, file)
        -: 2606:
        -: 2607:  /* Define the variables.  */
        -: 2608:
        4: 2609:  DEFINE_VARIABLE ("<", 1, less);
call    0 returned 4
        4: 2610:  DEFINE_VARIABLE ("*", 1, star);
call    0 returned 4
        4: 2611:  DEFINE_VARIABLE ("@", 1, at);
call    0 returned 4
        4: 2612:  DEFINE_VARIABLE ("%", 1, percent);
call    0 returned 4
        -: 2613:
        -: 2614:  /* Compute the values for $^, $+, and $?.  */
        -: 2615:
        -: 2616:  {
        -: 2617:    register unsigned int qmark_len, plus_len;
        -: 2618:    char *caret_value, *plus_value;
        -: 2619:    register char *cp;
        -: 2620:    char *qmark_value;
        -: 2621:    register char *qp;
        -: 2622:    register struct dep *d;
        -: 2623:    unsigned int len;
        -: 2624:
        -: 2625:    /* Compute first the value for $+, which is supposed to contain
        -: 2626:       duplicate dependencies as they were listed in the makefile.  */
        -: 2627:
        4: 2628:    plus_len = 0;
       16: 2629:    for (d = file->deps; d != 0; d = d->next)
branch  0 taken 12
branch  1 taken 4 (fallthrough)
      12*: 2630:      plus_len += strlen (dep_name (d)) + 1;
branch  0 taken 12 (fallthrough)
branch  1 taken 0
        -: 2631:
       4*: 2632:    len = plus_len == 0 ? 1 : plus_len;
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 2633:    cp = plus_value = (char *) alloca (len);
        -: 2634:
        4: 2635:    qmark_len = plus_len;	/* Will be this or less.  */
       16: 2636:    for (d = file->deps; d != 0; d = d->next)
branch  0 taken 12
branch  1 taken 4 (fallthrough)
        -: 2637:      {
      12*: 2638:	char *c = dep_name (d);
branch  0 taken 12 (fallthrough)
branch  1 taken 0
        -: 2639:
        -: 2640:#ifndef	NO_ARCHIVES
       12: 2641:	if (ar_name (c))
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
        -: 2642:	  {
    #####: 2643:	    c = index (c, '(') + 1;
    #####: 2644:	    len = strlen (c) - 1;
        -: 2645:	  }
        -: 2646:	else
        -: 2647:#endif
       12: 2648:	  len = strlen (c);
        -: 2649:
       12: 2650:	bcopy (c, cp, len);
       12: 2651:	cp += len;
        -: 2652:#if VMS
        -: 2653:        *cp++ = ',';
        -: 2654:#else
       12: 2655:	*cp++ = ' ';
        -: 2656:#endif
       12: 2657:	if (! d->changed)
branch  0 taken 5 (fallthrough)
branch  1 taken 7
        5: 2658:	  qmark_len -= len + 1;	/* Don't space in $? for this one.  */
        -: 2659:      }
        -: 2660:
        -: 2661:    /* Kill the last space and define the variable.  */
        -: 2662:
       4*: 2663:    cp[cp > plus_value ? -1 : 0] = '\0';
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 2664:    DEFINE_VARIABLE ("+", 1, plus_value);
call    0 returned 4
        -: 2665:
        -: 2666:    /* Make sure that no dependencies are repeated.  This does not
        -: 2667:       really matter for the purpose of updating targets, but it
        -: 2668:       might make some names be listed twice for $^ and $?.  */
        -: 2669:
        4: 2670:    uniquize_deps (file->deps);
call    0 returned 4
        -: 2671:
        -: 2672:    /* Compute the values for $^ and $?.  */
        -: 2673:
        4: 2674:    cp = caret_value = plus_value; /* Reuse the buffer; it's big enough.  */
       4*: 2675:    len = qmark_len == 0 ? 1 : qmark_len;
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 2676:    qp = qmark_value = (char *) alloca (len);
        -: 2677:
       16: 2678:    for (d = file->deps; d != 0; d = d->next)
branch  0 taken 12
branch  1 taken 4 (fallthrough)
        -: 2679:      {
      12*: 2680:	char *c = dep_name (d);
branch  0 taken 12 (fallthrough)
branch  1 taken 0
        -: 2681:
        -: 2682:#ifndef	NO_ARCHIVES
       12: 2683:	if (ar_name (c))
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
        -: 2684:	  {
    #####: 2685:	    c = index (c, '(') + 1;
    #####: 2686:	    len = strlen (c) - 1;
        -: 2687:	  }
        -: 2688:	else
        -: 2689:#endif
       12: 2690:	  len = strlen (c);
        -: 2691:
       12: 2692:	bcopy (c, cp, len);
       12: 2693:	cp += len;
        -: 2694:#if VMS
        -: 2695:	*cp++ = ',';
        -: 2696:#else
       12: 2697:	*cp++ = ' ';
        -: 2698:#endif
       12: 2699:	if (d->changed)
branch  0 taken 7 (fallthrough)
branch  1 taken 5
        -: 2700:	  {
        7: 2701:	    bcopy (c, qp, len);
        7: 2702:	    qp += len;
        -: 2703:#if VMS
        -: 2704:	    *qp++ = ',';
        -: 2705:#else
        7: 2706:	    *qp++ = ' ';
        -: 2707:#endif
        -: 2708:	  }
        -: 2709:      }
        -: 2710:
        -: 2711:    /* Kill the last spaces and define the variables.  */
        -: 2712:
       4*: 2713:    cp[cp > caret_value ? -1 : 0] = '\0';
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 2714:    DEFINE_VARIABLE ("^", 1, caret_value);
call    0 returned 4
        -: 2715:
       4*: 2716:    qp[qp > qmark_value ? -1 : 0] = '\0';
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 2717:    DEFINE_VARIABLE ("?", 1, qmark_value);
call    0 returned 4
        -: 2718:  }
        -: 2719:
        -: 2720:#undef	DEFINE_VARIABLE
        4: 2721:}
        -: 2722:
        -: 2723:/* Chop CMDS up into individual command lines if necessary.
        -: 2724:   Also set the `lines_flag' and `any_recurse' members.  */
        -: 2725:
        -: 2726:void
function chop_commands called 8 returned 100% blocks executed 73%
        8: 2727:chop_commands (cmds)
        -: 2728:     register struct commands *cmds;
        -: 2729:{
        8: 2730:  if (cmds != 0 && cmds->command_lines == 0)
branch  0 taken 8 (fallthrough)
branch  1 taken 0
branch  2 taken 4 (fallthrough)
branch  3 taken 4
        -: 2731:    {
        -: 2732:      /* Chop CMDS->commands up into lines in CMDS->command_lines.
        -: 2733:	 Also set the corresponding CMDS->lines_flags elements,
        -: 2734:	 and the CMDS->any_recurse flag.  */
        -: 2735:      register char *p;
        -: 2736:      unsigned int nlines, idx;
        -: 2737:      char **lines;
        -: 2738:
        4: 2739:      nlines = 5;
        4: 2740:      lines = (char **) xmalloc (5 * sizeof (char *));
call    0 returned 4
        4: 2741:      idx = 0;
        4: 2742:      p = cmds->commands;
        8: 2743:      while (*p != '\0')
branch  0 taken 4
branch  1 taken 4 (fallthrough)
        -: 2744:	{
        4: 2745:	  char *end = p;
        4: 2746:	find_end:;
        4: 2747:	  end = index (end, '\n');
        4: 2748:	  if (end == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 2749:	    end = p + strlen (p);
        4: 2750:	  else if (end > p && end[-1] == '\\')
branch  0 taken 4 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 4
        -: 2751:	    {
    #####: 2752:	      int backslash = 1;
        -: 2753:	      register char *b;
        -: 2754:#ifndef F_AA_4
    #####: 2755:	      for (b = end - 2; b >= p && *b == '\\'; --b)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2756:		backslash = !backslash;
        -: 2757:#else
        -: 2758:	      for (b = end - 2; b > p && *b == '\\'; --b)
        -: 2759:		backslash = !backslash;
        -: 2760:#endif
    #####: 2761:	      if (backslash)
branch  0 never executed
branch  1 never executed
        -: 2762:		{
    #####: 2763:		  ++end;
    #####: 2764:		  goto find_end;
        -: 2765:		}
        -: 2766:	    }
        -: 2767:
        4: 2768:	  if (idx == nlines)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -: 2769:	    {
    #####: 2770:	      nlines += 2;
    #####: 2771:	      lines = (char **) xrealloc ((char *) lines,
call    0 never executed
        -: 2772:					  nlines * sizeof (char *));
        -: 2773:	    }
        4: 2774:	  lines[idx++] = savestring (p, end - p);
call    0 returned 4
        4: 2775:	  p = end;
        4: 2776:	  if (*p != '\0')
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 2777:	    ++p;
        -: 2778:	}
        -: 2779:
        4: 2780:      if (idx != nlines)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -: 2781:	{
        4: 2782:	  nlines = idx;
        4: 2783:	  lines = (char **) xrealloc ((char *) lines,
call    0 returned 4
        -: 2784:				      nlines * sizeof (char *));
        -: 2785:	}
        -: 2786:
        4: 2787:      cmds->ncommand_lines = nlines;
        4: 2788:      cmds->command_lines = lines;
        -: 2789:
        4: 2790:      cmds->any_recurse = 0;
        4: 2791:      cmds->lines_flags = (char *) xmalloc (nlines);
call    0 returned 4
        8: 2792:      for (idx = 0; idx < nlines; ++idx)
branch  0 taken 4
branch  1 taken 4 (fallthrough)
        -: 2793:	{
        4: 2794:	  int flags = 0;
        -: 2795:
        -: 2796:#ifndef F_AA_1
        4: 2797:	  for (p = lines[idx];
        8: 2798:	       isblank (*p) || *p == '-' || *p == '@' || *p == '+';
branch  0 taken 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
branch  3 taken 4 (fallthrough)
branch  4 taken 0
branch  5 taken 4 (fallthrough)
branch  6 taken 0
branch  7 taken 4 (fallthrough)
        4: 2799:	       ++p)
        -: 2800:#else
        -: 2801:	  for (p = lines[idx];
        -: 2802:	       isblank (*p) || *p == '-' || *p == '@' || *p == '+';
        -: 2803:	       --p)
        -: 2804:#endif
        4: 2805:	    switch (*p)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 4
        -: 2806:	      {
    #####: 2807:	      case '+':
    #####: 2808:		flags |= COMMANDS_RECURSE;
    #####: 2809:		break;
    #####: 2810:	      case '@':
    #####: 2811:		flags |= COMMANDS_SILENT;
    #####: 2812:		break;
    #####: 2813:	      case '-':
    #####: 2814:		flags |= COMMANDS_NOERROR;
    #####: 2815:		break;
        -: 2816:	      }
        4: 2817:	  if (!(flags & COMMANDS_RECURSE))
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -: 2818:	    {
        4: 2819:	      unsigned int len = strlen (p);
        4: 2820:	      if (sindex (p, len, "$(MAKE)", 7) != 0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
        4: 2821:		  || sindex (p, len, "${MAKE}", 7) != 0)
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    #####: 2822:		flags |= COMMANDS_RECURSE;
        -: 2823:	    }
        -: 2824:
        4: 2825:	  cmds->lines_flags[idx] = flags;
        4: 2826:	  cmds->any_recurse |= flags & COMMANDS_RECURSE;
        -: 2827:	}
        -: 2828:    }
        8: 2829:}
        -: 2830:
        -: 2831:/* Execute the commands to remake FILE.  If they are currently executing,
        -: 2832:   return or have already finished executing, just return.  Otherwise,
        -: 2833:   fork off a child process to run the first command line in the sequence.  */
        -: 2834:
        -: 2835:void
function execute_file_commands called 4 returned 50% blocks executed 86%
        4: 2836:execute_file_commands (file)
        -: 2837:     struct file *file;
        -: 2838:{
        -: 2839:  register char *p;
        -: 2840:
        -: 2841:  /* Don't go through all the preparations if
        -: 2842:     the commands are nothing but whitespace.  */
        -: 2843:
        8: 2844:  for (p = file->cmds->commands; *p != '\0'; ++p)
branch  0 taken 8
branch  1 taken 0 (fallthrough)
        8: 2845:    if (!isspace (*p) && *p != '-' && *p != '@')
branch  0 taken 4 (fallthrough)
branch  1 taken 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0
branch  4 taken 4 (fallthrough)
branch  5 taken 0
        4: 2846:      break;
        4: 2847:  if (*p == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -: 2848:    {
        -: 2849:      /* We are all out of commands.
        -: 2850:	 If we have gotten this far, all the previous commands
        -: 2851:	 have run successfully, so we have winning update status.  */
    #####: 2852:      file->update_status = 0;
    #####: 2853:      notice_finished_file (file);
call    0 never executed
    #####: 2854:      return;
        -: 2855:    }
        -: 2856:
        -: 2857:  /* First set the automatic variables according to this file.  */
        -: 2858:
        4: 2859:  initialize_file_variables (file);
call    0 returned 4
        -: 2860:
        4: 2861:  set_file_variables (file);
call    0 returned 4
        -: 2862:
        -: 2863:  /* Start the commands running.  */
        4: 2864:  new_job (file);
call    0 returned 2
        -: 2865:}
        -: 2866:
        -: 2867:/* This is set while we are inside fatal_error_signal,
        -: 2868:   so things can avoid nonreentrant operations.  */
        -: 2869:
        -: 2870:int handling_fatal_signal = 0;
        -: 2871:
        -: 2872:/* Handle fatal signals.  */
        -: 2873:
        -: 2874:RETSIGTYPE
function fatal_error_signal called 0 returned 0% blocks executed 0%
    #####: 2875:fatal_error_signal (sig)
        -: 2876:     int sig;
        -: 2877:{
        -: 2878:#ifdef __MSDOS__
        -: 2879:  extern int dos_status, dos_command_running;
        -: 2880:
        -: 2881:  if (dos_command_running)
        -: 2882:    {
        -: 2883:      /* That was the child who got the signal, not us.  */
        -: 2884:      dos_status |= (sig << 8);
        -: 2885:      return;
        -: 2886:    }
        -: 2887:  remove_intermediates (1);
        -: 2888:  exit (1);
        -: 2889:#else /* not __MSDOS__ */
        -: 2890:#ifdef _AMIGA
        -: 2891:  remove_intermediates (1);
        -: 2892:  if (sig == SIGINT)
        -: 2893:     fputs ("*** Break.\n", stderr);
        -: 2894:
        -: 2895:  exit (10);
        -: 2896:#else /* not Amiga */
    #####: 2897:  handling_fatal_signal = 1;
        -: 2898:
        -: 2899:  /* Set the handling for this signal to the default.
        -: 2900:     It is blocked now while we run this handler.  */
    #####: 2901:  signal (sig, SIG_DFL);
call    0 never executed
        -: 2902:
        -: 2903:  /* A termination signal won't be sent to the entire
        -: 2904:     process group, but it means we want to kill the children.  */
        -: 2905:
    #####: 2906:  if (sig == SIGTERM)
branch  0 never executed
branch  1 never executed
        -: 2907:    {
        -: 2908:      register struct child *c;
    #####: 2909:      for (c = children; c != 0; c = c->next)
branch  0 never executed
branch  1 never executed
    #####: 2910:	if (!c->remote)
branch  0 never executed
branch  1 never executed
    #####: 2911:	  (void) kill (c->pid, SIGTERM);
call    0 never executed
        -: 2912:    }
        -: 2913:
        -: 2914:  /* If we got a signal that means the user
        -: 2915:     wanted to kill make, remove pending targets.  */
        -: 2916:
    #####: 2917:  if (sig == SIGTERM || sig == SIGINT
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2918:#ifdef SIGHUP
    #####: 2919:    || sig == SIGHUP
branch  0 never executed
branch  1 never executed
        -: 2920:#endif
        -: 2921:#ifdef SIGQUIT
    #####: 2922:    || sig == SIGQUIT
branch  0 never executed
branch  1 never executed
        -: 2923:#endif
        -: 2924:    )
    #####: 2925:    {
        -: 2926:      register struct child *c;
        -: 2927:
        -: 2928:      /* Remote children won't automatically get signals sent
        -: 2929:	 to the process group, so we must send them.  */
    #####: 2930:      for (c = children; c != 0; c = c->next)
branch  0 never executed
branch  1 never executed
    #####: 2931:	if (c->remote)
branch  0 never executed
branch  1 never executed
    #####: 2932:	  (void) remote_kill (c->pid, sig);
call    0 never executed
        -: 2933:
    #####: 2934:      for (c = children; c != 0; c = c->next)
branch  0 never executed
branch  1 never executed
    #####: 2935:	delete_child_targets (c);
call    0 never executed
        -: 2936:
        -: 2937:      /* Clean up the children.  We don't just use the call below because
        -: 2938:	 we don't want to print the "Waiting for children" message.  */
    #####: 2939:      while (job_slots_used > 0)
branch  0 never executed
branch  1 never executed
    #####: 2940:	reap_children (1, 0);
call    0 never executed
        -: 2941:    }
        -: 2942:  else
        -: 2943:    /* Wait for our children to die.  */
    #####: 2944:    while (job_slots_used > 0)
branch  0 never executed
branch  1 never executed
    #####: 2945:      reap_children (1, 1);
call    0 never executed
        -: 2946:
        -: 2947:  /* Delete any non-precious intermediate files that were made.  */
        -: 2948:
    #####: 2949:  remove_intermediates (1);
call    0 never executed
        -: 2950:
        -: 2951:#ifdef SIGQUIT
    #####: 2952:  if (sig == SIGQUIT)
branch  0 never executed
branch  1 never executed
        -: 2953:    /* We don't want to send ourselves SIGQUIT, because it will
        -: 2954:       cause a core dump.  Just exit instead.  */
    #####: 2955:    exit (EXIT_FAILURE);
call    0 never executed
        -: 2956:#endif
        -: 2957:
        -: 2958:  /* Signal the same code; this time it will really be fatal.  The signal
        -: 2959:     will be unblocked when we return and arrive then to kill us.  */
    #####: 2960:  if (kill (getpid (), sig) < 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2961:    pfatal_with_name ("kill");
call    0 never executed
        -: 2962:#endif /* not Amiga */
        -: 2963:#endif /* not __MSDOS__  */
    #####: 2964:}
        -: 2965:
        -: 2966:/* Delete FILE unless it's precious or not actually a file (phony),
        -: 2967:   and it has changed on disk since we last stat'd it.  */
        -: 2968:
        -: 2969:static void
function delete_target called 0 returned 0% blocks executed 0%
    #####: 2970:delete_target (file, on_behalf_of)
        -: 2971:     struct file *file;
        -: 2972:     char *on_behalf_of;
        -: 2973:{
        -: 2974:  struct stat st;
        -: 2975:
    #####: 2976:  if (file->precious || file->phony)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2977:    return;
        -: 2978:
        -: 2979:#ifndef NO_ARCHIVES
    #####: 2980:  if (ar_name (file->name))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2981:    {
    #####: 2982:      if (ar_member_date (file->name) != file->last_mtime)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2983:	{
    #####: 2984:	  if (on_behalf_of)
branch  0 never executed
branch  1 never executed
    #####: 2985:	    error ("*** [%s] Archive member `%s' may be bogus; not deleted",
call    0 never executed
        -: 2986:		   on_behalf_of, file->name);
        -: 2987:	  else
    #####: 2988:	    error ("*** Archive member `%s' may be bogus; not deleted",
call    0 never executed
        -: 2989:		   file->name);
        -: 2990:	}
    #####: 2991:      return;
        -: 2992:    }
        -: 2993:#endif
        -: 2994:
    #####: 2995:  if (stat (file->name, &st) == 0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2996:      && S_ISREG (st.st_mode)
branch  0 never executed
branch  1 never executed
    #####: 2997:      && (time_t) st.st_mtime != file->last_mtime)
branch  0 never executed
branch  1 never executed
        -: 2998:    {
    #####: 2999:      if (on_behalf_of)
branch  0 never executed
branch  1 never executed
    #####: 3000:	error ("*** [%s] Deleting file `%s'", on_behalf_of, file->name);
call    0 never executed
        -: 3001:      else
    #####: 3002:	error ("*** Deleting file `%s'", file->name);
call    0 never executed
    #####: 3003:      if (unlink (file->name) < 0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3004:	  && errno != ENOENT)	/* It disappeared; so what.  */
branch  0 never executed
branch  1 never executed
    #####: 3005:	perror_with_name ("unlink: ", file->name);
call    0 never executed
        -: 3006:    }
        -: 3007:}
        -: 3008:
        -: 3009:
        -: 3010:/* Delete all non-precious targets of CHILD unless they were already deleted.
        -: 3011:   Set the flag in CHILD to say they've been deleted.  */
        -: 3012:
        -: 3013:void
function delete_child_targets called 0 returned 0% blocks executed 0%
    #####: 3014:delete_child_targets (child)
        -: 3015:     struct child *child;
        -: 3016:{
        -: 3017:  struct dep *d;
        -: 3018:
    #####: 3019:  if (child->deleted)
branch  0 never executed
branch  1 never executed
    #####: 3020:    return;
        -: 3021:
        -: 3022:  /* Delete the target file if it changed.  */
    #####: 3023:  delete_target (child->file, (char *) 0);
call    0 never executed
        -: 3024:
        -: 3025:  /* Also remove any non-precious targets listed in the `also_make' member.  */
    #####: 3026:  for (d = child->file->also_make; d != 0; d = d->next)
branch  0 never executed
branch  1 never executed
    #####: 3027:    delete_target (d->file, child->file->name);
call    0 never executed
        -: 3028:
    #####: 3029:  child->deleted = 1;
        -: 3030:}
        -: 3031:
        -: 3032:/* Print out the commands in CMDS.  */
        -: 3033:
        -: 3034:void
function print_commands called 36190 returned 100% blocks executed 93%
    36190: 3035:print_commands (cmds)
        -: 3036:     register struct commands *cmds;
        -: 3037:{
        -: 3038:  register char *s;
        -: 3039:
    36190: 3040:  fputs ("#  commands to execute", stdout);
call    0 returned 36190
        -: 3041:
    36190: 3042:  if (cmds->filename == 0)
branch  0 taken 36190 (fallthrough)
branch  1 taken 0
    36190: 3043:    puts (" (built-in):");
call    0 returned 36190
        -: 3044:  else
    #####: 3045:    printf (" (from `%s', line %u):\n", cmds->filename, cmds->lineno);
call    0 never executed
        -: 3046:
    36190: 3047:  s = cmds->commands;
    79695: 3048:  while (*s != '\0')
branch  0 taken 43505
branch  1 taken 36190 (fallthrough)
        -: 3049:    {
        -: 3050:      char *end;
        -: 3051:
    57365: 3052:      while (isspace (*s))
branch  0 taken 13860
branch  1 taken 43505 (fallthrough)
    13860: 3053:	++s;
        -: 3054:
    43505: 3055:      end = index (s, '\n');
    43505: 3056:      if (end == 0)
branch  0 taken 36190 (fallthrough)
branch  1 taken 7315
    36190: 3057:	end = s + strlen (s);
        -: 3058:
    43505: 3059:      printf ("\t%.*s\n", (int) (end - s), s);
call    0 returned 43505
        -: 3060:
    43505: 3061:      s = end;
        -: 3062:    }
    36190: 3063:}
        -: 3064:
        -: 3065:
        -: 3066:
        -: 3067:
        -: 3068:/*************************************************************
        -: 3069:  ============================================================
        -: 3070:  ************************************************************
        -: 3071:  ============================================================
        -: 3072:  ************************************************************
        -: 3073:                         job.c
        -: 3074:  ************************************************************
        -: 3075:  ============================================================
        -: 3076:  ************************************************************
        -: 3077:  ============================================================
        -: 3078:  *************************************************************/
        -: 3079:
        -: 3080:/* Job execution and handling for GNU Make.
        -: 3081:Copyright (C) 1988,89,90,91,92,93,94,95,96,97 Free Software Foundation, Inc.
        -: 3082:This file is part of GNU Make.
        -: 3083:
        -: 3084:GNU Make is free software; you can redistribute it and/or modify
        -: 3085:it under the terms of the GNU General Public License as published by
        -: 3086:the Free Software Foundation; either version 2, or (at your option)
        -: 3087:any later version.
        -: 3088:
        -: 3089:GNU Make is distributed in the hope that it will be useful,
        -: 3090:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 3091:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 3092:GNU General Public License for more details.
        -: 3093:
        -: 3094:You should have received a copy of the GNU General Public License
        -: 3095:along with GNU Make; see the file COPYING.  If not, write to
        -: 3096:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 3097:
        -: 3098:#include "make.h"
        -: 3099:#include "job.h"
        -: 3100:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -: 3101:/* #include "commands.h"  <- modification by J.Ruthruff, 7/27 */
        -: 3102:/* #include "variable.h"  <- modification by J.Ruthruff, 7/27 */
        -: 3103:#include <assert.h>
        -: 3104:#undef stderr
        -: 3105:#define stderr stdout
        -: 3106:
        -: 3107:/* Default shell to use.  */
        -: 3108:#ifdef WINDOWS32
        -: 3109:char *default_shell = "sh.exe";
        -: 3110:int no_default_sh_exe = 1;
        -: 3111:#else  /* WINDOWS32 */
        -: 3112:#ifdef _AMIGA
        -: 3113:char default_shell[] = "";
        -: 3114:extern int MyExecute (char **);
        -: 3115:#else
        -: 3116:#ifdef __MSDOS__
        -: 3117:/* The default shell is a pointer so we can change it if Makefile
        -: 3118:   says so.  It is without an explicit path so we get a chance
        -: 3119:   to search the $PATH for it (since MSDOS doesn't have standard
        -: 3120:   directories we could trust).  */
        -: 3121:char *default_shell = "command.com";
        -: 3122:#else  /* __MSDOS__ */
        -: 3123:char default_shell[] = "/bin/sh";
        -: 3124:#endif /* __MSDOS__ */
        -: 3125:#endif /* _AMIGA */
        -: 3126:#endif /* WINDOWS32 */
        -: 3127:
        -: 3128:#ifdef __MSDOS__
        -: 3129:#include <process.h>
        -: 3130:#undef stderr
        -: 3131:#define stderr stdout
        -: 3132:static int execute_by_shell;
        -: 3133:static int dos_pid = 123;
        -: 3134:int dos_status;
        -: 3135:int dos_command_running;
        -: 3136:#endif /* __MSDOS__ */
        -: 3137:
        -: 3138:#ifdef _AMIGA
        -: 3139:#include <proto/dos.h>
        -: 3140:#undef stderr
        -: 3141:#define stderr stdout
        -: 3142:static int amiga_pid = 123;
        -: 3143:static int amiga_status;
        -: 3144:static char amiga_bname[32];
        -: 3145:static int amiga_batch_file;
        -: 3146:#endif /* Amiga.  */
        -: 3147:
        -: 3148:#ifdef VMS
        -: 3149:#include <time.h>
        -: 3150:#include <processes.h>
        -: 3151:#include <starlet.h>
        -: 3152:#include <lib$routines.h>
        -: 3153:#undef stderr
        -: 3154:#define stderr stdout
        -: 3155:#endif
        -: 3156:
        -: 3157:#ifdef WINDOWS32
        -: 3158:#include <windows.h>
        -: 3159:#include <io.h>
        -: 3160:#include <process.h>
        -: 3161:#include "sub_proc.h"
        -: 3162:#include "w32err.h"
        -: 3163:#include "pathstuff.h"
        -: 3164:#undef stderr
        -: 3165:#define stderr stdout
        -: 3166:
        -: 3167:/* this stuff used if no sh.exe is around */
        -: 3168:static char *dos_bname;
        -: 3169:static char *dos_bename;
        -: 3170:static int dos_batch_file;
        -: 3171:#endif /* WINDOWS32 */
        -: 3172:
        -: 3173:#ifdef HAVE_FCNTL_H
        -: 3174:#include <fcntl.h>
        -: 3175:#undef stderr
        -: 3176:#define stderr stdout
        -: 3177:#else
        -: 3178:#include <sys/file.h>
        -: 3179:#undef stderr
        -: 3180:#define stderr stdout
        -: 3181:#endif
        -: 3182:
        -: 3183:#if defined (HAVE_SYS_WAIT_H) || defined (HAVE_UNION_WAIT)
        -: 3184:#include <sys/wait.h>
        -: 3185:#undef stderr
        -: 3186:#define stderr stdout
        -: 3187:#endif
        -: 3188:
        -: 3189:#ifdef	HAVE_WAITPID
        -: 3190:#define	WAIT_NOHANG(status)	waitpid (-1, (status), WNOHANG)
        -: 3191:#else	/* Don't have waitpid.  */
        -: 3192:#ifdef	HAVE_WAIT3
        -: 3193:#ifndef	wait3
        -: 3194:extern int wait3 ();
        -: 3195:#endif
        -: 3196:#define	WAIT_NOHANG(status)	wait3 ((status), WNOHANG, (struct rusage *) 0)
        -: 3197:#endif	/* Have wait3.  */
        -: 3198:#endif	/* Have waitpid.  */
        -: 3199:
        -: 3200:#if	!defined (wait) && !defined (POSIX)
        -: 3201:extern int wait ();
        -: 3202:#endif
        -: 3203:
        -: 3204:#ifndef	HAVE_UNION_WAIT
        -: 3205:
        -: 3206:#define	WAIT_T int
        -: 3207:
        -: 3208:#ifndef	WTERMSIG
        -: 3209:#define WTERMSIG(x) ((x) & 0x7f)
        -: 3210:#endif
        -: 3211:#ifndef	WCOREDUMP
        -: 3212:#define WCOREDUMP(x) ((x) & 0x80)
        -: 3213:#endif
        -: 3214:#ifndef	WEXITSTATUS
        -: 3215:#define WEXITSTATUS(x) (((x) >> 8) & 0xff)
        -: 3216:#endif
        -: 3217:#ifndef	WIFSIGNALED
        -: 3218:#define WIFSIGNALED(x) (WTERMSIG (x) != 0)
        -: 3219:#endif
        -: 3220:#ifndef	WIFEXITED
        -: 3221:#define WIFEXITED(x) (WTERMSIG (x) == 0)
        -: 3222:#endif
        -: 3223:
        -: 3224:#else	/* Have `union wait'.  */
        -: 3225:
        -: 3226:#define WAIT_T union wait
        -: 3227:#ifndef	WTERMSIG
        -: 3228:#define WTERMSIG(x)	((x).w_termsig)
        -: 3229:#endif
        -: 3230:#ifndef	WCOREDUMP
        -: 3231:#define WCOREDUMP(x)	((x).w_coredump)
        -: 3232:#endif
        -: 3233:#ifndef WEXITSTATUS
        -: 3234:#define WEXITSTATUS(x)	((x).w_retcode)
        -: 3235:#endif
        -: 3236:#ifndef	WIFSIGNALED
        -: 3237:#define	WIFSIGNALED(x)	(WTERMSIG(x) != 0)
        -: 3238:#endif
        -: 3239:#ifndef	WIFEXITED
        -: 3240:#define	WIFEXITED(x)	(WTERMSIG(x) == 0)
        -: 3241:#endif
        -: 3242:
        -: 3243:#endif	/* Don't have `union wait'.  */
        -: 3244:
        -: 3245:#ifdef VMS
        -: 3246:static int vms_jobsefnmask=0;
        -: 3247:#endif /* !VMS */
        -: 3248:
        -: 3249:#ifndef	HAVE_UNISTD_H
        -: 3250:extern int dup2 ();
        -: 3251:extern int execve ();
        -: 3252:extern void _exit ();
        -: 3253:#ifndef VMS
        -: 3254:extern int geteuid ();
        -: 3255:extern int getegid ();
        -: 3256:extern int setgid ();
        -: 3257:extern int getgid ();
        -: 3258:#endif
        -: 3259:#endif
        -: 3260:
        -: 3261:extern char *allocated_variable_expand_for_file PARAMS ((char *line, struct file *file));
        -: 3262:
        -: 3263:extern int getloadavg PARAMS ((double loadavg[], int nelem));
        -: 3264:extern int start_remote_job PARAMS ((char **argv, char **envp, int stdin_fd,
        -: 3265:		int *is_remote, int *id_ptr, int *used_stdin));
        -: 3266:extern int start_remote_job_p PARAMS ((void));
        -: 3267:extern int remote_status PARAMS ((int *exit_code_ptr, int *signal_ptr,
        -: 3268:		int *coredump_ptr, int block));
        -: 3269:
        -: 3270:RETSIGTYPE child_handler PARAMS ((int));
        -: 3271:static void free_child PARAMS ((struct child *));
        -: 3272:static void start_job_command PARAMS ((struct child *child));
        -: 3273:static int load_too_high PARAMS ((void));
        -: 3274:static int job_next_command PARAMS ((struct child *));
        -: 3275:static int start_waiting_job PARAMS ((struct child *));
        -: 3276:#ifdef VMS
        -: 3277:static void vmsWaitForChildren PARAMS ((int *));
        -: 3278:#endif
        -: 3279:
        -: 3280:/* Chain of all live (or recently deceased) children.  */
        -: 3281:
        -: 3282:struct child *children = 0;
        -: 3283:
        -: 3284:/* Number of children currently running.  */
        -: 3285:
        -: 3286:unsigned int job_slots_used = 0;
        -: 3287:
        -: 3288:/* Nonzero if the `good' standard input is in use.  */
        -: 3289:
        -: 3290:static int good_stdin_used = 0;
        -: 3291:
        -: 3292:/* Chain of children waiting to run until the load average goes down.  */
        -: 3293:
        -: 3294:static struct child *waiting_jobs = 0;
        -: 3295:
        -: 3296:/* Non-zero if we use a *real* shell (always so on Unix).  */
        -: 3297:
        -: 3298:#ifndef F_JR_5  /* seeded fault #5; J.Ruthruff */
        -: 3299:int unixy_shell = 1;
        -: 3300:#else
        -: 3301:int unixy_shell;
        -: 3302:#endif
        -: 3303:
        -: 3304:#ifdef WINDOWS32
        -: 3305:/*
        -: 3306: * The macro which references this function is defined in make.h.
        -: 3307: */
        -: 3308:int w32_kill(int pid, int sig)
        -: 3309:{
        -: 3310:       return ((process_kill(pid, sig) == TRUE) ? 0 : -1);
        -: 3311:}
        -: 3312:#endif /* WINDOWS32 */
        -: 3313:
        -: 3314:/* Write an error message describing the exit status given in
        -: 3315:   EXIT_CODE, EXIT_SIG, and COREDUMP, for the target TARGET_NAME.
        -: 3316:   Append "(ignored)" if IGNORED is nonzero.  */
        -: 3317:
        -: 3318:static void
function child_error called 2 returned 100% blocks executed 43%
        2: 3319:child_error (target_name, exit_code, exit_sig, coredump, ignored)
        -: 3320:     char *target_name;
        -: 3321:     int exit_code, exit_sig, coredump;
        -: 3322:     int ignored;
        -: 3323:{
       2*: 3324:  if (ignored && silent_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
branch  2 never executed
branch  3 never executed
    #####: 3325:    return;
        -: 3326:
        -: 3327:#ifdef VMS
        -: 3328:  if (!(exit_code & 1))
        -: 3329:      error("*** [%s] Error 0x%x%s", target_name, exit_code, ((ignored)? " (ignored)" : ""));
        -: 3330:#else
        2: 3331:  if (exit_sig == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
       2*: 3332:    error (ignored ? "[%s] Error %d (ignored)" :
branch  0 taken 0 (fallthrough)
branch  1 taken 2
call    2 returned 2
        -: 3333:	   "*** [%s] Error %d",
        -: 3334:	   target_name, exit_code);
        -: 3335:  else
    #####: 3336:    error ("*** [%s] %s%s",
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -: 3337:	   target_name, strsignal (exit_sig),
        -: 3338:	   coredump ? " (core dumped)" : "");
        -: 3339:#endif /* VMS */
        -: 3340:}
        -: 3341:
        -: 3342:static unsigned int dead_children = 0;
        -: 3343:
        -: 3344:#ifdef VMS
        -: 3345:/* Wait for nchildren children to terminate */
        -: 3346:static void
        -: 3347:vmsWaitForChildren(int *status)
        -: 3348:{
        -: 3349:  while (1)
        -: 3350:    {
        -: 3351:      if (!vms_jobsefnmask)
        -: 3352:	{
        -: 3353:	  *status = 0;
        -: 3354:	  return;
        -: 3355:	}
        -: 3356:
        -: 3357:      *status = sys$wflor (32, vms_jobsefnmask);
        -: 3358:    }
        -: 3359:  return;
        -: 3360:}
        -: 3361:#endif
        -: 3362:
        -: 3363:
        -: 3364:/* Notice that a child died.
        -: 3365:   reap_children should be called when convenient.  */
        -: 3366:RETSIGTYPE
function child_handler called 3 returned 100% blocks executed 67%
        3: 3367:child_handler (sig)
        -: 3368:     int sig;
        -: 3369:{
        3: 3370:  ++dead_children;
        -: 3371:
        3: 3372:  if (debug_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 3373:    printf ("Got a SIGCHLD; %d unreaped children.\n", dead_children);
call    0 never executed
        3: 3374:}
        -: 3375:
        -: 3376:extern int shell_function_pid, shell_function_completed;
        -: 3377:
        -: 3378:/* Reap dead children, storing the returned status and the new command
        -: 3379:   state (`cs_finished') in the `file' member of the `struct child' for the
        -: 3380:   dead child, and removing the child from the chain.  If BLOCK nonzero,
        -: 3381:   reap at least one child, waiting for it to die if necessary.  If ERR is
        -: 3382:   nonzero, print an error message first.  */
        -: 3383:
        -: 3384:void
function reap_children called 813 returned 100% blocks executed 52%
      813: 3385:reap_children (block, err)
        -: 3386:     int block, err;
        -: 3387:{
        -: 3388:  WAIT_T status;
        -: 3389:
      814: 3390:  while ((children != 0 || shell_function_pid != 0) &&
branch  0 taken 811 (fallthrough)
branch  1 taken 3
branch  2 taken 0 (fallthrough)
branch  3 taken 811
branch  4 taken 3
branch  5 taken 0 (fallthrough)
    #####: 3391:	 (block || dead_children > 0))
branch  0 never executed
branch  1 never executed
        -: 3392:    {
        3: 3393:      int remote = 0;
        -: 3394:      register int pid;
        -: 3395:      int exit_code, exit_sig, coredump;
        -: 3396:      register struct child *lastc, *c;
        -: 3397:      int child_failed;
        -: 3398:      int any_remote, any_local;
        -: 3399:
       3*: 3400:      if (err && dead_children == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
branch  2 never executed
branch  3 never executed
        -: 3401:	{
        -: 3402:	  /* We might block for a while, so let the user know why.  */
    #####: 3403:	  fflush (stdout);
call    0 never executed
    #####: 3404:	  error ("*** Waiting for unfinished jobs....");
call    0 never executed
        -: 3405:	}
        -: 3406:
        -: 3407:      /* We have one less dead child to reap.
        -: 3408:	 The test and decrement are not atomic; if it is compiled into:
        -: 3409:	 	register = dead_children - 1;
        -: 3410:		dead_children = register;
        -: 3411:	 a SIGCHLD could come between the two instructions.
        -: 3412:	 child_handler increments dead_children.
        -: 3413:	 The second instruction here would lose that increment.  But the
        -: 3414:	 only effect of dead_children being wrong is that we might wait
        -: 3415:	 longer than necessary to reap a child, and lose some parallelism;
        -: 3416:	 and we might print the "Waiting for unfinished jobs" message above
        -: 3417:	 when not necessary.  */
        -: 3418:
        3: 3419:      if (dead_children > 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 3420:	--dead_children;
        -: 3421:
        3: 3422:      any_remote = 0;
        3: 3423:      any_local = shell_function_pid != 0;
        6: 3424:      for (c = children; c != 0; c = c->next)
branch  0 taken 3
branch  1 taken 3 (fallthrough)
        -: 3425:	{
        3: 3426:	  any_remote |= c->remote;
        3: 3427:	  any_local |= ! c->remote;
        3: 3428:	  if (debug_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 3429:	    printf ("Live child 0x%08lx PID %d%s\n",
call    0 never executed
        -: 3430:		    (unsigned long int) c,
    #####: 3431:		    c->pid, c->remote ? " (remote)" : "");
branch  0 never executed
branch  1 never executed
        -: 3432:#ifdef VMS
        -: 3433:	  break;
        -: 3434:#endif
        -: 3435:	}
        -: 3436:
        -: 3437:      /* First, check for remote children.  */
        3: 3438:      if (any_remote)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 3439:	pid = remote_status (&exit_code, &exit_sig, &coredump, 0);
call    0 never executed
        -: 3440:      else
        3: 3441:	pid = 0;
        -: 3442:
        3: 3443:      if (pid < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -: 3444:	{
    #####: 3445:	remote_status_lose:
        -: 3446:#ifdef	EINTR
    #####: 3447:	  if (errno == EINTR)
branch  0 never executed
branch  1 never executed
    #####: 3448:	    continue;
        -: 3449:#endif
    #####: 3450:	  pfatal_with_name ("remote_status");
call    0 never executed
        -: 3451:	}
        3: 3452:      else if (pid == 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 3453:	{
        -: 3454:#if !defined(__MSDOS__) && !defined(_AMIGA) && !defined(WINDOWS32)
        -: 3455:	  /* No remote children.  Check for local children.  */
        -: 3456:
        3: 3457:	  if (any_local)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 3458:	    {
        -: 3459:#ifdef VMS
        -: 3460:	      vmsWaitForChildren (&status);
        -: 3461:	      pid = c->pid;
        -: 3462:#else
        -: 3463:#ifdef WAIT_NOHANG
        3: 3464:	      if (!block)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 3465:		pid = WAIT_NOHANG (&status);
call    0 never executed
        -: 3466:	      else
        -: 3467:#endif
        3: 3468:		pid = wait (&status);
call    0 returned 3
        -: 3469:#endif /* !VMS */
        -: 3470:	    }
        -: 3471:	  else
    #####: 3472:	    pid = 0;
        -: 3473:
        3: 3474:	  if (pid < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -: 3475:	    {
        -: 3476:#ifdef EINTR
    #####: 3477:	      if (errno == EINTR)
branch  0 never executed
branch  1 never executed
    #####: 3478:		continue;
        -: 3479:#endif
    #####: 3480:	      pfatal_with_name ("wait");
call    0 never executed
        -: 3481:	    }
        3: 3482:	  else if (pid == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -: 3483:	    {
        -: 3484:	      /* No local children.  */
    #####: 3485:	      if (block && any_remote)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3486:		{
        -: 3487:		  /* Now try a blocking wait for a remote child.  */
    #####: 3488:		  pid = remote_status (&exit_code, &exit_sig, &coredump, 1);
call    0 never executed
    #####: 3489:		  if (pid < 0)
branch  0 never executed
branch  1 never executed
    #####: 3490:		    goto remote_status_lose;
    #####: 3491:		  else if (pid == 0)
branch  0 never executed
branch  1 never executed
        -: 3492:		    /* No remote children either.  Finally give up.  */
    #####: 3493:		    break;
        -: 3494:		  else
        -: 3495:		    /* We got a remote child.  */
    #####: 3496:		    remote = 1;
        -: 3497:		}
        -: 3498:	      else
        -: 3499:		break;
        -: 3500:	    }
        -: 3501:	  else
        -: 3502:	    {
        -: 3503:	      /* Chop the status word up.  */
        3: 3504:	      exit_code = WEXITSTATUS (status);
       3*: 3505:	      exit_sig = WIFSIGNALED (status) ? WTERMSIG (status) : 0;
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        3: 3506:	      coredump = WCOREDUMP (status);
        -: 3507:	    }
        -: 3508:#else	/* __MSDOS__, Amiga, WINDOWS32.  */
        -: 3509:#ifdef __MSDOS__
        -: 3510:	  /* Life is very different on MSDOS.  */
        -: 3511:	  pid = dos_pid - 1;
        -: 3512:	  status = dos_status;
        -: 3513:	  exit_code = WEXITSTATUS (status);
        -: 3514:	  if (exit_code == 0xff)
        -: 3515:	    exit_code = -1;
        -: 3516:	  exit_sig = WIFSIGNALED (status) ? WTERMSIG (status) : 0;
        -: 3517:	  coredump = 0;
        -: 3518:#endif /* __MSDOS__ */
        -: 3519:#ifdef _AMIGA
        -: 3520:	  /* Same on Amiga */
        -: 3521:	  pid = amiga_pid - 1;
        -: 3522:	  status = amiga_status;
        -: 3523:	  exit_code = amiga_status;
        -: 3524:	  exit_sig = 0;
        -: 3525:	  coredump = 0;
        -: 3526:#endif /* _AMIGA */
        -: 3527:#ifdef WINDOWS32
        -: 3528:         {
        -: 3529:           HANDLE hPID;
        -: 3530:           int err;
        -: 3531:
        -: 3532:           /* wait for anything to finish */
        -: 3533:           if (hPID = process_wait_for_any()) {
        -: 3534:
        -: 3535:             /* was an error found on this process? */
        -: 3536:             err = process_last_err(hPID);
        -: 3537:
        -: 3538:             /* get exit data */
        -: 3539:             exit_code = process_exit_code(hPID);
        -: 3540:
        -: 3541:             if (err)
        -: 3542:               fprintf(stderr, "make (e=%d): %s",
        -: 3543:                       exit_code, map_windows32_error_to_string(exit_code));
        -: 3544:
        -: 3545:             exit_sig = process_signal(hPID);
        -: 3546:
        -: 3547:             /* cleanup process */
        -: 3548:             process_cleanup(hPID);
        -: 3549:
        -: 3550:             if (dos_batch_file) {
        -: 3551:               remove (dos_bname);
        -: 3552:               remove (dos_bename);
        -: 3553:               dos_batch_file = 0;
        -: 3554:             }
        -: 3555:
        -: 3556:             coredump = 0;
        -: 3557:           }
        -: 3558:           pid = (int) hPID;
        -: 3559:         }
        -: 3560:#endif /* WINDOWS32 */
        -: 3561:#endif	/* Not __MSDOS__ */
        -: 3562:	}
        -: 3563:      else
        -: 3564:	/* We got a remote child.  */
    #####: 3565:	remote = 1;
        -: 3566:
        -: 3567:      /* Check if this is the child of the `shell' function.  */
        3: 3568:      if (!remote && pid == shell_function_pid)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 3
        -: 3569:	{
        -: 3570:	  /* It is.  Leave an indicator for the `shell' function.  */
    #####: 3571:	  if (exit_sig == 0 && exit_code == 127)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3572:	    shell_function_completed = -1;
        -: 3573:	  else
    #####: 3574:	    shell_function_completed = 1;
    #####: 3575:	  break;
        -: 3576:	}
        -: 3577:
        3: 3578:      child_failed = exit_sig != 0 || exit_code != 0;
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        -: 3579:
        -: 3580:      /* Search for a child matching the deceased one.  */
        3: 3581:      lastc = 0;
       3*: 3582:      for (c = children; c != 0; lastc = c, c = c->next)
branch  0 taken 3
branch  1 taken 0 (fallthrough)
        3: 3583:	if (c->remote == remote && c->pid == pid)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3: 3584:	  break;
        -: 3585:
        3: 3586:      if (c == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -: 3587:	{
        -: 3588:	  /* An unknown child died.  */
        -: 3589:	  char buf[100];
    #####: 3590:	  sprintf (buf, "Unknown%s job %d", remote ? " remote" : "", pid);
branch  0 never executed
branch  1 never executed
    #####: 3591:	  if (child_failed)
branch  0 never executed
branch  1 never executed
    #####: 3592:	    child_error (buf, exit_code, exit_sig, coredump,
call    0 never executed
        -: 3593:			 ignore_errors_flag);
        -: 3594:	  else
    #####: 3595:	    error ("%s finished.", buf);
call    0 never executed
        -: 3596:	}
        -: 3597:      else
        -: 3598:	{
        3: 3599:	  if (debug_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 3600:	    printf ("Reaping %s child 0x%08lx PID %d%s\n",
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 3601:		    child_failed ? "losing" : "winning",
        -: 3602:		    (unsigned long int) c,
    #####: 3603:		    c->pid, c->remote ? " (remote)" : "");
branch  0 never executed
branch  1 never executed
        -: 3604:
        -: 3605:	  /* If this child had the good stdin, say it is now free.  */
        3: 3606:	  if (c->good_stdin)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3607:	    good_stdin_used = 0;
        -: 3608:
        3: 3609:	  if (child_failed && !c->noerror && !ignore_errors_flag)
branch  0 taken 2 (fallthrough)
branch  1 taken 1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        2: 3610:	    {
        -: 3611:	      /* The commands failed.  Write an error message,
        -: 3612:		 delete non-precious targets, and abort.  */
        -: 3613:	      static int delete_on_error = -1;
        2: 3614:	      child_error (c->file->name, exit_code, exit_sig, coredump, 0);
call    0 returned 2
        2: 3615:	      c->file->update_status = 2;
        2: 3616:	      if (delete_on_error == -1)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -: 3617:		{
        2: 3618:		  struct file *f = lookup_file (".DELETE_ON_ERROR");
call    0 returned 2
       2*: 3619:		  delete_on_error = f != 0 && f->is_target;
branch  0 taken 0 (fallthrough)
branch  1 taken 2
branch  2 never executed
branch  3 never executed
        -: 3620:		}
        2: 3621:	      if (exit_sig != 0 || delete_on_error)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####: 3622:		delete_child_targets (c);
call    0 never executed
        -: 3623:	    }
        -: 3624:	  else
        -: 3625:	    {
        1: 3626:	      if (child_failed)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 3627:		{
        -: 3628:		  /* The commands failed, but we don't care.  */
    #####: 3629:		  child_error (c->file->name,
call    0 never executed
        -: 3630:			       exit_code, exit_sig, coredump, 1);
    #####: 3631:		  child_failed = 0;
        -: 3632:		}
        -: 3633:
        -: 3634:	      /* If there are more commands to run, try to start them.  */
        1: 3635:	      if (job_next_command (c))
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 3636:		{
    #####: 3637:		  if (handling_fatal_signal)
branch  0 never executed
branch  1 never executed
        -: 3638:		    {
        -: 3639:		      /* Never start new commands while we are dying.
        -: 3640:			 Since there are more commands that wanted to be run,
        -: 3641:			 the target was not completely remade.  So we treat
        -: 3642:			 this as if a command had failed.  */
    #####: 3643:		      c->file->update_status = 2;
        -: 3644:		    }
        -: 3645:		  else
        -: 3646:		    {
        -: 3647:		      /* Check again whether to start remotely.
        -: 3648:			 Whether or not we want to changes over time.
        -: 3649:			 Also, start_remote_job may need state set up
        -: 3650:			 by start_remote_job_p.  */
    #####: 3651:		      c->remote = start_remote_job_p ();
call    0 never executed
    #####: 3652:		      start_job_command (c);
call    0 never executed
        -: 3653:		      /* Fatal signals are left blocked in case we were
        -: 3654:			 about to put that child on the chain.  But it is
        -: 3655:			 already there, so it is safe for a fatal signal to
        -: 3656:			 arrive now; it will clean up this child's targets.  */
    #####: 3657:		      unblock_sigs ();
call    0 never executed
    #####: 3658:		      if (c->file->command_state == cs_running)
branch  0 never executed
branch  1 never executed
        -: 3659:			/* We successfully started the new command.
        -: 3660:			   Loop to reap more children.  */
    #####: 3661:			continue;
        -: 3662:		    }
        -: 3663:
    #####: 3664:		  if (c->file->update_status != 0)
branch  0 never executed
branch  1 never executed
        -: 3665:		    /* We failed to start the commands.  */
    #####: 3666:		    delete_child_targets (c);
call    0 never executed
        -: 3667:		}
        -: 3668:	      else
        -: 3669:		/* There are no more commands.  We got through them all
        -: 3670:		   without an unignored error.  Now the target has been
        -: 3671:		   successfully updated.  */
        1: 3672:		c->file->update_status = 0;
        -: 3673:	    }
        -: 3674:
        -: 3675:	  /* When we get here, all the commands for C->file are finished
        -: 3676:	     (or aborted) and C->file->update_status contains 0 or 2.  But
        -: 3677:	     C->file->command_state is still cs_running if all the commands
        -: 3678:	     ran; notice_finish_file looks for cs_running to tell it that
        -: 3679:	     it's interesting to check the file's modtime again now.  */
        -: 3680:
        3: 3681:	  if (! handling_fatal_signal)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 3682:	    /* Notice if the target of the commands has been changed.
        -: 3683:	       This also propagates its values for command_state and
        -: 3684:	       update_status to its also_make files.  */
        3: 3685:	    notice_finished_file (c->file);
call    0 returned 3
        -: 3686:
        3: 3687:	  if (debug_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 3688:	    printf ("Removing child 0x%08lx PID %d%s from chain.\n",
call    0 never executed
        -: 3689:		    (unsigned long int) c,
    #####: 3690:		    c->pid, c->remote ? " (remote)" : "");
branch  0 never executed
branch  1 never executed
        -: 3691:
        -: 3692:	  /* Block fatal signals while frobnicating the list, so that
        -: 3693:	     children and job_slots_used are always consistent.  Otherwise
        -: 3694:	     a fatal signal arriving after the child is off the chain and
        -: 3695:	     before job_slots_used is decremented would believe a child was
        -: 3696:	     live and call reap_children again.  */
        3: 3697:	  block_sigs ();
call    0 returned 3
        -: 3698:
        -: 3699:	  /* Remove the child from the chain and free it.  */
        3: 3700:	  if (lastc == 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3701:	    children = c->next;
        -: 3702:	  else
    #####: 3703:	    lastc->next = c->next;
        3: 3704:	  if (! handling_fatal_signal) /* Don't bother if about to die.  */
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3705:	    free_child (c);
call    0 returned 3
        -: 3706:
        -: 3707:	  /* There is now another slot open.  */
        3: 3708:	  if (job_slots_used > 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3709:	    --job_slots_used;
        -: 3710:
        3: 3711:	  unblock_sigs ();
call    0 returned 3
        -: 3712:
        -: 3713:	  /* If the job failed, and the -k flag was not given, die,
        -: 3714:	     unless we are already in the process of dying.  */
        3: 3715:	  if (!err && child_failed && !keep_going_flag &&
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 2 (fallthrough)
branch  3 taken 1
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        -: 3716:	      /* fatal_error_signal will die with the right signal.  */
        2: 3717:	      !handling_fatal_signal)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 3718:	    die (2);
call    0 returned 0
        -: 3719:	}
        -: 3720:
        -: 3721:      /* Only block for one child.  */
        1: 3722:      block = 0;
        -: 3723:    }
      811: 3724:  return;
        -: 3725:}
        -: 3726:
        -: 3727:/* Free the storage allocated for CHILD.  */
        -: 3728:
        -: 3729:static void
function free_child called 4 returned 100% blocks executed 100%
        4: 3730:free_child (child)
        -: 3731:     register struct child *child;
        -: 3732:{
        4: 3733:  if (child->command_lines != 0)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -: 3734:    {
        -: 3735:      register unsigned int i;
        8: 3736:      for (i = 0; i < child->file->cmds->ncommand_lines; ++i)
branch  0 taken 4
branch  1 taken 4 (fallthrough)
        4: 3737:	free (child->command_lines[i]);
        4: 3738:      free ((char *) child->command_lines);
        -: 3739:    }
        -: 3740:
        4: 3741:  if (child->environment != 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        -: 3742:    {
        3: 3743:      register char **ep = child->environment;
      162: 3744:      while (*ep != 0)
branch  0 taken 159
branch  1 taken 3 (fallthrough)
      159: 3745:	free (*ep++);
        3: 3746:      free ((char *) child->environment);
        -: 3747:    }
        -: 3748:
        4: 3749:  free ((char *) child);
        4: 3750:}
        -: 3751:
        -: 3752:#ifdef POSIX
        -: 3753:extern sigset_t fatal_signal_set;
        -: 3754:#endif
        -: 3755:
        -: 3756:void
function block_sigs called 6 returned 100% blocks executed 100%
        6: 3757:block_sigs ()
        -: 3758:{
        -: 3759:#ifdef	 POSIX
        6: 3760:  (void) sigprocmask (SIG_BLOCK, &fatal_signal_set, (sigset_t *) 0);
call    0 returned 6
        -: 3761:#else
        -: 3762:#ifdef	HAVE_SIGSETMASK
        -: 3763:  (void) sigblock (fatal_signal_mask);
        -: 3764:#endif
        -: 3765:#endif
        6: 3766:}
        -: 3767:
        -: 3768:#ifdef	POSIX
        -: 3769:void
function unblock_sigs called 9 returned 100% blocks executed 100%
        9: 3770:unblock_sigs ()
        -: 3771:{
        -: 3772:  sigset_t empty;
        9: 3773:  sigemptyset (&empty);
call    0 returned 9
        9: 3774:  sigprocmask (SIG_SETMASK, &empty, (sigset_t *) 0);
call    0 returned 9
        9: 3775:}
        -: 3776:#endif
        -: 3777:
        -: 3778:/* Start a job to run the commands specified in CHILD.
        -: 3779:   CHILD is updated to reflect the commands and ID of the child process.
        -: 3780:
        -: 3781:   NOTE: On return fatal signals are blocked!  The caller is responsible
        -: 3782:   for calling `unblock_sigs', once the new child is safely on the chain so
        -: 3783:   it can be cleaned up in the event of a fatal signal.  */
        -: 3784:
        -: 3785:static void
function start_job_command called 4 returned 100% blocks executed 61%
        4: 3786:start_job_command (child)
        -: 3787:     register struct child *child;
        -: 3788:{
        -: 3789:#ifndef _AMIGA
        -: 3790:  static int bad_stdin = -1;
        -: 3791:#endif
        -: 3792:  register char *p;
        -: 3793:  int flags;
        -: 3794:#ifdef VMS
        -: 3795:  char *argv;
        -: 3796:#else
        -: 3797:  char **argv;
        -: 3798:#endif
        -: 3799:
        -: 3800:  /* Combine the flags parsed for the line itself with
        -: 3801:     the flags specified globally for this target.  */
        4: 3802:  flags = (child->file->command_flags
        4: 3803:	   | child->file->cmds->lines_flags[child->command_line - 1]);
        -: 3804:
        4: 3805:  p = child->command_ptr;
        4: 3806:  child->noerror = flags & COMMANDS_NOERROR;
        -: 3807:
        8: 3808:  while (*p != '\0')
branch  0 taken 8
branch  1 taken 0 (fallthrough)
        -: 3809:    {
        8: 3810:      if (*p == '@')
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 3811:	flags |= COMMANDS_SILENT;
        8: 3812:      else if (*p == '+')
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 3813:	flags |= COMMANDS_RECURSE;
        8: 3814:      else if (*p == '-')
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 3815:	child->noerror = 1;
        8: 3816:      else if (!isblank (*p) && *p != '+')
branch  0 taken 4 (fallthrough)
branch  1 taken 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        4: 3817:	break;
        4: 3818:      ++p;
        -: 3819:    }
        -: 3820:
        -: 3821:  /* If -q was given, just say that updating `failed'.  The exit status of
        -: 3822:     1 tells the user that -q is saying `something to do'; the exit status
        -: 3823:     for a random error is 2.  */
       4*: 3824:  if (question_flag && !(flags & COMMANDS_RECURSE))
branch  0 taken 0 (fallthrough)
branch  1 taken 4
branch  2 never executed
branch  3 never executed
        -: 3825:    {
    #####: 3826:      child->file->update_status = 1;
    #####: 3827:      notice_finished_file (child->file);
call    0 never executed
    #####: 3828:      return;
        -: 3829:    }
        -: 3830:
        -: 3831:  /* There may be some preceding whitespace left if there
        -: 3832:     was nothing but a backslash on the first line.  */
        4: 3833:  p = next_token (p);
call    0 returned 4
        -: 3834:
        -: 3835:  /* Figure out an argument list from this command line.  */
        -: 3836:
        -: 3837:  {
        4: 3838:    char *end = 0;
        -: 3839:#ifdef VMS
        -: 3840:    argv = p;
        -: 3841:#else
        4: 3842:    argv = construct_command_argv (p, &end, child->file);
call    0 returned 4
        -: 3843:#endif
        4: 3844:    if (end == NULL)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 3845:      child->command_ptr = NULL;
        -: 3846:    else
        -: 3847:      {
    #####: 3848:	*end++ = '\0';
    #####: 3849:	child->command_ptr = end;
        -: 3850:      }
        -: 3851:  }
        -: 3852:
       4*: 3853:  if (touch_flag && !(flags & COMMANDS_RECURSE))
branch  0 taken 0 (fallthrough)
branch  1 taken 4
branch  2 never executed
branch  3 never executed
        -: 3854:    {
        -: 3855:      /* Go on to the next command.  It might be the recursive one.
        -: 3856:	 We construct ARGV only to find the end of the command line.  */
        -: 3857:#ifndef VMS
    #####: 3858:      free (argv[0]);
    #####: 3859:      free ((char *) argv);
        -: 3860:#endif
    #####: 3861:      argv = 0;
        -: 3862:    }
        -: 3863:
        4: 3864:  if (argv == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -: 3865:    {
    #####: 3866:    next_command:
        -: 3867:      /* This line has no commands.  Go to the next.  */
        1: 3868:      if (job_next_command (child))
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3869:	start_job_command (child);
call    0 never executed
        -: 3870:      else
        -: 3871:	{
        -: 3872:	  /* No more commands.  All done.  */
        1: 3873:	  child->file->update_status = 0;
        1: 3874:	  notice_finished_file (child->file);
call    0 returned 1
        -: 3875:	}
        1: 3876:      return;
        -: 3877:    }
        -: 3878:
        -: 3879:  /* Print out the command.  If silent, we call `message' with null so it
        -: 3880:     can log the working directory before the command's own error messages
        -: 3881:     appear.  */
        -: 3882:
       4*: 3883:  message (0, (just_print_flag || (!(flags & COMMANDS_SILENT) && !silent_flag))
branch  0 taken 3 (fallthrough)
branch  1 taken 1
branch  2 taken 3 (fallthrough)
branch  3 taken 0
branch  4 taken 3 (fallthrough)
branch  5 taken 0
call    6 returned 4
        -: 3884:	   ? "%s" : (char *) 0, p);
        -: 3885:
        -: 3886:#ifdef F_AA_5
        -: 3887:	puts ("\n# Files");
        -: 3888:#endif
        -: 3889:
        -: 3890:  /* Optimize an empty command.  People use this for timestamp rules,
        -: 3891:     and forking a useless shell all the time leads to inefficiency. */
        -: 3892:
        -: 3893:#if !defined(VMS) && !defined(_AMIGA)
        4: 3894:  if (
        -: 3895:#ifdef __MSDOS__
        -: 3896:      unixy_shell	/* the test is complicated and we already did it */
        -: 3897:#else
        4: 3898:      (argv[0] && !strcmp(argv[0], "/bin/sh"))
branch  0 taken 4 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 4
        -: 3899:#endif
    #####: 3900:      && (argv[1]   && !strcmp(argv[1], "-c"))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3901:      && (argv[2]   && !strcmp(argv[2], ":"))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3902:      && argv[3] == NULL)
branch  0 never executed
branch  1 never executed
        -: 3903:    {
    #####: 3904:      set_command_state (child->file, cs_running);
call    0 never executed
    #####: 3905:      goto next_command;
        -: 3906:    }
        -: 3907:#endif  /* !VMS && !_AMIGA */
        -: 3908:
        -: 3909:  /* Tell update_goal_chain that a command has been started on behalf of
        -: 3910:     this target.  It is important that this happens here and not in
        -: 3911:     reap_children (where we used to do it), because reap_children might be
        -: 3912:     reaping children from a different target.  We want this increment to
        -: 3913:     guaranteedly indicate that a command was started for the dependency
        -: 3914:     chain (i.e., update_file recursion chain) we are processing.  */
        -: 3915:
        4: 3916:  ++commands_started;
        -: 3917:
        -: 3918:  /* If -n was given, recurse to get the next line in the sequence.  */
        -: 3919:
        4: 3920:  if (just_print_flag && !(flags & COMMANDS_RECURSE))
branch  0 taken 1 (fallthrough)
branch  1 taken 3
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 3921:    {
        -: 3922:#ifndef VMS
        1: 3923:      free (argv[0]);
        1: 3924:      free ((char *) argv);
        -: 3925:#endif
        1: 3926:      goto next_command;
        -: 3927:    }
        -: 3928:
        -: 3929:  /* Flush the output streams so they won't have things written twice.  */
        -: 3930:
        3: 3931:  fflush (stdout);
call    0 returned 3
        3: 3932:  fflush (stderr);
call    0 returned 3
        -: 3933:
        -: 3934:#ifndef VMS
        -: 3935:#if !defined(WINDOWS32) && !defined(_AMIGA) && !defined(__MSDOS__)
        -: 3936:
        -: 3937:  /* Set up a bad standard input that reads from a broken pipe.  */
        -: 3938:
        3: 3939:  if (bad_stdin == -1)
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -: 3940:    {
        -: 3941:      /* Make a file descriptor that is the read end of a broken pipe.
        -: 3942:	 This will be used for some children's standard inputs.  */
        -: 3943:      int pd[2];
        2: 3944:      if (pipe (pd) == 0)
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        -: 3945:	{
        -: 3946:	  /* Close the write side.  */
        2: 3947:	  (void) close (pd[1]);
call    0 returned 2
        -: 3948:	  /* Save the read side.  */
        2: 3949:	  bad_stdin = pd[0];
        -: 3950:
        -: 3951:	  /* Set the descriptor to close on exec, so it does not litter any
        -: 3952:	     child's descriptor table.  When it is dup2'd onto descriptor 0,
        -: 3953:	     that descriptor will not close on exec.  */
        -: 3954:#ifdef FD_SETFD
        -: 3955:#ifndef FD_CLOEXEC
        -: 3956:#define FD_CLOEXEC 1
        -: 3957:#endif
        -: 3958:	  (void) fcntl (bad_stdin, F_SETFD, FD_CLOEXEC);
        -: 3959:#endif
        -: 3960:	}
        -: 3961:    }
        -: 3962:
        -: 3963:#endif /* !WINDOWS32 && !_AMIGA && !__MSDOS__ */
        -: 3964:
        -: 3965:  /* Decide whether to give this child the `good' standard input
        -: 3966:     (one that points to the terminal or whatever), or the `bad' one
        -: 3967:     that points to the read side of a broken pipe.  */
        -: 3968:
        3: 3969:  child->good_stdin = !good_stdin_used;
        3: 3970:  if (child->good_stdin)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3971:    good_stdin_used = 1;
        -: 3972:
        -: 3973:#endif /* !VMS */
        -: 3974:
        3: 3975:  child->deleted = 0;
        -: 3976:
        -: 3977:#ifndef _AMIGA
        -: 3978:  /* Set up the environment for the child.  */
        3: 3979:  if (child->environment == 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3980:    child->environment = target_environment (child->file);
call    0 returned 3
        -: 3981:#endif
        -: 3982:
        -: 3983:#if !defined(__MSDOS__) && !defined(_AMIGA) && !defined(WINDOWS32)
        -: 3984:
        -: 3985:#ifndef VMS
        -: 3986:  /* start_waiting_job has set CHILD->remote if we can start a remote job.  */
        3: 3987:  if (child->remote)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -: 3988:    {
        -: 3989:      int is_remote, id, used_stdin;
    #####: 3990:      if (start_remote_job (argv, child->environment,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3991:			    child->good_stdin ? 0 : bad_stdin,
branch  0 never executed
branch  1 never executed
        -: 3992:			    &is_remote, &id, &used_stdin))
    #####: 3993:	goto error;
        -: 3994:      else
        -: 3995:	{
    #####: 3996:	  if (child->good_stdin && !used_stdin)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3997:	    {
    #####: 3998:	      child->good_stdin = 0;
    #####: 3999:	      good_stdin_used = 0;
        -: 4000:	    }
    #####: 4001:	  child->remote = is_remote;
    #####: 4002:	  child->pid = id;
        -: 4003:	}
        -: 4004:    }
        -: 4005:  else
        -: 4006:#endif /* !VMS */
        -: 4007:    {
        -: 4008:      /* Fork the child process.  */
        -: 4009:
        -: 4010:      char **parent_environ;
        -: 4011:
        3: 4012:      block_sigs ();
call    0 returned 3
        -: 4013:
        3: 4014:      child->remote = 0;
        -: 4015:
        -: 4016:#ifdef VMS
        -: 4017:
        -: 4018:      if (!child_execute_job (argv, child)) {
        -: 4019:        /* Fork failed!  */
        -: 4020:        perror_with_name ("vfork", "");
        -: 4021:        goto error;
        -: 4022:      }
        -: 4023:
        -: 4024:#else
        -: 4025:
        3: 4026:      parent_environ = environ;
        3: 4027:      child->pid = vfork ();
call    0 returned 6
        6: 4028:      environ = parent_environ;	/* Restore value child may have clobbered.  */
        6: 4029:      if (child->pid == 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        -: 4030:	{
        -: 4031:	  /* We are the child side.  */
        3: 4032:	  unblock_sigs ();
call    0 returned 3
       3*: 4033:	  child_execute_job (child->good_stdin ? 0 : bad_stdin, 1,
branch  0 taken 0 (fallthrough)
branch  1 taken 3
call    2 returned 0
        -: 4034:			     argv, child->environment);
        -: 4035:	}
        3: 4036:      else if (child->pid < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -: 4037:	{
        -: 4038:	  /* Fork failed!  */
    #####: 4039:	  unblock_sigs ();
call    0 never executed
    #####: 4040:	  perror_with_name ("vfork", "");
call    0 never executed
    #####: 4041:	  goto error;
        -: 4042:	}
        -: 4043:#endif /* !VMS */
        -: 4044:    }
        -: 4045:
        -: 4046:#else	/* __MSDOS__ or Amiga or WINDOWS32 */
        -: 4047:#ifdef __MSDOS__
        -: 4048:  {
        -: 4049:    int proc_return;
        -: 4050:
        -: 4051:    block_sigs ();
        -: 4052:    dos_status = 0;
        -: 4053:
        -: 4054:    /* We call `system' to do the job of the SHELL, since stock DOS
        -: 4055:       shell is too dumb.  Our `system' knows how to handle long
        -: 4056:       command lines even if pipes/redirection is needed; it will only
        -: 4057:       call COMMAND.COM when its internal commands are used.  */
        -: 4058:    if (execute_by_shell)
        -: 4059:      {
        -: 4060:	char *cmdline = argv[0];
        -: 4061:	/* We don't have a way to pass environment to `system',
        -: 4062:	   so we need to save and restore ours, sigh...  */
        -: 4063:	char **parent_environ = environ;
        -: 4064:
        -: 4065:	environ = child->environment;
        -: 4066:
        -: 4067:	/* If we have a *real* shell, tell `system' to call
        -: 4068:	   it to do everything for us.  */
        -: 4069:	if (unixy_shell)
        -: 4070:	  {
        -: 4071:	    /* A *real* shell on MSDOS may not support long
        -: 4072:	       command lines the DJGPP way, so we must use `system'.  */
        -: 4073:	    cmdline = argv[2];	/* get past "shell -c" */
        -: 4074:	  }
        -: 4075:
        -: 4076:	dos_command_running = 1;
        -: 4077:	proc_return = system (cmdline);
        -: 4078:	dos_command_running = 0;
        -: 4079:	environ = parent_environ;
        -: 4080:	execute_by_shell = 0;	/* for the next time */
        -: 4081:      }
        -: 4082:    else
        -: 4083:      {
        -: 4084:	dos_command_running = 1;
        -: 4085:	proc_return = spawnvpe (P_WAIT, argv[0], argv, child->environment);
        -: 4086:	dos_command_running = 0;
        -: 4087:      }
        -: 4088:
        -: 4089:    if (proc_return == -1)
        -: 4090:      dos_status |= 0xff;
        -: 4091:    else
        -: 4092:      dos_status |= (proc_return & 0xff);
        -: 4093:    ++dead_children;
        -: 4094:    child->pid = dos_pid++;
        -: 4095:  }
        -: 4096:#endif /* __MSDOS__ */
        -: 4097:#ifdef _AMIGA
        -: 4098:  amiga_status = MyExecute (argv);
        -: 4099:
        -: 4100:  ++dead_children;
        -: 4101:  child->pid = amiga_pid++;
        -: 4102:  if (amiga_batch_file)
        -: 4103:  {
        -: 4104:     amiga_batch_file = 0;
        -: 4105:     DeleteFile (amiga_bname);        /* Ignore errors.  */
        -: 4106:  }
        -: 4107:#endif	/* Amiga */
        -: 4108:#ifdef WINDOWS32
        -: 4109:  {
        -: 4110:      HANDLE hPID;
        -: 4111:      char* arg0;
        -: 4112:
        -: 4113:      /* make UNC paths safe for CreateProcess -- backslash format */
        -: 4114:      arg0 = argv[0];
        -: 4115:      if (arg0 && arg0[0] == '/' && arg0[1] == '/')
        -: 4116:        for ( ; arg0 && *arg0; arg0++)
        -: 4117:          if (*arg0 == '/')
        -: 4118:            *arg0 = '\\';
        -: 4119:
        -: 4120:      /* make sure CreateProcess() has Path it needs */
        -: 4121:      sync_Path_environment();
        -: 4122:
        -: 4123:      hPID = process_easy(argv, child->environment);
        -: 4124:
        -: 4125:      if (hPID != INVALID_HANDLE_VALUE)
        -: 4126:        child->pid = (int) hPID;
        -: 4127:      else {
        -: 4128:        int i;
        -: 4129:        unblock_sigs();
        -: 4130:        fprintf(stderr,
        -: 4131:          "process_easy() failed failed to launch process (e=%d)\n",
        -: 4132:          process_last_err(hPID));
        -: 4133:               for (i = 0; argv[i]; i++)
        -: 4134:                 fprintf(stderr, "%s ", argv[i]);
        -: 4135:               fprintf(stderr, "\nCounted %d args in failed launch\n", i);
        -: 4136:      }
        -: 4137:  }
        -: 4138:#endif /* WINDOWS32 */
        -: 4139:#endif	/* __MSDOS__ or Amiga or WINDOWS32 */
        -: 4140:
        -: 4141:  /* We are the parent side.  Set the state to
        -: 4142:     say the commands are running and return.  */
        -: 4143:
        3: 4144:  set_command_state (child->file, cs_running);
call    0 returned 3
        -: 4145:
        -: 4146:  /* Free the storage used by the child's argument list.  */
        -: 4147:#ifndef VMS
        3: 4148:  free (argv[0]);
        3: 4149:  free ((char *) argv);
        -: 4150:#endif
        -: 4151:
        3: 4152:  return;
        -: 4153:
    #####: 4154: error:
    #####: 4155:  child->file->update_status = 2;
    #####: 4156:  notice_finished_file (child->file);
call    0 never executed
    #####: 4157:  return;
        -: 4158:}
        -: 4159:
        -: 4160:/* Try to start a child running.
        -: 4161:   Returns nonzero if the child was started (and maybe finished), or zero if
        -: 4162:   the load was too high and the child was put on the `waiting_jobs' chain.  */
        -: 4163:
        -: 4164:static int
function start_waiting_job called 4 returned 100% blocks executed 52%
        4: 4165:start_waiting_job (c)
        -: 4166:     struct child *c;
        -: 4167:{
        -: 4168:  /* If we can start a job remotely, we always want to, and don't care about
        -: 4169:     the local load average.  We record that the job should be started
        -: 4170:     remotely in C->remote for start_job_command to test.  */
        -: 4171:
        4: 4172:  c->remote = start_remote_job_p ();
call    0 returned 4
        -: 4173:
        -: 4174:  /* If this job is to be started locally, and we are already running
        -: 4175:     some jobs, make this one wait if the load average is too high.  */
       4*: 4176:  if (!c->remote && job_slots_used > 0 && load_too_high ())
branch  0 taken 4 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 4
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4177:    {
        -: 4178:      /* Put this child on the chain of children waiting
        -: 4179:	 for the load average to go down.  */
    #####: 4180:      set_command_state (c->file, cs_running);
call    0 never executed
    #####: 4181:      c->next = waiting_jobs;
    #####: 4182:      waiting_jobs = c;
    #####: 4183:      return 0;
        -: 4184:    }
        -: 4185:
        -: 4186:  /* Start the first command; reap_children will run later command lines.  */
        4: 4187:  start_job_command (c);
call    0 returned 4
        -: 4188:
        4: 4189:  switch (c->file->command_state)
branch  0 taken 3
branch  1 taken 0
branch  2 taken 1
branch  3 taken 0
        -: 4190:    {
        3: 4191:    case cs_running:
        3: 4192:      c->next = children;
        3: 4193:      if (debug_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 4194:	printf ("Putting child 0x%08lx PID %05d%s on the chain.\n",
call    0 never executed
        -: 4195:		(unsigned long int) c,
    #####: 4196:		c->pid, c->remote ? " (remote)" : "");
branch  0 never executed
branch  1 never executed
        3: 4197:      children = c;
        -: 4198:      /* One more job slot is in use.  */
        3: 4199:      ++job_slots_used;
        3: 4200:      unblock_sigs ();
call    0 returned 3
        3: 4201:      break;
        -: 4202:
    #####: 4203:    case cs_not_started:
        -: 4204:      /* All the command lines turned out to be empty.  */
    #####: 4205:      c->file->update_status = 0;
        -: 4206:      /* FALLTHROUGH */
        -: 4207:
        1: 4208:    case cs_finished:
        1: 4209:      notice_finished_file (c->file);
call    0 returned 1
        1: 4210:      free_child (c);
call    0 returned 1
        1: 4211:      break;
        -: 4212:
    #####: 4213:    default:
    #####: 4214:      assert (c->file->command_state == cs_finished);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 4215:      break;
        -: 4216:    }
        -: 4217:
        4: 4218:  return 1;
        -: 4219:}
        -: 4220:
        -: 4221:/* Create a `struct child' for FILE and start its commands running.  */
        -: 4222:
        -: 4223:void
function new_job called 4 returned 50% blocks executed 65%
        4: 4224:new_job (file)
        -: 4225:     register struct file *file;
        -: 4226:{
        4: 4227:  register struct commands *cmds = file->cmds;
        -: 4228:  register struct child *c;
        -: 4229:  char **lines;
        -: 4230:  register unsigned int i;
        -: 4231:
        -: 4232:  /* Let any previously decided-upon jobs that are waiting
        -: 4233:     for the load to go down start before this new one.  */
        4: 4234:  start_waiting_jobs ();
call    0 returned 4
        -: 4235:
        -: 4236:  /* Reap any children that might have finished recently.  */
        4: 4237:  reap_children (0, 0);
call    0 returned 4
        -: 4238:
        -: 4239:  /* Chop the commands up into lines if they aren't already.  */
        4: 4240:  chop_commands (cmds);
call    0 returned 4
        -: 4241:
        4: 4242:  if (job_slots != 0)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -: 4243:    /* Wait for a job slot to be freed up.  */
        4: 4244:    while (job_slots_used == job_slots)
branch  0 taken 0
branch  1 taken 4 (fallthrough)
    #####: 4245:      reap_children (1, 0);
call    0 never executed
        -: 4246:
        -: 4247:  /* Expand the command lines and store the results in LINES.  */
        4: 4248:  lines = (char **) xmalloc (cmds->ncommand_lines * sizeof (char *));
call    0 returned 4
        8: 4249:  for (i = 0; i < cmds->ncommand_lines; ++i)
branch  0 taken 4
branch  1 taken 4 (fallthrough)
        -: 4250:    {
        -: 4251:      /* Collapse backslash-newline combinations that are inside variable
        -: 4252:	 or function references.  These are left alone by the parser so
        -: 4253:	 that they will appear in the echoing of commands (where they look
        -: 4254:	 nice); and collapsed by construct_command_argv when it tokenizes.
        -: 4255:	 But letting them survive inside function invocations loses because
        -: 4256:	 we don't want the functions to see them as part of the text.  */
        -: 4257:
        -: 4258:      char *in, *out, *ref;
        -: 4259:
        -: 4260:      /* IN points to where in the line we are scanning.
        -: 4261:	 OUT points to where in the line we are writing.
        -: 4262:	 When we collapse a backslash-newline combination,
        -: 4263:	 IN gets ahead of OUT.  */
        -: 4264:
        4: 4265:      in = out = cmds->command_lines[i];
       24: 4266:      while ((ref = index (in, '$')) != 0)
branch  0 taken 20
branch  1 taken 4 (fallthrough)
        -: 4267:	{
       20: 4268:	  ++ref;		/* Move past the $.  */
        -: 4269:
       20: 4270:	  if (out != in)
branch  0 taken 0 (fallthrough)
branch  1 taken 20
        -: 4271:	    /* Copy the text between the end of the last chunk
        -: 4272:	       we processed (where IN points) and the new chunk
        -: 4273:	       we are about to process (where REF points).  */
    #####: 4274:	    bcopy (in, out, ref - in);
        -: 4275:
        -: 4276:	  /* Move both pointers past the boring stuff.  */
       20: 4277:	  out += ref - in;
       20: 4278:	  in = ref;
        -: 4279:
       20: 4280:	  if (*ref == '(' || *ref == '{')
branch  0 taken 4 (fallthrough)
branch  1 taken 16
branch  2 taken 0 (fallthrough)
branch  3 taken 4
        -: 4281:	    {
       16: 4282:	      char openparen = *ref;
      16*: 4283:	      char closeparen = openparen == '(' ? ')' : '}';
branch  0 taken 16 (fallthrough)
branch  1 taken 0
        -: 4284:	      int count;
        -: 4285:	      char *p;
        -: 4286:
       16: 4287:	      *out++ = *in++;	/* Copy OPENPAREN.  */
        -: 4288:	      /* IN now points past the opening paren or brace.
        -: 4289:		 Count parens or braces until it is matched.  */
       16: 4290:	      count = 0;
       90: 4291:	      while (*in != '\0')
branch  0 taken 90
branch  1 taken 0 (fallthrough)
        -: 4292:		{
       90: 4293:		  if (*in == closeparen && --count < 0)
branch  0 taken 16 (fallthrough)
branch  1 taken 74
branch  2 taken 0 (fallthrough)
branch  3 taken 16
        -: 4294:		    break;
      74*: 4295:		  else if (*in == '\\' && in[1] == '\n')
branch  0 taken 0 (fallthrough)
branch  1 taken 74
branch  2 never executed
branch  3 never executed
    #####: 4296:		    {
        -: 4297:		      /* We have found a backslash-newline inside a
        -: 4298:			 variable or function reference.  Eat it and
        -: 4299:			 any following whitespace.  */
        -: 4300:
    #####: 4301:		      int quoted = 0;
    #####: 4302:		      for (p = in - 1; p > ref && *p == '\\'; --p)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4303:			quoted = !quoted;
        -: 4304:
    #####: 4305:		      if (quoted)
branch  0 never executed
branch  1 never executed
        -: 4306:			/* There were two or more backslashes, so this is
        -: 4307:			   not really a continuation line.  We don't collapse
        -: 4308:			   the quoting backslashes here as is done in
        -: 4309:			   collapse_continuations, because the line will
        -: 4310:			   be collapsed again after expansion.  */
    #####: 4311:			*out++ = *in++;
        -: 4312:		      else
        -: 4313:			{
        -: 4314:			  /* Skip the backslash, newline and
        -: 4315:			     any following whitespace.  */
    #####: 4316:			  in = next_token (in + 2);
call    0 never executed
        -: 4317:
        -: 4318:			  /* Discard any preceding whitespace that has
        -: 4319:			     already been written to the output.  */
    #####: 4320:			  while (out > ref && isblank (out[-1]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4321:			    --out;
        -: 4322:
        -: 4323:			  /* Replace it all with a single space.  */
    #####: 4324:			  *out++ = ' ';
        -: 4325:			}
        -: 4326:		    }
        -: 4327:		  else
        -: 4328:		    {
       74: 4329:		      if (*in == openparen)
branch  0 taken 0 (fallthrough)
branch  1 taken 74
    #####: 4330:			++count;
        -: 4331:
       74: 4332:		      *out++ = *in++;
        -: 4333:		    }
        -: 4334:		}
        -: 4335:	    }
        -: 4336:	}
        -: 4337:
        -: 4338:      /* There are no more references in this line to worry about.
        -: 4339:	 Copy the remaining uninteresting text to the output.  */
        4: 4340:      if (out != in)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 4341:	strcpy (out, in);
        -: 4342:
        -: 4343:      /* Finally, expand the line.  */
        4: 4344:      lines[i] = allocated_variable_expand_for_file (cmds->command_lines[i],
call    0 returned 4
        -: 4345:						     file);
        -: 4346:    }
        -: 4347:
        -: 4348:  /* Start the command sequence, record it in a new
        -: 4349:     `struct child', and add that to the chain.  */
        -: 4350:
        4: 4351:  c = (struct child *) xmalloc (sizeof (struct child));
call    0 returned 4
        4: 4352:  c->file = file;
        4: 4353:  c->command_lines = lines;
        4: 4354:  c->command_line = 0;
        4: 4355:  c->command_ptr = 0;
        4: 4356:  c->environment = 0;
        -: 4357:
        -: 4358:  /* Fetch the first command line to be run.  */
        4: 4359:  job_next_command (c);
call    0 returned 4
        -: 4360:
        -: 4361:  /* The job is now primed.  Start it running.
        -: 4362:     (This will notice if there are in fact no commands.)  */
        4: 4363:  (void)start_waiting_job (c);
call    0 returned 4
        -: 4364:
        4: 4365:  if (job_slots == 1)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -: 4366:    /* Since there is only one job slot, make things run linearly.
        -: 4367:       Wait for the child to die, setting the state to `cs_finished'.  */
        5: 4368:    while (file->command_state == cs_running)
branch  0 taken 3
branch  1 taken 2 (fallthrough)
        3: 4369:      reap_children (1, 0);
call    0 returned 1
        -: 4370:
        2: 4371:  return;
        -: 4372:}
        -: 4373:
        -: 4374:/* Move CHILD's pointers to the next command for it to execute.
        -: 4375:   Returns nonzero if there is another command.  */
        -: 4376:
        -: 4377:static int
function job_next_command called 6 returned 100% blocks executed 100%
        6: 4378:job_next_command (child)
        -: 4379:     struct child *child;
        -: 4380:{
       10: 4381:  while (child->command_ptr == 0 || *child->command_ptr == '\0')
branch  0 taken 6
branch  1 taken 4 (fallthrough)
branch  2 taken 0
branch  3 taken 4 (fallthrough)
        -: 4382:    {
        -: 4383:      /* There are no more lines in the expansion of this line.  */
        6: 4384:      if (child->command_line == child->file->cmds->ncommand_lines)
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        -: 4385:	{
        -: 4386:	  /* There are no more lines to be expanded.  */
        2: 4387:	  child->command_ptr = 0;
        2: 4388:	  return 0;
        -: 4389:	}
        -: 4390:      else
        -: 4391:	/* Get the next line to run.  */
        4: 4392:	child->command_ptr = child->command_lines[child->command_line++];
        -: 4393:    }
        4: 4394:  return 1;
        -: 4395:}
        -: 4396:
        -: 4397:static int
function load_too_high called 0 returned 0% blocks executed 0%
    #####: 4398:load_too_high ()
        -: 4399:{
        -: 4400:#if defined(__MSDOS__) || defined(VMS) || defined(_AMIGA)
        -: 4401:  return 1;
        -: 4402:#else
        -: 4403:  double load;
        -: 4404:
    #####: 4405:  if (max_load_average < 0)
branch  0 never executed
branch  1 never executed
    #####: 4406:    return 0;
        -: 4407:
    #####: 4408:  make_access ();
call    0 never executed
    #####: 4409:  if (getloadavg (&load, 1) != 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4410:    {
        -: 4411:      static int lossage = -1;
        -: 4412:      /* Complain only once for the same error.  */
    #####: 4413:      if (lossage == -1 || errno != lossage)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 4414:	{
    #####: 4415:	  if (errno == 0)
branch  0 never executed
branch  1 never executed
        -: 4416:	    /* An errno value of zero means getloadavg is just unsupported.  */
    #####: 4417:	    error ("cannot enforce load limits on this operating system");
call    0 never executed
        -: 4418:	  else
    #####: 4419:	    perror_with_name ("cannot enforce load limit: ", "getloadavg");
call    0 never executed
        -: 4420:	}
    #####: 4421:      lossage = errno;
    #####: 4422:      load = 0;
        -: 4423:    }
    #####: 4424:  user_access ();
call    0 never executed
        -: 4425:
    #####: 4426:  return load >= max_load_average;
        -: 4427:#endif
        -: 4428:}
        -: 4429:
        -: 4430:/* Start jobs that are waiting for the load to be lower.  */
        -: 4431:
        -: 4432:void
function start_waiting_jobs called 810 returned 100% blocks executed 38%
      810: 4433:start_waiting_jobs ()
        -: 4434:{
        -: 4435:  struct child *job;
        -: 4436:
      810: 4437:  if (waiting_jobs == 0)
branch  0 taken 810 (fallthrough)
branch  1 taken 0
      810: 4438:    return;
        -: 4439:
        -: 4440:  do
        -: 4441:    {
        -: 4442:      /* Check for recently deceased descendants.  */
    #####: 4443:      reap_children (0, 0);
call    0 never executed
        -: 4444:
        -: 4445:      /* Take a job off the waiting list.  */
    #####: 4446:      job = waiting_jobs;
    #####: 4447:      waiting_jobs = job->next;
        -: 4448:
        -: 4449:      /* Try to start that job.  We break out of the loop as soon
        -: 4450:	 as start_waiting_job puts one back on the waiting list.  */
        -: 4451:    }
    #####: 4452:  while (start_waiting_job (job) && waiting_jobs != 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 4453:
    #####: 4454:  return;
        -: 4455:}
        -: 4456:
        -: 4457:#ifndef WINDOWS32
        -: 4458:#ifdef VMS
        -: 4459:#include <descrip.h>
        -: 4460:#include <clidef.h>
        -: 4461:#undef stderr
        -: 4462:#define stderr stdout
        -: 4463:
        -: 4464:/* This is called as an AST when a child process dies (it won't get
        -: 4465:   interrupted by anything except a higher level AST).
        -: 4466:*/
        -: 4467:int vmsHandleChildTerm(struct child *child)
        -: 4468:{
        -: 4469:    int status;
        -: 4470:    register struct child *lastc, *c;
        -: 4471:    int child_failed;
        -: 4472:
        -: 4473:    vms_jobsefnmask &= ~(1 << (child->efn - 32));
        -: 4474:
        -: 4475:    lib$free_ef(&child->efn);
        -: 4476:
        -: 4477:    (void) sigblock (fatal_signal_mask);
        -: 4478:
        -: 4479:    child_failed = !(child->cstatus & 1 || ((child->cstatus & 7) == 0));
        -: 4480:
        -: 4481:    /* Search for a child matching the deceased one.  */
        -: 4482:    lastc = 0;
        -: 4483:#if defined(RECURSIVEJOBS) /* I've had problems with recursive stuff and process handling */
        -: 4484:    for (c = children; c != 0 && c != child; lastc = c, c = c->next);
        -: 4485:#else
        -: 4486:    c = child;
        -: 4487:#endif
        -: 4488:
        -: 4489:    if (child_failed && !c->noerror && !ignore_errors_flag)
        -: 4490:      {
        -: 4491:	/* The commands failed.  Write an error message,
        -: 4492:	   delete non-precious targets, and abort.  */
        -: 4493:	child_error (c->file->name, c->cstatus, 0, 0, 0);
        -: 4494:	c->file->update_status = 1;
        -: 4495:	delete_child_targets (c);
        -: 4496:      }
        -: 4497:    else
        -: 4498:      {
        -: 4499:	if (child_failed)
        -: 4500:	  {
        -: 4501:	    /* The commands failed, but we don't care.  */
        -: 4502:	    child_error (c->file->name, c->cstatus, 0, 0, 1);
        -: 4503:	    child_failed = 0;
        -: 4504:	  }
        -: 4505:
        -: 4506:#if defined(RECURSIVEJOBS) /* I've had problems with recursive stuff and process handling */
        -: 4507:	/* If there are more commands to run, try to start them.  */
        -: 4508:	start_job (c);
        -: 4509:
        -: 4510:	switch (c->file->command_state)
        -: 4511:	  {
        -: 4512:	  case cs_running:
        -: 4513:	    /* Successfully started.  */
        -: 4514:	    break;
        -: 4515:
        -: 4516:	  case cs_finished:
        -: 4517:	    if (c->file->update_status != 0) {
        -: 4518:		/* We failed to start the commands.  */
        -: 4519:		delete_child_targets (c);
        -: 4520:	    }
        -: 4521:	    break;
        -: 4522:
        -: 4523:	  default:
        -: 4524:	    error ("internal error: `%s' command_state \
        -: 4525:%d in child_handler", c->file->name);
        -: 4526:	    abort ();
        -: 4527:	    break;
        -: 4528:	  }
        -: 4529:#endif /* RECURSIVEJOBS */
        -: 4530:      }
        -: 4531:
        -: 4532:    /* Set the state flag to say the commands have finished.  */
        -: 4533:    c->file->command_state = cs_finished;
        -: 4534:    notice_finished_file (c->file);
        -: 4535:
        -: 4536:#if defined(RECURSIVEJOBS) /* I've had problems with recursive stuff and process handling */
        -: 4537:    /* Remove the child from the chain and free it.  */
        -: 4538:    if (lastc == 0)
        -: 4539:      children = c->next;
        -: 4540:    else
        -: 4541:      lastc->next = c->next;
        -: 4542:    free_child (c);
        -: 4543:#endif /* RECURSIVEJOBS */
        -: 4544:
        -: 4545:    /* There is now another slot open.  */
        -: 4546:    if (job_slots_used > 0)
        -: 4547:      --job_slots_used;
        -: 4548:
        -: 4549:    /* If the job failed, and the -k flag was not given, die.  */
        -: 4550:    if (child_failed && !keep_going_flag)
        -: 4551:      die (EXIT_FAILURE);
        -: 4552:
        -: 4553:    (void) sigsetmask (sigblock (0) & ~(fatal_signal_mask));
        -: 4554:
        -: 4555:    return 1;
        -: 4556:}
        -: 4557:
        -: 4558:/* VMS:
        -: 4559:   Spawn a process executing the command in ARGV and return its pid. */
        -: 4560:
        -: 4561:#define MAXCMDLEN 200
        -: 4562:
        -: 4563:int
        -: 4564:child_execute_job (argv, child)
        -: 4565:     char *argv;
        -: 4566:     struct child *child;
        -: 4567:{
        -: 4568:  int i;
        -: 4569:  static struct dsc$descriptor_s cmddsc;
        -: 4570:#ifndef DONTWAITFORCHILD
        -: 4571:  int spflags = 0;
        -: 4572:#else
        -: 4573:  int spflags = CLI$M_NOWAIT;
        -: 4574:#endif
        -: 4575:  int status;
        -: 4576:  char cmd[4096],*p,*c;
        -: 4577:  char comname[50];
        -: 4578:
        -: 4579:/* Remove backslashes */
        -: 4580:  for (p = argv, c = cmd; *p; p++,c++)
        -: 4581:    {
        -: 4582:      if (*p == '\\') p++;
        -: 4583:	*c = *p;
        -: 4584:    }
        -: 4585:  *c = *p;
        -: 4586:
        -: 4587:  /* check for maximum dcl length and create *.com file if neccesary */
        -: 4588:
        -: 4589:  comname[0] = '\0';
        -: 4590:
        -: 4591:  if (strlen (cmd) > MAXCMDLEN)
        -: 4592:    {
        -: 4593:      FILE *outfile;
        -: 4594:      char tmp;
        -: 4595:
        -: 4596:      strcpy (comname, "sys$scratch:CMDXXXXXX.COM");
        -: 4597:      (void) mktemp (comname);
        -: 4598:
        -: 4599:      outfile = fopen (comname, "w");
        -: 4600:      if (outfile == 0)
        -: 4601:	pfatal_with_name (comname);
        -: 4602:
        -: 4603:      fprintf (outfile, "$ ");
        -: 4604:      c = cmd;
        -: 4605:
        -: 4606:      while (c)
        -: 4607:	{
        -: 4608:	  p = strchr (c, ',');
        -: 4609:	  if ((p == NULL) || (p-c > MAXCMDLEN))
        -: 4610:	    p = strchr (c, ' ');
        -: 4611:	  if (p != NULL)
        -: 4612:	    {
        -: 4613:	      p++;
        -: 4614:	      tmp = *p;
        -: 4615:	      *p = '\0';
        -: 4616:	    }
        -: 4617:	  else
        -: 4618:	    tmp = '\0';
        -: 4619:	  fprintf (outfile, "%s%s\n", c, (tmp == '\0')?"":" -");
        -: 4620:	  if (p != NULL)
        -: 4621:	    *p = tmp;
        -: 4622:	  c = p;
        -: 4623:	}
        -: 4624:
        -: 4625:      fclose (outfile);
        -: 4626:
        -: 4627:      sprintf (cmd, "$ @%s", comname);
        -: 4628:
        -: 4629:      if (debug_flag)
        -: 4630:	printf ("Executing %s instead\n", cmd);
        -: 4631:    }
        -: 4632:
        -: 4633:  cmddsc.dsc$w_length = strlen(cmd);
        -: 4634:  cmddsc.dsc$a_pointer = cmd;
        -: 4635:  cmddsc.dsc$b_dtype = DSC$K_DTYPE_T;
        -: 4636:  cmddsc.dsc$b_class = DSC$K_CLASS_S;
        -: 4637:
        -: 4638:  child->efn = 0;
        -: 4639:  while (child->efn < 32 || child->efn > 63)
        -: 4640:    {
        -: 4641:      status = lib$get_ef(&child->efn);
        -: 4642:      if (!(status & 1))
        -: 4643:	return 0;
        -: 4644:    }
        -: 4645:
        -: 4646:  sys$clref(child->efn);
        -: 4647:
        -: 4648:  vms_jobsefnmask |= (1 << (child->efn - 32));
        -: 4649:
        -: 4650:#ifndef DONTWAITFORCHILD
        -: 4651:  status = lib$spawn(&cmddsc,0,0,&spflags,0,&child->pid,&child->cstatus,
        -: 4652:		       &child->efn,0,0);
        -: 4653:  vmsHandleChildTerm(child);
        -: 4654:#else
        -: 4655:  status = lib$spawn(&cmddsc,0,0,&spflags,0,&child->pid,&child->cstatus,
        -: 4656:		       &child->efn,vmsHandleChildTerm,child);
        -: 4657:#endif
        -: 4658:
        -: 4659:  if (!(status & 1))
        -: 4660:    {
        -: 4661:      printf("Error spawning, %d\n",status);
        -: 4662:      fflush(stdout);
        -: 4663:    }
        -: 4664:
        -: 4665:  unlink (comname);
        -: 4666:
        -: 4667:  return (status & 1);
        -: 4668:}
        -: 4669:
        -: 4670:#else /* !VMS */
        -: 4671:
        -: 4672:#ifndef F_JR_6  /* seeded fault #6 */
        -: 4673:#if !defined (_AMIGA) && !defined (__MSDOS__)
        -: 4674:/* UNIX:
        -: 4675:   Replace the current process with one executing the command in ARGV.
        -: 4676:   STDIN_FD and STDOUT_FD are used as the process's stdin and stdout; ENVP is
        -: 4677:   the environment of the new program.  This function does not return.  */
        -: 4678:
        -: 4679:void
function child_execute_job called 3 returned 0% blocks executed 60%
        3: 4680:child_execute_job (stdin_fd, stdout_fd, argv, envp)
        -: 4681:     int stdin_fd, stdout_fd;
        -: 4682:     char **argv, **envp;
        -: 4683:{
        3: 4684:  if (stdin_fd != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 4685:    (void) dup2 (stdin_fd, 0);
call    0 never executed
        3: 4686:  if (stdout_fd != 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 4687:    (void) dup2 (stdout_fd, 1);
call    0 never executed
        3: 4688:  if (stdin_fd != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 4689:    (void) close (stdin_fd);
call    0 never executed
        3: 4690:  if (stdout_fd != 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 4691:    (void) close (stdout_fd);
call    0 never executed
        -: 4692:
        -: 4693:  /* Run the command.  */
        3: 4694:  exec_command (argv, envp);
call    0 returned 0
    #####: 4695:}
        -: 4696:#endif /* !AMIGA && !__MSDOS__ */
        -: 4697:#else
        -: 4698:#ifndef _AMIGA
        -: 4699:/* UNIX:
        -: 4700:   Replace the current process with one executing the command in ARGV.
        -: 4701:   STDIN_FD and STDOUT_FD are used as the process's stdin and stdout; ENVP is
        -: 4702:   the environment of the new program.  This function does not return.  */
        -: 4703:
        -: 4704:void
        -: 4705:child_execute_job (stdin_fd, stdout_fd, argv, envp)
        -: 4706:     int stdin_fd, stdout_fd;
        -: 4707:     char **argv, **envp;
        -: 4708:{
        -: 4709:  if (stdin_fd != 0)
        -: 4710:    (void) dup2 (stdin_fd, 0);
        -: 4711:  if (stdout_fd != 1)
        -: 4712:    (void) dup2 (stdout_fd, 1);
        -: 4713:  if (stdin_fd != 0)
        -: 4714:    (void) close (stdin_fd);
        -: 4715:  if (stdout_fd != 1)
        -: 4716:    (void) close (stdout_fd);
        -: 4717:
        -: 4718:  /* Run the command.  */
        -: 4719:  exec_command (argv, envp);
        -: 4720:}
        -: 4721:#endif /* !AMIGA */
        -: 4722:#endif /* seeded Fault #6 */
        -: 4723:#endif /* !VMS */
        -: 4724:#endif /* !WINDOWS32 */
        -: 4725:
        -: 4726:#ifndef _AMIGA
        -: 4727:/* Replace the current process with one running the command in ARGV,
        -: 4728:   with environment ENVP.  This function does not return.  */
        -: 4729:
        -: 4730:void
function exec_command called 3 returned 0% blocks executed 20%
        3: 4731:exec_command (argv, envp)
        -: 4732:     char **argv, **envp;
        -: 4733:{
        -: 4734:#ifdef VMS
        -: 4735:  /* Run the program.  */
        -: 4736:  execve (argv[0], argv, envp);
        -: 4737:  perror_with_name ("execve: ", argv[0]);
        -: 4738:  _exit (EXIT_FAILURE);
        -: 4739:#else
        -: 4740:#ifdef WINDOWS32
        -: 4741:  HANDLE hPID;
        -: 4742:  HANDLE hWaitPID;
        -: 4743:  int err = 0;
        -: 4744:  int exit_code = EXIT_FAILURE;
        -: 4745:
        -: 4746:  /* make sure CreateProcess() has Path it needs */
        -: 4747:  sync_Path_environment();
        -: 4748:
        -: 4749:  /* launch command */
        -: 4750:  hPID = process_easy(argv, envp);
        -: 4751:
        -: 4752:  /* make sure launch ok */
        -: 4753:  if (hPID == INVALID_HANDLE_VALUE)
        -: 4754:    {
        -: 4755:      int i;
        -: 4756:      fprintf(stderr,
        -: 4757:              "process_easy() failed failed to launch process (e=%d)\n",
        -: 4758:              process_last_err(hPID));
        -: 4759:      for (i = 0; argv[i]; i++)
        -: 4760:          fprintf(stderr, "%s ", argv[i]);
        -: 4761:      fprintf(stderr, "\nCounted %d args in failed launch\n", i);
        -: 4762:      exit(EXIT_FAILURE);
        -: 4763:    }
        -: 4764:
        -: 4765:  /* wait and reap last child */
        -: 4766:  while (hWaitPID = process_wait_for_any())
        -: 4767:    {
        -: 4768:      /* was an error found on this process? */
        -: 4769:      err = process_last_err(hWaitPID);
        -: 4770:
        -: 4771:      /* get exit data */
        -: 4772:      exit_code = process_exit_code(hWaitPID);
        -: 4773:
        -: 4774:      if (err)
        -: 4775:          fprintf(stderr, "make (e=%d, rc=%d): %s",
        -: 4776:                  err, exit_code, map_windows32_error_to_string(err));
        -: 4777:
        -: 4778:      /* cleanup process */
        -: 4779:      process_cleanup(hWaitPID);
        -: 4780:
        -: 4781:      /* expect to find only last pid, warn about other pids reaped */
        -: 4782:      if (hWaitPID == hPID)
        -: 4783:          break;
        -: 4784:      else
        -: 4785:          fprintf(stderr,
        -: 4786:                  "make reaped child pid %d, still waiting for pid %d\n",
        -: 4787:                  hWaitPID, hPID);
        -: 4788:    }
        -: 4789:
        -: 4790:  /* return child's exit code as our exit code */
        -: 4791:  exit(exit_code);
        -: 4792:
        -: 4793:#else  /* !WINDOWS32 */
        -: 4794:
        -: 4795:  /* Be the user, permanently.  */
        3: 4796:  child_access ();
call    0 returned 3
        -: 4797:
        -: 4798:  /* Run the program.  */
        3: 4799:  environ = envp;
        3: 4800:  execvp (argv[0], argv);
        -: 4801:
        3: 4802:  switch (errno)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 3
        -: 4803:    {
    #####: 4804:    case ENOENT:
    #####: 4805:      error ("%s: Command not found", argv[0]);
call    0 never executed
    #####: 4806:      break;
    #####: 4807:    case ENOEXEC:
        -: 4808:      {
        -: 4809:	/* The file is not executable.  Try it as a shell script.  */
        -: 4810:	extern char *getenv ();
        -: 4811:	char *shell;
        -: 4812:	char **new_argv;
        -: 4813:	int argc;
        -: 4814:
    #####: 4815:	shell = getenv ("SHELL");
call    0 never executed
    #####: 4816:	if (shell == 0)
branch  0 never executed
branch  1 never executed
    #####: 4817:	  shell = default_shell;
        -: 4818:
    #####: 4819:	argc = 1;
    #####: 4820:	while (argv[argc] != 0)
branch  0 never executed
branch  1 never executed
    #####: 4821:	  ++argc;
        -: 4822:
    #####: 4823:	new_argv = (char **) alloca ((1 + argc + 1) * sizeof (char *));
    #####: 4824:	new_argv[0] = shell;
    #####: 4825:	new_argv[1] = argv[0];
    #####: 4826:	while (argc > 0)
branch  0 never executed
branch  1 never executed
        -: 4827:	  {
    #####: 4828:	    new_argv[1 + argc] = argv[argc];
    #####: 4829:	    --argc;
        -: 4830:	  }
        -: 4831:
    #####: 4832:	execvp (shell, new_argv);
    #####: 4833:	if (errno == ENOENT)
branch  0 never executed
branch  1 never executed
    #####: 4834:	  error ("%s: Shell program not found", shell);
call    0 never executed
        -: 4835:	else
    #####: 4836:	  perror_with_name ("execvp: ", shell);
call    0 never executed
    #####: 4837:	break;
        -: 4838:      }
        -: 4839:
        3: 4840:    default:
        3: 4841:      perror_with_name ("execvp: ", argv[0]);
call    0 returned 0
    #####: 4842:      break;
        -: 4843:    }
        -: 4844:
    #####: 4845:  _exit (127);
        -: 4846:#endif /* !WINDOWS32 */
        -: 4847:#endif /* !VMS */
        -: 4848:}
        -: 4849:#else /* On Amiga */
        -: 4850:void exec_command (argv)
        -: 4851:     char **argv;
        -: 4852:{
        -: 4853:  MyExecute (argv);
        -: 4854:}
        -: 4855:
        -: 4856:void clean_tmp (void)
        -: 4857:{
        -: 4858:  DeleteFile (amiga_bname);
        -: 4859:}
        -: 4860:
        -: 4861:#endif /* On Amiga */
        -: 4862:
        -: 4863:#ifndef VMS
        -: 4864:/* Figure out the argument list necessary to run LINE as a command.  Try to
        -: 4865:   avoid using a shell.  This routine handles only ' quoting, and " quoting
        -: 4866:   when no backslash, $ or ` characters are seen in the quotes.  Starting
        -: 4867:   quotes may be escaped with a backslash.  If any of the characters in
        -: 4868:   sh_chars[] is seen, or any of the builtin commands listed in sh_cmds[]
        -: 4869:   is the first word of a line, the shell is used.
        -: 4870:
        -: 4871:   If RESTP is not NULL, *RESTP is set to point to the first newline in LINE.
        -: 4872:   If *RESTP is NULL, newlines will be ignored.
        -: 4873:
        -: 4874:   SHELL is the shell to use, or nil to use the default shell.
        -: 4875:   IFS is the value of $IFS, or nil (meaning the default).  */
        -: 4876:
        -: 4877:static char **
function construct_command_argv_internal called 4 returned 100% blocks executed 32%
        4: 4878:construct_command_argv_internal (line, restp, shell, ifs)
        -: 4879:     char *line, **restp;
        -: 4880:     char *shell, *ifs;
        -: 4881:{
        -: 4882:#ifdef __MSDOS__
        -: 4883:  /* MSDOS supports both the stock DOS shell and ports of Unixy shells.
        -: 4884:     We call `system' for anything that requires ``slow'' processing,
        -: 4885:     because DOS shells are too dumb.  When $SHELL points to a real
        -: 4886:     (unix-style) shell, `system' just calls it to do everything.  When
        -: 4887:     $SHELL points to a DOS shell, `system' does most of the work
        -: 4888:     internally, calling the shell only for its internal commands.
        -: 4889:     However, it looks on the $PATH first, so you can e.g. have an
        -: 4890:     external command named `mkdir'.
        -: 4891:
        -: 4892:     Since we call `system', certain characters and commands below are
        -: 4893:     actually not specific to COMMAND.COM, but to the DJGPP implementation
        -: 4894:     of `system'.  In particular:
        -: 4895:
        -: 4896:       The shell wildcard characters are in DOS_CHARS because they will
        -: 4897:       not be expanded if we call the child via `spawnXX'.
        -: 4898:
        -: 4899:       The `;' is in DOS_CHARS, because our `system' knows how to run
        -: 4900:       multiple commands on a single line.
        -: 4901:
        -: 4902:       DOS_CHARS also include characters special to 4DOS/NDOS, so we
        -: 4903:       won't have to tell one from another and have one more set of
        -: 4904:       commands and special characters.  */
        -: 4905:  static char sh_chars_dos[] = "*?[];|<>%^&()";
        -: 4906:  static char *sh_cmds_dos[] = { "break", "call", "cd", "chcp", "chdir", "cls",
        -: 4907:				 "copy", "ctty", "date", "del", "dir", "echo",
        -: 4908:				 "erase", "exit", "for", "goto", "if", "md",
        -: 4909:				 "mkdir", "path", "pause", "prompt", "rd",
        -: 4910:				 "rmdir", "rem", "ren", "rename", "set",
        -: 4911:				 "shift", "time", "type", "ver", "verify",
        -: 4912:				 "vol", ":", 0 };
        -: 4913:
        -: 4914:  static char sh_chars_sh[]  = "#;\"*?[]&|<>(){}$`^";
        -: 4915:  static char *sh_cmds_sh[]  = { "cd", "eval", "exec", "exit", "login",
        -: 4916:				 "logout", "set", "umask", "wait", "while",
        -: 4917:				 "for", "case", "if", ":", ".", "break",
        -: 4918:				 "continue", "export", "read", "readonly",
        -: 4919:				 "shift", "times", "trap", "switch", 0 };
        -: 4920:
        -: 4921:  char *sh_chars;
        -: 4922:  char **sh_cmds;
        -: 4923:#else
        -: 4924:#ifdef _AMIGA
        -: 4925:  static char sh_chars[] = "#;\"|<>()?*$`";
        -: 4926:  static char *sh_cmds[] = { "cd", "eval", "if", "delete", "echo", "copy",
        -: 4927:			     "rename", "set", "setenv", "date", "makedir",
        -: 4928:			     "skip", "else", "endif", "path", "prompt",
        -: 4929:			     "unset", "unsetenv", "version",
        -: 4930:			     0 };
        -: 4931:#else
        -: 4932:#ifdef WINDOWS32
        -: 4933:  static char sh_chars_dos[] = "\"|<>";
        -: 4934:  static char *sh_cmds_dos[] = { "break", "call", "cd", "chcp", "chdir", "cls",
        -: 4935:			     "copy", "ctty", "date", "del", "dir", "echo",
        -: 4936:			     "erase", "exit", "for", "goto", "if", "if", "md",
        -: 4937:			     "mkdir", "path", "pause", "prompt", "rem", "ren",
        -: 4938:			     "rename", "set", "shift", "time", "type",
        -: 4939:			     "ver", "verify", "vol", ":", 0 };
        -: 4940:  static char sh_chars_sh[] = "#;\"*?[]&|<>(){}$`^";
        -: 4941:  static char *sh_cmds_sh[] = { "cd", "eval", "exec", "exit", "login",
        -: 4942:			     "logout", "set", "umask", "wait", "while", "for",
        -: 4943:			     "case", "if", ":", ".", "break", "continue",
        -: 4944:			     "export", "read", "readonly", "shift", "times",
        -: 4945:			     "trap", "switch", "test", 0 };
        -: 4946:  char*  sh_chars;
        -: 4947:  char** sh_cmds;
        -: 4948:#else  /* WINDOWS32 */
        -: 4949:  static char sh_chars[] = "#;\"*?[]&|<>(){}$`^";
        -: 4950:  static char *sh_cmds[] = { "cd", "eval", "exec", "exit", "login",
        -: 4951:			     "logout", "set", "umask", "wait", "while", "for",
        -: 4952:			     "case", "if", ":", ".", "break", "continue",
        -: 4953:			     "export", "read", "readonly", "shift", "times",
        -: 4954:			     "trap", "switch", 0 };
        -: 4955:#endif /* WINDOWS32 */
        -: 4956:#endif /* Amiga */
        -: 4957:#endif /* __MSDOS__ */
        -: 4958:  register int i;
        -: 4959:  register char *p;
        -: 4960:  register char *ap;
        -: 4961:  char *end;
        -: 4962:  int instring, word_has_equals, seen_nonequals, last_argument_was_empty;
        4: 4963:  char **new_argv = 0;
        -: 4964:#ifdef WINDOWS32
        -: 4965:  int slow_flag = 0;
        -: 4966:
        -: 4967:  if (no_default_sh_exe) {
        -: 4968:    sh_cmds = sh_cmds_dos;
        -: 4969:    sh_chars = sh_chars_dos;
        -: 4970:  } else {
        -: 4971:    sh_cmds = sh_cmds_sh;
        -: 4972:    sh_chars = sh_chars_sh;
        -: 4973:  }
        -: 4974:#endif /* WINDOWS32 */
        -: 4975:
        4: 4976:  if (restp != NULL)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 4977:    *restp = NULL;
        -: 4978:
        -: 4979:  /* Make sure not to bother processing an empty line.  */
        4: 4980:  while (isblank (*line))
branch  0 taken 0
branch  1 taken 4 (fallthrough)
    #####: 4981:    ++line;
        4: 4982:  if (*line == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 4983:    return 0;
        -: 4984:
        -: 4985:  /* See if it is safe to parse commands internally.  */
        4: 4986:  if (shell == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 4987:    shell = default_shell;
        -: 4988:#ifdef WINDOWS32
        -: 4989:  else if (strcmp (shell, default_shell))
        -: 4990:  {
        -: 4991:    char *s1 = _fullpath(NULL, shell, 0);
        -: 4992:    char *s2 = _fullpath(NULL, default_shell, 0);
        -: 4993:
        -: 4994:    slow_flag = strcmp((s1 ? s1 : ""), (s2 ? s2 : ""));
        -: 4995:
        -: 4996:    if (s1);
        -: 4997:      free(s1);
        -: 4998:    if (s2);
        -: 4999:      free(s2);
        -: 5000:  }
        -: 5001:  if (slow_flag)
        -: 5002:    goto slow;
        -: 5003:#else  /* not WINDOWS32 */
        -: 5004:#ifdef __MSDOS__
        -: 5005:  else if (stricmp (shell, default_shell))
        -: 5006:    {
        -: 5007:      extern int _is_unixy_shell (const char *_path);
        -: 5008:
        -: 5009:      message (1, "$SHELL changed (was `%s', now `%s')", default_shell, shell);
        -: 5010:      unixy_shell = _is_unixy_shell (shell);
        -: 5011:      default_shell = shell;
        -: 5012:    }
        -: 5013:  if (unixy_shell)
        -: 5014:    {
        -: 5015:      sh_chars = sh_chars_sh;
        -: 5016:      sh_cmds  = sh_cmds_sh;
        -: 5017:    }
        -: 5018:  else
        -: 5019:    {
        -: 5020:      sh_chars = sh_chars_dos;
        -: 5021:      sh_cmds  = sh_cmds_dos;
        -: 5022:    }
        -: 5023:#else  /* not __MSDOS__ */
        4: 5024:  else if (strcmp (shell, default_shell))
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####: 5025:    goto slow;
        -: 5026:#endif /* not __MSDOS__ */
        -: 5027:#endif /* not WINDOWS32 */
        -: 5028:
        4: 5029:  if (ifs != 0)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
       4*: 5030:    for (ap = ifs; *ap != '\0'; ++ap)
branch  0 taken 0
branch  1 taken 4 (fallthrough)
    #####: 5031:      if (*ap != ' ' && *ap != '\t' && *ap != '\n')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5032:	goto slow;
        -: 5033:
        4: 5034:  i = strlen (line) + 1;
        -: 5035:
        -: 5036:  /* More than 1 arg per character is impossible.  */
        4: 5037:  new_argv = (char **) xmalloc (i * sizeof (char *));
call    0 returned 4
        -: 5038:
        -: 5039:  /* All the args can fit in a buffer as big as LINE is.   */
        4: 5040:  ap = new_argv[0] = (char *) xmalloc (i);
call    0 returned 4
        4: 5041:  end = ap + i;
        -: 5042:
        -: 5043:  /* I is how many complete arguments have been found.  */
        4: 5044:  i = 0;
        4: 5045:  instring = word_has_equals = seen_nonequals = last_argument_was_empty = 0;
      324: 5046:  for (p = line; *p != '\0'; ++p)
branch  0 taken 320
branch  1 taken 4 (fallthrough)
        -: 5047:    {
      320: 5048:      if (ap > end)
branch  0 taken 0 (fallthrough)
branch  1 taken 320
    #####: 5049:	abort ();
call    0 never executed
        -: 5050:
      320: 5051:      if (instring)
branch  0 taken 0 (fallthrough)
branch  1 taken 320
        -: 5052:	{
    #####: 5053:	string_char:
        -: 5054:	  /* Inside a string, just copy any char except a closing quote
        -: 5055:	     or a backslash-newline combination.  */
    #####: 5056:	  if (*p == instring)
branch  0 never executed
branch  1 never executed
        -: 5057:	    {
    #####: 5058:	      instring = 0;
    #####: 5059:	      if (ap == new_argv[0] || *(ap-1) == '\0')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5060:		last_argument_was_empty = 1;
        -: 5061:	    }
    #####: 5062:	  else if (*p == '\\' && p[1] == '\n')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5063:	    goto swallow_escaped_newline;
    #####: 5064:	  else if (*p == '\n' && restp != NULL)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 5065:	    {
        -: 5066:	      /* End of the command line.  */
    #####: 5067:	      *restp = p;
    #####: 5068:	      goto end_of_line;
        -: 5069:	    }
        -: 5070:	  /* Backslash, $, and ` are special inside double quotes.
        -: 5071:	     If we see any of those, punt.
        -: 5072:	     But on MSDOS, if we use COMMAND.COM, double and single
        -: 5073:	     quotes have the same effect.  */
    #####: 5074:	  else if (instring == '"' && index ("\\$`", *p) != 0 && unixy_shell)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5075:	    goto slow;
        -: 5076:	  else
    #####: 5077:	    *ap++ = *p;
        -: 5078:	}
      320: 5079:      else if (index (sh_chars, *p) != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 320
        -: 5080:	/* Not inside a string, but it's a special char.  */
    #####: 5081:	goto slow;
        -: 5082:#ifdef  __MSDOS__
        -: 5083:      else if (*p == '.' && p[1] == '.' && p[2] == '.' && p[3] != '.')
        -: 5084:	/* `...' is a wildcard in DJGPP.  */
        -: 5085:	goto slow;
        -: 5086:#endif
        -: 5087:      else
        -: 5088:	/* Not a special char.  */
      320: 5089:	switch (*p)
branch  0 taken 10
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 32
branch  5 taken 278
        -: 5090:	  {
       10: 5091:	  case '=':
        -: 5092:	    /* Equals is a special character in leading words before the
        -: 5093:	       first word with no equals sign in it.  This is not the case
        -: 5094:	       with sh -k, but we never get here when using nonstandard
        -: 5095:	       shell flags.  */
      10*: 5096:	    if (! seen_nonequals && unixy_shell)
branch  0 taken 0 (fallthrough)
branch  1 taken 10
branch  2 never executed
branch  3 never executed
    #####: 5097:	      goto slow;
       10: 5098:	    word_has_equals = 1;
       10: 5099:	    *ap++ = '=';
       10: 5100:	    break;
        -: 5101:
    #####: 5102:	  case '\\':
        -: 5103:	    /* Backslash-newline combinations are eaten.  */
    #####: 5104:	    if (p[1] == '\n')
branch  0 never executed
branch  1 never executed
        -: 5105:	      {
    #####: 5106:	      swallow_escaped_newline:
        -: 5107:
        -: 5108:		/* Eat the backslash, the newline, and following whitespace,
        -: 5109:		   replacing it all with a single space.  */
    #####: 5110:		p += 2;
        -: 5111:
        -: 5112:		/* If there is a tab after a backslash-newline,
        -: 5113:		   remove it from the source line which will be echoed,
        -: 5114:		   since it was most likely used to line
        -: 5115:		   up the continued line with the previous one.  */
    #####: 5116:		if (*p == '\t')
branch  0 never executed
branch  1 never executed
    #####: 5117:		  strcpy (p, p + 1);
        -: 5118:
    #####: 5119:		if (instring)
branch  0 never executed
branch  1 never executed
    #####: 5120:		  goto string_char;
        -: 5121:		else
        -: 5122:		  {
    #####: 5123:		    if (ap != new_argv[i])
branch  0 never executed
branch  1 never executed
        -: 5124:		      /* Treat this as a space, ending the arg.
        -: 5125:			 But if it's at the beginning of the arg, it should
        -: 5126:			 just get eaten, rather than becoming an empty arg. */
    #####: 5127:		      goto end_of_arg;
        -: 5128:		    else
    #####: 5129:		      p = next_token (p) - 1;
call    0 never executed
        -: 5130:		  }
        -: 5131:	      }
    #####: 5132:	    else if (p[1] != '\0')
branch  0 never executed
branch  1 never executed
        -: 5133:	      /* Copy and skip the following char.  */
    #####: 5134:	      *ap++ = *++p;
    #####: 5135:	    break;
        -: 5136:
    #####: 5137:	  case '\'':
        -: 5138:	  case '"':
    #####: 5139:	    instring = *p;
    #####: 5140:	    break;
        -: 5141:
    #####: 5142:	  case '\n':
    #####: 5143:	    if (restp != NULL)
branch  0 never executed
branch  1 never executed
        -: 5144:	      {
        -: 5145:		/* End of the command line.  */
    #####: 5146:		*restp = p;
    #####: 5147:		goto end_of_line;
        -: 5148:	      }
        -: 5149:	    else
        -: 5150:	      /* Newlines are not special.  */
    #####: 5151:	      *ap++ = '\n';
    #####: 5152:	    break;
        -: 5153:
        -: 5154:	  case ' ':
        -: 5155:	  case '\t':
       32: 5156:	  end_of_arg:
        -: 5157:	    /* We have the end of an argument.
        -: 5158:	       Terminate the text of the argument.  */
       32: 5159:	    *ap++ = '\0';
       32: 5160:	    new_argv[++i] = ap;
       32: 5161:	    last_argument_was_empty = 0;
        -: 5162:
        -: 5163:	    /* Update SEEN_NONEQUALS, which tells us if every word
        -: 5164:	       heretofore has contained an `='.  */
       32: 5165:	    seen_nonequals |= ! word_has_equals;
       32: 5166:	    if (word_has_equals && ! seen_nonequals)
branch  0 taken 10 (fallthrough)
branch  1 taken 22
branch  2 taken 0 (fallthrough)
branch  3 taken 10
        -: 5167:	      /* An `=' in a word before the first
        -: 5168:		 word without one is magical.  */
    #####: 5169:	      goto slow;
       32: 5170:	    word_has_equals = 0; /* Prepare for the next word.  */
        -: 5171:
        -: 5172:	    /* If this argument is the command name,
        -: 5173:	       see if it is a built-in shell command.
        -: 5174:	       If so, have the shell handle it.  */
       32: 5175:	    if (i == 1)
branch  0 taken 4 (fallthrough)
branch  1 taken 28
        -: 5176:	      {
        -: 5177:		register int j;
      100: 5178:		for (j = 0; sh_cmds[j] != 0; ++j)
branch  0 taken 96
branch  1 taken 4 (fallthrough)
      96*: 5179:		  if (streq (sh_cmds[j], new_argv[0]))
branch  0 taken 96 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 96
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5180:		    goto slow;
        -: 5181:	      }
        -: 5182:
        -: 5183:	    /* Ignore multiple whitespace chars.  */
       32: 5184:	    p = next_token (p);
call    0 returned 32
        -: 5185:	    /* Next iteration should examine the first nonwhite char.  */
       32: 5186:	    --p;
       32: 5187:	    break;
        -: 5188:
      278: 5189:	  default:
      278: 5190:	    *ap++ = *p;
      278: 5191:	    break;
        -: 5192:	  }
        -: 5193:    }
        4: 5194: end_of_line:
        -: 5195:
        4: 5196:  if (instring)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -: 5197:    /* Let the shell deal with an unterminated quote.  */
    #####: 5198:    goto slow;
        -: 5199:
        -: 5200:  /* Terminate the last argument and the argument list.  */
        -: 5201:
        4: 5202:  *ap = '\0';
        4: 5203:  if (new_argv[i][0] != '\0' || last_argument_was_empty)
branch  0 taken 2 (fallthrough)
branch  1 taken 2
branch  2 taken 0 (fallthrough)
branch  3 taken 2
        2: 5204:    ++i;
        4: 5205:  new_argv[i] = 0;
        -: 5206:
        4: 5207:  if (i == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -: 5208:    {
        -: 5209:      register int j;
    #####: 5210:      for (j = 0; sh_cmds[j] != 0; ++j)
branch  0 never executed
branch  1 never executed
    #####: 5211:	if (streq (sh_cmds[j], new_argv[0]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5212:	  goto slow;
        -: 5213:    }
        -: 5214:
        4: 5215:  if (new_argv[0] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -: 5216:    /* Line was empty.  */
    #####: 5217:    return 0;
        -: 5218:  else
        4: 5219:    return new_argv;
        -: 5220:
    #####: 5221: slow:;
        -: 5222:  /* We must use the shell.  */
        -: 5223:
    #####: 5224:  if (new_argv != 0)
branch  0 never executed
branch  1 never executed
        -: 5225:    {
        -: 5226:      /* Free the old argument list we were working on.  */
    #####: 5227:      free (new_argv[0]);
    #####: 5228:      free ((void *)new_argv);
        -: 5229:    }
        -: 5230:
        -: 5231:#ifdef __MSDOS__
        -: 5232:  execute_by_shell = 1;	/* actually, call `system' if shell isn't unixy */
        -: 5233:#endif
        -: 5234:
        -: 5235:#ifdef _AMIGA
        -: 5236:  {
        -: 5237:    char *ptr;
        -: 5238:    char *buffer;
        -: 5239:    char *dptr;
        -: 5240:
        -: 5241:    buffer = (char *)xmalloc (strlen (line)+1);
        -: 5242:
        -: 5243:    ptr = line;
        -: 5244:    for (dptr=buffer; *ptr; )
        -: 5245:    {
        -: 5246:      if (*ptr == '\\' && ptr[1] == '\n')
        -: 5247:	ptr += 2;
        -: 5248:      else if (*ptr == '@') /* Kludge: multiline commands */
        -: 5249:      {
        -: 5250:	ptr += 2;
        -: 5251:	*dptr++ = '\n';
        -: 5252:      }
        -: 5253:      else
        -: 5254:	*dptr++ = *ptr++;
        -: 5255:    }
        -: 5256:    *dptr = 0;
        -: 5257:
        -: 5258:    new_argv = (char **) xmalloc(2 * sizeof(char *));
        -: 5259:    new_argv[0] = buffer;
        -: 5260:    new_argv[1] = 0;
        -: 5261:  }
        -: 5262:#else	/* Not Amiga  */
        -: 5263:#ifdef WINDOWS32
        -: 5264:  /*
        -: 5265:   * Not eating this whitespace caused things like
        -: 5266:   *
        -: 5267:   *    sh -c "\n"
        -: 5268:   *
        -: 5269:   * which gave the shell fits. I think we have to eat
        -: 5270:   * whitespace here, but this code should be considered
        -: 5271:   * suspicious if things start failing....
        -: 5272:   */
        -: 5273:
        -: 5274:  /* Make sure not to bother processing an empty line.  */
        -: 5275:  while (isspace (*line))
        -: 5276:    ++line;
        -: 5277:  if (*line == '\0')
        -: 5278:    return 0;
        -: 5279:
        -: 5280:  /*
        -: 5281:   * only come here if no sh.exe command
        -: 5282:   */
        -: 5283:  if (no_default_sh_exe)
        -: 5284:  {
        -: 5285:    FILE *batch;
        -: 5286:    dos_batch_file = 1;
        -: 5287:    if (dos_bname == 0)
        -: 5288:    {
        -: 5289:      dos_bname = tempnam (".", "mk");
        -: 5290:      for (i = 0; dos_bname[i] != '\0'; ++i)
        -: 5291:	if (dos_bname[i] == '/')
        -: 5292:	  dos_bname[i] = '\\';
        -: 5293:      dos_bename = (char *) xmalloc (strlen (dos_bname) + 5);
        -: 5294:      strcpy (dos_bename, dos_bname);
        -: 5295:      strcat (dos_bname, ".bat");
        -: 5296:      strcat (dos_bename, ".err");
        -: 5297:    }
        -: 5298:    batch = fopen (dos_bename, "w"); /* Create a file.  */
        -: 5299:    if (batch != NULL)
        -: 5300:      fclose (batch);
        -: 5301:    batch = fopen (dos_bname, "w");
        -: 5302:    fputs ("@echo off\n", batch);
        -: 5303:    fputs (line, batch);
        -: 5304:    fprintf (batch, "\nif errorlevel 1 del %s\n", dos_bename);
        -: 5305:    fclose (batch);
        -: 5306:    new_argv = (char **) xmalloc(2 * sizeof(char *));
        -: 5307:    new_argv[0] = strdup (dos_bname);
        -: 5308:    new_argv[1] = 0;
        -: 5309:  }
        -: 5310:  else
        -: 5311:#endif /* WINDOWS32 */
        -: 5312:  {
        -: 5313:    /* SHELL may be a multi-word command.  Construct a command line
        -: 5314:       "SHELL -c LINE", with all special chars in LINE escaped.
        -: 5315:       Then recurse, expanding this command line to get the final
        -: 5316:       argument list.  */
        -: 5317:
    #####: 5318:    unsigned int shell_len = strlen (shell);
        -: 5319:    static char minus_c[] = " -c ";
    #####: 5320:    unsigned int line_len = strlen (line);
        -: 5321:
    #####: 5322:    char *new_line = (char *) alloca (shell_len + (sizeof (minus_c) - 1)
        -: 5323:				      + (line_len * 2) + 1);
        -: 5324:
    #####: 5325:    ap = new_line;
    #####: 5326:    bcopy (shell, ap, shell_len);
        -: 5327:#ifndef F_AA_2
    #####: 5328:    ap += shell_len;
    #####: 5329:    bcopy (minus_c, ap, sizeof (minus_c) - 1);
    #####: 5330:    ap += sizeof (minus_c) - 1;
        -: 5331:#else
        -: 5332:    ap += sizeof (minus_c) - 1;
        -: 5333:    bcopy (minus_c, ap, sizeof (minus_c) - 1);
        -: 5334:    ap += shell_len;
        -: 5335:#endif
    #####: 5336:    for (p = line; *p != '\0'; ++p)
branch  0 never executed
branch  1 never executed
        -: 5337:      {
    #####: 5338:	if (restp != NULL && *p == '\n')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 5339:	  {
    #####: 5340:	    *restp = p;
    #####: 5341:	    break;
        -: 5342:	  }
    #####: 5343:	else if (*p == '\\' && p[1] == '\n')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 5344:	  {
        -: 5345:	    /* Eat the backslash, the newline, and following whitespace,
        -: 5346:	       replacing it all with a single space (which is escaped
        -: 5347:	       from the shell).  */
    #####: 5348:	    p += 2;
        -: 5349:
        -: 5350:	    /* If there is a tab after a backslash-newline,
        -: 5351:	       remove it from the source line which will be echoed,
        -: 5352:	       since it was most likely used to line
        -: 5353:	       up the continued line with the previous one.  */
    #####: 5354:	    if (*p == '\t')
branch  0 never executed
branch  1 never executed
    #####: 5355:	      bcopy (p + 1, p, strlen (p));
        -: 5356:
    #####: 5357:	    p = next_token (p);
call    0 never executed
    #####: 5358:	    --p;
    #####: 5359:            if (unixy_shell)
branch  0 never executed
branch  1 never executed
    #####: 5360:              *ap++ = '\\';
    #####: 5361:	    *ap++ = ' ';
    #####: 5362:	    continue;
        -: 5363:	  }
        -: 5364:
        -: 5365:        /* DOS shells don't know about backslash-escaping.  */
    #####: 5366:	if (unixy_shell &&
branch  0 never executed
branch  1 never executed
    #####: 5367:            (*p == '\\' || *p == '\'' || *p == '"'
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5368:             || isspace (*p)
branch  0 never executed
branch  1 never executed
    #####: 5369:             || index (sh_chars, *p) != 0))
branch  0 never executed
branch  1 never executed
    #####: 5370:	  *ap++ = '\\';
        -: 5371:#ifdef __MSDOS__
        -: 5372:        else if (unixy_shell && strncmp (p, "...", 3) == 0)
        -: 5373:          {
        -: 5374:            /* The case of `...' wildcard again.  */
        -: 5375:            strcpy (ap, "\\.\\.\\");
        -: 5376:            ap += 5;
        -: 5377:            p  += 2;
        -: 5378:          }
        -: 5379:#endif
    #####: 5380:	*ap++ = *p;
        -: 5381:      }
    #####: 5382:    if (ap == new_line + shell_len + sizeof (minus_c) - 1)
branch  0 never executed
branch  1 never executed
        -: 5383:      /* Line was empty.  */
    #####: 5384:      return 0;
    #####: 5385:    *ap = '\0';
        -: 5386:
    #####: 5387:    if (unixy_shell)
branch  0 never executed
branch  1 never executed
    #####: 5388:      new_argv = construct_command_argv_internal (new_line, (char **) NULL,
call    0 never executed
        -: 5389:                                                  (char *) 0, (char *) 0);
        -: 5390:#ifdef  __MSDOS__
        -: 5391:    else
        -: 5392:      {
        -: 5393:      /* With MSDOS shells, we must construct the command line here
        -: 5394:         instead of recursively calling ourselves, because we
        -: 5395:         cannot backslash-escape the special characters (see above).  */
        -: 5396:      new_argv = (char **) xmalloc (sizeof (char *));
        -: 5397:      line_len = strlen (new_line) - shell_len - sizeof (minus_c) + 1;
        -: 5398:      new_argv[0] = xmalloc (line_len + 1);
        -: 5399:      strncpy (new_argv[0],
        -: 5400:               new_line + shell_len + sizeof (minus_c) - 1, line_len);
        -: 5401:      new_argv[0][line_len] = '\0';
        -: 5402:      }
        -: 5403:#endif
        -: 5404:  }
        -: 5405:#endif	/* ! AMIGA */
        -: 5406:
    #####: 5407:  return new_argv;
        -: 5408:}
        -: 5409:
        -: 5410:/* Figure out the argument list necessary to run LINE as a command.  Try to
        -: 5411:   avoid using a shell.  This routine handles only ' quoting, and " quoting
        -: 5412:   when no backslash, $ or ` characters are seen in the quotes.  Starting
        -: 5413:   quotes may be escaped with a backslash.  If any of the characters in
        -: 5414:   sh_chars[] is seen, or any of the builtin commands listed in sh_cmds[]
        -: 5415:   is the first word of a line, the shell is used.
        -: 5416:
        -: 5417:   If RESTP is not NULL, *RESTP is set to point to the first newline in LINE.
        -: 5418:   If *RESTP is NULL, newlines will be ignored.
        -: 5419:
        -: 5420:   FILE is the target whose commands these are.  It is used for
        -: 5421:   variable expansion for $(SHELL) and $(IFS).  */
        -: 5422:
        -: 5423:char **
function construct_command_argv called 4 returned 100% blocks executed 100%
        4: 5424:construct_command_argv (line, restp, file)
        -: 5425:     char *line, **restp;
        -: 5426:     struct file *file;
        -: 5427:{
        -: 5428:  char *shell, *ifs;
        -: 5429:  char **argv;
        -: 5430:
        -: 5431:  {
        -: 5432:    /* Turn off --warn-undefined-variables while we expand SHELL and IFS.  */
        4: 5433:    int save = warn_undefined_variables_flag;
        4: 5434:    warn_undefined_variables_flag = 0;
        -: 5435:
        4: 5436:    shell = allocated_variable_expand_for_file ("$(SHELL)", file);
call    0 returned 4
        -: 5437:#ifdef WINDOWS32
        -: 5438:    /*
        -: 5439:     * Convert to forward slashes so that construct_command_argv_internal()
        -: 5440:     * is not confused.
        -: 5441:     */
        -: 5442:    if (shell) {
        -: 5443:      char *p = w32ify(shell, 0);
        -: 5444:      strcpy(shell, p);
        -: 5445:    }
        -: 5446:#endif
        4: 5447:    ifs = allocated_variable_expand_for_file ("$(IFS)", file);
call    0 returned 4
        -: 5448:
        4: 5449:    warn_undefined_variables_flag = save;
        -: 5450:  }
        -: 5451:
        4: 5452:  argv = construct_command_argv_internal (line, restp, shell, ifs);
call    0 returned 4
        -: 5453:
        4: 5454:  free (shell);
        4: 5455:  free (ifs);
        -: 5456:
        4: 5457:  return argv;
        -: 5458:}
        -: 5459:#endif /* !VMS */
        -: 5460:
        -: 5461:#if !defined(HAVE_DUP2) && !defined(_AMIGA)
        -: 5462:int
        -: 5463:dup2 (old, new)
        -: 5464:     int old, new;
        -: 5465:{
        -: 5466:  int fd;
        -: 5467:
        -: 5468:  (void) close (new);
        -: 5469:  fd = dup (old);
        -: 5470:  if (fd != new)
        -: 5471:    {
        -: 5472:      (void) close (fd);
        -: 5473:      errno = EMFILE;
        -: 5474:      return -1;
        -: 5475:    }
        -: 5476:
        -: 5477:  return fd;
        -: 5478:}
        -: 5479:#endif /* !HAPE_DUP2 && !_AMIGA */
        -: 5480:
        -: 5481:
        -: 5482:
        -: 5483:/*************************************************************
        -: 5484:  ============================================================
        -: 5485:  ************************************************************
        -: 5486:  ============================================================
        -: 5487:  ************************************************************
        -: 5488:                         dir.c
        -: 5489:  ************************************************************
        -: 5490:  ============================================================
        -: 5491:  ************************************************************
        -: 5492:  ============================================================
        -: 5493:  *************************************************************/
        -: 5494:
        -: 5495:/* Directory hashing for GNU Make.
        -: 5496:Copyright (C) 1988,89,91,92,93,94,95,96,97 Free Software Foundation, Inc.
        -: 5497:This file is part of GNU Make.
        -: 5498:
        -: 5499:GNU Make is free software; you can redistribute it and/or modify
        -: 5500:it under the terms of the GNU General Public License as published by
        -: 5501:the Free Software Foundation; either version 2, or (at your option)
        -: 5502:any later version.
        -: 5503:
        -: 5504:GNU Make is distributed in the hope that it will be useful,
        -: 5505:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 5506:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 5507:GNU General Public License for more details.
        -: 5508:
        -: 5509:You should have received a copy of the GNU General Public License
        -: 5510:along with GNU Make; see the file COPYING.  If not, write to
        -: 5511:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 5512:
        -: 5513:#include "make.h"
        -: 5514:#undef stderr
        -: 5515:#define stderr stdout
        -: 5516:
        -: 5517:#ifdef	HAVE_DIRENT_H
        -: 5518:# include <dirent.h>
        -: 5519:#undef stderr
        -: 5520:#define stderr stdout
        -: 5521:# define NAMLEN(dirent) strlen((dirent)->d_name)
        -: 5522:#else
        -: 5523:# define dirent direct
        -: 5524:# define NAMLEN(dirent) (dirent)->d_namlen
        -: 5525:# ifdef HAVE_SYS_NDIR_H
        -: 5526:#  include <sys/ndir.h>
        -: 5527:#undef stderr
        -: 5528:#define stderr stdout
        -: 5529:# endif
        -: 5530:# ifdef HAVE_SYS_DIR_H
        -: 5531:#  include <sys/dir.h>
        -: 5532:#undef stderr
        -: 5533:#define stderr stdout
        -: 5534:# endif
        -: 5535:# ifdef HAVE_NDIR_H
        -: 5536:#  include <ndir.h>
        -: 5537:#undef stderr
        -: 5538:#define stderr stdout
        -: 5539:# endif
        -: 5540:# ifdef HAVE_VMSDIR_H
        -: 5541:#  include "vmsdir.h"
        -: 5542:#undef stderr
        -: 5543:#define stderr stdout
        -: 5544:# endif /* HAVE_VMSDIR_H */
        -: 5545:#endif
        -: 5546:
        -: 5547:/* In GNU systems, <dirent.h> defines this macro for us.  */
        -: 5548:#ifdef _D_NAMLEN
        -: 5549:#undef NAMLEN
        -: 5550:#define NAMLEN(d) _D_NAMLEN(d)
        -: 5551:#endif
        -: 5552:
        -: 5553:#if (defined (POSIX) || defined (WINDOWS32)) && !defined (__GNU_LIBRARY__)
        -: 5554:/* Posix does not require that the d_ino field be present, and some
        -: 5555:   systems do not provide it. */
        -: 5556:#define REAL_DIR_ENTRY(dp) 1
        -: 5557:#define FAKE_DIR_ENTRY(dp)
        -: 5558:#else
        -: 5559:#define REAL_DIR_ENTRY(dp) (dp->d_ino != 0)
        -: 5560:#define FAKE_DIR_ENTRY(dp) (dp->d_ino = 1)
        -: 5561:#endif /* POSIX */
        -: 5562:
        -: 5563:#ifdef __MSDOS__
        -: 5564:#include <ctype.h>
        -: 5565:#include <fcntl.h>
        -: 5566:#undef stderr
        -: 5567:#define stderr stdout
        -: 5568:
        -: 5569:/* If it's MSDOS that doesn't have _USE_LFN, disable LFN support.  */
        -: 5570:#ifndef _USE_LFN
        -: 5571:#define _USE_LFN 0
        -: 5572:#endif
        -: 5573:
        -: 5574:static char *
        -: 5575:dosify (filename)
        -: 5576:     char *filename;
        -: 5577:{
        -: 5578:  static char dos_filename[14];
        -: 5579:  char *df;
        -: 5580:  int i;
        -: 5581:
        -: 5582:  if (filename == 0 || _USE_LFN)
        -: 5583:    return filename;
        -: 5584:
        -: 5585:  /* FIXME: what about filenames which violate
        -: 5586:     8+3 constraints, like "config.h.in", or ".emacs"?  */
        -: 5587:  if (strpbrk (filename, "\"*+,;<=>?[\\]|") != 0)
        -: 5588:    return filename;
        -: 5589:
        -: 5590:  df = dos_filename;
        -: 5591:
        -: 5592:  /* First, transform the name part.  */
        -: 5593:  for (i = 0; *filename != '\0' && i < 8 && *filename != '.'; ++i)
        -: 5594:    *df++ = tolower (*filename++);
        -: 5595:
        -: 5596:  /* Now skip to the next dot.  */
        -: 5597:  while (*filename != '\0' && *filename != '.')
        -: 5598:    ++filename;
        -: 5599:  if (*filename != '\0')
        -: 5600:    {
        -: 5601:      *df++ = *filename++;
        -: 5602:      for (i = 0; *filename != '\0' && i < 3 && *filename != '.'; ++i)
        -: 5603:	*df++ = tolower (*filename++);
        -: 5604:    }
        -: 5605:
        -: 5606:  /* Look for more dots.  */
        -: 5607:  while (*filename != '\0' && *filename != '.')
        -: 5608:    ++filename;
        -: 5609:  if (*filename == '.')
        -: 5610:    return filename;
        -: 5611:  *df = 0;
        -: 5612:  return dos_filename;
        -: 5613:}
        -: 5614:#endif /* __MSDOS__ */
        -: 5615:
        -: 5616:#ifdef WINDOWS32
        -: 5617:#include "pathstuff.h"
        -: 5618:#undef stderr
        -: 5619:#define stderr stdout
        -: 5620:#endif
        -: 5621:
        -: 5622:#ifdef _AMIGA
        -: 5623:#include <ctype.h>
        -: 5624:#undef stderr
        -: 5625:#define stderr stdout
        -: 5626:
        -: 5627:static char *
        -: 5628:amigafy (filename)
        -: 5629:     char *filename;
        -: 5630:{
        -: 5631:  static char amiga_filename[136];
        -: 5632:  char *df;
        -: 5633:  int i;
        -: 5634:
        -: 5635:  if (filename == 0)
        -: 5636:    return 0;
        -: 5637:
        -: 5638:  df = amiga_filename;
        -: 5639:
        -: 5640:  /* First, transform the name part.  */
        -: 5641:  for (i = 0; *filename != '\0'; ++i)
        -: 5642:  {
        -: 5643:    *df++ = tolower (*filename);
        -: 5644:    ++filename;
        -: 5645:  }
        -: 5646:
        -: 5647:  *df = 0;
        -: 5648:
        -: 5649:  return amiga_filename;
        -: 5650:}
        -: 5651:#endif /* _AMIGA */
        -: 5652:
        -: 5653:#ifdef VMS
        -: 5654:
        -: 5655:static int
        -: 5656:vms_hash (name)
        -: 5657:    char *name;
        -: 5658:{
        -: 5659:  int h = 0;
        -: 5660:  int g;
        -: 5661:
        -: 5662:  while (*name)
        -: 5663:    {
        -: 5664:      h = (h << 4) + *name++;
        -: 5665:      g = h & 0xf0000000;
        -: 5666:      if (g)
        -: 5667:	{
        -: 5668:	  h = h ^ (g >> 24);
        -: 5669:	  h = h ^ g;
        -: 5670:	}
        -: 5671:    }
        -: 5672:  return h;
        -: 5673:}
        -: 5674:
        -: 5675:/* fake stat entry for a directory */
        -: 5676:static int
        -: 5677:vmsstat_dir (name, st)
        -: 5678:    char *name;
        -: 5679:    struct stat *st;
        -: 5680:{
        -: 5681:  char *s;
        -: 5682:  int h;
        -: 5683:  DIR *dir;
        -: 5684:
        -: 5685:  dir = opendir (name);
        -: 5686:  if (dir == 0)
        -: 5687:    return -1;
        -: 5688:#ifndef F_AA_10
        -: 5689:	closedir (dir);
        -: 5690:#endif
        -: 5691:  s = strchr (name, ':');	/* find device */
        -: 5692:  if (s)
        -: 5693:    {
        -: 5694:      *s++ = 0;
        -: 5695:      st->st_dev = (char *)vms_hash (name);
        -: 5696:      h = vms_hash (s);
        -: 5697:      *(s-1) = ':';
        -: 5698:    }
        -: 5699:  else
        -: 5700:    {
        -: 5701:      st->st_dev = 0;
        -: 5702:      s = name;
        -: 5703:      h = vms_hash (s);
        -: 5704:    }
        -: 5705:
        -: 5706:  st->st_ino[0] = h & 0xff;
        -: 5707:  st->st_ino[1] = h & 0xff00;
        -: 5708:  st->st_ino[2] = h >> 16;
        -: 5709:
        -: 5710:  return 0;
        -: 5711:}
        -: 5712:#endif /* VMS */
        -: 5713:
        -: 5714:/* Hash table of directories.  */
        -: 5715:
        -: 5716:#ifndef	DIRECTORY_BUCKETS
        -: 5717:#define DIRECTORY_BUCKETS 199
        -: 5718:#endif
        -: 5719:
        -: 5720:struct directory_contents
        -: 5721:  {
        -: 5722:    struct directory_contents *next;
        -: 5723:
        -: 5724:    dev_t dev;			/* Device and inode numbers of this dir.  */
        -: 5725:#ifdef WINDOWS32
        -: 5726:    /*
        -: 5727:     * Inode means nothing on WINDOWS32. Even file key information is
        -: 5728:     * unreliable because it is random per file open and undefined
        -: 5729:     * for remote filesystems. The most unique attribute I can
        -: 5730:     * come up with is the fully qualified name of the directory. Beware
        -: 5731:     * though, this is also unreliable. I'm open to suggestion on a better
        -: 5732:     * way to emulate inode.
        -: 5733:     */
        -: 5734:    char *path_key;
        -: 5735:    int   mtime;        /* controls check for stale directory cache */
        -: 5736:    int   fs_flags;     /* FS_FAT, FS_NTFS, ... */
        -: 5737:#define FS_FAT      0x1
        -: 5738:#define FS_NTFS     0x2
        -: 5739:#define FS_UNKNOWN  0x4
        -: 5740:#else
        -: 5741:#ifdef VMS
        -: 5742:    ino_t ino[3];
        -: 5743:#else
        -: 5744:    ino_t ino;
        -: 5745:#endif
        -: 5746:#endif /* WINDOWS32 */
        -: 5747:    struct dirfile **files;	/* Files in this directory.  */
        -: 5748:    DIR *dirstream;		/* Stream reading this directory.  */
        -: 5749:  };
        -: 5750:
        -: 5751:/* Table of directory contents hashed by device and inode number.  */
        -: 5752:static struct directory_contents *directories_contents[DIRECTORY_BUCKETS];
        -: 5753:
        -: 5754:struct directory
        -: 5755:  {
        -: 5756:    struct directory *next;
        -: 5757:
        -: 5758:    char *name;			/* Name of the directory.  */
        -: 5759:
        -: 5760:    /* The directory's contents.  This data may be shared by several
        -: 5761:       entries in the hash table, which refer to the same directory
        -: 5762:       (identified uniquely by `dev' and `ino') under different names.  */
        -: 5763:    struct directory_contents *contents;
        -: 5764:  };
        -: 5765:
        -: 5766:/* Table of directories hashed by name.  */
        -: 5767:static struct directory *table_of_directories[DIRECTORY_BUCKETS];
        -: 5768:
        -: 5769:
        -: 5770:/* Never have more than this many directories open at once.  */
        -: 5771:
        -: 5772:#define MAX_OPEN_DIRECTORIES 10
        -: 5773:
        -: 5774:static unsigned int open_directories = 0;
        -: 5775:
        -: 5776:
        -: 5777:/* Hash table of files in each directory.  */
        -: 5778:
        -: 5779:struct dirfile
        -: 5780:  {
        -: 5781:    struct dirfile *next;
        -: 5782:    char *name;			/* Name of the file.  */
        -: 5783:    char impossible;		/* This file is impossible.  */
        -: 5784:  };
        -: 5785:
        -: 5786:#ifndef	DIRFILE_BUCKETS
        -: 5787:#define DIRFILE_BUCKETS 107
        -: 5788:#endif
        -: 5789:
        -: 5790:static int dir_contents_file_exists_p PARAMS ((struct directory_contents *dir, char *filename));
        -: 5791:static struct directory *find_directory PARAMS ((char *name));
        -: 5792:
        -: 5793:/* Find the directory named NAME and return its `struct directory'.  */
        -: 5794:
        -: 5795:static struct directory *
function find_directory called 212227 returned 100% blocks executed 79%
   212227: 5796:find_directory (name)
        -: 5797:     register char *name;
        -: 5798:{
   212227: 5799:  register unsigned int hash = 0;
        -: 5800:  register char *p;
        -: 5801:  register struct directory *dir;
        -: 5802:#ifdef WINDOWS32
        -: 5803:  char* w32_path;
        -: 5804:  char  fs_label[BUFSIZ];
        -: 5805:  char  fs_type[BUFSIZ];
        -: 5806:  long  fs_serno;
        -: 5807:  long  fs_flags;
        -: 5808:  long  fs_len;
        -: 5809:#endif
        -: 5810:#ifdef VMS
        -: 5811:  if ((*name == '.') && (*(name+1) == 0))
        -: 5812:    name = "[]";
        -: 5813:  else
        -: 5814:    name = vmsify (name,1);
        -: 5815:#endif
        -: 5816:
  7069155: 5817:  for (p = name; *p != '\0'; ++p)
branch  0 taken 6856928
branch  1 taken 212227 (fallthrough)
  6856928: 5818:    HASHI (hash, *p);
   212227: 5819:  hash %= DIRECTORY_BUCKETS;
        -: 5820:
  212227*: 5821:  for (dir = table_of_directories[hash]; dir != 0; dir = dir->next)
branch  0 taken 208306
branch  1 taken 3921 (fallthrough)
   208306: 5822:    if (strieq (dir->name, name))
branch  0 taken 208306 (fallthrough)
branch  1 taken 0
branch  2 taken 208306 (fallthrough)
branch  3 taken 0
branch  4 taken 208306 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 208306
        -: 5823:      break;
        -: 5824:
   212227: 5825:  if (dir == 0)
branch  0 taken 3921 (fallthrough)
branch  1 taken 208306
        -: 5826:    {
        -: 5827:      struct stat st;
        -: 5828:
        -: 5829:      /* The directory was not found.  Create a new entry for it.  */
        -: 5830:
     3921: 5831:      dir = (struct directory *) xmalloc (sizeof (struct directory));
call    0 returned 3921
     3921: 5832:      dir->next = table_of_directories[hash];
     3921: 5833:      table_of_directories[hash] = dir;
     3921: 5834:      dir->name = savestring (name, p - name);
call    0 returned 3921
        -: 5835:
        -: 5836:      /* The directory is not in the name hash table.
        -: 5837:	 Find its device and inode numbers, and look it up by them.  */
        -: 5838:
        -: 5839:#ifdef VMS
        -: 5840:      if (vmsstat_dir (name, &st) < 0)
        -: 5841:#else
     3921: 5842:      if (stat (name, &st) < 0)
call    0 returned 3921
branch  1 taken 3899 (fallthrough)
branch  2 taken 22
        -: 5843:#endif
        -: 5844:	{
        -: 5845:	/* Couldn't stat the directory.  Mark this by
        -: 5846:	   setting the `contents' member to a nil pointer.  */
     3899: 5847:	  dir->contents = 0;
        -: 5848:	}
        -: 5849:      else
        -: 5850:	{
        -: 5851:	  /* Search the contents hash table; device and inode are the key.  */
        -: 5852:
        -: 5853:	  struct directory_contents *dc;
        -: 5854:
        -: 5855:#ifdef WINDOWS32
        -: 5856:          w32_path = w32ify(name, 1);
        -: 5857:          hash = ((unsigned int) st.st_dev << 16) | (unsigned int) st.st_ctime;
        -: 5858:#else
        -: 5859:#ifdef VMS
        -: 5860:	hash = ((unsigned int) st.st_dev << 16)
        -: 5861:		| ((unsigned int) st.st_ino[0]
        -: 5862:		+ (unsigned int) st.st_ino[1]
        -: 5863:		+ (unsigned int) st.st_ino[2]);
        -: 5864:#else
       22: 5865:	  hash = ((unsigned int) st.st_dev << 16) | (unsigned int) st.st_ino;
        -: 5866:#endif
        -: 5867:#endif
       22: 5868:	  hash %= DIRECTORY_BUCKETS;
        -: 5869:
      22*: 5870:	  for (dc = directories_contents[hash]; dc != 0; dc = dc->next)
branch  0 taken 0
branch  1 taken 22 (fallthrough)
        -: 5871:#ifdef WINDOWS32
        -: 5872:            if (!strcmp(dc->path_key, w32_path))
        -: 5873:#else
    #####: 5874:	    if (dc->dev == st.st_dev
branch  0 never executed
branch  1 never executed
        -: 5875:#ifdef VMS
        -: 5876:		&& dc->ino[0] == st.st_ino[0]
        -: 5877:		&& dc->ino[1] == st.st_ino[1]
        -: 5878:		&& dc->ino[2] == st.st_ino[2])
        -: 5879:#else
    #####: 5880:		 && dc->ino == st.st_ino)
branch  0 never executed
branch  1 never executed
        -: 5881:#endif
        -: 5882:#endif /* WINDOWS32 */
    #####: 5883:	      break;
        -: 5884:
       22: 5885:	  if (dc == 0)
branch  0 taken 22 (fallthrough)
branch  1 taken 0
        -: 5886:	    {
        -: 5887:	      /* Nope; this really is a directory we haven't seen before.  */
        -: 5888:
        -: 5889:	      dc = (struct directory_contents *)
       22: 5890:		xmalloc (sizeof (struct directory_contents));
call    0 returned 22
        -: 5891:
        -: 5892:	      /* Enter it in the contents hash table.  */
       22: 5893:	      dc->dev = st.st_dev;
        -: 5894:#ifdef WINDOWS32
        -: 5895:              dc->path_key = strdup(w32_path);
        -: 5896:              dc->mtime = st.st_mtime;
        -: 5897:
        -: 5898:              /*
        -: 5899:               * NTFS is the only WINDOWS32 filesystem that bumps mtime
        -: 5900:               * on a directory when files are added/deleted from
        -: 5901:               * a directory.
        -: 5902:               */
        -: 5903:              w32_path[3] = '\0';
        -: 5904:              if (GetVolumeInformation(w32_path,
        -: 5905:                     fs_label, sizeof (fs_label),
        -: 5906:                     &fs_serno, &fs_len,
        -: 5907:                     &fs_flags, fs_type, sizeof (fs_type)) == FALSE)
        -: 5908:                dc->fs_flags = FS_UNKNOWN;
        -: 5909:              else if (!strcmp(fs_type, "FAT"))
        -: 5910:                dc->fs_flags = FS_FAT;
        -: 5911:              else if (!strcmp(fs_type, "NTFS"))
        -: 5912:                dc->fs_flags = FS_NTFS;
        -: 5913:              else
        -: 5914:                dc->fs_flags = FS_UNKNOWN;
        -: 5915:#else
        -: 5916:#ifdef VMS
        -: 5917:	      dc->ino[0] = st.st_ino[0];
        -: 5918:	      dc->ino[1] = st.st_ino[1];
        -: 5919:	      dc->ino[2] = st.st_ino[2];
        -: 5920:#else
       22: 5921:	      dc->ino = st.st_ino;
        -: 5922:#endif
        -: 5923:#endif /* WINDOWS32 */
       22: 5924:	      dc->next = directories_contents[hash];
       22: 5925:	      directories_contents[hash] = dc;
        -: 5926:
       22: 5927:	      dc->dirstream = opendir (name);
call    0 returned 22
       22: 5928:	      if (dc->dirstream == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 22
        -: 5929:		{
        -: 5930:		/* Couldn't open the directory.  Mark this by
        -: 5931:		   setting the `files' member to a nil pointer.  */
    #####: 5932:		  dc->files = 0;
        -: 5933:		}
        -: 5934:	      else
        -: 5935:		{
        -: 5936:		  /* Allocate an array of buckets for files and zero it.  */
       22: 5937:		  dc->files = (struct dirfile **)
       22: 5938:		    xmalloc (sizeof (struct dirfile *) * DIRFILE_BUCKETS);
call    0 returned 22
       22: 5939:		  bzero ((char *) dc->files,
        -: 5940:			 sizeof (struct dirfile *) * DIRFILE_BUCKETS);
        -: 5941:
        -: 5942:		  /* Keep track of how many directories are open.  */
       22: 5943:		  ++open_directories;
       22: 5944:		  if (open_directories == MAX_OPEN_DIRECTORIES)
branch  0 taken 0 (fallthrough)
branch  1 taken 22
        -: 5945:		    /* We have too many directories open already.
        -: 5946:		       Read the entire directory and then close it.  */
    #####: 5947:		    (void) dir_contents_file_exists_p (dc, (char *) 0);
call    0 never executed
        -: 5948:		}
        -: 5949:	    }
        -: 5950:
        -: 5951:	  /* Point the name-hashed entry for DIR at its contents data.  */
       22: 5952:	  dir->contents = dc;
        -: 5953:	}
        -: 5954:    }
        -: 5955:
   212227: 5956:  return dir;
        -: 5957:}
        -: 5958:
        -: 5959:/* Return 1 if the name FILENAME is entered in DIR's hash table.
        -: 5960:   FILENAME must contain no slashes.  */
        -: 5961:
        -: 5962:static int
function dir_contents_file_exists_p called 93499 returned 100% blocks executed 88%
    93499: 5963:dir_contents_file_exists_p (dir, filename)
        -: 5964:     register struct directory_contents *dir;
        -: 5965:     register char *filename;
        -: 5966:{
        -: 5967:  register unsigned int hash;
        -: 5968:  register char *p;
        -: 5969:  register struct dirfile *df;
        -: 5970:  register struct dirent *d;
        -: 5971:#ifdef WINDOWS32
        -: 5972:  struct stat st;
        -: 5973:  int rehash = 0;
        -: 5974:#endif
        -: 5975:
    93499: 5976:  if (dir == 0 || dir->files == 0)
branch  0 taken 37044 (fallthrough)
branch  1 taken 56455
branch  2 taken 0 (fallthrough)
branch  3 taken 37044
        -: 5977:    {
        -: 5978:    /* The directory could not be stat'd or opened.  */
    56455: 5979:      return 0;
        -: 5980:    }
        -: 5981:#ifdef __MSDOS__
        -: 5982:  filename = dosify (filename);
        -: 5983:#endif
        -: 5984:
        -: 5985:#ifdef _AMIGA
        -: 5986:  filename = amigafy (filename);
        -: 5987:#endif
        -: 5988:
        -: 5989:#ifdef VMS
        -: 5990:  filename = vmsify (filename,0);
        -: 5991:#endif
        -: 5992:
    37044: 5993:  hash = 0;
    37044: 5994:  if (filename != 0)
branch  0 taken 37002 (fallthrough)
branch  1 taken 42
        -: 5995:    {
    37002: 5996:      if (*filename == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 37002
        -: 5997:	{
        -: 5998:	/* Checking if the directory exists.  */
    #####: 5999:	  return 1;
        -: 6000:	}
        -: 6001:
   569767: 6002:      for (p = filename; *p != '\0'; ++p)
branch  0 taken 532765
branch  1 taken 37002 (fallthrough)
   532765: 6003:	HASH (hash, *p);
    37002: 6004:      hash %= DIRFILE_BUCKETS;
        -: 6005:
        -: 6006:      /* Search the list of hashed files.  */
        -: 6007:
    40614: 6008:      for (df = dir->files[hash]; df != 0; df = df->next)
branch  0 taken 3630
branch  1 taken 36984 (fallthrough)
        -: 6009:	{
     3630: 6010:	  if (strieq (df->name, filename))
branch  0 taken 3630 (fallthrough)
branch  1 taken 0
branch  2 taken 173 (fallthrough)
branch  3 taken 3457
branch  4 taken 173 (fallthrough)
branch  5 taken 0
branch  6 taken 18 (fallthrough)
branch  7 taken 155
        -: 6011:	    {
       18: 6012:	      return !df->impossible;
        -: 6013:	    }
        -: 6014:	}
        -: 6015:    }
        -: 6016:
        -: 6017:  /* The file was not found in the hashed list.
        -: 6018:     Try to read the directory further.  */
        -: 6019:
    37026: 6020:  if (dir->dirstream == 0)
branch  0 taken 37004 (fallthrough)
branch  1 taken 22
        -: 6021:    {
        -: 6022:#ifdef WINDOWS32
        -: 6023:      /*
        -: 6024:       * Check to see if directory has changed since last read. FAT
        -: 6025:       * filesystems force a rehash always as mtime does not change
        -: 6026:       * on directories (ugh!).
        -: 6027:       */
        -: 6028:      if (dir->path_key &&
        -: 6029:          (dir->fs_flags & FS_FAT ||
        -: 6030:           (stat(dir->path_key, &st) == 0 &&
        -: 6031:            st.st_mtime > dir->mtime))) {
        -: 6032:
        -: 6033:        /* reset date stamp to show most recent re-process */
        -: 6034:        dir->mtime = st.st_mtime;
        -: 6035:
        -: 6036:        /* make sure directory can still be opened */
        -: 6037:        dir->dirstream = opendir(dir->path_key);
        -: 6038:
        -: 6039:        if (dir->dirstream)
        -: 6040:          rehash = 1;
        -: 6041:        else
        -: 6042:          return 0; /* couldn't re-read - fail */
        -: 6043:      } else
        -: 6044:#endif
        -: 6045:    /* The directory has been all read in.  */
    37004: 6046:      return 0;
        -: 6047:    }
        -: 6048:
      930: 6049:  while ((d = readdir (dir->dirstream)) != 0)
call    0 returned 930
branch  1 taken 908
branch  2 taken 22 (fallthrough)
        -: 6050:    {
        -: 6051:      /* Enter the file in the hash table.  */
      908: 6052:      register unsigned int newhash = 0;
        -: 6053:      unsigned int len;
        -: 6054:      register unsigned int i;
        -: 6055:
     908*: 6056:      if (!REAL_DIR_ENTRY (d))
branch  0 taken 0 (fallthrough)
branch  1 taken 908
    #####: 6057:	continue;
        -: 6058:
      908: 6059:      len = NAMLEN (d);
     7596: 6060:      for (i = 0; i < len; ++i)
branch  0 taken 6688
branch  1 taken 908 (fallthrough)
     6688: 6061:	HASHI (newhash, d->d_name[i]);
      908: 6062:      newhash %= DIRFILE_BUCKETS;
        -: 6063:#ifdef WINDOWS32
        -: 6064:      /*
        -: 6065:       * If re-reading a directory, check that this file isn't already
        -: 6066:       * in the cache.
        -: 6067:       */
        -: 6068:      if (rehash) {
        -: 6069:        for (df = dir->files[newhash]; df != 0; df = df->next)
        -: 6070:          if (streq(df->name, d->d_name))
        -: 6071:            break;
        -: 6072:      } else
        -: 6073:        df = 0;
        -: 6074:
        -: 6075:      /*
        -: 6076:       * If re-reading a directory, don't cache files that have
        -: 6077:       * already been discovered.
        -: 6078:       */
        -: 6079:      if (!df) {
        -: 6080:#endif
        -: 6081:
      908: 6082:      df = (struct dirfile *) xmalloc (sizeof (struct dirfile));
call    0 returned 908
      908: 6083:      df->next = dir->files[newhash];
      908: 6084:      dir->files[newhash] = df;
      908: 6085:      df->name = savestring (d->d_name, len);
call    0 returned 908
      908: 6086:      df->impossible = 0;
        -: 6087:#ifdef WINDOWS32
        -: 6088:      }
        -: 6089:#endif
        -: 6090:      /* Check if the name matches the one we're searching for.  */
      908: 6091:      if (filename != 0
branch  0 taken 908 (fallthrough)
branch  1 taken 0
     908*: 6092:	  && newhash == hash && strieq (d->d_name, filename))
branch  0 taken 2 (fallthrough)
branch  1 taken 906
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 6093:	{
    #####: 6094:	  return 1;
        -: 6095:	}
        -: 6096:    }
        -: 6097:
        -: 6098:  /* If the directory has been completely read in,
        -: 6099:     close the stream and reset the pointer to nil.  */
       22: 6100:  if (d == 0)
branch  0 taken 22 (fallthrough)
branch  1 taken 0
        -: 6101:    {
       22: 6102:      --open_directories;
       22: 6103:      closedir (dir->dirstream);
call    0 returned 22
       22: 6104:      dir->dirstream = 0;
        -: 6105:    }
       22: 6106:  return 0;
        -: 6107:}
        -: 6108:
        -: 6109:/* Return 1 if the name FILENAME in directory DIRNAME
        -: 6110:   is entered in the dir hash table.
        -: 6111:   FILENAME must contain no slashes.  */
        -: 6112:
        -: 6113:int
function dir_file_exists_p called 93457 returned 100% blocks executed 100%
    93457: 6114:dir_file_exists_p (dirname, filename)
        -: 6115:     register char *dirname;
        -: 6116:     register char *filename;
        -: 6117:{
    93457: 6118:  return dir_contents_file_exists_p (find_directory (dirname)->contents,
call    0 returned 93457
call    1 returned 93457
        -: 6119:				     filename);
        -: 6120:}
        -: 6121:
        -: 6122:/* Return 1 if the file named NAME exists.  */
        -: 6123:
        -: 6124:int
function file_exists_p called 91879 returned 100% blocks executed 75%
    91879: 6125:file_exists_p (name)
        -: 6126:     register char *name;
        -: 6127:{
        -: 6128:  char *dirend;
        -: 6129:  char *dirname;
        -: 6130:
        -: 6131:#ifndef	NO_ARCHIVES
    91879: 6132:  if (ar_name (name))
call    0 returned 91879
branch  1 taken 0 (fallthrough)
branch  2 taken 91879
    #####: 6133:    return ar_member_date (name) != (time_t) -1;
call    0 never executed
        -: 6134:#endif
        -: 6135:
        -: 6136:#ifdef VMS
        -: 6137:  dirend = rindex (name, ']');
        -: 6138:  dirend++;
        -: 6139:  if (dirend == (char *)1)
        -: 6140:    return dir_file_exists_p ("[]", name);
        -: 6141:#else /* !VMS */
    91879: 6142:  dirend = rindex (name, '/');
        -: 6143:#if defined (WINDOWS32) || defined (__MSDOS__)
        -: 6144:  /* Forward and backslashes might be mixed.  We need the rightmost one.  */
        -: 6145:  {
        -: 6146:    char *bslash = rindex(name, '\\');
        -: 6147:    if (!dirend || bslash > dirend)
        -: 6148:      dirend = bslash;
        -: 6149:    /* The case of "d:file" is unhandled.  But I don't think
        -: 6150:       such names can happen here.  */
        -: 6151:  }
        -: 6152:#endif /* WINDOWS32 || __MSDOS__ */
    91879: 6153:  if (dirend == 0)
branch  0 taken 3529 (fallthrough)
branch  1 taken 88350
        -: 6154:#ifndef _AMIGA
     3529: 6155:    return dir_file_exists_p (".", name);
call    0 returned 3529
        -: 6156:#else /* !VMS && !AMIGA */
        -: 6157:    return dir_file_exists_p ("", name);
        -: 6158:#endif /* AMIGA */
        -: 6159:#endif /* VMS */
        -: 6160:
    88350: 6161:  if (dirend == name)
branch  0 taken 0 (fallthrough)
branch  1 taken 88350
        -: 6162:#ifndef F_JR_7
    #####: 6163:    dirname = "/";
        -: 6164:#else
        -: 6165:    dirname = "\\";
        -: 6166:#endif
        -: 6167:  else
        -: 6168:    {
    88350: 6169:      dirname = (char *) alloca (dirend - name + 1);
    88350: 6170:      bcopy (name, dirname, dirend - name);
    88350: 6171:      dirname[dirend - name] = '\0';
        -: 6172:    }
    88350: 6173:  return dir_file_exists_p (dirname, dirend + 1);
call    0 returned 88350
        -: 6174:}
        -: 6175:
        -: 6176:/* Mark FILENAME as `impossible' for `file_impossible_p'.
        -: 6177:   This means an attempt has been made to search for FILENAME
        -: 6178:   as an intermediate file, and it has failed.  */
        -: 6179:
        -: 6180:void
function file_impossible called 13089 returned 100% blocks executed 95%
    13089: 6181:file_impossible (filename)
        -: 6182:     register char *filename;
        -: 6183:{
        -: 6184:  char *dirend;
    13089: 6185:  register char *p = filename;
        -: 6186:  register unsigned int hash;
        -: 6187:  register struct directory *dir;
        -: 6188:  register struct dirfile *new;
        -: 6189:  int cfe_weird;
        -: 6190:
        -: 6191:#ifdef VMS
        -: 6192:  dirend = rindex (p, ']');
        -: 6193:  dirend++;
        -: 6194:  if (dirend == (char *)1)
        -: 6195:    dir = find_directory ("[]");
        -: 6196:#else
    13089: 6197:  dirend = rindex (p, '/');
        -: 6198:#if defined (WINDOWS32) || defined (__MSDOS__)
        -: 6199:  /* Forward and backslashes might be mixed.  We need the rightmost one.  */
        -: 6200:  {
        -: 6201:    char *bslash = rindex(p, '\\');
        -: 6202:    if (!dirend || bslash > dirend)
        -: 6203:      dirend = bslash;
        -: 6204:    /* The case of "d:file" is unhandled.  But I don't think
        -: 6205:       such names can happen here.  */
        -: 6206:  }
        -: 6207:#endif /* WINDOWS32 or __MSDOS__ */
    13089: 6208:  if (dirend == 0)
branch  0 taken 689 (fallthrough)
branch  1 taken 12400
        -: 6209:#ifdef _AMIGA
        -: 6210:    dir = find_directory ("");
        -: 6211:#else /* !VMS && !AMIGA */
      689: 6212:    dir = find_directory (".");
call    0 returned 689
        -: 6213:#endif /* AMIGA */
        -: 6214:#endif /* VMS */
        -: 6215:  else
        -: 6216:    {
        -: 6217:      char *dirname;
    12400: 6218:      if (dirend == p)
branch  0 taken 0 (fallthrough)
branch  1 taken 12400
    #####: 6219:	dirname = "/";
        -: 6220:      else
        -: 6221:	{
    12400: 6222:	  dirname = (char *) alloca (dirend - p + 1);
        -: 6223:#ifndef F_JR_8  /* seeded fault #8; J.Ruthruff */
    12400: 6224:      bcopy (p, dirname, dirend - p);
        -: 6225:#else
        -: 6226:      cfe_weird = dirend - p;
        -: 6227:      bcopy (p, dirname, (size_t) cfe_weird);
        -: 6228:#endif
    12400: 6229:	  dirname[dirend - p] = '\0';
        -: 6230:	}
    12400: 6231:      dir = find_directory (dirname);
call    0 returned 12400
    12400: 6232:      filename = p = dirend + 1;
        -: 6233:    }
        -: 6234:
   186595: 6235:  for (hash = 0; *p != '\0'; ++p)
branch  0 taken 173506
branch  1 taken 13089 (fallthrough)
   173506: 6236:    HASHI (hash, *p);
    13089: 6237:  hash %= DIRFILE_BUCKETS;
        -: 6238:
    13089: 6239:  if (dir->contents == 0)
branch  0 taken 771 (fallthrough)
branch  1 taken 12318
        -: 6240:    {
        -: 6241:      /* The directory could not be stat'd.  We allocate a contents
        -: 6242:	 structure for it, but leave it out of the contents hash table.  */
      771: 6243:      dir->contents = (struct directory_contents *)
      771: 6244:	xmalloc (sizeof (struct directory_contents));
call    0 returned 771
        -: 6245:#ifdef WINDOWS32
        -: 6246:      dir->contents->path_key = NULL;
        -: 6247:      dir->contents->mtime = 0;
        -: 6248:#else  /* WINDOWS32 */
        -: 6249:#ifdef VMS
        -: 6250:      dir->contents->dev = 0;
        -: 6251:      dir->contents->ino[0] = dir->contents->ino[1] =
        -: 6252:	dir->contents->ino[2] = 0;
        -: 6253:#else
      771: 6254:      dir->contents->dev = dir->contents->ino = 0;
        -: 6255:#endif
        -: 6256:#endif /* WINDOWS32 */
      771: 6257:      dir->contents->files = 0;
      771: 6258:      dir->contents->dirstream = 0;
        -: 6259:    }
        -: 6260:
    13089: 6261:  if (dir->contents->files == 0)
branch  0 taken 771 (fallthrough)
branch  1 taken 12318
        -: 6262:    {
        -: 6263:      /* The directory was not opened; we must allocate the hash buckets.  */
     1542: 6264:      dir->contents->files = (struct dirfile **)
      771: 6265:	xmalloc (sizeof (struct dirfile) * DIRFILE_BUCKETS);
call    0 returned 771
      771: 6266:      bzero ((char *) dir->contents->files,
        -: 6267:	     sizeof (struct dirfile) * DIRFILE_BUCKETS);
        -: 6268:    }
        -: 6269:
        -: 6270:  /* Make a new entry and put it in the table.  */
        -: 6271:
    13089: 6272:  new = (struct dirfile *) xmalloc (sizeof (struct dirfile));
call    0 returned 13089
    13089: 6273:  new->next = dir->contents->files[hash];
    13089: 6274:  dir->contents->files[hash] = new;
    13089: 6275:  new->name = savestring (filename, strlen (filename));
call    0 returned 13089
    13089: 6276:  new->impossible = 1;
    13089: 6277:}
        -: 6278:
        -: 6279:/* Return nonzero if FILENAME has been marked impossible.  */
        -: 6280:
        -: 6281:int
function file_impossible_p called 105639 returned 100% blocks executed 96%
   105639: 6282:file_impossible_p (filename)
        -: 6283:     char *filename;
        -: 6284:{
        -: 6285:  char *dirend;
   105639: 6286:  register char *p = filename;
        -: 6287:  register unsigned int hash;
        -: 6288:  register struct directory_contents *dir;
        -: 6289:  register struct dirfile *next;
        -: 6290:
        -: 6291:#ifdef VMS
        -: 6292:  dirend = rindex (filename, ']');
        -: 6293:  if (dirend == 0)
        -: 6294:    dir = find_directory ("[]")->contents;
        -: 6295:#else
   105639: 6296:  dirend = rindex (filename, '/');
        -: 6297:#if defined (WINDOWS32) || defined (__MSDOS__)
        -: 6298:  /* Forward and backslashes might be mixed.  We need the rightmost one.  */
        -: 6299:  {
        -: 6300:    char *bslash = rindex(filename, '\\');
        -: 6301:    if (!dirend || bslash > dirend)
        -: 6302:      dirend = bslash;
        -: 6303:    /* The case of "d:file" is unhandled.  But I don't think
        -: 6304:       such names can happen here.  */
        -: 6305:  }
        -: 6306:#endif /* WINDOWS32 || __MSDOS__ */
   105639: 6307:  if (dirend == 0)
branch  0 taken 4074 (fallthrough)
branch  1 taken 101565
        -: 6308:#ifdef _AMIGA
        -: 6309:    dir = find_directory ("")->contents;
        -: 6310:#else /* !VMS && !AMIGA */
     4074: 6311:    dir = find_directory (".")->contents;
call    0 returned 4074
        -: 6312:#endif /* AMIGA */
        -: 6313:#endif /* VMS */
        -: 6314:  else
        -: 6315:    {
        -: 6316:      char *dirname;
   101565: 6317:      if (dirend == filename)
branch  0 taken 0 (fallthrough)
branch  1 taken 101565
    #####: 6318:	dirname = "/";
        -: 6319:      else
        -: 6320:	{
   101565: 6321:	  dirname = (char *) alloca (dirend - filename + 1);
   101565: 6322:	  bcopy (p, dirname, dirend - p);
   101565: 6323:	  dirname[dirend - p] = '\0';
        -: 6324:	}
   101565: 6325:      dir = find_directory (dirname)->contents;
call    0 returned 101565
   101565: 6326:      p = filename = dirend + 1;
        -: 6327:    }
        -: 6328:
   105639: 6329:  if (dir == 0 || dir->files == 0)
branch  0 taken 49172 (fallthrough)
branch  1 taken 56467
branch  2 taken 0 (fallthrough)
branch  3 taken 49172
        -: 6330:    /* There are no files entered for this directory.  */
    56467: 6331:    return 0;
        -: 6332:
        -: 6333:#ifdef __MSDOS__
        -: 6334:  p = filename = dosify (p);
        -: 6335:#endif
        -: 6336:#ifdef _AMIGA
        -: 6337:  p = filename = amigafy (p);
        -: 6338:#endif
        -: 6339:#ifdef VMS
        -: 6340:  p = filename = vmsify (p, 1);
        -: 6341:#endif
        -: 6342:
   741605: 6343:  for (hash = 0; *p != '\0'; ++p)
branch  0 taken 692433
branch  1 taken 49172 (fallthrough)
   692433: 6344:    HASH (hash, *p);
    49172: 6345:  hash %= DIRFILE_BUCKETS;
        -: 6346:
    53169: 6347:  for (next = dir->files[hash]; next != 0; next = next->next)
branch  0 taken 16221
branch  1 taken 36948 (fallthrough)
    16221: 6348:    if (strieq (filename, next->name))
branch  0 taken 16221 (fallthrough)
branch  1 taken 0
branch  2 taken 12769 (fallthrough)
branch  3 taken 3452
branch  4 taken 12769 (fallthrough)
branch  5 taken 0
branch  6 taken 12224 (fallthrough)
branch  7 taken 545
    12224: 6349:      return next->impossible;
        -: 6350:
    36948: 6351:  return 0;
        -: 6352:}
        -: 6353:
        -: 6354:/* Return the already allocated name in the
        -: 6355:   directory hash table that matches DIR.  */
        -: 6356:
        -: 6357:char *
function dir_name called 0 returned 0% blocks executed 0%
    #####: 6358:dir_name (dir)
        -: 6359:     char *dir;
        -: 6360:{
    #####: 6361:  return find_directory (dir)->name;
call    0 never executed
        -: 6362:}
        -: 6363:
        -: 6364:/* Print the data base of directories.  */
        -: 6365:
        -: 6366:void
function print_dir_data_base called 385 returned 100% blocks executed 91%
      385: 6367:print_dir_data_base ()
        -: 6368:{
        -: 6369:  register unsigned int i, dirs, files, impossible;
        -: 6370:  register struct directory *dir;
        -: 6371:
      385: 6372:  puts ("\n# Directories\n");
call    0 returned 385
        -: 6373:
      385: 6374:  dirs = files = impossible = 0;
    77000: 6375:  for (i = 0; i < DIRECTORY_BUCKETS; ++i)
branch  0 taken 76615
branch  1 taken 385 (fallthrough)
    78540: 6376:    for (dir = table_of_directories[i]; dir != 0; dir = dir->next)
branch  0 taken 1925
branch  1 taken 76615 (fallthrough)
        -: 6377:      {
     1925: 6378:	++dirs;
     1925: 6379:	if (dir->contents == 0)
branch  0 taken 1540 (fallthrough)
branch  1 taken 385
     1540: 6380:	  printf ("# %s: could not be stat'd.\n", dir->name);
call    0 returned 1540
      385: 6381:	else if (dir->contents->files == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 385
        -: 6382:#ifdef WINDOWS32
        -: 6383:          printf ("# %s (key %s, mtime %d): could not be opened.\n",
        -: 6384:                  dir->name, dir->contents->path_key,dir->contents->mtime);
        -: 6385:#else  /* WINDOWS32 */
        -: 6386:#ifdef VMS
        -: 6387:	  printf ("# %s (device %d, inode [%d,%d,%d]): could not be opened.\n",
        -: 6388:		  dir->name, dir->contents->dev,
        -: 6389:		  dir->contents->ino[0], dir->contents->ino[1],
        -: 6390:		  dir->contents->ino[2]);
        -: 6391:#else
    #####: 6392:	  printf ("# %s (device %ld, inode %ld): could not be opened.\n",
    #####: 6393:		  dir->name, (long int) dir->contents->dev,
    #####: 6394:		  (long int) dir->contents->ino);
call    0 never executed
        -: 6395:#endif
        -: 6396:#endif /* WINDOWS32 */
        -: 6397:	else
        -: 6398:	  {
      385: 6399:	    register unsigned int f = 0, im = 0;
        -: 6400:	    register unsigned int j;
        -: 6401:	    register struct dirfile *df;
    41580: 6402:	    for (j = 0; j < DIRFILE_BUCKETS; ++j)
branch  0 taken 41195
branch  1 taken 385 (fallthrough)
    47566: 6403:	      for (df = dir->contents->files[j]; df != 0; df = df->next)
branch  0 taken 6371
branch  1 taken 41195 (fallthrough)
     6371: 6404:		if (df->impossible)
branch  0 taken 6160 (fallthrough)
branch  1 taken 211
     6160: 6405:		  ++im;
        -: 6406:		else
      211: 6407:		  ++f;
        -: 6408:#ifdef WINDOWS32
        -: 6409:            printf ("# %s (key %s, mtime %d): ",
        -: 6410:                    dir->name, dir->contents->path_key, dir->contents->mtime);
        -: 6411:#else  /* WINDOWS32 */
        -: 6412:#ifdef VMS
        -: 6413:	    printf ("# %s (device %d, inode [%d,%d,%d]): ",
        -: 6414:		    dir->name, dir->contents->dev,
        -: 6415:			dir->contents->ino[0], dir->contents->ino[1],
        -: 6416:			dir->contents->ino[2]);
        -: 6417:#else
      385: 6418:	    printf ("# %s (device %d, inode %d): ",
      385: 6419:		    dir->name, dir->contents->dev, dir->contents->ino);
call    0 returned 385
        -: 6420:#endif
        -: 6421:#endif /* WINDOWS32 */
      385: 6422:	    if (f == 0)
branch  0 taken 384 (fallthrough)
branch  1 taken 1
      384: 6423:	      fputs ("No", stdout);
call    0 returned 384
        -: 6424:	    else
        1: 6425:	      printf ("%u", f);
call    0 returned 1
      385: 6426:	    fputs (" files, ", stdout);
call    0 returned 385
      385: 6427:	    if (im == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 385
    #####: 6428:	      fputs ("no", stdout);
call    0 never executed
        -: 6429:	    else
      385: 6430:	      printf ("%u", im);
call    0 returned 385
      385: 6431:	    fputs (" impossibilities", stdout);
call    0 returned 385
      385: 6432:	    if (dir->contents->dirstream == 0)
branch  0 taken 385 (fallthrough)
branch  1 taken 0
      385: 6433:	      puts (".");
call    0 returned 385
        -: 6434:	    else
    #####: 6435:	      puts (" so far.");
call    0 never executed
      385: 6436:	    files += f;
      385: 6437:	    impossible += im;
        -: 6438:	  }
        -: 6439:      }
        -: 6440:
      385: 6441:  fputs ("\n# ", stdout);
call    0 returned 385
      385: 6442:  if (files == 0)
branch  0 taken 384 (fallthrough)
branch  1 taken 1
      384: 6443:    fputs ("No", stdout);
call    0 returned 384
        -: 6444:  else
        1: 6445:    printf ("%u", files);
call    0 returned 1
      385: 6446:  fputs (" files, ", stdout);
call    0 returned 385
      385: 6447:  if (impossible == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 385
    #####: 6448:    fputs ("no", stdout);
call    0 never executed
        -: 6449:  else
      385: 6450:    printf ("%u", impossible);
call    0 returned 385
      385: 6451:  printf (" impossibilities in %u directories.\n", dirs);
call    0 returned 385
      385: 6452:}
        -: 6453:
        -: 6454:/* Hooks for globbing.  */
        -: 6455:
        -: 6456:#include <glob.h>
        -: 6457:#undef stderr
        -: 6458:#define stderr stdout
        -: 6459:
        -: 6460:/* Structure describing state of iterating through a directory hash table.  */
        -: 6461:
        -: 6462:struct dirstream
        -: 6463:  {
        -: 6464:    struct directory_contents *contents; /* The directory being read.  */
        -: 6465:
        -: 6466:    unsigned int bucket;	/* Current hash bucket.  */
        -: 6467:    struct dirfile *elt;	/* Current elt in bucket.  */
        -: 6468:  };
        -: 6469:
        -: 6470:/* Forward declarations.  */
        -: 6471:static __ptr_t open_dirstream PARAMS ((const char *));
        -: 6472:static struct dirent *read_dirstream PARAMS ((__ptr_t));
        -: 6473:
        -: 6474:static __ptr_t
function open_dirstream called 42 returned 100% blocks executed 88%
       42: 6475:open_dirstream (directory)
        -: 6476:     const char *directory;
        -: 6477:{
        -: 6478:  struct dirstream *new;
       42: 6479:  struct directory *dir = find_directory ((char *)directory);
call    0 returned 42
        -: 6480:
       42: 6481:  if (dir->contents == 0 || dir->contents->files == 0)
branch  0 taken 42 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 42
        -: 6482:    /* DIR->contents is nil if the directory could not be stat'd.
        -: 6483:       DIR->contents->files is nil if it could not be opened.  */
    #####: 6484:    return 0;
        -: 6485:
        -: 6486:  /* Read all the contents of the directory now.  There is no benefit
        -: 6487:     in being lazy, since glob will want to see every file anyway.  */
        -: 6488:
       42: 6489:  (void) dir_contents_file_exists_p (dir->contents, (char *) 0);
call    0 returned 42
        -: 6490:
       42: 6491:  new = (struct dirstream *) xmalloc (sizeof (struct dirstream));
call    0 returned 42
       42: 6492:  new->contents = dir->contents;
       42: 6493:  new->bucket = 0;
       42: 6494:  new->elt = new->contents->files[0];
        -: 6495:
       42: 6496:  return (__ptr_t) new;
        -: 6497:}
        -: 6498:
        -: 6499:static struct dirent *
function read_dirstream called 1652 returned 100% blocks executed 100%
     1652: 6500:read_dirstream (stream)
        -: 6501:     __ptr_t stream;
        -: 6502:{
     1652: 6503:  struct dirstream *const ds = (struct dirstream *) stream;
        -: 6504:  register struct dirfile *df;
        -: 6505:  static char *buf;
        -: 6506:  static unsigned int bufsz;
        -: 6507:
     6104: 6508:  while (ds->bucket < DIRFILE_BUCKETS)
branch  0 taken 6104
branch  1 taken 0 (fallthrough)
        -: 6509:    {
     6104: 6510:      while ((df = ds->elt) != 0)
branch  0 taken 1610
branch  1 taken 4494 (fallthrough)
        -: 6511:	{
     1610: 6512:	  ds->elt = df->next;
     1610: 6513:	  if (!df->impossible)
branch  0 taken 1610 (fallthrough)
branch  1 taken 0
        -: 6514:	    {
        -: 6515:	      /* The glob interface wants a `struct dirent',
        -: 6516:		 so mock one up.  */
        -: 6517:	      struct dirent *d;
     1610: 6518:	      unsigned int len = strlen (df->name) + 1;
     1610: 6519:	      if (sizeof *d - sizeof d->d_name + len > bufsz)
branch  0 taken 36 (fallthrough)
branch  1 taken 1574
        -: 6520:		{
       36: 6521:		  if (buf != 0)
branch  0 taken 18 (fallthrough)
branch  1 taken 18
       18: 6522:		    free (buf);
       36: 6523:		  bufsz *= 2;
       36: 6524:		  if (sizeof *d - sizeof d->d_name + len > bufsz)
branch  0 taken 18 (fallthrough)
branch  1 taken 18
       18: 6525:		    bufsz = sizeof *d - sizeof d->d_name + len;
       36: 6526:		  buf = xmalloc (bufsz);
call    0 returned 36
        -: 6527:		}
     1610: 6528:	      d = (struct dirent *) buf;
     1610: 6529:	      FAKE_DIR_ENTRY (d);
        -: 6530:#ifdef _DIRENT_HAVE_D_NAMLEN
        -: 6531:	      d->d_namlen = len - 1;
        -: 6532:#endif
     1610: 6533:	      memcpy (d->d_name, df->name, len);
     1610: 6534:	      return d;
        -: 6535:	    }
        -: 6536:	}
     4494: 6537:      if (++ds->bucket == DIRFILE_BUCKETS)
branch  0 taken 42 (fallthrough)
branch  1 taken 4452
       42: 6538:	break;
     4452: 6539:      ds->elt = ds->contents->files[ds->bucket];
        -: 6540:    }
        -: 6541:
       42: 6542:  return 0;
        -: 6543:}
        -: 6544:
        -: 6545:void
function dir_setup_glob called 8156 returned 100% blocks executed 100%
     8156: 6546:dir_setup_glob (gl)
        -: 6547:     glob_t *gl;
        -: 6548:{
        -: 6549:  extern int stat ();
        -: 6550:
        -: 6551:  /* Bogus sunos4 compiler complains (!) about & before functions.  */
     8156: 6552:  gl->gl_opendir = open_dirstream;
     8156: 6553:  gl->gl_readdir = read_dirstream;
     8156: 6554:  gl->gl_closedir = free;
     8156: 6555:  gl->gl_stat = stat;
        -: 6556:  /* We don't bother setting gl_lstat, since glob never calls it.
        -: 6557:     The slot is only there for compatibility with 4.4 BSD.  */
     8156: 6558:}
        -: 6559:
        -: 6560:
        -: 6561:
        -: 6562:/*************************************************************
        -: 6563:  ============================================================
        -: 6564:  ************************************************************
        -: 6565:  ============================================================
        -: 6566:  ************************************************************
        -: 6567:                         file.c
        -: 6568:  ************************************************************
        -: 6569:  ============================================================
        -: 6570:  ************************************************************
        -: 6571:  ============================================================
        -: 6572:  *************************************************************/
        -: 6573:
        -: 6574:/* Target file hash table management for GNU Make.
        -: 6575:Copyright (C) 1988,89,90,91,92,93,94,95,96,97 Free Software Foundation, Inc.
        -: 6576:This file is part of GNU Make.
        -: 6577:
        -: 6578:GNU Make is free software; you can redistribute it and/or modify
        -: 6579:it under the terms of the GNU General Public License as published by
        -: 6580:the Free Software Foundation; either version 2, or (at your option)
        -: 6581:any later version.
        -: 6582:
        -: 6583:GNU Make is distributed in the hope that it will be useful,
        -: 6584:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 6585:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 6586:GNU General Public License for more details.
        -: 6587:
        -: 6588:You should have received a copy of the GNU General Public License
        -: 6589:along with GNU Make; see the file COPYING.  If not, write to
        -: 6590:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 6591:
        -: 6592:#include "make.h"
        -: 6593:/* #include "dep.h"  <- modification by J.Ruthruff, 7/27 */
        -: 6594:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -: 6595:#include "job.h"
        -: 6596:/* #include "commands.h"  <- modification by J.Ruthruff, 7/27 */
        -: 6597:/* #include "variable.h"  <- modification by J.Ruthruff, 7/27 */
        -: 6598:#include <assert.h>
        -: 6599:#undef stderr
        -: 6600:#define stderr stdout
        -: 6601:
        -: 6602:
        -: 6603:/* Hash table of files the makefile knows how to make.  */
        -: 6604:
        -: 6605:#ifndef	FILE_BUCKETS
        -: 6606:#define FILE_BUCKETS	1007
        -: 6607:#endif
        -: 6608:static struct file *files[FILE_BUCKETS];
        -: 6609:
        -: 6610:/* Number of files with the `intermediate' flag set.  */
        -: 6611:
        -: 6612:unsigned int num_intermediates = 0;
        -: 6613:
        -: 6614:
        -: 6615:/* Access the hash table of all file records.
        -: 6616:   lookup_file  given a name, return the struct file * for that name,
        -: 6617:           or nil if there is none.
        -: 6618:   enter_file   similar, but create one if there is none.  */
        -: 6619:
        -: 6620:struct file *
function lookup_file called 858677 returned 100% blocks executed 88%
   858677: 6621:lookup_file (name)
        -: 6622:     char *name;
        -: 6623:{
        -: 6624:  register struct file *f;
        -: 6625:  register char *n;
        -: 6626:  register unsigned int hashval;
        -: 6627:
   858677: 6628:  if (*name == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 858677
    #####: 6629:    abort ();
call    0 never executed
        -: 6630:
        -: 6631:  /* This is also done in parse_file_seq, so this is redundant
        -: 6632:     for names read from makefiles.  It is here for names passed
        -: 6633:     on the command line.  */
        -: 6634:#ifdef VMS
        -: 6635:  while (name[0] == '[' && name[1] == ']' && name[2] != '\0')
        -: 6636:      name += 2;
        -: 6637:#endif
   859022: 6638:  while (name[0] == '.' && name[1] == '/' && name[2] != '\0')
branch  0 taken 764896 (fallthrough)
branch  1 taken 94126
branch  2 taken 345 (fallthrough)
branch  3 taken 764551
branch  4 taken 345
branch  5 taken 0 (fallthrough)
        -: 6639:    {
      345: 6640:      name += 2;
      345: 6641:      while (*name == '/')
branch  0 taken 0
branch  1 taken 345 (fallthrough)
        -: 6642:	/* Skip following slashes: ".//foo" is "foo", not "/foo".  */
    #####: 6643:	++name;
        -: 6644:    }
        -: 6645:
   858677: 6646:  if (*name == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 858677
        -: 6647:    /* It was all slashes after a dot.  */
        -: 6648:#ifdef VMS
        -: 6649:    name = "[]";
        -: 6650:#else
        -: 6651:#ifdef _AMIGA
        -: 6652:    name = "";
        -: 6653:#else
    #####: 6654:    name = "./";
        -: 6655:#endif /* AMIGA */
        -: 6656:#endif /* VMS */
        -: 6657:
   858677: 6658:  hashval = 0;
 10211786: 6659:  for (n = name; *n != '\0'; ++n)
branch  0 taken 9353109
branch  1 taken 858677 (fallthrough)
  9353109: 6660:    HASHI (hashval, *n);
   858677: 6661:  hashval %= FILE_BUCKETS;
        -: 6662:
   923948: 6663:  for (f = files[hashval]; f != 0; f = f->next)
branch  0 taken 100236
branch  1 taken 823712 (fallthrough)
        -: 6664:    {
        -: 6665:#ifndef F_JR_9  /* seeded fault #9; J.Ruthruff */
   100236: 6666:      if (strieq (f->hname, name))
branch  0 taken 100236 (fallthrough)
branch  1 taken 0
branch  2 taken 95041 (fallthrough)
branch  3 taken 5195
branch  4 taken 95041 (fallthrough)
branch  5 taken 0
branch  6 taken 34965 (fallthrough)
branch  7 taken 60076
        -: 6667:#else
        -: 6668:      if (strieq (f->name, name))
        -: 6669:#endif
        -: 6670:	{
    34965: 6671:	  return f;
        -: 6672:	}
        -: 6673:    }
   823712: 6674:  return 0;
        -: 6675:}
        -: 6676:
        -: 6677:struct file *
function enter_file called 52353 returned 100% blocks executed 79%
    52353: 6678:enter_file (name)
        -: 6679:     char *name;
        -: 6680:{
        -: 6681:  register struct file *f, *new;
        -: 6682:  register char *n;
        -: 6683:  register unsigned int hashval;
        -: 6684:#ifdef VMS
        -: 6685:  char *lname, *ln;
        -: 6686:#endif
        -: 6687:
    52353: 6688:  if (*name == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 52353
    #####: 6689:    abort ();
call    0 never executed
        -: 6690:
        -: 6691:#ifdef VMS
        -: 6692:  lname = (char *)malloc (strlen (name) + 1);
        -: 6693:  for (n = name, ln = lname; *n != '\0'; ++n, ++ln)
        -: 6694:    {
        -: 6695:      if (isupper(*n))
        -: 6696:	*ln = tolower(*n);
        -: 6697:      else
        -: 6698:	*ln = *n;
        -: 6699:    }
        -: 6700:  *ln = 0;
        -: 6701:  name = lname;
        -: 6702:#endif
        -: 6703:
    52353: 6704:  hashval = 0;
   336921: 6705:  for (n = name; *n != '\0'; ++n)
branch  0 taken 284568
branch  1 taken 52353 (fallthrough)
   284568: 6706:    HASHI (hashval, *n);
    52353: 6707:  hashval %= FILE_BUCKETS;
        -: 6708:
    53363: 6709:  for (f = files[hashval]; f != 0; f = f->next)
branch  0 taken 1203
branch  1 taken 52160 (fallthrough)
     1203: 6710:    if (strieq (f->hname, name))
branch  0 taken 1201 (fallthrough)
branch  1 taken 2
branch  2 taken 1001 (fallthrough)
branch  3 taken 200
branch  4 taken 1001 (fallthrough)
branch  5 taken 0
branch  6 taken 810 (fallthrough)
branch  7 taken 191
        -: 6711:      break;
        -: 6712:
    52353: 6713:  if (f != 0 && !f->double_colon)
branch  0 taken 193 (fallthrough)
branch  1 taken 52160
branch  2 taken 193 (fallthrough)
branch  3 taken 0
        -: 6714:    {
        -: 6715:#ifdef VMS
        -: 6716:      free(lname);
        -: 6717:#endif
      193: 6718:      return f;
        -: 6719:    }
        -: 6720:
    52160: 6721:  new = (struct file *) xmalloc (sizeof (struct file));
call    0 returned 52160
    52160: 6722:  bzero ((char *) new, sizeof (struct file));
        -: 6723:#ifndef F_JR_10  /* seeded fault #10; J.Ruthruff */
    52160: 6724:  new->name = new->hname = name;
        -: 6725:#else
        -: 6726:  new->name = name;
        -: 6727:#endif
    52160: 6728:  new->update_status = -1;
        -: 6729:
    52160: 6730:  if (f == 0)
branch  0 taken 52160 (fallthrough)
branch  1 taken 0
        -: 6731:    {
        -: 6732:      /* This is a completely new file.  */
    52160: 6733:      new->next = files[hashval];
    52160: 6734:      files[hashval] = new;
        -: 6735:    }
        -: 6736:  else
        -: 6737:    {
        -: 6738:      /* There is already a double-colon entry for this file.  */
    #####: 6739:      new->double_colon = f;
    #####: 6740:      while (f->prev != 0)
branch  0 never executed
branch  1 never executed
    #####: 6741:	f = f->prev;
    #####: 6742:      f->prev = new;
        -: 6743:    }
        -: 6744:
    52160: 6745:  return new;
        -: 6746:}
        -: 6747:
        -: 6748:/* Rehash FILE to NAME.  This is not as simple as resetting
        -: 6749:   the `hname' member, since it must be put in a new hash bucket,
        -: 6750:   and possibly merged with an existing file called NAME.  */
        -: 6751:
        -: 6752:void
function rehash_file called 0 returned 0% blocks executed 0%
    #####: 6753:rehash_file (file, name)
        -: 6754:     register struct file *file;
        -: 6755:     char *name;
        -: 6756:{
    #####: 6757:  char *oldname = file->hname;
        -: 6758:  register unsigned int oldhash;
        -: 6759:  register char *n;
        -: 6760:
    #####: 6761:  while (file->renamed != 0)
branch  0 never executed
branch  1 never executed
    #####: 6762:    file = file->renamed;
        -: 6763:
        -: 6764:  /* Find the hash values of the old and new names.  */
        -: 6765:
    #####: 6766:  oldhash = 0;
    #####: 6767:  for (n = oldname; *n != '\0'; ++n)
branch  0 never executed
branch  1 never executed
    #####: 6768:    HASHI (oldhash, *n);
        -: 6769:
    #####: 6770:  file_hash_enter (file, name, oldhash, file->name);
call    0 never executed
    #####: 6771:}
        -: 6772:
        -: 6773:/* Rename FILE to NAME.  This is not as simple as resetting
        -: 6774:   the `name' member, since it must be put in a new hash bucket,
        -: 6775:   and possibly merged with an existing file called NAME.  */
        -: 6776:
        -: 6777:void
function rename_file called 0 returned 0% blocks executed 0%
    #####: 6778:rename_file (file, name)
        -: 6779:     register struct file *file;
        -: 6780:     char *name;
        -: 6781:{
    #####: 6782:  rehash_file(file, name);
call    0 never executed
    #####: 6783:  while (file)
branch  0 never executed
branch  1 never executed
        -: 6784:    {
    #####: 6785:      file->name = file->hname;
    #####: 6786:      file = file->prev;
        -: 6787:    }
    #####: 6788:}
        -: 6789:
        -: 6790:void
function file_hash_enter called 0 returned 0% blocks executed 0%
    #####: 6791:file_hash_enter (file, name, oldhash, oldname)
        -: 6792:     register struct file *file;
        -: 6793:     char *name;
        -: 6794:     unsigned int oldhash;
        -: 6795:     char *oldname;
        -: 6796:{
    #####: 6797:  unsigned int oldbucket = oldhash % FILE_BUCKETS;
        -: 6798:  register unsigned int newhash, newbucket;
        -: 6799:  struct file *oldfile;
        -: 6800:  register char *n;
        -: 6801:  register struct file *f;
        -: 6802:
    #####: 6803:  newhash = 0;
    #####: 6804:  for (n = name; *n != '\0'; ++n)
branch  0 never executed
branch  1 never executed
    #####: 6805:    HASHI (newhash, *n);
    #####: 6806:  newbucket = newhash % FILE_BUCKETS;
        -: 6807:
        -: 6808:  /* Look for an existing file under the new name.  */
        -: 6809:
    #####: 6810:  for (oldfile = files[newbucket]; oldfile != 0; oldfile = oldfile->next)
branch  0 never executed
branch  1 never executed
    #####: 6811:    if (strieq (oldfile->hname, name))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 6812:      break;
        -: 6813:
        -: 6814:  /* If the old file is the same as the new file, something's wrong.  */
    #####: 6815:  assert (oldfile != file);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 6816:
    #####: 6817:  if (oldhash != 0 && (newbucket != oldbucket || oldfile != 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 6818:    {
        -: 6819:      /* Remove FILE from its hash bucket.  */
        -: 6820:
    #####: 6821:      struct file *lastf = 0;
        -: 6822:
    #####: 6823:      for (f = files[oldbucket]; f != file; f = f->next)
branch  0 never executed
branch  1 never executed
    #####: 6824:	lastf = f;
        -: 6825:
    #####: 6826:      if (lastf == 0)
branch  0 never executed
branch  1 never executed
    #####: 6827:	files[oldbucket] = f->next;
        -: 6828:      else
    #####: 6829:	lastf->next = f->next;
        -: 6830:    }
        -: 6831:
        -: 6832:  /* Give FILE its new name.  */
        -: 6833:
    #####: 6834:  file->hname = name;
    #####: 6835:  for (f = file->double_colon; f != 0; f = f->prev)
branch  0 never executed
branch  1 never executed
    #####: 6836:    f->hname = name;
        -: 6837:
    #####: 6838:  if (oldfile == 0)
branch  0 never executed
branch  1 never executed
        -: 6839:    {
        -: 6840:      /* There is no existing file with the new name.  */
        -: 6841:
    #####: 6842:      if (newbucket != oldbucket)
branch  0 never executed
branch  1 never executed
        -: 6843:	{
        -: 6844:	  /* Put FILE in its new hash bucket.  */
        -: 6845:#ifndef F_AA_9
    #####: 6846:	  file->next = files[newbucket];
    #####: 6847:	  files[newbucket] = file;
        -: 6848:#else
        -: 6849:	  files[newbucket] = file;
        -: 6850:	  file->next = files[newbucket];
        -: 6851:#endif
        -: 6852:	}
        -: 6853:    }
        -: 6854:  else
        -: 6855:    {
        -: 6856:      /* There is an existing file with the new name.
        -: 6857:	 We must merge FILE into the existing file.  */
        -: 6858:
        -: 6859:      register struct dep *d;
        -: 6860:
    #####: 6861:      if (file->cmds != 0)
branch  0 never executed
branch  1 never executed
        -: 6862:	{
    #####: 6863:	  if (oldfile->cmds == 0)
branch  0 never executed
branch  1 never executed
    #####: 6864:	    oldfile->cmds = file->cmds;
    #####: 6865:	  else if (file->cmds != oldfile->cmds)
branch  0 never executed
branch  1 never executed
        -: 6866:	    {
        -: 6867:	      /* We have two sets of commands.  We will go with the
        -: 6868:		 one given in the rule explicitly mentioning this name,
        -: 6869:		 but give a message to let the user know what's going on.  */
    #####: 6870:	      if (oldfile->cmds->filename != 0)
branch  0 never executed
branch  1 never executed
    #####: 6871:		makefile_error (file->cmds->filename, file->cmds->lineno,
        -: 6872:				"Commands were specified for \
        -: 6873:file `%s' at %s:%u,",
    #####: 6874:				oldname, oldfile->cmds->filename,
    #####: 6875:				oldfile->cmds->lineno);
call    0 never executed
        -: 6876:	      else
    #####: 6877:		makefile_error (file->cmds->filename, file->cmds->lineno,
call    0 never executed
        -: 6878:				"Commands for file `%s' were found by \
        -: 6879:implicit rule search,",
        -: 6880:				oldname);
    #####: 6881:	      makefile_error (file->cmds->filename, file->cmds->lineno,
call    0 never executed
        -: 6882:			      "but `%s' is now considered the same file \
        -: 6883:as `%s'.",
        -: 6884:			      oldname, name);
    #####: 6885:	      makefile_error (file->cmds->filename, file->cmds->lineno,
call    0 never executed
        -: 6886:			      "Commands for `%s' will be ignored \
        -: 6887:in favor of those for `%s'.",
        -: 6888:			      name, oldname);
        -: 6889:	    }
        -: 6890:	}
        -: 6891:
        -: 6892:      /* Merge the dependencies of the two files.  */
        -: 6893:
    #####: 6894:      d = oldfile->deps;
    #####: 6895:      if (d == 0)
branch  0 never executed
branch  1 never executed
    #####: 6896:	oldfile->deps = file->deps;
        -: 6897:      else
        -: 6898:	{
    #####: 6899:	  while (d->next != 0)
branch  0 never executed
branch  1 never executed
    #####: 6900:	    d = d->next;
    #####: 6901:	  d->next = file->deps;
        -: 6902:	}
        -: 6903:
    #####: 6904:      merge_variable_set_lists (&oldfile->variables, file->variables);
call    0 never executed
        -: 6905:
    #####: 6906:      if (oldfile->double_colon && file->is_target && !file->double_colon)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6907:	fatal ("can't rename single-colon `%s' to double-colon `%s'",
call    0 never executed
        -: 6908:	       oldname, name);
    #####: 6909:      if (!oldfile->double_colon  && file->double_colon)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 6910:	{
    #####: 6911:	  if (oldfile->is_target)
branch  0 never executed
branch  1 never executed
    #####: 6912:	    fatal ("can't rename double-colon `%s' to single-colon `%s'",
call    0 never executed
        -: 6913:		   oldname, name);
        -: 6914:	  else
    #####: 6915:	    oldfile->double_colon = file->double_colon;
        -: 6916:	}
        -: 6917:
    #####: 6918:      if (file->last_mtime > oldfile->last_mtime)
branch  0 never executed
branch  1 never executed
        -: 6919:	/* %%% Kludge so -W wins on a file that gets vpathized.  */
    #####: 6920:	oldfile->last_mtime = file->last_mtime;
        -: 6921:
        -: 6922:#define MERGE(field) oldfile->field |= file->field
    #####: 6923:      MERGE (precious);
    #####: 6924:      MERGE (tried_implicit);
    #####: 6925:      MERGE (updating);
    #####: 6926:      MERGE (updated);
    #####: 6927:      MERGE (is_target);
    #####: 6928:      MERGE (cmd_target);
    #####: 6929:      MERGE (phony);
    #####: 6930:      MERGE (ignore_vpath);
        -: 6931:#undef MERGE
        -: 6932:
    #####: 6933:      file->renamed = oldfile;
        -: 6934:    }
    #####: 6935:}
        -: 6936:
        -: 6937:/* Remove all nonprecious intermediate files.
        -: 6938:   If SIG is nonzero, this was caused by a fatal signal,
        -: 6939:   meaning that a different message will be printed, and
        -: 6940:   the message will go to stderr rather than stdout.  */
        -: 6941:
        -: 6942:void
function remove_intermediates called 793 returned 100% blocks executed 32%
      793: 6943:remove_intermediates (sig)
        -: 6944:     int sig;
        -: 6945:{
        -: 6946:  register int i;
        -: 6947:  register struct file *f;
        -: 6948:  char doneany;
        -: 6949:
      793: 6950:  if (question_flag || touch_flag)
branch  0 taken 792 (fallthrough)
branch  1 taken 1
branch  2 taken 1 (fallthrough)
branch  3 taken 791
        2: 6951:    return;
     791*: 6952:  if (sig && just_print_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 791
branch  2 never executed
branch  3 never executed
    #####: 6953:    return;
        -: 6954:
      791: 6955:  doneany = 0;
   797328: 6956:  for (i = 0; i < FILE_BUCKETS; ++i)
branch  0 taken 796537
branch  1 taken 791 (fallthrough)
   848471: 6957:    for (f = files[i]; f != 0; f = f->next)
branch  0 taken 51934
branch  1 taken 796537 (fallthrough)
   51934*: 6958:      if (f->intermediate && (f->dontcare || !f->precious)
branch  0 taken 0 (fallthrough)
branch  1 taken 51934
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6959:	  && !f->secondary)
branch  0 never executed
branch  1 never executed
        -: 6960:	{
        -: 6961:	  int status;
    #####: 6962:	  if (f->update_status == -1)
branch  0 never executed
branch  1 never executed
        -: 6963:	    /* If nothing would have created this file yet,
        -: 6964:	       don't print an "rm" command for it.  */
    #####: 6965:	    continue;
    #####: 6966:	  else if (just_print_flag)
branch  0 never executed
branch  1 never executed
    #####: 6967:	    status = 0;
        -: 6968:	  else
        -: 6969:	    {
    #####: 6970:	      status = unlink (f->name);
call    0 never executed
    #####: 6971:	      if (status < 0 && errno == ENOENT)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6972:		continue;
        -: 6973:	    }
    #####: 6974:	  if (!f->dontcare)
branch  0 never executed
branch  1 never executed
        -: 6975:	    {
    #####: 6976:	      if (sig)
branch  0 never executed
branch  1 never executed
    #####: 6977:		error ("*** Deleting intermediate file `%s'", f->name);
call    0 never executed
    #####: 6978:	      else if (!silent_flag)
branch  0 never executed
branch  1 never executed
        -: 6979:		{
    #####: 6980:		  if (! doneany)
branch  0 never executed
branch  1 never executed
        -: 6981:		    {
    #####: 6982:		      fputs ("rm ", stdout);
call    0 never executed
    #####: 6983:		      doneany = 1;
        -: 6984:		    }
        -: 6985:		  else
    #####: 6986:		    putchar (' ');
call    0 never executed
    #####: 6987:		  fputs (f->name, stdout);
call    0 never executed
    #####: 6988:		  fflush (stdout);
call    0 never executed
        -: 6989:		}
    #####: 6990:	      if (status < 0)
branch  0 never executed
branch  1 never executed
    #####: 6991:		perror_with_name ("unlink: ", f->name);
call    0 never executed
        -: 6992:	    }
        -: 6993:	}
        -: 6994:
     791*: 6995:  if (doneany && !sig)
branch  0 taken 0 (fallthrough)
branch  1 taken 791
branch  2 never executed
branch  3 never executed
        -: 6996:    {
    #####: 6997:      putchar ('\n');
call    0 never executed
    #####: 6998:      fflush (stdout);
call    0 never executed
        -: 6999:    }
        -: 7000:}
        -: 7001:
        -: 7002:/* For each dependency of each file, make the `struct dep' point
        -: 7003:   at the appropriate `struct file' (which may have to be created).
        -: 7004:
        -: 7005:   Also mark the files depended on by .PRECIOUS, .PHONY, .SILENT,
        -: 7006:   and various other special targets.  */
        -: 7007:
        -: 7008:void
function snap_deps called 790 returned 100% blocks executed 46%
      790: 7009:snap_deps ()
        -: 7010:{
        -: 7011:  register struct file *f, *f2;
        -: 7012:  register struct dep *d;
        -: 7013:  register int i;
        -: 7014:
        -: 7015:  /* Enter each dependency name as a file.  */
   796320: 7016:  for (i = 0; i < FILE_BUCKETS; ++i)
branch  0 taken 795530
branch  1 taken 790 (fallthrough)
   841286: 7017:    for (f = files[i]; f != 0; f = f->next)
branch  0 taken 45756
branch  1 taken 795530 (fallthrough)
    91512: 7018:      for (f2 = f; f2 != 0; f2 = f2->prev)
branch  0 taken 45756
branch  1 taken 45756 (fallthrough)
    71601: 7019:	for (d = f2->deps; d != 0; d = d->next)
branch  0 taken 25845
branch  1 taken 45756 (fallthrough)
    25845: 7020:	  if (d->name != 0)
branch  0 taken 25845 (fallthrough)
branch  1 taken 0
        -: 7021:	    {
    25845: 7022:	      d->file = lookup_file (d->name);
call    0 returned 25845
    25845: 7023:	      if (d->file == 0)
branch  0 taken 15477 (fallthrough)
branch  1 taken 10368
    15477: 7024:		d->file = enter_file (d->name);
call    0 returned 15477
        -: 7025:	      else
    10368: 7026:		free (d->name);
    25845: 7027:	      d->name = 0;
        -: 7028:	    }
        -: 7029:
     790*: 7030:  for (f = lookup_file (".PRECIOUS"); f != 0; f = f->prev)
call    0 returned 790
branch  1 taken 0
branch  2 taken 790 (fallthrough)
    #####: 7031:    for (d = f->deps; d != 0; d = d->next)
branch  0 never executed
branch  1 never executed
    #####: 7032:      for (f2 = d->file; f2 != 0; f2 = f2->prev)
branch  0 never executed
branch  1 never executed
    #####: 7033:	f2->precious = 1;
        -: 7034:
      808: 7035:  for (f = lookup_file (".PHONY"); f != 0; f = f->prev)
call    0 returned 790
branch  1 taken 18
branch  2 taken 790 (fallthrough)
      249: 7036:    for (d = f->deps; d != 0; d = d->next)
branch  0 taken 231
branch  1 taken 18 (fallthrough)
      462: 7037:      for (f2 = d->file; f2 != 0; f2 = f2->prev)
branch  0 taken 231
branch  1 taken 231 (fallthrough)
        -: 7038:	{
        -: 7039:	  /* Mark this file as phony and nonexistent.  */
      231: 7040:	  f2->phony = 1;
      231: 7041:	  f2->last_mtime = (time_t) -1;
        -: 7042:	}
        -: 7043:
     790*: 7044:  for (f = lookup_file (".INTERMEDIATE"); f != 0; f = f->prev)
call    0 returned 790
branch  1 taken 0
branch  2 taken 790 (fallthrough)
        -: 7045:    {
        -: 7046:      /* .INTERMEDIATE with deps listed
        -: 7047:	 marks those deps as intermediate files.  */
    #####: 7048:      for (d = f->deps; d != 0; d = d->next)
branch  0 never executed
branch  1 never executed
    #####: 7049:	for (f2 = d->file; f2 != 0; f2 = f2->prev)
branch  0 never executed
branch  1 never executed
    #####: 7050:	  f2->intermediate = 1;
        -: 7051:      /* .INTERMEDIATE with no deps does nothing.
        -: 7052:	 Marking all files as intermediates is useless
        -: 7053:	 since the goal targets would be deleted after they are built.  */
        -: 7054:    }
        -: 7055:
     790*: 7056:  for (f = lookup_file (".SECONDARY"); f != 0; f = f->prev)
call    0 returned 790
branch  1 taken 0
branch  2 taken 790 (fallthrough)
        -: 7057:    {
        -: 7058:      /* .SECONDARY with deps listed
        -: 7059:	 marks those deps as intermediate files
        -: 7060:	 in that they don't get rebuilt if not actually needed;
        -: 7061:	 but unlike real intermediate files,
        -: 7062:	 these are not deleted after make finishes.  */
    #####: 7063:      if (f->deps)
branch  0 never executed
branch  1 never executed
        -: 7064:	{
    #####: 7065:	  for (d = f->deps; d != 0; d = d->next)
branch  0 never executed
branch  1 never executed
    #####: 7066:	    for (f2 = d->file; f2 != 0; f2 = f2->prev)
branch  0 never executed
branch  1 never executed
    #####: 7067:	      f2->intermediate = f2->secondary = 1;
        -: 7068:	}
        -: 7069:      /* .SECONDARY with no deps listed marks *all* files that way.  */
        -: 7070:      else
        -: 7071:	{
        -: 7072:	  int i;
    #####: 7073:	  for (i = 0; i < FILE_BUCKETS; i++)
branch  0 never executed
branch  1 never executed
        -: 7074:#ifndef F_AA_7
    #####: 7075:	    for (f2 = files[i]; f2; f2= f2->next)
branch  0 never executed
branch  1 never executed
        -: 7076:#else
        -: 7077:	    for (f2 = files[i + 1]; f2; f2= f2->next)
        -: 7078:#endif
    #####: 7079:	      f2->intermediate = f2->secondary = 1;
        -: 7080:	}
        -: 7081:    }
        -: 7082:
      790: 7083:  f = lookup_file (".EXPORT_ALL_VARIABLES");
call    0 returned 790
     790*: 7084:  if (f != 0 && f->is_target)
branch  0 taken 0 (fallthrough)
branch  1 taken 790
branch  2 never executed
branch  3 never executed
    #####: 7085:    export_all_variables = 1;
        -: 7086:
      790: 7087:  f = lookup_file (".IGNORE");
call    0 returned 790
     790*: 7088:  if (f != 0 && f->is_target)
branch  0 taken 0 (fallthrough)
branch  1 taken 790
branch  2 never executed
branch  3 never executed
        -: 7089:    {
    #####: 7090:      if (f->deps == 0)
branch  0 never executed
branch  1 never executed
    #####: 7091:	ignore_errors_flag = 1;
        -: 7092:      else
    #####: 7093:	for (d = f->deps; d != 0; d = d->next)
branch  0 never executed
branch  1 never executed
    #####: 7094:	  for (f2 = d->file; f2 != 0; f2 = f2->prev)
branch  0 never executed
branch  1 never executed
    #####: 7095:	    f2->command_flags |= COMMANDS_NOERROR;
        -: 7096:    }
        -: 7097:
      790: 7098:  f = lookup_file (".SILENT");
call    0 returned 790
     790*: 7099:  if (f != 0 && f->is_target)
branch  0 taken 0 (fallthrough)
branch  1 taken 790
branch  2 never executed
branch  3 never executed
        -: 7100:    {
    #####: 7101:      if (f->deps == 0)
branch  0 never executed
branch  1 never executed
    #####: 7102:	silent_flag = 1;
        -: 7103:      else
    #####: 7104:	for (d = f->deps; d != 0; d = d->next)
branch  0 never executed
branch  1 never executed
    #####: 7105:	  for (f2 = d->file; f2 != 0; f2 = f2->prev)
branch  0 never executed
branch  1 never executed
    #####: 7106:	    f2->command_flags |= COMMANDS_SILENT;
        -: 7107:    }
        -: 7108:
      790: 7109:  f = lookup_file (".POSIX");
call    0 returned 790
     790*: 7110:  if (f != 0 && f->is_target)
branch  0 taken 0 (fallthrough)
branch  1 taken 790
branch  2 never executed
branch  3 never executed
    #####: 7111:    posix_pedantic = 1;
      790: 7112:}
        -: 7113:
        -: 7114:/* Set the `command_state' member of FILE and all its `also_make's.  */
        -: 7115:
        -: 7116:void
function set_command_state called 3 returned 100% blocks executed 75%
        3: 7117:set_command_state (file, state)
        -: 7118:     struct file *file;
        -: 7119:     int state;
        -: 7120:{
        -: 7121:  struct dep *d;
        -: 7122:
        3: 7123:  file->command_state = state;
        -: 7124:
       3*: 7125:  for (d = file->also_make; d != 0; d = d->next)
branch  0 taken 0
branch  1 taken 3 (fallthrough)
    #####: 7126:    d->file->command_state = state;
        3: 7127:}
        -: 7128:
        -: 7129:/* Print the data base of files.  */
        -: 7130:
        -: 7131:static void
function print_file called 25025 returned 100% blocks executed 57%
    25025: 7132:print_file (f)
        -: 7133:     struct file *f;
        -: 7134:{
        -: 7135:  register struct dep *d;
        -: 7136:
    25025: 7137:  putchar ('\n');
call    0 returned 25025
    25025: 7138:  if (!f->is_target)
branch  0 taken 25025 (fallthrough)
branch  1 taken 0
    25025: 7139:    puts ("# Not a target:");
call    0 returned 25025
   25025*: 7140:  printf ("%s:%s", f->name, f->double_colon ? ":" : "");
branch  0 taken 0 (fallthrough)
branch  1 taken 25025
call    2 returned 25025
        -: 7141:
    36960: 7142:  for (d = f->deps; d != 0; d = d->next)
branch  0 taken 11935
branch  1 taken 25025 (fallthrough)
   11935*: 7143:    printf (" %s", dep_name (d));
branch  0 taken 11935 (fallthrough)
branch  1 taken 0
call    2 returned 11935
    25025: 7144:  putchar ('\n');
call    0 returned 25025
        -: 7145:
    25025: 7146:  if (f->precious)
branch  0 taken 0 (fallthrough)
branch  1 taken 25025
    #####: 7147:    puts ("#  Precious file (dependency of .PRECIOUS).");
call    0 never executed
    25025: 7148:  if (f->phony)
branch  0 taken 0 (fallthrough)
branch  1 taken 25025
    #####: 7149:    puts ("#  Phony target (dependency of .PHONY).");
call    0 never executed
    25025: 7150:  if (f->cmd_target)
branch  0 taken 0 (fallthrough)
branch  1 taken 25025
    #####: 7151:    puts ("#  Command-line target.");
call    0 never executed
    25025: 7152:  if (f->dontcare)
branch  0 taken 0 (fallthrough)
branch  1 taken 25025
    #####: 7153:    puts ("#  A default or MAKEFILES makefile.");
call    0 never executed
    25025: 7154:  printf ("#  Implicit rule search has%s been done.\n",
call    0 returned 25025
    25025: 7155:	  f->tried_implicit ? "" : " not");
branch  0 taken 385 (fallthrough)
branch  1 taken 24640
    25025: 7156:  if (f->stem != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 25025
    #####: 7157:    printf ("#  Implicit/static pattern stem: `%s'\n", f->stem);
call    0 never executed
    25025: 7158:  if (f->intermediate)
branch  0 taken 0 (fallthrough)
branch  1 taken 25025
    #####: 7159:    puts ("#  File is an intermediate dependency.");
call    0 never executed
    25025: 7160:  if (f->also_make != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 25025
        -: 7161:    {
    #####: 7162:      fputs ("#  Also makes:", stdout);
call    0 never executed
    #####: 7163:      for (d = f->also_make; d != 0; d = d->next)
branch  0 never executed
branch  1 never executed
    #####: 7164:	printf (" %s", dep_name (d));
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 7165:      putchar ('\n');
call    0 never executed
        -: 7166:    }
    25025: 7167:  if (f->last_mtime == (time_t) 0)
branch  0 taken 24640 (fallthrough)
branch  1 taken 385
    24640: 7168:    puts ("#  Modification time never checked.");
call    0 returned 24640
      385: 7169:  else if (f->last_mtime == (time_t) -1)
branch  0 taken 384 (fallthrough)
branch  1 taken 1
      384: 7170:    puts ("#  File does not exist.");
call    0 returned 384
        -: 7171:  else
        1: 7172:    printf ("#  Last modified Sun Jan 01 00:00\n");
call    0 returned 1
    25025: 7173:  printf ("#  File has%s been updated.\n",
call    0 returned 25025
    25025: 7174:	  f->updated ? "" : " not");
branch  0 taken 129 (fallthrough)
branch  1 taken 24896
    25025: 7175:  switch (f->command_state)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 25025
branch  3 taken 0
        -: 7176:    {
    #####: 7177:    case cs_running:
    #####: 7178:      puts ("#  Commands currently running (THIS IS A BUG).");
call    0 never executed
    #####: 7179:      break;
    #####: 7180:    case cs_deps_running:
    #####: 7181:      puts ("#  Dependencies commands running (THIS IS A BUG).");
call    0 never executed
    #####: 7182:      break;
    25025: 7183:    case cs_not_started:
        -: 7184:    case cs_finished:
    25025: 7185:      switch (f->update_status)
branch  0 taken 24896
branch  1 taken 1
branch  2 taken 0
branch  3 taken 128
branch  4 taken 0
        -: 7186:	{
    24896: 7187:	case -1:
    24896: 7188:	  break;
        1: 7189:	case 0:
        1: 7190:	  puts ("#  Successfully updated.");
call    0 returned 1
        1: 7191:	  break;
    #####: 7192:	case 1:
    #####: 7193:	  assert (question_flag);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 7194:	  puts ("#  Needs to be updated (-q is set).");
call    0 never executed
    #####: 7195:	  break;
      128: 7196:	case 2:
      128: 7197:	  puts ("#  Failed to be updated.");
call    0 returned 128
      128: 7198:	  break;
    #####: 7199:	default:
    #####: 7200:	  puts ("#  Invalid value in `update_status' member!");
call    0 never executed
    #####: 7201:	  fflush (stdout);
call    0 never executed
    #####: 7202:	  fflush (stderr);
call    0 never executed
    #####: 7203:	  abort ();
call    0 never executed
        -: 7204:	}
    25025: 7205:      break;
    #####: 7206:    default:
    #####: 7207:      puts ("#  Invalid value in `command_state' member!");
call    0 never executed
    #####: 7208:      fflush (stdout);
call    0 never executed
    #####: 7209:      fflush (stderr);
call    0 never executed
    #####: 7210:      abort ();
call    0 never executed
        -: 7211:    }
        -: 7212:
    25025: 7213:  if (f->variables != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 25025
    #####: 7214:    print_file_variables (f);
call    0 never executed
        -: 7215:
    25025: 7216:  if (f->cmds != 0)
branch  0 taken 16555 (fallthrough)
branch  1 taken 8470
    16555: 7217:    print_commands (f->cmds);
call    0 returned 16555
    25025: 7218:}
        -: 7219:
        -: 7220:void
function print_file_data_base called 385 returned 100% blocks executed 94%
      385: 7221:print_file_data_base ()
        -: 7222:{
        -: 7223:  register unsigned int i, nfiles, per_bucket;
        -: 7224:  register struct file *file;
        -: 7225:
      385: 7226:  puts ("\n# Files");
call    0 returned 385
        -: 7227:
        -: 7228:#ifndef F_AA_6
      385: 7229:  per_bucket = nfiles = 0;
        -: 7230:#endif
        -: 7231:
   388080: 7232:  for (i = 0; i < FILE_BUCKETS; ++i)
branch  0 taken 387695
branch  1 taken 385 (fallthrough)
        -: 7233:    {
   387695: 7234:      register unsigned int this_bucket = 0;
        -: 7235:
   412720: 7236:      for (file = files[i]; file != 0; file = file->next)
branch  0 taken 25025
branch  1 taken 387695 (fallthrough)
        -: 7237:	{
        -: 7238:	  register struct file *f;
        -: 7239:
    25025: 7240:	  ++this_bucket;
        -: 7241:
    50050: 7242:	  for (f = file; f != 0; f = f->prev)
branch  0 taken 25025
branch  1 taken 25025 (fallthrough)
    25025: 7243:	    print_file (f);
call    0 returned 25025
        -: 7244:	}
        -: 7245:
   387695: 7246:      nfiles += this_bucket;
   387695: 7247:      if (this_bucket > per_bucket)
branch  0 taken 770 (fallthrough)
branch  1 taken 386925
      770: 7248:	per_bucket = this_bucket;
        -: 7249:    }
        -: 7250:
      385: 7251:  if (nfiles == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 385
    #####: 7252:    puts ("\n# No files.");
call    0 never executed
        -: 7253:  else
        -: 7254:    {
      385: 7255:      printf ("\n# %u files in %u hash buckets.\n", nfiles, FILE_BUCKETS);
call    0 returned 385
        -: 7256:#ifndef	NO_FLOAT
      385: 7257:      printf ("# average %.1f files per bucket, max %u files in one bucket.\n",
      385: 7258:	      ((double) nfiles) / ((double) FILE_BUCKETS) * 100.0, per_bucket);
call    0 returned 385
        -: 7259:#endif
        -: 7260:    }
      385: 7261:}
        -: 7262:
        -: 7263:/* EOF */
        -: 7264:
        -: 7265:
        -: 7266:
        -: 7267:/*************************************************************
        -: 7268:  ============================================================
        -: 7269:  ************************************************************
        -: 7270:  ============================================================
        -: 7271:  ************************************************************
        -: 7272:                         misc.c
        -: 7273:  ************************************************************
        -: 7274:  ============================================================
        -: 7275:  ************************************************************
        -: 7276:  ============================================================
        -: 7277:  *************************************************************/
        -: 7278:
        -: 7279:/* Miscellaneous generic support functions for GNU Make.
        -: 7280:Copyright (C) 1988,89,90,91,92,93,94,95,97 Free Software Foundation, Inc.
        -: 7281:This file is part of GNU Make.
        -: 7282:
        -: 7283:GNU Make is free software; you can redistribute it and/or modify
        -: 7284:it under the terms of the GNU General Public License as published by
        -: 7285:the Free Software Foundation; either version 2, or (at your option)
        -: 7286:any later version.
        -: 7287:
        -: 7288:GNU Make is distributed in the hope that it will be useful,
        -: 7289:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 7290:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 7291:GNU General Public License for more details.
        -: 7292:
        -: 7293:You should have received a copy of the GNU General Public License
        -: 7294:along with GNU Make; see the file COPYING.  If not, write to
        -: 7295:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 7296:
        -: 7297:#include "make.h"
        -: 7298:/* #include "dep.h"  <- modification by J.Ruthruff, 7/27 */
        -: 7299:#undef stderr
        -: 7300:#define stderr stdout
        -: 7301:
        -: 7302:
        -: 7303:/* Compare strings *S1 and *S2.
        -: 7304:   Return negative if the first is less, positive if it is greater,
        -: 7305:   zero if they are equal.  */
        -: 7306:
        -: 7307:int
function alpha_compare called 0 returned 0% blocks executed 0%
    #####: 7308:alpha_compare (s1, s2)
        -: 7309:     char **s1, **s2;
        -: 7310:{
    #####: 7311:  if (**s1 != **s2)
branch  0 never executed
branch  1 never executed
    #####: 7312:    return **s1 - **s2;
    #####: 7313:  return strcmp (*s1, *s2);
        -: 7314:}
        -: 7315:
        -: 7316:/* Discard each backslash-newline combination from LINE.
        -: 7317:   Backslash-backslash-newline combinations become backslash-newlines.
        -: 7318:   This is done by copying the text at LINE into itself.  */
        -: 7319:
        -: 7320:void
function collapse_continuations called 2615 returned 100% blocks executed 80%
     2615: 7321:collapse_continuations (line)
        -: 7322:     char *line;
        -: 7323:{
        -: 7324:  register char *in, *out, *p;
        -: 7325:  register int backslash;
        -: 7326:  register unsigned int bs_write;
        -: 7327:
     2615: 7328:  in = index (line, '\n');
     2615: 7329:  if (in == 0)
branch  0 taken 2594 (fallthrough)
branch  1 taken 21
     2594: 7330:    return;
        -: 7331:
       21: 7332:  out = in;
       42: 7333:  while (out > line && out[-1] == '\\')
branch  0 taken 42 (fallthrough)
branch  1 taken 0
branch  2 taken 21
branch  3 taken 21 (fallthrough)
       21: 7334:    --out;
        -: 7335:
       84: 7336:  while (*in != '\0')
branch  0 taken 63
branch  1 taken 21 (fallthrough)
        -: 7337:    {
        -: 7338:      /* BS_WRITE gets the number of quoted backslashes at
        -: 7339:	 the end just before IN, and BACKSLASH gets nonzero
        -: 7340:	 if the next character is quoted.  */
       63: 7341:      backslash = 0;
       63: 7342:      bs_write = 0;
      126: 7343:      for (p = in - 1; p >= line && *p == '\\'; --p)
branch  0 taken 126 (fallthrough)
branch  1 taken 0
branch  2 taken 63
branch  3 taken 63 (fallthrough)
        -: 7344:	{
       63: 7345:	  if (backslash)
branch  0 taken 0 (fallthrough)
branch  1 taken 63
    #####: 7346:	    ++bs_write;
       63: 7347:	  backslash = !backslash;
        -: 7348:
        -: 7349:	  /* It should be impossible to go back this far without exiting,
        -: 7350:	     but if we do, we can't get the right answer.  */
       63: 7351:	  if (in == out - 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 63
    #####: 7352:	    abort ();
call    0 never executed
        -: 7353:	}
        -: 7354:
        -: 7355:      /* Output the appropriate number of backslashes.  */
       63: 7356:      while (bs_write-- > 0)
branch  0 taken 0
branch  1 taken 63 (fallthrough)
    #####: 7357:	*out++ = '\\';
        -: 7358:
        -: 7359:      /* Skip the newline.  */
       63: 7360:      ++in;
        -: 7361:
        -: 7362:      /* If the newline is quoted, discard following whitespace
        -: 7363:	 and any preceding whitespace; leave just one space.  */
       63: 7364:      if (backslash)
branch  0 taken 63 (fallthrough)
branch  1 taken 0
        -: 7365:	{
       63: 7366:	  in = next_token (in);
call    0 returned 63
      126: 7367:	  while (out > line && isblank (out[-1]))
branch  0 taken 126 (fallthrough)
branch  1 taken 0
branch  2 taken 63
branch  3 taken 63 (fallthrough)
       63: 7368:	    --out;
       63: 7369:	  *out++ = ' ';
        -: 7370:	}
        -: 7371:      else
        -: 7372:	/* If the newline isn't quoted, put it in the output.  */
    #####: 7373:	*out++ = '\n';
        -: 7374:
        -: 7375:      /* Now copy the following line to the output.
        -: 7376:	 Stop when we find backslashes followed by a newline.  */
     2793: 7377:      while (*in != '\0')
branch  0 taken 2772
branch  1 taken 21 (fallthrough)
     2772: 7378:	if (*in == '\\')
branch  0 taken 42 (fallthrough)
branch  1 taken 2730
        -: 7379:	  {
       42: 7380:	    p = in + 1;
       42: 7381:	    while (*p == '\\')
branch  0 taken 0
branch  1 taken 42 (fallthrough)
    #####: 7382:	      ++p;
       42: 7383:	    if (*p == '\n')
branch  0 taken 42 (fallthrough)
branch  1 taken 0
        -: 7384:	      {
       42: 7385:		in = p;
       42: 7386:		break;
        -: 7387:	      }
    #####: 7388:	    while (in < p)
branch  0 never executed
branch  1 never executed
    #####: 7389:	      *out++ = *in++;
        -: 7390:	  }
        -: 7391:	else
     2730: 7392:	  *out++ = *in++;
        -: 7393:    }
        -: 7394:
       21: 7395:  *out = '\0';
        -: 7396:}
        -: 7397:
        -: 7398:
        -: 7399:/* Remove comments from LINE.
        -: 7400:   This is done by copying the text at LINE onto itself.  */
        -: 7401:
        -: 7402:void
function remove_comments called 2090 returned 100% blocks executed 100%
     2090: 7403:remove_comments (line)
        -: 7404:     char *line;
        -: 7405:{
        -: 7406:  char *comment;
        -: 7407:
     2090: 7408:  comment = find_char_unquote (line, "#", 0);
call    0 returned 2090
        -: 7409:
     2090: 7410:  if (comment != 0)
branch  0 taken 378 (fallthrough)
branch  1 taken 1712
        -: 7411:    /* Cut off the line at the #.  */
      378: 7412:    *comment = '\0';
     2090: 7413:}
        -: 7414:
        -: 7415:/* Print N spaces (used by DEBUGPR for target-depth).  */
        -: 7416:
        -: 7417:void
function print_spaces called 121856 returned 100% blocks executed 100%
   121856: 7418:print_spaces (n)
        -: 7419:     register unsigned int n;
        -: 7420:{
   564352: 7421:  while (n-- > 0)
branch  0 taken 442496
branch  1 taken 121856 (fallthrough)
   442496: 7422:    putchar (' ');
call    0 returned 442496
   121856: 7423:}
        -: 7424:
        -: 7425:
        -: 7426:/* Return a newly-allocated string whose contents
        -: 7427:   concatenate those of s1, s2, s3.  */
        -: 7428:
        -: 7429:char *
function concat called 936 returned 100% blocks executed 89%
      936: 7430:concat (s1, s2, s3)
        -: 7431:     register char *s1, *s2, *s3;
        -: 7432:{
        -: 7433:  register unsigned int len1, len2, len3;
        -: 7434:  register char *result;
        -: 7435:
     936*: 7436:  len1 = *s1 != '\0' ? strlen (s1) : 0;
branch  0 taken 936 (fallthrough)
branch  1 taken 0
     936*: 7437:  len2 = *s2 != '\0' ? strlen (s2) : 0;
branch  0 taken 936 (fallthrough)
branch  1 taken 0
      936: 7438:  len3 = *s3 != '\0' ? strlen (s3) : 0;
branch  0 taken 161 (fallthrough)
branch  1 taken 775
        -: 7439:
      936: 7440:  result = (char *) xmalloc (len1 + len2 + len3 + 1);
call    0 returned 936
        -: 7441:
      936: 7442:  if (*s1 != '\0')
branch  0 taken 936 (fallthrough)
branch  1 taken 0
      936: 7443:    bcopy (s1, result, len1);
      936: 7444:  if (*s2 != '\0')
branch  0 taken 936 (fallthrough)
branch  1 taken 0
      936: 7445:    bcopy (s2, result + len1, len2);
      936: 7446:  if (*s3 != '\0')
branch  0 taken 161 (fallthrough)
branch  1 taken 775
      161: 7447:    bcopy (s3, result + len1 + len2, len3);
      936: 7448:  *(result + len1 + len2 + len3) = '\0';
        -: 7449:
      936: 7450:  return result;
        -: 7451:}
        -: 7452:
        -: 7453:/* Print a message on stdout.  */
        -: 7454:
        -: 7455:void
function message called 16 returned 100% blocks executed 90%
       16: 7456:message (prefix, s1, s2, s3, s4, s5, s6)
        -: 7457:     int prefix;
        -: 7458:     char *s1, *s2, *s3, *s4, *s5, *s6;
        -: 7459:{
       16: 7460:  log_working_directory (1);
call    0 returned 16
        -: 7461:
       16: 7462:  if (s1 != 0)
branch  0 taken 16 (fallthrough)
branch  1 taken 0
        -: 7463:    {
       16: 7464:      if (prefix)
branch  0 taken 12 (fallthrough)
branch  1 taken 4
        -: 7465:	{
       12: 7466:	  if (makelevel == 0)
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 7467:	    printf ("%s: ", program);
call    0 returned 12
        -: 7468:	  else
    #####: 7469:	    printf ("%s[%u]: ", program, makelevel);
call    0 never executed
        -: 7470:	}
       16: 7471:      printf (s1, s2, s3, s4, s5, s6);
call    0 returned 16
       16: 7472:      putchar ('\n');
call    0 returned 16
        -: 7473:    }
        -: 7474:
       16: 7475:  fflush (stdout);
call    0 returned 16
       16: 7476:}
        -: 7477:
        -: 7478:/* Print an error message and exit.  */
        -: 7479:
        -: 7480:/* VARARGS1 */
        -: 7481:void
function fatal called 776 returned 0% blocks executed 88%
      776: 7482:fatal (s1, s2, s3, s4, s5, s6)
        -: 7483:     char *s1, *s2, *s3, *s4, *s5, *s6;
        -: 7484:{
      776: 7485:  log_working_directory (1);
call    0 returned 776
        -: 7486:
      776: 7487:  if (makelevel == 0)
branch  0 taken 776 (fallthrough)
branch  1 taken 0
      776: 7488:    fprintf (stderr, "%s: *** ", program);
call    0 returned 776
        -: 7489:  else
    #####: 7490:    fprintf (stderr, "%s[%u]: *** ", program, makelevel);
call    0 never executed
      776: 7491:  fprintf (stderr, s1, s2, s3, s4, s5, s6);
call    0 returned 776
      776: 7492:  fputs (".  Stop.\n", stderr);
call    0 returned 776
        -: 7493:
      776: 7494:  die (2);
call    0 returned 0
    #####: 7495:}
        -: 7496:
        -: 7497:/* Print error message.  `s1' is printf control string, `s2' is arg for it. */
        -: 7498:
        -: 7499:/* VARARGS1 */
        -: 7500:
        -: 7501:void
function error called 1285 returned 100% blocks executed 88%
     1285: 7502:error (s1, s2, s3, s4, s5, s6)
        -: 7503:     char *s1, *s2, *s3, *s4, *s5, *s6;
        -: 7504:{
     1285: 7505:  log_working_directory (1);
call    0 returned 1285
        -: 7506:
     1285: 7507:  if (makelevel == 0)
branch  0 taken 1285 (fallthrough)
branch  1 taken 0
     1285: 7508:    fprintf (stderr, "%s: ", program);
call    0 returned 1285
        -: 7509:  else
    #####: 7510:    fprintf (stderr, "%s[%u]: ", program, makelevel);
call    0 never executed
     1285: 7511:  fprintf (stderr, s1, s2, s3, s4, s5, s6);
call    0 returned 1285
     1285: 7512:  putc ('\n', stderr);
call    0 returned 1285
     1285: 7513:  fflush (stderr);
call    0 returned 1285
     1285: 7514:}
        -: 7515:
        -: 7516:void
function makefile_error called 86 returned 100% blocks executed 100%
       86: 7517:makefile_error (file, lineno, s1, s2, s3, s4, s5, s6)
        -: 7518:     char *file;
        -: 7519:     unsigned int lineno;
        -: 7520:     char *s1, *s2, *s3, *s4, *s5, *s6;
        -: 7521:{
       86: 7522:  log_working_directory (1);
call    0 returned 86
        -: 7523:
       86: 7524:  fprintf (stderr, "%s:%u: ", file, lineno);
call    0 returned 86
       86: 7525:  fprintf (stderr, s1, s2, s3, s4, s5, s6);
call    0 returned 86
       86: 7526:  putc ('\n', stderr);
call    0 returned 86
       86: 7527:  fflush (stderr);
call    0 returned 86
       86: 7528:}
        -: 7529:
        -: 7530:void
function makefile_fatal called 0 returned 0% blocks executed 0%
    #####: 7531:makefile_fatal (file, lineno, s1, s2, s3, s4, s5, s6)
        -: 7532:     char *file;
        -: 7533:     unsigned int lineno;
        -: 7534:     char *s1, *s2, *s3, *s4, *s5, *s6;
        -: 7535:{
    #####: 7536:  log_working_directory (1);
call    0 never executed
        -: 7537:
    #####: 7538:  fprintf (stderr, "%s:%u: *** ", file, lineno);
call    0 never executed
    #####: 7539:  fprintf (stderr, s1, s2, s3, s4, s5, s6);
call    0 never executed
    #####: 7540:  fputs (".  Stop.\n", stderr);
call    0 never executed
        -: 7541:
    #####: 7542:  die (2);
call    0 never executed
    #####: 7543:}
        -: 7544:
        -: 7545:#ifndef HAVE_STRERROR
        -: 7546:
        -: 7547:#undef	strerror
        -: 7548:
        -: 7549:char *
        -: 7550:strerror (errnum)
        -: 7551:     int errnum;
        -: 7552:{
        -: 7553:  extern int errno, sys_nerr;
        -: 7554:#ifndef __DECC
        -: 7555:  extern char *sys_errlist[];
        -: 7556:#endif
        -: 7557:  static char buf[] = "Unknown error 12345678901234567890";
        -: 7558:
        -: 7559:  if (errno < sys_nerr)
        -: 7560:    return sys_errlist[errnum];
        -: 7561:
        -: 7562:  sprintf (buf, "Unknown error %d", errnum);
        -: 7563:  return buf;
        -: 7564:}
        -: 7565:#endif
        -: 7566:
        -: 7567:/* Print an error message from errno.  */
        -: 7568:
        -: 7569:void
function perror_with_name called 771 returned 100% blocks executed 100%
      771: 7570:perror_with_name (str, name)
        -: 7571:     char *str, *name;
        -: 7572:{
      771: 7573:  error ("%s%s: %s", str, name, strerror (errno));
call    0 returned 771
call    1 returned 771
      771: 7574:}
        -: 7575:
        -: 7576:/* Print an error message from errno and exit.  */
        -: 7577:
        -: 7578:void
function pfatal_with_name called 2 returned 0% blocks executed 100%
        2: 7579:pfatal_with_name (name)
        -: 7580:     char *name;
        -: 7581:{
        2: 7582:  fatal ("%s: %s", name, strerror (errno));
call    0 returned 2
call    1 returned 0
        -: 7583:
        -: 7584:  /* NOTREACHED */
    #####: 7585:}
        -: 7586:
        -: 7587:/* Like malloc but get fatal error if memory is exhausted.  */
        -: 7588:
        -: 7589:#undef xmalloc
        -: 7590:#undef xrealloc
        -: 7591:
        -: 7592:char *
function xmalloc called 987561 returned 100% blocks executed 75%
   987561: 7593:xmalloc (size)
        -: 7594:     unsigned int size;
        -: 7595:{
   987561: 7596:  char *result = (char *) malloc (size);
   987561: 7597:  if (result == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 987561
    #####: 7598:    fatal ("virtual memory exhausted");
call    0 never executed
   987561: 7599:  return result;
        -: 7600:}
        -: 7601:
        -: 7602:
        -: 7603:char *
function xrealloc called 90 returned 100% blocks executed 75%
       90: 7604:xrealloc (ptr, size)
        -: 7605:     char *ptr;
        -: 7606:     unsigned int size;
        -: 7607:{
       90: 7608:  char *result = (char *) realloc (ptr, size);
       90: 7609:  if (result == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 90
    #####: 7610:    fatal ("virtual memory exhausted");
call    0 never executed
       90: 7611:  return result;
        -: 7612:}
        -: 7613:
        -: 7614:char *
function savestring called 307344 returned 100% blocks executed 100%
   307344: 7615:savestring (str, length)
        -: 7616:     char *str;
        -: 7617:     unsigned int length;
        -: 7618:{
   307344: 7619:  register char *out = (char *) xmalloc (length + 1);
call    0 returned 307344
   307344: 7620:  if (length > 0)
branch  0 taken 306383 (fallthrough)
branch  1 taken 961
   306383: 7621:    bcopy (str, out, length);
   307344: 7622:  out[length] = '\0';
   307344: 7623:  return out;
        -: 7624:}
        -: 7625:
        -: 7626:/* Search string BIG (length BLEN) for an occurrence of
        -: 7627:   string SMALL (length SLEN).  Return a pointer to the
        -: 7628:   beginning of the first occurrence, or return nil if none found.  */
        -: 7629:
        -: 7630:char *
function sindex called 8 returned 100% blocks executed 75%
        8: 7631:sindex (big, blen, small, slen)
        -: 7632:     char *big;
        -: 7633:     unsigned int blen;
        -: 7634:     char *small;
        -: 7635:     unsigned int slen;
        -: 7636:{
        -: 7637:  register unsigned int b;
        -: 7638:
        8: 7639:  if (blen < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 7640:    blen = strlen (big);
        8: 7641:  if (slen < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 7642:    slen = strlen (small);
        -: 7643:
      324: 7644:  for (b = 0; b < blen; ++b)
branch  0 taken 316
branch  1 taken 8 (fallthrough)
      316: 7645:    if (big[b] == *small && !strncmp (&big[b + 1], small + 1, slen - 1))
branch  0 taken 40 (fallthrough)
branch  1 taken 276
branch  2 taken 0 (fallthrough)
branch  3 taken 40
    #####: 7646:      return (&big[b]);
        -: 7647:
        8: 7648:  return 0;
        -: 7649:}
        -: 7650:
        -: 7651:/* Limited INDEX:
        -: 7652:   Search through the string STRING, which ends at LIMIT, for the character C.
        -: 7653:   Returns a pointer to the first occurrence, or nil if none is found.
        -: 7654:   Like INDEX except that the string searched ends where specified
        -: 7655:   instead of at the first null.  */
        -: 7656:
        -: 7657:char *
function lindex called 13838 returned 100% blocks executed 100%
    13838: 7658:lindex (s, limit, c)
        -: 7659:     register char *s, *limit;
        -: 7660:     int c;
        -: 7661:{
   125304: 7662:  while (s < limit)
branch  0 taken 115498
branch  1 taken 9806 (fallthrough)
   115498: 7663:    if (*s++ == c)
branch  0 taken 4032 (fallthrough)
branch  1 taken 111466
     4032: 7664:      return s - 1;
        -: 7665:
     9806: 7666:  return 0;
        -: 7667:}
        -: 7668:
        -: 7669:/* Return the address of the first whitespace or null in the string S.  */
        -: 7670:
        -: 7671:char *
function end_of_token called 0 returned 0% blocks executed 0%
    #####: 7672:end_of_token (s)
        -: 7673:     char *s;
        -: 7674:{
    #####: 7675:  while (*s != '\0' && !isblank (*s))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7676:    ++s;
    #####: 7677:  return s;
        -: 7678:}
        -: 7679:
        -: 7680:#ifdef WINDOWS32
        -: 7681:/*
        -: 7682: * Same as end_of_token, but take into account a stop character
        -: 7683: */
        -: 7684:char *
        -: 7685:end_of_token_w32 (s, stopchar)
        -: 7686:     char *s;
        -: 7687:     char stopchar;
        -: 7688:{
        -: 7689:  register char *p = s;
        -: 7690:  register int backslash = 0;
        -: 7691:
        -: 7692:  while (*p != '\0' && *p != stopchar && (backslash || !isblank (*p)))
        -: 7693:    {
        -: 7694:      if (*p++ == '\\')
        -: 7695:        {
        -: 7696:          backslash = !backslash;
        -: 7697:          while (*p == '\\')
        -: 7698:            {
        -: 7699:              backslash = !backslash;
        -: 7700:              ++p;
        -: 7701:            }
        -: 7702:        }
        -: 7703:      else
        -: 7704:        backslash = 0;
        -: 7705:    }
        -: 7706:
        -: 7707:  return p;
        -: 7708:}
        -: 7709:#endif
        -: 7710:
        -: 7711:/* Return the address of the first nonwhitespace or null in the string S.  */
        -: 7712:
        -: 7713:char *
function next_token called 96717 returned 100% blocks executed 100%
    96717: 7714:next_token (s)
        -: 7715:     char *s;
        -: 7716:{
    96717: 7717:  register char *p = s;
        -: 7718:
   125681: 7719:  while (isblank (*p))
branch  0 taken 28964
branch  1 taken 96717 (fallthrough)
    28964: 7720:    ++p;
    96717: 7721:  return p;
        -: 7722:}
        -: 7723:
        -: 7724:/* Find the next token in PTR; return the address of it, and store the
        -: 7725:   length of the token into *LENGTHPTR if LENGTHPTR is not nil.  */
        -: 7726:
        -: 7727:char *
function find_next_token called 790 returned 100% blocks executed 50%
      790: 7728:find_next_token (ptr, lengthptr)
        -: 7729:     char **ptr;
        -: 7730:     unsigned int *lengthptr;
        -: 7731:{
      790: 7732:  char *p = next_token (*ptr);
call    0 returned 790
        -: 7733:  char *end;
        -: 7734:
      790: 7735:  if (*p == '\0')
branch  0 taken 790 (fallthrough)
branch  1 taken 0
      790: 7736:    return 0;
        -: 7737:
    #####: 7738:  *ptr = end = end_of_token (p);
call    0 never executed
    #####: 7739:  if (lengthptr != 0)
branch  0 never executed
branch  1 never executed
    #####: 7740:    *lengthptr = end - p;
    #####: 7741:  return p;
        -: 7742:}
        -: 7743:
        -: 7744:/* Copy a chain of `struct dep', making a new chain
        -: 7745:   with the same contents as the old one.  */
        -: 7746:
        -: 7747:struct dep *
function copy_dep_chain called 848 returned 100% blocks executed 100%
      848: 7748:copy_dep_chain (d)
        -: 7749:     register struct dep *d;
        -: 7750:{
        -: 7751:  register struct dep *c;
      848: 7752:  struct dep *firstnew = 0;
        -: 7753:  struct dep *lastnew;
        -: 7754:
     1701: 7755:  while (d != 0)
branch  0 taken 853
branch  1 taken 848 (fallthrough)
        -: 7756:    {
      853: 7757:      c = (struct dep *) xmalloc (sizeof (struct dep));
call    0 returned 853
      853: 7758:      bcopy ((char *) d, (char *) c, sizeof (struct dep));
      853: 7759:      if (c->name != 0)
branch  0 taken 42 (fallthrough)
branch  1 taken 811
       42: 7760:	c->name = savestring (c->name, strlen (c->name));
call    0 returned 42
      853: 7761:      c->next = 0;
      853: 7762:      if (firstnew == 0)
branch  0 taken 848 (fallthrough)
branch  1 taken 5
        -: 7763:#ifndef F_AA_3
      848: 7764:	firstnew = lastnew = c;
        -: 7765:#else
        -: 7766:	firstnew = c;
        -: 7767:#endif
        -: 7768:      else
        5: 7769:	lastnew = lastnew->next = c;
        -: 7770:
      853: 7771:      d = d->next;
        -: 7772:    }
        -: 7773:
      848: 7774:  return firstnew;
        -: 7775:}
        -: 7776:
        -: 7777:#ifdef	iAPX286
        -: 7778:/* The losing compiler on this machine can't handle this macro.  */
        -: 7779:
        -: 7780:char *
        -: 7781:dep_name (dep)
        -: 7782:     struct dep *dep;
        -: 7783:{
        -: 7784:  return dep->name == 0 ? dep->file->name : dep->name;
        -: 7785:}
        -: 7786:#endif
        -: 7787:
        -: 7788:#ifdef	GETLOADAVG_PRIVILEGED
        -: 7789:
        -: 7790:#ifdef POSIX
        -: 7791:
        -: 7792:/* Hopefully if a system says it's POSIX.1 and has the setuid and setgid
        -: 7793:   functions, they work as POSIX.1 says.  Some systems (Alpha OSF/1 1.2,
        -: 7794:   for example) which claim to be POSIX.1 also have the BSD setreuid and
        -: 7795:   setregid functions, but they don't work as in BSD and only the POSIX.1
        -: 7796:   way works.  */
        -: 7797:
        -: 7798:#undef HAVE_SETREUID
        -: 7799:#undef HAVE_SETREGID
        -: 7800:
        -: 7801:#else	/* Not POSIX.  */
        -: 7802:
        -: 7803:/* Some POSIX.1 systems have the seteuid and setegid functions.  In a
        -: 7804:   POSIX-like system, they are the best thing to use.  However, some
        -: 7805:   non-POSIX systems have them too but they do not work in the POSIX style
        -: 7806:   and we must use setreuid and setregid instead.  */
        -: 7807:
        -: 7808:#undef HAVE_SETEUID
        -: 7809:#undef HAVE_SETEGID
        -: 7810:
        -: 7811:#endif	/* POSIX.  */
        -: 7812:
        -: 7813:#ifndef	HAVE_UNISTD_H
        -: 7814:extern int getuid (), getgid (), geteuid (), getegid ();
        -: 7815:extern int setuid (), setgid ();
        -: 7816:#ifdef HAVE_SETEUID
        -: 7817:extern int seteuid ();
        -: 7818:#else
        -: 7819:#ifdef	HAVE_SETREUID
        -: 7820:extern int setreuid ();
        -: 7821:#endif	/* Have setreuid.  */
        -: 7822:#endif	/* Have seteuid.  */
        -: 7823:#ifdef HAVE_SETEGID
        -: 7824:extern int setegid ();
        -: 7825:#else
        -: 7826:#ifdef	HAVE_SETREGID
        -: 7827:extern int setregid ();
        -: 7828:#endif	/* Have setregid.  */
        -: 7829:#endif	/* Have setegid.  */
        -: 7830:#endif	/* No <unistd.h>.  */
        -: 7831:
        -: 7832:/* Keep track of the user and group IDs for user- and make- access.  */
        -: 7833:static int user_uid = -1, user_gid = -1, make_uid = -1, make_gid = -1;
        -: 7834:#define	access_inited	(user_uid != -1)
        -: 7835:static enum { make, user } current_access;
        -: 7836:
        -: 7837:
        -: 7838:/* Under -d, write a message describing the current IDs.  */
        -: 7839:
        -: 7840:static void
        -: 7841:log_access (flavor)
        -: 7842:     char *flavor;
        -: 7843:{
        -: 7844:  if (! debug_flag)
        -: 7845:    return;
        -: 7846:
        -: 7847:  /* All the other debugging messages go to stdout,
        -: 7848:     but we write this one to stderr because it might be
        -: 7849:     run in a child fork whose stdout is piped.  */
        -: 7850:
        -: 7851:  fprintf (stderr, "%s access: user %d (real %d), group %d (real %d)\n",
        -: 7852:	   flavor, geteuid (), getuid (), getegid (), getgid ());
        -: 7853:  fflush (stderr);
        -: 7854:}
        -: 7855:
        -: 7856:
        -: 7857:static void
        -: 7858:init_access ()
        -: 7859:{
        -: 7860:#ifndef VMS
        -: 7861:  user_uid = getuid ();
        -: 7862:  user_gid = getgid ();
        -: 7863:
        -: 7864:  make_uid = geteuid ();
        -: 7865:  make_gid = getegid ();
        -: 7866:
        -: 7867:  /* Do these ever fail?  */
        -: 7868:  if (user_uid == -1 || user_gid == -1 || make_uid == -1 || make_gid == -1)
        -: 7869:    pfatal_with_name ("get{e}[gu]id");
        -: 7870:
        -: 7871:  log_access ("Initialized");
        -: 7872:
        -: 7873:  current_access = make;
        -: 7874:#endif
        -: 7875:}
        -: 7876:
        -: 7877:#endif	/* GETLOADAVG_PRIVILEGED */
        -: 7878:
        -: 7879:/* Give the process appropriate permissions for access to
        -: 7880:   user data (i.e., to stat files, or to spawn a child process).  */
        -: 7881:void
function user_access called 793 returned 100% blocks executed 100%
      793: 7882:user_access ()
        -: 7883:{
        -: 7884:#ifdef	GETLOADAVG_PRIVILEGED
        -: 7885:
        -: 7886:  if (!access_inited)
        -: 7887:    init_access ();
        -: 7888:
        -: 7889:  if (current_access == user)
        -: 7890:    return;
        -: 7891:
        -: 7892:  /* We are in "make access" mode.  This means that the effective user and
        -: 7893:     group IDs are those of make (if it was installed setuid or setgid).
        -: 7894:     We now want to set the effective user and group IDs to the real IDs,
        -: 7895:     which are the IDs of the process that exec'd make.  */
        -: 7896:
        -: 7897:#ifdef	HAVE_SETEUID
        -: 7898:
        -: 7899:  /* Modern systems have the seteuid/setegid calls which set only the
        -: 7900:     effective IDs, which is ideal.  */
        -: 7901:
        -: 7902:  if (seteuid (user_uid) < 0)
        -: 7903:    pfatal_with_name ("user_access: seteuid");
        -: 7904:
        -: 7905:#else	/* Not HAVE_SETEUID.  */
        -: 7906:
        -: 7907:#ifndef	HAVE_SETREUID
        -: 7908:
        -: 7909:  /* System V has only the setuid/setgid calls to set user/group IDs.
        -: 7910:     There is an effective ID, which can be set by setuid/setgid.
        -: 7911:     It can be set (unless you are root) only to either what it already is
        -: 7912:     (returned by geteuid/getegid, now in make_uid/make_gid),
        -: 7913:     the real ID (return by getuid/getgid, now in user_uid/user_gid),
        -: 7914:     or the saved set ID (what the effective ID was before this set-ID
        -: 7915:     executable (make) was exec'd).  */
        -: 7916:
        -: 7917:  if (setuid (user_uid) < 0)
        -: 7918:    pfatal_with_name ("user_access: setuid");
        -: 7919:
        -: 7920:#else	/* HAVE_SETREUID.  */
        -: 7921:
        -: 7922:  /* In 4BSD, the setreuid/setregid calls set both the real and effective IDs.
        -: 7923:     They may be set to themselves or each other.  So you have two alternatives
        -: 7924:     at any one time.  If you use setuid/setgid, the effective will be set to
        -: 7925:     the real, leaving only one alternative.  Using setreuid/setregid, however,
        -: 7926:     you can toggle between your two alternatives by swapping the values in a
        -: 7927:     single setreuid or setregid call.  */
        -: 7928:
        -: 7929:  if (setreuid (make_uid, user_uid) < 0)
        -: 7930:    pfatal_with_name ("user_access: setreuid");
        -: 7931:
        -: 7932:#endif	/* Not HAVE_SETREUID.  */
        -: 7933:#endif	/* HAVE_SETEUID.  */
        -: 7934:
        -: 7935:#ifdef	HAVE_SETEGID
        -: 7936:  if (setegid (user_gid) < 0)
        -: 7937:    pfatal_with_name ("user_access: setegid");
        -: 7938:#else
        -: 7939:#ifndef	HAVE_SETREGID
        -: 7940:  if (setgid (user_gid) < 0)
        -: 7941:    pfatal_with_name ("user_access: setgid");
        -: 7942:#else
        -: 7943:  if (setregid (make_gid, user_gid) < 0)
        -: 7944:    pfatal_with_name ("user_access: setregid");
        -: 7945:#endif
        -: 7946:#endif
        -: 7947:
        -: 7948:  current_access = user;
        -: 7949:
        -: 7950:  log_access ("User");
        -: 7951:
        -: 7952:#endif	/* GETLOADAVG_PRIVILEGED */
      793: 7953:}
        -: 7954:
        -: 7955:/* Give the process appropriate permissions for access to
        -: 7956:   make data (i.e., the load average).  */
        -: 7957:void
function make_access called 0 returned 0% blocks executed 0%
    #####: 7958:make_access ()
        -: 7959:{
        -: 7960:#ifdef	GETLOADAVG_PRIVILEGED
        -: 7961:
        -: 7962:  if (!access_inited)
        -: 7963:    init_access ();
        -: 7964:
        -: 7965:  if (current_access == make)
        -: 7966:    return;
        -: 7967:
        -: 7968:  /* See comments in user_access, above.  */
        -: 7969:
        -: 7970:#ifdef	HAVE_SETEUID
        -: 7971:  if (seteuid (make_uid) < 0)
        -: 7972:    pfatal_with_name ("make_access: seteuid");
        -: 7973:#else
        -: 7974:#ifndef	HAVE_SETREUID
        -: 7975:  if (setuid (make_uid) < 0)
        -: 7976:    pfatal_with_name ("make_access: setuid");
        -: 7977:#else
        -: 7978:  if (setreuid (user_uid, make_uid) < 0)
        -: 7979:    pfatal_with_name ("make_access: setreuid");
        -: 7980:#endif
        -: 7981:#endif
        -: 7982:
        -: 7983:#ifdef	HAVE_SETEGID
        -: 7984:  if (setegid (make_gid) < 0)
        -: 7985:    pfatal_with_name ("make_access: setegid");
        -: 7986:#else
        -: 7987:#ifndef	HAVE_SETREGID
        -: 7988:  if (setgid (make_gid) < 0)
        -: 7989:    pfatal_with_name ("make_access: setgid");
        -: 7990:#else
        -: 7991:  if (setregid (user_gid, make_gid) < 0)
        -: 7992:    pfatal_with_name ("make_access: setregid");
        -: 7993:#endif
        -: 7994:#endif
        -: 7995:
        -: 7996:  current_access = make;
        -: 7997:
        -: 7998:  log_access ("Make");
        -: 7999:
        -: 8000:#endif	/* GETLOADAVG_PRIVILEGED */
    #####: 8001:}
        -: 8002:
        -: 8003:/* Give the process appropriate permissions for a child process.
        -: 8004:   This is like user_access, but you can't get back to make_access.  */
        -: 8005:void
function child_access called 3 returned 100% blocks executed 100%
        3: 8006:child_access ()
        -: 8007:{
        -: 8008:#ifdef	GETLOADAVG_PRIVILEGED
        -: 8009:
        -: 8010:  if (!access_inited)
        -: 8011:    abort ();
        -: 8012:
        -: 8013:  /* Set both the real and effective UID and GID to the user's.
        -: 8014:     They cannot be changed back to make's.  */
        -: 8015:
        -: 8016:#ifndef	HAVE_SETREUID
        -: 8017:  if (setuid (user_uid) < 0)
        -: 8018:    pfatal_with_name ("child_access: setuid");
        -: 8019:#else
        -: 8020:  if (setreuid (user_uid, user_uid) < 0)
        -: 8021:    pfatal_with_name ("child_access: setreuid");
        -: 8022:#endif
        -: 8023:
        -: 8024:#ifndef	HAVE_SETREGID
        -: 8025:  if (setgid (user_gid) < 0)
        -: 8026:    pfatal_with_name ("child_access: setgid");
        -: 8027:#else
        -: 8028:  if (setregid (user_gid, user_gid) < 0)
        -: 8029:    pfatal_with_name ("child_access: setregid");
        -: 8030:#endif
        -: 8031:
        -: 8032:  log_access ("Child");
        -: 8033:
        -: 8034:#endif	/* GETLOADAVG_PRIVILEGED */
        3: 8035:}
        -: 8036:
        -: 8037:#ifdef NEED_GET_PATH_MAX
        -: 8038:unsigned int
        -: 8039:get_path_max ()
        -: 8040:{
        -: 8041:  static unsigned int value;
        -: 8042:
        -: 8043:  if (value == 0)
        -: 8044:    {
        -: 8045:      long int x = pathconf ("/", _PC_PATH_MAX);
        -: 8046:      if (x > 0)
        -: 8047:	value = x;
        -: 8048:      else
        -: 8049:	return MAXPATHLEN;
        -: 8050:    }
        -: 8051:
        -: 8052:  return value;
        -: 8053:}
        -: 8054:#endif
        -: 8055:
        -: 8056:
        -: 8057:
        -: 8058:/*************************************************************
        -: 8059:  ============================================================
        -: 8060:  ************************************************************
        -: 8061:  ============================================================
        -: 8062:  ************************************************************
        -: 8063:                         read.c
        -: 8064:  ************************************************************
        -: 8065:  ============================================================
        -: 8066:  ************************************************************
        -: 8067:  ============================================================
        -: 8068:  *************************************************************/
        -: 8069:
        -: 8070:/* Reading and parsing of makefiles for GNU Make.
        -: 8071:Copyright (C) 1988,89,90,91,92,93,94,95,96,97 Free Software Foundation, Inc.
        -: 8072:This file is part of GNU Make.
        -: 8073:
        -: 8074:GNU Make is free software; you can redistribute it and/or modify
        -: 8075:it under the terms of the GNU General Public License as published by
        -: 8076:the Free Software Foundation; either version 2, or (at your option)
        -: 8077:any later version.
        -: 8078:
        -: 8079:GNU Make is distributed in the hope that it will be useful,
        -: 8080:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 8081:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 8082:GNU General Public License for more details.
        -: 8083:
        -: 8084:You should have received a copy of the GNU General Public License
        -: 8085:along with GNU Make; see the file COPYING.  If not, write to
        -: 8086:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 8087:
        -: 8088:#include "make.h"
        -: 8089:/* #include "dep.h"  <- modification by J.Ruthruff, 7/27 */
        -: 8090:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -: 8091:#include "job.h"
        -: 8092:/* #include "commands.h"  <- modification by J.Ruthruff, 7/27 */
        -: 8093:/* #include "variable.h"  <- modification by J.Ruthruff, 7/27 */
        -: 8094:#undef stderr
        -: 8095:#define stderr stdout
        -: 8096:
        -: 8097:/* This is POSIX.2, but most systems using -DPOSIX probably don't have it.  */
        -: 8098:#ifdef	HAVE_GLOB_H
        -: 8099:#include <glob.h>
        -: 8100:#undef stderr
        -: 8101:#define stderr stdout
        -: 8102:#else
        -: 8103:#include "glob.h"
        -: 8104:#undef stderr
        -: 8105:#define stderr stdout
        -: 8106:#endif
        -: 8107:
        -: 8108:#ifndef WINDOWS32
        -: 8109:#ifndef _AMIGA
        -: 8110:#ifndef VMS
        -: 8111:#include <pwd.h>
        -: 8112:#undef stderr
        -: 8113:#define stderr stdout
        -: 8114:#else
        -: 8115:struct passwd *getpwnam PARAMS ((char *name));
        -: 8116:#endif
        -: 8117:#endif
        -: 8118:#endif /* !WINDOWS32 */
        -: 8119:
        -: 8120:/* A `struct linebuffer' is a structure which holds a line of text.
        -: 8121:   `readline' reads a line from a stream into a linebuffer
        -: 8122:   and works regardless of the length of the line.  */
        -: 8123:
        -: 8124:struct linebuffer
        -: 8125:  {
        -: 8126:    /* Note:  This is the number of bytes malloc'ed for `buffer'
        -: 8127:       It does not indicate `buffer's real length.
        -: 8128:       Instead, a null char indicates end-of-string.  */
        -: 8129:    unsigned int size;
        -: 8130:    char *buffer;
        -: 8131:  };
        -: 8132:
        -: 8133:#define initbuffer(lb) (lb)->buffer = (char *) xmalloc ((lb)->size = 200)
        -: 8134:#define freebuffer(lb) free ((lb)->buffer)
        -: 8135:
        -: 8136:
        -: 8137:/* A `struct conditionals' contains the information describing
        -: 8138:   all the active conditionals in a makefile.
        -: 8139:
        -: 8140:   The global variable `conditionals' contains the conditionals
        -: 8141:   information for the current makefile.  It is initialized from
        -: 8142:   the static structure `toplevel_conditionals' and is later changed
        -: 8143:   to new structures for included makefiles.  */
        -: 8144:
        -: 8145:struct conditionals
        -: 8146:  {
        -: 8147:    unsigned int if_cmds;	/* Depth of conditional nesting.  */
        -: 8148:    unsigned int allocated;	/* Elts allocated in following arrays.  */
        -: 8149:    char *ignoring;		/* Are we ignoring or interepreting?  */
        -: 8150:    char *seen_else;		/* Have we already seen an `else'?  */
        -: 8151:  };
        -: 8152:
        -: 8153:static struct conditionals toplevel_conditionals;
        -: 8154:static struct conditionals *conditionals = &toplevel_conditionals;
        -: 8155:
        -: 8156:
        -: 8157:/* Default directories to search for include files in  */
        -: 8158:
        -: 8159:static char *default_include_directories[] =
        -: 8160:  {
        -: 8161:#if defined(WINDOWS32) && !defined(INCLUDEDIR)
        -: 8162:/*
        -: 8163: * This completly up to the user when they install MSVC or other packages.
        -: 8164: * This is defined as a placeholder.
        -: 8165: */
        -: 8166:#define INCLUDEDIR "."
        -: 8167:#endif
        -: 8168:    INCLUDEDIR,
        -: 8169:#ifndef _AMIGA
        -: 8170:    "/usr/gnu/include",
        -: 8171:    "/usr/local/include",
        -: 8172:    "/usr/include",
        -: 8173:#endif
        -: 8174:    0
        -: 8175:  };
        -: 8176:
        -: 8177:/* List of directories to search for include files in  */
        -: 8178:
        -: 8179:static char **include_directories_to_search;
        -: 8180:
        -: 8181:/* Maximum length of an element of the above.  */
        -: 8182:
        -: 8183:static unsigned int max_incl_len;
        -: 8184:
        -: 8185:/* The filename and pointer to line number of the
        -: 8186:   makefile currently being read in.  */
        -: 8187:
        -: 8188:char *reading_filename;
        -: 8189:unsigned int *reading_lineno_ptr;
        -: 8190:
        -: 8191:/* The chain of makefiles read by read_makefile.  */
        -: 8192:
        -: 8193:static struct dep *read_makefiles = 0;
        -: 8194:
        -: 8195:static int read_makefile PARAMS ((char *filename, int flags));
        -: 8196:static unsigned int readline PARAMS ((struct linebuffer *linebuffer, FILE *stream,
        -: 8197:			char *filename, unsigned int lineno));
        -: 8198:static unsigned int do_define PARAMS ((char *name, unsigned int namelen, enum variable_origin origin,
        -: 8199:			unsigned int lineno, FILE *infile, char *filename));
        -: 8200:static int conditional_line PARAMS ((char *line, char *filename, unsigned int lineno));
        -: 8201:static void record_files PARAMS ((struct nameseq *filenames, char *pattern, char *pattern_percent,
        -: 8202:			struct dep *deps, unsigned int commands_started, char *commands,
        -: 8203:			unsigned int commands_idx, int two_colon, char *filename,
        -: 8204:			unsigned int lineno, int set_default));
        -: 8205:
        -: 8206:/* Read in all the makefiles and return the chain of their names.  */
        -: 8207:
        -: 8208:struct dep *
function read_all_makefiles called 790 returned 100% blocks executed 58%
      790: 8209:read_all_makefiles (makefiles)
        -: 8210:     char **makefiles;
        -: 8211:{
      790: 8212:  unsigned int num_makefiles = 0;
        -: 8213:
      790: 8214:  if (debug_flag)
branch  0 taken 384 (fallthrough)
branch  1 taken 406
      384: 8215:    puts ("Reading makefiles...");
call    0 returned 384
        -: 8216:
        -: 8217:  /* If there's a non-null variable MAKEFILES, its value is a list of
        -: 8218:     files to read first thing.  But don't let it prevent reading the
        -: 8219:     default makefiles and don't let the default goal come from there.  */
        -: 8220:
        -: 8221:  {
        -: 8222:    char *value;
        -: 8223:    char *name, *p;
        -: 8224:    unsigned int length;
        -: 8225:
        -: 8226:    {
        -: 8227:      /* Turn off --warn-undefined-variables while we expand MAKEFILES.  */
      790: 8228:      int save = warn_undefined_variables_flag;
      790: 8229:      warn_undefined_variables_flag = 0;
        -: 8230:
      790: 8231:      value = allocated_variable_expand ("$(MAKEFILES)");
call    0 returned 790
        -: 8232:
      790: 8233:      warn_undefined_variables_flag = save;
        -: 8234:    }
        -: 8235:
        -: 8236:    /* Set NAME to the start of next token and LENGTH to its length.
        -: 8237:       MAKEFILES is updated for finding remaining tokens.  */
      790: 8238:    p = value;
        -: 8239:
      790: 8240:    while ((name = find_next_token (&p, &length)) != 0)
call    0 returned 790
branch  1 taken 0
branch  2 taken 790 (fallthrough)
        -: 8241:      {
    #####: 8242:	if (*p != '\0')
branch  0 never executed
branch  1 never executed
    #####: 8243:	  *p++ = '\0';
    #####: 8244:	(void) read_makefile (name,
call    0 never executed
        -: 8245:			      RM_NO_DEFAULT_GOAL | RM_INCLUDED | RM_DONTCARE);
        -: 8246:      }
        -: 8247:
      790: 8248:    free (value);
        -: 8249:  }
        -: 8250:
        -: 8251:  /* Read makefiles specified with -f switches.  */
        -: 8252:
      790: 8253:  if (makefiles != 0)
branch  0 taken 772 (fallthrough)
branch  1 taken 18
     1544: 8254:    while (*makefiles != 0)
branch  0 taken 772
branch  1 taken 772 (fallthrough)
        -: 8255:      {
      772: 8256:	struct dep *tail = read_makefiles;
        -: 8257:	register struct dep *d;
        -: 8258:
      772: 8259:	if (! read_makefile (*makefiles, 0))
call    0 returned 772
branch  1 taken 771 (fallthrough)
branch  2 taken 1
      771: 8260:	  perror_with_name ("", *makefiles);
call    0 returned 771
        -: 8261:
        -: 8262:	/* Find the right element of read_makefiles.  */
      772: 8263:	d = read_makefiles;
      772: 8264:	while (d->next != tail)
branch  0 taken 0
branch  1 taken 772 (fallthrough)
    #####: 8265:	  d = d->next;
        -: 8266:
        -: 8267:	/* Use the storage read_makefile allocates.  */
     772*: 8268:	*makefiles = dep_name (d);
branch  0 taken 772 (fallthrough)
branch  1 taken 0
      772: 8269:	++num_makefiles;
      772: 8270:	++makefiles;
        -: 8271:      }
        -: 8272:
        -: 8273:  /* If there were no -f switches, try the default names.  */
        -: 8274:
      790: 8275:  if (num_makefiles == 0)
branch  0 taken 18 (fallthrough)
branch  1 taken 772
        -: 8276:    {
        -: 8277:      static char *default_makefiles[] =
        -: 8278:#ifdef VMS
        -: 8279:	/* all lower case since readdir() (the vms version) 'lowercasifies' */
        -: 8280:	{ "makefile.vms", "gnumakefile", "makefile", 0 };
        -: 8281:#else
        -: 8282:#ifdef _AMIGA
        -: 8283:	{ "GNUmakefile", "Makefile", "SMakefile", 0 };
        -: 8284:#else /* !Amiga && !VMS */
        -: 8285:	{ "GNUmakefile", "makefile", "Makefile", 0 };
        -: 8286:#endif /* AMIGA */
        -: 8287:#endif /* VMS */
       18: 8288:      register char **p = default_makefiles;
       54: 8289:      while (*p != 0 && !file_exists_p (*p))
branch  0 taken 54 (fallthrough)
branch  1 taken 0
call    2 returned 54
branch  3 taken 36
branch  4 taken 18 (fallthrough)
       36: 8290:	++p;
        -: 8291:
       18: 8292:      if (*p != 0)
branch  0 taken 18 (fallthrough)
branch  1 taken 0
        -: 8293:	{
       18: 8294:	  if (! read_makefile (*p, 0))
call    0 returned 18
branch  1 taken 0 (fallthrough)
branch  2 taken 18
    #####: 8295:	    perror_with_name ("", *p);
call    0 never executed
        -: 8296:	}
        -: 8297:      else
        -: 8298:	{
        -: 8299:	  /* No default makefile was found.  Add the default makefiles to the
        -: 8300:	     `read_makefiles' chain so they will be updated if possible.  */
    #####: 8301:	  struct dep *tail = read_makefiles;
        -: 8302:	  /* Add them to the tail, after any MAKEFILES variable makefiles.  */
    #####: 8303:	  while (tail != 0 && tail->next != 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8304:	    tail = tail->next;
    #####: 8305:	  for (p = default_makefiles; *p != 0; ++p)
branch  0 never executed
branch  1 never executed
        -: 8306:	    {
    #####: 8307:	      struct dep *d = (struct dep *) xmalloc (sizeof (struct dep));
call    0 never executed
    #####: 8308:	      d->name = 0;
    #####: 8309:	      d->file = enter_file (*p);
call    0 never executed
    #####: 8310:	      d->file->dontcare = 1;
        -: 8311:	      /* Tell update_goal_chain to bail out as soon as this file is
        -: 8312:		 made, and main not to die if we can't make this file.  */
    #####: 8313:	      d->changed = RM_DONTCARE;
    #####: 8314:	      if (tail == 0)
branch  0 never executed
branch  1 never executed
    #####: 8315:		read_makefiles = d;
        -: 8316:	      else
    #####: 8317:		tail->next = d;
    #####: 8318:	      tail = d;
        -: 8319:	    }
    #####: 8320:	  if (tail != 0)
branch  0 never executed
branch  1 never executed
    #####: 8321:	    tail->next = 0;
        -: 8322:	}
        -: 8323:    }
        -: 8324:
      790: 8325:  return read_makefiles;
        -: 8326:}
        -: 8327:
        -: 8328:/* Read file FILENAME as a makefile and add its contents to the data base.
        -: 8329:
        -: 8330:   FLAGS contains bits as above.
        -: 8331:
        -: 8332:   FILENAME is added to the `read_makefiles' chain.
        -: 8333:
        -: 8334:   Returns 1 if a file was found and read, 0 if not.  */
        -: 8335:
        -: 8336:static int
function read_makefile called 795 returned 100% blocks executed 54%
      795: 8337:read_makefile (filename, flags)
        -: 8338:     char *filename;
        -: 8339:     int flags;
        -: 8340:{
        -: 8341:  static char *collapsed = 0;
        -: 8342:  static unsigned int collapsed_length = 0;
        -: 8343:  register FILE *infile;
        -: 8344:  struct linebuffer lb;
      795: 8345:  unsigned int commands_len = 200;
      795: 8346:  char *commands = (char *) xmalloc (200);
call    0 returned 795
      795: 8347:  unsigned int commands_idx = 0;
        -: 8348:  unsigned int commands_started;
        -: 8349:  register char *p;
        -: 8350:  char *p2;
        -: 8351:  int len;
      795: 8352:  int ignoring = 0, in_ignored_define = 0;
      795: 8353:  int no_targets = 0;		/* Set when reading a rule without targets.  */
      795: 8354:  char *passed_filename = filename;
        -: 8355:
      795: 8356:  struct nameseq *filenames = 0;
        -: 8357:  struct dep *deps;
      795: 8358:  unsigned int lineno = 1;
      795: 8359:  unsigned int nlines = 0;
        -: 8360:  int two_colon;
      795: 8361:  char *pattern = 0, *pattern_percent;
        -: 8362:
        -: 8363:  int makefile_errno;
        -: 8364:#if defined (WINDOWS32) || defined (__MSDOS__)
        -: 8365:  int check_again;
        -: 8366:#endif
        -: 8367:
        -: 8368:#define record_waiting_files()						      \
        -: 8369:  do									      \
        -: 8370:    { 									      \
        -: 8371:      if (filenames != 0)						      \
        -: 8372:	record_files (filenames, pattern, pattern_percent, deps,	      \
        -: 8373:		      commands_started, commands, commands_idx,		      \
        -: 8374:		      two_colon, filename, lineno,			      \
        -: 8375:		      !(flags & RM_NO_DEFAULT_GOAL));		     	      \
        -: 8376:      filenames = 0;							      \
        -: 8377:      commands_idx = 0;							      \
        -: 8378:      pattern = 0;							      \
        -: 8379:    } while (0)
        -: 8380:
        -: 8381:#ifndef F_JR_1  /* seed fault number #1; J.Ruthruff */
        -: 8382:    #ifdef  lint    /* Suppress `used before set' messages.  */
        -: 8383:      two_colon = 0;
        -: 8384:    #endif
      795: 8385:      pattern_percent = 0;
      795: 8386:      commands_started = lineno;
        -: 8387:#else
        -: 8388:    #ifdef  lint    /* Suppress `used before set' messages.  */
        -: 8389:      two_colon = 0;
        -: 8390:      pattern_percent = 0;
        -: 8391:    #endif
        -: 8392:#endif
        -: 8393:
      795: 8394:  if (debug_flag)
branch  0 taken 384 (fallthrough)
branch  1 taken 411
        -: 8395:    {
      384: 8396:      printf ("Reading makefile `%s'", filename);
call    0 returned 384
      384: 8397:      if (flags & RM_NO_DEFAULT_GOAL)
branch  0 taken 0 (fallthrough)
branch  1 taken 384
    #####: 8398:	printf (" (no default goal)");
call    0 never executed
      384: 8399:      if (flags & RM_INCLUDED)
branch  0 taken 0 (fallthrough)
branch  1 taken 384
    #####: 8400:	printf (" (search path)");
call    0 never executed
      384: 8401:      if (flags & RM_DONTCARE)
branch  0 taken 0 (fallthrough)
branch  1 taken 384
    #####: 8402:	printf (" (don't care)");
call    0 never executed
      384: 8403:      if (flags & RM_NO_TILDE)
branch  0 taken 0 (fallthrough)
branch  1 taken 384
    #####: 8404:	printf (" (no ~ expansion)");
call    0 never executed
      384: 8405:      puts ("...");
call    0 returned 384
        -: 8406:    }
        -: 8407:
        -: 8408:  /* First, get a stream to read.  */
        -: 8409:
        -: 8410:  /* Expand ~ in FILENAME unless it came from `include',
        -: 8411:     in which case it was already done.  */
      795: 8412:  if (!(flags & RM_NO_TILDE) && filename[0] == '~')
branch  0 taken 790 (fallthrough)
branch  1 taken 5
branch  2 taken 0 (fallthrough)
branch  3 taken 790
        -: 8413:    {
    #####: 8414:      char *expanded = tilde_expand (filename);
call    0 never executed
    #####: 8415:      if (expanded != 0)
branch  0 never executed
branch  1 never executed
    #####: 8416:	filename = expanded;
        -: 8417:    }
        -: 8418:
      795: 8419:  infile = fopen (filename, "r");
call    0 returned 795
        -: 8420:  /* Save the error code so we print the right message later.  */
      795: 8421:  makefile_errno = errno;
        -: 8422:
        -: 8423:  /* If the makefile wasn't found and it's either a makefile from
        -: 8424:     the `MAKEFILES' variable or an included makefile,
        -: 8425:     search the included makefile search path for this makefile.  */
      795: 8426:  if (infile == 0 && (flags & RM_INCLUDED) && *filename != '/')
branch  0 taken 776 (fallthrough)
branch  1 taken 19
branch  2 taken 5 (fallthrough)
branch  3 taken 771
branch  4 taken 5 (fallthrough)
branch  5 taken 0
        -: 8427:    {
        -: 8428:      register unsigned int i;
       11: 8429:      for (i = 0; include_directories_to_search[i] != 0; ++i)
branch  0 taken 9
branch  1 taken 2 (fallthrough)
        -: 8430:	{
        9: 8431:	  char *name = concat (include_directories_to_search[i], "/", filename);
call    0 returned 9
        9: 8432:	  infile = fopen (name, "r");
call    0 returned 9
        9: 8433:	  if (infile == 0)
branch  0 taken 6 (fallthrough)
branch  1 taken 3
        6: 8434:	    free (name);
        -: 8435:	  else
        -: 8436:	    {
        3: 8437:	      filename = name;
        3: 8438:	      break;
        -: 8439:	    }
        -: 8440:	}
        -: 8441:    }
        -: 8442:
        -: 8443:  /* Add FILENAME to the chain of read makefiles.  */
      795: 8444:  deps = (struct dep *) xmalloc (sizeof (struct dep));
call    0 returned 795
      795: 8445:  deps->next = read_makefiles;
      795: 8446:  read_makefiles = deps;
      795: 8447:  deps->name = 0;
      795: 8448:  deps->file = lookup_file (filename);
call    0 returned 795
      795: 8449:  if (deps->file == 0)
branch  0 taken 795 (fallthrough)
branch  1 taken 0
        -: 8450:    {
      795: 8451:      deps->file = enter_file (savestring (filename, strlen (filename)));
call    0 returned 795
call    1 returned 795
      795: 8452:      if (flags & RM_DONTCARE)
branch  0 taken 0 (fallthrough)
branch  1 taken 795
    #####: 8453:	deps->file->dontcare = 1;
        -: 8454:    }
      795: 8455:  if (filename != passed_filename)
branch  0 taken 3 (fallthrough)
branch  1 taken 792
        3: 8456:    free (filename);
      795: 8457:  filename = deps->file->name;
      795: 8458:  deps->changed = flags;
      795: 8459:  deps = 0;
        -: 8460:
        -: 8461:  /* If the makefile can't be found at all, give up entirely.  */
        -: 8462:
      795: 8463:  if (infile == 0)
branch  0 taken 773 (fallthrough)
branch  1 taken 22
        -: 8464:    {
        -: 8465:      /* If we did some searching, errno has the error from the last
        -: 8466:	 attempt, rather from FILENAME itself.  Restore it in case the
        -: 8467:	 caller wants to use it in a message.  */
      773: 8468:      errno = makefile_errno;
      773: 8469:      return 0;
        -: 8470:    }
        -: 8471:
       22: 8472:  reading_filename = filename;
       22: 8473:  reading_lineno_ptr = &lineno;
        -: 8474:
        -: 8475:  /* Loop over lines in the file.
        -: 8476:     The strategy is to accumulate target names in FILENAMES, dependencies
        -: 8477:     in DEPS and commands in COMMANDS.  These are used to define a rule
        -: 8478:     when the start of the next rule (or eof) is encountered.  */
        -: 8479:
       22: 8480:  initbuffer (&lb);
call    0 returned 22
        -: 8481:
     2595: 8482:  while (!feof (infile))
call    0 returned 2595
branch  1 taken 2573
branch  2 taken 22 (fallthrough)
        -: 8483:    {
     2573: 8484:      lineno += nlines;
     2573: 8485:      nlines = readline (&lb, infile, filename, lineno);
call    0 returned 2573
        -: 8486:
        -: 8487:      /* Check for a shell command line first.
        -: 8488:	 If it is not one, we can stop treating tab specially.  */
     2573: 8489:      if (lb.buffer[0] == '\t')
branch  0 taken 483 (fallthrough)
branch  1 taken 2090
        -: 8490:	{
        -: 8491:	  /* This line is a probably shell command.  */
        -: 8492:	  unsigned int len;
        -: 8493:
     483*: 8494:	  if (no_targets)
branch  0 taken 0 (fallthrough)
branch  1 taken 483
        -: 8495:	    /* Ignore the commands in a rule with no targets.  */
    #####: 8496:	    continue;
        -: 8497:
        -: 8498:	  /* If there is no preceding rule line, don't treat this line
        -: 8499:	     as a command, even though it begins with a tab character.
        -: 8500:	     SunOS 4 make appears to behave this way.  */
        -: 8501:
      483: 8502:	  if (filenames != 0)
branch  0 taken 483 (fallthrough)
branch  1 taken 0
        -: 8503:	    {
     483*: 8504:	      if (ignoring)
branch  0 taken 0 (fallthrough)
branch  1 taken 483
        -: 8505:		/* Yep, this is a shell command, and we don't care.  */
    #####: 8506:		continue;
        -: 8507:
        -: 8508:	      /* Append this command line to the line being accumulated.  */
      483: 8509:	      p = lb.buffer;
      483: 8510:	      if (commands_idx == 0)
branch  0 taken 294 (fallthrough)
branch  1 taken 189
      294: 8511:		commands_started = lineno;
      483: 8512:	      len = strlen (p);
      483: 8513:	      if (len + 1 + commands_idx > commands_len)
branch  0 taken 21 (fallthrough)
branch  1 taken 462
        -: 8514:		{
       21: 8515:		  commands_len = (len + 1 + commands_idx) * 2;
       21: 8516:		  commands = (char *) xrealloc (commands, commands_len);
call    0 returned 21
        -: 8517:		}
      483: 8518:	      bcopy (p, &commands[commands_idx], len);
      483: 8519:	      commands_idx += len;
      483: 8520:	      commands[commands_idx++] = '\n';
        -: 8521:
      483: 8522:	      continue;
        -: 8523:	    }
        -: 8524:	}
        -: 8525:
        -: 8526:      /* This line is not a shell command line.  Don't worry about tabs.  */
        -: 8527:
     2090: 8528:      if (collapsed_length < lb.size)
branch  0 taken 37 (fallthrough)
branch  1 taken 2053
        -: 8529:	{
       37: 8530:	  collapsed_length = lb.size;
       37: 8531:	  if (collapsed != 0)
branch  0 taken 18 (fallthrough)
branch  1 taken 19
       18: 8532:	    free (collapsed);
       37: 8533:	  collapsed = (char *) xmalloc (collapsed_length);
call    0 returned 37
        -: 8534:	}
     2090: 8535:      strcpy (collapsed, lb.buffer);
        -: 8536:      /* Collapse continuation lines.  */
     2090: 8537:      collapse_continuations (collapsed);
call    0 returned 2090
     2090: 8538:      remove_comments (collapsed);
call    0 returned 2090
        -: 8539:
        -: 8540:      /* strncmp is first to avoid dereferencing out into space.  */
        -: 8541:#define	word1eq(s, l) 	(len == l && !strncmp (s, p, l))
     2090: 8542:      p = collapsed;
     2090: 8543:      while (isspace (*p))
branch  0 taken 0
branch  1 taken 2090 (fallthrough)
    #####: 8544:	++p;
     2090: 8545:      if (*p == '\0')
branch  0 taken 1098 (fallthrough)
branch  1 taken 992
        -: 8546:	/* This line is completely empty.  */
     1098: 8547:	continue;
        -: 8548:
        -: 8549:      /* Find the end of the first token */
     7238: 8550:      for (p2 = p+1; *p2 != '\0' && !isspace(*p2); ++p2)
branch  0 taken 7154 (fallthrough)
branch  1 taken 84
branch  2 taken 6246
branch  3 taken 908 (fallthrough)
        -: 8551:        {}
      992: 8552:      len = p2 - p;
        -: 8553:
        -: 8554:      /* Find the start of the second token.  If it's a `:', jump past
        -: 8555:         preprocessor stuff since it can't be that--this allows targets named
        -: 8556:         `export', etc. */
     1900: 8557:      while (isspace (*p2))
branch  0 taken 908
branch  1 taken 992 (fallthrough)
      908: 8558:        ++p2;
      992: 8559:      if (*p2 == '\0')
branch  0 taken 84 (fallthrough)
branch  1 taken 908
       84: 8560:        p2 = NULL;
     908*: 8561:      else if (p2[0] == ':' && p2[1] == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 908
branch  2 never executed
branch  3 never executed
    #####: 8562:        goto check_var;
        -: 8563:
        -: 8564:      /* We must first check for conditional and `define' directives before
        -: 8565:	 ignoring anything, since they control what we will do with
        -: 8566:	 following lines.  */
        -: 8567:
      992: 8568:      if (!in_ignored_define
branch  0 taken 992 (fallthrough)
branch  1 taken 0
      992: 8569:	  && (word1eq ("ifdef", 5) || word1eq ("ifndef", 6)
branch  0 taken 126 (fallthrough)
branch  1 taken 866
branch  2 taken 126 (fallthrough)
branch  3 taken 0
branch  4 taken 147 (fallthrough)
branch  5 taken 845
branch  6 taken 147 (fallthrough)
branch  7 taken 0
      992: 8570:	      || word1eq ("ifeq", 4) || word1eq ("ifneq", 5)
branch  0 taken 147 (fallthrough)
branch  1 taken 845
branch  2 taken 147 (fallthrough)
branch  3 taken 0
branch  4 taken 126 (fallthrough)
branch  5 taken 866
branch  6 taken 126 (fallthrough)
branch  7 taken 0
      992: 8571:	      || word1eq ("else", 4) || word1eq ("endif", 5)))
branch  0 taken 147 (fallthrough)
branch  1 taken 845
branch  2 taken 147 (fallthrough)
branch  3 taken 0
branch  4 taken 126 (fallthrough)
branch  5 taken 866
branch  6 taken 0 (fallthrough)
branch  7 taken 126
    #####: 8572:	{
    #####: 8573:	  int i = conditional_line (p, filename, lineno);
call    0 never executed
    #####: 8574:	  if (i >= 0)
branch  0 never executed
branch  1 never executed
    #####: 8575:	    ignoring = i;
        -: 8576:	  else
    #####: 8577:	    makefile_fatal (filename, lineno,
call    0 never executed
        -: 8578:			    "invalid syntax in conditional");
    #####: 8579:	  continue;
        -: 8580:	}
     992*: 8581:      else if (word1eq ("endef", 5))
branch  0 taken 126 (fallthrough)
branch  1 taken 866
branch  2 taken 0 (fallthrough)
branch  3 taken 126
        -: 8582:	{
    #####: 8583:	  if (in_ignored_define)
branch  0 never executed
branch  1 never executed
    #####: 8584:	    in_ignored_define = 0;
        -: 8585:	  else
    #####: 8586:	    makefile_fatal (filename, lineno, "extraneous `endef'");
call    0 never executed
    #####: 8587:	  continue;
        -: 8588:	}
     992*: 8589:      else if (word1eq ("define", 6))
branch  0 taken 147 (fallthrough)
branch  1 taken 845
branch  2 taken 0 (fallthrough)
branch  3 taken 147
        -: 8590:	{
    #####: 8591:	  if (ignoring)
branch  0 never executed
branch  1 never executed
    #####: 8592:	    in_ignored_define = 1;
        -: 8593:	  else
        -: 8594:	    {
    #####: 8595:	      p2 = next_token (p + 6);
call    0 never executed
        -: 8596:	      /* Let the variable name be the whole rest of the line,
        -: 8597:		 with trailing blanks stripped (comments have already been
        -: 8598:		 removed), so it could be a complex variable/function
        -: 8599:		 reference that might contain blanks.  */
    #####: 8600:	      p = index (p2, '\0');
    #####: 8601:	      while (isblank (p[-1]))
branch  0 never executed
branch  1 never executed
    #####: 8602:		--p;
    #####: 8603:	      lineno = do_define (p2, p - p2, o_file,
call    0 never executed
        -: 8604:				  lineno, infile, filename);
        -: 8605:	    }
    #####: 8606:	  continue;
        -: 8607:	}
     992*: 8608:      else if (word1eq ("override", 8))
branch  0 taken 63 (fallthrough)
branch  1 taken 929
branch  2 taken 0 (fallthrough)
branch  3 taken 63
        -: 8609:	{
    #####: 8610:	  p2 = next_token (p + 8);
call    0 never executed
    #####: 8611:	  if (p2 == 0)
branch  0 never executed
branch  1 never executed
    #####: 8612:	    makefile_error (filename, lineno, "empty `override' directive");
call    0 never executed
    #####: 8613:	  if (!strncmp (p2, "define", 6) && (isblank (p2[6]) || p2[6] == '\0'))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 8614:	    {
    #####: 8615:	      if (ignoring)
branch  0 never executed
branch  1 never executed
    #####: 8616:		in_ignored_define = 1;
        -: 8617:	      else
        -: 8618:		{
    #####: 8619:		  p2 = next_token (p2 + 6);
call    0 never executed
        -: 8620:		  /* Let the variable name be the whole rest of the line,
        -: 8621:		     with trailing blanks stripped (comments have already been
        -: 8622:		     removed), so it could be a complex variable/function
        -: 8623:		     reference that might contain blanks.  */
    #####: 8624:		  p = index (p2, '\0');
    #####: 8625:		  while (isblank (p[-1]))
branch  0 never executed
branch  1 never executed
    #####: 8626:		    --p;
    #####: 8627:		  lineno = do_define (p2, p - p2, o_override,
call    0 never executed
        -: 8628:				      lineno, infile, filename);
        -: 8629:		}
        -: 8630:	    }
    #####: 8631:	  else if (!ignoring
branch  0 never executed
branch  1 never executed
    #####: 8632:		   && !try_variable_definition (filename, lineno,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8633:						p2, o_override))
    #####: 8634:	    makefile_error (filename, lineno, "empty `override' directive");
call    0 never executed
        -: 8635:
    #####: 8636:	  continue;
        -: 8637:	}
        -: 8638:
     992*: 8639:      if (ignoring)
branch  0 taken 0 (fallthrough)
branch  1 taken 992
        -: 8640:	/* Ignore the line.  We continue here so conditionals
        -: 8641:	   can appear in the middle of a rule.  */
    #####: 8642:	continue;
      992: 8643:      else if (word1eq ("export", 6))
branch  0 taken 147 (fallthrough)
branch  1 taken 845
branch  2 taken 0 (fallthrough)
branch  3 taken 147
    #####: 8644:	{
        -: 8645:	  struct variable *v;
    #####: 8646:	  p2 = next_token (p + 6);
call    0 never executed
    #####: 8647:	  if (*p2 == '\0')
branch  0 never executed
branch  1 never executed
    #####: 8648:	    export_all_variables = 1;
    #####: 8649:	  v = try_variable_definition (filename, lineno, p2, o_file);
call    0 never executed
    #####: 8650:	  if (v != 0)
branch  0 never executed
branch  1 never executed
    #####: 8651:	    v->export = v_export;
        -: 8652:	  else
        -: 8653:	    {
        -: 8654:	      unsigned int len;
    #####: 8655:	      for (p = find_next_token (&p2, &len); p != 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8656:		   p = find_next_token (&p2, &len))
        -: 8657:		{
    #####: 8658:		  v = lookup_variable (p, len);
call    0 never executed
    #####: 8659:		  if (v == 0)
branch  0 never executed
branch  1 never executed
    #####: 8660:		    v = define_variable (p, len, "", o_file, 0);
call    0 never executed
    #####: 8661:		  v->export = v_export;
call    0 never executed
        -: 8662:		}
        -: 8663:	    }
        -: 8664:	}
      992: 8665:      else if (word1eq ("unexport", 8))
branch  0 taken 63 (fallthrough)
branch  1 taken 929
branch  2 taken 0 (fallthrough)
branch  3 taken 63
    #####: 8666:	{
        -: 8667:	  unsigned int len;
        -: 8668:	  struct variable *v;
    #####: 8669:	  p2 = next_token (p + 8);
call    0 never executed
    #####: 8670:	  if (*p2 == '\0')
branch  0 never executed
branch  1 never executed
    #####: 8671:	    export_all_variables = 0;
    #####: 8672:	  for (p = find_next_token (&p2, &len); p != 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8673:	       p = find_next_token (&p2, &len))
        -: 8674:	    {
    #####: 8675:	      v = lookup_variable (p, len);
call    0 never executed
    #####: 8676:	      if (v == 0)
branch  0 never executed
branch  1 never executed
    #####: 8677:		v = define_variable (p, len, "", o_file, 0);
call    0 never executed
    #####: 8678:	      v->export = v_noexport;
call    0 never executed
        -: 8679:	    }
        -: 8680:	}
      992: 8681:      else if (word1eq ("vpath", 5))
branch  0 taken 126 (fallthrough)
branch  1 taken 866
branch  2 taken 126 (fallthrough)
branch  3 taken 0
    #####: 8682:	{
        -: 8683:	  char *pattern;
        -: 8684:	  unsigned int len;
    #####: 8685:	  p2 = variable_expand (p + 5);
call    0 never executed
    #####: 8686:	  p = find_next_token (&p2, &len);
call    0 never executed
    #####: 8687:	  if (p != 0)
branch  0 never executed
branch  1 never executed
        -: 8688:	    {
    #####: 8689:	      pattern = savestring (p, len);
call    0 never executed
    #####: 8690:	      p = find_next_token (&p2, &len);
call    0 never executed
        -: 8691:	      /* No searchpath means remove all previous
        -: 8692:		 selective VPATH's with the same pattern.  */
        -: 8693:	    }
        -: 8694:	  else
        -: 8695:	    /* No pattern means remove all previous selective VPATH's.  */
    #####: 8696:	    pattern = 0;
    #####: 8697:	  construct_vpath_list (pattern, p);
call    0 never executed
    #####: 8698:	  if (pattern != 0)
branch  0 never executed
branch  1 never executed
    #####: 8699:	    free (pattern);
        -: 8700:	}
        -: 8701:      else
      992: 8702:    check_var:
      992: 8703:        if (word1eq ("include", 7) || word1eq ("-include", 8)
branch  0 taken 194 (fallthrough)
branch  1 taken 798
branch  2 taken 189 (fallthrough)
branch  3 taken 5
branch  4 taken 63 (fallthrough)
branch  5 taken 924
branch  6 taken 63 (fallthrough)
branch  7 taken 0
      987: 8704:	       || word1eq ("sinclude", 8))
branch  0 taken 63 (fallthrough)
branch  1 taken 924
branch  2 taken 0 (fallthrough)
branch  3 taken 63
        5: 8705:	{
        -: 8706:	  /* We have found an `include' line specifying a nested
        -: 8707:	     makefile to be read at this point.  */
        -: 8708:	  struct conditionals *save, new_conditionals;
        -: 8709:	  struct nameseq *files;
        -: 8710:	  /* "-include" (vs "include") says no error if the file does not
        -: 8711:	     exist.  "sinclude" is an alias for this from SGI.  */
        5: 8712:	  int noerror = p[0] != 'i';
        -: 8713:
       5*: 8714:	  p = allocated_variable_expand (next_token (p + (noerror ? 9 : 8)));
branch  0 taken 0 (fallthrough)
branch  1 taken 5
call    2 returned 5
call    3 returned 5
       5*: 8715:	  if (*p == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -: 8716:	    {
    #####: 8717:	      makefile_error (filename, lineno,
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 8718:			      "no file name for `%sinclude'",
        -: 8719:			      noerror ? "-" : "");
    #####: 8720:	      continue;
        -: 8721:	    }
        -: 8722:
        -: 8723:	  /* Parse the list of file names.  */
        5: 8724:	  p2 = p;
        5: 8725:	  files = multi_glob (parse_file_seq (&p2, '\0',
call    0 returned 5
call    1 returned 5
        -: 8726:					      sizeof (struct nameseq),
        -: 8727:					      1),
        -: 8728:			      sizeof (struct nameseq));
        5: 8729:	  free (p);
        -: 8730:
        -: 8731:	  /* Save the state of conditionals and start
        -: 8732:	     the included makefile with a clean slate.  */
        5: 8733:	  save = conditionals;
        5: 8734:	  bzero ((char *) &new_conditionals, sizeof new_conditionals);
        5: 8735:	  conditionals = &new_conditionals;
        -: 8736:
        -: 8737:	  /* Record the rules that are waiting so they will determine
        -: 8738:	     the default goal before those in the included makefile.  */
       5*: 8739:	  record_waiting_files ();
branch  0 taken 0 (fallthrough)
branch  1 taken 5
call    2 never executed
        -: 8740:
        -: 8741:	  /* Read each included makefile.  */
       10: 8742:	  while (files != 0)
branch  0 taken 5
branch  1 taken 5 (fallthrough)
        -: 8743:	    {
        5: 8744:	      struct nameseq *next = files->next;
        5: 8745:	      char *name = files->name;
        5: 8746:	      free ((char *)files);
        5: 8747:	      files = next;
        -: 8748:
       5*: 8749:	      if (! read_makefile (name, (RM_INCLUDED | RM_NO_TILDE
branch  0 taken 0 (fallthrough)
branch  1 taken 5
call    2 returned 5
branch  3 taken 2 (fallthrough)
branch  4 taken 3
        -: 8750:					  | (noerror ? RM_DONTCARE : 0)))
        2: 8751:		  && ! noerror)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 8752:		makefile_error (filename, lineno,
call    0 returned 2
        2: 8753:				"%s: %s", name, strerror (errno));
call    0 returned 2
        -: 8754:	    }
        -: 8755:
        -: 8756:	  /* Free any space allocated by conditional_line.  */
        5: 8757:	  if (conditionals->ignoring)
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####: 8758:	    free (conditionals->ignoring);
        5: 8759:	  if (conditionals->seen_else)
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####: 8760:	    free (conditionals->seen_else);
        -: 8761:
        -: 8762:	  /* Restore state.  */
        5: 8763:	  conditionals = save;
        5: 8764:	  reading_filename = filename;
        5: 8765:	  reading_lineno_ptr = &lineno;
        -: 8766:	}
        -: 8767:#undef	word1eq
      987: 8768:      else if (try_variable_definition (filename, lineno, p, o_file))
call    0 returned 987
branch  1 taken 525 (fallthrough)
branch  2 taken 462
        -: 8769:	/* This line has been dealt with.  */
        -: 8770:	;
      525: 8771:      else if (lb.buffer[0] == '\t')
branch  0 taken 0 (fallthrough)
branch  1 taken 525
        -: 8772:	{
    #####: 8773:	  p = collapsed;	/* Ignore comments.  */
    #####: 8774:	  while (isblank (*p))
branch  0 never executed
branch  1 never executed
    #####: 8775:	    ++p;
    #####: 8776:	  if (*p == '\0')
branch  0 never executed
branch  1 never executed
        -: 8777:	    /* The line is completely blank; that is harmless.  */
    #####: 8778:	    continue;
        -: 8779:	  /* This line starts with a tab but was not caught above
        -: 8780:	     because there was no preceding target, and the line
        -: 8781:	     might have been usable as a variable definition.
        -: 8782:	     But now it is definitely lossage.  */
    #####: 8783:	  makefile_fatal (filename, lineno,
call    0 never executed
        -: 8784:			  "commands commence before first target");
        -: 8785:	}
        -: 8786:      else
      525: 8787:	{
        -: 8788:	  /* This line describes some target files.  */
        -: 8789:
        -: 8790:	  char *cmdleft;
        -: 8791:
        -: 8792:	  /* Record the previous rule.  */
        -: 8793:
      525: 8794:	  record_waiting_files ();
branch  0 taken 504 (fallthrough)
branch  1 taken 21
call    2 returned 504
        -: 8795:
        -: 8796:	  /* Search the line for an unquoted ; that is not after an
        -: 8797:             unquoted #.  */
      525: 8798:	  cmdleft = find_char_unquote (lb.buffer, ";#", 0);
call    0 returned 525
     525*: 8799:	  if (cmdleft != 0 && *cmdleft == '#')
branch  0 taken 0 (fallthrough)
branch  1 taken 525
branch  2 never executed
branch  3 never executed
        -: 8800:	    {
        -: 8801:	      /* We found a comment before a semicolon.  */
    #####: 8802:	      *cmdleft = '\0';
    #####: 8803:	      cmdleft = 0;
        -: 8804:	    }
      525: 8805:	  else if (cmdleft != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 525
        -: 8806:	    /* Found one.  Cut the line short there before expanding it.  */
    #####: 8807:	    *cmdleft = '\0';
        -: 8808:
      525: 8809:	  collapse_continuations (lb.buffer);
call    0 returned 525
        -: 8810:
        -: 8811:	  /* Expand variable and function references before doing anything
        -: 8812:	     else so that special characters can be inside variables.  */
      525: 8813:	  p = variable_expand (lb.buffer);
call    0 returned 525
        -: 8814:
      525: 8815:	  if (cmdleft == 0)
branch  0 taken 525 (fallthrough)
branch  1 taken 0
        -: 8816:	    /* Look for a semicolon in the expanded line.  */
      525: 8817:	    cmdleft = find_char_unquote (p, ";", 0);
call    0 returned 525
        -: 8818:
      525: 8819:	  if (cmdleft != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 525
        -: 8820:	    /* Cut the line short at the semicolon.  */
    #####: 8821:	    *cmdleft = '\0';
        -: 8822:
      525: 8823:	  p2 = next_token (p);
call    0 returned 525
      525: 8824:	  if (*p2 == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 525
        -: 8825:	    {
    #####: 8826:	      if (cmdleft != 0)
branch  0 never executed
branch  1 never executed
    #####: 8827:		makefile_fatal (filename, lineno,
call    0 never executed
        -: 8828:				"missing rule before commands");
        -: 8829:	      else
        -: 8830:		/* This line contained a variable reference that
        -: 8831:		   expanded to nothing but whitespace.  */
    #####: 8832:		continue;
        -: 8833:	    }
     525*: 8834:	  else if (*p2 == ':')
branch  0 taken 0 (fallthrough)
branch  1 taken 525
        -: 8835:	    {
        -: 8836:	      /* We accept and ignore rules without targets for
        -: 8837:		 compatibility with SunOS 4 make.  */
    #####: 8838:	      no_targets = 1;
    #####: 8839:	      continue;
        -: 8840:	    }
        -: 8841:
      525: 8842:	  filenames = multi_glob (parse_file_seq (&p2, ':',
call    0 returned 525
call    1 returned 525
        -: 8843:						  sizeof (struct nameseq),
        -: 8844:						  1),
        -: 8845:				  sizeof (struct nameseq));
      525: 8846:	  if (*p2++ == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 525
    #####: 8847:	    makefile_fatal (filename, lineno, "missing separator");
call    0 never executed
        -: 8848:	  /* Is this a one-colon or two-colon entry?  */
      525: 8849:	  two_colon = *p2 == ':';
      525: 8850:	  if (two_colon)
branch  0 taken 0 (fallthrough)
branch  1 taken 525
    #####: 8851:	    p2++;
        -: 8852:
        -: 8853:	  /* We have some targets, so don't ignore the following commands.  */
      525: 8854:	  no_targets = 0;
        -: 8855:
        -: 8856:	  /* Is this a static pattern rule: `target: %targ: %dep; ...'?  */
      525: 8857:	  p = index (p2, ':');
     525*: 8858:	  while (p != 0 && p[-1] == '\\')
branch  0 taken 0 (fallthrough)
branch  1 taken 525
branch  2 never executed
branch  3 never executed
        -: 8859:	    {
    #####: 8860:	      register char *q = &p[-1];
    #####: 8861:	      register int backslash = 0;
    #####: 8862:	      while (*q-- == '\\')
branch  0 never executed
branch  1 never executed
    #####: 8863:		backslash = !backslash;
    #####: 8864:	      if (backslash)
branch  0 never executed
branch  1 never executed
    #####: 8865:		p = index (p + 1, ':');
        -: 8866:	      else
    #####: 8867:		break;
        -: 8868:	    }
        -: 8869:#ifdef _AMIGA
        -: 8870:	  /* Here, the situation is quite complicated. Let's have a look
        -: 8871:	    at a couple of targets:
        -: 8872:
        -: 8873:		install: dev:make
        -: 8874:
        -: 8875:		dev:make: make
        -: 8876:
        -: 8877:		dev:make:: xyz
        -: 8878:
        -: 8879:	    The rule is that it's only a target, if there are TWO :'s
        -: 8880:	    OR a space around the :.
        -: 8881:	  */
        -: 8882:	  if (p && !(isspace(p[1]) || !p[1] || isspace(p[-1])))
        -: 8883:	    p = 0;
        -: 8884:#endif
        -: 8885:#if defined (WINDOWS32) || defined (__MSDOS__)
        -: 8886:          do {
        -: 8887:            check_again = 0;
        -: 8888:            /* For MSDOS and WINDOWS32, skip a "C:\..." or a "C:/..." */
        -: 8889:            if (p != 0 && (p[1] == '\\' || p[1] == '/') && isalpha (p[-1])) {
        -: 8890:              p = index(p + 1, ':');
        -: 8891:              check_again = 1;
        -: 8892:            }
        -: 8893:          } while (check_again);
        -: 8894:#endif
      525: 8895:	  if (p != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 525
        -: 8896:	    {
        -: 8897:	      struct nameseq *target;
    #####: 8898:	      target = parse_file_seq (&p2, ':', sizeof (struct nameseq), 1);
call    0 never executed
    #####: 8899:	      ++p2;
    #####: 8900:	      if (target == 0)
branch  0 never executed
branch  1 never executed
    #####: 8901:		makefile_fatal (filename, lineno, "missing target pattern");
call    0 never executed
    #####: 8902:	      else if (target->next != 0)
branch  0 never executed
branch  1 never executed
    #####: 8903:		makefile_fatal (filename, lineno, "multiple target patterns");
call    0 never executed
    #####: 8904:	      pattern = target->name;
    #####: 8905:	      pattern_percent = find_percent (pattern);
call    0 never executed
    #####: 8906:	      if (pattern_percent == 0)
branch  0 never executed
branch  1 never executed
    #####: 8907:		makefile_fatal (filename, lineno,
call    0 never executed
        -: 8908:				"target pattern contains no `%%'");
        -: 8909:	    }
        -: 8910:	  else
      525: 8911:	    pattern = 0;
        -: 8912:
        -: 8913:	  /* Parse the dependencies.  */
        -: 8914:	  deps = (struct dep *)
      525: 8915:	    multi_glob (parse_file_seq (&p2, '\0', sizeof (struct dep), 1),
call    0 returned 525
call    1 returned 525
        -: 8916:			sizeof (struct dep));
        -: 8917:
      525: 8918:	  commands_idx = 0;
      525: 8919:	  if (cmdleft != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 525
        -: 8920:	    {
        -: 8921:	      /* Semicolon means rest of line is a command.  */
    #####: 8922:	      unsigned int len = strlen (cmdleft + 1);
        -: 8923:
    #####: 8924:	      commands_started = lineno;
        -: 8925:
        -: 8926:	      /* Add this command line to the buffer.  */
    #####: 8927:	      if (len + 2 > commands_len)
branch  0 never executed
branch  1 never executed
        -: 8928:		{
    #####: 8929:		  commands_len = (len + 2) * 2;
    #####: 8930:		  commands = (char *) xrealloc (commands, commands_len);
call    0 never executed
        -: 8931:		}
    #####: 8932:	      bcopy (cmdleft + 1, commands, len);
    #####: 8933:	      commands_idx += len;
    #####: 8934:	      commands[commands_idx++] = '\n';
        -: 8935:	    }
        -: 8936:
      525: 8937:	  continue;
        -: 8938:	}
        -: 8939:
        -: 8940:      /* We get here except in the case that we just read a rule line.
        -: 8941:	 Record now the last rule we read, so following spurious
        -: 8942:	 commands are properly diagnosed.  */
     467*: 8943:      record_waiting_files ();
branch  0 taken 0 (fallthrough)
branch  1 taken 467
call    2 never executed
      467: 8944:      no_targets = 0;
        -: 8945:    }
        -: 8946:
       22: 8947:  if (conditionals->if_cmds)
branch  0 taken 0 (fallthrough)
branch  1 taken 22
    #####: 8948:    makefile_fatal (filename, lineno, "missing `endif'");
call    0 never executed
        -: 8949:
        -: 8950:  /* At eof, record the last rule.  */
       22: 8951:  record_waiting_files ();
branch  0 taken 21 (fallthrough)
branch  1 taken 1
call    2 returned 21
        -: 8952:
       22: 8953:  freebuffer (&lb);
       22: 8954:  free ((char *) commands);
       22: 8955:  fclose (infile);
call    0 returned 22
        -: 8956:
       22: 8957:  reading_filename = 0;
       22: 8958:  reading_lineno_ptr = 0;
        -: 8959:
       22: 8960:  return 1;
        -: 8961:}
        -: 8962:
        -: 8963:/* Execute a `define' directive.
        -: 8964:   The first line has already been read, and NAME is the name of
        -: 8965:   the variable to be defined.  The following lines remain to be read.
        -: 8966:   LINENO, INFILE and FILENAME refer to the makefile being read.
        -: 8967:   The value returned is LINENO, updated for lines read here.  */
        -: 8968:
        -: 8969:static unsigned int
function do_define called 0 returned 0% blocks executed 0%
    #####: 8970:do_define (name, namelen, origin, lineno, infile, filename)
        -: 8971:     char *name;
        -: 8972:     unsigned int namelen;
        -: 8973:     enum variable_origin origin;
        -: 8974:     unsigned int lineno;
        -: 8975:     FILE *infile;
        -: 8976:     char *filename;
        -: 8977:{
        -: 8978:  struct linebuffer lb;
    #####: 8979:  unsigned int nlines = 0;
    #####: 8980:  unsigned int length = 100;
    #####: 8981:  char *definition = (char *) xmalloc (100);
call    0 never executed
    #####: 8982:  register unsigned int idx = 0;
        -: 8983:  register char *p;
        -: 8984:
        -: 8985:  /* Expand the variable name.  */
    #####: 8986:  char *var = (char *) alloca (namelen + 1);
    #####: 8987:  bcopy (name, var, namelen);
    #####: 8988:  var[namelen] = '\0';
    #####: 8989:  var = variable_expand (var);
call    0 never executed
        -: 8990:
    #####: 8991:  initbuffer (&lb);
call    0 never executed
    #####: 8992:  while (!feof (infile))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8993:    {
        -: 8994:      unsigned int len;
        -: 8995:
    #####: 8996:      lineno += nlines;
    #####: 8997:      nlines = readline (&lb, infile, filename, lineno);
call    0 never executed
        -: 8998:
    #####: 8999:      collapse_continuations (lb.buffer);
call    0 never executed
        -: 9000:
    #####: 9001:      p = next_token (lb.buffer);
call    0 never executed
    #####: 9002:      len = strlen (p);
    #####: 9003:      if ((len == 5 || (len > 5 && isblank (p[5])))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9004:          && !strncmp (p, "endef", 5))
branch  0 never executed
branch  1 never executed
        -: 9005:	{
    #####: 9006:	  p += 5;
    #####: 9007:	  remove_comments (p);
call    0 never executed
    #####: 9008:	  if (*next_token (p) != '\0')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9009:	    makefile_error (filename, lineno,
call    0 never executed
        -: 9010:			    "Extraneous text after `endef' directive");
        -: 9011:	  /* Define the variable.  */
    #####: 9012:	  if (idx == 0)
branch  0 never executed
branch  1 never executed
    #####: 9013:	    definition[0] = '\0';
        -: 9014:	  else
    #####: 9015:	    definition[idx - 1] = '\0';
    #####: 9016:	  (void) define_variable (var, strlen (var), definition, origin, 1);
call    0 never executed
    #####: 9017:	  free (definition);
    #####: 9018:	  freebuffer (&lb);
    #####: 9019:	  return (lineno + nlines);
        -: 9020:	}
        -: 9021:      else
        -: 9022:	{
    #####: 9023:          len = strlen (lb.buffer);
        -: 9024:	  /* Increase the buffer size if necessary.  */
    #####: 9025:	  if (idx + len + 1 > length)
branch  0 never executed
branch  1 never executed
        -: 9026:	    {
    #####: 9027:	      length = (idx + len) * 2;
    #####: 9028:	      definition = (char *) xrealloc (definition, length + 1);
call    0 never executed
        -: 9029:	    }
        -: 9030:
    #####: 9031:	  bcopy (lb.buffer, &definition[idx], len);
    #####: 9032:	  idx += len;
        -: 9033:	  /* Separate lines with a newline.  */
    #####: 9034:	  definition[idx++] = '\n';
        -: 9035:	}
        -: 9036:    }
        -: 9037:
        -: 9038:  /* No `endef'!!  */
    #####: 9039:  makefile_fatal (filename, lineno, "missing `endef', unterminated `define'");
call    0 never executed
        -: 9040:
        -: 9041:  /* NOTREACHED */
    #####: 9042:  return 0;
        -: 9043:}
        -: 9044:
        -: 9045:/* Interpret conditional commands "ifdef", "ifndef", "ifeq",
        -: 9046:   "ifneq", "else" and "endif".
        -: 9047:   LINE is the input line, with the command as its first word.
        -: 9048:
        -: 9049:   FILENAME and LINENO are the filename and line number in the
        -: 9050:   current makefile.  They are used for error messages.
        -: 9051:
        -: 9052:   Value is -1 if the line is invalid,
        -: 9053:   0 if following text should be interpreted,
        -: 9054:   1 if following text should be ignored.  */
        -: 9055:
        -: 9056:static int
function conditional_line called 0 returned 0% blocks executed 0%
    #####: 9057:conditional_line (line, filename, lineno)
        -: 9058:     char *line;
        -: 9059:     char *filename;
        -: 9060:     unsigned int lineno;
        -: 9061:{
        -: 9062:  int notdef;
        -: 9063:  char *cmdname;
        -: 9064:  register unsigned int i;
        -: 9065:
    #####: 9066:  if (*line == 'i')
branch  0 never executed
branch  1 never executed
        -: 9067:    {
        -: 9068:      /* It's an "if..." command.  */
    #####: 9069:      notdef = line[2] == 'n';
    #####: 9070:      if (notdef)
branch  0 never executed
branch  1 never executed
        -: 9071:	{
    #####: 9072:	  cmdname = line[3] == 'd' ? "ifndef" : "ifneq";
branch  0 never executed
branch  1 never executed
    #####: 9073:	  line += cmdname[3] == 'd' ? 7 : 6;
branch  0 never executed
branch  1 never executed
        -: 9074:	}
        -: 9075:      else
        -: 9076:	{
    #####: 9077:	  cmdname = line[2] == 'd' ? "ifdef" : "ifeq";
branch  0 never executed
branch  1 never executed
    #####: 9078:	  line += cmdname[2] == 'd' ? 6 : 5;
branch  0 never executed
branch  1 never executed
        -: 9079:	}
        -: 9080:    }
        -: 9081:  else
        -: 9082:    {
        -: 9083:      /* It's an "else" or "endif" command.  */
    #####: 9084:      notdef = line[1] == 'n';
    #####: 9085:      cmdname = notdef ? "endif" : "else";
branch  0 never executed
branch  1 never executed
    #####: 9086:      line += notdef ? 5 : 4;
branch  0 never executed
branch  1 never executed
        -: 9087:    }
        -: 9088:
    #####: 9089:  line = next_token (line);
call    0 never executed
        -: 9090:
    #####: 9091:  if (*cmdname == 'e')
branch  0 never executed
branch  1 never executed
        -: 9092:    {
    #####: 9093:      if (*line != '\0')
branch  0 never executed
branch  1 never executed
    #####: 9094:	makefile_error (filename, lineno,
call    0 never executed
        -: 9095:			"Extraneous text after `%s' directive",
        -: 9096:			cmdname);
        -: 9097:      /* "Else" or "endif".  */
    #####: 9098:      if (conditionals->if_cmds == 0)
branch  0 never executed
branch  1 never executed
    #####: 9099:	makefile_fatal (filename, lineno, "extraneous `%s'", cmdname);
call    0 never executed
        -: 9100:      /* NOTDEF indicates an `endif' command.  */
    #####: 9101:      if (notdef)
branch  0 never executed
branch  1 never executed
    #####: 9102:	--conditionals->if_cmds;
    #####: 9103:      else if (conditionals->seen_else[conditionals->if_cmds - 1])
branch  0 never executed
branch  1 never executed
    #####: 9104:	makefile_fatal (filename, lineno, "only one `else' per conditional");
call    0 never executed
        -: 9105:      else
        -: 9106:	{
        -: 9107:	  /* Toggle the state of ignorance.  */
    #####: 9108:	  conditionals->ignoring[conditionals->if_cmds - 1]
    #####: 9109:	    = !conditionals->ignoring[conditionals->if_cmds - 1];
        -: 9110:	  /* Record that we have seen an `else' in this conditional.
        -: 9111:	     A second `else' will be erroneous.  */
    #####: 9112:	  conditionals->seen_else[conditionals->if_cmds - 1] = 1;
        -: 9113:	}
    #####: 9114:      for (i = 0; i < conditionals->if_cmds; ++i)
branch  0 never executed
branch  1 never executed
    #####: 9115:	if (conditionals->ignoring[i])
branch  0 never executed
branch  1 never executed
    #####: 9116:	  return 1;
    #####: 9117:      return 0;
        -: 9118:    }
        -: 9119:
    #####: 9120:  if (conditionals->allocated == 0)
branch  0 never executed
branch  1 never executed
        -: 9121:    {
    #####: 9122:      conditionals->allocated = 5;
    #####: 9123:      conditionals->ignoring = (char *) xmalloc (conditionals->allocated);
call    0 never executed
    #####: 9124:      conditionals->seen_else = (char *) xmalloc (conditionals->allocated);
call    0 never executed
        -: 9125:    }
        -: 9126:
    #####: 9127:  ++conditionals->if_cmds;
    #####: 9128:  if (conditionals->if_cmds > conditionals->allocated)
branch  0 never executed
branch  1 never executed
        -: 9129:    {
    #####: 9130:      conditionals->allocated += 5;
    #####: 9131:      conditionals->ignoring = (char *)
    #####: 9132:	xrealloc (conditionals->ignoring, conditionals->allocated);
call    0 never executed
    #####: 9133:      conditionals->seen_else = (char *)
    #####: 9134:	xrealloc (conditionals->seen_else, conditionals->allocated);
call    0 never executed
        -: 9135:    }
        -: 9136:
        -: 9137:  /* Record that we have seen an `if...' but no `else' so far.  */
    #####: 9138:  conditionals->seen_else[conditionals->if_cmds - 1] = 0;
        -: 9139:
        -: 9140:  /* Search through the stack to see if we're already ignoring.  */
    #####: 9141:  for (i = 0; i < conditionals->if_cmds - 1; ++i)
branch  0 never executed
branch  1 never executed
    #####: 9142:    if (conditionals->ignoring[i])
branch  0 never executed
branch  1 never executed
        -: 9143:      {
        -: 9144:	/* We are already ignoring, so just push a level
        -: 9145:	   to match the next "else" or "endif", and keep ignoring.
        -: 9146:	   We don't want to expand variables in the condition.  */
    #####: 9147:	conditionals->ignoring[conditionals->if_cmds - 1] = 1;
    #####: 9148:	return 1;
        -: 9149:      }
        -: 9150:
    #####: 9151:  if (cmdname[notdef ? 3 : 2] == 'd')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9152:    {
        -: 9153:      /* "Ifdef" or "ifndef".  */
        -: 9154:      struct variable *v;
    #####: 9155:      register char *p = end_of_token (line);
call    0 never executed
    #####: 9156:      i = p - line;
    #####: 9157:      p = next_token (p);
call    0 never executed
    #####: 9158:      if (*p != '\0')
branch  0 never executed
branch  1 never executed
    #####: 9159:	return -1;
    #####: 9160:      v = lookup_variable (line, i);
call    0 never executed
    #####: 9161:      conditionals->ignoring[conditionals->if_cmds - 1]
    #####: 9162:	= (v != 0 && *v->value != '\0') == notdef;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9163:    }
        -: 9164:  else
        -: 9165:    {
        -: 9166:      /* "Ifeq" or "ifneq".  */
        -: 9167:      char *s1, *s2;
        -: 9168:      unsigned int len;
    #####: 9169:      char termin = *line == '(' ? ',' : *line;
branch  0 never executed
branch  1 never executed
        -: 9170:
    #####: 9171:      if (termin != ',' && termin != '"' && termin != '\'')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9172:	return -1;
        -: 9173:
    #####: 9174:      s1 = ++line;
        -: 9175:      /* Find the end of the first string.  */
    #####: 9176:      if (termin == ',')
branch  0 never executed
branch  1 never executed
        -: 9177:	{
    #####: 9178:	  register int count = 0;
    #####: 9179:	  for (; *line != '\0'; ++line)
branch  0 never executed
branch  1 never executed
    #####: 9180:	    if (*line == '(')
branch  0 never executed
branch  1 never executed
    #####: 9181:	      ++count;
    #####: 9182:	    else if (*line == ')')
branch  0 never executed
branch  1 never executed
    #####: 9183:	      --count;
    #####: 9184:	    else if (*line == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9185:	      break;
        -: 9186:	}
        -: 9187:      else
    #####: 9188:	while (*line != '\0' && *line != termin)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9189:	  ++line;
        -: 9190:
    #####: 9191:      if (*line == '\0')
branch  0 never executed
branch  1 never executed
    #####: 9192:	return -1;
        -: 9193:
    #####: 9194:      if (termin == ',')
branch  0 never executed
branch  1 never executed
        -: 9195:	{
        -: 9196:	  /* Strip blanks after the first string.  */
    #####: 9197:	  char *p = line++;
    #####: 9198:	  while (isblank (p[-1]))
branch  0 never executed
branch  1 never executed
    #####: 9199:	    --p;
    #####: 9200:	  *p = '\0';
        -: 9201:	}
        -: 9202:      else
    #####: 9203:	*line++ = '\0';
        -: 9204:
    #####: 9205:      s2 = variable_expand (s1);
call    0 never executed
        -: 9206:      /* We must allocate a new copy of the expanded string because
        -: 9207:	 variable_expand re-uses the same buffer.  */
    #####: 9208:      len = strlen (s2);
    #####: 9209:      s1 = (char *) alloca (len + 1);
    #####: 9210:      bcopy (s2, s1, len + 1);
        -: 9211:
    #####: 9212:      if (termin != ',')
branch  0 never executed
branch  1 never executed
        -: 9213:	/* Find the start of the second string.  */
    #####: 9214:	line = next_token (line);
call    0 never executed
        -: 9215:
    #####: 9216:      termin = termin == ',' ? ')' : *line;
branch  0 never executed
branch  1 never executed
    #####: 9217:      if (termin != ')' && termin != '"' && termin != '\'')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9218:	return -1;
        -: 9219:
        -: 9220:      /* Find the end of the second string.  */
    #####: 9221:      if (termin == ')')
branch  0 never executed
branch  1 never executed
        -: 9222:	{
    #####: 9223:	  register int count = 0;
    #####: 9224:	  s2 = next_token (line);
call    0 never executed
    #####: 9225:	  for (line = s2; *line != '\0'; ++line)
branch  0 never executed
branch  1 never executed
        -: 9226:	    {
    #####: 9227:	      if (*line == '(')
branch  0 never executed
branch  1 never executed
    #####: 9228:		++count;
    #####: 9229:	      else if (*line == ')')
branch  0 never executed
branch  1 never executed
    #####: 9230:		if (count <= 0)
branch  0 never executed
branch  1 never executed
    #####: 9231:		  break;
        -: 9232:		else
    #####: 9233:		  --count;
        -: 9234:	    }
        -: 9235:	}
        -: 9236:      else
        -: 9237:	{
    #####: 9238:	  ++line;
    #####: 9239:	  s2 = line;
    #####: 9240:	  while (*line != '\0' && *line != termin)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9241:	    ++line;
        -: 9242:	}
        -: 9243:
    #####: 9244:      if (*line == '\0')
branch  0 never executed
branch  1 never executed
    #####: 9245:	return -1;
        -: 9246:
    #####: 9247:      *line = '\0';
    #####: 9248:      line = next_token (++line);
call    0 never executed
    #####: 9249:      if (*line != '\0')
branch  0 never executed
branch  1 never executed
    #####: 9250:	makefile_error (filename, lineno,
call    0 never executed
        -: 9251:			"Extraneous text after `%s' directive",
        -: 9252:			cmdname);
        -: 9253:
    #####: 9254:      s2 = variable_expand (s2);
call    0 never executed
    #####: 9255:      conditionals->ignoring[conditionals->if_cmds - 1]
    #####: 9256:	= streq (s1, s2) == notdef;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 9257:    }
        -: 9258:
        -: 9259:  /* Search through the stack to see if we're ignoring.  */
    #####: 9260:  for (i = 0; i < conditionals->if_cmds; ++i)
branch  0 never executed
branch  1 never executed
    #####: 9261:    if (conditionals->ignoring[i])
branch  0 never executed
branch  1 never executed
    #####: 9262:      return 1;
    #####: 9263:  return 0;
        -: 9264:}
        -: 9265:
        -: 9266:/* Remove duplicate dependencies in CHAIN.  */
        -: 9267:
        -: 9268:void
function uniquize_deps called 4 returned 100% blocks executed 66%
        4: 9269:uniquize_deps (chain)
        -: 9270:     struct dep *chain;
        -: 9271:{
        -: 9272:  register struct dep *d;
        -: 9273:
        -: 9274:  /* Make sure that no dependencies are repeated.  This does not
        -: 9275:     really matter for the purpose of updating targets, but it
        -: 9276:     might make some names be listed twice for $^ and $?.  */
        -: 9277:
       16: 9278:  for (d = chain; d != 0; d = d->next)
branch  0 taken 12
branch  1 taken 4 (fallthrough)
        -: 9279:    {
        -: 9280:      struct dep *last, *next;
        -: 9281:
       12: 9282:      last = d;
       12: 9283:      next = d->next;
       26: 9284:      while (next != 0)
branch  0 taken 14
branch  1 taken 12 (fallthrough)
      14*: 9285:	if (streq (dep_name (d), dep_name (next)))
branch  0 taken 14 (fallthrough)
branch  1 taken 0
branch  2 taken 14 (fallthrough)
branch  3 taken 0
branch  4 taken 14 (fallthrough)
branch  5 taken 0
branch  6 taken 14 (fallthrough)
branch  7 taken 0
branch  8 taken 14 (fallthrough)
branch  9 taken 0
branch 10 taken 2 (fallthrough)
branch 11 taken 12
branch 12 taken 2 (fallthrough)
branch 13 taken 0
branch 14 taken 2 (fallthrough)
branch 15 taken 0
branch 16 taken 2 (fallthrough)
branch 17 taken 0
branch 18 taken 2 (fallthrough)
branch 19 taken 0
branch 20 taken 0 (fallthrough)
branch 21 taken 2
    #####: 9286:	  {
    #####: 9287:	    struct dep *n = next->next;
    #####: 9288:	    last->next = n;
    #####: 9289:	    if (next->name != 0 && next->name != d->name)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9290:	      free (next->name);
    #####: 9291:	    if (next != d)
branch  0 never executed
branch  1 never executed
    #####: 9292:	      free ((char *) next);
    #####: 9293:	    next = n;
        -: 9294:	  }
        -: 9295:	else
        -: 9296:	  {
       14: 9297:	    last = next;
       14: 9298:	    next = next->next;
        -: 9299:	  }
        -: 9300:    }
        4: 9301:}
        -: 9302:
        -: 9303:/* Record a description line for files FILENAMES,
        -: 9304:   with dependencies DEPS, commands to execute described
        -: 9305:   by COMMANDS and COMMANDS_IDX, coming from FILENAME:COMMANDS_STARTED.
        -: 9306:   TWO_COLON is nonzero if a double colon was used.
        -: 9307:   If not nil, PATTERN is the `%' pattern to make this
        -: 9308:   a static pattern rule, and PATTERN_PERCENT is a pointer
        -: 9309:   to the `%' within it.
        -: 9310:
        -: 9311:   The links of FILENAMES are freed, and so are any names in it
        -: 9312:   that are not incorporated into other data structures.  */
        -: 9313:
        -: 9314:static void
function record_files called 525 returned 100% blocks executed 45%
      525: 9315:record_files (filenames, pattern, pattern_percent, deps, commands_started,
        -: 9316:	      commands, commands_idx, two_colon, filename, lineno, set_default)
        -: 9317:     struct nameseq *filenames;
        -: 9318:     char *pattern, *pattern_percent;
        -: 9319:     struct dep *deps;
        -: 9320:     unsigned int commands_started;
        -: 9321:     char *commands;
        -: 9322:     unsigned int commands_idx;
        -: 9323:     int two_colon;
        -: 9324:     char *filename;
        -: 9325:     unsigned int lineno;
        -: 9326:     int set_default;
        -: 9327:{
        -: 9328:  struct nameseq *nextf;
      525: 9329:  int implicit = 0;
        -: 9330:  unsigned int max_targets, target_idx;
      525: 9331:  char **targets = 0, **target_percents = 0;
        -: 9332:  struct commands *cmds;
        -: 9333:
      525: 9334:  if (commands_idx > 0)
branch  0 taken 294 (fallthrough)
branch  1 taken 231
        -: 9335:    {
      294: 9336:      cmds = (struct commands *) xmalloc (sizeof (struct commands));
call    0 returned 294
      294: 9337:      cmds->filename = filename;
      294: 9338:      cmds->lineno = commands_started;
      294: 9339:      cmds->commands = savestring (commands, commands_idx);
call    0 returned 294
      294: 9340:      cmds->command_lines = 0;
        -: 9341:    }
        -: 9342:  else
      231: 9343:    cmds = 0;
        -: 9344:
     1092: 9345:  for (; filenames != 0; filenames = nextf)
branch  0 taken 567
branch  1 taken 525 (fallthrough)
        -: 9346:    {
      567: 9347:      register char *name = filenames->name;
        -: 9348:      register struct file *f;
        -: 9349:      register struct dep *d;
        -: 9350:      struct dep *this;
        -: 9351:      char *implicit_percent;
        -: 9352:
      567: 9353:      nextf = filenames->next;
      567: 9354:      free ((char *) filenames);
        -: 9355:
      567: 9356:      implicit_percent = find_percent (name);
call    0 returned 567
      567: 9357:      implicit |= implicit_percent != 0;
        -: 9358:
     567*: 9359:      if (implicit && pattern != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 567
branch  2 never executed
branch  3 never executed
    #####: 9360:	makefile_fatal (filename, lineno,
call    0 never executed
        -: 9361:			"mixed implicit and static pattern rules");
        -: 9362:
     567*: 9363:      if (implicit && implicit_percent == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 567
branch  2 never executed
branch  3 never executed
    #####: 9364:	makefile_fatal (filename, lineno, "mixed implicit and normal rules");
call    0 never executed
        -: 9365:
     567*: 9366:      if (implicit)
branch  0 taken 0 (fallthrough)
branch  1 taken 567
        -: 9367:	{
    #####: 9368:	  if (targets == 0)
branch  0 never executed
branch  1 never executed
        -: 9369:	    {
    #####: 9370:	      max_targets = 5;
    #####: 9371:	      targets = (char **) xmalloc (5 * sizeof (char *));
call    0 never executed
    #####: 9372:	      target_percents = (char **) xmalloc (5 * sizeof (char *));
call    0 never executed
    #####: 9373:	      target_idx = 0;
        -: 9374:	    }
    #####: 9375:	  else if (target_idx == max_targets - 1)
branch  0 never executed
branch  1 never executed
        -: 9376:	    {
    #####: 9377:	      max_targets += 5;
    #####: 9378:	      targets = (char **) xrealloc ((char *) targets,
call    0 never executed
        -: 9379:					    max_targets * sizeof (char *));
        -: 9380:	      target_percents
    #####: 9381:		= (char **) xrealloc ((char *) target_percents,
call    0 never executed
        -: 9382:				      max_targets * sizeof (char *));
        -: 9383:	    }
    #####: 9384:	  targets[target_idx] = name;
    #####: 9385:	  target_percents[target_idx] = implicit_percent;
    #####: 9386:	  ++target_idx;
    #####: 9387:	  continue;
        -: 9388:	}
        -: 9389:
        -: 9390:      /* If there are multiple filenames, copy the chain DEPS
        -: 9391:	 for all but the last one.  It is not safe for the same deps
        -: 9392:	 to go in more than one place in the data base.  */
      567: 9393:      this = nextf != 0 ? copy_dep_chain (deps) : deps;
branch  0 taken 42 (fallthrough)
branch  1 taken 525
call    2 returned 42
        -: 9394:
      567: 9395:      if (pattern != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 567
        -: 9396:	/* If this is an extended static rule:
        -: 9397:	   `targets: target%pattern: dep%pattern; cmds',
        -: 9398:	   translate each dependency pattern into a plain filename
        -: 9399:	   using the target pattern and this target's name.  */
    #####: 9400:	if (!pattern_matches (pattern, pattern_percent, name))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9401:	  {
        -: 9402:	    /* Give a warning if the rule is meaningless.  */
    #####: 9403:	    makefile_error (filename, lineno,
call    0 never executed
        -: 9404:			    "target `%s' doesn't match the target pattern",
        -: 9405:			    name);
    #####: 9406:	    this = 0;
        -: 9407:	  }
        -: 9408:	else
        -: 9409:	  {
        -: 9410:	    /* We use patsubst_expand to do the work of translating
        -: 9411:	       the target pattern, the target's name and the dependencies'
        -: 9412:	       patterns into plain dependency names.  */
    #####: 9413:	    char *buffer = variable_expand ("");
call    0 never executed
        -: 9414:
    #####: 9415:	    for (d = this; d != 0; d = d->next)
branch  0 never executed
branch  1 never executed
        -: 9416:	      {
        -: 9417:		char *o;
    #####: 9418:		char *percent = find_percent (d->name);
call    0 never executed
    #####: 9419:		if (percent == 0)
branch  0 never executed
branch  1 never executed
    #####: 9420:		  continue;
    #####: 9421:		o = patsubst_expand (buffer, name, pattern, d->name,
call    0 never executed
        -: 9422:				     pattern_percent, percent);
    #####: 9423:		free (d->name);
    #####: 9424:		d->name = savestring (buffer, o - buffer);
call    0 never executed
        -: 9425:	      }
        -: 9426:	  }
        -: 9427:
      567: 9428:      if (!two_colon)
branch  0 taken 567 (fallthrough)
branch  1 taken 0
        -: 9429:	{
        -: 9430:	  /* Single-colon.  Combine these dependencies
        -: 9431:	     with others in file's existing record, if any.  */
      567: 9432:	  f = enter_file (name);
call    0 returned 567
        -: 9433:
      567: 9434:	  if (f->double_colon)
branch  0 taken 0 (fallthrough)
branch  1 taken 567
    #####: 9435:	    makefile_fatal (filename, lineno,
call    0 never executed
        -: 9436:			    "target file `%s' has both : and :: entries",
        -: 9437:			    f->name);
        -: 9438:
        -: 9439:	  /* If CMDS == F->CMDS, this target was listed in this rule
        -: 9440:	     more than once.  Just give a warning since this is harmless.  */
      567: 9441:	  if (cmds != 0 && cmds == f->cmds)
branch  0 taken 294 (fallthrough)
branch  1 taken 273
branch  2 taken 0 (fallthrough)
branch  3 taken 294
    #####: 9442:	    makefile_error
call    0 never executed
        -: 9443:	      (filename, lineno,
        -: 9444:	       "target `%s' given more than once in the same rule.",
        -: 9445:	       f->name);
        -: 9446:
        -: 9447:	  /* Check for two single-colon entries both with commands.
        -: 9448:	     Check is_target so that we don't lose on files such as .c.o
        -: 9449:	     whose commands were preinitialized.  */
      567: 9450:	  else if (cmds != 0 && f->cmds != 0 && f->is_target)
branch  0 taken 294 (fallthrough)
branch  1 taken 273
branch  2 taken 59 (fallthrough)
branch  3 taken 235
branch  4 taken 42 (fallthrough)
branch  5 taken 17
        -: 9451:	    {
       42: 9452:	      makefile_error (cmds->filename, cmds->lineno,
call    0 returned 42
        -: 9453:			      "warning: overriding commands for target `%s'",
        -: 9454:			      f->name);
       42: 9455:	      makefile_error (f->cmds->filename, f->cmds->lineno,
call    0 returned 42
        -: 9456:			      "warning: ignoring old commands for target `%s'",
        -: 9457:			      f->name);
        -: 9458:	    }
        -: 9459:
      567: 9460:	  f->is_target = 1;
        -: 9461:
        -: 9462:	  /* Defining .DEFAULT with no deps or cmds clears it.  */
     567*: 9463:	  if (f == default_file && this == 0 && cmds == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 567
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9464:	    f->cmds = 0;
      567: 9465:	  if (cmds != 0)
branch  0 taken 294 (fallthrough)
branch  1 taken 273
      294: 9466:	    f->cmds = cmds;
        -: 9467:	  /* Defining .SUFFIXES with no dependencies
        -: 9468:	     clears out the list of suffixes.  */
     567*: 9469:	  if (f == suffix_file && this == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 567
branch  2 never executed
branch  3 never executed
        -: 9470:	    {
    #####: 9471:	      d = f->deps;
    #####: 9472:	      while (d != 0)
branch  0 never executed
branch  1 never executed
        -: 9473:		{
    #####: 9474:		  struct dep *nextd = d->next;
    #####: 9475: 		  free (d->name);
    #####: 9476: 		  free ((char *)d);
    #####: 9477:		  d = nextd;
        -: 9478:		}
    #####: 9479:	      f->deps = 0;
        -: 9480:	    }
      567: 9481:	  else if (f->deps != 0)
branch  0 taken 141 (fallthrough)
branch  1 taken 426
        -: 9482:	    {
        -: 9483:	      /* Add the file's old deps and the new ones in THIS together.  */
        -: 9484:
        -: 9485:	      struct dep *firstdeps, *moredeps;
      141: 9486:	      if (cmds != 0)
branch  0 taken 33 (fallthrough)
branch  1 taken 108
        -: 9487:		{
        -: 9488:		  /* This is the rule with commands, so put its deps first.
        -: 9489:		     The rationale behind this is that $< expands to the
        -: 9490:		     first dep in the chain, and commands use $< expecting
        -: 9491:		     to get the dep that rule specifies.  */
       33: 9492:		  firstdeps = this;
       33: 9493:		  moredeps = f->deps;
        -: 9494:		}
        -: 9495:	      else
        -: 9496:		{
        -: 9497:		  /* Append the new deps to the old ones.  */
      108: 9498:		  firstdeps = f->deps;
      108: 9499:		  moredeps = this;
        -: 9500:		}
        -: 9501:
      141: 9502:	      if (firstdeps == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 141
    #####: 9503:		firstdeps = moredeps;
        -: 9504:	      else
        -: 9505:		{
      141: 9506:		  d = firstdeps;
      645: 9507:		  while (d->next != 0)
branch  0 taken 504
branch  1 taken 141 (fallthrough)
      504: 9508:		    d = d->next;
      141: 9509:		  d->next = moredeps;
        -: 9510:		}
        -: 9511:
      141: 9512:	      f->deps = firstdeps;
        -: 9513:	    }
        -: 9514:	  else
      426: 9515:	    f->deps = this;
        -: 9516:
        -: 9517:	  /* If this is a static pattern rule, set the file's stem to
        -: 9518:	     the part of its name that matched the `%' in the pattern,
        -: 9519:	     so you can use $* in the commands.  */
      567: 9520:	  if (pattern != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 567
        -: 9521:	    {
        -: 9522:	      static char *percent = "%";
    #####: 9523:	      char *buffer = variable_expand ("");
call    0 never executed
    #####: 9524:	      char *o = patsubst_expand (buffer, name, pattern, percent,
call    0 never executed
        -: 9525:					 pattern_percent, percent);
    #####: 9526:	      f->stem = savestring (buffer, o - buffer);
call    0 never executed
        -: 9527:	    }
        -: 9528:	}
        -: 9529:      else
        -: 9530:	{
        -: 9531:	  /* Double-colon.  Make a new record
        -: 9532:	     even if the file already has one.  */
    #####: 9533:	  f = lookup_file (name);
call    0 never executed
        -: 9534:	  /* Check for both : and :: rules.  Check is_target so
        -: 9535:	     we don't lose on default suffix rules or makefiles.  */
    #####: 9536:	  if (f != 0 && f->is_target && !f->double_colon)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9537:	    makefile_fatal (filename, lineno,
call    0 never executed
        -: 9538:			    "target file `%s' has both : and :: entries",
        -: 9539:			    f->name);
    #####: 9540:	  f = enter_file (name);
call    0 never executed
        -: 9541:	  /* If there was an existing entry and it was a double-colon
        -: 9542:	     entry, enter_file will have returned a new one, making it the
        -: 9543:	     prev pointer of the old one, and setting its double_colon
        -: 9544:	     pointer to the first one.  */
    #####: 9545:	  if (f->double_colon == 0)
branch  0 never executed
branch  1 never executed
        -: 9546:	    /* This is the first entry for this name, so we must
        -: 9547:	       set its double_colon pointer to itself.  */
    #####: 9548:	    f->double_colon = f;
    #####: 9549:	  f->is_target = 1;
    #####: 9550:	  f->deps = this;
    #####: 9551:	  f->cmds = cmds;
        -: 9552:	}
        -: 9553:
        -: 9554:      /* Free name if not needed further.  */
      567: 9555:      if (f != 0 && name != f->name
branch  0 taken 567 (fallthrough)
branch  1 taken 0
branch  2 taken 188 (fallthrough)
branch  3 taken 379
      188: 9556:	  && (name < f->name || name > f->name + strlen (f->name)))
branch  0 taken 188 (fallthrough)
branch  1 taken 0
branch  2 taken 188 (fallthrough)
branch  3 taken 0
        -: 9557:	{
      188: 9558:	  free (name);
      188: 9559:	  name = f->name;
        -: 9560:	}
        -: 9561:
        -: 9562:      /* See if this is first target seen whose name does
        -: 9563:	 not start with a `.', unless it contains a slash.  */
      567: 9564:      if (default_goal_file == 0 && set_default
branch  0 taken 18 (fallthrough)
branch  1 taken 549
branch  2 taken 18 (fallthrough)
branch  3 taken 0
      18*: 9565:	  && (*name != '.' || index (name, '/') != 0
branch  0 taken 0 (fallthrough)
branch  1 taken 18
branch  2 never executed
branch  3 never executed
        -: 9566:#ifdef __MSDOS__
        -: 9567:			   || index (name, '\\') != 0
        -: 9568:#endif
        -: 9569:	      ))
        -: 9570:	{
       18: 9571:	  int reject = 0;
        -: 9572:
        -: 9573:	  /* If this file is a suffix, don't
        -: 9574:	     let it be the default goal file.  */
        -: 9575:
      545: 9576:	  for (d = suffix_file->deps; d != 0; d = d->next)
branch  0 taken 527
branch  1 taken 18 (fallthrough)
        -: 9577:	    {
        -: 9578:	      register struct dep *d2;
     527*: 9579:	      if (*dep_name (d) != '.' && streq (name, dep_name (d)))
branch  0 taken 0 (fallthrough)
branch  1 taken 527
branch  2 taken 0 (fallthrough)
branch  3 taken 527
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
        -: 9580:		{
    #####: 9581:		  reject = 1;
    #####: 9582:		  break;
        -: 9583:		}
    16864: 9584:	      for (d2 = suffix_file->deps; d2 != 0; d2 = d2->next)
branch  0 taken 16337
branch  1 taken 527 (fallthrough)
        -: 9585:		{
   16337*: 9586:		  register unsigned int len = strlen (dep_name (d2));
branch  0 taken 0 (fallthrough)
branch  1 taken 16337
   16337*: 9587:		  if (strncmp (name, dep_name (d2), len))
branch  0 taken 0 (fallthrough)
branch  1 taken 16337
branch  2 taken 16337 (fallthrough)
branch  3 taken 0
    16337: 9588:		    continue;
    #####: 9589:		  if (streq (name + len, dep_name (d)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
        -: 9590:		    {
    #####: 9591:		      reject = 1;
    #####: 9592:		      break;
        -: 9593:		    }
        -: 9594:		}
      527: 9595:	      if (reject)
branch  0 taken 0 (fallthrough)
branch  1 taken 527
    #####: 9596:		break;
        -: 9597:	    }
        -: 9598:
       18: 9599:	  if (!reject)
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18: 9600:	    default_goal_file = f;
        -: 9601:	}
        -: 9602:    }
        -: 9603:
      525: 9604:  if (implicit)
branch  0 taken 0 (fallthrough)
branch  1 taken 525
        -: 9605:    {
    #####: 9606:      targets[target_idx] = 0;
    #####: 9607:      target_percents[target_idx] = 0;
    #####: 9608:      create_pattern_rule (targets, target_percents, two_colon, deps, cmds, 1);
call    0 never executed
    #####: 9609:      free ((char *) target_percents);
        -: 9610:    }
      525: 9611:}
        -: 9612:
        -: 9613:/* Search STRING for an unquoted STOPCHAR or blank (if BLANK is nonzero).
        -: 9614:   Backslashes quote STOPCHAR, blanks if BLANK is nonzero, and backslash.
        -: 9615:   Quoting backslashes are removed from STRING by compacting it into
        -: 9616:   itself.  Returns a pointer to the first unquoted STOPCHAR if there is
        -: 9617:   one, or nil if there are none.  */
        -: 9618:
        -: 9619:char *
function find_char_unquote called 44197 returned 100% blocks executed 58%
    44197: 9620:find_char_unquote (string, stopchars, blank)
        -: 9621:     char *string;
        -: 9622:     char *stopchars;
        -: 9623:     int blank;
        -: 9624:{
    44197: 9625:  unsigned int string_len = 0;
    44197: 9626:  register char *p = string;
        -: 9627:
        -: 9628:  while (1)
        -: 9629:    {
  255155*: 9630:      while (*p != '\0' && index (stopchars, *p) == 0
branch  0 taken 203725 (fallthrough)
branch  1 taken 7233
   425538: 9631:	     && (!blank || !isblank (*p)))
branch  0 taken 210958 (fallthrough)
branch  1 taken 10855
branch  2 taken 55513
branch  3 taken 148212 (fallthrough)
branch  4 taken 122103
branch  5 taken 26109 (fallthrough)
   177616: 9632:	++p;
    44197: 9633:      if (*p == '\0')
branch  0 taken 10855 (fallthrough)
branch  1 taken 33342
    10855: 9634:	break;
        -: 9635:
    33342: 9636:      if (p > string && p[-1] == '\\')
branch  0 taken 27423 (fallthrough)
branch  1 taken 5919
branch  2 taken 0 (fallthrough)
branch  3 taken 27423
    #####: 9637:	{
        -: 9638:	  /* Search for more backslashes.  */
    #####: 9639:	  register int i = -2;
    #####: 9640:	  while (&p[i] >= string && p[i] == '\\')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9641:	    --i;
    #####: 9642:	  ++i;
        -: 9643:	  /* Only compute the length if really needed.  */
    #####: 9644:	  if (string_len == 0)
branch  0 never executed
branch  1 never executed
    #####: 9645:	    string_len = strlen (string);
        -: 9646:	  /* The number of backslashes is now -I.
        -: 9647:	     Copy P over itself to swallow half of them.  */
    #####: 9648:	  bcopy (&p[i / 2], &p[i], (string_len - (p - string)) - (i / 2) + 1);
    #####: 9649:	  p += i / 2;
    #####: 9650:	  if (i % 2 == 0)
branch  0 never executed
branch  1 never executed
        -: 9651:	    /* All the backslashes quoted each other; the STOPCHAR was
        -: 9652:	       unquoted.  */
    #####: 9653:	    return p;
        -: 9654:
        -: 9655:	  /* The STOPCHAR was quoted by a backslash.  Look for another.  */
        -: 9656:	}
        -: 9657:      else
        -: 9658:	/* No backslash in sight.  */
    33342: 9659:	return p;
        -: 9660:    }
        -: 9661:
        -: 9662:  /* Never hit a STOPCHAR or blank (with BLANK nonzero).  */
    10855: 9663:  return 0;
        -: 9664:}
        -: 9665:
        -: 9666:/* Search PATTERN for an unquoted %.  */
        -: 9667:
        -: 9668:char *
function find_percent called 6897 returned 100% blocks executed 100%
     6897: 9669:find_percent (pattern)
        -: 9670:     char *pattern;
        -: 9671:{
     6897: 9672:  return find_char_unquote (pattern, "%", 0);
call    0 returned 6897
        -: 9673:}
        -: 9674:
        -: 9675:/* Parse a string into a sequence of filenames represented as a
        -: 9676:   chain of struct nameseq's in reverse order and return that chain.
        -: 9677:
        -: 9678:   The string is passed as STRINGP, the address of a string pointer.
        -: 9679:   The string pointer is updated to point at the first character
        -: 9680:   not parsed, which either is a null char or equals STOPCHAR.
        -: 9681:
        -: 9682:   SIZE is how big to construct chain elements.
        -: 9683:   This is useful if we want them actually to be other structures
        -: 9684:   that have room for additional info.
        -: 9685:
        -: 9686:   If STRIP is nonzero, strip `./'s off the beginning.  */
        -: 9687:
        -: 9688:struct nameseq *
function parse_file_seq called 8156 returned 100% blocks executed 45%
     8156: 9689:parse_file_seq (stringp, stopchar, size, strip)
        -: 9690:     char **stringp;
        -: 9691:     int stopchar;
        -: 9692:     unsigned int size;
        -: 9693:     int strip;
        -: 9694:{
     8156: 9695:  register struct nameseq *new = 0;
        -: 9696:  register struct nameseq *new1, *lastnew1;
     8156: 9697:  register char *p = *stringp;
        -: 9698:  char *q;
        -: 9699:  char *name;
        -: 9700:  char stopchars[3];
        -: 9701:
        -: 9702:#ifdef VMS
        -: 9703:  stopchars[0] = ',';
        -: 9704:  stopchars[1] = stopchar;
        -: 9705:  stopchars[2] = '\0';
        -: 9706:#else
     8156: 9707:  stopchars[0] = stopchar;
     8156: 9708:  stopchars[1] = '\0';
        -: 9709:#endif
        -: 9710:
        -: 9711:  while (1)
        -: 9712:    {
        -: 9713:      /* Skip whitespace; see if any more names are left.  */
    42316: 9714:      p = next_token (p);
call    0 returned 42316
    42316: 9715:      if (*p == '\0')
branch  0 taken 7631 (fallthrough)
branch  1 taken 34685
     7631: 9716:	break;
    34685: 9717:      if (*p == stopchar)
branch  0 taken 525 (fallthrough)
branch  1 taken 34160
      525: 9718:	break;
        -: 9719:
        -: 9720:      /* Yes, find end of next name.  */
    34160: 9721:      q = p;
    34160: 9722:      p = find_char_unquote (q, stopchars, 1);
call    0 returned 34160
        -: 9723:#ifdef VMS
        -: 9724:	/* convert comma separated list to space separated */
        -: 9725:      if (p && *p == ',')
        -: 9726:	*p =' ';
        -: 9727:#endif
        -: 9728:#ifdef __MSDOS__
        -: 9729:      /* For MS-DOS, skip a "C:\..." or a "C:/..." until we find a
        -: 9730:	 first colon which isn't followed by a slash or a backslash.  */
        -: 9731:      if (stopchar == ':')
        -: 9732:	while (p != 0 && (p[1] == '\\' || p[1] == '/') && isalpha (p[-1]))
        -: 9733:	  p = find_char_unquote (p + 1, stopchars, 1);
        -: 9734:#endif
        -: 9735:#ifdef _AMIGA
        -: 9736:      if (stopchar == ':' && p && *p == ':' &&
        -: 9737:	!(isspace(p[1]) || !p[1] || isspace(p[-1])))
        -: 9738:      {
        -: 9739:	p = find_char_unquote (p+1, stopchars, 1);
        -: 9740:      }
        -: 9741:#endif
        -: 9742:#ifdef WINDOWS32
        -: 9743:      /* For WINDOWS32, skip a "C:\..." or "C:/...". */
        -: 9744:      if (stopchar == ':' &&
        -: 9745:          p != 0 &&
        -: 9746:          (p[1] == '\\' || p[1] == '/') &&
        -: 9747:          isalpha (p[-1])) {
        -: 9748:        p = end_of_token_w32(++p, ':');
        -: 9749:        if (*p == '\0' && p[-1] == ':')
        -: 9750:          p--;
        -: 9751:      }
        -: 9752:#endif
    34160: 9753:      if (p == 0)
branch  0 taken 7526 (fallthrough)
branch  1 taken 26634
     7526: 9754:	p = q + strlen (q);
        -: 9755:
    34160: 9756:      if (strip)
branch  0 taken 34160 (fallthrough)
branch  1 taken 0
        -: 9757:#ifdef VMS
        -: 9758:	/* Skip leading `[]'s.  */
        -: 9759:	while (p - q > 2 && q[0] == '[' && q[1] == ']')
        -: 9760:#else
        -: 9761:	/* Skip leading `./'s.  */
    34160: 9762:	while (p - q > 2 && q[0] == '.' && q[1] == '/')
branch  0 taken 21536 (fallthrough)
branch  1 taken 12624
branch  2 taken 13560 (fallthrough)
branch  3 taken 7976
branch  4 taken 0
branch  5 taken 13560 (fallthrough)
        -: 9763:#endif
        -: 9764:	  {
    #####: 9765:	    q += 2;		/* Skip "./".  */
    #####: 9766:	    while (q < p && *q == '/')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9767:	      /* Skip following slashes: ".//foo" is "foo", not "/foo".  */
    #####: 9768:	      ++q;
        -: 9769:	  }
        -: 9770:
        -: 9771:      /* Extract the filename just found, and skip it.  */
        -: 9772:
    34160: 9773:      if (q == p)
branch  0 taken 0 (fallthrough)
branch  1 taken 34160
        -: 9774:	/* ".///" was stripped to "". */
        -: 9775:#ifdef VMS
        -: 9776:	continue;
        -: 9777:#else
        -: 9778:#ifdef _AMIGA
        -: 9779:	name = savestring ("", 0);
        -: 9780:#else
    #####: 9781:	name = savestring ("./", 2);
call    0 never executed
        -: 9782:#endif
        -: 9783:#endif
        -: 9784:      else
        -: 9785:#ifdef VMS
        -: 9786:/* VMS filenames can have a ':' in them but they have to be '\'ed but we need
        -: 9787: *  to remove this '\' before we can use the filename.
        -: 9788: * Savestring called because q may be read-only string constant.
        -: 9789: */
        -: 9790:	{
        -: 9791:	  char *qbase = savestring(q, strlen(q));
        -: 9792:	  char *pbase = qbase + (p-q);
        -: 9793:	  char *q1 = qbase;
        -: 9794:	  char *q2 = q1;
        -: 9795:	  char *p1 = pbase;
        -: 9796:
        -: 9797:	  while (q1 != pbase)
        -: 9798:	    {
        -: 9799:	      if (*q1 == '\\' && *(q1+1) == ':')
        -: 9800:		{
        -: 9801:		  q1++;
        -: 9802:		  p1--;
        -: 9803:		}
        -: 9804:	      *q2++ = *q1++;
        -: 9805:	    }
        -: 9806:	  name = savestring (qbase, p1 - qbase);
        -: 9807:	  free (qbase);
        -: 9808:	}
        -: 9809:#else
    34160: 9810:	name = savestring (q, p - q);
call    0 returned 34160
        -: 9811:#endif
        -: 9812:
        -: 9813:      /* Add it to the front of the chain.  */
    34160: 9814:      new1 = (struct nameseq *) xmalloc (size);
call    0 returned 34160
    34160: 9815:      new1->name = name;
    34160: 9816:      new1->next = new;
    34160: 9817:      new = new1;
        -: 9818:    }
        -: 9819:
        -: 9820:#ifndef NO_ARCHIVES
        -: 9821:
        -: 9822:  /* Look for multi-word archive references.
        -: 9823:     They are indicated by a elt ending with an unmatched `)' and
        -: 9824:     an elt further down the chain (i.e., previous in the file list)
        -: 9825:     with an unmatched `(' (e.g., "lib(mem").  */
        -: 9826:
     8156: 9827:  new1 = new;
     8156: 9828:  lastnew1 = 0;
    42316: 9829:  while (new1 != 0)
branch  0 taken 34160
branch  1 taken 8156 (fallthrough)
    34160: 9830:    if (new1->name[0] != '('	/* Don't catch "(%)" and suchlike.  */
branch  0 taken 34160 (fallthrough)
branch  1 taken 0
    34160: 9831:	&& new1->name[strlen (new1->name) - 1] == ')'
branch  0 taken 0 (fallthrough)
branch  1 taken 34160
    #####: 9832:	&& index (new1->name, '(') == 0)
branch  0 never executed
branch  1 never executed
    #####: 9833:      {
        -: 9834:	/* NEW1 ends with a `)' but does not contain a `('.
        -: 9835:	   Look back for an elt with an opening `(' but no closing `)'.  */
        -: 9836:
    #####: 9837:	struct nameseq *n = new1->next, *lastn = new1;
        -: 9838:	char *paren;
    #####: 9839:	while (n != 0 && (paren = index (n->name, '(')) == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 9840:	  {
    #####: 9841:	    lastn = n;
    #####: 9842:	    n = n->next;
        -: 9843:	  }
    #####: 9844:	if (n != 0
branch  0 never executed
branch  1 never executed
        -: 9845:	    /* Ignore something starting with `(', as that cannot actually
        -: 9846:	       be an archive-member reference (and treating it as such
        -: 9847:	       results in an empty file name, which causes much lossage).  */
    #####: 9848:	    && n->name[0] != '(')
branch  0 never executed
branch  1 never executed
    #####: 9849:	  {
        -: 9850:	    /* N is the first element in the archive group.
        -: 9851:	       Its name looks like "lib(mem" (with no closing `)').  */
        -: 9852:
        -: 9853:	    char *libname;
        -: 9854:
        -: 9855:	    /* Copy "lib(" into LIBNAME.  */
    #####: 9856:	    ++paren;
    #####: 9857:	    libname = (char *) alloca (paren - n->name + 1);
    #####: 9858:	    bcopy (n->name, libname, paren - n->name);
    #####: 9859:	    libname[paren - n->name] = '\0';
        -: 9860:
    #####: 9861:	    if (*paren == '\0')
branch  0 never executed
branch  1 never executed
        -: 9862:	      {
        -: 9863:		/* N was just "lib(", part of something like "lib( a b)".
        -: 9864:		   Edit it out of the chain and free its storage.  */
    #####: 9865:		lastn->next = n->next;
    #####: 9866:		free (n->name);
    #####: 9867:		free ((char *) n);
        -: 9868:		/* LASTN->next is the new stopping elt for the loop below.  */
    #####: 9869:		n = lastn->next;
        -: 9870:	      }
        -: 9871:	    else
        -: 9872:	      {
        -: 9873:		/* Replace N's name with the full archive reference.  */
    #####: 9874:		name = concat (libname, paren, ")");
call    0 never executed
    #####: 9875:		free (n->name);
    #####: 9876:		n->name = name;
        -: 9877:	      }
        -: 9878:
    #####: 9879:	    if (new1->name[1] == '\0')
branch  0 never executed
branch  1 never executed
        -: 9880:	      {
        -: 9881:		/* NEW1 is just ")", part of something like "lib(a b )".
        -: 9882:		   Omit it from the chain and free its storage.  */
    #####: 9883:		if (lastnew1 == 0)
branch  0 never executed
branch  1 never executed
    #####: 9884:		  new = new1->next;
        -: 9885:		else
    #####: 9886:		  lastnew1->next = new1->next;
    #####: 9887:		lastn = new1;
    #####: 9888:		new1 = new1->next;
    #####: 9889:		free (lastn->name);
    #####: 9890:		free ((char *) lastn);
        -: 9891:	      }
        -: 9892:	    else
        -: 9893:	      {
        -: 9894:		/* Replace also NEW1->name, which already has closing `)'.  */
    #####: 9895:		name = concat (libname, new1->name, "");
call    0 never executed
    #####: 9896:		free (new1->name);
    #####: 9897:		new1->name = name;
    #####: 9898:		new1 = new1->next;
        -: 9899:	      }
        -: 9900:
        -: 9901:	    /* Trace back from NEW1 (the end of the list) until N
        -: 9902:	       (the beginning of the list), rewriting each name
        -: 9903:	       with the full archive reference.  */
        -: 9904:
    #####: 9905:	    while (new1 != n)
branch  0 never executed
branch  1 never executed
        -: 9906:	      {
    #####: 9907:		name = concat (libname, new1->name, ")");
call    0 never executed
    #####: 9908:		free (new1->name);
    #####: 9909:		new1->name = name;
    #####: 9910:		lastnew1 = new1;
    #####: 9911:		new1 = new1->next;
        -: 9912:	      }
        -: 9913:	  }
        -: 9914:	else
        -: 9915:	  {
        -: 9916:	    /* No frobnication happening.  Just step down the list.  */
    #####: 9917:	    lastnew1 = new1;
    #####: 9918:	    new1 = new1->next;
        -: 9919:	  }
        -: 9920:      }
        -: 9921:    else
        -: 9922:      {
    34160: 9923:	lastnew1 = new1;
    34160: 9924:	new1 = new1->next;
        -: 9925:      }
        -: 9926:
        -: 9927:#endif
        -: 9928:
     8156: 9929:  *stringp = p;
     8156: 9930:  return new;
        -: 9931:}
        -: 9932:
        -: 9933:/* Read a line of text from STREAM into LINEBUFFER.
        -: 9934:   Combine continuation lines into one line.
        -: 9935:   Return the number of actual lines read (> 1 if hacked continuation lines).
        -: 9936: */
        -: 9937:
        -: 9938:static unsigned int
function readline called 2573 returned 100% blocks executed 82%
     2573: 9939:readline (linebuffer, stream, filename, lineno)
        -: 9940:     struct linebuffer *linebuffer;
        -: 9941:     FILE *stream;
        -: 9942:     char *filename;
        -: 9943:     unsigned int lineno;
        -: 9944:{
     2573: 9945:  char *buffer = linebuffer->buffer;
     2573: 9946:  register char *p = linebuffer->buffer;
     2573: 9947:  register char *end = p + linebuffer->size;
     2573: 9948:  register int len, lastlen = 0;
        -: 9949:  register char *p2;
     2573: 9950:  register unsigned int nlines = 0;
        -: 9951:  register int backslash;
        -: 9952:
     2573: 9953:  *p = '\0';
        -: 9954:
     2657: 9955:  while (fgets (p, end - p, stream) != 0)
call    0 returned 2657
branch  1 taken 2635
branch  2 taken 22 (fallthrough)
        -: 9956:    {
     2635: 9957:      len = strlen (p);
     2635: 9958:      if (len == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 2635
        -: 9959:	{
        -: 9960:	  /* This only happens when the first thing on the line is a '\0'.
        -: 9961:	     It is a pretty hopeless case, but (wonder of wonders) Athena
        -: 9962:	     lossage strikes again!  (xmkmf puts NULs in its makefiles.)
        -: 9963:	     There is nothing really to be done; we synthesize a newline so
        -: 9964:	     the following line doesn't appear to be part of this line.  */
    #####: 9965:	  makefile_error (filename, lineno,
call    0 never executed
        -: 9966:			  "warning: NUL character seen; rest of line ignored");
    #####: 9967:	  p[0] = '\n';
    #####: 9968:	  len = 1;
        -: 9969:	}
        -: 9970:
     2635: 9971:      p += len;
     2635: 9972:      if (p[-1] != '\n')
branch  0 taken 21 (fallthrough)
branch  1 taken 2614
       21: 9973:	{
        -: 9974:	  /* Probably ran out of buffer space.  */
       21: 9975:	  register unsigned int p_off = p - buffer;
       21: 9976:	  linebuffer->size *= 2;
       21: 9977:	  buffer = (char *) xrealloc (buffer, linebuffer->size);
call    0 returned 21
       21: 9978:	  p = buffer + p_off;
       21: 9979:	  end = buffer + linebuffer->size;
       21: 9980:	  linebuffer->buffer = buffer;
       21: 9981:	  *p = '\0';
       21: 9982:	  lastlen = len;
       21: 9983:	  continue;
        -: 9984:	}
        -: 9985:
     2614: 9986:      ++nlines;
        -: 9987:
     2614: 9988:      if (len == 1 && p > buffer)
branch  0 taken 698 (fallthrough)
branch  1 taken 1916
branch  2 taken 698 (fallthrough)
branch  3 taken 0
        -: 9989:	/* P is pointing at a newline and it's the beginning of
        -: 9990:	   the buffer returned by the last fgets call.  However,
        -: 9991:	   it is not necessarily the beginning of a line if P is
        -: 9992:	   pointing past the beginning of the holding buffer.
        -: 9993:	   If the buffer was just enlarged (right before the newline),
        -: 9994:	   we must account for that, so we pretend that the two lines
        -: 9995:	   were one line.  */
      698: 9996:	len += lastlen;
     2614: 9997:      lastlen = len;
     2614: 9998:      backslash = 0;
     2677: 9999:      for (p2 = p - 2; --len > 0; --p2)
branch  0 taken 1979
branch  1 taken 698 (fallthrough)
        -:10000:	{
     1979:10001:	  if (*p2 == '\\')
branch  0 taken 63 (fallthrough)
branch  1 taken 1916
       63:10002:	    backslash = !backslash;
        -:10003:	  else
     1916:10004:	    break;
        -:10005:	}
        -:10006:
     2614:10007:      if (!backslash)
branch  0 taken 2551 (fallthrough)
branch  1 taken 63
        -:10008:	{
     2551:10009:	  p[-1] = '\0';
     2551:10010:	  break;
        -:10011:	}
        -:10012:
       63:10013:      if (end - p <= 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 63
        -:10014:	{
        -:10015:	  /* Enlarge the buffer.  */
    #####:10016:	  register unsigned int p_off = p - buffer;
    #####:10017:	  linebuffer->size *= 2;
    #####:10018:	  buffer = (char *) xrealloc (buffer, linebuffer->size);
call    0 never executed
    #####:10019:	  p = buffer + p_off;
    #####:10020:	  end = buffer + linebuffer->size;
    #####:10021:	  linebuffer->buffer = buffer;
        -:10022:	}
        -:10023:    }
        -:10024:
     2573:10025:  if (ferror (stream))
call    0 returned 2573
branch  1 taken 0 (fallthrough)
branch  2 taken 2573
    #####:10026:    pfatal_with_name (filename);
call    0 never executed
        -:10027:
     2573:10028:  return nlines;
        -:10029:}
        -:10030:
        -:10031:/* Construct the list of include directories
        -:10032:   from the arguments and the default list.  */
        -:10033:
        -:10034:void
function construct_include_path called 790 returned 100% blocks executed 78%
      790:10035:construct_include_path (arg_dirs)
        -:10036:     char **arg_dirs;
        -:10037:{
        -:10038:  register unsigned int i;
        -:10039:#ifdef VAXC		/* just don't ask ... */
        -:10040:  stat_t stbuf;
        -:10041:#else
        -:10042:  struct stat stbuf;
        -:10043:#endif
        -:10044:  /* Table to hold the dirs.  */
        -:10045:
      790:10046:  register unsigned int defsize = (sizeof (default_include_directories)
        -:10047:				   / sizeof (default_include_directories[0]));
      790:10048:  register unsigned int max = 5;
      790:10049:  register char **dirs = (char **) xmalloc ((5 + defsize) * sizeof (char *));
call    0 returned 790
      790:10050:  register unsigned int idx = 0;
        -:10051:
        -:10052:#ifdef  __MSDOS__
        -:10053:  defsize++;
        -:10054:#endif
        -:10055:
        -:10056:  /* First consider any dirs specified with -I switches.
        -:10057:     Ignore dirs that don't exist.  */
        -:10058:
      790:10059:  if (arg_dirs != 0)
branch  0 taken 5 (fallthrough)
branch  1 taken 785
       10:10060:    while (*arg_dirs != 0)
branch  0 taken 5
branch  1 taken 5 (fallthrough)
        -:10061:      {
        5:10062:	char *dir = *arg_dirs++;
        -:10063:
        5:10064:	if (dir[0] == '~')
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -:10065:	  {
    #####:10066:	    char *expanded = tilde_expand (dir);
call    0 never executed
    #####:10067:	    if (expanded != 0)
branch  0 never executed
branch  1 never executed
    #####:10068:	      dir = expanded;
        -:10069:	  }
        -:10070:
        5:10071:	if (stat (dir, &stbuf) == 0 && S_ISDIR (stbuf.st_mode))
call    0 returned 5
branch  1 taken 3 (fallthrough)
branch  2 taken 2
branch  3 taken 3 (fallthrough)
branch  4 taken 0
        -:10072:	  {
        3:10073:	    if (idx == max - 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:10074:	      {
    #####:10075:		max += 5;
        -:10076:		dirs = (char **)
    #####:10077:		  xrealloc ((char *) dirs, (max + defsize) * sizeof (char *));
call    0 never executed
        -:10078:	      }
        3:10079:	    dirs[idx++] = dir;
        -:10080:	  }
        2:10081:	else if (dir != arg_dirs[-1])
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:10082:	  free (dir);
        -:10083:      }
        -:10084:
        -:10085:  /* Now add at the end the standard default dirs.  */
        -:10086:
        -:10087:#ifdef  __MSDOS__
        -:10088:  {
        -:10089:    /* The environment variable $DJDIR holds the root of the
        -:10090:       DJGPP directory tree; add ${DJDIR}/include.  */
        -:10091:    struct variable *djdir = lookup_variable ("DJDIR", 5);
        -:10092:
        -:10093:    if (djdir)
        -:10094:      {
        -:10095:	char *defdir = (char *) xmalloc (strlen (djdir->value) + 8 + 1);
        -:10096:
        -:10097:	strcat (strcpy (defdir, djdir->value), "/include");
        -:10098:	dirs[idx++] = defdir;
        -:10099:      }
        -:10100:  }
        -:10101:#endif
        -:10102:
     3950:10103:  for (i = 0; default_include_directories[i] != 0; ++i)
branch  0 taken 3160
branch  1 taken 790 (fallthrough)
     3160:10104:    if (stat (default_include_directories[i], &stbuf) == 0
call    0 returned 3160
branch  1 taken 2370 (fallthrough)
branch  2 taken 790
     2370:10105:	&& S_ISDIR (stbuf.st_mode))
branch  0 taken 2370 (fallthrough)
branch  1 taken 0
     2370:10106:      dirs[idx++] = default_include_directories[i];
        -:10107:
      790:10108:  dirs[idx] = 0;
        -:10109:
        -:10110:  /* Now compute the maximum length of any name in it.  */
        -:10111:
      790:10112:  max_incl_len = 0;
     3163:10113:  for (i = 0; i < idx; ++i)
branch  0 taken 2373
branch  1 taken 790 (fallthrough)
        -:10114:    {
     2373:10115:      unsigned int len = strlen (dirs[i]);
        -:10116:      /* If dir name is written with a trailing slash, discard it.  */
     2373:10117:      if (dirs[i][len - 1] == '/')
branch  0 taken 0 (fallthrough)
branch  1 taken 2373
        -:10118:	/* We can't just clobber a null in because it may have come from
        -:10119:	   a literal string and literal strings may not be writable.  */
    #####:10120:	dirs[i] = savestring (dirs[i], len - 1);
call    0 never executed
     2373:10121:      if (len > max_incl_len)
branch  0 taken 792 (fallthrough)
branch  1 taken 1581
      792:10122:	max_incl_len = len;
        -:10123:    }
        -:10124:
      790:10125:  include_directories_to_search = dirs;
      790:10126:}
        -:10127:
        -:10128:/* Expand ~ or ~USER at the beginning of NAME.
        -:10129:   Return a newly malloc'd string or 0.  */
        -:10130:
        -:10131:char *
function tilde_expand called 0 returned 0% blocks executed 0%
    #####:10132:tilde_expand (name)
        -:10133:     char *name;
        -:10134:{
        -:10135:#ifndef VMS
    #####:10136:  if (name[1] == '/' || name[1] == '\0')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10137:    {
        -:10138:      extern char *getenv ();
        -:10139:      char *home_dir;
        -:10140:      int is_variable;
        -:10141:
        -:10142:      {
        -:10143:	/* Turn off --warn-undefined-variables while we expand HOME.  */
    #####:10144:	int save = warn_undefined_variables_flag;
    #####:10145:	warn_undefined_variables_flag = 0;
        -:10146:
    #####:10147:	home_dir = allocated_variable_expand ("$(HOME)");
call    0 never executed
        -:10148:
    #####:10149:	warn_undefined_variables_flag = save;
        -:10150:      }
        -:10151:
    #####:10152:      is_variable = home_dir[0] != '\0';
    #####:10153:      if (!is_variable)
branch  0 never executed
branch  1 never executed
        -:10154:	{
    #####:10155:	  free (home_dir);
    #####:10156:	  home_dir = getenv ("HOME");
call    0 never executed
        -:10157:	}
        -:10158:#if !defined(_AMIGA) && !defined(WINDOWS32)
    #####:10159:      if (home_dir == 0 || home_dir[0] == '\0')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:10160:	{
        -:10161:	  extern char *getlogin ();
    #####:10162:	  char *name = getlogin ();
call    0 never executed
    #####:10163:	  home_dir = 0;
    #####:10164:	  if (name != 0)
branch  0 never executed
branch  1 never executed
        -:10165:	    {
    #####:10166:	      struct passwd *p = getpwnam (name);
call    0 never executed
    #####:10167:	      if (p != 0)
branch  0 never executed
branch  1 never executed
    #####:10168:		home_dir = p->pw_dir;
        -:10169:	    }
        -:10170:	}
        -:10171:#endif /* !AMIGA && !WINDOWS32 */
    #####:10172:      if (home_dir != 0)
branch  0 never executed
branch  1 never executed
        -:10173:	{
    #####:10174:	  char *new = concat (home_dir, "", name + 1);
call    0 never executed
    #####:10175:	  if (is_variable)
branch  0 never executed
branch  1 never executed
    #####:10176:	    free (home_dir);
    #####:10177:	  return new;
        -:10178:	}
        -:10179:    }
        -:10180:#if !defined(_AMIGA) && !defined(WINDOWS32)
        -:10181:  else
        -:10182:    {
        -:10183:      struct passwd *pwent;
    #####:10184:      char *userend = index (name + 1, '/');
    #####:10185:      if (userend != 0)
branch  0 never executed
branch  1 never executed
    #####:10186:	*userend = '\0';
    #####:10187:      pwent = getpwnam (name + 1);
call    0 never executed
    #####:10188:      if (pwent != 0)
branch  0 never executed
branch  1 never executed
        -:10189:	{
    #####:10190:	  if (userend == 0)
branch  0 never executed
branch  1 never executed
    #####:10191:	    return savestring (pwent->pw_dir, strlen (pwent->pw_dir));
call    0 never executed
        -:10192:	  else
    #####:10193:	    return concat (pwent->pw_dir, "/", userend + 1);
call    0 never executed
        -:10194:	}
    #####:10195:      else if (userend != 0)
branch  0 never executed
branch  1 never executed
    #####:10196:	*userend = '/';
        -:10197:    }
        -:10198:#endif /* !AMIGA && !WINDOWS32 */
        -:10199:#endif /* !VMS */
    #####:10200:  return 0;
        -:10201:}
        -:10202:
        -:10203:/* Given a chain of struct nameseq's describing a sequence of filenames,
        -:10204:   in reverse of the intended order, return a new chain describing the
        -:10205:   result of globbing the filenames.  The new chain is in forward order.
        -:10206:   The links of the old chain are freed or used in the new chain.
        -:10207:   Likewise for the names in the old chain.
        -:10208:
        -:10209:   SIZE is how big to construct chain elements.
        -:10210:   This is useful if we want them actually to be other structures
        -:10211:   that have room for additional info.  */
        -:10212:
        -:10213:struct nameseq *
function multi_glob called 8156 returned 100% blocks executed 53%
     8156:10214:multi_glob (chain, size)
        -:10215:     struct nameseq *chain;
        -:10216:     unsigned int size;
        -:10217:{
        -:10218:  extern void dir_setup_glob ();
     8156:10219:  register struct nameseq *new = 0;
        -:10220:  register struct nameseq *old;
        -:10221:  struct nameseq *nexto;
        -:10222:  glob_t gl;
        -:10223:
     8156:10224:  dir_setup_glob (&gl);
call    0 returned 8156
        -:10225:
    42316:10226:  for (old = chain; old != 0; old = nexto)
branch  0 taken 34160
branch  1 taken 8156 (fallthrough)
        -:10227:    {
        -:10228:#ifndef NO_ARCHIVES
        -:10229:      char *memname;
        -:10230:#endif
        -:10231:
    34160:10232:      nexto = old->next;
        -:10233:
    34160:10234:      if (old->name[0] == '~')
branch  0 taken 0 (fallthrough)
branch  1 taken 34160
        -:10235:	{
    #####:10236:	  char *newname = tilde_expand (old->name);
call    0 never executed
    #####:10237:	  if (newname != 0)
branch  0 never executed
branch  1 never executed
        -:10238:	    {
    #####:10239:	      free (old->name);
    #####:10240:	      old->name = newname;
        -:10241:	    }
        -:10242:	}
        -:10243:
        -:10244:#ifndef NO_ARCHIVES
    34160:10245:      if (ar_name (old->name))
call    0 returned 34160
branch  1 taken 0 (fallthrough)
branch  2 taken 34160
        -:10246:	{
        -:10247:	  /* OLD->name is an archive member reference.
        -:10248:	     Replace it with the archive file name,
        -:10249:	     and save the member name in MEMNAME.
        -:10250:	     We will glob on the archive name and then
        -:10251:	     reattach MEMNAME later.  */
        -:10252:	  char *arname;
    #####:10253:	  ar_parse_name (old->name, &arname, &memname);
call    0 never executed
    #####:10254:	  free (old->name);
    #####:10255:	  old->name = arname;
        -:10256:	}
        -:10257:      else
    34160:10258:	memname = 0;
        -:10259:#endif /* !NO_ARCHIVES */
        -:10260:
    34160:10261:      switch (glob (old->name, GLOB_NOCHECK|GLOB_ALTDIRFUNC, NULL, &gl))
call    0 returned 34160
branch  1 taken 34160
branch  2 taken 0
branch  3 taken 0
        -:10262:	{
    34160:10263:	case 0:			/* Success.  */
        -:10264:	  {
    34160:10265:	    register int i = gl.gl_pathc;
    68425:10266:	    while (i-- > 0)
branch  0 taken 34265
branch  1 taken 34160 (fallthrough)
        -:10267:	      {
        -:10268:#ifndef NO_ARCHIVES
    34265:10269:		if (memname != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 34265
        -:10270:		  {
        -:10271:		    /* Try to glob on MEMNAME within the archive.  */
        -:10272:		    struct nameseq *found
    #####:10273:		      = ar_glob (gl.gl_pathv[i], memname, size);
call    0 never executed
    #####:10274:		    if (found == 0)
branch  0 never executed
branch  1 never executed
        -:10275:		      {
        -:10276:			/* No matches.  Use MEMNAME as-is.  */
        -:10277:			struct nameseq *elt
    #####:10278:			  = (struct nameseq *) xmalloc (size);
call    0 never executed
    #####:10279:			unsigned int alen = strlen (gl.gl_pathv[i]);
    #####:10280:			unsigned int mlen = strlen (memname);
    #####:10281:			elt->name = (char *) xmalloc (alen + 1 + mlen + 2);
call    0 never executed
    #####:10282:			bcopy (gl.gl_pathv[i], elt->name, alen);
    #####:10283:			elt->name[alen] = '(';
    #####:10284:			bcopy (memname, &elt->name[alen + 1], mlen);
    #####:10285:			elt->name[alen + 1 + mlen] = ')';
    #####:10286:			elt->name[alen + 1 + mlen + 1] = '\0';
    #####:10287:			elt->next = new;
    #####:10288:			new = elt;
        -:10289:		      }
        -:10290:		    else
        -:10291:		      {
        -:10292:			/* Find the end of the FOUND chain.  */
    #####:10293:			struct nameseq *f = found;
    #####:10294:			while (f->next != 0)
branch  0 never executed
branch  1 never executed
    #####:10295:			  f = f->next;
        -:10296:
        -:10297:			/* Attach the chain being built to the end of the FOUND
        -:10298:			   chain, and make FOUND the new NEW chain.  */
    #####:10299:			f->next = new;
    #####:10300:			new = found;
        -:10301:		      }
        -:10302:
    #####:10303:		    free (memname);
        -:10304:		  }
        -:10305:		else
        -:10306:#endif /* !NO_ARCHIVES */
        -:10307:		  {
    34265:10308:		    struct nameseq *elt = (struct nameseq *) xmalloc (size);
call    0 returned 34265
    68530:10309:		    elt->name = savestring (gl.gl_pathv[i],
    34265:10310:					    strlen (gl.gl_pathv[i]));
call    0 returned 34265
    34265:10311:		    elt->next = new;
    34265:10312:		    new = elt;
        -:10313:		  }
        -:10314:	      }
    34160:10315:	    globfree (&gl);
call    0 returned 34160
    34160:10316:	    free (old->name);
    34160:10317:	    free ((char *)old);
    34160:10318:	    break;
        -:10319:	  }
        -:10320:
    #####:10321:	case GLOB_NOSPACE:
    #####:10322:	  fatal ("virtual memory exhausted");
call    0 never executed
    #####:10323:	  break;
        -:10324:
    #####:10325:	default:
    #####:10326:	  old->next = new;
    #####:10327:	  new = old;
    #####:10328:	  break;
        -:10329:	}
        -:10330:    }
        -:10331:
     8156:10332:  return new;
        -:10333:}
        -:10334:
        -:10335:
        -:10336:
        -:10337:/*************************************************************
        -:10338:  ============================================================
        -:10339:  ************************************************************
        -:10340:  ============================================================
        -:10341:  ************************************************************
        -:10342:                         remake.c
        -:10343:  ************************************************************
        -:10344:  ============================================================
        -:10345:  ************************************************************
        -:10346:  ============================================================
        -:10347:  *************************************************************/
        -:10348:
        -:10349:/* Basic dependency engine for GNU Make.
        -:10350:Copyright (C) 1988,89,90,91,92,93,94,95,96,97 Free Software Foundation, Inc.
        -:10351:This file is part of GNU Make.
        -:10352:
        -:10353:GNU Make is free software; you can redistribute it and/or modify
        -:10354:it under the terms of the GNU General Public License as published by
        -:10355:the Free Software Foundation; either version 2, or (at your option)
        -:10356:any later version.
        -:10357:
        -:10358:GNU Make is distributed in the hope that it will be useful,
        -:10359:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:10360:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:10361:GNU General Public License for more details.
        -:10362:
        -:10363:You should have received a copy of the GNU General Public License
        -:10364:along with GNU Make; see the file COPYING.  If not, write to
        -:10365:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:10366:
        -:10367:#include "make.h"
        -:10368:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -:10369:#include "job.h"
        -:10370:/* #include "commands.h"  <- modification by J.Ruthruff, 7/27 */
        -:10371:/* #include "dep.h"  <- modification by J.Ruthruff, 7/27 */
        -:10372:#include <assert.h>
        -:10373:#undef stderr
        -:10374:#define stderr stdout
        -:10375:
        -:10376:#ifdef HAVE_FCNTL_H
        -:10377:#include <fcntl.h>
        -:10378:#undef stderr
        -:10379:#define stderr stdout
        -:10380:#else
        -:10381:#include <sys/file.h>
        -:10382:#undef stderr
        -:10383:#define stderr stdout
        -:10384:#endif
        -:10385:
        -:10386:#ifdef  __MSDOS__
        -:10387:#include "variable.h"
        -:10388:#undef stderr
        -:10389:#define stderr stdout
        -:10390:#endif
        -:10391:
        -:10392:#ifdef VMS
        -:10393:#include <starlet.h>
        -:10394:#undef stderr
        -:10395:#define stderr stdout
        -:10396:#endif
        -:10397:#ifdef WINDOWS32
        -:10398:#include <io.h>
        -:10399:#undef stderr
        -:10400:#define stderr stdout
        -:10401:#endif
        -:10402:
        -:10403:extern int try_implicit_rule PARAMS ((struct file *file, unsigned int depth));
        -:10404:
        -:10405:
        -:10406:/* Incremented when a command is started (under -n, when one would be).  */
        -:10407:unsigned int commands_started = 0;
        -:10408:
        -:10409:static int update_file PARAMS ((struct file *file, unsigned int depth));
        -:10410:static int update_file_1 PARAMS ((struct file *file, unsigned int depth));
        -:10411:static int check_dep PARAMS ((struct file *file, unsigned int depth, time_t this_mtime, int *must_make_ptr));
        -:10412:static int touch_file PARAMS ((struct file *file));
        -:10413:static void remake_file PARAMS ((struct file *file));
        -:10414:static time_t name_mtime PARAMS ((char *name));
        -:10415:static int library_search PARAMS ((char **lib, time_t *mtime_ptr));
        -:10416:
        -:10417:extern time_t f_mtime PARAMS ((struct file *file, int search));
        -:10418:
        -:10419:
        -:10420:/* Remake all the goals in the `struct dep' chain GOALS.  Return -1 if nothing
        -:10421:   was done, 0 if all goals were updated successfully, or 1 if a goal failed.
        -:10422:   If MAKEFILES is nonzero, these goals are makefiles, so -t, -q, and -n should
        -:10423:   be disabled for them unless they were also command-line targets, and we
        -:10424:   should only make one goal at a time and return as soon as one goal whose
        -:10425:   `changed' member is nonzero is successfully made.  */
        -:10426:
        -:10427:int
function update_goal_chain called 806 returned 36% blocks executed 73%
      806:10428:update_goal_chain (goals, makefiles)
        -:10429:     register struct dep *goals;
        -:10430:     int makefiles;
        -:10431:{
      806:10432:  int t = touch_flag, q = question_flag, n = just_print_flag;
      806:10433:  unsigned int j = job_slots;
      806:10434:  int status = -1;
        -:10435:
        -:10436:#define	MTIME(file) (makefiles ? file_mtime_no_search (file) \
        -:10437:		     : file_mtime (file))
        -:10438:
        -:10439:  /* Duplicate the chain so we can remove things from it.  */
        -:10440:
      806:10441:  goals = copy_dep_chain (goals);
call    0 returned 806
        -:10442:
        -:10443:  {
        -:10444:    /* Clear the `changed' flag of each goal in the chain.
        -:10445:       We will use the flag below to notice when any commands
        -:10446:       have actually been run for a target.  When no commands
        -:10447:       have been run, we give an "up to date" diagnostic.  */
        -:10448:
        -:10449:    struct dep *g;
     1617:10450:    for (g = goals; g != 0; g = g->next)
branch  0 taken 811
branch  1 taken 806 (fallthrough)
      811:10451:      g->changed = 0;
        -:10452:  }
        -:10453:
      806:10454:  if (makefiles)
branch  0 taken 790 (fallthrough)
branch  1 taken 16
        -:10455:    /* Only run one job at a time.  */
      790:10456:    job_slots = 1;
        -:10457:
        -:10458:  /* Update all the goals until they are all finished.  */
        -:10459:
     1093:10460:  while (goals != 0)
branch  0 taken 806
branch  1 taken 287 (fallthrough)
        -:10461:    {
        -:10462:      register struct dep *g, *lastgoal;
        -:10463:
        -:10464:      /* Start jobs that are waiting for the load to go down.  */
        -:10465:
      806:10466:      start_waiting_jobs ();
call    0 returned 806
        -:10467:
        -:10468:      /* Wait for a child to die.  */
        -:10469:
      806:10470:      reap_children (1, 0);
call    0 returned 806
        -:10471:
      806:10472:      lastgoal = 0;
      806:10473:      g = goals;
     1096:10474:      while (g != 0)
branch  0 taken 809
branch  1 taken 287 (fallthrough)
        -:10475:	{
        -:10476:	  /* Iterate over all double-colon entries for this file.  */
      809:10477:	  struct file *file = g->file;
      809:10478:	  int stop, any_not_updated = 0;
        -:10479:
     809*:10480:	  for (file = g->file->double_colon ? g->file->double_colon : g->file;
branch  0 taken 0 (fallthrough)
branch  1 taken 809
     1099:10481:	       file != NULL;
branch  0 taken 809
branch  1 taken 290 (fallthrough)
      290:10482:	       file = file->prev)
        -:10483:	    {
        -:10484:	      unsigned int ocommands_started;
        -:10485:	      int x;
     809*:10486:	      time_t mtime = MTIME (file);
branch  0 taken 793 (fallthrough)
branch  1 taken 16
branch  2 taken 793 (fallthrough)
branch  3 taken 0
call    4 never executed
branch  5 taken 16 (fallthrough)
branch  6 taken 0
call    7 never executed
     809*:10487:	      check_renamed (file);
branch  0 taken 0
branch  1 taken 809 (fallthrough)
      809:10488:	      if (makefiles)
branch  0 taken 793 (fallthrough)
branch  1 taken 16
        -:10489:		{
      793:10490:		  if (file->cmd_target)
branch  0 taken 0 (fallthrough)
branch  1 taken 793
        -:10491:		    {
    #####:10492:		      touch_flag = t;
    #####:10493:		      question_flag = q;
    #####:10494:		      just_print_flag = n;
        -:10495:		    }
        -:10496:		  else
      793:10497:		    touch_flag = question_flag = just_print_flag = 0;
        -:10498:		}
        -:10499:
        -:10500:	      /* Save the old value of `commands_started' so we can compare
        -:10501:		 later.  It will be incremented when any commands are
        -:10502:		 actually run.  */
      809:10503:	      ocommands_started = commands_started;
        -:10504:
      809:10505:	      x = update_file (file, makefiles ? 1 : 0);
call    0 returned 290
     290*:10506:	      check_renamed (file);
branch  0 taken 0
branch  1 taken 290 (fallthrough)
        -:10507:
        -:10508:	      /* Set the goal's `changed' flag if any commands were started
        -:10509:		 by calling update_file above.  We check this flag below to
        -:10510:		 decide when to give an "up to date" diagnostic.  */
      290:10511:	      g->changed += commands_started - ocommands_started;
        -:10512:
      290:10513:	      stop = 0;
      290:10514:	      if (x != 0 || file->updated)
branch  0 taken 34 (fallthrough)
branch  1 taken 256
branch  2 taken 34 (fallthrough)
branch  3 taken 0
        -:10515:		{
        -:10516:		  /* If STATUS was not already 1, set it to 1 if
        -:10517:		     updating failed, or to 0 if updating succeeded.
        -:10518:		     Leave STATUS as it is if no updating was done.  */
        -:10519:
      290:10520:		  if (status < 1)
branch  0 taken 290 (fallthrough)
branch  1 taken 0
        -:10521:		    {
      290:10522:		      if (file->update_status != 0)
branch  0 taken 256 (fallthrough)
branch  1 taken 34
        -:10523:			{
        -:10524:			  /* Updating failed, or -q triggered.
        -:10525:			     The STATUS value tells our caller which.  */
      256:10526:			  status = file->update_status;
        -:10527:			  /* If -q just triggered, stop immediately.
        -:10528:			     It doesn't matter how much more we run,
        -:10529:			     since we already know the answer to return.  */
     256*:10530:			  stop = (!keep_going_flag && !question_flag
branch  0 never executed
branch  1 never executed
     256*:10531:				  && !makefiles);
branch  0 taken 0 (fallthrough)
branch  1 taken 256
branch  2 never executed
branch  3 never executed
        -:10532:			}
      34*:10533:		      else if (MTIME (file) != mtime)
branch  0 taken 20 (fallthrough)
branch  1 taken 14
branch  2 taken 20 (fallthrough)
branch  3 taken 0
call    4 never executed
branch  5 taken 14 (fallthrough)
branch  6 taken 0
call    7 never executed
branch  8 taken 0 (fallthrough)
branch  9 taken 34
        -:10534:			{
        -:10535:			  /* Updating was done.  If this is a makefile and
        -:10536:			     just_print_flag or question_flag is set
        -:10537:			     (meaning -n or -q was given and this file was
        -:10538:			     specified as a command-line target), don't
        -:10539:			     change STATUS.  If STATUS is changed, we will
        -:10540:			     get re-exec'd, and fall into an infinite loop.  */
    #####:10541:			  if (!makefiles
branch  0 never executed
branch  1 never executed
    #####:10542:			      || (!just_print_flag && !question_flag))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10543:			    status = 0;
    #####:10544:			  if (makefiles && file->dontcare)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:10545:			    /* This is a default makefile.  Stop remaking.  */
    #####:10546:			    stop = 1;
        -:10547:			}
        -:10548:		    }
        -:10549:		}
        -:10550:
        -:10551:	      /* Keep track if any double-colon entry is not finished.
        -:10552:                 When they are all finished, the goal is finished.  */
      290:10553:	      any_not_updated |= !file->updated;
        -:10554:
      290:10555:	      if (stop)
branch  0 taken 0 (fallthrough)
branch  1 taken 290
    #####:10556:		break;
        -:10557:	    }
        -:10558:
        -:10559:	  /* Reset FILE since it is null at the end of the loop.  */
      290:10560:	  file = g->file;
        -:10561:
      290:10562:	  if (stop || !any_not_updated)
branch  0 taken 290 (fallthrough)
branch  1 taken 0
branch  2 taken 290 (fallthrough)
branch  3 taken 0
        -:10563:	    {
        -:10564:	      /* If we have found nothing whatever to do for the goal,
        -:10565:		 print a message saying nothing needs doing.  */
        -:10566:
      290:10567:	      if (!makefiles
branch  0 taken 14 (fallthrough)
branch  1 taken 276
        -:10568:		  /* If the update_status is zero, we updated successfully
        -:10569:		     or not at all.  G->changed will have been set above if
        -:10570:		     any commands were actually started for this goal.  */
       14:10571:		  && file->update_status == 0 && !g->changed
branch  0 taken 14 (fallthrough)
branch  1 taken 0
branch  2 taken 13 (fallthrough)
branch  3 taken 1
        -:10572:		  /* Never give a message under -s or -q.  */
       13:10573:		  && !silent_flag && !question_flag)
branch  0 taken 13 (fallthrough)
branch  1 taken 0
branch  2 taken 12 (fallthrough)
branch  3 taken 1
      12*:10574:		message (1, ((file->phony || file->cmds == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 12
branch  2 never executed
branch  3 never executed
call    4 returned 12
        -:10575:			     ? "Nothing to be done for `%s'."
        -:10576:			     : "`%s' is up to date."),
        -:10577:			 file->name);
        -:10578:
        -:10579:	      /* This goal is finished.  Remove it from the chain.  */
      290:10580:	      if (lastgoal == 0)
branch  0 taken 290 (fallthrough)
branch  1 taken 0
      290:10581:		goals = g->next;
        -:10582:	      else
    #####:10583:		lastgoal->next = g->next;
        -:10584:
        -:10585:	      /* Free the storage.  */
      290:10586:	      free ((char *) g);
        -:10587:
     290*:10588:	      g = lastgoal == 0 ? goals : lastgoal->next;
branch  0 taken 0 (fallthrough)
branch  1 taken 290
        -:10589:
      290:10590:	      if (stop)
branch  0 taken 0 (fallthrough)
branch  1 taken 290
    #####:10591:		break;
        -:10592:	    }
        -:10593:	  else
        -:10594:	    {
    #####:10595:	      lastgoal = g;
    #####:10596:	      g = g->next;
        -:10597:	    }
        -:10598:	}
        -:10599:    }
        -:10600:
      287:10601:  if (makefiles)
branch  0 taken 273 (fallthrough)
branch  1 taken 14
        -:10602:    {
      273:10603:      touch_flag = t;
      273:10604:      question_flag = q;
      273:10605:      just_print_flag = n;
      273:10606:      job_slots = j;
        -:10607:    }
      287:10608:  return status;
        -:10609:}
        -:10610:
        -:10611:/* If FILE is not up to date, execute the commands for it.
        -:10612:   Return 0 if successful, 1 if unsuccessful;
        -:10613:   but with some flag settings, just call `exit' if unsuccessful.
        -:10614:
        -:10615:   DEPTH is the depth in recursions of this function.
        -:10616:   We increment it during the consideration of our dependencies,
        -:10617:   then decrement it again after finding out whether this file
        -:10618:   is out of date.
        -:10619:
        -:10620:   If there are multiple double-colon entries for FILE,
        -:10621:   each is considered in turn.  */
        -:10622:
        -:10623:static int
function update_file called 1078 returned 52% blocks executed 67%
     1078:10624:update_file (file, depth)
        -:10625:     struct file *file;
        -:10626:     unsigned int depth;
        -:10627:{
     1078:10628:  register int status = 0;
        -:10629:  register struct file *f;
        -:10630:
    1635*:10631:  for (f = file->double_colon ? file->double_colon : file; f != 0; f = f->prev)
branch  0 taken 0 (fallthrough)
branch  1 taken 1078
branch  2 taken 1078
branch  3 taken 557 (fallthrough)
        -:10632:    {
     1078:10633:      status |= update_file_1 (f, depth);
call    0 returned 557
     557*:10634:      check_renamed (f);
branch  0 taken 0
branch  1 taken 557 (fallthrough)
        -:10635:
      557:10636:      if (status != 0 && !keep_going_flag)
branch  0 taken 256 (fallthrough)
branch  1 taken 301
branch  2 taken 0 (fallthrough)
branch  3 taken 256
    #####:10637:	return status;
        -:10638:
      557:10639:      switch (f->command_state)
branch  0 taken 557
branch  1 taken 0
branch  2 taken 0
        -:10640:	{
      557:10641:	case cs_finished:
        -:10642:	  /* The file is done being remade.  */
      557:10643:	  break;
        -:10644:
    #####:10645:	case cs_running:
        -:10646:	case cs_deps_running:
        -:10647:	  /* Don't run the other :: rules for this
        -:10648:	     file until this rule is finished.  */
    #####:10649:	  return 0;
        -:10650:
    #####:10651:	default:
    #####:10652:	  assert (f->command_state == cs_running);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:10653:	  break;
        -:10654:	}
        -:10655:    }
        -:10656:
      557:10657:  return status;
        -:10658:}
        -:10659:
        -:10660:/* Consider a single `struct file' and update it as appropriate.  */
        -:10661:
        -:10662:static int
function update_file_1 called 1078 returned 52% blocks executed 43%
     1078:10663:update_file_1 (file, depth)
        -:10664:     struct file *file;
        -:10665:     unsigned int depth;
        -:10666:{
        -:10667:  register time_t this_mtime;
        -:10668:  int noexist, must_make, deps_changed;
     1078:10669:  int dep_status = 0;
        -:10670:  register struct dep *d, *lastd;
     1078:10671:  int running = 0;
        -:10672:
     1078:10673:  DEBUGPR ("Considering target file `%s'.\n");
branch  0 taken 384 (fallthrough)
branch  1 taken 694
call    2 returned 384
call    3 returned 384
call    4 returned 384
        -:10674:
     1078:10675:  if (file->updated)
branch  0 taken 66 (fallthrough)
branch  1 taken 1012
        -:10676:    {
       66:10677:      if (file->update_status > 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 66
        -:10678:	{
    #####:10679:	  DEBUGPR ("Recently tried and failed to update file `%s'.\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:10680:	  return file->update_status;
        -:10681:	}
        -:10682:
      66*:10683:      DEBUGPR ("File `%s' was considered already.\n");
branch  0 taken 0 (fallthrough)
branch  1 taken 66
call    2 never executed
call    3 never executed
call    4 never executed
       66:10684:      return 0;
        -:10685:    }
        -:10686:
     1012:10687:  switch (file->command_state)
branch  0 taken 1012
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
        -:10688:    {
     1012:10689:    case cs_not_started:
        -:10690:    case cs_deps_running:
     1012:10691:      break;
    #####:10692:    case cs_running:
    #####:10693:      DEBUGPR ("Still updating file `%s'.\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:10694:      return 0;
    #####:10695:    case cs_finished:
    #####:10696:      DEBUGPR ("Finished updating file `%s'.\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:10697:      return file->update_status;
    #####:10698:    default:
    #####:10699:      abort ();
call    0 never executed
        -:10700:    }
        -:10701:
     1012:10702:  ++depth;
        -:10703:
        -:10704:  /* Notice recursive update of the same file.  */
     1012:10705:  file->updating = 1;
        -:10706:
        -:10707:  /* Looking at the file's modtime beforehand allows the possibility
        -:10708:     that its name may be changed by a VPATH search, and thus it may
        -:10709:     not need an implicit rule.  If this were not done, the file
        -:10710:     might get implicit commands that apply to its initial name, only
        -:10711:     to have that name replaced with another found by VPATH search.  */
        -:10712:
    1012*:10713:  this_mtime = file_mtime (file);
branch  0 taken 1012 (fallthrough)
branch  1 taken 0
call    2 never executed
    1012*:10714:  check_renamed (file);
branch  0 taken 0
branch  1 taken 1012 (fallthrough)
     1012:10715:  noexist = this_mtime == (time_t) -1;
     1012:10716:  if (noexist)
branch  0 taken 790 (fallthrough)
branch  1 taken 222
      790:10717:    DEBUGPR ("File `%s' does not exist.\n");
branch  0 taken 384 (fallthrough)
branch  1 taken 406
call    2 returned 384
call    3 returned 384
call    4 returned 384
        -:10718:
     1012:10719:  must_make = noexist;
        -:10720:
        -:10721:  /* If file was specified as a target with no commands,
        -:10722:     come up with some default commands.  */
        -:10723:
     1012:10724:  if (!file->phony && file->cmds == 0 && !file->tried_implicit)
branch  0 taken 996 (fallthrough)
branch  1 taken 16
branch  2 taken 948 (fallthrough)
branch  3 taken 48
branch  4 taken 948 (fallthrough)
branch  5 taken 0
        -:10725:    {
      948:10726:      if (try_implicit_rule (file, depth))
call    0 returned 948
branch  1 taken 60 (fallthrough)
branch  2 taken 888
      60*:10727:	DEBUGPR ("Found an implicit rule for `%s'.\n");
branch  0 taken 0 (fallthrough)
branch  1 taken 60
call    2 never executed
call    3 never executed
call    4 never executed
        -:10728:      else
      888:10729:	DEBUGPR ("No implicit rule found for `%s'.\n");
branch  0 taken 384 (fallthrough)
branch  1 taken 504
call    2 returned 384
call    3 returned 384
call    4 returned 384
      948:10730:      file->tried_implicit = 1;
        -:10731:    }
     1012:10732:  if (file->cmds == 0 && !file->is_target
branch  0 taken 904 (fallthrough)
branch  1 taken 108
branch  2 taken 885 (fallthrough)
branch  3 taken 19
      885:10733:      && default_file != 0 && default_file->cmds != 0)
branch  0 taken 885 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 885
        -:10734:    {
    #####:10735:      DEBUGPR ("Using default commands for `%s'.\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:10736:      file->cmds = default_file->cmds;
        -:10737:    }
        -:10738:
        -:10739:  /* Update all non-intermediate files we depend on, if necessary,
        -:10740:     and see whether any of them is more recent than this file.  */
        -:10741:
     1012:10742:  lastd = 0;
     1012:10743:  d = file->deps;
     1279:10744:  while (d != 0)
branch  0 taken 269
branch  1 taken 1010 (fallthrough)
        -:10745:    {
        -:10746:      time_t mtime;
        -:10747:
     269*:10748:      check_renamed (d->file);
branch  0 taken 0
branch  1 taken 269 (fallthrough)
        -:10749:
      269:10750:      mtime = file_mtime (d->file);
branch  0 taken 68 (fallthrough)
branch  1 taken 201
call    2 returned 201
     269*:10751:      check_renamed (d->file);
branch  0 taken 0
branch  1 taken 269 (fallthrough)
        -:10752:
     269*:10753:      if (d->file->updating)
branch  0 taken 0 (fallthrough)
branch  1 taken 269
        -:10754:	{
    #####:10755:	  error ("Circular %s <- %s dependency dropped.",
    #####:10756:		 file->name, d->file->name);
call    0 never executed
    #####:10757:	  if (lastd == 0)
branch  0 never executed
branch  1 never executed
        -:10758:	    {
    #####:10759:	      file->deps = d->next;
    #####:10760:	      free ((char *) d);
    #####:10761:	      d = file->deps;
        -:10762:	    }
        -:10763:	  else
        -:10764:	    {
    #####:10765:	      lastd->next = d->next;
    #####:10766:	      free ((char *) d);
    #####:10767:	      d = lastd->next;
        -:10768:	    }
    #####:10769:	  continue;
        -:10770:	}
        -:10771:
      269:10772:      d->file->parent = file;
      269:10773:      dep_status |= check_dep (d->file, depth, this_mtime, &must_make);
call    0 returned 267
     267*:10774:      check_renamed (d->file);
branch  0 taken 0
branch  1 taken 267 (fallthrough)
        -:10775:
        -:10776:      {
      267:10777:	register struct file *f = d->file;
      267:10778:	if (f->double_colon)
branch  0 taken 0 (fallthrough)
branch  1 taken 267
    #####:10779:	  f = f->double_colon;
        -:10780:	do
        -:10781:	  {
      534:10782:	    running |= (f->command_state == cs_running
     267*:10783:			|| f->command_state == cs_deps_running);
branch  0 taken 267 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 267
      267:10784:	    f = f->prev;
        -:10785:	  }
      267:10786:	while (f != 0);
branch  0 taken 0
branch  1 taken 267 (fallthrough)
        -:10787:      }
        -:10788:
     267*:10789:      if (dep_status != 0 && !keep_going_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 267
branch  2 never executed
branch  3 never executed
    #####:10790:	break;
        -:10791:
      267:10792:      if (!running)
branch  0 taken 267 (fallthrough)
branch  1 taken 0
     267*:10793:	d->changed = file_mtime (d->file) != mtime;
branch  0 taken 267 (fallthrough)
branch  1 taken 0
call    2 never executed
        -:10794:
      267:10795:      lastd = d;
      267:10796:      d = d->next;
        -:10797:    }
        -:10798:
        -:10799:  /* Now we know whether this target needs updating.
        -:10800:     If it does, update all the intermediate files we depend on.  */
        -:10801:
     1010:10802:  if (must_make)
branch  0 taken 791 (fallthrough)
branch  1 taken 219
        -:10803:    {
      820:10804:      for (d = file->deps; d != 0; d = d->next)
branch  0 taken 29
branch  1 taken 791 (fallthrough)
       29:10805:	if (d->file->intermediate)
branch  0 taken 0 (fallthrough)
branch  1 taken 29
        -:10806:	  {
    #####:10807:	    time_t mtime = file_mtime (d->file);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:10808:	    check_renamed (d->file);
branch  0 never executed
branch  1 never executed
    #####:10809:	    d->file->parent = file;
    #####:10810:	    dep_status |= update_file (d->file, depth);
call    0 never executed
    #####:10811:	    check_renamed (d->file);
branch  0 never executed
branch  1 never executed
        -:10812:
        -:10813:	    {
    #####:10814:	      register struct file *f = d->file;
    #####:10815:	      if (f->double_colon)
branch  0 never executed
branch  1 never executed
    #####:10816:		f = f->double_colon;
        -:10817:	      do
        -:10818:		{
    #####:10819:		  running |= (f->command_state == cs_running
    #####:10820:			      || f->command_state == cs_deps_running);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10821:		  f = f->prev;
        -:10822:		}
    #####:10823:	      while (f != 0);
branch  0 never executed
branch  1 never executed
        -:10824:	    }
        -:10825:
    #####:10826:	    if (dep_status != 0 && !keep_going_flag)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10827:	      break;
        -:10828:
    #####:10829:	    if (!running)
branch  0 never executed
branch  1 never executed
    #####:10830:	      d->changed = ((file->phony && file->cmds != 0)
branch  0 never executed
branch  1 never executed
    #####:10831:			    || file_mtime (d->file) != mtime);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:10832:	  }
        -:10833:    }
        -:10834:
     1010:10835:  file->updating = 0;
        -:10836:
     1010:10837:  DEBUGPR ("Finished dependencies of target file `%s'.\n");
branch  0 taken 384 (fallthrough)
branch  1 taken 626
call    2 returned 384
call    3 returned 384
call    4 returned 384
        -:10838:
     1010:10839:  if (running)
branch  0 taken 0 (fallthrough)
branch  1 taken 1010
        -:10840:    {
    #####:10841:      set_command_state (file, cs_deps_running);
call    0 never executed
    #####:10842:      --depth;
    #####:10843:      DEBUGPR ("The dependencies of `%s' are being made.\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:10844:      return 0;
        -:10845:    }
        -:10846:
        -:10847:  /* If any dependency failed, give up now.  */
        -:10848:
     1010:10849:  if (dep_status != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1010
        -:10850:    {
    #####:10851:      file->update_status = dep_status;
    #####:10852:      notice_finished_file (file);
call    0 never executed
        -:10853:
    #####:10854:      depth--;
        -:10855:
    #####:10856:      DEBUGPR ("Giving up on target file `%s'.\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:10857:
    #####:10858:      if (depth == 0 && keep_going_flag
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10859:	  && !just_print_flag && !question_flag)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10860:	error ("Target `%s' not remade because of errors.", file->name);
call    0 never executed
        -:10861:
    #####:10862:      return dep_status;
        -:10863:    }
        -:10864:
     1010:10865:  if (file->command_state == cs_deps_running)
branch  0 taken 0 (fallthrough)
branch  1 taken 1010
        -:10866:    /* The commands for some deps were running on the last iteration, but
        -:10867:       they have finished now.  Reset the command_state to not_started to
        -:10868:       simplify later bookkeeping.  It is important that we do this only
        -:10869:       when the prior state was cs_deps_running, because that prior state
        -:10870:       was definitely propagated to FILE's also_make's by set_command_state
        -:10871:       (called above), but in another state an also_make may have
        -:10872:       independently changed to finished state, and we would confuse that
        -:10873:       file's bookkeeping (updated, but not_started is bogus state).  */
    #####:10874:    set_command_state (file, cs_not_started);
call    0 never executed
        -:10875:
        -:10876:  /* Now record which dependencies are more
        -:10877:     recent than this file, so we can define $?.  */
        -:10878:
     1010:10879:  deps_changed = 0;
     1277:10880:  for (d = file->deps; d != 0; d = d->next)
branch  0 taken 267
branch  1 taken 1010 (fallthrough)
        -:10881:    {
     267*:10882:      time_t d_mtime = file_mtime (d->file);
branch  0 taken 267 (fallthrough)
branch  1 taken 0
call    2 never executed
     267*:10883:      check_renamed (d->file);
branch  0 taken 0
branch  1 taken 267 (fallthrough)
        -:10884:
        -:10885:#if 1	/* %%% In version 4, remove this code completely to
        -:10886:	   implement not remaking deps if their deps are newer
        -:10887:	   than their parents.  */
     267*:10888:      if (d_mtime == (time_t) -1 && !d->file->intermediate)
branch  0 taken 0 (fallthrough)
branch  1 taken 267
branch  2 never executed
branch  3 never executed
        -:10889:	/* We must remake if this dep does not
        -:10890:	   exist and is not intermediate.  */
    #####:10891:	must_make = 1;
        -:10892:#endif
        -:10893:
        -:10894:      /* Set DEPS_CHANGED if this dep actually changed.  */
      267:10895:      deps_changed |= d->changed;
        -:10896:
        -:10897:      /* Set D->changed if either this dep actually changed,
        -:10898:	 or its dependent, FILE, is older or does not exist.  */
      267:10899:      d->changed |= noexist || d_mtime > this_mtime;
branch  0 taken 246 (fallthrough)
branch  1 taken 21
branch  2 taken 3 (fallthrough)
branch  3 taken 243
        -:10900:
     267*:10901:      if (debug_flag && !noexist)
branch  0 taken 0 (fallthrough)
branch  1 taken 267
branch  2 never executed
branch  3 never executed
        -:10902:	{
    #####:10903:	  print_spaces (depth);
call    0 never executed
    #####:10904:	  if (d_mtime == (time_t) -1)
branch  0 never executed
branch  1 never executed
    #####:10905:	    printf ("Dependency `%s' does not exist.\n", dep_name (d));
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:10906:	  else
    #####:10907:	    printf ("Dependency `%s' is %s than dependent `%s'.\n",
call    0 never executed
    #####:10908:		    dep_name (d), d->changed ? "newer" : "older", file->name);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10909:	  fflush (stdout);
call    0 never executed
        -:10910:	}
        -:10911:    }
        -:10912:
        -:10913:  /* Here depth returns to the value it had when we were called.  */
     1010:10914:  depth--;
        -:10915:
    1010*:10916:  if (file->double_colon && file->deps == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1010
branch  2 never executed
branch  3 never executed
        -:10917:    {
    #####:10918:      must_make = 1;
    #####:10919:      DEBUGPR ("Target `%s' is double-colon and has no dependencies.\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:10920:    }
     1010:10921:  else if (!noexist && file->is_target && !deps_changed && file->cmds == 0)
branch  0 taken 222 (fallthrough)
branch  1 taken 788
branch  2 taken 95 (fallthrough)
branch  3 taken 127
branch  4 taken 94 (fallthrough)
branch  5 taken 1
branch  6 taken 3 (fallthrough)
branch  7 taken 91
        -:10922:    {
        3:10923:      must_make = 0;
       3*:10924:      DEBUGPR ("No commands for `%s' and no dependencies actually changed.\n");
branch  0 taken 0 (fallthrough)
branch  1 taken 3
call    2 never executed
call    3 never executed
call    4 never executed
        -:10925:    }
        -:10926:
     1010:10927:  if (!must_make)
branch  0 taken 219 (fallthrough)
branch  1 taken 791
        -:10928:    {
      219:10929:      if (debug_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 219
        -:10930:        {
    #####:10931:          print_spaces(depth);
call    0 never executed
    #####:10932:          printf("No need to remake target `%s'", file->name);
call    0 never executed
    #####:10933:          if (!streq(file->name, file->hname))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:10934:              printf("; using VPATH name `%s'", file->hname);
call    0 never executed
    #####:10935:          printf(".\n");
call    0 never executed
    #####:10936:          fflush(stdout);
call    0 never executed
        -:10937:        }
        -:10938:
      219:10939:      notice_finished_file (file);
call    0 returned 219
        -:10940:
        -:10941:      /* Since we don't need to remake the file, convert it to use the
        -:10942:         VPATH filename if we found one.  hfile will be either the
        -:10943:         local name if no VPATH or the VPATH name if one was found.  */
        -:10944:
      438:10945:      while (file)
branch  0 taken 219
branch  1 taken 219 (fallthrough)
        -:10946:        {
      219:10947:          file->name = file->hname;
      219:10948:          file = file->prev;
        -:10949:        }
        -:10950:
      219:10951:      return 0;
        -:10952:    }
        -:10953:
      791:10954:  DEBUGPR ("Must remake target `%s'.\n");
branch  0 taken 384 (fallthrough)
branch  1 taken 407
call    2 returned 384
call    3 returned 384
call    4 returned 384
        -:10955:
        -:10956:  /* It needs to be remade.  If it's VPATH and not reset via GPATH, toss the
        -:10957:     VPATH */
     791*:10958:  if (!streq(file->name, file->hname))
branch  0 taken 0 (fallthrough)
branch  1 taken 791
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:10959:    {
    #####:10960:      if (debug_flag)
branch  0 never executed
branch  1 never executed
        -:10961:        {
    #####:10962:          print_spaces (depth);
call    0 never executed
    #####:10963:          printf("  Ignoring VPATH name `%s'.\n", file->hname);
call    0 never executed
    #####:10964:          fflush(stdout);
call    0 never executed
        -:10965:        }
    #####:10966:      file->ignore_vpath = 1;
        -:10967:    }
        -:10968:
        -:10969:  /* Now, take appropriate actions to remake the file.  */
      791:10970:  remake_file (file);
call    0 returned 272
        -:10971:
      272:10972:  if (file->command_state != cs_finished)
branch  0 taken 0 (fallthrough)
branch  1 taken 272
        -:10973:    {
    #####:10974:      DEBUGPR ("Commands of `%s' are being run.\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:10975:      return 0;
        -:10976:    }
        -:10977:
      272:10978:  switch (file->update_status)
branch  0 taken 256
branch  1 taken 16
branch  2 taken 0
branch  3 taken 0
        -:10979:    {
      256:10980:    case 2:
      256:10981:      DEBUGPR ("Failed to remake target file `%s'.\n");
branch  0 taken 128 (fallthrough)
branch  1 taken 128
call    2 returned 128
call    3 returned 128
call    4 returned 128
      256:10982:      break;
       16:10983:    case 0:
      16*:10984:      DEBUGPR ("Successfully remade target file `%s'.\n");
branch  0 taken 0 (fallthrough)
branch  1 taken 16
call    2 never executed
call    3 never executed
call    4 never executed
       16:10985:      break;
    #####:10986:    case 1:
    #####:10987:      DEBUGPR ("Target file `%s' needs remade under -q.\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:10988:      break;
    #####:10989:    default:
    #####:10990:      assert (file->update_status >= 0 && file->update_status <= 2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:10991:      break;
        -:10992:    }
        -:10993:
      272:10994:  file->updated = 1;
      272:10995:  return file->update_status;
        -:10996:}
        -:10997:
        -:10998:/* Set FILE's `updated' flag and re-check its mtime and the mtime's of all
        -:10999:   files listed in its `also_make' member.  Under -t, this function also
        -:11000:   touches FILE.
        -:11001:
        -:11002:   On return, FILE->update_status will no longer be -1 if it was.  */
        -:11003:
        -:11004:void
function notice_finished_file called 494 returned 100% blocks executed 59%
      494:11005:notice_finished_file (file)
        -:11006:     register struct file *file;
        -:11007:{
        -:11008:  struct dep *d;
      494:11009:  int ran = file->command_state == cs_running;
        -:11010:
      494:11011:  file->command_state = cs_finished;
      494:11012:  file->updated = 1;
        -:11013:
      494:11014:  if (touch_flag
branch  0 taken 11 (fallthrough)
branch  1 taken 483
        -:11015:      /* The update status will be:
        -:11016:	 	-1	if this target was not remade;
        -:11017:		0	if 0 or more commands (+ or ${MAKE}) were run and won;
        -:11018:		1	if some commands were run and lost.
        -:11019:	 We touch the target if it has commands which either were not run
        -:11020:	 or won when they ran (i.e. status is 0).  */
       11:11021:      && file->update_status == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 10
        -:11022:    {
       1*:11023:      if (file->cmds != 0 && file->cmds->any_recurse)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
    #####:11024:	{
        -:11025:	  /* If all the command lines were recursive,
        -:11026:	     we don't want to do the touching.  */
        -:11027:	  unsigned int i;
    #####:11028:	  for (i = 0; i < file->cmds->ncommand_lines; ++i)
branch  0 never executed
branch  1 never executed
    #####:11029:	    if (!(file->cmds->lines_flags[i] & COMMANDS_RECURSE))
branch  0 never executed
branch  1 never executed
    #####:11030:	      goto have_nonrecursing;
        -:11031:	}
        -:11032:      else
        -:11033:	{
       1*:11034:	have_nonrecursing:
        1:11035:	  if (file->phony)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:11036:	    file->update_status = 0;
        -:11037:	  else
        -:11038:	    /* Should set file's modification date and do nothing else.  */
    #####:11039:	    file->update_status = touch_file (file);
call    0 never executed
        -:11040:	}
        -:11041:    }
        -:11042:
      494:11043:  if (ran && !file->phony)
branch  0 taken 3 (fallthrough)
branch  1 taken 491
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        -:11044:    {
        -:11045:      struct file *f;
        -:11046:
        3:11047:      if (just_print_flag || question_flag
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3:11048:	  || (file->is_target && file->cmds == 0))
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    #####:11049:	file->last_mtime = NEW_MTIME;
        -:11050:      else
        3:11051:	file->last_mtime = 0;
        -:11052:
        -:11053:      /* Propagate the change of modification time to all the double-colon
        -:11054:	 entries for this file.  */
       3*:11055:      for (f = file->double_colon; f != 0; f = f->next)
branch  0 taken 0
branch  1 taken 3 (fallthrough)
    #####:11056:	f->last_mtime = file->last_mtime;
        -:11057:    }
        -:11058:
      494:11059:  if (ran && file->update_status != -1)
branch  0 taken 3 (fallthrough)
branch  1 taken 491
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        -:11060:    /* We actually tried to update FILE, which has
        -:11061:       updated its also_make's as well (if it worked).
        -:11062:       If it didn't work, it wouldn't work again for them.
        -:11063:       So mark them as updated with the same status.  */
       3*:11064:    for (d = file->also_make; d != 0; d = d->next)
branch  0 taken 0
branch  1 taken 3 (fallthrough)
        -:11065:      {
    #####:11066:	d->file->command_state = cs_finished;
    #####:11067:	d->file->updated = 1;
    #####:11068:	d->file->update_status = file->update_status;
        -:11069:
    #####:11070:	if (ran && !d->file->phony)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:11071:	  /* Fetch the new modification time.
        -:11072:	     We do this instead of just invalidating the cached time
        -:11073:	     so that a vpath_search can happen.  Otherwise, it would
        -:11074:	     never be done because the target is already updated.  */
    #####:11075:	  (void) f_mtime (d->file, 0);
call    0 never executed
        -:11076:      }
      491:11077:  else if (file->update_status == -1)
branch  0 taken 219 (fallthrough)
branch  1 taken 272
        -:11078:    /* Nothing was done for FILE, but it needed nothing done.
        -:11079:       So mark it now as "succeeded".  */
      219:11080:    file->update_status = 0;
      494:11081:}
        -:11082:
        -:11083:/* Check whether another file (whose mtime is THIS_MTIME)
        -:11084:   needs updating on account of a dependency which is file FILE.
        -:11085:   If it does, store 1 in *MUST_MAKE_PTR.
        -:11086:   In the process, update any non-intermediate files
        -:11087:   that FILE depends on (including FILE itself).
        -:11088:   Return nonzero if any updating failed.  */
        -:11089:
        -:11090:static int
function check_dep called 269 returned 99% blocks executed 19%
      269:11091:check_dep (file, depth, this_mtime, must_make_ptr)
        -:11092:     struct file *file;
        -:11093:     unsigned int depth;
        -:11094:     time_t this_mtime;
        -:11095:     int *must_make_ptr;
        -:11096:{
        -:11097:  register struct dep *d;
      269:11098:  int dep_status = 0;
        -:11099:
      269:11100:  ++depth;
      269:11101:  file->updating = 1;
        -:11102:
      269:11103:  if (!file->intermediate)
branch  0 taken 269 (fallthrough)
branch  1 taken 0
        -:11104:    /* If this is a non-intermediate file, update it and record
        -:11105:       whether it is newer than THIS_MTIME.  */
        -:11106:    {
        -:11107:      time_t mtime;
      269:11108:      dep_status = update_file (file, depth);
call    0 returned 267
     267*:11109:      check_renamed (file);
branch  0 taken 0
branch  1 taken 267 (fallthrough)
      267:11110:      mtime = file_mtime (file);
branch  0 taken 266 (fallthrough)
branch  1 taken 1
call    2 returned 1
     267*:11111:      check_renamed (file);
branch  0 taken 0
branch  1 taken 267 (fallthrough)
      267:11112:      if (mtime == (time_t) -1 || mtime > this_mtime)
branch  0 taken 267 (fallthrough)
branch  1 taken 0
branch  2 taken 24 (fallthrough)
branch  3 taken 243
       24:11113:	*must_make_ptr = 1;
        -:11114:    }
        -:11115:  else
        -:11116:    {
        -:11117:      /* FILE is an intermediate file.  */
        -:11118:      time_t mtime;
        -:11119:
    #####:11120:      if (!file->phony && file->cmds == 0 && !file->tried_implicit
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:11121:	  && file->secondary)
branch  0 never executed
branch  1 never executed
        -:11122:	{
    #####:11123:	  if (try_implicit_rule (file, depth))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11124:	    DEBUGPR ("Found an implicit rule for `%s'.\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:11125:	  else
    #####:11126:	    DEBUGPR ("No implicit rule found for `%s'.\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:11127:	  file->tried_implicit = 1;
        -:11128:	}
    #####:11129:      if (file->cmds == 0 && !file->is_target && file->secondary
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:11130:	  && default_file != 0 && default_file->cmds != 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:11131:	{
    #####:11132:	  DEBUGPR ("Using default commands for `%s'.\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:11133:	  file->cmds = default_file->cmds;
        -:11134:	}
        -:11135:
        -:11136:      /* If the intermediate file actually exists
        -:11137:	 and is newer, then we should remake from it.  */
    #####:11138:      check_renamed (file);
branch  0 never executed
branch  1 never executed
    #####:11139:      mtime = file_mtime (file);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:11140:      check_renamed (file);
branch  0 never executed
branch  1 never executed
    #####:11141:      if (mtime != (time_t) -1 && mtime > this_mtime)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:11142:	*must_make_ptr = 1;
        -:11143:	  /* Otherwise, update all non-intermediate files we depend on,
        -:11144:	     if necessary, and see whether any of them is more
        -:11145:	     recent than the file on whose behalf we are checking.  */
        -:11146:      else
        -:11147:	{
        -:11148:	  register struct dep *lastd;
        -:11149:
    #####:11150:	  lastd = 0;
    #####:11151:	  d = file->deps;
    #####:11152:	  while (d != 0)
branch  0 never executed
branch  1 never executed
        -:11153:	    {
    #####:11154:	      if (d->file->updating)
branch  0 never executed
branch  1 never executed
        -:11155:		{
    #####:11156:		  error ("Circular %s <- %s dependency dropped.",
    #####:11157:			 file->name, d->file->name);
call    0 never executed
    #####:11158:		  if (lastd == 0)
branch  0 never executed
branch  1 never executed
        -:11159:		    {
    #####:11160:		      file->deps = d->next;
    #####:11161:		      free ((char *) d);
    #####:11162:		      d = file->deps;
        -:11163:		    }
        -:11164:		  else
        -:11165:		    {
    #####:11166:		      lastd->next = d->next;
    #####:11167:		      free ((char *) d);
    #####:11168:		      d = lastd->next;
        -:11169:		    }
    #####:11170:		  continue;
        -:11171:		}
        -:11172:
    #####:11173:	      d->file->parent = file;
    #####:11174:	      dep_status |= check_dep (d->file, depth, this_mtime, must_make_ptr);
call    0 never executed
    #####:11175:	      check_renamed (d->file);
branch  0 never executed
branch  1 never executed
    #####:11176:	      if (dep_status != 0 && !keep_going_flag)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:11177:		break;
        -:11178:
    #####:11179:	      if (d->file->command_state == cs_running
branch  0 never executed
branch  1 never executed
    #####:11180:		  || d->file->command_state == cs_deps_running)
branch  0 never executed
branch  1 never executed
        -:11181:		/* Record that some of FILE's dependencies are still being made.
        -:11182:		   This tells the upper levels to wait on processing it until
        -:11183:		   the commands are finished.  */
    #####:11184:		set_command_state (file, cs_deps_running);
call    0 never executed
        -:11185:
    #####:11186:	      lastd = d;
    #####:11187:	      d = d->next;
        -:11188:	    }
        -:11189:	}
        -:11190:    }
        -:11191:
      267:11192:  file->updating = 0;
      267:11193:  return dep_status;
        -:11194:}
        -:11195:
        -:11196:/* Touch FILE.  Return zero if successful, one if not.  */
        -:11197:
        -:11198:#define TOUCH_ERROR(call) return (perror_with_name (call, file->name), 1)
        -:11199:
        -:11200:static int
function touch_file called 0 returned 0% blocks executed 0%
    #####:11201:touch_file (file)
        -:11202:     register struct file *file;
        -:11203:{
    #####:11204:  if (!silent_flag)
branch  0 never executed
branch  1 never executed
    #####:11205:    message (0, "touch %s", file->name);
call    0 never executed
        -:11206:
        -:11207:#ifndef	NO_ARCHIVES
    #####:11208:  if (ar_name (file->name))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11209:    return ar_touch (file->name);
call    0 never executed
        -:11210:  else
        -:11211:#endif
        -:11212:    {
    #####:11213:      int fd = open (file->name, O_RDWR | O_CREAT, 0666);
call    0 never executed
        -:11214:
    #####:11215:      if (fd < 0)
branch  0 never executed
branch  1 never executed
    #####:11216:	TOUCH_ERROR ("touch: open: ");
call    0 never executed
        -:11217:      else
        -:11218:	{
        -:11219:	  struct stat statbuf;
        -:11220:	  char buf;
        -:11221:	  int status;
        -:11222:
        -:11223:#ifdef EINTR
        -:11224:	  do
        -:11225:#endif
    #####:11226:	    status = fstat (fd, &statbuf);
call    0 never executed
        -:11227:#ifdef EINTR
    #####:11228:	  while (status < 0 && errno == EINTR);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:11229:#endif
    #####:11230:	  if (status < 0)
branch  0 never executed
branch  1 never executed
    #####:11231:	    TOUCH_ERROR ("touch: fstat: ");
call    0 never executed
        -:11232:	  /* Rewrite character 0 same as it already is.  */
    #####:11233:	  if (read (fd, &buf, 1) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11234:	    TOUCH_ERROR ("touch: read: ");
call    0 never executed
    #####:11235:	  if (lseek (fd, 0L, 0) < 0L)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11236:	    TOUCH_ERROR ("touch: lseek: ");
call    0 never executed
    #####:11237:	  if (write (fd, &buf, 1) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11238:	    TOUCH_ERROR ("touch: write: ");
call    0 never executed
        -:11239:	  /* If file length was 0, we just
        -:11240:	     changed it, so change it back.  */
    #####:11241:	  if (statbuf.st_size == 0)
branch  0 never executed
branch  1 never executed
        -:11242:	    {
    #####:11243:	      (void) close (fd);
call    0 never executed
    #####:11244:	      fd = open (file->name, O_RDWR | O_TRUNC, 0666);
call    0 never executed
    #####:11245:	      if (fd < 0)
branch  0 never executed
branch  1 never executed
    #####:11246:		TOUCH_ERROR ("touch: open: ");
call    0 never executed
        -:11247:	    }
    #####:11248:	  (void) close (fd);
call    0 never executed
        -:11249:	}
        -:11250:    }
        -:11251:
    #####:11252:  return 0;
        -:11253:}
        -:11254:
        -:11255:/* Having checked and updated the dependencies of FILE,
        -:11256:   do whatever is appropriate to remake FILE itself.
        -:11257:   Return the status from executing FILE's commands.  */
        -:11258:
        -:11259:static void
function remake_file called 791 returned 34% blocks executed 79%
      791:11260:remake_file (file)
        -:11261:     struct file *file;
        -:11262:{
      791:11263:  if (file->cmds == 0)
branch  0 taken 787 (fallthrough)
branch  1 taken 4
        -:11264:    {
      787:11265:      if (file->phony)
branch  0 taken 14 (fallthrough)
branch  1 taken 773
        -:11266:	/* Phony target.  Pretend it succeeded.  */
       14:11267:	file->update_status = 0;
      773:11268:      else if (file->is_target)
branch  0 taken 0 (fallthrough)
branch  1 taken 773
        -:11269:	/* This is a nonexistent target file we cannot make.
        -:11270:	   Pretend it was successfully remade.  */
    #####:11271:	file->update_status = 0;
        -:11272:      else
        -:11273:	{
        -:11274:	  /* This is a dependency file we cannot remake.  Fail.  */
        -:11275:	  static const char msg_noparent[]
        -:11276:	    = "%sNo rule to make target `%s'%s";
        -:11277:	  static const char msg_parent[]
        -:11278:	    = "%sNo rule to make target `%s', needed by `%s'%s";
      773:11279:	  if (keep_going_flag || file->dontcare)
branch  0 taken 517 (fallthrough)
branch  1 taken 256
branch  2 taken 0 (fallthrough)
branch  3 taken 517
        -:11280:	    {
      256:11281:	      if (!file->dontcare)
branch  0 taken 256 (fallthrough)
branch  1 taken 0
        -:11282:		{
      256:11283:		  if (file->parent == 0)
branch  0 taken 256 (fallthrough)
branch  1 taken 0
      256:11284:		    error (msg_noparent, "*** ", file->name, ".");
call    0 returned 256
        -:11285:		  else
    #####:11286:		    error (msg_parent, "*** ",
    #####:11287:			   file->name, file->parent->name, ".");
call    0 never executed
        -:11288:		}
      256:11289: 	      file->update_status = 2;
        -:11290:	    }
        -:11291:	  else
        -:11292:	    {
      517:11293:	      if (file->parent == 0)
branch  0 taken 517 (fallthrough)
branch  1 taken 0
      517:11294:		fatal (msg_noparent, "", file->name, "");
call    0 returned 0
        -:11295:	      else
    #####:11296:		fatal (msg_parent, "", file->name, file->parent->name, "");
call    0 never executed
        -:11297:	    }
        -:11298:	}
        -:11299:    }
        -:11300:  else
        -:11301:    {
        4:11302:      chop_commands (file->cmds);
call    0 returned 4
        -:11303:
       4*:11304:      if (!touch_flag || file->cmds->any_recurse)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
branch  2 never executed
branch  3 never executed
        -:11305:	{
        4:11306:	  execute_file_commands (file);
call    0 returned 2
        2:11307:	  return;
        -:11308:	}
        -:11309:      else
        -:11310:	/* This tells notice_finished_file it is ok to touch the file.  */
    #####:11311:	file->update_status = 0;
        -:11312:    }
        -:11313:
        -:11314:  /* This does the touching under -t.  */
      270:11315:  notice_finished_file (file);
call    0 returned 270
        -:11316:}
        -:11317:
        -:11318:/* Return the mtime of a file, given a `struct file'.
        -:11319:   Caches the time in the struct file to avoid excess stat calls.
        -:11320:
        -:11321:   If the file is not found, and SEARCH is nonzero, VPATH searching and
        -:11322:   replacement is done.  If that fails, a library (-lLIBNAME) is tried and
        -:11323:   the library's actual name (/lib/libLIBNAME.a, etc.) is substituted into
        -:11324:   FILE.  */
        -:11325:
        -:11326:time_t
function f_mtime called 997 returned 100% blocks executed 33%
      997:11327:f_mtime (file, search)
        -:11328:     register struct file *file;
        -:11329:     int search;
        -:11330:{
        -:11331:  time_t mtime;
        -:11332:
        -:11333:  /* File's mtime is not known; must get it from the system.  */
        -:11334:
        -:11335:#ifndef	NO_ARCHIVES
      997:11336:  if (ar_name (file->name))
call    0 returned 997
branch  1 taken 0 (fallthrough)
branch  2 taken 997
        -:11337:    {
        -:11338:      /* This file is an archive-member reference.  */
        -:11339:
        -:11340:      char *arname, *memname;
        -:11341:      struct file *arfile;
    #####:11342:      int arname_used = 0;
        -:11343:
        -:11344:      /* Find the archive's name.  */
    #####:11345:      ar_parse_name (file->name, &arname, &memname);
call    0 never executed
        -:11346:
        -:11347:      /* Find the modification time of the archive itself.
        -:11348:	 Also allow for its name to be changed via VPATH search.  */
    #####:11349:      arfile = lookup_file (arname);
call    0 never executed
    #####:11350:      if (arfile == 0)
branch  0 never executed
branch  1 never executed
        -:11351:	{
    #####:11352:	  arfile = enter_file (arname);
call    0 never executed
    #####:11353:	  arname_used = 1;
        -:11354:	}
    #####:11355:      mtime = f_mtime (arfile, search);
call    0 never executed
    #####:11356:      check_renamed (arfile);
branch  0 never executed
branch  1 never executed
    #####:11357:      if (search && strcmp (arfile->name, arname))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:11358:	{
        -:11359:	  /* The archive's name has changed.
        -:11360:	     Change the archive-member reference accordingly.  */
        -:11361:
        -:11362:	  unsigned int arlen, memlen;
        -:11363:
    #####:11364:	  if (!arname_used)
branch  0 never executed
branch  1 never executed
        -:11365:	    {
    #####:11366:	      free (arname);
    #####:11367:	      arname_used = 1;
        -:11368:	    }
        -:11369:
    #####:11370:	  arname = arfile->name;
    #####:11371:	  arlen = strlen (arname);
    #####:11372:	  memlen = strlen (memname);
        -:11373:
    #####:11374:	  free (file->name);
        -:11375:
    #####:11376:	  file->name = (char *) xmalloc (arlen + 1 + memlen + 2);
call    0 never executed
    #####:11377:	  bcopy (arname, file->name, arlen);
    #####:11378:	  file->name[arlen] = '(';
    #####:11379:	  bcopy (memname, file->name + arlen + 1, memlen);
    #####:11380:	  file->name[arlen + 1 + memlen] = ')';
    #####:11381:	  file->name[arlen + 1 + memlen + 1] = '\0';
        -:11382:	}
        -:11383:
    #####:11384:      if (!arname_used)
branch  0 never executed
branch  1 never executed
    #####:11385:	free (arname);
    #####:11386:      free (memname);
        -:11387:
    #####:11388:      if (mtime == (time_t) -1)
branch  0 never executed
branch  1 never executed
        -:11389:	/* The archive doesn't exist, so it's members don't exist either.  */
    #####:11390:	return (time_t) -1;
        -:11391:
    #####:11392:      mtime = ar_member_date (file->name);
call    0 never executed
        -:11393:    }
        -:11394:  else
        -:11395:#endif
        -:11396:    {
      997:11397:      mtime = name_mtime (file->name);
call    0 returned 997
        -:11398:
      997:11399:      if (mtime == (time_t) -1 && search && !file->ignore_vpath)
branch  0 taken 774 (fallthrough)
branch  1 taken 223
branch  2 taken 1 (fallthrough)
branch  3 taken 773
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        -:11400:	{
        -:11401:	  /* If name_mtime failed, search VPATH.  */
        1:11402:	  char *name = file->name;
        1:11403:	  if (vpath_search (&name, &mtime)
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        -:11404:	      /* Last resort, is it a library (-lxxx)?  */
       1*:11405:	      || (name[0] == '-' && name[1] == 'l'
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
    #####:11406:		  && library_search (&name, &mtime)))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11407:	    {
    #####:11408:	      if (mtime != 0)
branch  0 never executed
branch  1 never executed
        -:11409:		/* vpath_search and library_search store zero in MTIME
        -:11410:		   if they didn't need to do a stat call for their work.  */
    #####:11411:		file->last_mtime = mtime;
        -:11412:
        -:11413:              /* If we found it in VPATH, see if it's in GPATH too; if so,
        -:11414:                 change the name right now; if not, defer until after the
        -:11415:                 dependencies are updated. */
    #####:11416:              if (gpath_search (name, strlen(name) - strlen(file->name) - 1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11417:                {
    #####:11418:                  rename_file (file, name);
call    0 never executed
    #####:11419:                  check_renamed (file);
branch  0 never executed
branch  1 never executed
    #####:11420:                  return file_mtime (file);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:11421:                }
        -:11422:
    #####:11423:	      rehash_file (file, name);
call    0 never executed
    #####:11424:	      check_renamed (file);
branch  0 never executed
branch  1 never executed
    #####:11425:	      mtime = name_mtime (name);
call    0 never executed
        -:11426:	    }
        -:11427:	}
        -:11428:    }
        -:11429:
        -:11430:  {
        -:11431:    /* Files can have bogus timestamps that nothing newly made will be
        -:11432:       "newer" than.  Updating their dependents could just result in loops.
        -:11433:       So notify the user of the anomaly with a warning.
        -:11434:
        -:11435:       We only need to do this once, for now. */
        -:11436:
        -:11437:    static time_t now = 0;
      997:11438:    if (!clock_skew_detected
branch  0 taken 997 (fallthrough)
branch  1 taken 0
      997:11439:        && mtime != (time_t)-1 && mtime > now
branch  0 taken 223 (fallthrough)
branch  1 taken 774
branch  2 taken 19 (fallthrough)
branch  3 taken 204
       19:11440:        && !file->updated)
branch  0 taken 19 (fallthrough)
branch  1 taken 0
        -:11441:      {
        -:11442:	/* This file's time appears to be in the future.
        -:11443:	   Update our concept of the present, and compare again.  */
        -:11444:
        -:11445:	extern time_t time ();
       19:11446:	time (&now);
call    0 returned 19
        -:11447:
        -:11448:#ifdef WINDOWS32
        -:11449:	/*
        -:11450:	 * FAT filesystems round time to nearest even second(!). Just
        -:11451:	 * allow for any file (NTFS or FAT) to perhaps suffer from this
        -:11452:	 * braindamage.
        -:11453:	 *
        -:11454:	 * Apparently, this doesn't happen with the MS-DOS/DJGPP port,
        -:11455:	 * although MS-DOS and MS-Windows 3.X/9X also use FAT filesystems.
        -:11456:	 */
        -:11457:	if (mtime > now && (((mtime % 2) == 0) && ((mtime-1) > now)))
        -:11458:#else
       19:11459:        if (mtime > now)
branch  0 taken 0 (fallthrough)
branch  1 taken 19
        -:11460:#endif
        -:11461:          {
    #####:11462:            error("*** Warning: File `%s' has modification time in the future",
call    0 never executed
        -:11463:                  file->name);
    #####:11464:            clock_skew_detected = 1;
        -:11465:          }
        -:11466:      }
        -:11467:  }
        -:11468:
        -:11469:  /* Store the mtime into all the entries for this file.  */
      997:11470:  if (file->double_colon)
branch  0 taken 0 (fallthrough)
branch  1 taken 997
    #####:11471:    file = file->double_colon;
        -:11472:  do
        -:11473:    {
      997:11474:      file->last_mtime = mtime;
      997:11475:      file = file->prev;
      997:11476:    } while (file != 0);
branch  0 taken 0
branch  1 taken 997 (fallthrough)
        -:11477:
      997:11478:  return mtime;
        -:11479:}
        -:11480:
        -:11481:
        -:11482:/* Return the mtime of the file or archive-member reference NAME.  */
        -:11483:
        -:11484:static time_t
function name_mtime called 997 returned 100% blocks executed 100%
      997:11485:name_mtime (name)
        -:11486:     register char *name;
        -:11487:{
        -:11488:  struct stat st;
        -:11489:
      997:11490:  if (stat (name, &st) < 0)
call    0 returned 997
branch  1 taken 774 (fallthrough)
branch  2 taken 223
      774:11491:    return (time_t) -1;
        -:11492:
      223:11493:  return (time_t) st.st_mtime;
        -:11494:}
        -:11495:
        -:11496:
        -:11497:/* Search for a library file specified as -lLIBNAME, searching for a
        -:11498:   suitable library file in the system library directories and the VPATH
        -:11499:   directories.  */
        -:11500:
        -:11501:static int
function library_search called 0 returned 0% blocks executed 0%
    #####:11502:library_search (lib, mtime_ptr)
        -:11503:     char **lib;
        -:11504:     time_t *mtime_ptr;
        -:11505:{
        -:11506:  static char *dirs[] =
        -:11507:    {
        -:11508:#ifndef _AMIGA
        -:11509:      "/lib",
        -:11510:      "/usr/lib",
        -:11511:#endif
        -:11512:#if defined(WINDOWS32) && !defined(LIBDIR)
        -:11513:/*
        -:11514: * This is completely up to the user at product install time. Just define
        -:11515: * a placeholder.
        -:11516: */
        -:11517:#define LIBDIR "."
        -:11518:#endif
        -:11519:      LIBDIR,			/* Defined by configuration.  */
        -:11520:      0
        -:11521:    };
        -:11522:
    #####:11523:  char *libname = &(*lib)[2];	/* Name without the `-l'.  */
        -:11524:  time_t mtime;
        -:11525:
        -:11526:  /* Buffer to construct possible names in.  */
    #####:11527:  char *buf = xmalloc (sizeof (LIBDIR) + 8 + strlen (libname) + 4 + 2 + 1);
call    0 never executed
        -:11528:  char *file, **dp;
        -:11529:
        -:11530:  /* Look first for `libNAME.a' in the current directory.  */
        -:11531:
        -:11532:#ifndef _AMIGA
    #####:11533:  sprintf (buf, "lib%s.a", libname);
        -:11534:#else
        -:11535:  sprintf (buf, "%s.lib", libname);
        -:11536:#endif
    #####:11537:  mtime = name_mtime (buf);
call    0 never executed
    #####:11538:  if (mtime != (time_t) -1)
branch  0 never executed
branch  1 never executed
        -:11539:    {
    #####:11540:      *lib = buf;
    #####:11541:      if (mtime_ptr != 0)
branch  0 never executed
branch  1 never executed
    #####:11542:	*mtime_ptr = mtime;
    #####:11543:      return 1;
        -:11544:    }
        -:11545:
        -:11546:  /* Now try VPATH search on that.  */
        -:11547:
    #####:11548:  file = buf;
    #####:11549:  if (vpath_search (&file, mtime_ptr))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11550:    {
    #####:11551:      free (buf);
    #####:11552:      *lib = file;
    #####:11553:      return 1;
        -:11554:    }
        -:11555:
        -:11556:  /* Now try the standard set of directories.  */
        -:11557:
        -:11558:#ifdef  __MSDOS__
        -:11559:  {
        -:11560:    /* The default library directory is at ${DJDIR}/lib.  */
        -:11561:    struct variable *djdir = lookup_variable ("DJDIR", 5);
        -:11562:
        -:11563:    if (djdir)
        -:11564:      {
        -:11565:	size_t djdir_len = strlen (djdir->value);
        -:11566:
        -:11567:	if (djdir_len > sizeof(LIBDIR) + 8 + strlen(libname) + 4 + 2)
        -:11568:	  buf = (char *) xrealloc (djdir_len + 1);
        -:11569:	sprintf (buf, "%s/lib/lib%s.a", djdir->value, libname);
        -:11570:	mtime = name_mtime (buf);
        -:11571:	if (mtime != (time_t) -1)
        -:11572:	  {
        -:11573:	    *lib = buf;
        -:11574:	    if (mtime_ptr != 0)
        -:11575:	      *mtime_ptr = mtime;
        -:11576:	    return 1;
        -:11577:	  }
        -:11578:      }
        -:11579:  }
        -:11580:#endif
        -:11581:
    #####:11582:  for (dp = dirs; *dp != 0; ++dp)
branch  0 never executed
branch  1 never executed
        -:11583:    {
        -:11584:#ifndef _AMIGA
    #####:11585:      sprintf (buf, "%s/lib%s.a", *dp, libname);
        -:11586:#else
        -:11587:      sprintf (buf, "%s/%s.lib", *dp, libname);
        -:11588:#endif
    #####:11589:      mtime = name_mtime (buf);
call    0 never executed
    #####:11590:      if (mtime != (time_t) -1)
branch  0 never executed
branch  1 never executed
        -:11591:	{
    #####:11592:	  *lib = buf;
    #####:11593:	  if (mtime_ptr != 0)
branch  0 never executed
branch  1 never executed
    #####:11594:	    *mtime_ptr = mtime;
    #####:11595:	  return 1;
        -:11596:	}
        -:11597:    }
        -:11598:
    #####:11599:  free (buf);
    #####:11600:  return 0;
        -:11601:}
        -:11602:
        -:11603:
        -:11604:
        -:11605:/*************************************************************
        -:11606:  ============================================================
        -:11607:  ************************************************************
        -:11608:  ============================================================
        -:11609:  ************************************************************
        -:11610:                         rule.c
        -:11611:  ************************************************************
        -:11612:  ============================================================
        -:11613:  ************************************************************
        -:11614:  ============================================================
        -:11615:  *************************************************************/
        -:11616:  
        -:11617:/* Pattern and suffix rule internals for GNU Make.
        -:11618:Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993 Free Software Foundation, Inc.
        -:11619:This file is part of GNU Make.
        -:11620:
        -:11621:GNU Make is free software; you can redistribute it and/or modify
        -:11622:it under the terms of the GNU General Public License as published by
        -:11623:the Free Software Foundation; either version 2, or (at your option)
        -:11624:any later version.
        -:11625:
        -:11626:GNU Make is distributed in the hope that it will be useful,
        -:11627:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:11628:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:11629:GNU General Public License for more details.
        -:11630:
        -:11631:You should have received a copy of the GNU General Public License
        -:11632:along with GNU Make; see the file COPYING.  If not, write to
        -:11633:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:11634:
        -:11635:#include "make.h"
        -:11636:/* #include "dep.h"  <- modification by J.Ruthruff, 7/27 */
        -:11637:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -:11638:#include "job.h"
        -:11639:/* #include "commands.h"  <- modification by J.Ruthruff, 7/27 */
        -:11640:/* #include "variable.h"  <- modification by J.Ruthruff, 7/27 */
        -:11641:#include "rule.h"
        -:11642:#undef stderr
        -:11643:#define stderr stdout
        -:11644:
        -:11645:static void freerule PARAMS ((struct rule *rule, struct rule *lastrule));
        -:11646:
        -:11647:/* Chain of all pattern rules.  */
        -:11648:
        -:11649:struct rule *pattern_rules;
        -:11650:
        -:11651:/* Pointer to last rule in the chain, so we can add onto the end.  */
        -:11652:
        -:11653:struct rule *last_pattern_rule;
        -:11654:
        -:11655:/* Number of rules in the chain.  */
        -:11656:
        -:11657:unsigned int num_pattern_rules;
        -:11658:
        -:11659:/* Maximum number of target patterns of any pattern rule.  */
        -:11660:
        -:11661:unsigned int max_pattern_targets;
        -:11662:
        -:11663:/* Maximum number of dependencies of any pattern rule.  */
        -:11664:
        -:11665:unsigned int max_pattern_deps;
        -:11666:
        -:11667:/* Maximum length of the name of a dependencies of any pattern rule.  */
        -:11668:
        -:11669:unsigned int max_pattern_dep_length;
        -:11670:
        -:11671:/* Pointer to structure for the file .SUFFIXES
        -:11672:   whose dependencies are the suffixes to be searched.  */
        -:11673:
        -:11674:struct file *suffix_file;
        -:11675:
        -:11676:/* Maximum length of a suffix.  */
        -:11677:
        -:11678:unsigned int maxsuffix;
        -:11679:
        -:11680:/* Compute the maximum dependency length and maximum number of
        -:11681:   dependencies of all implicit rules.  Also sets the subdir
        -:11682:   flag for a rule when appropriate, possibly removing the rule
        -:11683:   completely when appropriate.  */
        -:11684:
        -:11685:void
function count_implicit_rule_limits called 790 returned 100% blocks executed 92%
      790:11686:count_implicit_rule_limits ()
        -:11687:{
        -:11688:  char *name;
        -:11689:  unsigned int namelen;
        -:11690:  register struct rule *rule, *lastrule;
        -:11691:
      790:11692:  num_pattern_rules = max_pattern_targets = max_pattern_deps = 0;
      790:11693:  max_pattern_dep_length = 0;
        -:11694:
      790:11695:  name = 0;
      790:11696:  namelen = 0;
      790:11697:  rule = pattern_rules;
      790:11698:  lastrule = 0;
    65488:11699:  while (rule != 0)
branch  0 taken 64698
branch  1 taken 790 (fallthrough)
        -:11700:    {
    64698:11701:      unsigned int ndeps = 0;
        -:11702:      register struct dep *dep;
    64698:11703:      struct rule *next = rule->next;
        -:11704:      unsigned int ntargets;
        -:11705:
    64698:11706:      ++num_pattern_rules;
        -:11707:      
    64698:11708:      ntargets = 0;
   129396:11709:      while (rule->targets[ntargets] != 0)
branch  0 taken 64698
branch  1 taken 64698 (fallthrough)
    64698:11710:	++ntargets;
        -:11711:
    64698:11712:      if (ntargets > max_pattern_targets)
branch  0 taken 789 (fallthrough)
branch  1 taken 63909
      789:11713:	max_pattern_targets = ntargets;
        -:11714:
   106515:11715:      for (dep = rule->deps; dep != 0; dep = dep->next)
branch  0 taken 41817
branch  1 taken 64698 (fallthrough)
        -:11716:	{
    41817:11717:	  unsigned int len = strlen (dep->name);
        -:11718:
        -:11719:#ifdef VMS
        -:11720:	  char *p = rindex (dep->name, ']');
        -:11721:#else
    41817:11722:	  char *p = rindex (dep->name, '/');
        -:11723:#endif
    41817:11724:	  char *p2 = p != 0 ? index (dep->name, '%') : 0;
branch  0 taken 1578 (fallthrough)
branch  1 taken 40239
    41817:11725:	  ndeps++;
        -:11726:
    41817:11727:	  if (len > max_pattern_dep_length)
branch  0 taken 3156 (fallthrough)
branch  1 taken 38661
     3156:11728:	    max_pattern_dep_length = len;
        -:11729:
    41817:11730:	  if (p != 0 && p2 > p)
branch  0 taken 1578 (fallthrough)
branch  1 taken 40239
branch  2 taken 1578 (fallthrough)
branch  3 taken 0
        -:11731:	    {
        -:11732:	      /* There is a slash before the % in the dep name.
        -:11733:		 Extract the directory name.  */
     1578:11734:	      if (p == dep->name)
branch  0 taken 0 (fallthrough)
branch  1 taken 1578
    #####:11735:		++p;
     1578:11736:	      if (p - dep->name > namelen)
branch  0 taken 1578 (fallthrough)
branch  1 taken 0
        -:11737:		{
     1578:11738:		  if (name != 0)
branch  0 taken 789 (fallthrough)
branch  1 taken 789
      789:11739:		    free (name);
     1578:11740:		  namelen = p - dep->name;
     1578:11741:		  name = (char *) xmalloc (namelen + 1);
call    0 returned 1578
        -:11742:		}
     1578:11743:	      bcopy (dep->name, name, p - dep->name);
     1578:11744:	      name[p - dep->name] = '\0';
        -:11745:
        -:11746:	      /* In the deps of an implicit rule the `changed' flag
        -:11747:		 actually indicates that the dependency is in a
        -:11748:		 nonexistent subdirectory.  */
        -:11749:
     1578:11750:	      dep->changed = !dir_file_exists_p (name, "");
call    0 returned 1578
        -:11751:#ifdef VMS
        -:11752:	      if (dep->changed && *name == ']')
        -:11753:#else
     1578:11754:	      if (dep->changed && *name == '/')
branch  0 taken 1578 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1578
        -:11755:#endif
        -:11756:		{
        -:11757:		  /* The name is absolute and the directory does not exist.
        -:11758:		     This rule can never possibly match, since this dependency
        -:11759:		     can never possibly exist.  So just remove the rule from
        -:11760:		     the list.  */
    #####:11761:		  freerule (rule, lastrule);
call    0 never executed
    #####:11762:		  --num_pattern_rules;
    #####:11763:		  goto end_main_loop;
        -:11764:		}
        -:11765:	    }
        -:11766:	  else
        -:11767:	    /* This dependency does not reside in a subdirectory.  */
    40239:11768:	    dep->changed = 0;
        -:11769:	}
        -:11770:
    64698:11771:      if (ndeps > max_pattern_deps)
branch  0 taken 1578 (fallthrough)
branch  1 taken 63120
     1578:11772:	max_pattern_deps = ndeps;
        -:11773:
    64698:11774:      lastrule = rule;
    64698:11775:    end_main_loop:
    64698:11776:      rule = next;
        -:11777:    }
        -:11778:  
      790:11779:  if (name != 0)
branch  0 taken 789 (fallthrough)
branch  1 taken 1
      789:11780:    free (name);
      790:11781:}
        -:11782:
        -:11783:/* Create a pattern rule from a suffix rule.
        -:11784:   TARGET is the target suffix; SOURCE is the source suffix.
        -:11785:   CMDS are the commands.
        -:11786:   If TARGET is nil, it means the target pattern should be `(%.o)'.
        -:11787:   If SOURCE is nil, it means there should be no deps.  */
        -:11788:
        -:11789:static void
function convert_suffix_rule called 58386 returned 100% blocks executed 85%
    58386:11790:convert_suffix_rule (target, source, cmds)
        -:11791:     char *target, *source;
        -:11792:     struct commands *cmds;
        -:11793:{
        -:11794:  char *targname, *targpercent, *depname;
        -:11795:  char **names, **percents;
        -:11796:  struct dep *deps;
        -:11797:  unsigned int len;
        -:11798:
    58386:11799:  if (target == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 58386
        -:11800:    /* Special case: TARGET being nil means we are defining a
        -:11801:       `.X.a' suffix rule; the target pattern is always `(%.o)'.  */
        -:11802:    {
        -:11803:#ifdef VMS
        -:11804:      targname = savestring ("(%.obj)", 7);
        -:11805:#else
    #####:11806:      targname = savestring ("(%.o)", 5);
call    0 never executed
        -:11807:#endif
    #####:11808:      targpercent = targname + 1;
        -:11809:    }
        -:11810:  else
        -:11811:    {
        -:11812:      /* Construct the target name.  */
    58386:11813:      len = strlen (target);
    58386:11814:      targname = xmalloc (1 + len + 1);
call    0 returned 58386
    58386:11815:      targname[0] = '%';
    58386:11816:      bcopy (target, targname + 1, len + 1);
    58386:11817:      targpercent = targname;
        -:11818:    }
        -:11819:
    58386:11820:  names = (char **) xmalloc (2 * sizeof (char *));
call    0 returned 58386
    58386:11821:  percents = (char **) alloca (2 * sizeof (char *));
    58386:11822:  names[0] = targname;
    58386:11823:  percents[0] = targpercent;
    58386:11824:  names[1] = percents[1] = 0;
        -:11825:
    58386:11826:  if (source == 0)
branch  0 taken 24459 (fallthrough)
branch  1 taken 33927
    24459:11827:    deps = 0;
        -:11828:  else
        -:11829:    {
        -:11830:      /* Construct the dependency name.  */
    33927:11831:      len = strlen (source);
    33927:11832:      depname = xmalloc (1 + len + 1);
call    0 returned 33927
    33927:11833:      depname[0] = '%';
    33927:11834:      bcopy (source, depname + 1, len + 1);
    33927:11835:      deps = (struct dep *) xmalloc (sizeof (struct dep));
call    0 returned 33927
    33927:11836:      deps->next = 0;
    33927:11837:      deps->name = depname;
        -:11838:    }
        -:11839:
    58386:11840:  create_pattern_rule (names, percents, 0, deps, cmds, 0);
call    0 returned 58386
    58386:11841:}
        -:11842:
        -:11843:/* Convert old-style suffix rules to pattern rules.
        -:11844:   All rules for the suffixes on the .SUFFIXES list
        -:11845:   are converted and added to the chain of pattern rules.  */
        -:11846:
        -:11847:void
function convert_to_pattern called 790 returned 100% blocks executed 75%
      790:11848:convert_to_pattern ()
        -:11849:{
        -:11850:  register struct dep *d, *d2;
        -:11851:  register struct file *f;
        -:11852:  register char *rulename;
        -:11853:  register unsigned int slen, s2len;
        -:11854:
        -:11855:  /* Compute maximum length of all the suffixes.  */
        -:11856:
      790:11857:  maxsuffix = 0;
    25249:11858:  for (d = suffix_file->deps; d != 0; d = d->next)
branch  0 taken 24459
branch  1 taken 790 (fallthrough)
        -:11859:    {
   24459*:11860:      register unsigned int namelen = strlen (dep_name (d));
branch  0 taken 24459 (fallthrough)
branch  1 taken 0
    24459:11861:      if (namelen > maxsuffix)
branch  0 taken 2367 (fallthrough)
branch  1 taken 22092
     2367:11862:	maxsuffix = namelen;
        -:11863:    }
        -:11864:
      790:11865:  rulename = (char *) alloca ((maxsuffix * 2) + 1);
        -:11866:
    25249:11867:  for (d = suffix_file->deps; d != 0; d = d->next)
branch  0 taken 24459
branch  1 taken 790 (fallthrough)
        -:11868:    {
        -:11869:      /* Make a rule that is just the suffix, with no deps or commands.
        -:11870:	 This rule exists solely to disqualify match-anything rules.  */
   24459*:11871:      convert_suffix_rule (dep_name (d), (char *) 0, (struct commands *) 0);
branch  0 taken 24459 (fallthrough)
branch  1 taken 0
call    2 returned 24459
        -:11872:
    24459:11873:      f = d->file;
    24459:11874:      if (f->cmds != 0)
branch  0 taken 9468 (fallthrough)
branch  1 taken 14991
        -:11875:	/* Record a pattern for this suffix's null-suffix rule.  */
    9468*:11876:	convert_suffix_rule ("", dep_name (d), f->cmds);
branch  0 taken 9468 (fallthrough)
branch  1 taken 0
call    2 returned 9468
        -:11877:
        -:11878:      /* Record a pattern for each of this suffix's two-suffix rules.  */
   24459*:11879:      slen = strlen (dep_name (d));
branch  0 taken 24459 (fallthrough)
branch  1 taken 0
   24459*:11880:      bcopy (dep_name (d), rulename, slen);
branch  0 taken 24459 (fallthrough)
branch  1 taken 0
   782688:11881:      for (d2 = suffix_file->deps; d2 != 0; d2 = d2->next)
branch  0 taken 758229
branch  1 taken 24459 (fallthrough)
        -:11882:	{
  758229*:11883:	  s2len = strlen (dep_name (d2));
branch  0 taken 758229 (fallthrough)
branch  1 taken 0
        -:11884:
  758229*:11885:	  if (slen == s2len && streq (dep_name (d), dep_name (d2)))
branch  0 taken 229599 (fallthrough)
branch  1 taken 528630
branch  2 taken 229599 (fallthrough)
branch  3 taken 0
branch  4 taken 229599 (fallthrough)
branch  5 taken 0
branch  6 taken 205140 (fallthrough)
branch  7 taken 24459
branch  8 taken 205140 (fallthrough)
branch  9 taken 0
branch 10 taken 205140 (fallthrough)
branch 11 taken 0
branch 12 taken 205140 (fallthrough)
branch 13 taken 0
branch 14 taken 205140 (fallthrough)
branch 15 taken 0
branch 16 taken 205140 (fallthrough)
branch 17 taken 0
branch 18 taken 205140 (fallthrough)
branch 19 taken 0
branch 20 taken 205140 (fallthrough)
branch 21 taken 0
branch 22 taken 0 (fallthrough)
branch 23 taken 205140
    24459:11886:	    continue;
        -:11887:
  733770*:11888:	  bcopy (dep_name (d2), rulename + slen, s2len + 1);
branch  0 taken 733770 (fallthrough)
branch  1 taken 0
   733770:11889:	  f = lookup_file (rulename);
call    0 returned 733770
   733770:11890:	  if (f == 0 || f->cmds == 0)
branch  0 taken 24459 (fallthrough)
branch  1 taken 709311
branch  2 taken 0 (fallthrough)
branch  3 taken 24459
   709311:11891:	    continue;
        -:11892:
    24459:11893:	  if (s2len == 2 && rulename[slen] == '.' && rulename[slen + 1] == 'a')
branch  0 taken 14202 (fallthrough)
branch  1 taken 10257
branch  2 taken 14202 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 14202
        -:11894:	    /* A suffix rule `.X.a:' generates the pattern rule `(%.o): %.X'.
        -:11895:	       It also generates a normal `%.a: %.X' rule below.  */
    #####:11896:	    convert_suffix_rule ((char *) 0, /* Indicates `(%.o)'.  */
call    0 never executed
    #####:11897:				 dep_name (d),
branch  0 never executed
branch  1 never executed
        -:11898:				 f->cmds);
        -:11899:
        -:11900:	  /* The suffix rule `.X.Y:' is converted
        -:11901:	     to the pattern rule `%.Y: %.X'.  */
   24459*:11902:	  convert_suffix_rule (dep_name (d2), dep_name (d), f->cmds);
branch  0 taken 24459 (fallthrough)
branch  1 taken 0
branch  2 taken 24459 (fallthrough)
branch  3 taken 0
call    4 returned 24459
        -:11903:	}
        -:11904:    }
      790:11905:}
        -:11906:
        -:11907:
        -:11908:/* Install the pattern rule RULE (whose fields have been filled in)
        -:11909:   at the end of the list (so that any rules previously defined
        -:11910:   will take precedence).  If this rule duplicates a previous one
        -:11911:   (identical target and dependencies), the old one is replaced
        -:11912:   if OVERRIDE is nonzero, otherwise this new one is thrown out.
        -:11913:   When an old rule is replaced, the new one is put at the end of the
        -:11914:   list.  Return nonzero if RULE is used; zero if not.  */
        -:11915:
        -:11916:int
function new_pattern_rule called 64698 returned 100% blocks executed 74%
    64698:11917:new_pattern_rule (rule, override)
        -:11918:     register struct rule *rule;
        -:11919:     int override;
        -:11920:{
        -:11921:  register struct rule *r, *lastrule;
        -:11922:  register unsigned int i, j;
        -:11923:
    64698:11924:  rule->in_use = 0;
    64698:11925:  rule->terminal = 0;
        -:11926:
    64698:11927:  rule->next = 0;
        -:11928:
        -:11929:  /* Search for an identical rule.  */
    64698:11930:  lastrule = 0;
  2684967:11931:  for (r = pattern_rules; r != 0; lastrule = r, r = r->next)
branch  0 taken 2620269
branch  1 taken 64698 (fallthrough)
  5240538:11932:    for (i = 0; rule->targets[i] != 0; ++i)
branch  0 taken 2620269
branch  1 taken 2620269 (fallthrough)
        -:11933:      {
  2794638:11934:	for (j = 0; r->targets[j] != 0; ++j)
branch  0 taken 2620269
branch  1 taken 174369 (fallthrough)
  2620269:11935:	  if (!streq (rule->targets[i], r->targets[j]))
branch  0 taken 2620269 (fallthrough)
branch  1 taken 0
branch  2 taken 2556360 (fallthrough)
branch  3 taken 63909
branch  4 taken 2556360 (fallthrough)
branch  5 taken 0
branch  6 taken 174369 (fallthrough)
branch  7 taken 2381991
        -:11936:	    break;
  2620269:11937:	if (r->targets[j] == 0)
branch  0 taken 174369 (fallthrough)
branch  1 taken 2445900
        -:11938:	  /* All the targets matched.  */
        -:11939:	  {
        -:11940:	    register struct dep *d, *d2;
   174369:11941:	    for (d = rule->deps, d2 = r->deps;
   175947:11942:		 d != 0 && d2 != 0; d = d->next, d2 = d2->next)
branch  0 taken 175947 (fallthrough)
branch  1 taken 0
branch  2 taken 147543
branch  3 taken 28404 (fallthrough)
  147543*:11943:	      if (!streq (dep_name (d), dep_name (d2)))
branch  0 taken 0 (fallthrough)
branch  1 taken 147543
branch  2 taken 0 (fallthrough)
branch  3 taken 147543
branch  4 taken 147543 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 147543
branch  8 taken 0 (fallthrough)
branch  9 taken 147543
branch 10 taken 114405 (fallthrough)
branch 11 taken 33138
branch 12 taken 0 (fallthrough)
branch 13 taken 114405
branch 14 taken 114405 (fallthrough)
branch 15 taken 0
branch 16 taken 0 (fallthrough)
branch 17 taken 114405
branch 18 taken 0 (fallthrough)
branch 19 taken 114405
branch 20 taken 1578 (fallthrough)
branch 21 taken 112827
        -:11944:		break;
  174369*:11945:	    if (d == 0 && d2 == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 174369
branch  2 never executed
branch  3 never executed
        -:11946:	      /* All the dependencies matched.  */
    #####:11947:	      if (override)
branch  0 never executed
branch  1 never executed
        -:11948:		{
        -:11949:		  /* Remove the old rule.  */
    #####:11950:		  freerule (r, lastrule);
call    0 never executed
        -:11951:		  /* Install the new one.  */
    #####:11952:		  if (pattern_rules == 0)
branch  0 never executed
branch  1 never executed
    #####:11953:		    pattern_rules = rule;
        -:11954:		  else
    #####:11955:		    last_pattern_rule->next = rule;
    #####:11956:		  last_pattern_rule = rule;
        -:11957:		  
        -:11958:		  /* We got one.  Stop looking.  */
    #####:11959:		  goto matched;
        -:11960:		}
        -:11961:	      else
        -:11962:		{
        -:11963:		  /* The old rule stays intact.  Destroy the new one.  */
    #####:11964:		  freerule (rule, (struct rule *) 0);
call    0 never executed
    #####:11965:		  return 0;
        -:11966:		}
        -:11967:	  }
        -:11968:      }
        -:11969:
    64698:11970: matched:;
        -:11971:
    64698:11972:  if (r == 0)
branch  0 taken 64698 (fallthrough)
branch  1 taken 0
        -:11973:    {
        -:11974:      /* There was no rule to replace.  */
    64698:11975:      if (pattern_rules == 0)
branch  0 taken 789 (fallthrough)
branch  1 taken 63909
      789:11976:	pattern_rules = rule;
        -:11977:      else
    63909:11978:	last_pattern_rule->next = rule;
    64698:11979:      last_pattern_rule = rule;
        -:11980:    }
        -:11981:
    64698:11982:  return 1;
        -:11983:}
        -:11984:
        -:11985:
        -:11986:/* Install an implicit pattern rule based on the three text strings
        -:11987:   in the structure P points to.  These strings come from one of
        -:11988:   the arrays of default implicit pattern rules.
        -:11989:   TERMINAL specifies what the `terminal' field of the rule should be.  */
        -:11990:
        -:11991:void
function install_pattern_rule called 6312 returned 100% blocks executed 94%
     6312:11992:install_pattern_rule (p, terminal)
        -:11993:     struct pspec *p;
        -:11994:     int terminal;
        -:11995:{
        -:11996:  register struct rule *r;
        -:11997:  char *ptr;
        -:11998:
     6312:11999:  r = (struct rule *) xmalloc (sizeof (struct rule));
call    0 returned 6312
        -:12000:
     6312:12001:  r->targets = (char **) xmalloc (2 * sizeof (char *));
call    0 returned 6312
     6312:12002:  r->suffixes = (char **) xmalloc (2 * sizeof (char *));
call    0 returned 6312
     6312:12003:  r->lens = (unsigned int *) xmalloc (2 * sizeof (unsigned int));
call    0 returned 6312
        -:12004:
     6312:12005:  r->targets[1] = 0;
     6312:12006:  r->suffixes[1] = 0;
     6312:12007:  r->lens[1] = 0;
        -:12008:
     6312:12009:  r->lens[0] = strlen (p->target);
        -:12010:  /* These will all be string literals, but we malloc space for
        -:12011:     them anyway because somebody might want to free them later on.  */
     6312:12012:  r->targets[0] = savestring (p->target, r->lens[0]);
call    0 returned 6312
     6312:12013:  r->suffixes[0] = find_percent (r->targets[0]);
call    0 returned 6312
     6312:12014:  if (r->suffixes[0] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 6312
        -:12015:    /* Programmer-out-to-lunch error.  */
    #####:12016:    abort ();
call    0 never executed
        -:12017:  else
     6312:12018:    ++r->suffixes[0];
        -:12019:
     6312:12020:  ptr = p->dep;
     6312:12021:  r->deps = (struct dep *) multi_glob (parse_file_seq (&ptr, '\0',
call    0 returned 6312
call    1 returned 6312
        -:12022:                                                       sizeof (struct dep), 1),
        -:12023:				       sizeof (struct dep));
        -:12024:
     6312:12025:  if (new_pattern_rule (r, 0))
call    0 returned 6312
branch  1 taken 6312 (fallthrough)
branch  2 taken 0
        -:12026:    {
     6312:12027:      r->terminal = terminal;
     6312:12028:      r->cmds = (struct commands *) xmalloc (sizeof (struct commands));
call    0 returned 6312
     6312:12029:      r->cmds->filename = 0;
     6312:12030:      r->cmds->lineno = 0;
        -:12031:      /* These will all be string literals, but we malloc space for them
        -:12032:	 anyway because somebody might want to free them later.  */
     6312:12033:      r->cmds->commands = savestring (p->commands, strlen (p->commands));
call    0 returned 6312
     6312:12034:      r->cmds->command_lines = 0;
        -:12035:    }
     6312:12036:}
        -:12037:
        -:12038:
        -:12039:/* Free all the storage used in RULE and take it out of the
        -:12040:   pattern_rules chain.  LASTRULE is the rule whose next pointer
        -:12041:   points to RULE.  */
        -:12042:
        -:12043:static void
function freerule called 0 returned 0% blocks executed 0%
    #####:12044:freerule (rule, lastrule)
        -:12045:     register struct rule *rule, *lastrule;
        -:12046:{
    #####:12047:  struct rule *next = rule->next;
        -:12048:  register unsigned int i;
        -:12049:
    #####:12050:  for (i = 0; rule->targets[i] != 0; ++i)
branch  0 never executed
branch  1 never executed
    #####:12051:    free (rule->targets[i]);
        -:12052:
    #####:12053:  free ((char *) rule->targets);
    #####:12054:  free ((char *) rule->suffixes);
    #####:12055:  free ((char *) rule->lens);
        -:12056:
        -:12057:  /* We can't free the storage for the commands because there
        -:12058:     are ways that they could be in more than one place:
        -:12059:       * If the commands came from a suffix rule, they could also be in
        -:12060:       the `struct file's for other suffix rules or plain targets given
        -:12061:       on the same makefile line.
        -:12062:       * If two suffixes that together make a two-suffix rule were each
        -:12063:       given twice in the .SUFFIXES list, and in the proper order, two
        -:12064:       identical pattern rules would be created and the second one would
        -:12065:       be discarded here, but both would contain the same `struct commands'
        -:12066:       pointer from the `struct file' for the suffix rule.  */
        -:12067:
    #####:12068:  free ((char *) rule);
        -:12069:
    #####:12070:  if (pattern_rules == rule)
branch  0 never executed
branch  1 never executed
    #####:12071:    if (lastrule != 0)
branch  0 never executed
branch  1 never executed
    #####:12072:      abort ();
call    0 never executed
        -:12073:    else
    #####:12074:      pattern_rules = next;
    #####:12075:  else if (lastrule != 0)
branch  0 never executed
branch  1 never executed
    #####:12076:    lastrule->next = next;
    #####:12077:  if (last_pattern_rule == rule)
branch  0 never executed
branch  1 never executed
    #####:12078:    last_pattern_rule = lastrule;
    #####:12079:}
        -:12080:
        -:12081:/* Create a new pattern rule with the targets in the nil-terminated
        -:12082:   array TARGETS.  If TARGET_PERCENTS is not nil, it is an array of
        -:12083:   pointers into the elements of TARGETS, where the `%'s are.
        -:12084:   The new rule has dependencies DEPS and commands from COMMANDS.
        -:12085:   It is a terminal rule if TERMINAL is nonzero.  This rule overrides
        -:12086:   identical rules with different commands if OVERRIDE is nonzero.
        -:12087:
        -:12088:   The storage for TARGETS and its elements is used and must not be freed
        -:12089:   until the rule is destroyed.  The storage for TARGET_PERCENTS is not used;
        -:12090:   it may be freed.  */
        -:12091:
        -:12092:void
function create_pattern_rule called 58386 returned 100% blocks executed 62%
    58386:12093:create_pattern_rule (targets, target_percents,
        -:12094:		     terminal, deps, commands, override)
        -:12095:     char **targets, **target_percents;
        -:12096:     int terminal;
        -:12097:     struct dep *deps;
        -:12098:     struct commands *commands;
        -:12099:     int override;
        -:12100:{
    58386:12101:  register struct rule *r = (struct rule *) xmalloc (sizeof (struct rule));
call    0 returned 58386
        -:12102:  register unsigned int max_targets, i;
        -:12103:
    58386:12104:  r->cmds = commands;
    58386:12105:  r->deps = deps;
    58386:12106:  r->targets = targets;
        -:12107:
    58386:12108:  max_targets = 2;
    58386:12109:  r->lens = (unsigned int *) xmalloc (2 * sizeof (unsigned int));
call    0 returned 58386
    58386:12110:  r->suffixes = (char **) xmalloc (2 * sizeof (char *));
call    0 returned 58386
   116772:12111:  for (i = 0; targets[i] != 0; ++i)
branch  0 taken 58386
branch  1 taken 58386 (fallthrough)
        -:12112:    {
    58386:12113:      if (i == max_targets - 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 58386
        -:12114:	{
    #####:12115:	  max_targets += 5;
    #####:12116:	  r->lens = (unsigned int *)
    #####:12117:	    xrealloc ((char *) r->lens, max_targets * sizeof (unsigned int));
call    0 never executed
    #####:12118:	  r->suffixes = (char **)
    #####:12119:	    xrealloc ((char *) r->suffixes, max_targets * sizeof (char *));
call    0 never executed
        -:12120:	}
    58386:12121:      r->lens[i] = strlen (targets[i]);
    #####:12122:      r->suffixes[i] = (target_percents == 0 ? find_percent (targets[i])
call    0 never executed
   58386*:12123:			: target_percents[i]) + 1;
branch  0 taken 0 (fallthrough)
branch  1 taken 58386
    58386:12124:      if (r->suffixes[i] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 58386
    #####:12125:	abort ();
call    0 never executed
        -:12126:    }
        -:12127:
    58386:12128:  if (i < max_targets - 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 58386
        -:12129:    {
    #####:12130:      r->lens = (unsigned int *) xrealloc ((char *) r->lens,
    #####:12131:					   (i + 1) * sizeof (unsigned int));
call    0 never executed
    #####:12132:      r->suffixes = (char **) xrealloc ((char *) r->suffixes,
    #####:12133:					(i + 1) * sizeof (char *));
call    0 never executed
        -:12134:    }
        -:12135:
    58386:12136:  if (new_pattern_rule (r, override))
call    0 returned 58386
branch  1 taken 58386 (fallthrough)
branch  2 taken 0
    58386:12137:    r->terminal = terminal;
    58386:12138:}
        -:12139:
        -:12140:/* Print the data base of rules.  */
        -:12141:
        -:12142:static void			/* Useful to call from gdb.  */
function print_rule called 31570 returned 100% blocks executed 90%
    31570:12143:print_rule (r)
        -:12144:     struct rule *r;
        -:12145:{
        -:12146:  register unsigned int i;
        -:12147:  register struct dep *d;
        -:12148:
    63140:12149:  for (i = 0; r->targets[i] != 0; ++i)
branch  0 taken 31570
branch  1 taken 31570 (fallthrough)
        -:12150:    {
    31570:12151:      fputs (r->targets[i], stdout);
call    0 returned 31570
    31570:12152:      if (r->targets[i + 1] != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 31570
    #####:12153:	putchar (' ');
call    0 never executed
        -:12154:      else
    31570:12155:	putchar (':');
call    0 returned 31570
        -:12156:    }
    31570:12157:  if (r->terminal)
branch  0 taken 1540 (fallthrough)
branch  1 taken 30030
     1540:12158:    putchar (':');
call    0 returned 1540
        -:12159:
    51975:12160:  for (d = r->deps; d != 0; d = d->next)
branch  0 taken 20405
branch  1 taken 31570 (fallthrough)
   20405*:12161:    printf (" %s", dep_name (d));
branch  0 taken 0 (fallthrough)
branch  1 taken 20405
call    2 returned 20405
    31570:12162:  putchar ('\n');
call    0 returned 31570
        -:12163:
    31570:12164:  if (r->cmds != 0)
branch  0 taken 19635 (fallthrough)
branch  1 taken 11935
    19635:12165:    print_commands (r->cmds);
call    0 returned 19635
    31570:12166:}
        -:12167:
        -:12168:void
function print_rule_data_base called 385 returned 100% blocks executed 88%
      385:12169:print_rule_data_base ()
        -:12170:{
        -:12171:  register unsigned int rules, terminal;
        -:12172:  register struct rule *r;
        -:12173:
      385:12174:  puts ("\n# Implicit Rules");
call    0 returned 385
        -:12175:
      385:12176:  rules = terminal = 0;
    31955:12177:  for (r = pattern_rules; r != 0; r = r->next)
branch  0 taken 31570
branch  1 taken 385 (fallthrough)
        -:12178:    {
    31570:12179:      ++rules;
        -:12180:
    31570:12181:      putchar ('\n');
call    0 returned 31570
    31570:12182:      print_rule (r);
call    0 returned 31570
        -:12183:
    31570:12184:      if (r->terminal)
branch  0 taken 1540 (fallthrough)
branch  1 taken 30030
     1540:12185:	++terminal;
        -:12186:    }
        -:12187:
      385:12188:  if (rules == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 385
    #####:12189:    puts ("\n# No implicit rules.");
call    0 never executed
        -:12190:  else
        -:12191:    {
      385:12192:      printf ("\n# %u implicit rules, %u", rules, terminal);
call    0 returned 385
        -:12193:#ifndef	NO_FLOAT
      385:12194:      printf (" (%.1f%%)", (double) terminal / (double) rules * 100.0);
call    0 returned 385
        -:12195:#else
        -:12196:      {
        -:12197:	int f = (terminal * 1000 + 5) / rules;
        -:12198:	printf (" (%d.%d%%)", f/10, f%10);
        -:12199:      }
        -:12200:#endif
      385:12201:      puts (" terminal.");
call    0 returned 385
        -:12202:    }
        -:12203:
      385:12204:  if (num_pattern_rules != rules)
branch  0 taken 0 (fallthrough)
branch  1 taken 385
    #####:12205:    fatal ("BUG: num_pattern_rules wrong!  %u != %u",
call    0 never executed
        -:12206:	   num_pattern_rules, rules);
      385:12207:}
        -:12208:
        -:12209:
        -:12210:
        -:12211:
        -:12212:/*************************************************************
        -:12213:  ============================================================
        -:12214:  ************************************************************
        -:12215:  ============================================================
        -:12216:  ************************************************************
        -:12217:                         implicit.c
        -:12218:  ************************************************************
        -:12219:  ============================================================
        -:12220:  ************************************************************
        -:12221:  ============================================================
        -:12222:  *************************************************************/
        -:12223:
        -:12224:/* Implicit rule searching for GNU Make.
        -:12225:Copyright (C) 1988,89,90,91,92,93,94,97 Free Software Foundation, Inc.
        -:12226:This file is part of GNU Make.
        -:12227:
        -:12228:GNU Make is free software; you can redistribute it and/or modify
        -:12229:it under the terms of the GNU General Public License as published by
        -:12230:the Free Software Foundation; either version 2, or (at your option)
        -:12231:any later version.
        -:12232:
        -:12233:GNU Make is distributed in the hope that it will be useful,
        -:12234:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:12235:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:12236:GNU General Public License for more details.
        -:12237:
        -:12238:You should have received a copy of the GNU General Public License
        -:12239:along with GNU Make; see the file COPYING.  If not, write to
        -:12240:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:12241:
        -:12242:#include "make.h"
        -:12243:/* #include "rule.h"  <- modification by J.Ruthruff, 7/27 */
        -:12244:/* #include "dep.h"  <- modification by J.Ruthruff, 7/27 */
        -:12245:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -:12246:#undef stderr
        -:12247:#define stderr stdout
        -:12248:
        -:12249:static int pattern_search PARAMS ((struct file *file, int archive, unsigned int depth,
        -:12250:		unsigned int recursions));
        -:12251:
        -:12252:/* For a FILE which has no commands specified, try to figure out some
        -:12253:   from the implicit pattern rules.
        -:12254:   Returns 1 if a suitable implicit rule was found,
        -:12255:   after modifying FILE to contain the appropriate commands and deps,
        -:12256:   or returns 0 if no implicit rule was found.  */
        -:12257:
        -:12258:int
function try_implicit_rule called 948 returned 100% blocks executed 61%
      948:12259:try_implicit_rule (file, depth)
        -:12260:     struct file *file;
        -:12261:     unsigned int depth;
        -:12262:{
      948:12263:  DEBUGPR ("Looking for an implicit rule for `%s'.\n");
branch  0 taken 384 (fallthrough)
branch  1 taken 564
call    2 returned 384
call    3 returned 384
call    4 returned 384
        -:12264:
        -:12265:  /* The order of these searches was previously reversed.  My logic now is
        -:12266:     that since the non-archive search uses more information in the target
        -:12267:     (the archive search omits the archive name), it is more specific and
        -:12268:     should come first.  */
        -:12269:
      948:12270:  if (pattern_search (file, 0, depth, 0))
call    0 returned 948
branch  1 taken 60 (fallthrough)
branch  2 taken 888
       60:12271:    return 1;
        -:12272:
        -:12273:#ifndef	NO_ARCHIVES
        -:12274:  /* If this is an archive member reference, use just the
        -:12275:     archive member name to search for implicit rules.  */
      888:12276:  if (ar_name (file->name))
call    0 returned 888
branch  1 taken 0 (fallthrough)
branch  2 taken 888
        -:12277:    {
    #####:12278:      DEBUGPR ("Looking for archive-member implicit rule for `%s'.\n");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:12279:      if (pattern_search (file, 1, depth, 0))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:12280:	return 1;
        -:12281:    }
        -:12282:#endif
        -:12283:
      888:12284:  return 0;
        -:12285:}
        -:12286:
        -:12287:#define DEBUGP2(msg, a1, a2)						      \
        -:12288:  do {									      \
        -:12289:    if (debug_flag)							      \
        -:12290:      { print_spaces (depth); printf (msg, a1, a2); fflush (stdout); }	      \
        -:12291:  } while (0)
        -:12292:
        -:12293:/* Search the pattern rules for a rule with an existing dependency to make
        -:12294:   FILE.  If a rule is found, the appropriate commands and deps are put in FILE
        -:12295:   and 1 is returned.  If not, 0 is returned.
        -:12296:
        -:12297:   If ARCHIVE is nonzero, FILE->name is of the form "LIB(MEMBER)".  A rule for
        -:12298:   "(MEMBER)" will be searched for, and "(MEMBER)" will not be chopped up into
        -:12299:   directory and filename parts.
        -:12300:
        -:12301:   If an intermediate file is found by pattern search, the intermediate file
        -:12302:   is set up as a target by the recursive call and is also made a dependency
        -:12303:   of FILE.
        -:12304:
        -:12305:   DEPTH is used for debugging messages.  */
        -:12306:
        -:12307:static int
function pattern_search called 14037 returned 100% blocks executed 75%
    14037:12308:pattern_search (file, archive, depth, recursions)
        -:12309:     struct file *file;
        -:12310:     int archive;
        -:12311:     unsigned int depth;
        -:12312:     unsigned int recursions;
        -:12313:{
        -:12314:  /* Filename we are searching for a rule for.  */
   14037*:12315:  char *filename = archive ? index (file->name, '(') : file->name;
branch  0 taken 0 (fallthrough)
branch  1 taken 14037
        -:12316:
        -:12317:  /* Length of FILENAME.  */
    14037:12318:  unsigned int namelen = strlen (filename);
        -:12319:
        -:12320:  /* The last slash in FILENAME (or nil if there is none).  */
        -:12321:  char *lastslash;
        -:12322:
        -:12323:  /* This is a file-object used as an argument in
        -:12324:     recursive calls.  It never contains any data
        -:12325:     except during a recursive call.  */
    14037:12326:  struct file *intermediate_file = 0;
        -:12327:
        -:12328:  /* List of dependencies found recursively.  */
        -:12329:  struct file **intermediate_files
    14037:12330:    = (struct file **) alloca (max_pattern_deps * sizeof (struct file *));
        -:12331:
        -:12332:  /* List of the patterns used to find intermediate files.  */
        -:12333:  char **intermediate_patterns
    14037:12334:    = (char **) alloca (max_pattern_deps * sizeof (char *));
        -:12335:
        -:12336:  /* This buffer records all the dependencies actually found for a rule.  */
    14037:12337:  char **found_files = (char **) alloca (max_pattern_deps * sizeof (char *));
        -:12338:  /* Number of dep names now in FOUND_FILES.  */
        -:12339:  unsigned int deps_found;
        -:12340:
        -:12341:  /* Names of possible dependencies are constructed in this buffer.  */
    14037:12342:  register char *depname = (char *) alloca (namelen + max_pattern_dep_length);
        -:12343:
        -:12344:  /* The start and length of the stem of FILENAME for the current rule.  */
        -:12345:  register char *stem;
        -:12346:  register unsigned int stemlen;
        -:12347:
        -:12348:  /* Buffer in which we store all the rules that are possibly applicable.  */
        -:12349:  struct rule **tryrules
    14037:12350:    = (struct rule **) alloca (num_pattern_rules * max_pattern_targets
        -:12351:			       * sizeof (struct rule *));
        -:12352:
        -:12353:  /* Number of valid elements in TRYRULES.  */
        -:12354:  unsigned int nrules;
        -:12355:
        -:12356:  /* The numbers of the rule targets of each rule
        -:12357:     in TRYRULES that matched the target file.  */
        -:12358:  unsigned int *matches
    14037:12359:    = (unsigned int *) alloca (num_pattern_rules * sizeof (unsigned int));
        -:12360:
        -:12361:  /* Each element is nonzero if LASTSLASH was used in
        -:12362:     matching the corresponding element of TRYRULES.  */
        -:12363:  char *checked_lastslash
    14037:12364:    = (char *) alloca (num_pattern_rules * sizeof (char));
        -:12365:
        -:12366:  /* The index in TRYRULES of the rule we found.  */
        -:12367:  unsigned int foundrule;
        -:12368:
        -:12369:  /* Nonzero if should consider intermediate files as dependencies.  */
        -:12370:  int intermed_ok;
        -:12371:
        -:12372:  /* Nonzero if we have matched a pattern-rule target
        -:12373:     that is not just `%'.  */
    14037:12374:  int specific_rule_matched = 0;
        -:12375:
        -:12376:  register unsigned int i;
        -:12377:  register struct rule *rule;
        -:12378:  register struct dep *dep;
        -:12379:
        -:12380:  char *p, *vp;
        -:12381:
        -:12382:#ifndef	NO_ARCHIVES
    14037:12383:  if (archive || ar_name (filename))
branch  0 taken 14037 (fallthrough)
branch  1 taken 0
call    2 returned 14037
branch  3 taken 0 (fallthrough)
branch  4 taken 14037
    #####:12384:    lastslash = 0;
        -:12385:  else
        -:12386:#endif
        -:12387:    {
        -:12388:      /* Set LASTSLASH to point at the last slash in FILENAME
        -:12389:	 but not counting any slash at the end.  (foo/bar/ counts as
        -:12390:	 bar/ in directory foo/, not empty in directory foo/bar/.)  */
        -:12391:#ifdef VMS
        -:12392:      lastslash = rindex (filename, ']');
        -:12393:#else
    14037:12394:      lastslash = rindex (filename, '/');
        -:12395:#ifdef __MSDOS__
        -:12396:      /* Handle backslashes (possibly mixed with forward slashes)
        -:12397:	 and the case of "d:file".  */
        -:12398:      {
        -:12399:	char *bslash = rindex (filename, '\\');
        -:12400:	if (lastslash == 0 || bslash > lastslash)
        -:12401:	  lastslash = bslash;
        -:12402:	if (lastslash == 0 && filename[0] && filename[1] == ':')
        -:12403:	  lastslash = filename + 1;
        -:12404:      }
        -:12405:#endif
        -:12406:#endif
    14037:12407:      if (lastslash != 0 && lastslash[1] == '\0')
branch  0 taken 13175 (fallthrough)
branch  1 taken 862
branch  2 taken 0 (fallthrough)
branch  3 taken 13175
    #####:12408:	lastslash = 0;
        -:12409:    }
        -:12410:
        -:12411:  /* First see which pattern rules match this target
        -:12412:     and may be considered.  Put them in TRYRULES.  */
        -:12413:
    14037:12414:  nrules = 0;
  1164497:12415:  for (rule = pattern_rules; rule != 0; rule = rule->next)
branch  0 taken 1150460
branch  1 taken 14037 (fallthrough)
        -:12416:    {
        -:12417:      /* If the pattern rule has deps but no commands, ignore it.
        -:12418:	 Users cancel built-in rules by redefining them without commands.  */
 1150460*:12419:      if (rule->deps != 0 && rule->cmds == 0)
branch  0 taken 715530 (fallthrough)
branch  1 taken 434930
branch  2 taken 0 (fallthrough)
branch  3 taken 715530
    #####:12420:	continue;
        -:12421:
        -:12422:      /* If this rule is in use by a parent pattern_search,
        -:12423:	 don't use it here.  */
  1150460:12424:      if (rule->in_use)
branch  0 taken 30036 (fallthrough)
branch  1 taken 1120424
        -:12425:	{
    30036:12426:	  DEBUGP2 ("Avoiding implicit rule recursion.%s%s\n", "", "");
branch  0 taken 14208 (fallthrough)
branch  1 taken 15828
call    2 returned 14208
call    3 returned 14208
call    4 returned 14208
    30036:12427:	  continue;
        -:12428:	}
        -:12429:
  2240848:12430:      for (i = 0; rule->targets[i] != 0; ++i)
branch  0 taken 1120424
branch  1 taken 1120424 (fallthrough)
        -:12431:	{
  1120424:12432:	  char *target = rule->targets[i];
  1120424:12433:	  char *suffix = rule->suffixes[i];
        -:12434:	  int check_lastslash;
        -:12435:
        -:12436:	  /* Rules that can match any filename and are not terminal
        -:12437:	     are ignored if we're recursing, so that they cannot be
        -:12438:	     intermediate files.  */
  1120424:12439:	  if (recursions > 0 && target[1] == '\0' && !rule->terminal)
branch  0 taken 1043262 (fallthrough)
branch  1 taken 77162
branch  2 taken 196512 (fallthrough)
branch  3 taken 846750
branch  4 taken 144156 (fallthrough)
branch  5 taken 52356
   144156:12440:	    continue;
        -:12441:
   976268:12442:	  if (rule->lens[i] > namelen)
branch  0 taken 232 (fallthrough)
branch  1 taken 976036
        -:12443:	    /* It can't possibly match.  */
      232:12444:	    continue;
        -:12445:
        -:12446:	  /* From the lengths of the filename and the pattern parts,
        -:12447:	     find the stem: the part of the filename that matches the %.  */
   976036:12448:	  stem = filename + (suffix - target - 1);
   976036:12449:	  stemlen = namelen - rule->lens[i] + 1;
        -:12450:
        -:12451:	  /* Set CHECK_LASTSLASH if FILENAME contains a directory
        -:12452:	     prefix and the target pattern does not contain a slash.  */
        -:12453:
        -:12454:#ifdef VMS
        -:12455:	  check_lastslash = lastslash != 0 && index (target, ']') == 0;
        -:12456:#else
   976036:12457:	  check_lastslash = lastslash != 0 && index (target, '/') == 0;
branch  0 taken 915275 (fallthrough)
branch  1 taken 60761
branch  2 taken 915275 (fallthrough)
branch  3 taken 0
        -:12458:#endif
   976036:12459:	  if (check_lastslash)
branch  0 taken 915275 (fallthrough)
branch  1 taken 60761
        -:12460:	    {
        -:12461:	      /* In that case, don't include the
        -:12462:		 directory prefix in STEM here.  */
   915275:12463:	      unsigned int difference = lastslash - filename + 1;
   915275:12464:	      if (difference > stemlen)
branch  0 taken 33 (fallthrough)
branch  1 taken 915242
       33:12465:		continue;
   915242:12466:	      stemlen -= difference;
   915242:12467:	      stem += difference;
        -:12468:	    }
        -:12469:
        -:12470:	  /* Check that the rule pattern matches the text before the stem.  */
   976003:12471:	  if (check_lastslash)
branch  0 taken 915242 (fallthrough)
branch  1 taken 60761
        -:12472:	    {
   915242:12473:	      if (stem > (lastslash + 1)
branch  0 taken 13175 (fallthrough)
branch  1 taken 902067
    13175:12474:		  && strncmp (target, lastslash + 1, stem - lastslash - 1))
branch  0 taken 13175 (fallthrough)
branch  1 taken 0
    13175:12475:		continue;
        -:12476:	    }
    60761:12477:	  else if (stem > filename
branch  0 taken 855 (fallthrough)
branch  1 taken 59906
      855:12478:		   && strncmp (target, filename, stem - filename))
branch  0 taken 855 (fallthrough)
branch  1 taken 0
      855:12479:	    continue;
        -:12480:
        -:12481:	  /* Check that the rule pattern matches the text after the stem.
        -:12482:	     We could test simply use streq, but this way we compare the
        -:12483:	     first two characters immediately.  This saves time in the very
        -:12484:	     common case where the first character matches because it is a
        -:12485:	     period.  */
   961973:12486:	  if (*suffix != stem[stemlen]
branch  0 taken 424751 (fallthrough)
branch  1 taken 537222
   424751:12487:	      || (*suffix != '\0' && !streq (&suffix[1], &stem[stemlen + 1])))
branch  0 taken 357339 (fallthrough)
branch  1 taken 67412
branch  2 taken 357339 (fallthrough)
branch  3 taken 0
branch  4 taken 30919 (fallthrough)
branch  5 taken 326420
branch  6 taken 30919 (fallthrough)
branch  7 taken 0
branch  8 taken 1527 (fallthrough)
branch  9 taken 29392
   865169:12488:	    continue;
        -:12489:
        -:12490:	  /* Record if we match a rule that not all filenames will match.  */
    96804:12491:	  if (target[1] != '\0')
branch  0 taken 29392 (fallthrough)
branch  1 taken 67412
    29392:12492:	    specific_rule_matched = 1;
        -:12493:
        -:12494:	  /* A rule with no dependencies and no commands exists solely to set
        -:12495:	     specific_rule_matched when it matches.  Don't try to use it.  */
    96804:12496:	  if (rule->deps == 0 && rule->cmds == 0)
branch  0 taken 13223 (fallthrough)
branch  1 taken 83581
branch  2 taken 13223 (fallthrough)
branch  3 taken 0
    13223:12497:	    continue;
        -:12498:
        -:12499:	  /* Record this rule in TRYRULES and the index of the matching
        -:12500:	     target in MATCHES.  If several targets of the same rule match,
        -:12501:	     that rule will be in TRYRULES more than once.  */
    83581:12502:	  tryrules[nrules] = rule;
    83581:12503:	  matches[nrules] = i;
    83581:12504:	  checked_lastslash[nrules] = check_lastslash;
    83581:12505:	  ++nrules;
        -:12506:	}
        -:12507:    }
        -:12508:
        -:12509:  /* If we have found a matching rule that won't match all filenames,
        -:12510:     retroactively reject any non-"terminal" rules that do always match.  */
    14037:12511:  if (specific_rule_matched)
branch  0 taken 13223 (fallthrough)
branch  1 taken 814
    83892:12512:    for (i = 0; i < nrules; ++i)
branch  0 taken 70669
branch  1 taken 13223 (fallthrough)
    70669:12513:      if (!tryrules[i]->terminal)
branch  0 taken 17777 (fallthrough)
branch  1 taken 52892
        -:12514:	{
        -:12515:	  register unsigned int j;
    33946:12516:	  for (j = 0; tryrules[i]->targets[j] != 0; ++j)
branch  0 taken 17777
branch  1 taken 16169 (fallthrough)
    17777:12517:	    if (tryrules[i]->targets[j][1] == '\0')
branch  0 taken 1608 (fallthrough)
branch  1 taken 16169
     1608:12518:	      break;
    17777:12519:	  if (tryrules[i]->targets[j] != 0)
branch  0 taken 1608 (fallthrough)
branch  1 taken 16169
     1608:12520:	    tryrules[i] = 0;
        -:12521:	}
        -:12522:
        -:12523:  /* Try each rule once without intermediate files, then once with them.  */
    41991:12524:  for (intermed_ok = 0; intermed_ok == !!intermed_ok; ++intermed_ok)
branch  0 taken 28014
branch  1 taken 13977 (fallthrough)
        -:12525:    {
        -:12526:      /* Try each pattern rule till we find one that applies.
        -:12527:	 If it does, copy the names of its dependencies (as substituted)
        -:12528:	 and store them in FOUND_FILES.  DEPS_FOUND is the number of them.  */
        -:12529:
   192176:12530:      for (i = 0; i < nrules; i++)
branch  0 taken 164222
branch  1 taken 27954 (fallthrough)
        -:12531:	{
        -:12532:	  int check_lastslash;
        -:12533:
   164222:12534:	  rule = tryrules[i];
        -:12535:
        -:12536:	  /* RULE is nil when we discover that a rule,
        -:12537:	     already placed in TRYRULES, should not be applied.  */
   164222:12538:	  if (rule == 0)
branch  0 taken 2703 (fallthrough)
branch  1 taken 161519
     2703:12539:	    continue;
        -:12540:
        -:12541:	  /* Reject any terminal rules if we're
        -:12542:	     looking to make intermediate files.  */
   161519:12543:	  if (intermed_ok && rule->terminal)
branch  0 taken 80326 (fallthrough)
branch  1 taken 81193
branch  2 taken 55880 (fallthrough)
branch  3 taken 24446
    55880:12544:	    continue;
        -:12545:
        -:12546:	  /* Mark this rule as in use so a recursive
        -:12547:	     pattern_search won't try to use it.  */
   105639:12548:	  rule->in_use = 1;
        -:12549:
        -:12550:	  /* From the lengths of the filename and the matching pattern parts,
        -:12551:	     find the stem: the part of the filename that matches the %.  */
   105639:12552:	  stem = filename
   105639:12553:	    + (rule->suffixes[matches[i]] - rule->targets[matches[i]]) - 1;
   105639:12554:	  stemlen = namelen - rule->lens[matches[i]] + 1;
   105639:12555:	  check_lastslash = checked_lastslash[i];
   105639:12556:	  if (check_lastslash)
branch  0 taken 99975 (fallthrough)
branch  1 taken 5664
        -:12557:	    {
    99975:12558:	      stem += lastslash - filename + 1;
    99975:12559:	      stemlen -= (lastslash - filename) + 1;
        -:12560:	    }
        -:12561:
   105639:12562:	  DEBUGP2 ("Trying pattern rule with stem `%.*s'.\n",
branch  0 taken 49536 (fallthrough)
branch  1 taken 56103
call    2 returned 49536
call    3 returned 49536
call    4 returned 49536
        -:12563:		   (int) stemlen, stem);
        -:12564:
        -:12565:	  /* Try each dependency; see if it "exists".  */
        -:12566:
   105639:12567:	  deps_found = 0;
   105699:12568:	  for (dep = rule->deps; dep != 0; dep = dep->next)
branch  0 taken 105639
branch  1 taken 60 (fallthrough)
        -:12569:	    {
        -:12570:	      /* If the dependency name has a %, substitute the stem.  */
  105639*:12571:	      p = index (dep_name (dep), '%');
branch  0 taken 0 (fallthrough)
branch  1 taken 105639
   105639:12572:	      if (p != 0)
branch  0 taken 105639 (fallthrough)
branch  1 taken 0
        -:12573:		{
        -:12574:		  register unsigned int i;
   105639:12575:		  if (check_lastslash)
branch  0 taken 99975 (fallthrough)
branch  1 taken 5664
        -:12576:		    {
        -:12577:		      /* Copy directory name from the original FILENAME.  */
    99975:12578:		      i = lastslash - filename + 1;
    99975:12579:		      bcopy (filename, depname, i);
        -:12580:		    }
        -:12581:		  else
     5664:12582:		    i = 0;
  105639*:12583:		  bcopy (dep_name (dep), depname + i, p - dep_name (dep));
branch  0 taken 0 (fallthrough)
branch  1 taken 105639
branch  2 taken 0 (fallthrough)
branch  3 taken 105639
  105639*:12584:		  i += p - dep_name (dep);
branch  0 taken 0 (fallthrough)
branch  1 taken 105639
   105639:12585:		  bcopy (stem, depname + i, stemlen);
   105639:12586:		  i += stemlen;
   105639:12587:		  strcpy (depname + i, p + 1);
   105639:12588:		  p = depname;
        -:12589:		}
        -:12590:	      else
    #####:12591:		p = dep_name (dep);
branch  0 never executed
branch  1 never executed
        -:12592:
        -:12593:	      /* P is now the actual dependency name as substituted.  */
        -:12594:
   105639:12595:	      if (file_impossible_p (p))
call    0 returned 105639
branch  1 taken 12164 (fallthrough)
branch  2 taken 93475
        -:12596:		{
        -:12597:		  /* If this dependency has already been ruled
        -:12598:		     "impossible", then the rule fails and don't
        -:12599:		     bother trying it on the second pass either
        -:12600:		     since we know that will fail too.  */
   12164*:12601:		  DEBUGP2 ("Rejecting impossible %s dependency `%s'.\n",
branch  0 taken 5760 (fallthrough)
branch  1 taken 6404
call    2 returned 5760
branch  3 taken 5760 (fallthrough)
branch  4 taken 0
call    5 returned 5760
call    6 returned 5760
        -:12602:			   p == depname ? "implicit" : "rule", p);
    12164:12603:		  tryrules[i] = 0;
    12164:12604:		  break;
        -:12605:		}
        -:12606:
    93475:12607:	      intermediate_files[deps_found] = 0;
        -:12608:
   93475*:12609:	      DEBUGP2 ("Trying %s dependency `%s'.\n",
branch  0 taken 43776 (fallthrough)
branch  1 taken 49699
call    2 returned 43776
branch  3 taken 43776 (fallthrough)
branch  4 taken 0
call    5 returned 43776
call    6 returned 43776
        -:12610:		       p == depname ? "implicit" : "rule", p);
        -:12611:
        -:12612:	      /* The DEP->changed flag says that this dependency resides in a
        -:12613:		 nonexistent directory.  So we normally can skip looking for
        -:12614:		 the file.  However, if CHECK_LASTSLASH is set, then the
        -:12615:		 dependency file we are actually looking for is in a different
        -:12616:		 directory (the one gotten by prepending FILENAME's directory),
        -:12617:		 so it might actually exist.  */
        -:12618:
    93475:12619:	      if ((!dep->changed || check_lastslash)
branch  0 taken 27940 (fallthrough)
branch  1 taken 65535
branch  2 taken 26350 (fallthrough)
branch  3 taken 1590
    91885:12620:		  && (lookup_file (p) != 0 || file_exists_p (p)))
call    0 returned 91885
branch  1 taken 91825 (fallthrough)
branch  2 taken 60
call    3 returned 91825
branch  4 taken 0 (fallthrough)
branch  5 taken 91825
        -:12621:		{
       60:12622:		  found_files[deps_found++] = savestring (p, strlen (p));
call    0 returned 60
       60:12623:		  continue;
        -:12624:		}
        -:12625:	      /* This code, given FILENAME = "lib/foo.o", dependency name
        -:12626:		 "lib/foo.c", and VPATH=src, searches for "src/lib/foo.c".  */
    93415:12627:	      vp = p;
   93415*:12628:	      if (vpath_search (&vp, (time_t *) 0))
call    0 returned 93415
branch  1 taken 0 (fallthrough)
branch  2 taken 93415
        -:12629:		{
    #####:12630:		  DEBUGP2 ("Found dependency `%s' as VPATH `%s'\n", p, vp);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:12631:		  strcpy(vp, p);
    #####:12632:		  found_files[deps_found++] = vp;
    #####:12633:		  continue;
        -:12634:		}
        -:12635:
        -:12636:	      /* We could not find the file in any place we should look.
        -:12637:		 Try to make this dependency as an intermediate file,
        -:12638:		 but only on the second pass.  */
        -:12639:
    93415:12640:	      if (intermed_ok)
branch  0 taken 13089 (fallthrough)
branch  1 taken 80326
        -:12641:		{
    13089:12642:		  if (intermediate_file == 0)
branch  0 taken 4901 (fallthrough)
branch  1 taken 8188
        -:12643:		    intermediate_file
     4901:12644:		      = (struct file *) alloca (sizeof (struct file));
        -:12645:
    13089:12646:		  DEBUGP2 ("Looking for a rule with %s file `%s'.\n",
branch  0 taken 6144 (fallthrough)
branch  1 taken 6945
call    2 returned 6144
call    3 returned 6144
call    4 returned 6144
        -:12647:			   "intermediate", p);
        -:12648:
    13089:12649:		  bzero ((char *) intermediate_file, sizeof (struct file));
    13089:12650:		  intermediate_file->name = p;
   13089*:12651:		  if (pattern_search (intermediate_file, 0, depth + 1,
call    0 returned 13089
branch  1 taken 0 (fallthrough)
branch  2 taken 13089
        -:12652:				      recursions + 1))
        -:12653:		    {
    #####:12654:		      p = savestring (p, strlen (p));
call    0 never executed
    #####:12655:		      intermediate_patterns[deps_found]
    #####:12656:			= intermediate_file->name;
    #####:12657:		      intermediate_file->name = p;
    #####:12658:		      intermediate_files[deps_found] = intermediate_file;
    #####:12659:		      intermediate_file = 0;
        -:12660:		      /* Allocate an extra copy to go in FOUND_FILES,
        -:12661:			 because every elt of FOUND_FILES is consumed
        -:12662:			 or freed later.  */
    #####:12663:		      found_files[deps_found] = savestring (p, strlen (p));
call    0 never executed
    #####:12664:		      ++deps_found;
    #####:12665:		      continue;
        -:12666:		    }
        -:12667:
        -:12668:		  /* If we have tried to find P as an intermediate
        -:12669:		     file and failed, mark that name as impossible
        -:12670:		     so we won't go through the search again later.  */
    13089:12671:		  file_impossible (p);
call    0 returned 13089
        -:12672:		}
        -:12673:
        -:12674:	      /* A dependency of this rule does not exist.
        -:12675:		 Therefore, this rule fails.  */
    93415:12676:	      break;
        -:12677:	    }
        -:12678:
        -:12679:	  /* This rule is no longer `in use' for recursive searches.  */
   105639:12680:	  rule->in_use = 0;
        -:12681:
   105639:12682:	  if (dep != 0)
branch  0 taken 105579 (fallthrough)
branch  1 taken 60
        -:12683:	    {
        -:12684:	      /* This pattern rule does not apply.
        -:12685:		 If some of its dependencies succeeded,
        -:12686:		 free the data structure describing them.  */
   105579:12687:	      while (deps_found-- > 0)
branch  0 taken 0
branch  1 taken 105579
        -:12688:		{
    #####:12689:		  register struct file *f = intermediate_files[deps_found];
    #####:12690:		  free (found_files[deps_found]);
    #####:12691:		  if (f != 0
branch  0 never executed
branch  1 never executed
    #####:12692:		      && (f->stem < f->name
branch  0 never executed
branch  1 never executed
    #####:12693:			  || f->stem > f->name + strlen (f->name)))
branch  0 never executed
branch  1 never executed
    #####:12694:		    free (f->stem);
        -:12695:		}
        -:12696:	    }
        -:12697:	  else
        -:12698:	    /* This pattern rule does apply.  Stop looking for one.  */
       60:12699:	    break;
        -:12700:	}
        -:12701:
        -:12702:      /* If we found an applicable rule without
        -:12703:	 intermediate files, don't try with them.  */
    28014:12704:      if (i < nrules)
branch  0 taken 60 (fallthrough)
branch  1 taken 27954
       60:12705:	break;
        -:12706:
    27954:12707:      rule = 0;
        -:12708:    }
        -:12709:
        -:12710:  /* RULE is nil if the loop went all the way
        -:12711:     through the list and everything failed.  */
    14037:12712:  if (rule == 0)
branch  0 taken 13977 (fallthrough)
branch  1 taken 60
    13977:12713:    return 0;
        -:12714:
       60:12715:  foundrule = i;
        -:12716:
        -:12717:  /* If we are recursing, store the pattern that matched
        -:12718:     FILENAME in FILE->name for use in upper levels.  */
        -:12719:
       60:12720:  if (recursions > 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 60
        -:12721:    /* Kludge-o-matic */
    #####:12722:    file->name = rule->targets[matches[foundrule]];
        -:12723:
        -:12724:  /* FOUND_FILES lists the dependencies for the rule we found.
        -:12725:     This includes the intermediate files, if any.
        -:12726:     Convert them into entries on the deps-chain of FILE.  */
        -:12727:
      120:12728:  while (deps_found-- > 0)
branch  0 taken 60
branch  1 taken 60 (fallthrough)
        -:12729:    {
        -:12730:      register char *s;
        -:12731:
       60:12732:      if (intermediate_files[deps_found] != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 60
        -:12733:	{
        -:12734:	  /* If we need to use an intermediate file,
        -:12735:	     make sure it is entered as a target, with the info that was
        -:12736:	     found for it in the recursive pattern_search call.
        -:12737:	     We know that the intermediate file did not already exist as
        -:12738:	     a target; therefore we can assume that the deps and cmds
        -:12739:	     of F below are null before we change them.  */
        -:12740:
    #####:12741:	  struct file *imf = intermediate_files[deps_found];
    #####:12742:	  register struct file *f = enter_file (imf->name);
call    0 never executed
    #####:12743:	  f->deps = imf->deps;
    #####:12744:	  f->cmds = imf->cmds;
    #####:12745:	  f->stem = imf->stem;
    #####:12746:	  imf = lookup_file (intermediate_patterns[deps_found]);
call    0 never executed
    #####:12747:	  if (imf != 0 && imf->precious)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:12748:	    f->precious = 1;
    #####:12749:	  f->intermediate = 1;
    #####:12750:	  f->tried_implicit = 1;
    #####:12751:	  for (dep = f->deps; dep != 0; dep = dep->next)
branch  0 never executed
branch  1 never executed
        -:12752:	    {
    #####:12753:	      dep->file = enter_file (dep->name);
call    0 never executed
    #####:12754:	      dep->name = 0;
    #####:12755:	      dep->file->tried_implicit |= dep->changed;
        -:12756:	    }
    #####:12757:	  num_intermediates++;
        -:12758:	}
        -:12759:
       60:12760:      dep = (struct dep *) xmalloc (sizeof (struct dep));
call    0 returned 60
       60:12761:      s = found_files[deps_found];
       60:12762:      if (recursions == 0)
branch  0 taken 60 (fallthrough)
branch  1 taken 0
        -:12763:	{
       60:12764:	  dep->name = 0;
       60:12765:	  dep->file = lookup_file (s);
call    0 returned 60
       60:12766:	  if (dep->file == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 60
        -:12767:	    /* enter_file consumes S's storage.  */
    #####:12768:	    dep->file = enter_file (s);
call    0 never executed
        -:12769:	  else
        -:12770:	    /* A copy of S is already allocated in DEP->file->name.
        -:12771:	       So we can free S.  */
       60:12772:	    free (s);
        -:12773:	}
        -:12774:      else
        -:12775:	{
    #####:12776:	  dep->name = s;
    #####:12777:	  dep->file = 0;
    #####:12778:	  dep->changed = 0;
        -:12779:	}
       60:12780:      if (intermediate_files[deps_found] == 0 && tryrules[foundrule]->terminal)
branch  0 taken 60 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 60
        -:12781:	{
        -:12782:	  /* If the file actually existed (was not an intermediate file),
        -:12783:	     and the rule that found it was a terminal one, then we want
        -:12784:	     to mark the found file so that it will not have implicit rule
        -:12785:	     search done for it.  If we are not entering a `struct file' for
        -:12786:	     it now, we indicate this with the `changed' flag.  */
    #####:12787:	  if (dep->file == 0)
branch  0 never executed
branch  1 never executed
    #####:12788:	    dep->changed = 1;
        -:12789:	  else
    #####:12790:	    dep->file->tried_implicit = 1;
        -:12791:	}
       60:12792:      dep->next = file->deps;
       60:12793:      file->deps = dep;
        -:12794:    }
        -:12795:
       60:12796:  if (!checked_lastslash[foundrule])
branch  0 taken 60 (fallthrough)
branch  1 taken 0
        -:12797:    /* Always allocate new storage, since STEM might be
        -:12798:       on the stack for an intermediate file.  */
       60:12799:    file->stem = savestring (stem, stemlen);
call    0 returned 60
        -:12800:  else
        -:12801:    {
        -:12802:      /* We want to prepend the directory from
        -:12803:	 the original FILENAME onto the stem.  */
    #####:12804:      file->stem = (char *) xmalloc (((lastslash + 1) - filename)
    #####:12805:				     + stemlen + 1);
call    0 never executed
    #####:12806:      bcopy (filename, file->stem, (lastslash + 1) - filename);
    #####:12807:      bcopy (stem, file->stem + ((lastslash + 1) - filename), stemlen);
    #####:12808:      file->stem[((lastslash + 1) - filename) + stemlen] = '\0';
        -:12809:    }
        -:12810:
       60:12811:  file->cmds = rule->cmds;
        -:12812:
        -:12813:  /* Put the targets other than the one that
        -:12814:     matched into FILE's `also_make' member.  */
        -:12815:
        -:12816:  /* If there was only one target, there is nothing to do.  */
       60:12817:  if (rule->targets[1] != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 60
    #####:12818:    for (i = 0; rule->targets[i] != 0; ++i)
branch  0 never executed
branch  1 never executed
    #####:12819:      if (i != matches[foundrule])
branch  0 never executed
branch  1 never executed
        -:12820:	{
    #####:12821:	  struct dep *new = (struct dep *) xmalloc (sizeof (struct dep));
call    0 never executed
    #####:12822:	  new->name = p = (char *) xmalloc (rule->lens[i] + stemlen + 1);
call    0 never executed
    #####:12823:	  bcopy (rule->targets[i], p,
        -:12824:		 rule->suffixes[i] - rule->targets[i] - 1);
    #####:12825:	  p += rule->suffixes[i] - rule->targets[i] - 1;
    #####:12826:	  bcopy (stem, p, stemlen);
    #####:12827:	  p += stemlen;
    #####:12828:	  bcopy (rule->suffixes[i], p,
        -:12829:		 rule->lens[i] - (rule->suffixes[i] - rule->targets[i]) + 1);
    #####:12830:	  new->file = enter_file (new->name);
call    0 never executed
    #####:12831:	  new->next = file->also_make;
    #####:12832:	  file->also_make = new;
        -:12833:	}
        -:12834:
        -:12835:
       60:12836:  return 1;
        -:12837:}
        -:12838:
        -:12839:
        -:12840:
        -:12841:/*************************************************************
        -:12842:  ============================================================
        -:12843:  ************************************************************
        -:12844:  ============================================================
        -:12845:  ************************************************************
        -:12846:                         default.c
        -:12847:  ************************************************************
        -:12848:  ============================================================
        -:12849:  ************************************************************
        -:12850:  ============================================================
        -:12851:  *************************************************************/
        -:12852:
        -:12853:/* Data base of default implicit rules for GNU Make.
        -:12854:Copyright (C) 1988,89,90,91,92,93,94,95,96 Free Software Foundation, Inc.
        -:12855:This file is part of GNU Make.
        -:12856:
        -:12857:GNU Make is free software; you can redistribute it and/or modify
        -:12858:it under the terms of the GNU General Public License as published by
        -:12859:the Free Software Foundation; either version 2, or (at your option)
        -:12860:any later version.
        -:12861:
        -:12862:GNU Make is distributed in the hope that it will be useful,
        -:12863:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:12864:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:12865:GNU General Public License for more details.
        -:12866:
        -:12867:You should have received a copy of the GNU General Public License
        -:12868:along with GNU Make; see the file COPYING.  If not, write to
        -:12869:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:12870:
        -:12871:#include "make.h"
        -:12872:/* #include "rule.h"  <- modification by J.Ruthruff, 7/27 */
        -:12873:/* #include "dep.h"  <- modification by J.Ruthruff, 7/27 */
        -:12874:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -:12875:#include "job.h"
        -:12876:/* #include "commands.h"  <- modification by J.Ruthruff, 7/27 */
        -:12877:/* #include "variable.h"  <- modification by J.Ruthruff, 7/27 */
        -:12878:#undef stderr
        -:12879:#define stderr stdout
        -:12880:
        -:12881:/* Define GCC_IS_NATIVE if gcc is the native development environment on
        -:12882:   your system (gcc/bison/flex vs cc/yacc/lex).  */
        -:12883:#ifdef __MSDOS__
        -:12884:#define GCC_IS_NATIVE
        -:12885:#endif
        -:12886:
        -:12887:
        -:12888:/* This is the default list of suffixes for suffix rules.
        -:12889:   `.s' must come last, so that a `.o' file will be made from
        -:12890:   a `.c' or `.p' or ... file rather than from a .s file.  */
        -:12891:
        -:12892:static char default_suffixes[]
        -:12893:#ifdef VMS
        -:12894:  = ".exe .olb .ln .obj .c .cc .pas .p .for .f .r .y .l .mar \
        -:12895:.mod .sym .def .h .info .dvi .tex .texinfo .texi .txinfo \
        -:12896:.w .ch .cweb .web .com .sh .elc .el";
        -:12897:#else
        -:12898:  = ".out .a .ln .o .c .cc .C .p .f .F .r .y .l .s .S \
        -:12899:.mod .sym .def .h .info .dvi .tex .texinfo .texi .txinfo \
        -:12900:.w .ch .web .sh .elc .el";
        -:12901:#endif
        -:12902:
        -:12903:static struct pspec default_pattern_rules[] =
        -:12904:  {
        -:12905:    { "(%)", "%",
        -:12906:	"$(AR) $(ARFLAGS) $@ $<" },
        -:12907:
        -:12908:    /* The X.out rules are only in BSD's default set because
        -:12909:       BSD Make has no null-suffix rules, so `foo.out' and
        -:12910:       `foo' are the same thing.  */
        -:12911:#ifdef VMS
        -:12912:    { "%.exe", "%",
        -:12913:        "copy $< $@" },
        -:12914:#else
        -:12915:    { "%.out", "%",
        -:12916:	"@rm -f $@ \n cp $< $@" },
        -:12917:#endif
        -:12918:    /* Syntax is "ctangle foo.w foo.ch foo.c".  */
        -:12919:    { "%.c", "%.w %.ch",
        -:12920:	"$(CTANGLE) $^ $@" },
        -:12921:    { "%.tex", "%.w %.ch",
        -:12922:	"$(CWEAVE) $^ $@" },
        -:12923:
        -:12924:    { 0, 0, 0 }
        -:12925:  };
        -:12926:
        -:12927:static struct pspec default_terminal_rules[] =
        -:12928:  {
        -:12929:#ifdef VMS
        -:12930:    /* RCS.  */
        -:12931:    { "%", "%$$5lv", /* Multinet style */
        -:12932:        "if f$$search($@) .nes. \"\" then +$(CHECKOUT,v)" },
        -:12933:    { "%", "[.$$rcs]%$$5lv", /* Multinet style */
        -:12934:        "if f$$search($@) .nes. \"\" then +$(CHECKOUT,v)" },
        -:12935:    { "%", "%_v", /* Normal style */
        -:12936:        "if f$$search($@) .nes. \"\" then +$(CHECKOUT,v)" },
        -:12937:    { "%", "[.rcs]%_v", /* Normal style */
        -:12938:        "if f$$search($@) .nes. \"\" then +$(CHECKOUT,v)" },
        -:12939:
        -:12940:    /* SCCS.  */
        -:12941:	/* ain't no SCCS on vms */
        -:12942:#else
        -:12943:    /* RCS.  */
        -:12944:    { "%", "%,v",
        -:12945:	"$(CHECKOUT,v)" },
        -:12946:    { "%", "RCS/%,v",
        -:12947:	"$(CHECKOUT,v)" },
        -:12948:
        -:12949:    /* SCCS.  */
        -:12950:    { "%", "s.%",
        -:12951:	"$(GET) $(GFLAGS) $(SCCS_OUTPUT_OPTION) $<" },
        -:12952:    { "%", "SCCS/s.%",
        -:12953:	"$(GET) $(GFLAGS) $(SCCS_OUTPUT_OPTION) $<" },
        -:12954:#endif /* !VMS */
        -:12955:    { 0, 0, 0 }
        -:12956:  };
        -:12957:
        -:12958:static char *default_suffix_rules[] =
        -:12959:  {
        -:12960:#ifdef VMS
        -:12961:    ".obj.exe",
        -:12962:    "$(LINK.obj) $^ $(LOADLIBES) $(LDLIBS) /exe=$@",
        -:12963:    ".mar.exe",
        -:12964:    "$(LINK.mar) $^ $(LOADLIBES) $(LDLIBS) /exe=$@",
        -:12965:    ".c.exe",
        -:12966:    "$(COMPILE.c) $^ \n $(LINK.obj) $(subst .c,.obj,$^) $(LOADLIBES) $(LDLIBS) /exe=$@",
        -:12967:    ".cc.exe",
        -:12968:    "$(COMPILE.cc) $^ \n $(LINK.obj) $(subst .cc,.obj,$^) $(LOADLIBES) $(LDLIBS) /exe=$@",
        -:12969:    ".for.exe",
        -:12970:    "$(COMPILE.for) $^ \n $(LINK.obj) $(subst .for,.obj,$^) $(LOADLIBES) $(LDLIBS) /exe=$@",
        -:12971:    ".pas.exe",
        -:12972:    "$(COMPILE.pas) $^ \n $(LINK.obj) $(subst .pas,.obj,$^) $(LOADLIBES) $(LDLIBS) /exe=$@",
        -:12973:
        -:12974:    ".com",
        -:12975:    "copy $< >$@",
        -:12976:
        -:12977:    ".mar.obj",
        -:12978:    "$(COMPILE.mar) /obj=$@ $<",
        -:12979:    ".c.obj",
        -:12980:    "$(COMPILE.c) /obj=$@ $<",
        -:12981:    ".cc.obj",
        -:12982:    "$(COMPILE.cc) /obj=$@ $<",
        -:12983:    ".for.obj",
        -:12984:    "$(COMPILE.for) /obj=$@ $<",
        -:12985:    ".pas.obj",
        -:12986:    "$(COMPILE.pas) /obj=$@ $<",
        -:12987:
        -:12988:    ".y.c",
        -:12989:    "$(YACC.y) $< \n rename y_tab.c $@",
        -:12990:    ".l.c",
        -:12991:    "$(LEX.l) $< \n rename lexyy.c $@",
        -:12992:
        -:12993:    ".texinfo.info",
        -:12994:    "$(MAKEINFO) $<",
        -:12995:
        -:12996:    ".tex.dvi",
        -:12997:    "$(TEX) $<",
        -:12998:
        -:12999:#else /* ! VMS */
        -:13000:
        -:13001:    ".o",
        -:13002:    "$(LINK.o) $^ $(LOADLIBES) $(LDLIBS) -o $@",
        -:13003:    ".s",
        -:13004:    "$(LINK.s) $^ $(LOADLIBES) $(LDLIBS) -o $@",
        -:13005:    ".S",
        -:13006:    "$(LINK.S) $^ $(LOADLIBES) $(LDLIBS) -o $@",
        -:13007:    ".c",
        -:13008:    "$(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@",
        -:13009:    ".cc",
        -:13010:    "$(LINK.cc) $^ $(LOADLIBES) $(LDLIBS) -o $@",
        -:13011:    ".C",
        -:13012:    "$(LINK.C) $^ $(LOADLIBES) $(LDLIBS) -o $@",
        -:13013:    ".f",
        -:13014:    "$(LINK.f) $^ $(LOADLIBES) $(LDLIBS) -o $@",
        -:13015:    ".p",
        -:13016:    "$(LINK.p) $^ $(LOADLIBES) $(LDLIBS) -o $@",
        -:13017:    ".F",
        -:13018:    "$(LINK.F) $^ $(LOADLIBES) $(LDLIBS) -o $@",
        -:13019:    ".r",
        -:13020:    "$(LINK.r) $^ $(LOADLIBES) $(LDLIBS) -o $@",
        -:13021:    ".mod",
        -:13022:    "$(COMPILE.mod) -o $@ -e $@ $^",
        -:13023:
        -:13024:    ".def.sym",
        -:13025:    "$(COMPILE.def) -o $@ $<",
        -:13026:
        -:13027:    ".sh",
        -:13028:    "cat $< >$@ \n chmod a+x $@",
        -:13029:
        -:13030:    ".s.o",
        -:13031:    "$(COMPILE.s) -o $@ $<",
        -:13032:    ".S.o",
        -:13033:    "$(COMPILE.S) -o $@ $<",
        -:13034:    ".c.o",
        -:13035:    "$(COMPILE.c) $< $(OUTPUT_OPTION)",
        -:13036:    ".cc.o",
        -:13037:    "$(COMPILE.cc) $< $(OUTPUT_OPTION)",
        -:13038:    ".C.o",
        -:13039:    "$(COMPILE.C) $< $(OUTPUT_OPTION)",
        -:13040:    ".f.o",
        -:13041:    "$(COMPILE.f) $< $(OUTPUT_OPTION)",
        -:13042:    ".p.o",
        -:13043:    "$(COMPILE.p) $< $(OUTPUT_OPTION)",
        -:13044:    ".F.o",
        -:13045:    "$(COMPILE.F) $< $(OUTPUT_OPTION)",
        -:13046:    ".r.o",
        -:13047:    "$(COMPILE.r) $< $(OUTPUT_OPTION)",
        -:13048:    ".mod.o",
        -:13049:    "$(COMPILE.mod) -o $@ $<",
        -:13050:
        -:13051:    ".c.ln",
        -:13052:    "$(LINT.c) -C$* $<",
        -:13053:    ".y.ln",
        -:13054:#ifndef __MSDOS__
        -:13055:    "$(YACC.y) $< \n $(LINT.c) -C$* y.tab.c \n $(RM) y.tab.c",
        -:13056:#else
        -:13057:    "$(YACC.y) $< \n $(LINT.c) -C$* y_tab.c \n $(RM) y_tab.c",
        -:13058:#endif
        -:13059:    ".l.ln",
        -:13060:    "@$(RM) $*.c\n $(LEX.l) $< > $*.c\n$(LINT.c) -i $*.c -o $@\n $(RM) $*.c",
        -:13061:
        -:13062:    ".y.c",
        -:13063:#ifndef __MSDOS__
        -:13064:    "$(YACC.y) $< \n mv -f y.tab.c $@",
        -:13065:#else
        -:13066:    "$(YACC.y) $< \n mv -f y_tab.c $@",
        -:13067:#endif
        -:13068:    ".l.c",
        -:13069:    "@$(RM) $@ \n $(LEX.l) $< > $@",
        -:13070:
        -:13071:    ".F.f",
        -:13072:    "$(PREPROCESS.F) $< $(OUTPUT_OPTION)",
        -:13073:    ".r.f",
        -:13074:    "$(PREPROCESS.r) $< $(OUTPUT_OPTION)",
        -:13075:
        -:13076:    /* This might actually make lex.yy.c if there's no %R%
        -:13077:       directive in $*.l, but in that case why were you
        -:13078:       trying to make $*.r anyway?  */
        -:13079:    ".l.r",
        -:13080:    "$(LEX.l) $< > $@ \n mv -f lex.yy.r $@",
        -:13081:
        -:13082:    ".S.s",
        -:13083:    "$(PREPROCESS.S) $< > $@",
        -:13084:
        -:13085:    ".texinfo.info",
        -:13086:    "$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@",
        -:13087:
        -:13088:    ".texi.info",
        -:13089:    "$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@",
        -:13090:
        -:13091:    ".txinfo.info",
        -:13092:    "$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@",
        -:13093:
        -:13094:    ".tex.dvi",
        -:13095:    "$(TEX) $<",
        -:13096:
        -:13097:    ".texinfo.dvi",
        -:13098:    "$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<",
        -:13099:
        -:13100:    ".texi.dvi",
        -:13101:    "$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<",
        -:13102:
        -:13103:    ".txinfo.dvi",
        -:13104:    "$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<",
        -:13105:
        -:13106:    ".w.c",
        -:13107:    "$(CTANGLE) $< - $@",	/* The `-' says there is no `.ch' file.  */
        -:13108:
        -:13109:    ".web.p",
        -:13110:    "$(TANGLE) $<",
        -:13111:
        -:13112:    ".w.tex",
        -:13113:    "$(CWEAVE) $< - $@",	/* The `-' says there is no `.ch' file.  */
        -:13114:
        -:13115:    ".web.tex",
        -:13116:    "$(WEAVE) $<",
        -:13117:
        -:13118:#endif /* !VMS */
        -:13119:
        -:13120:    0, 0,
        -:13121:  };
        -:13122:
        -:13123:static char *default_variables[] =
        -:13124:  {
        -:13125:#ifdef VMS
        -:13126:    "AR", "library/obj",
        -:13127:    "ARFLAGS", "/replace",
        -:13128:    "AS", "macro",
        -:13129:    "CC", "cc",
        -:13130:    "C++", "gcc/plus",
        -:13131:    "CXX", "gcc/plus",
        -:13132:    "CO", "co",
        -:13133:    "CPP", "$(CC) /preprocess_only",
        -:13134:    "FC", "fortran",
        -:13135:    /* System V uses these, so explicit rules using them should work.
        -:13136:       However, there is no way to make implicit rules use them and FC.  */
        -:13137:    "F77", "$(FC)",
        -:13138:    "F77FLAGS", "$(FFLAGS)",
        -:13139:    "LD", "link",
        -:13140:    "LEX", "lex",
        -:13141:    "PC", "pascal",
        -:13142:    "YACC", "yacc",	/* Or "bison -y"  */
        -:13143:    "MAKEINFO", "makeinfo",
        -:13144:    "TEX", "tex",
        -:13145:    "TEXINDEX", "texindex",
        -:13146:
        -:13147:    "RM", "delete/nolog",
        -:13148:
        -:13149:    "LINK.obj", "$(LD) $(LDFLAGS)",
        -:13150:    "COMPILE.c", "$(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH)",
        -:13151:    "COMPILE.cc", "$(C++) $(C++FLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c",
        -:13152:    "YACC.y", "$(YACC) $(YFLAGS)",
        -:13153:    "LEX.l", "$(LEX) $(LFLAGS)",
        -:13154:    "COMPILE.for", "$(FC) $(FFLAGS) $(TARGET_ARCH)",
        -:13155:    "COMPILE.pas", "$(PC) $(PFLAGS) $(CPPFLAGS) $(TARGET_ARCH)",
        -:13156:    "COMPILE.mar", "$(AS) $(ASFLAGS) $(TARGET_MACH)",
        -:13157:    "LINT.c", "$(LINT) $(LINTFLAGS) $(CPPFLAGS) $(TARGET_ARCH)",
        -:13158:
        -:13159:    "MV", "rename/new_version",
        -:13160:    "CP", "copy",
        -:13161:
        -:13162:#else /* !VMS */
        -:13163:
        -:13164:    "AR", "ar",
        -:13165:    "ARFLAGS", "rv",
        -:13166:    "AS", "as",
        -:13167:#ifdef GCC_IS_NATIVE
        -:13168:    "CC", "gcc",
        -:13169:    "CXX", "gcc",
        -:13170:#else
        -:13171:    "CC", "cc",
        -:13172:    "CXX", "g++",
        -:13173:#endif
        -:13174:
        -:13175:    /* This expands to $(CO) $(COFLAGS) $< $@ if $@ does not exist,
        -:13176:       and to the empty string if $@ does exist.  */
        -:13177:    "CHECKOUT,v",
        -:13178:    "+$(patsubst $@-noexist,$(CO) $(COFLAGS) $< $@,\
        -:13179:		 $(filter-out $@,$(firstword $(wildcard $@) $@-noexist)))",
        -:13180:
        -:13181:    "CO", "co",
        -:13182:    "CPP", "$(CC) -E",
        -:13183:#ifdef	CRAY
        -:13184:    "CF77PPFLAGS", "-P",
        -:13185:    "CF77PP", "/lib/cpp",
        -:13186:    "CFT", "cft77",
        -:13187:    "CF", "cf77",
        -:13188:    "FC", "$(CF)",
        -:13189:#else	/* Not CRAY.  */
        -:13190:#ifdef	_IBMR2
        -:13191:    "FC", "xlf",
        -:13192:#else
        -:13193:#ifdef	__convex__
        -:13194:    "FC", "fc",
        -:13195:#else
        -:13196:    "FC", "f77",
        -:13197:#endif /* __convex__ */
        -:13198:#endif /* _IBMR2 */
        -:13199:    /* System V uses these, so explicit rules using them should work.
        -:13200:       However, there is no way to make implicit rules use them and FC.  */
        -:13201:    "F77", "$(FC)",
        -:13202:    "F77FLAGS", "$(FFLAGS)",
        -:13203:#endif	/* Cray.  */
        -:13204:    "GET", SCCS_GET,
        -:13205:    "LD", "ld",
        -:13206:#ifdef GCC_IS_NATIVE
        -:13207:    "LEX", "flex",
        -:13208:#else
        -:13209:    "LEX", "lex",
        -:13210:#endif
        -:13211:    "LINT", "lint",
        -:13212:    "M2C", "m2c",
        -:13213:#ifdef	pyr
        -:13214:    "PC", "pascal",
        -:13215:#else
        -:13216:#ifdef	CRAY
        -:13217:    "PC", "PASCAL",
        -:13218:    "SEGLDR", "segldr",
        -:13219:#else
        -:13220:    "PC", "pc",
        -:13221:#endif	/* CRAY.  */
        -:13222:#endif	/* pyr.  */
        -:13223:#ifdef GCC_IS_NATIVE
        -:13224:    "YACC", "bison -y",
        -:13225:#else
        -:13226:    "YACC", "yacc",	/* Or "bison -y"  */
        -:13227:#endif
        -:13228:    "MAKEINFO", "makeinfo",
        -:13229:    "TEX", "tex",
        -:13230:    "TEXI2DVI", "texi2dvi",
        -:13231:    "WEAVE", "weave",
        -:13232:    "CWEAVE", "cweave",
        -:13233:    "TANGLE", "tangle",
        -:13234:    "CTANGLE", "ctangle",
        -:13235:
        -:13236:    "RM", "rm -f",
        -:13237:
        -:13238:    "LINK.o", "$(CC) $(LDFLAGS) $(TARGET_ARCH)",
        -:13239:    "COMPILE.c", "$(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c",
        -:13240:    "LINK.c", "$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)",
        -:13241:    "COMPILE.cc", "$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c",
        -:13242:    "COMPILE.C", "$(COMPILE.cc)",
        -:13243:    "LINK.cc", "$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)",
        -:13244:    "LINK.C", "$(LINK.cc)",
        -:13245:    "YACC.y", "$(YACC) $(YFLAGS)",
        -:13246:    "LEX.l", "$(LEX) $(LFLAGS) -t",
        -:13247:    "COMPILE.f", "$(FC) $(FFLAGS) $(TARGET_ARCH) -c",
        -:13248:    "LINK.f", "$(FC) $(FFLAGS) $(LDFLAGS) $(TARGET_ARCH)",
        -:13249:    "COMPILE.F", "$(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c",
        -:13250:    "LINK.F", "$(FC) $(FFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)",
        -:13251:    "COMPILE.r", "$(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -c",
        -:13252:    "LINK.r", "$(FC) $(FFLAGS) $(RFLAGS) $(LDFLAGS) $(TARGET_ARCH)",
        -:13253:    "COMPILE.def", "$(M2C) $(M2FLAGS) $(DEFFLAGS) $(TARGET_ARCH)",
        -:13254:    "COMPILE.mod", "$(M2C) $(M2FLAGS) $(MODFLAGS) $(TARGET_ARCH)",
        -:13255:    "COMPILE.p", "$(PC) $(PFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c",
        -:13256:    "LINK.p", "$(PC) $(PFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)",
        -:13257:    "LINK.s", "$(CC) $(ASFLAGS) $(LDFLAGS) $(TARGET_MACH)",
        -:13258:    "COMPILE.s", "$(AS) $(ASFLAGS) $(TARGET_MACH)",
        -:13259:    "LINK.S", "$(CC) $(ASFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_MACH)",
        -:13260:    "COMPILE.S", "$(CC) $(ASFLAGS) $(CPPFLAGS) $(TARGET_MACH) -c",
        -:13261:    "PREPROCESS.S", "$(CC) -E $(CPPFLAGS)",
        -:13262:    "PREPROCESS.F", "$(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -F",
        -:13263:    "PREPROCESS.r", "$(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -F",
        -:13264:    "LINT.c", "$(LINT) $(LINTFLAGS) $(CPPFLAGS) $(TARGET_ARCH)",
        -:13265:
        -:13266:#ifndef	NO_MINUS_C_MINUS_O
        -:13267:    "OUTPUT_OPTION", "-o $@",
        -:13268:#endif
        -:13269:
        -:13270:#ifdef	SCCS_GET_MINUS_G
        -:13271:    "SCCS_OUTPUT_OPTION", "-G$@",
        -:13272:#endif
        -:13273:
        -:13274:#endif /* !VMS */
        -:13275:    0, 0
        -:13276:  };
        -:13277:
        -:13278:/* Set up the default .SUFFIXES list.  */
        -:13279:
        -:13280:void
function set_default_suffixes called 790 returned 100% blocks executed 100%
      790:13281:set_default_suffixes ()
        -:13282:{
      790:13283:  suffix_file = enter_file (".SUFFIXES");
call    0 returned 790
        -:13284:
      790:13285:  if (no_builtin_rules_flag)
branch  0 taken 1 (fallthrough)
branch  1 taken 789
        1:13286:    (void) define_variable ("SUFFIXES", 8, "", o_default, 0);
call    0 returned 1
        -:13287:  else
        -:13288:    {
      789:13289:      char *p = default_suffixes;
     1578:13290:      suffix_file->deps = (struct dep *)
      789:13291:	multi_glob (parse_file_seq (&p, '\0', sizeof (struct dep), 1),
call    0 returned 789
call    1 returned 789
        -:13292:		    sizeof (struct dep));
      789:13293:      (void) define_variable ("SUFFIXES", 8, default_suffixes, o_default, 0);
call    0 returned 789
        -:13294:    }
      790:13295:}
        -:13296:
        -:13297:/* Enter the default suffix rules as file rules.  This used to be done in
        -:13298:   install_default_implicit_rules, but that loses because we want the
        -:13299:   suffix rules installed before reading makefiles, and thee pattern rules
        -:13300:   installed after.  */
        -:13301:
        -:13302:void
function install_default_suffix_rules called 790 returned 100% blocks executed 100%
      790:13303:install_default_suffix_rules ()
        -:13304:{
        -:13305:  register char **s;
        -:13306:
      790:13307:  if (no_builtin_rules_flag)
branch  0 taken 1 (fallthrough)
branch  1 taken 789
        1:13308:    return;
        -:13309:
    34716:13310: for (s = default_suffix_rules; *s != 0; s += 2)
branch  0 taken 33927
branch  1 taken 789 (fallthrough)
        -:13311:    {
    33927:13312:      register struct file *f = enter_file (s[0]);
call    0 returned 33927
        -:13313:      /* Don't clobber cmds given in a makefile if there were any.  */
    33927:13314:      if (f->cmds == 0)
branch  0 taken 33927 (fallthrough)
branch  1 taken 0
        -:13315:	{
    33927:13316:	  f->cmds = (struct commands *) xmalloc (sizeof (struct commands));
call    0 returned 33927
    33927:13317:	  f->cmds->filename = 0;
    33927:13318:	  f->cmds->commands = s[1];
    33927:13319:	  f->cmds->command_lines = 0;
        -:13320:	}
        -:13321:    }
        -:13322:}
        -:13323:
        -:13324:
        -:13325:/* Install the default pattern rules.  */
        -:13326:
        -:13327:void
function install_default_implicit_rules called 790 returned 100% blocks executed 100%
      790:13328:install_default_implicit_rules ()
        -:13329:{
        -:13330:  register struct pspec *p;
        -:13331:
      790:13332:  if (no_builtin_rules_flag)
branch  0 taken 1 (fallthrough)
branch  1 taken 789
        1:13333:    return;
        -:13334:
     3945:13335:  for (p = default_pattern_rules; p->target != 0; ++p)
branch  0 taken 3156
branch  1 taken 789 (fallthrough)
     3156:13336:    install_pattern_rule (p, 0);
call    0 returned 3156
        -:13337:
     3945:13338:  for (p = default_terminal_rules; p->target != 0; ++p)
branch  0 taken 3156
branch  1 taken 789 (fallthrough)
     3156:13339:    install_pattern_rule (p, 1);
call    0 returned 3156
        -:13340:}
        -:13341:
        -:13342:void
function define_default_variables called 790 returned 100% blocks executed 100%
      790:13343:define_default_variables ()
        -:13344:{
        -:13345:  register char **s;
        -:13346:
    44240:13347:  for (s = default_variables; *s != 0; s += 2)
branch  0 taken 43450
branch  1 taken 790 (fallthrough)
    43450:13348:    (void) define_variable (s[0], strlen (s[0]), s[1], o_default, 1);
call    0 returned 43450
      790:13349:}
        -:13350:
        -:13351:
        -:13352:
        -:13353:/*************************************************************
        -:13354:  ============================================================
        -:13355:  ************************************************************
        -:13356:  ============================================================
        -:13357:  ************************************************************
        -:13358:                         variable.c
        -:13359:  ************************************************************
        -:13360:  ============================================================
        -:13361:  ************************************************************
        -:13362:  ============================================================
        -:13363:  *************************************************************/
        -:13364:
        -:13365:/* Internals of variables for GNU Make.
        -:13366:Copyright (C) 1988,89,90,91,92,93,94,96,97 Free Software Foundation, Inc.
        -:13367:This file is part of GNU Make.
        -:13368:
        -:13369:GNU Make is free software; you can redistribute it and/or modify
        -:13370:it under the terms of the GNU General Public License as published by
        -:13371:the Free Software Foundation; either version 2, or (at your option)
        -:13372:any later version.
        -:13373:
        -:13374:GNU Make is distributed in the hope that it will be useful,
        -:13375:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:13376:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:13377:GNU General Public License for more details.
        -:13378:
        -:13379:You should have received a copy of the GNU General Public License
        -:13380:along with GNU Make; see the file COPYING.  If not, write to
        -:13381:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:13382:
        -:13383:#include "make.h"
        -:13384:/* #include "dep.h"  <- modification by J.Ruthruff, 7/27 */
        -:13385:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -:13386:#include "job.h"
        -:13387:/* #include "commands.h"  <- modification by J.Ruthruff, 7/27 */
        -:13388:/* #include "variable.h"  <- modification by J.Ruthruff, 7/27 */
        -:13389:#undef stderr
        -:13390:#define stderr stdout
        -:13391:#ifdef WINDOWS32
        -:13392:#include "pathstuff.h"
        -:13393:#undef stderr
        -:13394:#define stderr stdout
        -:13395:#endif
        -:13396:
        -:13397:/* Hash table of all global variable definitions.  */
        -:13398:
        -:13399:#ifndef	VARIABLE_BUCKETS
        -:13400:#define VARIABLE_BUCKETS		523
        -:13401:#endif
        -:13402:#ifndef	PERFILE_VARIABLE_BUCKETS
        -:13403:#define	PERFILE_VARIABLE_BUCKETS	23
        -:13404:#endif
        -:13405:#ifndef	SMALL_SCOPE_VARIABLE_BUCKETS
        -:13406:#define	SMALL_SCOPE_VARIABLE_BUCKETS	13
        -:13407:#endif
        -:13408:static struct variable *variable_table[VARIABLE_BUCKETS];
        -:13409:static struct variable_set global_variable_set
        -:13410:  = { variable_table, VARIABLE_BUCKETS };
        -:13411:static struct variable_set_list global_setlist
        -:13412:  = { 0, &global_variable_set };
        -:13413:struct variable_set_list *current_variable_set_list = &global_setlist;
        -:13414:
        -:13415:static struct variable *define_variable_in_set PARAMS ((char *name, unsigned int length,
        -:13416:							char *value, enum variable_origin origin,
        -:13417:							int recursive, struct variable_set *set));
        -:13418:
        -:13419:
        -:13420:/* Implement variables.  */
        -:13421:
        -:13422:/* Define variable named NAME with value VALUE in SET.  VALUE is copied.
        -:13423:   LENGTH is the length of NAME, which does not need to be null-terminated.
        -:13424:   ORIGIN specifies the origin of the variable (makefile, command line
        -:13425:   or environment).
        -:13426:   If RECURSIVE is nonzero a flag is set in the variable saying
        -:13427:   that it should be recursively re-expanded.  */
        -:13428:
        -:13429:static struct variable *
function define_variable_in_set called 105470 returned 100% blocks executed 100%
   105470:13430:define_variable_in_set (name, length, value, origin, recursive, set)
        -:13431:     char *name;
        -:13432:     unsigned int length;
        -:13433:     char *value;
        -:13434:     enum variable_origin origin;
        -:13435:     int recursive;
        -:13436:     struct variable_set *set;
        -:13437:{
        -:13438:  register unsigned int i;
        -:13439:  register unsigned int hashval;
        -:13440:  register struct variable *v;
        -:13441:
   105470:13442:  hashval = 0;
   976444:13443:  for (i = 0; i < length; ++i)
branch  0 taken 870974
branch  1 taken 105470 (fallthrough)
   870974:13444:    HASH (hashval, name[i]);
   105470:13445:  hashval %= set->buckets;
        -:13446:
   122223:13447:  for (v = set->table[hashval]; v != 0; v = v->next)
branch  0 taken 21387
branch  1 taken 100836 (fallthrough)
    21387:13448:    if (*v->name == *name
branch  0 taken 5424 (fallthrough)
branch  1 taken 15963
     5424:13449:	&& !strncmp (v->name + 1, name + 1, length - 1)
branch  0 taken 4634 (fallthrough)
branch  1 taken 790
     4634:13450:	&& v->name[length] == '\0')
branch  0 taken 4634 (fallthrough)
branch  1 taken 0
     4634:13451:      break;
        -:13452:
   105470:13453:  if (env_overrides && origin == o_env)
branch  0 taken 31744 (fallthrough)
branch  1 taken 73726
branch  2 taken 1664 (fallthrough)
branch  3 taken 30080
     1664:13454:    origin = o_env_override;
        -:13455:
   105470:13456:  if (v != 0)
branch  0 taken 4634 (fallthrough)
branch  1 taken 100836
        -:13457:    {
     4634:13458:      if (env_overrides && v->origin == o_env)
branch  0 taken 2176 (fallthrough)
branch  1 taken 2458
branch  2 taken 384 (fallthrough)
branch  3 taken 1792
        -:13459:	/* V came from in the environment.  Since it was defined
        -:13460:	   before the switches were parsed, it wasn't affected by -e.  */
      384:13461:	v->origin = o_env_override;
        -:13462:
        -:13463:      /* A variable of this name is already defined.
        -:13464:	 If the old definition is from a stronger source
        -:13465:	 than this one, don't redefine it.  */
     4634:13466:      if ((int) origin >= (int) v->origin)
branch  0 taken 3844 (fallthrough)
branch  1 taken 790
        -:13467:	{
     3844:13468:	  if (v->value != 0)
branch  0 taken 3844 (fallthrough)
branch  1 taken 0
     3844:13469:	    free (v->value);
     3844:13470:	  v->value = savestring (value, strlen (value));
call    0 returned 3844
     3844:13471:	  v->origin = origin;
     3844:13472:	  v->recursive = recursive;
        -:13473:	}
     4634:13474:      return v;
        -:13475:    }
        -:13476:
        -:13477:  /* Create a new variable definition and add it to the hash table.  */
        -:13478:
   100836:13479:  v = (struct variable *) xmalloc (sizeof (struct variable));
call    0 returned 100836
   100836:13480:  v->name = savestring (name, length);
call    0 returned 100836
   100836:13481:  v->value = savestring (value, strlen (value));
call    0 returned 100836
   100836:13482:  v->origin = origin;
   100836:13483:  v->recursive = recursive;
   100836:13484:  v->expanding = 0;
   100836:13485:  v->export = v_default;
   100836:13486:  v->next = set->table[hashval];
   100836:13487:  set->table[hashval] = v;
   100836:13488:  return v;
        -:13489:}
        -:13490:
        -:13491:/* Define a variable in the current variable set.  */
        -:13492:
        -:13493:struct variable *
function define_variable called 105442 returned 100% blocks executed 100%
   105442:13494:define_variable (name, length, value, origin, recursive)
        -:13495:     char *name;
        -:13496:     unsigned int length;
        -:13497:     char *value;
        -:13498:     enum variable_origin origin;
        -:13499:     int recursive;
        -:13500:{
   210884:13501:  return define_variable_in_set (name, length, value, origin, recursive,
   105442:13502:				 current_variable_set_list->set);
call    0 returned 105442
        -:13503:}
        -:13504:
        -:13505:/* Define a variable in FILE's variable set.  */
        -:13506:
        -:13507:struct variable *
function define_variable_for_file called 28 returned 100% blocks executed 100%
       28:13508:define_variable_for_file (name, length, value, origin, recursive, file)
        -:13509:     char *name;
        -:13510:     unsigned int length;
        -:13511:     char *value;
        -:13512:     enum variable_origin origin;
        -:13513:     int recursive;
        -:13514:     struct file *file;
        -:13515:{
       56:13516:  return define_variable_in_set (name, length, value, origin, recursive,
       28:13517:				 file->variables->set);
call    0 returned 28
        -:13518:}
        -:13519:
        -:13520:/* Lookup a variable whose name is a string starting at NAME
        -:13521:   and with LENGTH chars.  NAME need not be null-terminated.
        -:13522:   Returns address of the `struct variable' containing all info
        -:13523:   on the variable, or nil if no such variable is defined.  */
        -:13524:
        -:13525:struct variable *
function lookup_variable called 4876 returned 100% blocks executed 100%
     4876:13526:lookup_variable (name, length)
        -:13527:     char *name;
        -:13528:     unsigned int length;
        -:13529:{
        -:13530:  register struct variable_set_list *setlist;
        -:13531:
        -:13532:  register unsigned int i;
     4876:13533:  register unsigned int rawhash = 0;
        -:13534:
    41878:13535:  for (i = 0; i < length; ++i)
branch  0 taken 37002
branch  1 taken 4876 (fallthrough)
    37002:13536:    HASH (rawhash, name[i]);
        -:13537:
     4876:13538:  for (setlist = current_variable_set_list;
     8087:13539:       setlist != 0; setlist = setlist->next)
branch  0 taken 4936
branch  1 taken 3151 (fallthrough)
        -:13540:    {
     4936:13541:      register struct variable_set *set = setlist->set;
     4936:13542:      register unsigned int hashval = rawhash % set->buckets;
        -:13543:      register struct variable *v;
        -:13544:
     5734:13545:      for (v = set->table[hashval]; v != 0; v = v->next)
branch  0 taken 2523
branch  1 taken 3211 (fallthrough)
     2523:13546:	if (*v->name == *name
branch  0 taken 1725 (fallthrough)
branch  1 taken 798
     1725:13547:	    && !strncmp (v->name + 1, name + 1, length - 1)
branch  0 taken 1725 (fallthrough)
branch  1 taken 0
     1725:13548:	    && v->name[length] == 0)
branch  0 taken 1725 (fallthrough)
branch  1 taken 0
     1725:13549:	  return v;
        -:13550:    }
        -:13551:
     3151:13552:  return 0;
        -:13553:}
        -:13554:
        -:13555:/* Initialize FILE's variable set list.  If FILE already has a variable set
        -:13556:   list, the topmost variable set is left intact, but the the rest of the
        -:13557:   chain is replaced with FILE->parent's setlist.  */
        -:13558:
        -:13559:void
function initialize_file_variables called 9 returned 100% blocks executed 100%
        9:13560:initialize_file_variables (file)
        -:13561:     struct file *file;
        -:13562:{
        9:13563:  register struct variable_set_list *l = file->variables;
        9:13564:  if (l == 0)
branch  0 taken 8 (fallthrough)
branch  1 taken 1
        -:13565:    {
        -:13566:      l = (struct variable_set_list *)
        8:13567:	xmalloc (sizeof (struct variable_set_list));
call    0 returned 8
        8:13568:      l->set = (struct variable_set *) xmalloc (sizeof (struct variable_set));
call    0 returned 8
        8:13569:      l->set->buckets = PERFILE_VARIABLE_BUCKETS;
       16:13570:      l->set->table = (struct variable **)
        8:13571:	xmalloc (l->set->buckets * sizeof (struct variable *));
call    0 returned 8
        8:13572:      bzero ((char *) l->set->table,
        -:13573:	     l->set->buckets * sizeof (struct variable *));
        8:13574:      file->variables = l;
        -:13575:    }
        -:13576:
        9:13577:  if (file->parent == 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        3:13578:    l->next = &global_setlist;
        -:13579:  else
        -:13580:    {
        6:13581:      if (file->parent->variables == 0)
branch  0 taken 5 (fallthrough)
branch  1 taken 1
        5:13582:	initialize_file_variables (file->parent);
call    0 returned 5
        6:13583:      l->next = file->parent->variables;
        -:13584:    }
        9:13585:}
        -:13586:
        -:13587:/* Pop the top set off the current variable set list,
        -:13588:   and free all its storage.  */
        -:13589:
        -:13590:void
function pop_variable_scope called 0 returned 0% blocks executed 0%
    #####:13591:pop_variable_scope ()
        -:13592:{
    #####:13593:  register struct variable_set_list *setlist = current_variable_set_list;
    #####:13594:  register struct variable_set *set = setlist->set;
        -:13595:  register unsigned int i;
        -:13596:
    #####:13597:  current_variable_set_list = setlist->next;
    #####:13598:  free ((char *) setlist);
        -:13599:
    #####:13600:  for (i = 0; i < set->buckets; ++i)
branch  0 never executed
branch  1 never executed
        -:13601:    {
    #####:13602:      register struct variable *next = set->table[i];
    #####:13603:      while (next != 0)
branch  0 never executed
branch  1 never executed
        -:13604:	{
    #####:13605:	  register struct variable *v = next;
    #####:13606:	  next = v->next;
        -:13607:
    #####:13608:	  free (v->name);
    #####:13609:	  free ((char *) v);
        -:13610:	}
        -:13611:    }
    #####:13612:  free ((char *) set->table);
    #####:13613:  free ((char *) set);
    #####:13614:}
        -:13615:
        -:13616:/* Create a new variable set and push it on the current setlist.  */
        -:13617:
        -:13618:void
function push_new_variable_scope called 0 returned 0% blocks executed 0%
    #####:13619:push_new_variable_scope ()
        -:13620:{
        -:13621:  register struct variable_set_list *setlist;
        -:13622:  register struct variable_set *set;
        -:13623:
    #####:13624:  set = (struct variable_set *) xmalloc (sizeof (struct variable_set));
call    0 never executed
    #####:13625:  set->buckets = SMALL_SCOPE_VARIABLE_BUCKETS;
    #####:13626:  set->table = (struct variable **)
    #####:13627:    xmalloc (set->buckets * sizeof (struct variable *));
call    0 never executed
    #####:13628:  bzero ((char *) set->table, set->buckets * sizeof (struct variable *));
        -:13629:
        -:13630:  setlist = (struct variable_set_list *)
    #####:13631:    xmalloc (sizeof (struct variable_set_list));
call    0 never executed
    #####:13632:  setlist->set = set;
    #####:13633:  setlist->next = current_variable_set_list;
    #####:13634:  current_variable_set_list = setlist;
    #####:13635:}
        -:13636:
        -:13637:/* Merge SET1 into SET0, freeing unused storage in SET1.  */
        -:13638:
        -:13639:static void
function merge_variable_sets called 0 returned 0% blocks executed 0%
    #####:13640:merge_variable_sets (set0, set1)
        -:13641:     struct variable_set *set0, *set1;
        -:13642:{
        -:13643:  register unsigned int bucket1;
        -:13644:
    #####:13645:  for (bucket1 = 0; bucket1 < set1->buckets; ++bucket1)
branch  0 never executed
branch  1 never executed
        -:13646:    {
    #####:13647:      register struct variable *v1 = set1->table[bucket1];
    #####:13648:      while (v1 != 0)
branch  0 never executed
branch  1 never executed
        -:13649:	{
    #####:13650:	  struct variable *next = v1->next;
        -:13651:	  unsigned int bucket0;
        -:13652:	  register struct variable *v0;
        -:13653:
    #####:13654:	  if (set1->buckets >= set0->buckets)
branch  0 never executed
branch  1 never executed
    #####:13655:	    bucket0 = bucket1;
        -:13656:	  else
        -:13657:	    {
        -:13658:	      register char *n;
    #####:13659:	      bucket0 = 0;
    #####:13660:	      for (n = v1->name; *n != '\0'; ++n)
branch  0 never executed
branch  1 never executed
    #####:13661:		HASH (bucket0, *n);
        -:13662:	    }
    #####:13663:	  bucket0 %= set0->buckets;
        -:13664:
    #####:13665:	  for (v0 = set0->table[bucket0]; v0 != 0; v0 = v0->next)
branch  0 never executed
branch  1 never executed
    #####:13666:	    if (streq (v0->name, v1->name))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:13667:	      break;
        -:13668:
    #####:13669:	  if (v0 == 0)
branch  0 never executed
branch  1 never executed
        -:13670:	    {
        -:13671:	      /* There is no variable in SET0 with the same name.  */
    #####:13672:	      v1->next = set0->table[bucket0];
    #####:13673:	      set0->table[bucket0] = v1;
        -:13674:	    }
        -:13675:	  else
        -:13676:	    {
        -:13677:	      /* The same variable exists in both sets.
        -:13678:		 SET0 takes precedence.  */
    #####:13679:	      free (v1->value);
    #####:13680:	      free ((char *) v1);
        -:13681:	    }
        -:13682:
    #####:13683:	  v1 = next;
        -:13684:	}
        -:13685:    }
    #####:13686:}
        -:13687:
        -:13688:/* Merge SETLIST1 into SETLIST0, freeing unused storage in SETLIST1.  */
        -:13689:
        -:13690:void
function merge_variable_set_lists called 0 returned 0% blocks executed 0%
    #####:13691:merge_variable_set_lists (setlist0, setlist1)
        -:13692:     struct variable_set_list **setlist0, *setlist1;
        -:13693:{
    #####:13694:  register struct variable_set_list *list0 = *setlist0;
    #####:13695:  struct variable_set_list *last0 = 0;
        -:13696:
    #####:13697:  while (setlist1 != 0 && list0 != 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:13698:    {
    #####:13699:      struct variable_set_list *next = setlist1;
    #####:13700:      setlist1 = setlist1->next;
        -:13701:
    #####:13702:      merge_variable_sets (list0->set, next->set);
call    0 never executed
        -:13703:
    #####:13704:      last0 = list0;
    #####:13705:      list0 = list0->next;
        -:13706:    }
        -:13707:
    #####:13708:  if (setlist1 != 0)
branch  0 never executed
branch  1 never executed
        -:13709:    {
    #####:13710:      if (last0 == 0)
branch  0 never executed
branch  1 never executed
    #####:13711:	*setlist0 = setlist1;
        -:13712:      else
    #####:13713:	last0->next = setlist1;
        -:13714:    }
    #####:13715:}
        -:13716:
        -:13717:/* Define the automatic variables, and record the addresses
        -:13718:   of their structures so we can change their values quickly.  */
        -:13719:
        -:13720:void
function define_automatic_variables called 790 returned 100% blocks executed 88%
      790:13721:define_automatic_variables ()
        -:13722:{
        -:13723:#ifdef WINDOWS32
        -:13724:  extern char* default_shell;
        -:13725:#else
        -:13726:  extern char default_shell[];
        -:13727:#endif
        -:13728:  register struct variable *v;
        -:13729:  char buf[200];
        -:13730:
      790:13731:  sprintf (buf, "%u", makelevel);
      790:13732:  (void) define_variable ("MAKELEVEL", 9, buf, o_env, 0);
call    0 returned 790
        -:13733:
    1580*:13734:  sprintf (buf, "%s%s%s",
        -:13735:	   version_string,
     790*:13736:	   (remote_description == 0 || remote_description[0] == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 790
branch  2 never executed
branch  3 never executed
        -:13737:	   ? "" : "-",
     790*:13738:	   (remote_description == 0 || remote_description[0] == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 790
branch  2 never executed
branch  3 never executed
        -:13739:	   ? "" : remote_description);
      790:13740:  (void) define_variable ("MAKE_VERSION", 12, buf, o_default, 0);
call    0 returned 790
        -:13741:
        -:13742:#ifdef  __MSDOS__
        -:13743:  /* Allow to specify a special shell just for Make,
        -:13744:     and use $COMSPEC as the default $SHELL when appropriate.  */
        -:13745:  {
        -:13746:    static char shell_str[] = "SHELL";
        -:13747:    const int shlen = sizeof (shell_str) - 1;
        -:13748:    struct variable *mshp = lookup_variable ("MAKESHELL", 9);
        -:13749:    struct variable *comp = lookup_variable ("COMSPEC", 7);
        -:13750:
        -:13751:    /* Make $MAKESHELL override $SHELL even if -e is in effect.  */
        -:13752:    if (mshp)
        -:13753:      (void) define_variable (shell_str, shlen,
        -:13754:			      mshp->value, o_env_override, 0);
        -:13755:    else if (comp)
        -:13756:      {
        -:13757:	/* $COMSPEC shouldn't override $SHELL.  */
        -:13758:	struct variable *shp = lookup_variable (shell_str, shlen);
        -:13759:
        -:13760:	if (!shp)
        -:13761:	  (void) define_variable (shell_str, shlen, comp->value, o_env, 0);
        -:13762:      }
        -:13763:  }
        -:13764:#endif
        -:13765:
        -:13766:  /* This won't override any definition, but it
        -:13767:     will provide one if there isn't one there.  */
      790:13768:  v = define_variable ("SHELL", 5, default_shell, o_default, 0);
call    0 returned 790
      790:13769:  v->export = v_export;		/* Always export SHELL.  */
        -:13770:
        -:13771:  /* On MSDOS we do use SHELL from environment, since
        -:13772:     it isn't a standard environment variable on MSDOS,
        -:13773:     so whoever sets it, does that on purpose.  */
        -:13774:#ifndef __MSDOS__
        -:13775:  /* Don't let SHELL come from the environment.  */
      790:13776:  if (*v->value == '\0' || v->origin == o_env || v->origin == o_env_override)
branch  0 taken 790 (fallthrough)
branch  1 taken 0
branch  2 taken 384 (fallthrough)
branch  3 taken 406
branch  4 taken 384 (fallthrough)
branch  5 taken 0
        -:13777:    {
      790:13778:      free (v->value);
      790:13779:      v->origin = o_file;
      790:13780:      v->value = savestring (default_shell, strlen (default_shell));
call    0 returned 790
        -:13781:    }
        -:13782:#endif
        -:13783:
        -:13784:  /* Make sure MAKEFILES gets exported if it is set.  */
      790:13785:  v = define_variable ("MAKEFILES", 9, "", o_default, 0);
call    0 returned 790
      790:13786:  v->export = v_ifset;
        -:13787:
        -:13788:  /* Define the magic D and F variables in terms of
        -:13789:     the automatic variables they are variations of.  */
        -:13790:
      790:13791:  define_variable ("@D", 2, "$(patsubst %/,%,$(dir $@))", o_automatic, 1);
call    0 returned 790
      790:13792:  define_variable ("%D", 2, "$(patsubst %/,%,$(dir $%))", o_automatic, 1);
call    0 returned 790
      790:13793:  define_variable ("*D", 2, "$(patsubst %/,%,$(dir $*))", o_automatic, 1);
call    0 returned 790
      790:13794:  define_variable ("<D", 2, "$(patsubst %/,%,$(dir $<))", o_automatic, 1);
call    0 returned 790
      790:13795:  define_variable ("?D", 2, "$(patsubst %/,%,$(dir $?))", o_automatic, 1);
call    0 returned 790
      790:13796:  define_variable ("^D", 2, "$(patsubst %/,%,$(dir $^))", o_automatic, 1);
call    0 returned 790
      790:13797:  define_variable ("+D", 2, "$(patsubst %/,%,$(dir $+))", o_automatic, 1);
call    0 returned 790
      790:13798:  define_variable ("@F", 2, "$(notdir $@)", o_automatic, 1);
call    0 returned 790
      790:13799:  define_variable ("%F", 2, "$(notdir $%)", o_automatic, 1);
call    0 returned 790
      790:13800:  define_variable ("*F", 2, "$(notdir $*)", o_automatic, 1);
call    0 returned 790
      790:13801:  define_variable ("<F", 2, "$(notdir $<)", o_automatic, 1);
call    0 returned 790
      790:13802:  define_variable ("?F", 2, "$(notdir $?)", o_automatic, 1);
call    0 returned 790
      790:13803:  define_variable ("^F", 2, "$(notdir $^)", o_automatic, 1);
call    0 returned 790
      790:13804:  define_variable ("+F", 2, "$(notdir $+)", o_automatic, 1);
call    0 returned 790
      790:13805:}
        -:13806:
        -:13807:int export_all_variables;
        -:13808:
        -:13809:/* Create a new environment for FILE's commands.
        -:13810:   If FILE is nil, this is for the `shell' function.
        -:13811:   The child's MAKELEVEL variable is incremented.  */
        -:13812:
        -:13813:char **
function target_environment called 3 returned 100% blocks executed 87%
        3:13814:target_environment (file)
        -:13815:     struct file *file;
        -:13816:{
        -:13817:  struct variable_set_list *set_list;
        -:13818:  register struct variable_set_list *s;
        -:13819:  struct variable_bucket
        -:13820:    {
        -:13821:      struct variable_bucket *next;
        -:13822:      struct variable *variable;
        -:13823:    };
        -:13824:  struct variable_bucket **table;
        -:13825:  unsigned int buckets;
        -:13826:  register unsigned int i;
        -:13827:  register unsigned nvariables;
        -:13828:  char **result;
        -:13829:  unsigned int mklev_hash;
        -:13830:
        3:13831:  if (file == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:13832:    set_list = current_variable_set_list;
        -:13833:  else
        3:13834:    set_list = file->variables;
        -:13835:
        -:13836:  /* Find the lowest number of buckets in any set in the list.  */
        3:13837:  s = set_list;
        3:13838:  buckets = s->set->buckets;
       10:13839:  for (s = s->next; s != 0; s = s->next)
branch  0 taken 7
branch  1 taken 3 (fallthrough)
        7:13840:    if (s->set->buckets < buckets)
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    #####:13841:      buckets = s->set->buckets;
        -:13842:
        -:13843:  /* Find the hash value of the bucket `MAKELEVEL' will fall into.  */
        -:13844:  {
        3:13845:    char *p = "MAKELEVEL";
        3:13846:    mklev_hash = 0;
       30:13847:    while (*p != '\0')
branch  0 taken 27
branch  1 taken 3 (fallthrough)
       27:13848:      HASH (mklev_hash, *p++);
        -:13849:  }
        -:13850:
        -:13851:  /* Temporarily allocate a table with that many buckets.  */
        -:13852:  table = (struct variable_bucket **)
        3:13853:    alloca (buckets * sizeof (struct variable_bucket *));
        3:13854:  bzero ((char *) table, buckets * sizeof (struct variable_bucket *));
        -:13855:
        -:13856:  /* Run through all the variable sets in the list,
        -:13857:     accumulating variables in TABLE.  */
        3:13858:  nvariables = 0;
       13:13859:  for (s = set_list; s != 0; s = s->next)
branch  0 taken 10
branch  1 taken 3 (fallthrough)
        -:13860:    {
       10:13861:      register struct variable_set *set = s->set;
     1740:13862:      for (i = 0; i < set->buckets; ++i)
branch  0 taken 1730
branch  1 taken 10 (fallthrough)
        -:13863:	{
        -:13864:	  register struct variable *v;
     2186:13865:	  for (v = set->table[i]; v != 0; v = v->next)
branch  0 taken 456
branch  1 taken 1730 (fallthrough)
        -:13866:	    {
      456:13867:	      unsigned int j = i % buckets;
        -:13868:	      register struct variable_bucket *ov;
      456:13869:	      register char *p = v->name;
        -:13870:
      456:13871:	      if (i == mklev_hash % set->buckets
branch  0 taken 3 (fallthrough)
branch  1 taken 453
        3:13872:		  && streq (v->name, "MAKELEVEL"))
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 3 (fallthrough)
branch  3 taken 0
branch  4 taken 3 (fallthrough)
branch  5 taken 0
branch  6 taken 3 (fallthrough)
branch  7 taken 0
        -:13873:		/* Don't include MAKELEVEL because it will be
        -:13874:		   added specially at the end.  */
        3:13875:		continue;
        -:13876:
     453*:13877:	      switch (v->export)
branch  0 taken 297
branch  1 taken 153
branch  2 taken 0
branch  3 taken 3
        -:13878:		{
      297:13879:		case v_default:
      297:13880:		  if (v->origin == o_default || v->origin == o_automatic)
branch  0 taken 129 (fallthrough)
branch  1 taken 168
branch  2 taken 63 (fallthrough)
branch  3 taken 66
        -:13881:		    /* Only export default variables by explicit request.  */
      231:13882:		    continue;
        -:13883:
       66:13884:		  if (! export_all_variables
branch  0 taken 66 (fallthrough)
branch  1 taken 0
       66:13885:		      && v->origin != o_command
branch  0 taken 66 (fallthrough)
branch  1 taken 0
       66:13886:		      && v->origin != o_env && v->origin != o_env_override)
branch  0 taken 63 (fallthrough)
branch  1 taken 3
branch  2 taken 63 (fallthrough)
branch  3 taken 0
       63:13887:		    continue;
        -:13888:
       3*:13889:		  if (*p != '_' && (*p < 'A' || *p > 'Z')
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 3 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 3
    #####:13890:		      && (*p < 'a' || *p > 'z'))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:13891:		    continue;
       18:13892:		  for (++p; *p != '\0'; ++p)
branch  0 taken 15
branch  1 taken 3 (fallthrough)
      15*:13893:		    if (*p != '_' && (*p < 'a' || *p > 'z')
branch  0 taken 15 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 15
branch  4 never executed
branch  5 never executed
      15*:13894:			&& (*p < 'A' || *p > 'Z') && (*p < '0' || *p > '9'))
branch  0 taken 15 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 15
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:13895:		      break;
       3*:13896:		  if (*p != '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:13897:		    continue;
        -:13898:
        -:13899:		case v_export:
      156:13900:		  break;
        -:13901:
    #####:13902:		case v_noexport:
    #####:13903:		  continue;
        -:13904:
        3:13905:		case v_ifset:
        3:13906:		  if (v->origin == o_default)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:13907:		    continue;
    #####:13908:		  break;
        -:13909:		}
        -:13910:
      300:13911:	      for (ov = table[j]; ov != 0; ov = ov->next)
branch  0 taken 144
branch  1 taken 156 (fallthrough)
      144:13912:		if (streq (v->name, ov->variable->name))
branch  0 taken 144 (fallthrough)
branch  1 taken 0
branch  2 taken 18 (fallthrough)
branch  3 taken 126
branch  4 taken 18 (fallthrough)
branch  5 taken 0
branch  6 taken 18 (fallthrough)
branch  7 taken 0
        -:13913:		  break;
      156:13914:	      if (ov == 0)
branch  0 taken 156 (fallthrough)
branch  1 taken 0
        -:13915:		{
        -:13916:		  register struct variable_bucket *entry;
        -:13917:		  entry = (struct variable_bucket *)
      156:13918:		    alloca (sizeof (struct variable_bucket));
      156:13919:		  entry->next = table[j];
      156:13920:		  entry->variable = v;
      156:13921:		  table[j] = entry;
      156:13922:		  ++nvariables;
        -:13923:		}
        -:13924:	    }
        -:13925:	}
        -:13926:    }
        -:13927:
        3:13928:  result = (char **) xmalloc ((nvariables + 2) * sizeof (char *));
call    0 returned 3
        3:13929:  nvariables = 0;
       72:13930:  for (i = 0; i < buckets; ++i)
branch  0 taken 69
branch  1 taken 3 (fallthrough)
        -:13931:    {
        -:13932:      register struct variable_bucket *b;
      225:13933:      for (b = table[i]; b != 0; b = b->next)
branch  0 taken 156
branch  1 taken 69 (fallthrough)
        -:13934:	{
      156:13935:	  register struct variable *v = b->variable;
        -:13936:	  /* If V is recursively expanded and didn't come from the environment,
        -:13937:	     expand its value.  If it came from the environment, it should
        -:13938:	     go back into the environment unchanged.  */
      156:13939:	  if (v->recursive
branch  0 taken 156 (fallthrough)
branch  1 taken 0
      156:13940:	      && v->origin != o_env && v->origin != o_env_override)
branch  0 taken 6 (fallthrough)
branch  1 taken 150
branch  2 taken 6 (fallthrough)
branch  3 taken 0
        6:13941:	    {
        6:13942:	      char *value = recursively_expand (v);
call    0 returned 6
        -:13943:#ifdef WINDOWS32
        -:13944:              if (strcmp(v->name, "Path") == 0 ||
        -:13945:                  strcmp(v->name, "PATH") == 0)
        -:13946:                convert_Path_to_windows32(value, ';');
        -:13947:#endif
        6:13948:	      result[nvariables++] = concat (v->name, "=", value);
call    0 returned 6
        6:13949:	      free (value);
        -:13950:	    }
        -:13951:	  else
        -:13952:#ifdef WINDOWS32
        -:13953:          {
        -:13954:            if (strcmp(v->name, "Path") == 0 ||
        -:13955:                strcmp(v->name, "PATH") == 0)
        -:13956:              convert_Path_to_windows32(v->value, ';');
        -:13957:            result[nvariables++] = concat (v->name, "=", v->value);
        -:13958:          }
        -:13959:#else
      150:13960:	    result[nvariables++] = concat (v->name, "=", v->value);
call    0 returned 150
        -:13961:#endif
        -:13962:	}
        -:13963:    }
        3:13964:  result[nvariables] = (char *) xmalloc (100);
call    0 returned 3
        3:13965:  (void) sprintf (result[nvariables], "MAKELEVEL=%u", makelevel + 1);
        3:13966:  result[++nvariables] = 0;
        -:13967:
        3:13968:  return result;
        -:13969:}
        -:13970:
        -:13971:/* Try to interpret LINE (a null-terminated string) as a variable definition.
        -:13972:
        -:13973:   ORIGIN may be o_file, o_override, o_env, o_env_override,
        -:13974:   or o_command specifying that the variable definition comes
        -:13975:   from a makefile, an override directive, the environment with
        -:13976:   or without the -e switch, or the command line.
        -:13977:
        -:13978:   A variable definition has the form "name = value" or "name := value".
        -:13979:   Any whitespace around the "=" or ":=" is removed.  The first form
        -:13980:   defines a variable that is recursively re-evaluated.  The second form
        -:13981:   defines a variable whose value is variable-expanded at the time of
        -:13982:   definition and then is evaluated only once at the time of expansion.
        -:13983:
        -:13984:   If a variable was defined, a pointer to its `struct variable' is returned.
        -:13985:   If not, NULL is returned.  */
        -:13986:
        -:13987:struct variable *
function try_variable_definition called 987 returned 100% blocks executed 44%
      987:13988:try_variable_definition (filename, lineno, line, origin)
        -:13989:     char *filename;
        -:13990:     unsigned int lineno;
        -:13991:     char *line;
        -:13992:     enum variable_origin origin;
        -:13993:{
        -:13994:  register int c;
      987:13995:  register char *p = line;
        -:13996:  register char *beg;
        -:13997:  register char *end;
      987:13998:  enum { bogus, simple, recursive, append } flavor = bogus;
        -:13999:  char *name, *expanded_name, *value;
        -:14000:  struct variable *v;
        -:14001:
        -:14002:  while (1)
        -:14003:    {
     8547:14004:      c = *p++;
     8547:14005:      if (c == '\0' || c == '#')
branch  0 taken 8547 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 8547
    #####:14006:	return 0;
     8547:14007:      if (c == '=')
branch  0 taken 462 (fallthrough)
branch  1 taken 8085
        -:14008:	{
      462:14009:	  end = p - 1;
      462:14010:	  flavor = recursive;
      462:14011:	  break;
        -:14012:	}
     8085:14013:      else if (c == ':')
branch  0 taken 525 (fallthrough)
branch  1 taken 7560
      525:14014:	if (*p == '=')
branch  0 taken 0 (fallthrough)
branch  1 taken 525
        -:14015:	  {
    #####:14016:	    end = p++ - 1;
    #####:14017:	    flavor = simple;
    #####:14018:	    break;
        -:14019:	  }
        -:14020:	else
        -:14021:	  /* A colon other than := is a rule line, not a variable defn.  */
      525:14022:	  return 0;
    7560*:14023:      else if (c == '+' && *p == '=')
branch  0 taken 0 (fallthrough)
branch  1 taken 7560
branch  2 never executed
branch  3 never executed
        -:14024:	{
    #####:14025:	  end = p++ - 1;
    #####:14026:	  flavor = append;
    #####:14027:	  break;
        -:14028:	}
     7560:14029:      else if (c == '$')
branch  0 taken 0 (fallthrough)
branch  1 taken 7560
        -:14030:	{
        -:14031:	  /* This might begin a variable expansion reference.  Make sure we
        -:14032:	     don't misrecognize chars inside the reference as =, := or +=.  */
        -:14033:	  char closeparen;
        -:14034:	  int count;
    #####:14035:	  c = *p++;
    #####:14036:	  if (c == '(')
branch  0 never executed
branch  1 never executed
    #####:14037:	    closeparen = ')';
    #####:14038:	  else if (c == '{')
branch  0 never executed
branch  1 never executed
    #####:14039:	    closeparen = '}';
        -:14040:	  else
    #####:14041:	    continue;		/* Nope.  */
        -:14042:
        -:14043:	  /* P now points past the opening paren or brace.
        -:14044:	     Count parens or braces until it is matched.  */
    #####:14045:	  count = 0;
    #####:14046:	  for (; *p != '\0'; ++p)
branch  0 never executed
branch  1 never executed
        -:14047:	    {
    #####:14048:	      if (*p == c)
branch  0 never executed
branch  1 never executed
    #####:14049:		++count;
    #####:14050:	      else if (*p == closeparen && --count < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:14051:		{
    #####:14052:		  ++p;
    #####:14053:		  break;
        -:14054:		}
        -:14055:	    }
        -:14056:	}
        -:14057:    }
        -:14058:
      462:14059:  beg = next_token (line);
call    0 returned 462
      924:14060:  while (end > beg && isblank (end[-1]))
branch  0 taken 924 (fallthrough)
branch  1 taken 0
branch  2 taken 462
branch  3 taken 462 (fallthrough)
      462:14061:    --end;
      462:14062:  p = next_token (p);
call    0 returned 462
        -:14063:
        -:14064:  /* Expand the name, so "$(foo)bar = baz" works.  */
      462:14065:  name = (char *) alloca (end - beg + 1);
      462:14066:  bcopy (beg, name, end - beg);
      462:14067:  name[end - beg] = '\0';
      462:14068:  expanded_name = allocated_variable_expand (name);
call    0 returned 462
        -:14069:
      462:14070:  if (expanded_name[0] == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 462
        -:14071:    {
    #####:14072:      if (filename == 0)
branch  0 never executed
branch  1 never executed
    #####:14073:	fatal ("empty variable name");
call    0 never executed
        -:14074:      else
    #####:14075:	makefile_fatal (filename, lineno, "empty variable name");
call    0 never executed
        -:14076:    }
        -:14077:
        -:14078:  /* Calculate the variable's new value in VALUE.  */
        -:14079:
      462:14080:  switch (flavor)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 462
branch  3 taken 0
branch  4 taken 0
        -:14081:    {
    #####:14082:    case bogus:
        -:14083:      /* Should not be possible.  */
    #####:14084:      abort ();
call    0 never executed
        -:14085:      return 0;
    #####:14086:    case simple:
        -:14087:      /* A simple variable definition "var := value".  Expand the value.  */
    #####:14088:      value = variable_expand (p);
call    0 never executed
    #####:14089:      break;
      462:14090:    case recursive:
        -:14091:      /* A recursive variable definition "var = value".
        -:14092:	 The value is used verbatim.  */
      462:14093:      value = p;
      462:14094:      break;
    #####:14095:    case append:
        -:14096:      /* An appending variable definition "var += value".
        -:14097:	 Extract the old value and append the new one.  */
    #####:14098:      v = lookup_variable (expanded_name, strlen (expanded_name));
call    0 never executed
    #####:14099:      if (v == 0)
branch  0 never executed
branch  1 never executed
        -:14100:	{
        -:14101:	  /* There was no old value.
        -:14102:	     This becomes a normal recursive definition.  */
    #####:14103:	  value = p;
    #####:14104:	  flavor = recursive;
        -:14105:	}
        -:14106:      else
        -:14107:	{
        -:14108:	  /* Paste the old and new values together in VALUE.  */
        -:14109:
        -:14110:	  unsigned int oldlen, newlen;
        -:14111:
    #####:14112:	  if (v->recursive)
branch  0 never executed
branch  1 never executed
        -:14113:	    /* The previous definition of the variable was recursive.
        -:14114:	       The new value comes from the unexpanded old and new values.  */
    #####:14115:	    flavor = recursive;
        -:14116:	  else
        -:14117:	    /* The previous definition of the variable was simple.
        -:14118:	       The new value comes from the old value, which was expanded
        -:14119:	       when it was set; and from the expanded new value.  */
    #####:14120:	    p = variable_expand (p);
call    0 never executed
        -:14121:
    #####:14122:	  oldlen = strlen (v->value);
    #####:14123:	  newlen = strlen (p);
    #####:14124:	  value = (char *) alloca (oldlen + 1 + newlen + 1);
    #####:14125:	  bcopy (v->value, value, oldlen);
    #####:14126:	  value[oldlen] = ' ';
    #####:14127:	  bcopy (p, &value[oldlen + 1], newlen + 1);
        -:14128:	}
        -:14129:    }
        -:14130:
        -:14131:#ifdef __MSDOS__
        -:14132:  /* Many Unix Makefiles include a line saying "SHELL=/bin/sh", but
        -:14133:     non-Unix systems don't conform to this default configuration (in
        -:14134:     fact, most of them don't even have `/bin').  On the other hand,
        -:14135:     $SHELL in the environment, if set, points to the real pathname of
        -:14136:     the shell.
        -:14137:     Therefore, we generally won't let lines like "SHELL=/bin/sh" from
        -:14138:     the Makefile override $SHELL from the environment.  But first, we
        -:14139:     look for the basename of the shell in the directory where SHELL=
        -:14140:     points, and along the $PATH; if it is found in any of these places,
        -:14141:     we define $SHELL to be the actual pathname of the shell.  Thus, if
        -:14142:     you have bash.exe installed as d:/unix/bash.exe, and d:/unix is on
        -:14143:     your $PATH, then SHELL=/usr/local/bin/bash will have the effect of
        -:14144:     defining SHELL to be "d:/unix/bash.exe".  */
        -:14145:  if (origin == o_file
        -:14146:      && strcmp (expanded_name, "SHELL") == 0)
        -:14147:    {
        -:14148:      char shellpath[PATH_MAX];
        -:14149:      extern char * __dosexec_find_on_path (const char *, char *[], char *);
        -:14150:
        -:14151:      /* See if we can find "/bin/sh.exe", "/bin/sh.com", etc.  */
        -:14152:      if (__dosexec_find_on_path (value, (char **)0, shellpath))
        -:14153:	{
        -:14154:	  char *p;
        -:14155:
        -:14156:	  for (p = shellpath; *p; p++)
        -:14157:	    {
        -:14158:	      if (*p == '\\')
        -:14159:		*p = '/';
        -:14160:	    }
        -:14161:	  v = define_variable (expanded_name, strlen (expanded_name),
        -:14162:			       shellpath, origin, flavor == recursive);
        -:14163:	}
        -:14164:      else
        -:14165:	{
        -:14166:	  char *shellbase, *bslash;
        -:14167:	  struct variable *pathv = lookup_variable ("PATH", 4);
        -:14168:	  char *path_string;
        -:14169:	  char *fake_env[2];
        -:14170:	  size_t pathlen = 0;
        -:14171:
        -:14172:	  shellbase = rindex (value, '/');
        -:14173:	  bslash = rindex (value, '\\');
        -:14174:	  if (!shellbase || bslash > shellbase)
        -:14175:	    shellbase = bslash;
        -:14176:	  if (!shellbase && value[1] == ':')
        -:14177:	    shellbase = value + 1;
        -:14178:	  if (shellbase)
        -:14179:	    shellbase++;
        -:14180:	  else
        -:14181:	    shellbase = value;
        -:14182:
        -:14183:	  /* Search for the basename of the shell (with standard
        -:14184:	     executable extensions) along the $PATH.  */
        -:14185:	  if (pathv)
        -:14186:	    pathlen = strlen (pathv->value);
        -:14187:	  path_string = (char *)xmalloc (5 + pathlen + 2 + 1);
        -:14188:	  /* On MSDOS, current directory is considered as part of $PATH.  */
        -:14189:	  sprintf (path_string, "PATH=.;%s", pathv ? pathv->value : "");
        -:14190:	  fake_env[0] = path_string;
        -:14191:	  fake_env[1] = (char *)0;
        -:14192:	  if (__dosexec_find_on_path (shellbase, fake_env, shellpath))
        -:14193:	    {
        -:14194:	      char *p;
        -:14195:
        -:14196:	      for (p = shellpath; *p; p++)
        -:14197:		{
        -:14198:		  if (*p == '\\')
        -:14199:		    *p = '/';
        -:14200:		}
        -:14201:	      v = define_variable (expanded_name, strlen (expanded_name),
        -:14202:				   shellpath, origin, flavor == recursive);
        -:14203:	    }
        -:14204:	  else
        -:14205:	    v = lookup_variable (expanded_name, strlen (expanded_name));
        -:14206:
        -:14207:	  free (path_string);
        -:14208:	}
        -:14209:    }
        -:14210:  else
        -:14211:#endif /* __MSDOS__ */
        -:14212:
      462:14213:  v = define_variable (expanded_name, strlen (expanded_name),
call    0 returned 462
        -:14214:		       value, origin, flavor == recursive);
        -:14215:
      462:14216:  free (expanded_name);
        -:14217:
      462:14218:  return v;
        -:14219:}
        -:14220:
        -:14221:/* Print information for variable V, prefixing it with PREFIX.  */
        -:14222:
        -:14223:static void
function print_variable called 48895 returned 100% blocks executed 78%
    48895:14224:print_variable (v, prefix)
        -:14225:     register struct variable *v;
        -:14226:     char *prefix;
        -:14227:{
        -:14228:  char *origin;
        -:14229:
    48895:14230:  switch (v->origin)
branch  0 taken 23100
branch  1 taken 19251
branch  2 taken 770
branch  3 taken 384
branch  4 taken 0
branch  5 taken 0
branch  6 taken 5390
branch  7 taken 0
        -:14231:    {
    23100:14232:    case o_default:
    23100:14233:      origin = "default";
    23100:14234:      break;
    19251:14235:    case o_env:
    19251:14236:      origin = "environment";
    19251:14237:      break;
      770:14238:    case o_file:
      770:14239:      origin = "makefile";
      770:14240:      break;
      384:14241:    case o_env_override:
      384:14242:      origin = "environment under -e";
      384:14243:      break;
    #####:14244:    case o_command:
    #####:14245:      origin = "command line";
    #####:14246:      break;
    #####:14247:    case o_override:
    #####:14248:      origin = "`override' directive";
    #####:14249:      break;
     5390:14250:    case o_automatic:
     5390:14251:      origin = "automatic";
     5390:14252:      break;
    #####:14253:    case o_invalid:
        -:14254:    default:
    #####:14255:      abort ();
call    0 never executed
        -:14256:      break;
        -:14257:    }
    48895:14258:  printf ("# %s\n", origin);
call    0 returned 48895
        -:14259:
    48895:14260:  fputs (prefix, stdout);
call    0 returned 48895
        -:14261:
        -:14262:  /* Is this a `define'?  */
    48895:14263:  if (v->recursive && index (v->value, '\n') != 0)
branch  0 taken 46970 (fallthrough)
branch  1 taken 1925
branch  2 taken 0 (fallthrough)
branch  3 taken 46970
    #####:14264:    printf ("define %s\n%s\nendef\n", v->name, v->value);
call    0 never executed
        -:14265:  else
        -:14266:    {
        -:14267:      register char *p;
        -:14268:
    48895:14269:      printf ("%s %s= ", v->name, v->recursive ? "" : ":");
branch  0 taken 46970 (fallthrough)
branch  1 taken 1925
call    2 returned 48895
        -:14270:
        -:14271:      /* Check if the value is just whitespace.  */
    48895:14272:      p = next_token (v->value);
call    0 returned 48895
   48895*:14273:      if (p != v->value && *p == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 48895
branch  2 never executed
branch  3 never executed
        -:14274:	/* All whitespace.  */
    #####:14275:	printf ("$(subst ,,%s)", v->value);
call    0 never executed
    48895:14276:      else if (v->recursive)
branch  0 taken 46970 (fallthrough)
branch  1 taken 1925
    46970:14277:	fputs (v->value, stdout);
call    0 returned 46970
        -:14278:      else
        -:14279:	/* Double up dollar signs.  */
    74690:14280:	for (p = v->value; *p != '\0'; ++p)
branch  0 taken 72765
branch  1 taken 1925 (fallthrough)
        -:14281:	  {
    72765:14282:	    if (*p == '$')
branch  0 taken 0 (fallthrough)
branch  1 taken 72765
    #####:14283:	      putchar ('$');
call    0 never executed
    72765:14284:	    putchar (*p);
call    0 returned 72765
        -:14285:	  }
    48895:14286:      putchar ('\n');
call    0 returned 48895
        -:14287:    }
    48895:14288:}
        -:14289:
        -:14290:
        -:14291:/* Print all the variables in SET.  PREFIX is printed before
        -:14292:   the actual variable definitions (everything else is comments).  */
        -:14293:
        -:14294:static void
function print_variable_set called 385 returned 100% blocks executed 93%
      385:14295:print_variable_set (set, prefix)
        -:14296:     register struct variable_set *set;
        -:14297:     char *prefix;
        -:14298:{
        -:14299:  register unsigned int i, nvariables, per_bucket;
        -:14300:  register struct variable *v;
        -:14301:
      385:14302:  per_bucket = nvariables = 0;
   201740:14303:  for (i = 0; i < set->buckets; ++i)
branch  0 taken 201355
branch  1 taken 385 (fallthrough)
        -:14304:    {
   201355:14305:      register unsigned int this_bucket = 0;
        -:14306:
   250250:14307:      for (v = set->table[i]; v != 0; v = v->next)
branch  0 taken 48895
branch  1 taken 201355 (fallthrough)
        -:14308:	{
    48895:14309:	  ++this_bucket;
    48895:14310:	  print_variable (v, prefix);
call    0 returned 48895
        -:14311:	}
        -:14312:
   201355:14313:      nvariables += this_bucket;
   201355:14314:      if (this_bucket > per_bucket)
branch  0 taken 770 (fallthrough)
branch  1 taken 200585
      770:14315:	per_bucket = this_bucket;
        -:14316:    }
        -:14317:
      385:14318:  if (nvariables == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 385
    #####:14319:    puts ("# No variables.");
call    0 never executed
        -:14320:  else
        -:14321:    {
      385:14322:      printf ("# %u variables in %u hash buckets.\n",
call    0 returned 385
        -:14323:	      nvariables, set->buckets);
        -:14324:#ifndef	NO_FLOAT
      385:14325:      printf ("# average of %.1f variables per bucket, \
        -:14326:max %u in one bucket.\n",
      385:14327:	      (double) nvariables / (double) set->buckets,
call    0 returned 385
        -:14328:	      per_bucket);
        -:14329:#else
        -:14330:      {
        -:14331:	int f = (nvariables * 1000 + 5) / set->buckets;
        -:14332:	printf ("# average of %d.%d variables per bucket, \
        -:14333:max %u in one bucket.\n",
        -:14334:	      f/10, f%10,
        -:14335:	      per_bucket);
        -:14336:      }
        -:14337:#endif
        -:14338:    }
      385:14339:}
        -:14340:
        -:14341:
        -:14342:/* Print the data base of variables.  */
        -:14343:
        -:14344:void
function print_variable_data_base called 385 returned 100% blocks executed 100%
      385:14345:print_variable_data_base ()
        -:14346:{
      385:14347:  puts ("\n# Variables\n");
call    0 returned 385
        -:14348:
      385:14349:  print_variable_set (&global_variable_set, "");
call    0 returned 385
      385:14350:}
        -:14351:
        -:14352:
        -:14353:/* Print all the local variables of FILE.  */
        -:14354:
        -:14355:void
function print_file_variables called 0 returned 0% blocks executed 0%
    #####:14356:print_file_variables (file)
        -:14357:     struct file *file;
        -:14358:{
    #####:14359:  if (file->variables != 0)
branch  0 never executed
branch  1 never executed
    #####:14360:    print_variable_set (file->variables->set, "# ");
call    0 never executed
    #####:14361:}
        -:14362:
        -:14363:#ifdef WINDOWS32
        -:14364:void
        -:14365:sync_Path_environment(void)
        -:14366:{
        -:14367:    char* path = allocated_variable_expand("$(Path)");
        -:14368:    static char* environ_path = NULL;
        -:14369:
        -:14370:    if (!path)
        -:14371:        return;
        -:14372:
        -:14373:    /*
        -:14374:     * If done this before, don't leak memory unnecessarily.
        -:14375:     * Free the previous entry before allocating new one.
        -:14376:     */
        -:14377:    if (environ_path)
        -:14378:        free(environ_path);
        -:14379:
        -:14380:    /*
        -:14381:     * Create something WINDOWS32 world can grok
        -:14382:     */
        -:14383:    convert_Path_to_windows32(path, ';');
        -:14384:    environ_path = concat("Path", "=", path);
        -:14385:    putenv(environ_path);
        -:14386:    free(path);
        -:14387:}
        -:14388:#endif
        -:14389:
        -:14390:
        -:14391:
        -:14392:/*************************************************************
        -:14393:  ============================================================
        -:14394:  ************************************************************
        -:14395:  ============================================================
        -:14396:  ************************************************************
        -:14397:                         expand.c
        -:14398:  ************************************************************
        -:14399:  ============================================================
        -:14400:  ************************************************************
        -:14401:  ============================================================
        -:14402:  *************************************************************/
        -:14403:
        -:14404:/* Variable expansion functions for GNU Make.
        -:14405:Copyright (C) 1988, 89, 91, 92, 93, 95 Free Software Foundation, Inc.
        -:14406:This file is part of GNU Make.
        -:14407:
        -:14408:GNU Make is free software; you can redistribute it and/or modify
        -:14409:it under the terms of the GNU General Public License as published by
        -:14410:the Free Software Foundation; either version 2, or (at your option)
        -:14411:any later version.
        -:14412:
        -:14413:GNU Make is distributed in the hope that it will be useful,
        -:14414:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:14415:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:14416:GNU General Public License for more details.
        -:14417:
        -:14418:You should have received a copy of the GNU General Public License
        -:14419:along with GNU Make; see the file COPYING.  If not, write to
        -:14420:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:14421:
        -:14422:#include "make.h"
        -:14423:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -:14424:#include "job.h"
        -:14425:/* #include "commands.h"  <- modification by J.Ruthruff, 7/27 */
        -:14426:/* #include "variable.h"  <- modification by J.Ruthruff, 7/27 */
        -:14427:#undef stderr
        -:14428:#define stderr stdout
        -:14429:
        -:14430:/* The next two describe the variable output buffer.
        -:14431:   This buffer is used to hold the variable-expansion of a line of the
        -:14432:   makefile.  It is made bigger with realloc whenever it is too small.
        -:14433:   variable_buffer_length is the size currently allocated.
        -:14434:   variable_buffer is the address of the buffer.  */
        -:14435:
        -:14436:static unsigned int variable_buffer_length;
        -:14437:static char *variable_buffer;
        -:14438:
        -:14439:/* Subroutine of variable_expand and friends:
        -:14440:   The text to add is LENGTH chars starting at STRING to the variable_buffer.
        -:14441:   The text is added to the buffer at PTR, and the updated pointer into
        -:14442:   the buffer is returned as the value.  Thus, the value returned by
        -:14443:   each call to variable_buffer_output should be the first argument to
        -:14444:   the following call.  */
        -:14445:
        -:14446:char *
function variable_buffer_output called 21538 returned 100% blocks executed 100%
    21538:14447:variable_buffer_output (ptr, string, length)
        -:14448:     char *ptr, *string;
        -:14449:     unsigned int length;
        -:14450:{
    21538:14451:  register unsigned int newlen = length + (ptr - variable_buffer);
        -:14452:
    21538:14453:  if (newlen > variable_buffer_length)
branch  0 taken 39 (fallthrough)
branch  1 taken 21499
        -:14454:    {
       39:14455:      unsigned int offset = ptr - variable_buffer;
       39:14456:      variable_buffer_length = (newlen + 100 > 2 * variable_buffer_length
        -:14457:				? newlen + 100
       39:14458:				: 2 * variable_buffer_length);
       39:14459:      variable_buffer = (char *) xrealloc (variable_buffer,
call    0 returned 39
        -:14460:					   variable_buffer_length);
       39:14461:      ptr = variable_buffer + offset;
        -:14462:    }
        -:14463:
    21538:14464:  bcopy (string, ptr, length);
    21538:14465:  return ptr + length;
        -:14466:}
        -:14467:
        -:14468:/* Return a pointer to the beginning of the variable buffer.  */
        -:14469:
        -:14470:static char *
function initialize_variable_output called 14914 returned 100% blocks executed 100%
    14914:14471:initialize_variable_output ()
        -:14472:{
        -:14473:  /* If we don't have a variable output buffer yet, get one.  */
        -:14474:
    14914:14475:  if (variable_buffer == 0)
branch  0 taken 4562 (fallthrough)
branch  1 taken 10352
        -:14476:    {
     4562:14477:      variable_buffer_length = 200;
     4562:14478:      variable_buffer = (char *) xmalloc (variable_buffer_length);
call    0 returned 4562
     4562:14479:      variable_buffer[0] = '\0';
        -:14480:    }
        -:14481:
    14914:14482:  return variable_buffer;
        -:14483:}
        -:14484:
        -:14485:/* Recursively expand V.  The returned string is malloc'd.  */
        -:14486:
        -:14487:char *
function recursively_expand called 916 returned 100% blocks executed 57%
      916:14488:recursively_expand (v)
        -:14489:     register struct variable *v;
        -:14490:{
        -:14491:  char *value;
        -:14492:
      916:14493:  if (v->expanding)
branch  0 taken 0 (fallthrough)
branch  1 taken 916
        -:14494:    {
        -:14495:      /* Expanding V causes infinite recursion.  Lose.  */
    #####:14496:      if (reading_filename == 0)
branch  0 never executed
branch  1 never executed
    #####:14497:	fatal ("Recursive variable `%s' references itself (eventually)",
call    0 never executed
        -:14498:	       v->name);
        -:14499:      else
    #####:14500:	makefile_fatal
call    0 never executed
        -:14501:	  (reading_filename, *reading_lineno_ptr, 
        -:14502:	   "Recursive variable `%s' references itself (eventually)",
        -:14503:	   v->name);
        -:14504:    }
        -:14505:
      916:14506:  v->expanding = 1;
      916:14507:  value = allocated_variable_expand (v->value);
call    0 returned 916
      916:14508:  v->expanding = 0;
        -:14509:
      916:14510:  return value;
        -:14511:}
        -:14512:
        -:14513:/* Warn that NAME is an undefined variable.  */
        -:14514:
        -:14515:#ifdef __GNUC__
        -:14516:__inline
        -:14517:#endif
        -:14518:static void
function warn_undefined called 2361 returned 100% blocks executed 40%
     2361:14519:warn_undefined (name, length)
        -:14520:     char *name;
        -:14521:     unsigned int length;
        -:14522:{
     2361:14523:  if (warn_undefined_variables_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 2361
        -:14524:    {
        -:14525:      static const char warnmsg[] = "warning: undefined variable `%.*s'";
    #####:14526:      if (reading_filename != 0)
branch  0 never executed
branch  1 never executed
    #####:14527:	makefile_error (reading_filename, *reading_lineno_ptr,
call    0 never executed
        -:14528:			warnmsg, length, name);
        -:14529:      else
    #####:14530:	error (warnmsg, length, name);
call    0 never executed
        -:14531:    }
     2361:14532:}
        -:14533:
        -:14534:/* Expand a simple reference to variable NAME, which is LENGTH chars long.  */
        -:14535:
        -:14536:#ifdef __GNUC__
        -:14537:__inline
        -:14538:#endif
        -:14539:static char *
function reference_variable called 4086 returned 100% blocks executed 100%
     4086:14540:reference_variable (o, name, length)
        -:14541:     char *o;
        -:14542:     char *name;
        -:14543:     unsigned int length;
        -:14544:{
     4086:14545:  register struct variable *v = lookup_variable (name, length);
call    0 returned 4086
        -:14546:
     4086:14547:  if (v == 0)
branch  0 taken 2361 (fallthrough)
branch  1 taken 1725
     2361:14548:    warn_undefined (name, length);
call    0 returned 2361
        -:14549:
     4086:14550:  if (v != 0 && *v->value != '\0')
branch  0 taken 1725 (fallthrough)
branch  1 taken 2361
branch  2 taken 914 (fallthrough)
branch  3 taken 811
        -:14551:    {
      914:14552:      char *value = (v->recursive ? recursively_expand (v) : v->value);
branch  0 taken 910 (fallthrough)
branch  1 taken 4
call    2 returned 910
      914:14553:      o = variable_buffer_output (o, value, strlen (value));
call    0 returned 914
      914:14554:      if (v->recursive)
branch  0 taken 910 (fallthrough)
branch  1 taken 4
      910:14555:	free (value);
        -:14556:    }
        -:14557:
     4086:14558:  return o;
        -:14559:}
        -:14560:
        -:14561:/* Scan LINE for variable references and expansion-function calls.
        -:14562:   Build in `variable_buffer' the result of expanding the references and calls.
        -:14563:   Return the address of the resulting string, which is null-terminated
        -:14564:   and is valid only until the next time this function is called.  */
        -:14565:
        -:14566:char *
function variable_expand called 7457 returned 100% blocks executed 43%
     7457:14567:variable_expand (line)
        -:14568:     register char *line;
        -:14569:{
        -:14570:  register struct variable *v;
        -:14571:  register char *p, *o, *p1;
        -:14572:
     7457:14573:  p = line;
     7457:14574:  o = initialize_variable_output ();
call    0 returned 7457
        -:14575:
        -:14576:  while (1)
        -:14577:    {
        -:14578:      /* Copy all following uninteresting chars all at once to the
        -:14579:         variable output buffer, and skip them.  Uninteresting chars end
        -:14580:	 at the next $ or the end of the input.  */
        -:14581:
    18797:14582:      p1 = index (p, '$');
        -:14583:
    13127:14584:      o = variable_buffer_output (o, p, p1 != 0 ? p1 - p : strlen (p) + 1);
branch  0 taken 5670 (fallthrough)
branch  1 taken 7457
call    2 returned 13127
        -:14585:
    13127:14586:      if (p1 == 0)
branch  0 taken 7457 (fallthrough)
branch  1 taken 5670
     7457:14587:	break;
     5670:14588:      p = p1 + 1;
        -:14589:
        -:14590:      /* Dispatch on the char that follows the $.  */
        -:14591:
     5670:14592:      switch (*p)
branch  0 taken 0
branch  1 taken 5666
branch  2 taken 0
branch  3 taken 4
        -:14593:	{
    #####:14594:	case '$':
        -:14595:	  /* $$ seen means output one $ to the variable output buffer.  */
    #####:14596:	  o = variable_buffer_output (o, p, 1);
call    0 never executed
    #####:14597:	  break;
        -:14598:
     5666:14599:	case '(':
        -:14600:	case '{':
        -:14601:	  /* $(...) or ${...} is the general case of substitution.  */
        -:14602:	  {
     5666:14603:	    char openparen = *p;
    5666*:14604:	    char closeparen = (openparen == '(') ? ')' : '}';
branch  0 taken 5666 (fallthrough)
branch  1 taken 0
     5666:14605:	    register char *beg = p + 1;
     5666:14606:	    int free_beg = 0;
        -:14607:	    char *op, *begp;
        -:14608:	    char *end, *colon;
        -:14609:
     5666:14610:	    op = o;
     5666:14611:	    begp = p;
     5666:14612:	    if (handle_function (&op, &begp))
call    0 returned 5666
branch  1 taken 1580 (fallthrough)
branch  2 taken 4086
        -:14613:	      {
     1580:14614:		o = op;
     1580:14615:		p = begp;
     1580:14616:		break;
        -:14617:	      }
        -:14618:
        -:14619:	    /* Is there a variable reference inside the parens or braces?
        -:14620:	       If so, expand it before expanding the entire reference.  */
        -:14621:
     4086:14622:	    end = index (beg, closeparen);
     4086:14623:	    if (end == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 4086
        -:14624:	      {
        -:14625:		/* Unterminated variable reference.  */
    #####:14626:		if (reading_filename != 0)
branch  0 never executed
branch  1 never executed
    #####:14627:		  makefile_fatal (reading_filename, *reading_lineno_ptr,
call    0 never executed
        -:14628:				  "unterminated variable reference");
        -:14629:		else
    #####:14630:		  fatal ("unterminated variable reference");
call    0 never executed
        -:14631:	      }
     4086:14632:	    p1 = lindex (beg, end, '$');
call    0 returned 4086
     4086:14633:	    if (p1 != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 4086
        -:14634:	      {
        -:14635:		/* BEG now points past the opening paren or brace.
        -:14636:		   Count parens or braces until it is matched.  */
    #####:14637:		int count = 0;
    #####:14638:		for (p = beg; *p != '\0'; ++p)
branch  0 never executed
branch  1 never executed
        -:14639:		  {
    #####:14640:		    if (*p == openparen)
branch  0 never executed
branch  1 never executed
    #####:14641:		      ++count;
    #####:14642:		    else if (*p == closeparen && --count < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:14643:		      break;
        -:14644:		  }
        -:14645:		/* If COUNT is >= 0, there were unmatched opening parens
        -:14646:		   or braces, so we go to the simple case of a variable name
        -:14647:		   such as `$($(a)'.  */
    #####:14648:		if (count < 0)
branch  0 never executed
branch  1 never executed
        -:14649:		  {
    #####:14650:		    beg = expand_argument (beg, p); /* Expand the name.  */
call    0 never executed
    #####:14651:		    free_beg = 1; /* Remember to free BEG when finished.  */
    #####:14652:		    end = index (beg, '\0');
        -:14653:		  }
        -:14654:	      }
        -:14655:	    else
        -:14656:	      /* Advance P to the end of this reference.  After we are
        -:14657:                 finished expanding this one, P will be incremented to
        -:14658:                 continue the scan.  */
     4086:14659:	      p = end;
        -:14660:
        -:14661:	    /* This is not a reference to a built-in function and
        -:14662:	       any variable references inside are now expanded.
        -:14663:	       Is the resultant text a substitution reference?  */
        -:14664:
     4086:14665:	    colon = lindex (beg, end, ':');
call    0 returned 4086
     4086:14666:	    if (colon != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 4086
        -:14667:	      {
        -:14668:		/* This looks like a substitution reference: $(FOO:A=B).  */
        -:14669:		char *subst_beg, *subst_end, *replace_beg, *replace_end;
        -:14670:
    #####:14671:		subst_beg = colon + 1;
    #####:14672:		subst_end = index (subst_beg, '=');
    #####:14673:		if (subst_end == 0)
branch  0 never executed
branch  1 never executed
        -:14674:		  /* There is no = in sight.  Punt on the substitution
        -:14675:		     reference and treat this as a variable name containing
        -:14676:		     a colon, in the code below.  */
    #####:14677:		  colon = 0;
        -:14678:		else
        -:14679:		  {
    #####:14680:		    replace_beg = subst_end + 1;
    #####:14681:		    replace_end = end;
        -:14682:
        -:14683:		    /* Extract the variable name before the colon
        -:14684:		       and look up that variable.  */
    #####:14685:		    v = lookup_variable (beg, colon - beg);
call    0 never executed
    #####:14686:		    if (v == 0)
branch  0 never executed
branch  1 never executed
    #####:14687:		      warn_undefined (beg, colon - beg);
call    0 never executed
        -:14688:
    #####:14689:		    if (v != 0 && *v->value != '\0')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:14690:		      {
    #####:14691:			char *value = (v->recursive ? recursively_expand (v)
call    0 never executed
    #####:14692:				       : v->value);
branch  0 never executed
branch  1 never executed
        -:14693:			char *pattern, *percent;
    #####:14694:			if (free_beg)
branch  0 never executed
branch  1 never executed
        -:14695:			  {
    #####:14696:			    *subst_end = '\0';
    #####:14697:			    pattern = subst_beg;
        -:14698:			  }
        -:14699:			else
        -:14700:			  {
    #####:14701:			    pattern = (char *) alloca (subst_end - subst_beg
        -:14702:						       + 1);
    #####:14703:			    bcopy (subst_beg, pattern, subst_end - subst_beg);
    #####:14704:			    pattern[subst_end - subst_beg] = '\0';
        -:14705:			  }
    #####:14706:			percent = find_percent (pattern);
call    0 never executed
    #####:14707:			if (percent != 0)
branch  0 never executed
branch  1 never executed
        -:14708:			  {
        -:14709:			    char *replace;
    #####:14710:			    if (free_beg)
branch  0 never executed
branch  1 never executed
        -:14711:			      {
    #####:14712:				*replace_end = '\0';
    #####:14713:				replace = replace_beg;
        -:14714:			      }
        -:14715:			    else
        -:14716:			      {
    #####:14717:				replace = (char *) alloca (replace_end
        -:14718:							   - replace_beg
        -:14719:							   + 1);
    #####:14720:				bcopy (replace_beg, replace,
        -:14721:				       replace_end - replace_beg);
    #####:14722:				replace[replace_end - replace_beg] = '\0';
        -:14723:			      }
        -:14724:			    
    #####:14725:			    o = patsubst_expand (o, value, pattern, replace,
call    0 never executed
        -:14726:						 percent, (char *) 0);
        -:14727:			  }
        -:14728:			else
    #####:14729:			  o = subst_expand (o, value,
        -:14730:					    pattern, replace_beg,
    #####:14731:					    strlen (pattern),
    #####:14732:					    end - replace_beg,
call    0 never executed
        -:14733:					    0, 1);
    #####:14734:			if (v->recursive)
branch  0 never executed
branch  1 never executed
    #####:14735:			  free (value);
        -:14736:		      }
        -:14737:		  }
        -:14738:	      }
        -:14739:
     4086:14740:	    if (colon == 0)
branch  0 taken 4086 (fallthrough)
branch  1 taken 0
        -:14741:	      /* This is an ordinary variable reference.
        -:14742:		 Look up the value of the variable.  */
     4086:14743:		o = reference_variable (o, beg, end - beg);
call    0 returned 4086
        -:14744:
     4086:14745:	  if (free_beg)
branch  0 taken 0 (fallthrough)
branch  1 taken 4086
    #####:14746:	    free (beg);
        -:14747:	  }
     4086:14748:	  break;
        -:14749:
    #####:14750:	case '\0':
    #####:14751:	  break;
        -:14752:
        4:14753:	default:
        4:14754:	  if (isblank (p[-1]))
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:14755:	    break;
        -:14756:
        -:14757:	  /* A $ followed by a random char is a variable reference:
        -:14758:	     $a is equivalent to $(a).  */
        -:14759:	  {
        -:14760:	    /* We could do the expanding here, but this way
        -:14761:	       avoids code repetition at a small performance cost.  */
        -:14762:	    char name[5];
        4:14763:	    name[0] = '$';
        4:14764:	    name[1] = '(';
        4:14765:	    name[2] = *p;
        4:14766:	    name[3] = ')';
        4:14767:	    name[4] = '\0';
        4:14768:	    p1 = allocated_variable_expand (name);
call    0 returned 4
        4:14769:	    o = variable_buffer_output (o, p1, strlen (p1));
call    0 returned 4
        4:14770:	    free (p1);
        -:14771:	  }
        -:14772:
        4:14773:	  break;
        -:14774:	}      
        -:14775:
     5670:14776:      if (*p == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 5670
    #####:14777:	break;
        -:14778:      else
     5670:14779:	++p;
        -:14780:    }
        -:14781:
     7457:14782:  (void) variable_buffer_output (o, "", 1);
call    0 returned 7457
     7457:14783:  return initialize_variable_output ();
call    0 returned 7457
        -:14784:}
        -:14785:
        -:14786:/* Expand an argument for an expansion function.
        -:14787:   The text starting at STR and ending at END is variable-expanded
        -:14788:   into a null-terminated string that is returned as the value.
        -:14789:   This is done without clobbering `variable_buffer' or the current
        -:14790:   variable-expansion that is in progress.  */
        -:14791:
        -:14792:char *
function expand_argument called 1580 returned 100% blocks executed 80%
     1580:14793:expand_argument (str, end)
        -:14794:     char *str, *end;
        -:14795:{
        -:14796:  char *tmp;
        -:14797:
     1580:14798:  if (*end == '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 1580
    #####:14799:    tmp = str;
        -:14800:  else
        -:14801:    {
     1580:14802:      tmp = (char *) alloca (end - str + 1);
     1580:14803:      bcopy (str, tmp, end - str);
     1580:14804:      tmp[end - str] = '\0';
        -:14805:    }
        -:14806:
     1580:14807:  return allocated_variable_expand (tmp);
call    0 returned 1580
        -:14808:}
        -:14809:
        -:14810:/* Expand LINE for FILE.  Error messages refer to the file and line where
        -:14811:   FILE's commands were found.  Expansion uses FILE's variable set list.  */
        -:14812:
        -:14813:char *
function variable_expand_for_file called 3769 returned 100% blocks executed 100%
     3769:14814:variable_expand_for_file (line, file)
        -:14815:     char *line;
        -:14816:     register struct file *file;
        -:14817:{
        -:14818:  char *result;
        -:14819:  struct variable_set_list *save;
        -:14820:
     3769:14821:  if (file == 0)
branch  0 taken 3757 (fallthrough)
branch  1 taken 12
     3757:14822:    return variable_expand (line);
call    0 returned 3757
        -:14823:
       12:14824:  save = current_variable_set_list;
       12:14825:  current_variable_set_list = file->variables;
       12:14826:  reading_filename = file->cmds->filename;
       12:14827:  reading_lineno_ptr = &file->cmds->lineno;
       12:14828:  result = variable_expand (line);
call    0 returned 12
       12:14829:  current_variable_set_list = save;
       12:14830:  reading_filename = 0;
       12:14831:  reading_lineno_ptr = 0;
        -:14832:
       12:14833:  return result;
        -:14834:}
        -:14835:
        -:14836:/* Like variable_expand_for_file, but the returned string is malloc'd.
        -:14837:   This function is called a lot.  It wants to be efficient.  */
        -:14838:
        -:14839:char *
function allocated_variable_expand_for_file called 3769 returned 100% blocks executed 100%
     3769:14840:allocated_variable_expand_for_file (line, file)
        -:14841:     char *line;
        -:14842:     struct file *file;
        -:14843:{
        -:14844:  char *value;
        -:14845:
     3769:14846:  char *obuf = variable_buffer;
     3769:14847:  unsigned int olen = variable_buffer_length;
        -:14848:
     3769:14849:  variable_buffer = 0;
        -:14850:
     3769:14851:  value = variable_expand_for_file (line, file);
call    0 returned 3769
        -:14852:
        -:14853:#if 0
        -:14854:  /* Waste a little memory and save time.  */
        -:14855:  value = xrealloc (value, strlen (value))
        -:14856:#endif
        -:14857:
     3769:14858:  variable_buffer = obuf;
     3769:14859:  variable_buffer_length = olen;
        -:14860:
     3769:14861:  return value;
        -:14862:}
        -:14863:
        -:14864:
        -:14865:
        -:14866:/*************************************************************
        -:14867:  ============================================================
        -:14868:  ************************************************************
        -:14869:  ============================================================
        -:14870:  ************************************************************
        -:14871:                         function.c
        -:14872:  ************************************************************
        -:14873:  ============================================================
        -:14874:  ************************************************************
        -:14875:  ============================================================
        -:14876:  *************************************************************/
        -:14877:
        -:14878:/* Variable function expansion for GNU Make.
        -:14879:Copyright (C) 1988,89,91,92,93,94,95,96,97 Free Software Foundation, Inc.
        -:14880:This file is part of GNU Make.
        -:14881:
        -:14882:GNU Make is free software; you can redistribute it and/or modify
        -:14883:it under the terms of the GNU General Public License as published by
        -:14884:the Free Software Foundation; either version 2, or (at your option)
        -:14885:any later version.
        -:14886:
        -:14887:GNU Make is distributed in the hope that it will be useful,
        -:14888:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:14889:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:14890:GNU General Public License for more details.
        -:14891:
        -:14892:You should have received a copy of the GNU General Public License
        -:14893:along with GNU Make; see the file COPYING.  If not, write to
        -:14894:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:14895:
        -:14896:#include "make.h"
        -:14897:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -:14898:/* #include "variable.h"  <- modification by J.Ruthruff, 7/27 */
        -:14899:/* #include "dep.h"  <- modification by J.Ruthruff, 7/27 */
        -:14900:#include "job.h"
        -:14901:/* #include "commands.h"  <- modification by J.Ruthruff, 7/27 */
        -:14902:#undef stderr
        -:14903:#define stderr stdout
        -:14904:
        -:14905:#ifdef _AMIGA
        -:14906:#include "amiga.h"
        -:14907:#undef stderr
        -:14908:#define stderr stdout
        -:14909:#endif
        -:14910:#ifdef WINDOWS32
        -:14911:#include <windows.h>
        -:14912:#include <io.h>
        -:14913:#include "sub_proc.h"
        -:14914:#undef stderr
        -:14915:#define stderr stdout
        -:14916:#endif
        -:14917:
        -:14918:static char *string_glob PARAMS ((char *line));
        -:14919:
        -:14920:/* Store into VARIABLE_BUFFER at O the result of scanning TEXT and replacing
        -:14921:   each occurrence of SUBST with REPLACE. TEXT is null-terminated.  SLEN is
        -:14922:   the length of SUBST and RLEN is the length of REPLACE.  If BY_WORD is
        -:14923:   nonzero, substitutions are done only on matches which are complete
        -:14924:   whitespace-delimited words.  If SUFFIX_ONLY is nonzero, substitutions are
        -:14925:   done only at the ends of whitespace-delimited words.  */
        -:14926:
        -:14927:char *
function subst_expand called 0 returned 0% blocks executed 0%
    #####:14928:subst_expand (o, text, subst, replace, slen, rlen, by_word, suffix_only)
        -:14929:     char *o;
        -:14930:     char *text;
        -:14931:     char *subst, *replace;
        -:14932:     unsigned int slen, rlen;
        -:14933:     int by_word, suffix_only;
        -:14934:{
    #####:14935:  register char *t = text;
        -:14936:  register char *p;
        -:14937:
    #####:14938:  if (slen == 0 && !by_word && !suffix_only)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:14939:    {
        -:14940:      /* The first occurrence of "" in any string is its end.  */
    #####:14941:      o = variable_buffer_output (o, t, strlen (t));
call    0 never executed
    #####:14942:      if (rlen > 0)
branch  0 never executed
branch  1 never executed
    #####:14943:	o = variable_buffer_output (o, replace, rlen);
call    0 never executed
    #####:14944:      return o;
        -:14945:    }
        -:14946:
        -:14947:  do
        -:14948:    {
    #####:14949:      if ((by_word | suffix_only) && slen == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:14950:	/* When matching by words, the empty string should match
        -:14951:	   the end of each word, rather than the end of the whole text.  */
    #####:14952:	p = end_of_token (next_token (t));
call    0 never executed
call    1 never executed
        -:14953:      else
        -:14954:	{
    #####:14955:	  p = sindex (t, 0, subst, slen);
call    0 never executed
    #####:14956:	  if (p == 0)
branch  0 never executed
branch  1 never executed
        -:14957:	    {
        -:14958:	      /* No more matches.  Output everything left on the end.  */
    #####:14959:	      o = variable_buffer_output (o, t, strlen (t));
call    0 never executed
    #####:14960:	      return o;
        -:14961:	    }
        -:14962:	}
        -:14963:
        -:14964:      /* Output everything before this occurrence of the string to replace.  */
    #####:14965:      if (p > t)
branch  0 never executed
branch  1 never executed
    #####:14966:	o = variable_buffer_output (o, t, p - t);
call    0 never executed
        -:14967:
        -:14968:      /* If we're substituting only by fully matched words,
        -:14969:	 or only at the ends of words, check that this case qualifies.  */
    #####:14970:      if ((by_word
branch  0 never executed
branch  1 never executed
    #####:14971:	   && ((p > t && !isblank (p[-1]))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:14972:	       || (p[slen] != '\0' && !isblank (p[slen]))))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:14973:	  || (suffix_only
branch  0 never executed
branch  1 never executed
    #####:14974:	      && (p[slen] != '\0' && !isblank (p[slen]))))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:14975:	/* Struck out.  Output the rest of the string that is
        -:14976:	   no longer to be replaced.  */
    #####:14977:	o = variable_buffer_output (o, subst, slen);
call    0 never executed
    #####:14978:      else if (rlen > 0)
branch  0 never executed
branch  1 never executed
        -:14979:	/* Output the replacement string.  */
    #####:14980:	o = variable_buffer_output (o, replace, rlen);
call    0 never executed
        -:14981:
        -:14982:      /* Advance T past the string to be replaced.  */
    #####:14983:      t = p + slen;
    #####:14984:    } while (*t != '\0');
branch  0 never executed
branch  1 never executed
        -:14985:
    #####:14986:  return o;
        -:14987:}
        -:14988:
        -:14989:
        -:14990:/* Store into VARIABLE_BUFFER at O the result of scanning TEXT
        -:14991:   and replacing strings matching PATTERN with REPLACE.
        -:14992:   If PATTERN_PERCENT is not nil, PATTERN has already been
        -:14993:   run through find_percent, and PATTERN_PERCENT is the result.
        -:14994:   If REPLACE_PERCENT is not nil, REPLACE has already been
        -:14995:   run through find_percent, and REPLACE_PERCENT is the result.  */
        -:14996:
        -:14997:char *
function patsubst_expand called 0 returned 0% blocks executed 0%
    #####:14998:patsubst_expand (o, text, pattern, replace, pattern_percent, replace_percent)
        -:14999:     char *o;
        -:15000:     char *text;
        -:15001:     register char *pattern, *replace;
        -:15002:     register char *pattern_percent, *replace_percent;
        -:15003:{
        -:15004:  unsigned int pattern_prepercent_len, pattern_postpercent_len;
        -:15005:  unsigned int replace_prepercent_len, replace_postpercent_len;
        -:15006:  char *t;
        -:15007:  unsigned int len;
    #####:15008:  int doneany = 0;
        -:15009:
        -:15010:  /* We call find_percent on REPLACE before checking PATTERN so that REPLACE
        -:15011:     will be collapsed before we call subst_expand if PATTERN has no %.  */
    #####:15012:  if (replace_percent == 0)
branch  0 never executed
branch  1 never executed
    #####:15013:    replace_percent = find_percent (replace);
call    0 never executed
    #####:15014:  if (replace_percent != 0)
branch  0 never executed
branch  1 never executed
        -:15015:    {
        -:15016:      /* Record the length of REPLACE before and after the % so
        -:15017:	 we don't have to compute these lengths more than once.  */
    #####:15018:      replace_prepercent_len = replace_percent - replace;
    #####:15019:      replace_postpercent_len = strlen (replace_percent + 1);
        -:15020:    }
        -:15021:  else
        -:15022:    /* We store the length of the replacement
        -:15023:       so we only need to compute it once.  */
    #####:15024:    replace_prepercent_len = strlen (replace);
        -:15025:
    #####:15026:  if (pattern_percent == 0)
branch  0 never executed
branch  1 never executed
    #####:15027:    pattern_percent = find_percent (pattern);
call    0 never executed
    #####:15028:  if (pattern_percent == 0)
branch  0 never executed
branch  1 never executed
        -:15029:    /* With no % in the pattern, this is just a simple substitution.  */
    #####:15030:    return subst_expand (o, text, pattern, replace,
    #####:15031:			 strlen (pattern), strlen (replace), 1, 0);
call    0 never executed
        -:15032:
        -:15033:  /* Record the length of PATTERN before and after the %
        -:15034:     so we don't have to compute it more than once.  */
    #####:15035:  pattern_prepercent_len = pattern_percent - pattern;
    #####:15036:  pattern_postpercent_len = strlen (pattern_percent + 1);
        -:15037:
    #####:15038:  while ((t = find_next_token (&text, &len)) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15039:    {
    #####:15040:      int fail = 0;
        -:15041:
        -:15042:      /* Is it big enough to match?  */
    #####:15043:      if (len < pattern_prepercent_len + pattern_postpercent_len)
branch  0 never executed
branch  1 never executed
    #####:15044:	fail = 1;
        -:15045:
        -:15046:      /* Does the prefix match? */
    #####:15047:      if (!fail && pattern_prepercent_len > 0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15048:	  && (*t != *pattern
branch  0 never executed
branch  1 never executed
    #####:15049:	      || t[pattern_prepercent_len - 1] != pattern_percent[-1]
branch  0 never executed
branch  1 never executed
    #####:15050:	      || strncmp (t + 1, pattern + 1, pattern_prepercent_len - 1)))
branch  0 never executed
branch  1 never executed
    #####:15051:	fail = 1;
        -:15052:
        -:15053:      /* Does the suffix match? */
    #####:15054:      if (!fail && pattern_postpercent_len > 0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15055:	  && (t[len - 1] != pattern_percent[pattern_postpercent_len]
branch  0 never executed
branch  1 never executed
    #####:15056:	      || t[len - pattern_postpercent_len] != pattern_percent[1]
branch  0 never executed
branch  1 never executed
    #####:15057:	      || strncmp (&t[len - pattern_postpercent_len],
    #####:15058:			  &pattern_percent[1], pattern_postpercent_len - 1)))
branch  0 never executed
branch  1 never executed
    #####:15059:	fail = 1;
        -:15060:
    #####:15061:      if (fail)
branch  0 never executed
branch  1 never executed
        -:15062:	/* It didn't match.  Output the string.  */
    #####:15063:	o = variable_buffer_output (o, t, len);
call    0 never executed
        -:15064:      else
        -:15065:	{
        -:15066:	  /* It matched.  Output the replacement.  */
        -:15067:
        -:15068:	  /* Output the part of the replacement before the %.  */
    #####:15069:	  o = variable_buffer_output (o, replace, replace_prepercent_len);
call    0 never executed
        -:15070:
    #####:15071:	  if (replace_percent != 0)
branch  0 never executed
branch  1 never executed
        -:15072:	    {
        -:15073:	      /* Output the part of the matched string that
        -:15074:		 matched the % in the pattern.  */
    #####:15075:	      o = variable_buffer_output (o, t + pattern_prepercent_len,
        -:15076:					  len - (pattern_prepercent_len
    #####:15077:						 + pattern_postpercent_len));
call    0 never executed
        -:15078:	      /* Output the part of the replacement after the %.  */
    #####:15079:	      o = variable_buffer_output (o, replace_percent + 1,
call    0 never executed
        -:15080:					  replace_postpercent_len);
        -:15081:	    }
        -:15082:	}
        -:15083:
        -:15084:      /* Output a space, but not if the replacement is "".  */
    #####:15085:      if (fail || replace_prepercent_len > 0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15086:	  || (replace_percent != 0 && len + replace_postpercent_len > 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:15087:	{
    #####:15088:	  o = variable_buffer_output (o, " ", 1);
call    0 never executed
    #####:15089:	  doneany = 1;
        -:15090:	}
        -:15091:    }
    #####:15092:  if (doneany)
branch  0 never executed
branch  1 never executed
        -:15093:    /* Kill the last space.  */
    #####:15094:    --o;
        -:15095:
    #####:15096:  return o;
        -:15097:}
        -:15098:
        -:15099:/* Handle variable-expansion-time functions such as $(dir foo/bar) ==> foo/  */
        -:15100:
        -:15101:/* These enumeration constants distinguish the
        -:15102:   various expansion-time built-in functions.  */
        -:15103:
        -:15104:enum function
        -:15105:  {
        -:15106:    function_subst,
        -:15107:    function_addsuffix,
        -:15108:    function_addprefix,
        -:15109:    function_dir,
        -:15110:    function_notdir,
        -:15111:    function_suffix,
        -:15112:    function_basename,
        -:15113:    function_wildcard,
        -:15114:    function_firstword,
        -:15115:    function_word,
        -:15116:    function_words,
        -:15117:    function_wordlist,
        -:15118:    function_findstring,
        -:15119:    function_strip,
        -:15120:    function_join,
        -:15121:    function_patsubst,
        -:15122:    function_filter,
        -:15123:    function_filter_out,
        -:15124:    function_foreach,
        -:15125:    function_sort,
        -:15126:    function_origin,
        -:15127:    function_shell,
        -:15128:    function_invalid
        -:15129:  };
        -:15130:
        -:15131:/* Greater than the length of any function name.  */
        -:15132:#define MAXFUNCTIONLEN 11
        -:15133:
        -:15134:/* The function names and lengths of names, for looking them up.  */
        -:15135:
        -:15136:static struct
        -:15137:  {
        -:15138:    char *name;
        -:15139:    unsigned int len;
        -:15140:    enum function function;
        -:15141:  } function_table[] =
        -:15142:  {
        -:15143:    { "subst", 5, function_subst },
        -:15144:    { "addsuffix", 9, function_addsuffix },
        -:15145:    { "addprefix", 9, function_addprefix },
        -:15146:    { "dir", 3, function_dir },
        -:15147:    { "notdir", 6, function_notdir },
        -:15148:    { "suffix", 6, function_suffix },
        -:15149:    { "basename", 8, function_basename },
        -:15150:    { "wildcard", 8, function_wildcard },
        -:15151:    { "firstword", 9, function_firstword },
        -:15152:    { "word", 4, function_word },
        -:15153:    { "words", 5, function_words },
        -:15154:    { "wordlist", 8, function_wordlist },
        -:15155:    { "findstring", 10, function_findstring },
        -:15156:    { "strip", 5, function_strip },
        -:15157:    { "join", 4, function_join },
        -:15158:    { "patsubst", 8, function_patsubst },
        -:15159:    { "filter", 6, function_filter },
        -:15160:    { "filter-out", 10, function_filter_out },
        -:15161:    { "foreach", 7, function_foreach },
        -:15162:    { "sort", 4, function_sort },
        -:15163:    { "origin", 6, function_origin },
        -:15164:    { "shell", 5, function_shell },
        -:15165:    { 0, 0, function_invalid }
        -:15166:  };
        -:15167:
        -:15168:/* Return 1 if PATTERN matches WORD, 0 if not.  */
        -:15169:
        -:15170:int
function pattern_matches called 0 returned 0% blocks executed 0%
    #####:15171:pattern_matches (pattern, percent, word)
        -:15172:     register char *pattern, *percent, *word;
        -:15173:{
        -:15174:  unsigned int sfxlen, wordlen;
        -:15175:
    #####:15176:  if (percent == 0)
branch  0 never executed
branch  1 never executed
        -:15177:    {
    #####:15178:      unsigned int len = strlen (pattern) + 1;
    #####:15179:      char *new = (char *) alloca (len);
    #####:15180:      bcopy (pattern, new, len);
    #####:15181:      pattern = new;
    #####:15182:      percent = find_percent (pattern);
call    0 never executed
    #####:15183:      if (percent == 0)
branch  0 never executed
branch  1 never executed
    #####:15184:	return streq (pattern, word);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:15185:    }
        -:15186:
    #####:15187:  sfxlen = strlen (percent + 1);
    #####:15188:  wordlen = strlen (word);
        -:15189:
    #####:15190:  if (wordlen < (percent - pattern) + sfxlen
branch  0 never executed
branch  1 never executed
    #####:15191:      || strncmp (pattern, word, percent - pattern))
branch  0 never executed
branch  1 never executed
    #####:15192:    return 0;
        -:15193:
    #####:15194:  return !strcmp (percent + 1, word + (wordlen - sfxlen));
        -:15195:}
        -:15196:
        -:15197:int shell_function_pid = 0, shell_function_completed;
        -:15198:
        -:15199:/* Perform the function specified by FUNCTION on the text at TEXT.
        -:15200:   END is points to the end of the argument text (exclusive).
        -:15201:   The output is written into VARIABLE_BUFFER starting at O.  */
        -:15202:
        -:15203:/* Note this absorbs a semicolon and is safe to use in conditionals.  */
        -:15204:#define BADARGS(func)                                                         \
        -:15205:  if (reading_filename != 0)                                                  \
        -:15206:    makefile_fatal (reading_filename, *reading_lineno_ptr,                    \
        -:15207:		    "insufficient arguments to function `%s'",                \
        -:15208:		    func);                                                    \
        -:15209:  else                                                                        \
        -:15210:    fatal ("insufficient arguments to function `%s'", func)
        -:15211:
        -:15212:static char *
function expand_function called 1580 returned 100% blocks executed 4%
     1580:15213:expand_function (o, function, text, end)
        -:15214:     char *o;
        -:15215:     enum function function;
        -:15216:     char *text;
        -:15217:     char *end;
        -:15218:{
        -:15219:  char *p, *p2, *p3;
        -:15220:  unsigned int i, j, len;
     1580:15221:  int doneany = 0;
        -:15222:  int count;
    1580*:15223:  char endparen = *end, startparen = *end == ')' ? '(' : '{';
branch  0 taken 1580 (fallthrough)
branch  1 taken 0
        -:15224:
     1580:15225:  switch (function)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 1580
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
        -:15226:    {
    #####:15227:    default:
    #####:15228:      abort ();
call    0 never executed
        -:15229:      break;
        -:15230:
        -:15231:#ifndef VMS /* not supported for vms yet */
    #####:15232:    case function_shell:
        -:15233:      {
        -:15234:#ifdef WINDOWS32
        -:15235:	SECURITY_ATTRIBUTES saAttr;
        -:15236:	HANDLE hIn;
        -:15237:	HANDLE hErr;
        -:15238:	HANDLE hChildOutRd;
        -:15239:	HANDLE hChildOutWr;
        -:15240:	HANDLE hProcess;
        -:15241:#endif
        -:15242:#ifdef __MSDOS__
        -:15243:	FILE *fpipe;
        -:15244:#endif
        -:15245:	char **argv;
        -:15246:	char *error_prefix;
        -:15247:#ifndef _AMIGA
        -:15248:	char **envp;
        -:15249:	int pipedes[2];
        -:15250:	int pid;
        -:15251:#endif
        -:15252:
        -:15253:	/* Expand the command line.  */
    #####:15254:	text = expand_argument (text, end);
call    0 never executed
        -:15255:
        -:15256:#ifndef __MSDOS__
        -:15257:	/* Construct the argument list.  */
    #####:15258:	argv = construct_command_argv (text,
call    0 never executed
        -:15259:				       (char **) NULL, (struct file *) 0);
    #####:15260:	if (argv == 0)
branch  0 never executed
branch  1 never executed
    #####:15261:	  break;
        -:15262:#endif
        -:15263:
        -:15264:#ifndef _AMIGA
        -:15265:	/* Using a target environment for `shell' loses in cases like:
        -:15266:		export var = $(shell echo foobie)
        -:15267:	   because target_environment hits a loop trying to expand $(var)
        -:15268:	   to put it in the environment.  This is even more confusing when
        -:15269:	   var was not explicitly exported, but just appeared in the
        -:15270:	   calling environment.  */
        -:15271:#if 1
    #####:15272:	envp = environ;
        -:15273:#else
        -:15274:	/* Construct the environment.  */
        -:15275:	envp = target_environment ((struct file *) 0);
        -:15276:#endif
        -:15277:#endif  /* Not Amiga.  */
        -:15278:
        -:15279:	/* For error messages.  */
    #####:15280:	if (reading_filename != 0)
branch  0 never executed
branch  1 never executed
        -:15281:	  {
    #####:15282:	    error_prefix = (char *) alloca (strlen (reading_filename) + 100);
    #####:15283:	    sprintf (error_prefix,
        -:15284:		     "%s:%u: ", reading_filename, *reading_lineno_ptr);
        -:15285:	  }
        -:15286:	else
    #####:15287:	  error_prefix = "";
        -:15288:
        -:15289:#ifndef _AMIGA
        -:15290:# ifdef WINDOWS32
        -:15291:	saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
        -:15292:	saAttr.bInheritHandle = TRUE;
        -:15293:	saAttr.lpSecurityDescriptor = NULL;
        -:15294:
        -:15295:	if (DuplicateHandle(GetCurrentProcess(),
        -:15296:			    GetStdHandle(STD_INPUT_HANDLE),
        -:15297:			    GetCurrentProcess(),
        -:15298:			    &hIn,
        -:15299:			    0,
        -:15300:			    TRUE,
        -:15301:			    DUPLICATE_SAME_ACCESS) == FALSE) {
        -:15302:	  fatal("create_child_process: DuplicateHandle(In) failed (e=%d)\n",
        -:15303:		GetLastError());
        -:15304:	}
        -:15305:	if (DuplicateHandle(GetCurrentProcess(),
        -:15306:			    GetStdHandle(STD_ERROR_HANDLE),
        -:15307:			    GetCurrentProcess(),
        -:15308:			    &hErr,
        -:15309:			    0,
        -:15310:			    TRUE,
        -:15311:			    DUPLICATE_SAME_ACCESS) == FALSE) {
        -:15312:	  fatal("create_child_process: DuplicateHandle(Err) failed (e=%d)\n",
        -:15313:		GetLastError());
        -:15314:	}
        -:15315:
        -:15316:	if (!CreatePipe(&hChildOutRd, &hChildOutWr, &saAttr, 0))
        -:15317:	  fatal("CreatePipe() failed (e=%d)\n", GetLastError());
        -:15318:
        -:15319:	hProcess = process_init_fd(hIn, hChildOutWr, hErr);
        -:15320:
        -:15321:	if (!hProcess)
        -:15322:	  fatal("expand_function: process_init_fd() failed\n");
        -:15323:	else
        -:15324:	  process_register(hProcess);
        -:15325:
        -:15326:	/* make sure that CreateProcess() has Path it needs */
        -:15327:	sync_Path_environment();
        -:15328:
        -:15329:	if (!process_begin(hProcess, argv, envp, argv[0], NULL))
        -:15330:		pid = (int) hProcess;
        -:15331:	else
        -:15332:		fatal("expand_function: unable to launch process (e=%d)\n",
        -:15333:		      process_last_err(hProcess));
        -:15334:
        -:15335:	/* set up to read data from child */
        -:15336:	pipedes[0] = _open_osfhandle((long) hChildOutRd, O_RDONLY);
        -:15337:
        -:15338:	/* this will be closed almost right away */
        -:15339:	pipedes[1] = _open_osfhandle((long) hChildOutWr, O_APPEND);
        -:15340:# else /* WINDOWS32 */
        -:15341:#  ifdef __MSDOS__
        -:15342:	{
        -:15343:	  /* MSDOS can't fork, but it has `popen'.
        -:15344:	     (Bwt, why isn't `popen' used in all the versions?) */
        -:15345:	  struct variable *sh = lookup_variable ("SHELL", 5);
        -:15346:	  int e;
        -:15347:	  extern int dos_command_running, dos_status;
        -:15348:
        -:15349:	  /* Make sure not to bother processing an empty line.  */
        -:15350:	  while (isblank (*text))
        -:15351:	    ++text;
        -:15352:	  if (*text == '\0')
        -:15353:	    break;
        -:15354:
        -:15355:	  if (sh)
        -:15356:	    {
        -:15357:	      char buf[PATH_MAX + 7];
        -:15358:	      /* This makes sure $SHELL value is used by $(shell), even
        -:15359:		 though the target environment is not passed to it.  */
        -:15360:	      sprintf (buf, "SHELL=%s", sh->value);
        -:15361:	      putenv (buf);
        -:15362:	    }
        -:15363:
        -:15364:	  e = errno;
        -:15365:	  errno = 0;
        -:15366:	  dos_command_running = 1;
        -:15367:	  dos_status = 0;
        -:15368:	  fpipe = popen (text, "rt");
        -:15369:	  dos_command_running = 0;
        -:15370:	  if (!fpipe || dos_status)
        -:15371:	    {
        -:15372:	      pipedes[0] = -1;
        -:15373:	      pid = -1;
        -:15374:	      if (dos_status)
        -:15375:		errno = EINTR;
        -:15376:	      else if (errno == 0)
        -:15377:		errno = ENOMEM;
        -:15378:	      shell_function_completed = -1;
        -:15379:	    }
        -:15380:	  else
        -:15381:	    {
        -:15382:	      pipedes[0] = fileno (fpipe);
        -:15383:	      pid = 42;
        -:15384:	      errno = e;
        -:15385:	      shell_function_completed = 1;
        -:15386:	    }
        -:15387:	}
        -:15388:	if (pipedes[0] < 0)
        -:15389:#  else /* ! __MSDOS__ */
    #####:15390:	if (pipe (pipedes) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15391:#  endif /* __MSDOS__ */
        -:15392:	  {
    #####:15393:	    perror_with_name (error_prefix, "pipe");
call    0 never executed
    #####:15394:	    break;
        -:15395:	  }
        -:15396:
        -:15397:#  ifndef  __MSDOS__
    #####:15398:	pid = vfork ();
call    0 never executed
    #####:15399:	if (pid < 0)
branch  0 never executed
branch  1 never executed
    #####:15400:	  perror_with_name (error_prefix, "fork");
call    0 never executed
    #####:15401:	else if (pid == 0)
branch  0 never executed
branch  1 never executed
    #####:15402:	  child_execute_job (0, pipedes[1], argv, envp);
call    0 never executed
        -:15403:	else
        -:15404:#  endif /* ! __MSDOS__ */
        -:15405:# endif /* WINDOWS32 */
        -:15406:	  {
        -:15407:	    /* We are the parent.  */
        -:15408:
        -:15409:	    char *buffer;
        -:15410:	    unsigned int maxlen;
        -:15411:	    int cc;
        -:15412:#if 0
        -:15413:	    for (i = 0; envp[i] != 0; ++i)
        -:15414:	      free (envp[i]);
        -:15415:	    free ((char *) envp);
        -:15416:#endif
        -:15417:
        -:15418:	    /* Record the PID for reap_children.  */
    #####:15419:	    shell_function_pid = pid;
        -:15420:#ifndef  __MSDOS__
    #####:15421:	    shell_function_completed = 0;
        -:15422:
        -:15423:	    /* Free the storage only the child needed.  */
    #####:15424:	    free (argv[0]);
    #####:15425:	    free ((char *) argv);
        -:15426:
        -:15427:	    /* Close the write side of the pipe.  */
    #####:15428:	    (void) close (pipedes[1]);
call    0 never executed
        -:15429:#endif
        -:15430:
        -:15431:	    /* Set up and read from the pipe.  */
        -:15432:
    #####:15433:	    maxlen = 200;
    #####:15434:	    buffer = (char *) xmalloc (maxlen + 1);
call    0 never executed
        -:15435:
        -:15436:	    /* Read from the pipe until it gets EOF.  */
    #####:15437:	    i = 0;
        -:15438:	    do
        -:15439:	      {
    #####:15440:		if (i == maxlen)
branch  0 never executed
branch  1 never executed
        -:15441:		  {
    #####:15442:		    maxlen += 512;
    #####:15443:		    buffer = (char *) xrealloc (buffer, maxlen + 1);
call    0 never executed
        -:15444:		  }
        -:15445:
    #####:15446:		errno = 0;
    #####:15447:		cc = read (pipedes[0], &buffer[i], maxlen - i);
call    0 never executed
    #####:15448:		if (cc > 0)
branch  0 never executed
branch  1 never executed
    #####:15449:		  i += cc;
        -:15450:	      }
        -:15451:#ifdef EINTR
    #####:15452:	    while (cc > 0 || errno == EINTR);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:15453:#else
        -:15454:	    while (cc > 0);
        -:15455:#endif
        -:15456:
        -:15457:	    /* Close the read side of the pipe.  */
        -:15458:#ifdef  __MSDOS__
        -:15459:	    if (fpipe)
        -:15460:	      (void) pclose (fpipe);
        -:15461:#else
    #####:15462:	    (void) close (pipedes[0]);
call    0 never executed
        -:15463:#endif
        -:15464:
        -:15465:	    /* Loop until child_handler sets shell_function_completed
        -:15466:	       to the status of our child shell.  */
    #####:15467:	    while (shell_function_completed == 0)
branch  0 never executed
branch  1 never executed
    #####:15468:	      reap_children (1, 0);
call    0 never executed
        -:15469:
    #####:15470:	    shell_function_pid = 0;
        -:15471:
        -:15472:	    /* The child_handler function will set shell_function_completed
        -:15473:	       to 1 when the child dies normally, or to -1 if it
        -:15474:	       dies with status 127, which is most likely an exec fail.  */
        -:15475:
    #####:15476:	    if (shell_function_completed == -1)
branch  0 never executed
branch  1 never executed
        -:15477:	      {
        -:15478:		/* This most likely means that the execvp failed,
        -:15479:		   so we should just write out the error message
        -:15480:		   that came in over the pipe from the child.  */
    #####:15481:		fputs (buffer, stderr);
call    0 never executed
    #####:15482:		fflush (stderr);
call    0 never executed
        -:15483:	      }
        -:15484:	    else
        -:15485:	      {
        -:15486:		/* The child finished normally.  Replace all
        -:15487:		   newlines in its output with spaces, and put
        -:15488:		   that in the variable output buffer.  */
    #####:15489:		if (i > 0)
branch  0 never executed
branch  1 never executed
        -:15490:		  {
    #####:15491:		    if (buffer[i - 1] == '\n')
branch  0 never executed
branch  1 never executed
        -:15492:		      {
    #####:15493:			if (i > 1 && buffer[i - 2] == '\r')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15494:			  --i;
    #####:15495:			buffer[--i] = '\0';
        -:15496:		      }
        -:15497:		    else
    #####:15498:		      buffer[i] = '\0';
        -:15499:
    #####:15500:		    p = buffer;
    #####:15501:		    for (p2=p; *p != '\0'; ++p)
branch  0 never executed
branch  1 never executed
        -:15502:		      {
    #####:15503:			if (p[0] == '\r' && p[1] == '\n')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15504:			  continue;
    #####:15505:			if (*p == '\n')
branch  0 never executed
branch  1 never executed
    #####:15506:			  *p2++ = ' ';
        -:15507:			else
    #####:15508:			  *p2++ = *p;
        -:15509:		      }
    #####:15510:		    *p2 = '\0';
    #####:15511:		    o = variable_buffer_output (o, buffer, i);
call    0 never executed
        -:15512:		  }
        -:15513:	      }
        -:15514:
    #####:15515:	    free (buffer);
        -:15516:	  }
        -:15517:#else   /* Amiga */
        -:15518:	 {
        -:15519:	   /* Amiga can't fork nor spawn, but I can start a program with
        -:15520:	      redirection of my choice.  However, this means that we
        -:15521:	      don't have an opportunity to reopen stdout to trap it.  Thus,
        -:15522:	      we save our own stdout onto a new descriptor and dup a temp
        -:15523:	      file's descriptor onto our stdout temporarily.  After we
        -:15524:	      spawn the shell program, we dup our own stdout back to the
        -:15525:	      stdout descriptor.  The buffer reading is the same as above,
        -:15526:	      except that we're now reading from a file.  */
        -:15527:#include <dos/dos.h>
        -:15528:#include <proto/dos.h>
        -:15529:#undef stderr
        -:15530:#define stderr stdout
        -:15531:
        -:15532:	   BPTR child_stdout;
        -:15533:	   char tmp_output[FILENAME_MAX];
        -:15534:	   unsigned int maxlen = 200;
        -:15535:	   int cc;
        -:15536:	   char * buffer, * ptr;
        -:15537:	   char ** aptr;
        -:15538:	   int len = 0;
        -:15539:
        -:15540:	   strcpy (tmp_output, "t:MakeshXXXXXXXX");
        -:15541:	   mktemp (tmp_output);
        -:15542:	   child_stdout = Open (tmp_output, MODE_NEWFILE);
        -:15543:
        -:15544:	   for (aptr=argv; *aptr; aptr++)
        -:15545:	     {
        -:15546:	       len += strlen (*aptr) + 1;
        -:15547:	     }
        -:15548:
        -:15549:	   buffer = xmalloc (len + 1);
        -:15550:	   ptr = buffer;
        -:15551:
        -:15552:	   for (aptr=argv; *aptr; aptr++)
        -:15553:	     {
        -:15554:	       strcpy (ptr, *aptr);
        -:15555:	       ptr += strlen (ptr) + 1;
        -:15556:	       *ptr ++ = ' ';
        -:15557:	       *ptr = 0;
        -:15558:	     }
        -:15559:
        -:15560:	   ptr[-1] = '\n';
        -:15561:
        -:15562:	   Execute (buffer, NULL, child_stdout);
        -:15563:	   free (buffer);
        -:15564:
        -:15565:	   Close (child_stdout);
        -:15566:
        -:15567:	   child_stdout = Open (tmp_output, MODE_OLDFILE);
        -:15568:
        -:15569:	   buffer = xmalloc (maxlen);
        -:15570:	   i = 0;
        -:15571:	   do
        -:15572:	     {
        -:15573:	       if (i == maxlen)
        -:15574:		 {
        -:15575:		   maxlen += 512;
        -:15576:		   buffer = (char *) xrealloc (buffer, maxlen + 1);
        -:15577:		 }
        -:15578:
        -:15579:	       cc = Read (child_stdout, &buffer[i], maxlen - i);
        -:15580:	       if (cc > 0)
        -:15581:		 i += cc;
        -:15582:	     } while (cc > 0);
        -:15583:
        -:15584:	   Close (child_stdout);
        -:15585:	   DeleteFile (tmp_output);
        -:15586:
        -:15587:	   if (i > 0)
        -:15588:	     {
        -:15589:	       if (buffer[i - 1] == '\n')
        -:15590:		 buffer[--i] = '\0';
        -:15591:	       else
        -:15592:		 buffer[i] = '\0';
        -:15593:	       p = buffer;
        -:15594:	       while ((p = index (p, '\n')) != 0)
        -:15595:		 *p++ = ' ';
        -:15596:	       o = variable_buffer_output (o, buffer, i);
        -:15597:	     }
        -:15598:	   free (buffer);
        -:15599:	 }
        -:15600:#endif  /* Not Amiga.  */
        -:15601:
    #####:15602:	free (text);
    #####:15603:	break;
        -:15604:      }
        -:15605:#endif /* !VMS */
        -:15606:
    #####:15607:    case function_origin:
        -:15608:      /* Expand the argument.  */
    #####:15609:      text = expand_argument (text, end);
call    0 never executed
        -:15610:
        -:15611:      {
    #####:15612:	register struct variable *v = lookup_variable (text, strlen (text));
call    0 never executed
    #####:15613:	if (v == 0)
branch  0 never executed
branch  1 never executed
    #####:15614:	  o = variable_buffer_output (o, "undefined", 9);
call    0 never executed
        -:15615:	else
    #####:15616:	  switch (v->origin)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:15617:	    {
    #####:15618:	    default:
        -:15619:	    case o_invalid:
    #####:15620:	      abort ();
call    0 never executed
        -:15621:	      break;
    #####:15622:	    case o_default:
    #####:15623:	      o = variable_buffer_output (o, "default", 7);
call    0 never executed
    #####:15624:	      break;
    #####:15625:	    case o_env:
    #####:15626:	      o = variable_buffer_output (o, "environment", 11);
call    0 never executed
    #####:15627:	      break;
    #####:15628:	    case o_file:
    #####:15629:	      o = variable_buffer_output (o, "file", 4);
call    0 never executed
    #####:15630:	      break;
    #####:15631:	    case o_env_override:
    #####:15632:	      o = variable_buffer_output (o, "environment override", 20);
call    0 never executed
    #####:15633:	      break;
    #####:15634:	    case o_command:
    #####:15635:	      o = variable_buffer_output (o, "command line", 12);
call    0 never executed
    #####:15636:	      break;
    #####:15637:	    case o_override:
    #####:15638:	      o = variable_buffer_output (o, "override", 8);
call    0 never executed
    #####:15639:	      break;
    #####:15640:	    case o_automatic:
    #####:15641:	      o = variable_buffer_output (o, "automatic", 9);
call    0 never executed
    #####:15642:	      break;
        -:15643:	    }
        -:15644:      }
        -:15645:
    #####:15646:      free (text);
    #####:15647:      break;
        -:15648:
    #####:15649:    case function_sort:
        -:15650:      /* Expand the argument.  */
    #####:15651:      text = expand_argument (text, end);
call    0 never executed
        -:15652:
        -:15653:      {
    #####:15654:	char **words = (char **) xmalloc (10 * sizeof (char *));
call    0 never executed
    #####:15655:	unsigned int nwords = 10;
    #####:15656:	register unsigned int wordi = 0;
        -:15657:	char *t;
        -:15658:
        -:15659:	/* Chop TEXT into words and put them in WORDS.  */
    #####:15660:	t = text;
    #####:15661:	while ((p = find_next_token (&t, &len)) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15662:	  {
    #####:15663:	    if (wordi >= nwords - 1)
branch  0 never executed
branch  1 never executed
        -:15664:	      {
    #####:15665:		nwords *= 2;
    #####:15666:		words = (char **) xrealloc ((char *) words,
call    0 never executed
        -:15667:					    nwords * sizeof (char *));
        -:15668:	      }
    #####:15669:	    words[wordi++] = savestring (p, len);
call    0 never executed
        -:15670:	  }
        -:15671:
    #####:15672:	if (wordi > 0)
branch  0 never executed
branch  1 never executed
        -:15673:	  {
        -:15674:	    /* Now sort the list of words.  */
    #####:15675:	    qsort ((char *) words, wordi, sizeof (char *), alpha_compare);
call    0 never executed
        -:15676:
        -:15677:	    /* Now write the sorted list.  */
    #####:15678:	    for (i = 0; i < wordi; ++i)
branch  0 never executed
branch  1 never executed
        -:15679:	      {
    #####:15680:		len = strlen (words[i]);
    #####:15681:		if (i == wordi - 1 || strlen (words[i + 1]) != len
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15682:		    || strcmp (words[i], words[i + 1]))
branch  0 never executed
branch  1 never executed
        -:15683:		  {
    #####:15684:		    o = variable_buffer_output (o, words[i], len);
call    0 never executed
    #####:15685:		    o = variable_buffer_output (o, " ", 1);
call    0 never executed
        -:15686:		  }
    #####:15687:		free (words[i]);
        -:15688:	      }
        -:15689:	    /* Kill the last space.  */
    #####:15690:	    --o;
        -:15691:	  }
        -:15692:
    #####:15693:	free ((char *) words);
        -:15694:      }
        -:15695:
    #####:15696:      free (text);
    #####:15697:      break;
        -:15698:
    #####:15699:    case function_foreach:
        -:15700:      {
        -:15701:	/* Get three comma-separated arguments but
        -:15702:	   expand only the first two.  */
        -:15703:	char *var, *list;
        -:15704:	register struct variable *v;
        -:15705:
    #####:15706:	count = 0;
    #####:15707:	for (p = text; p < end; ++p)
branch  0 never executed
branch  1 never executed
        -:15708:	  {
    #####:15709:	    if (*p == startparen)
branch  0 never executed
branch  1 never executed
    #####:15710:	      ++count;
    #####:15711:	    else if (*p == endparen)
branch  0 never executed
branch  1 never executed
    #####:15712:	      --count;
    #####:15713:	    else if (*p == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15714:	      break;
        -:15715:	  }
    #####:15716:	if (p == end)
branch  0 never executed
branch  1 never executed
    #####:15717:	  BADARGS ("foreach");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:15718:	var = expand_argument (text, p);
call    0 never executed
        -:15719:
    #####:15720:	p2 = p + 1;
    #####:15721:	count = 0;
    #####:15722:	for (p = p2; p < end; ++p)
branch  0 never executed
branch  1 never executed
        -:15723:	  {
    #####:15724:	    if (*p == startparen)
branch  0 never executed
branch  1 never executed
    #####:15725:	      ++count;
    #####:15726:	    else if (*p == endparen)
branch  0 never executed
branch  1 never executed
    #####:15727:	      --count;
    #####:15728:	    else if (*p == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15729:	      break;
        -:15730:	  }
    #####:15731:	if (p == end)
branch  0 never executed
branch  1 never executed
    #####:15732:	  BADARGS ("foreach");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:15733:	list = expand_argument (p2, p);
call    0 never executed
        -:15734:
    #####:15735:	++p;
    #####:15736:	text = savestring (p, end - p);
call    0 never executed
        -:15737:
    #####:15738:	push_new_variable_scope ();
call    0 never executed
    #####:15739:	v = define_variable (var, strlen (var), "", o_automatic, 0);
call    0 never executed
    #####:15740:	p3 = list;
    #####:15741:	while ((p = find_next_token (&p3, &len)) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15742:	  {
        -:15743:	    char *result;
    #####:15744:	    char save = p[len];
    #####:15745:	    p[len] = '\0';
    #####:15746:	    v->value = p;
    #####:15747:	    result = allocated_variable_expand (text);
call    0 never executed
    #####:15748:	    p[len] = save;
        -:15749:
    #####:15750:	    o = variable_buffer_output (o, result, strlen (result));
call    0 never executed
    #####:15751:	    o = variable_buffer_output (o, " ", 1);
call    0 never executed
    #####:15752:	    doneany = 1;
    #####:15753:	    free (result);
        -:15754:	  }
    #####:15755:	if (doneany)
branch  0 never executed
branch  1 never executed
        -:15756:	  /* Kill the last space.  */
    #####:15757:	  --o;
        -:15758:
    #####:15759:	pop_variable_scope ();
call    0 never executed
        -:15760:
    #####:15761:	free (var);
    #####:15762:	free (list);
    #####:15763:	free (text);
        -:15764:      }
    #####:15765:      break;
        -:15766:
    #####:15767:    case function_filter:
        -:15768:    case function_filter_out:
        -:15769:      {
        -:15770:	struct word
        -:15771:	  {
        -:15772:	    struct word *next;
        -:15773:	    char *word;
        -:15774:	    int matched;
        -:15775:	  } *words, *wordtail, *wp;
        -:15776:
        -:15777:	/* Get two comma-separated arguments and expand each one.  */
    #####:15778:	count = 0;
    #####:15779:	for (p = text; p < end; ++p)
branch  0 never executed
branch  1 never executed
        -:15780:	  {
    #####:15781:	    if (*p == startparen)
branch  0 never executed
branch  1 never executed
    #####:15782:	      ++count;
    #####:15783:	    else if (*p == endparen)
branch  0 never executed
branch  1 never executed
    #####:15784:	      --count;
    #####:15785:	    else if (*p == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15786:	      break;
        -:15787:	  }
    #####:15788:	if (p == end)
branch  0 never executed
branch  1 never executed
    #####:15789:	  BADARGS (function == function_filter ? "filter" : "filter-out");
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:15790:	p2 = expand_argument (text, p);
call    0 never executed
        -:15791:
    #####:15792:	text = expand_argument (p + 1, end);
call    0 never executed
        -:15793:
        -:15794:	/* Chop TEXT up into words and then run each pattern through.  */
    #####:15795:	words = wordtail = 0;
    #####:15796:	p3 = text;
    #####:15797:	while ((p = find_next_token (&p3, &len)) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15798:	  {
    #####:15799:	    struct word *w = (struct word *) alloca (sizeof (struct word));
    #####:15800:	    if (words == 0)
branch  0 never executed
branch  1 never executed
    #####:15801:	      words = w;
        -:15802:	    else
    #####:15803:	      wordtail->next = w;
    #####:15804:	    wordtail = w;
        -:15805:
    #####:15806:	    if (*p3 != '\0')
branch  0 never executed
branch  1 never executed
    #####:15807:	      ++p3;
    #####:15808:	    p[len] = '\0';
    #####:15809:	    w->word = p;
    #####:15810:	    w->matched = 0;
        -:15811:	  }
        -:15812:
    #####:15813:	if (words != 0)
branch  0 never executed
branch  1 never executed
        -:15814:	  {
    #####:15815:	    wordtail->next = 0;
        -:15816:
        -:15817:	    /* Run each pattern through the words, killing words.  */
    #####:15818:	    p3 = p2;
    #####:15819:	    while ((p = find_next_token (&p3, &len)) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:15820:	      {
        -:15821:		char *percent;
    #####:15822:		char save = p[len];
    #####:15823:		p[len] = '\0';
        -:15824:
    #####:15825:		percent = find_percent (p);
call    0 never executed
    #####:15826:		for (wp = words; wp != 0; wp = wp->next)
branch  0 never executed
branch  1 never executed
    #####:15827:		  wp->matched |= (percent == 0 ? streq (p, wp->word)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:15828:				  : pattern_matches (p, percent, wp->word));
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:15829:
    #####:15830:		p[len] = save;
        -:15831:	      }
        -:15832:
        -:15833:	    /* Output the words that matched (or didn't, for filter-out).  */
    #####:15834:	    for (wp = words; wp != 0; wp = wp->next)
branch  0 never executed
branch  1 never executed
    #####:15835:	      if (function == function_filter ? wp->matched : !wp->matched)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:15836:		{
    #####:15837:		  o = variable_buffer_output (o, wp->word, strlen (wp->word));
call    0 never executed
    #####:15838:		  o = variable_buffer_output (o, " ", 1);
call    0 never executed
    #####:15839:		  doneany = 1;
        -:15840:		}
    #####:15841:	    if (doneany)
branch  0 never executed
branch  1 never executed
        -:15842:	      /* Kill the last space.  */
    #####:15843:	      --o;
        -:15844:	  }
        -:15845:
    #####:15846:	free (p2);
    #####:15847:	free (text);
        -:15848:      }
    #####:15849:      break;
        -:15850:
    #####:15851:    case function_patsubst:
        -:15852:      /* Get three comma-separated arguments and expand each one.  */
    #####:15853:      count = 0;
    #####:15854:      for (p = text; p < end; ++p)
branch  0 never executed
branch  1 never executed
        -:15855:	{
    #####:15856:	  if (*p == startparen)
branch  0 never executed
branch  1 never executed
    #####:15857:	    ++count;
    #####:15858:	  else if (*p == endparen)
branch  0 never executed
branch  1 never executed
    #####:15859:	    --count;
    #####:15860:	  else if (*p == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15861:	    break;
        -:15862:	}
    #####:15863:      if (p == end)
branch  0 never executed
branch  1 never executed
    #####:15864:	BADARGS ("patsubst");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:15865:
    #####:15866:      p2 = p;
    #####:15867:      count = 0;
    #####:15868:      for (++p; p < end; ++p)
branch  0 never executed
branch  1 never executed
        -:15869:	{
    #####:15870:	  if (*p == startparen)
branch  0 never executed
branch  1 never executed
    #####:15871:	    ++count;
    #####:15872:	  else if (*p == endparen)
branch  0 never executed
branch  1 never executed
    #####:15873:	    --count;
    #####:15874:	  else if (*p == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15875:	    break;
        -:15876:	}
    #####:15877:      if (p == end)
branch  0 never executed
branch  1 never executed
    #####:15878:	BADARGS ("patsubst");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:15879:
    #####:15880:      text = expand_argument (text, p2);
call    0 never executed
    #####:15881:      p3 = expand_argument (p2 + 1, p);
call    0 never executed
    #####:15882:      p2 = expand_argument (p + 1, end);
call    0 never executed
        -:15883:
    #####:15884:      o = patsubst_expand (o, p2, text, p3, (char *) 0, (char *) 0);
call    0 never executed
        -:15885:
    #####:15886:      free (text);
    #####:15887:      free (p3);
    #####:15888:      free (p2);
    #####:15889:      break;
        -:15890:
    #####:15891:    case function_join:
        -:15892:      /* Get two comma-separated arguments and expand each one.  */
    #####:15893:      count = 0;
    #####:15894:      for (p = text; p < end; ++p)
branch  0 never executed
branch  1 never executed
        -:15895:	{
    #####:15896:	  if (*p == startparen)
branch  0 never executed
branch  1 never executed
    #####:15897:	    ++count;
    #####:15898:	  else if (*p == endparen)
branch  0 never executed
branch  1 never executed
    #####:15899:	    --count;
    #####:15900:	  else if (*p == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15901:	    break;
        -:15902:	}
    #####:15903:      if (p == end)
branch  0 never executed
branch  1 never executed
    #####:15904:	BADARGS ("join");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:15905:      text = expand_argument (text, p);
call    0 never executed
        -:15906:
    #####:15907:      p = expand_argument (p + 1, end);
call    0 never executed
        -:15908:
        -:15909:      {
        -:15910:	/* Write each word of the first argument directly followed
        -:15911:	   by the corresponding word of the second argument.
        -:15912:	   If the two arguments have a different number of words,
        -:15913:	   the excess words are just output separated by blanks.  */
        -:15914:	register char *tp, *pp;
    #####:15915:	p2 = text;
    #####:15916:	p3 = p;
        -:15917:	do
        -:15918:	  {
        -:15919:	    unsigned int tlen, plen;
        -:15920:
    #####:15921:	    tp = find_next_token (&p2, &tlen);
call    0 never executed
    #####:15922:	    if (tp != 0)
branch  0 never executed
branch  1 never executed
    #####:15923:	      o = variable_buffer_output (o, tp, tlen);
call    0 never executed
        -:15924:
    #####:15925:	    pp = find_next_token (&p3, &plen);
call    0 never executed
    #####:15926:	    if (pp != 0)
branch  0 never executed
branch  1 never executed
    #####:15927:	      o = variable_buffer_output (o, pp, plen);
call    0 never executed
        -:15928:
    #####:15929:	    if (tp != 0 || pp != 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:15930:	      {
    #####:15931:		o = variable_buffer_output (o, " ", 1);
call    0 never executed
    #####:15932:		doneany = 1;
        -:15933:	      }
        -:15934:	  }
    #####:15935:	while (tp != 0 || pp != 0);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15936:	if (doneany)
branch  0 never executed
branch  1 never executed
        -:15937:	  /* Kill the last blank.  */
    #####:15938:	  --o;
        -:15939:      }
        -:15940:
    #####:15941:      free (text);
    #####:15942:      free (p);
    #####:15943:      break;
        -:15944:
     1580:15945:    case function_strip:
        -:15946:      /* Expand the argument.  */
     1580:15947:      text = expand_argument (text, end);
call    0 returned 1580
        -:15948:
     1580:15949:      p2 = text;
     1598:15950:      while (*p2 != '\0')
branch  0 taken 18
branch  1 taken 1580 (fallthrough)
        -:15951:	{
       18:15952:	  while (isspace(*p2))
branch  0 taken 0
branch  1 taken 18 (fallthrough)
    #####:15953:	    ++p2;
       18:15954:	  p = p2;
       36:15955:	  for (i=0; *p2 != '\0' && !isspace(*p2); ++p2, ++i)
branch  0 taken 18 (fallthrough)
branch  1 taken 18
branch  2 taken 18
branch  3 taken 0 (fallthrough)
        -:15956:	    {}
       18:15957:	  if (!i)
branch  0 taken 0 (fallthrough)
branch  1 taken 18
    #####:15958:	    break;
       18:15959:	  o = variable_buffer_output (o, p, i);
call    0 returned 18
       18:15960:	  o = variable_buffer_output (o, " ", 1);
call    0 returned 18
       18:15961:	  doneany = 1;
        -:15962:	}
     1580:15963:      if (doneany)
branch  0 taken 18 (fallthrough)
branch  1 taken 1562
        -:15964:	/* Kill the last space.  */
       18:15965:	--o;
        -:15966:
     1580:15967:      free (text);
     1580:15968:      break;
        -:15969:
    #####:15970:    case function_wildcard:
    #####:15971:      text = expand_argument (text, end);
call    0 never executed
        -:15972:
        -:15973:#ifdef _AMIGA
        -:15974:      o = wildcard_expansion (text, o);
        -:15975:#else
    #####:15976:      p = string_glob (text);
call    0 never executed
    #####:15977:      o = variable_buffer_output (o, p, strlen (p));
call    0 never executed
        -:15978:#endif
        -:15979:
    #####:15980:      free (text);
    #####:15981:      break;
        -:15982:
    #####:15983:    case function_subst:
        -:15984:      /* Get three comma-separated arguments and expand each one.  */
    #####:15985:      count = 0;
    #####:15986:      for (p = text; p < end; ++p)
branch  0 never executed
branch  1 never executed
        -:15987:	{
    #####:15988:	  if (*p == startparen)
branch  0 never executed
branch  1 never executed
    #####:15989:	    ++count;
    #####:15990:	  else if (*p == endparen)
branch  0 never executed
branch  1 never executed
    #####:15991:	    --count;
    #####:15992:	  else if (*p == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:15993:	    break;
        -:15994:	}
    #####:15995:      if (p == end)
branch  0 never executed
branch  1 never executed
    #####:15996:	BADARGS ("subst");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:15997:
    #####:15998:      p2 = p;
    #####:15999:      count = 0;
    #####:16000:      for (++p; p < end; ++p)
branch  0 never executed
branch  1 never executed
        -:16001:	{
    #####:16002:	  if (*p == startparen)
branch  0 never executed
branch  1 never executed
    #####:16003:	    ++count;
    #####:16004:	  else if (*p == endparen)
branch  0 never executed
branch  1 never executed
    #####:16005:	    --count;
    #####:16006:	  else if (*p == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:16007:	    break;
        -:16008:	}
    #####:16009:      if (p == end)
branch  0 never executed
branch  1 never executed
    #####:16010:	BADARGS ("subst");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:16011:
    #####:16012:      text = expand_argument (text, p2);
call    0 never executed
    #####:16013:      p3 = expand_argument (p2 + 1, p);
call    0 never executed
    #####:16014:      p2 = expand_argument (p + 1, end);
call    0 never executed
        -:16015:
    #####:16016:      o = subst_expand (o, p2, text, p3, strlen (text), strlen (p3), 0, 0);
call    0 never executed
        -:16017:
    #####:16018:      free (text);
    #####:16019:      free (p3);
    #####:16020:      free (p2);
    #####:16021:      break;
        -:16022:
    #####:16023:    case function_firstword:
        -:16024:      /* Expand the argument.  */
    #####:16025:      text = expand_argument (text, end);
call    0 never executed
        -:16026:
        -:16027:      /* Find the first word in TEXT.  */
    #####:16028:      p2 = text;
    #####:16029:      p = find_next_token (&p2, &i);
call    0 never executed
    #####:16030:      if (p != 0)
branch  0 never executed
branch  1 never executed
    #####:16031:	o = variable_buffer_output (o, p, i);
call    0 never executed
        -:16032:
    #####:16033:      free (text);
    #####:16034:      break;
        -:16035:
    #####:16036:    case function_word:
        -:16037:      /* Get two comma-separated arguments and expand each one.  */
    #####:16038:      count = 0;
    #####:16039:      for (p = text; p < end; ++p)
branch  0 never executed
branch  1 never executed
        -:16040:	{
    #####:16041:	  if (*p == startparen)
branch  0 never executed
branch  1 never executed
    #####:16042:	    ++count;
    #####:16043:	  else if (*p == endparen)
branch  0 never executed
branch  1 never executed
    #####:16044:	    --count;
    #####:16045:	  else if (*p == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:16046:	    break;
        -:16047:	}
    #####:16048:      if (p == end)
branch  0 never executed
branch  1 never executed
    #####:16049:	BADARGS ("word");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:16050:      text = expand_argument (text, p);
call    0 never executed
        -:16051:
    #####:16052:      p3 = expand_argument (p + 1, end);
call    0 never executed
        -:16053:
        -:16054:      /* Check the first argument.  */
    #####:16055:      for (p2 = text; *p2 != '\0'; ++p2)
branch  0 never executed
branch  1 never executed
    #####:16056:	if (*p2 < '0' || *p2 > '9')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:16057:	  {
    #####:16058:	    if (reading_filename != 0)
branch  0 never executed
branch  1 never executed
    #####:16059:	      makefile_fatal (reading_filename, *reading_lineno_ptr,
call    0 never executed
        -:16060:			      "non-numeric first argument to `word' function");
        -:16061:	    else
    #####:16062:	      fatal ("non-numeric first argument to `word' function");
call    0 never executed
        -:16063:	  }
        -:16064:
    #####:16065:      i = (unsigned int) atoi (text);
    #####:16066:      if (i == 0)
branch  0 never executed
branch  1 never executed
        -:16067:	{
    #####:16068:	  if (reading_filename != 0)
branch  0 never executed
branch  1 never executed
    #####:16069:	    makefile_fatal (reading_filename, *reading_lineno_ptr,
call    0 never executed
        -:16070:			    "the `word' function takes a one-origin \
        -:16071:index argument");
        -:16072:	  else
    #####:16073:	    fatal ("the `word' function takes a one-origin index argument");
call    0 never executed
        -:16074:	}
        -:16075:
    #####:16076:      p2 = p3;
    #####:16077:      while ((p = find_next_token (&p2, &len)) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16078:	if (--i == 0)
branch  0 never executed
branch  1 never executed
    #####:16079:	  break;
    #####:16080:      if (i == 0)
branch  0 never executed
branch  1 never executed
    #####:16081:	o = variable_buffer_output (o, p, len);
call    0 never executed
        -:16082:
    #####:16083:      free (text);
    #####:16084:      free (p3);
    #####:16085:      break;
        -:16086:
    #####:16087:    case function_words:
        -:16088:      /* Expand the argument.  */
    #####:16089:      text = expand_argument (text, end);
call    0 never executed
        -:16090:
    #####:16091:      i = 0;
    #####:16092:      p2 = text;
    #####:16093:      while (find_next_token (&p2, (unsigned int *) 0) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16094:	++i;
        -:16095:
        -:16096:      {
        -:16097:	char buf[20];
    #####:16098:	sprintf (buf, "%d", i);
    #####:16099:	o = variable_buffer_output (o, buf, strlen (buf));
call    0 never executed
        -:16100:      }
        -:16101:
    #####:16102:      free (text);
    #####:16103:      break;
        -:16104:
    #####:16105:    case function_wordlist:
        -:16106:      /* Get two comma-separated arguments and expand each one.  */
    #####:16107:      count = 0;
    #####:16108:      for (p = text; p < end; ++p)
branch  0 never executed
branch  1 never executed
        -:16109:	{
    #####:16110:	  if (*p == startparen)
branch  0 never executed
branch  1 never executed
    #####:16111:	    ++count;
    #####:16112:	  else if (*p == endparen)
branch  0 never executed
branch  1 never executed
    #####:16113:	    --count;
    #####:16114:	  else if (*p == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:16115:	    break;
        -:16116:	}
    #####:16117:      if (p == end)
branch  0 never executed
branch  1 never executed
    #####:16118:	BADARGS ("wordlist");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:16119:      text = expand_argument (text, p);
call    0 never executed
        -:16120:
        -:16121:      /* Check the first argument.  */
    #####:16122:      for (p2 = text; *p2 != '\0'; ++p2)
branch  0 never executed
branch  1 never executed
    #####:16123:	if (*p2 < '0' || *p2 > '9')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:16124:	  {
    #####:16125:	    if (reading_filename != 0)
branch  0 never executed
branch  1 never executed
    #####:16126:	      makefile_fatal (reading_filename, *reading_lineno_ptr,
call    0 never executed
        -:16127:			      "non-numeric first argument to `wordlist' function");
        -:16128:	    else
    #####:16129:	      fatal ("non-numeric first argument to `wordlist' function");
call    0 never executed
        -:16130:	  }
    #####:16131:      i = (unsigned int)atoi(text);
    #####:16132:      free (text);
        -:16133:
        -:16134:      /* Check the next argument */
    #####:16135:      for (p2 = p + 1; isblank(*p2); ++p2)
branch  0 never executed
branch  1 never executed
        -:16136:	{}
    #####:16137:      count = 0;
    #####:16138:      for (p = p2; p < end; ++p)
branch  0 never executed
branch  1 never executed
        -:16139:	{
    #####:16140:	  if (*p == startparen)
branch  0 never executed
branch  1 never executed
    #####:16141:	    ++count;
    #####:16142:	  else if (*p == endparen)
branch  0 never executed
branch  1 never executed
    #####:16143:	    --count;
    #####:16144:	  else if (*p == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:16145:	    break;
        -:16146:	}
    #####:16147:      if (p == end)
branch  0 never executed
branch  1 never executed
    #####:16148:	BADARGS ("wordlist");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:16149:      text = expand_argument (p2, p);
call    0 never executed
        -:16150:
    #####:16151:      for (p2 = text; *p2 != '\0'; ++p2)
branch  0 never executed
branch  1 never executed
    #####:16152:	if (*p2 < '0' || *p2 > '9')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:16153:	  {
    #####:16154:	    if (reading_filename != 0)
branch  0 never executed
branch  1 never executed
    #####:16155:	      makefile_fatal (reading_filename, *reading_lineno_ptr,
call    0 never executed
        -:16156:			      "non-numeric second argument to `wordlist' function");
        -:16157:	    else
    #####:16158:	      fatal ("non-numeric second argument to `wordlist' function");
call    0 never executed
        -:16159:	  }
    #####:16160:      j = (unsigned int)atoi(text);
    #####:16161:      free (text);
        -:16162:
    #####:16163:      if (j > i)
branch  0 never executed
branch  1 never executed
    #####:16164:	j -= i;
        -:16165:      else
        -:16166:	{
        -:16167:	  unsigned int k;
    #####:16168:	  k = j;
    #####:16169:	  j = i - j;
    #####:16170:	  i = k;
        -:16171:	}
    #####:16172:      ++j;
        -:16173:
        -:16174:      /* Extract the requested words */
    #####:16175:      text = expand_argument (p + 1, end);
call    0 never executed
    #####:16176:      p2 = text;
        -:16177:
    #####:16178:      while (((p = find_next_token (&p2, &len)) != 0) && --i)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:16179:	{}
    #####:16180:      if (p)
branch  0 never executed
branch  1 never executed
        -:16181:	{
    #####:16182:	  while (--j && (find_next_token (&p2, &len) != 0))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:16183:	    {}
    #####:16184:	  o = variable_buffer_output (o, p, p2 - p);
call    0 never executed
        -:16185:	}
        -:16186:
    #####:16187:      free (text);
    #####:16188:      break;
        -:16189:
    #####:16190:    case function_findstring:
        -:16191:      /* Get two comma-separated arguments and expand each one.  */
    #####:16192:      count = 0;
    #####:16193:      for (p = text; p < end; ++p)
branch  0 never executed
branch  1 never executed
        -:16194:	{
    #####:16195:	  if (*p == startparen)
branch  0 never executed
branch  1 never executed
    #####:16196:	    ++count;
    #####:16197:	  else if (*p == endparen)
branch  0 never executed
branch  1 never executed
    #####:16198:	    --count;
    #####:16199:	  else if (*p == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:16200:	    break;
        -:16201:	}
    #####:16202:      if (p == end)
branch  0 never executed
branch  1 never executed
    #####:16203:	BADARGS ("findstring");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:16204:      text = expand_argument (text, p);
call    0 never executed
        -:16205:
    #####:16206:      p = expand_argument (p + 1, end);
call    0 never executed
        -:16207:
        -:16208:      /* Find the first occurrence of the first string in the second.  */
    #####:16209:      i = strlen (text);
    #####:16210:      if (sindex (p, 0, text, i) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16211:	o = variable_buffer_output (o, text, i);
call    0 never executed
        -:16212:
    #####:16213:      free (p);
    #####:16214:      free (text);
    #####:16215:      break;
        -:16216:
    #####:16217:    case function_addsuffix:
        -:16218:    case function_addprefix:
        -:16219:      /* Get two comma-separated arguments and expand each one.  */
    #####:16220:      count = 0;
    #####:16221:      for (p = text; p < end; ++p)
branch  0 never executed
branch  1 never executed
        -:16222:	{
    #####:16223:	  if (*p == startparen)
branch  0 never executed
branch  1 never executed
    #####:16224:	    ++count;
    #####:16225:	  else if (*p == endparen)
branch  0 never executed
branch  1 never executed
    #####:16226:	    --count;
    #####:16227:	  else if (*p == ',' && count <= 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:16228:	    break;
        -:16229:	}
    #####:16230:      if (p == end)
branch  0 never executed
branch  1 never executed
    #####:16231:	BADARGS (function == function_addsuffix ? "addsuffix" : "addprefix");
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:16232:      text = expand_argument (text, p);
call    0 never executed
    #####:16233:      i = strlen (text);
        -:16234:
    #####:16235:      p2 = expand_argument (p + 1, end);
call    0 never executed
        -:16236:
    #####:16237:      p3 = p2;
    #####:16238:      while ((p = find_next_token (&p3, &len)) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:16239:	{
    #####:16240:	  if (function == function_addprefix)
branch  0 never executed
branch  1 never executed
    #####:16241:	    o = variable_buffer_output (o, text, i);
call    0 never executed
    #####:16242:	  o = variable_buffer_output (o, p, len);
call    0 never executed
    #####:16243:	  if (function == function_addsuffix)
branch  0 never executed
branch  1 never executed
    #####:16244:	    o = variable_buffer_output (o, text, i);
call    0 never executed
    #####:16245:	  o = variable_buffer_output (o, " ", 1);
call    0 never executed
    #####:16246:	  doneany = 1;
        -:16247:	}
    #####:16248:      if (doneany)
branch  0 never executed
branch  1 never executed
        -:16249:	/* Kill last space.  */
    #####:16250:	--o;
        -:16251:
    #####:16252:      free (p2);
    #####:16253:      free (text);
    #####:16254:      break;
        -:16255:
    #####:16256:    case function_dir:
        -:16257:    case function_basename:
        -:16258:      /* Expand the argument.  */
    #####:16259:      text = expand_argument (text, end);
call    0 never executed
        -:16260:
    #####:16261:      p3 = text;
    #####:16262:      while ((p2 = find_next_token (&p3, &len)) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:16263:	{
    #####:16264:	  p = p2 + len;
        -:16265:#ifdef VMS
        -:16266:	  while (p >= p2 && *p != ']'
        -:16267:		 && (function != function_basename || *p != '.'))
        -:16268:#else
        -:16269:# ifdef __MSDOS__
        -:16270:	  while (p >= p2 && *p != '/' && *p != '\\'
        -:16271:		 && (function != function_basename || *p != '.'))
        -:16272:# else
    #####:16273:	  while (p >= p2 && *p != '/'
branch  0 never executed
branch  1 never executed
    #####:16274:		 && (function != function_basename || *p != '.'))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:16275:# endif
        -:16276:#endif
    #####:16277:	    --p;
    #####:16278:	  if (p >= p2 && (function == function_dir))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:16279:	    o = variable_buffer_output (o, p2, ++p - p2);
call    0 never executed
    #####:16280:	  else if (p >= p2 && (*p == '.'))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:16281:	    o = variable_buffer_output (o, p2, p - p2);
call    0 never executed
        -:16282:#if defined(WINDOWS32) || defined(__MSDOS__)
        -:16283:	/* Handle the "d:foobar" case */
        -:16284:	  else if (p2[0] && p2[1] == ':' && function == function_dir)
        -:16285:	    o = variable_buffer_output (o, p2, 2);
        -:16286:#endif
    #####:16287:	  else if (function == function_dir)
branch  0 never executed
branch  1 never executed
        -:16288:#ifdef VMS
        -:16289:	    o = variable_buffer_output (o, "[]", 2);
        -:16290:#else
        -:16291:#ifndef _AMIGA
    #####:16292:	    o = variable_buffer_output (o, "./", 2);
call    0 never executed
        -:16293:#else
        -:16294:	    /* o = o */; /* Just a nop...  */
        -:16295:#endif /* AMIGA */
        -:16296:#endif /* !VMS */
        -:16297:	  else
        -:16298:	    /* The entire name is the basename.  */
    #####:16299:	    o = variable_buffer_output (o, p2, len);
call    0 never executed
        -:16300:
    #####:16301:	  o = variable_buffer_output (o, " ", 1);
call    0 never executed
    #####:16302:	  doneany = 1;
        -:16303:	}
    #####:16304:      if (doneany)
branch  0 never executed
branch  1 never executed
        -:16305:	/* Kill last space.  */
    #####:16306:	--o;
        -:16307:
    #####:16308:      free (text);
    #####:16309:      break;
        -:16310:
    #####:16311:    case function_notdir:
        -:16312:    case function_suffix:
        -:16313:      /* Expand the argument.  */
    #####:16314:      text = expand_argument (text, end);
call    0 never executed
        -:16315:
    #####:16316:      p3 = text;
    #####:16317:      while ((p2 = find_next_token (&p3, &len)) != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:16318:	{
    #####:16319:	  p = p2 + len;
        -:16320:#ifdef VMS
        -:16321:	  while (p >= p2 && *p != ']'
        -:16322:		 && (function != function_suffix || *p != '.'))
        -:16323:#else
        -:16324:# ifdef __MSDOS__
        -:16325:	  while (p >= p2 && *p != '/' && *p != '\\'
        -:16326:		 && (function != function_suffix || *p != '.'))
        -:16327:# else
    #####:16328:	  while (p >= p2 && *p != '/'
branch  0 never executed
branch  1 never executed
    #####:16329:		 && (function != function_suffix || *p != '.'))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:16330:# endif
        -:16331:#endif
    #####:16332:	    --p;
    #####:16333:	  if (p >= p2)
branch  0 never executed
branch  1 never executed
        -:16334:	    {
    #####:16335:	      if (function == function_notdir)
branch  0 never executed
branch  1 never executed
    #####:16336:		++p;
    #####:16337:	      else if (*p != '.')
branch  0 never executed
branch  1 never executed
    #####:16338:		continue;
    #####:16339:	      o = variable_buffer_output (o, p, len - (p - p2));
call    0 never executed
        -:16340:	    }
        -:16341:#if defined(WINDOWS32) || defined(__MSDOS__)
        -:16342:	  /* Handle the case of "d:foo/bar".  */
        -:16343:	  else if (function == function_notdir && p2[0] && p2[1] == ':')
        -:16344:	    {
        -:16345:	      p = p2 + 2;
        -:16346:	      o = variable_buffer_output (o, p, len - (p - p2));
        -:16347:	    }
        -:16348:#endif
    #####:16349:	  else if (function == function_notdir)
branch  0 never executed
branch  1 never executed
    #####:16350:	    o = variable_buffer_output (o, p2, len);
call    0 never executed
        -:16351:
    #####:16352:	  if (function == function_notdir || p >= p2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:16353:	    {
    #####:16354:	      o = variable_buffer_output (o, " ", 1);
call    0 never executed
    #####:16355:	      doneany = 1;
        -:16356:	    }
        -:16357:	}
    #####:16358:      if (doneany)
branch  0 never executed
branch  1 never executed
        -:16359:	/* Kill last space.  */
    #####:16360:	--o;
        -:16361:
    #####:16362:      free (text);
    #####:16363:      break;
        -:16364:    }
        -:16365:
     1580:16366:  return o;
        -:16367:}
        -:16368:
        -:16369:/* Check for a function invocation in *STRINGP.  *STRINGP points at the
        -:16370:   opening ( or { and is not null-terminated.  If a function invocation
        -:16371:   is found, expand it into the buffer at *OP, updating *OP, incrementing
        -:16372:   *STRINGP past the reference and returning nonzero.  If not, return zero.  */
        -:16373:
        -:16374:int
function handle_function called 5666 returned 100% blocks executed 88%
     5666:16375:handle_function (op, stringp)
        -:16376:     char **op;
        -:16377:     char **stringp;
        -:16378:
        -:16379:{
        -:16380:  register unsigned int code;
        -:16381:  unsigned int maxlen;
     5666:16382:  char *beg = *stringp + 1;
        -:16383:  char *endref;
        -:16384:
     5666:16385:  endref = lindex (beg, beg + MAXFUNCTIONLEN, '\0');
call    0 returned 5666
     5666:16386:  maxlen = endref != 0 ? endref - beg : MAXFUNCTIONLEN;
branch  0 taken 4032 (fallthrough)
branch  1 taken 1634
        -:16387:
   116098:16388:  for (code = 0; function_table[code].name != 0; ++code)
branch  0 taken 112012
branch  1 taken 4086 (fallthrough)
        -:16389:    {
   112012:16390:      if (maxlen < function_table[code].len)
branch  0 taken 16616 (fallthrough)
branch  1 taken 95396
    16616:16391:	continue;
    95396:16392:      endref = beg + function_table[code].len;
    95396:16393:      if (isblank (*endref)
branch  0 taken 4952 (fallthrough)
branch  1 taken 90444
     4952:16394:	  && !strncmp (function_table[code].name, beg,
     4952:16395:		       function_table[code].len))
branch  0 taken 1580 (fallthrough)
branch  1 taken 3372
     1580:16396:	break;
        -:16397:    }
     5666:16398:  if (function_table[code].name != 0)
branch  0 taken 1580 (fallthrough)
branch  1 taken 4086
        -:16399:    {
        -:16400:      /* We have found a call to an expansion-time function.
        -:16401:	 Find the end of the arguments, and do the function.  */
        -:16402:
    1580*:16403:      char openparen = beg[-1], closeparen = openparen == '(' ? ')' : '}';
branch  0 taken 1580 (fallthrough)
branch  1 taken 0
     1580:16404:      int count = 0;
        -:16405:      char *argbeg;
        -:16406:      register char *p;
        -:16407:
        -:16408:      /* Space after function name isn't part of the args.  */
     1580:16409:      p = next_token (endref);
call    0 returned 1580
     1580:16410:      argbeg = p;
        -:16411:
        -:16412:      /* Count nested use of whichever kind of parens we use,
        -:16413:	 so that nested calls and variable refs work.  */
        -:16414:
    14220:16415:      for (; *p != '\0'; ++p)
branch  0 taken 14220
branch  1 taken 0 (fallthrough)
        -:16416:	{
    14220:16417:	  if (*p == openparen)
branch  0 taken 1580 (fallthrough)
branch  1 taken 12640
     1580:16418:	    ++count;
    12640:16419:	  else if (*p == closeparen && --count < 0)
branch  0 taken 3160 (fallthrough)
branch  1 taken 9480
branch  2 taken 1580 (fallthrough)
branch  3 taken 1580
     1580:16420:	    break;
        -:16421:	}
        -:16422:
     1580:16423:      if (count >= 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1580
        -:16424:	{
        -:16425:	  static const char errmsg[]
        -:16426:	    = "unterminated call to function `%s': missing `%c'";
    #####:16427:	  if (reading_filename == 0)
branch  0 never executed
branch  1 never executed
    #####:16428:	    fatal (errmsg, function_table[code].name, closeparen);
call    0 never executed
        -:16429:	  else
    #####:16430:	    makefile_fatal (reading_filename, *reading_lineno_ptr, errmsg,
call    0 never executed
        -:16431:			    function_table[code].name, closeparen);
        -:16432:	}
        -:16433:
        -:16434:      /* We found the end; expand the function call.  */
        -:16435:
     1580:16436:      *op = expand_function (*op, function_table[code].function, argbeg, p);
call    0 returned 1580
     1580:16437:      *stringp = p;
     1580:16438:      return 1;
        -:16439:    }
        -:16440:
     4086:16441:  return 0;
        -:16442:}
        -:16443:
        -:16444:/* Glob-expand LINE.  The returned pointer is
        -:16445:   only good until the next call to string_glob.  */
        -:16446:
        -:16447:static char *
function string_glob called 0 returned 0% blocks executed 0%
    #####:16448:string_glob (line)
        -:16449:     char *line;
        -:16450:{
        -:16451:  static char *result = 0;
        -:16452:  static unsigned int length;
        -:16453:  register struct nameseq *chain;
        -:16454:  register unsigned int idx;
        -:16455:
    #####:16456:  chain = multi_glob (parse_file_seq
call    0 never executed
call    1 never executed
        -:16457:		      (&line, '\0', sizeof (struct nameseq),
        -:16458:		       /* We do not want parse_file_seq to strip `./'s.
        -:16459:			  That would break examples like:
        -:16460:			  $(patsubst ./%.c,obj/%.o,$(wildcard ./*.c)).  */
        -:16461:		       0),
        -:16462:		      sizeof (struct nameseq));
        -:16463:
    #####:16464:  if (result == 0)
branch  0 never executed
branch  1 never executed
        -:16465:    {
    #####:16466:      length = 100;
    #####:16467:      result = (char *) xmalloc (100);
call    0 never executed
        -:16468:    }
        -:16469:
    #####:16470:  idx = 0;
    #####:16471:  while (chain != 0)
branch  0 never executed
branch  1 never executed
        -:16472:    {
    #####:16473:      register char *name = chain->name;
    #####:16474:      unsigned int len = strlen (name);
        -:16475:
    #####:16476:      struct nameseq *next = chain->next;
    #####:16477:      free ((char *) chain);
    #####:16478:      chain = next;
        -:16479:
        -:16480:      /* multi_glob will pass names without globbing metacharacters
        -:16481:	 through as is, but we want only files that actually exist.  */
    #####:16482:      if (file_exists_p (name))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:16483:	{
    #####:16484:	  if (idx + len + 1 > length)
branch  0 never executed
branch  1 never executed
        -:16485:	    {
    #####:16486:	      length += (len + 1) * 2;
    #####:16487:	      result = (char *) xrealloc (result, length);
call    0 never executed
        -:16488:	    }
    #####:16489:	  bcopy (name, &result[idx], len);
    #####:16490:	  idx += len;
    #####:16491:	  result[idx++] = ' ';
        -:16492:	}
        -:16493:
    #####:16494:      free (name);
        -:16495:    }
        -:16496:
        -:16497:  /* Kill the last space and terminate the string.  */
    #####:16498:  if (idx == 0)
branch  0 never executed
branch  1 never executed
    #####:16499:    result[0] = '\0';
        -:16500:  else
    #####:16501:    result[idx - 1] = '\0';
        -:16502:
    #####:16503:  return result;
        -:16504:}
        -:16505:
        -:16506:
        -:16507:
        -:16508:/*************************************************************
        -:16509:  ============================================================
        -:16510:  ************************************************************
        -:16511:  ============================================================
        -:16512:  ************************************************************
        -:16513:                         vpath.c
        -:16514:  ************************************************************
        -:16515:  ============================================================
        -:16516:  ************************************************************
        -:16517:  ============================================================
        -:16518:  *************************************************************/
        -:16519:
        -:16520:/* Implementation of pattern-matching file search paths for GNU Make.
        -:16521:Copyright (C) 1988,89,91,92,93,94,95,96,97 Free Software Foundation, Inc.
        -:16522:This file is part of GNU Make.
        -:16523:
        -:16524:GNU Make is free software; you can redistribute it and/or modify
        -:16525:it under the terms of the GNU General Public License as published by
        -:16526:the Free Software Foundation; either version 2, or (at your option)
        -:16527:any later version.
        -:16528:
        -:16529:GNU Make is distributed in the hope that it will be useful,
        -:16530:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:16531:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:16532:GNU General Public License for more details.
        -:16533:
        -:16534:You should have received a copy of the GNU General Public License
        -:16535:along with GNU Make; see the file COPYING.  If not, write to
        -:16536:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:16537:
        -:16538:#include "make.h"
        -:16539:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -:16540:/* #include "variable.h"  <- modification by J.Ruthruff, 7/27 */
        -:16541:#undef stderr
        -:16542:#define stderr stdout
        -:16543:#ifdef WINDOWS32
        -:16544:#include "pathstuff.h"
        -:16545:#undef stderr
        -:16546:#define stderr stdout
        -:16547:#endif
        -:16548:
        -:16549:
        -:16550:/* Structure used to represent a selective VPATH searchpath.  */
        -:16551:
        -:16552:struct vpath
        -:16553:  {
        -:16554:    struct vpath *next;	/* Pointer to next struct in the linked list.  */
        -:16555:    char *pattern;	/* The pattern to match.  */
        -:16556:    char *percent;	/* Pointer into `pattern' where the `%' is.  */
        -:16557:    unsigned int patlen;/* Length of the pattern.  */
        -:16558:    char **searchpath;	/* Null-terminated list of directories.  */
        -:16559:    unsigned int maxlen;/* Maximum length of any entry in the list.  */
        -:16560:  };
        -:16561:
        -:16562:/* Linked-list of all selective VPATHs.  */
        -:16563:
        -:16564:static struct vpath *vpaths;
        -:16565:
        -:16566:/* Structure for the general VPATH given in the variable.  */
        -:16567:
        -:16568:static struct vpath *general_vpath;
        -:16569:
        -:16570:/* Structure for GPATH given in the variable.  */
        -:16571:
        -:16572:static struct vpath *gpaths;
        -:16573:
        -:16574:static int selective_vpath_search PARAMS ((struct vpath *path, char **file, time_t *mtime_ptr));
        -:16575:
        -:16576:/* Reverse the chain of selective VPATH lists so they
        -:16577:   will be searched in the order given in the makefiles
        -:16578:   and construct the list from the VPATH variable.  */
        -:16579:
        -:16580:void
function build_vpath_lists called 790 returned 100% blocks executed 75%
      790:16581:build_vpath_lists ()
        -:16582:{
      790:16583:  register struct vpath *new = 0;
        -:16584:  register struct vpath *old, *nexto;
        -:16585:  register char *p;
        -:16586:
        -:16587:  /* Reverse the chain.  */
     790*:16588:  for (old = vpaths; old != 0; old = nexto)
branch  0 taken 0
branch  1 taken 790 (fallthrough)
        -:16589:    {
    #####:16590:      nexto = old->next;
    #####:16591:      old->next = new;
    #####:16592:      new = old;
        -:16593:    }
        -:16594:
      790:16595:  vpaths = new;
        -:16596:
        -:16597:  /* If there is a VPATH variable with a nonnull value, construct the
        -:16598:     general VPATH list from it.  We use variable_expand rather than just
        -:16599:     calling lookup_variable so that it will be recursively expanded.  */
        -:16600:
        -:16601:  {
        -:16602:    /* Turn off --warn-undefined-variables while we expand SHELL and IFS.  */
      790:16603:    int save = warn_undefined_variables_flag;
      790:16604:    warn_undefined_variables_flag = 0;
        -:16605:
      790:16606:    p = variable_expand ("$(strip $(VPATH))");
call    0 returned 790
        -:16607:
      790:16608:    warn_undefined_variables_flag = save;
        -:16609:  }
        -:16610:
      790:16611:  if (*p != '\0')
branch  0 taken 18 (fallthrough)
branch  1 taken 772
        -:16612:    {
        -:16613:      /* Save the list of vpaths.  */
       18:16614:      struct vpath *save_vpaths = vpaths;
        -:16615:
        -:16616:      /* Empty `vpaths' so the new one will have no next, and `vpaths'
        -:16617:	 will still be nil if P contains no existing directories.  */
       18:16618:      vpaths = 0;
        -:16619:
        -:16620:      /* Parse P.  */
       18:16621:      construct_vpath_list ("%", p);
call    0 returned 18
        -:16622:
        -:16623:      /* Store the created path as the general path,
        -:16624:	 and restore the old list of vpaths.  */
       18:16625:      general_vpath = vpaths;
       18:16626:      vpaths = save_vpaths;
        -:16627:    }
        -:16628:
        -:16629:  /* If there is a GPATH variable with a nonnull value, construct the
        -:16630:     GPATH list from it.  We use variable_expand rather than just
        -:16631:     calling lookup_variable so that it will be recursively expanded.  */
        -:16632:
        -:16633:  {
        -:16634:    /* Turn off --warn-undefined-variables while we expand SHELL and IFS.  */
      790:16635:    int save = warn_undefined_variables_flag;
      790:16636:    warn_undefined_variables_flag = 0;
        -:16637:
      790:16638:    p = variable_expand ("$(strip $(GPATH))");
call    0 returned 790
        -:16639:
      790:16640:    warn_undefined_variables_flag = save;
        -:16641:  }
        -:16642:
      790:16643:  if (*p != '\0')
branch  0 taken 0 (fallthrough)
branch  1 taken 790
        -:16644:    {
        -:16645:      /* Save the list of vpaths.  */
    #####:16646:      struct vpath *save_vpaths = vpaths;
        -:16647:
        -:16648:      /* Empty `vpaths' so the new one will have no next, and `vpaths'
        -:16649:	 will still be nil if P contains no existing directories.  */
    #####:16650:      vpaths = 0;
        -:16651:
        -:16652:      /* Parse P.  */
    #####:16653:      construct_vpath_list ("%", p);
call    0 never executed
        -:16654:
        -:16655:      /* Store the created path as the GPATH,
        -:16656:	 and restore the old list of vpaths.  */
    #####:16657:      gpaths = vpaths;
    #####:16658:      vpaths = save_vpaths;
        -:16659:    }
      790:16660:}
        -:16661:
        -:16662:/* Construct the VPATH listing for the pattern and searchpath given.
        -:16663:
        -:16664:   This function is called to generate selective VPATH lists and also for
        -:16665:   the general VPATH list (which is in fact just a selective VPATH that
        -:16666:   is applied to everything).  The returned pointer is either put in the
        -:16667:   linked list of all selective VPATH lists or in the GENERAL_VPATH
        -:16668:   variable.
        -:16669:
        -:16670:   If SEARCHPATH is nil, remove all previous listings with the same
        -:16671:   pattern.  If PATTERN is nil, remove all VPATH listings.  Existing
        -:16672:   and readable directories that are not "." given in the searchpath
        -:16673:   separated by the path element separator (defined in make.h) are
        -:16674:   loaded into the directory hash table if they are not there already
        -:16675:   and put in the VPATH searchpath for the given pattern with trailing
        -:16676:   slashes stripped off if present (and if the directory is not the
        -:16677:   root, "/").  The length of the longest entry in the list is put in
        -:16678:   the structure as well.  The new entry will be at the head of the
        -:16679:   VPATHS chain.  */
        -:16680:
        -:16681:void
function construct_vpath_list called 18 returned 100% blocks executed 45%
       18:16682:construct_vpath_list (pattern, dirpath)
        -:16683:     char *pattern, *dirpath;
        -:16684:{
        -:16685:  register unsigned int elem;
        -:16686:  register char *p;
        -:16687:  register char **vpath;
        -:16688:  register unsigned int maxvpath;
        -:16689:  unsigned int maxelem;
        -:16690:  char *percent;
        -:16691:
       18:16692:  if (pattern != 0)
branch  0 taken 18 (fallthrough)
branch  1 taken 0
        -:16693:    {
       18:16694:      pattern = savestring (pattern, strlen (pattern));
call    0 returned 18
       18:16695:      percent = find_percent (pattern);
call    0 returned 18
        -:16696:    }
        -:16697:
       18:16698:  if (dirpath == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 18
        -:16699:    {
        -:16700:      /* Remove matching listings.  */
        -:16701:      register struct vpath *path, *lastpath;
        -:16702:
    #####:16703:      lastpath = 0;
    #####:16704:      path = vpaths;
    #####:16705:      while (path != 0)
branch  0 never executed
branch  1 never executed
        -:16706:	{
    #####:16707:	  struct vpath *next = path->next;
        -:16708:
    #####:16709:	  if (pattern == 0
branch  0 never executed
branch  1 never executed
    #####:16710:	      || (((percent == 0 && path->percent == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:16711:		   || (percent - pattern == path->percent - path->pattern))
branch  0 never executed
branch  1 never executed
    #####:16712:		  && streq (pattern, path->pattern)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:16713:	    {
        -:16714:	      /* Remove it from the linked list.  */
    #####:16715:	      if (lastpath == 0)
branch  0 never executed
branch  1 never executed
    #####:16716:		vpaths = path->next;
        -:16717:	      else
    #####:16718:		lastpath->next = next;
        -:16719:
        -:16720:	      /* Free its unused storage.  */
    #####:16721:	      free (path->pattern);
    #####:16722:	      free ((char *) path->searchpath);
    #####:16723:	      free ((char *) path);
        -:16724:	    }
        -:16725:	  else
    #####:16726:	    lastpath = path;
        -:16727:
    #####:16728:	  path = next;
        -:16729:	}
        -:16730:
    #####:16731:      if (pattern != 0)
branch  0 never executed
branch  1 never executed
    #####:16732:	free (pattern);
    #####:16733:      return;
        -:16734:    }
        -:16735:
        -:16736:#ifdef WINDOWS32
        -:16737:    convert_vpath_to_windows32(dirpath, ';');
        -:16738:#endif
        -:16739:
        -:16740:  /* Figure out the maximum number of VPATH entries and put it in
        -:16741:     MAXELEM.  We start with 2, one before the first separator and one
        -:16742:     nil (the list terminator) and increment our estimated number for
        -:16743:     each separator or blank we find.  */
       18:16744:  maxelem = 2;
       18:16745:  p = dirpath;
       36:16746:  while (*p != '\0')
branch  0 taken 18
branch  1 taken 18 (fallthrough)
       18:16747:    if (*p++ == PATH_SEPARATOR_CHAR || isblank (*p))
branch  0 taken 18 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 18
    #####:16748:      ++maxelem;
        -:16749:
       18:16750:  vpath = (char **) xmalloc (maxelem * sizeof (char *));
call    0 returned 18
       18:16751:  maxvpath = 0;
        -:16752:
        -:16753:  /* Skip over any initial separators and blanks.  */
       18:16754:  p = dirpath;
       18:16755:  while (*p == PATH_SEPARATOR_CHAR || isblank (*p))
branch  0 taken 0
branch  1 taken 18 (fallthrough)
branch  2 taken 0
branch  3 taken 18 (fallthrough)
    #####:16756:    ++p;
        -:16757:
       18:16758:  elem = 0;
       36:16759:  while (*p != '\0')
branch  0 taken 18
branch  1 taken 18 (fallthrough)
        -:16760:    {
        -:16761:      char *v;
        -:16762:      unsigned int len;
        -:16763:
        -:16764:      /* Find the end of this entry.  */
       18:16765:      v = p;
       36:16766:      while (*p != '\0' && *p != PATH_SEPARATOR_CHAR && !isblank (*p))
branch  0 taken 18 (fallthrough)
branch  1 taken 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0
branch  4 taken 18
branch  5 taken 0 (fallthrough)
       18:16767:	++p;
        -:16768:
       18:16769:      len = p - v;
        -:16770:      /* Make sure there's no trailing slash,
        -:16771:	 but still allow "/" as a directory.  */
        -:16772:#ifdef __MSDOS__
        -:16773:      /* We need also to leave alone a trailing slash in "d:/".  */
        -:16774:      if (len > 3 || (len > 1 && v[1] != ':'))
        -:16775:#endif
      18*:16776:      if (len > 1 && p[-1] == '/')
branch  0 taken 0 (fallthrough)
branch  1 taken 18
branch  2 never executed
branch  3 never executed
    #####:16777:	--len;
        -:16778:
       18:16779:      if (len > 1 || *v != '.')
branch  0 taken 18 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 18
        -:16780:	{
    #####:16781:	  v = savestring (v, len);
call    0 never executed
        -:16782:
        -:16783:	  /* Verify that the directory actually exists.  */
        -:16784:
    #####:16785:	  if (dir_file_exists_p (v, ""))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:16786:	    {
        -:16787:	      /* It does.  Put it in the list.  */
    #####:16788:	      vpath[elem++] = dir_name (v);
call    0 never executed
    #####:16789:	      free (v);
    #####:16790:	      if (len > maxvpath)
branch  0 never executed
branch  1 never executed
    #####:16791:		maxvpath = len;
        -:16792:	    }
        -:16793:	  else
        -:16794:	    /* The directory does not exist.  Omit from the list.  */
    #####:16795:	    free (v);
        -:16796:	}
        -:16797:
        -:16798:      /* Skip over separators and blanks between entries.  */
       18:16799:      while (*p == PATH_SEPARATOR_CHAR || isblank (*p))
branch  0 taken 0
branch  1 taken 18 (fallthrough)
branch  2 taken 0
branch  3 taken 18 (fallthrough)
    #####:16800:	++p;
        -:16801:    }
        -:16802:
       18:16803:  if (elem > 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 18
        -:16804:    {
        -:16805:      struct vpath *path;
        -:16806:      /* ELEM is now incremented one element past the last
        -:16807:	 entry, to where the nil-pointer terminator goes.
        -:16808:	 Usually this is maxelem - 1.  If not, shrink down.  */
    #####:16809:      if (elem < (maxelem - 1))
branch  0 never executed
branch  1 never executed
    #####:16810:	vpath = (char **) xrealloc ((char *) vpath,
    #####:16811:				    (elem + 1) * sizeof (char *));
call    0 never executed
        -:16812:
        -:16813:      /* Put the nil-pointer terminator on the end of the VPATH list.  */
    #####:16814:      vpath[elem] = 0;
        -:16815:
        -:16816:      /* Construct the vpath structure and put it into the linked list.  */
    #####:16817:      path = (struct vpath *) xmalloc (sizeof (struct vpath));
call    0 never executed
    #####:16818:      path->searchpath = vpath;
    #####:16819:      path->maxlen = maxvpath;
    #####:16820:      path->next = vpaths;
    #####:16821:      vpaths = path;
        -:16822:
        -:16823:      /* Set up the members.  */
    #####:16824:      path->pattern = pattern;
    #####:16825:      path->percent = percent;
    #####:16826:      path->patlen = strlen (pattern);
        -:16827:    }
        -:16828:  else
        -:16829:    {
        -:16830:      /* There were no entries, so free whatever space we allocated.  */
       18:16831:      free ((char *) vpath);
       18:16832:      if (pattern != 0)
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18:16833:	free (pattern);
        -:16834:    }
        -:16835:}
        -:16836:
        -:16837:/* Search the GPATH list for a pathname string that matches the one passed
        -:16838:   in.  If it is found, return 1.  Otherwise we return 0.  */
        -:16839:
        -:16840:int
function gpath_search called 0 returned 0% blocks executed 0%
    #####:16841:gpath_search (file, len)
        -:16842:     char *file;
        -:16843:     int len;
        -:16844:{
        -:16845:  register char **gp;
        -:16846:
    #####:16847:  if (gpaths && (len <= gpaths->maxlen))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:16848:    for (gp = gpaths->searchpath; *gp != NULL; ++gp)
branch  0 never executed
branch  1 never executed
    #####:16849:      if (!strncmp(*gp, file, len) && (*gp)[len] == '\0')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:16850:        return 1;
        -:16851:
    #####:16852:  return 0;
        -:16853:}
        -:16854:
        -:16855:/* Search the VPATH list whose pattern matches *FILE for a directory
        -:16856:   where the name pointed to by FILE exists.  If it is found, we set *FILE to
        -:16857:   the newly malloc'd name of the existing file, *MTIME_PTR (if MTIME_PTR is
        -:16858:   not NULL) to its modtime (or zero if no stat call was done), and return 1.
        -:16859:   Otherwise we return 0.  */
        -:16860:
        -:16861:int
function vpath_search called 93416 returned 100% blocks executed 28%
    93416:16862:vpath_search (file, mtime_ptr)
        -:16863:     char **file;
        -:16864:     time_t *mtime_ptr;
        -:16865:{
        -:16866:  register struct vpath *v;
        -:16867:
        -:16868:  /* If there are no VPATH entries or FILENAME starts at the root,
        -:16869:     there is nothing we can do.  */
        -:16870:
    93416:16871:  if (**file == '/'
branch  0 taken 5408 (fallthrough)
branch  1 taken 88008
        -:16872:#if defined (WINDOWS32) || defined (__MSDOS__)
        -:16873:      || **file == '\\'
        -:16874:      || (*file)[1] == ':'
        -:16875:#endif
     5408:16876:      || (vpaths == 0 && general_vpath == 0))
branch  0 taken 5408 (fallthrough)
branch  1 taken 0
branch  2 taken 5408 (fallthrough)
branch  3 taken 0
    93416:16877:    return 0;
        -:16878:
    #####:16879:  for (v = vpaths; v != 0; v = v->next)
branch  0 never executed
branch  1 never executed
    #####:16880:    if (pattern_matches (v->pattern, v->percent, *file))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16881:      if (selective_vpath_search (v, file, mtime_ptr))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16882:	return 1;
        -:16883:
    #####:16884:  if (general_vpath != 0
branch  0 never executed
branch  1 never executed
    #####:16885:      && selective_vpath_search (general_vpath, file, mtime_ptr))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:16886:    return 1;
        -:16887:
    #####:16888:  return 0;
        -:16889:}
        -:16890:
        -:16891:
        -:16892:/* Search the given VPATH list for a directory where the name pointed
        -:16893:   to by FILE exists.  If it is found, we set *FILE to the newly malloc'd
        -:16894:   name of the existing file, *MTIME_PTR (if MTIME_PTR is not NULL) to
        -:16895:   its modtime (or zero if no stat call was done), and we return 1.
        -:16896:   Otherwise we return 0.  */
        -:16897:
        -:16898:static int
function selective_vpath_search called 0 returned 0% blocks executed 0%
    #####:16899:selective_vpath_search (path, file, mtime_ptr)
        -:16900:     struct vpath *path;
        -:16901:     char **file;
        -:16902:     time_t *mtime_ptr;
        -:16903:{
        -:16904:  int not_target;
        -:16905:  char *name, *n;
        -:16906:  char *filename;
    #####:16907:  register char **vpath = path->searchpath;
    #####:16908:  unsigned int maxvpath = path->maxlen;
        -:16909:  register unsigned int i;
        -:16910:  unsigned int flen, vlen, name_dplen;
    #####:16911:  int exists = 0;
        -:16912:
        -:16913:  /* Find out if *FILE is a target.
        -:16914:     If and only if it is NOT a target, we will accept prospective
        -:16915:     files that don't exist but are mentioned in a makefile.  */
        -:16916:  {
    #####:16917:    struct file *f = lookup_file (*file);
call    0 never executed
    #####:16918:    not_target = f == 0 || !f->is_target;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:16919:  }
        -:16920:
    #####:16921:  flen = strlen (*file);
        -:16922:
        -:16923:  /* Split *FILE into a directory prefix and a name-within-directory.
        -:16924:     NAME_DPLEN gets the length of the prefix; FILENAME gets the
        -:16925:     pointer to the name-within-directory and FLEN is its length.  */
        -:16926:
    #####:16927:  n = rindex (*file, '/');
        -:16928:#if defined (WINDOWS32) || defined (__MSDOS__)
        -:16929:  /* We need the rightmost slash or backslash.  */
        -:16930:  {
        -:16931:    char *bslash = rindex(*file, '\\');
        -:16932:    if (!n || bslash > n)
        -:16933:      n = bslash;
        -:16934:  }
        -:16935:#endif
    #####:16936:  name_dplen = n != 0 ? n - *file : 0;
branch  0 never executed
branch  1 never executed
    #####:16937:  filename = name_dplen > 0 ? n + 1 : *file;
branch  0 never executed
branch  1 never executed
    #####:16938:  if (name_dplen > 0)
branch  0 never executed
branch  1 never executed
    #####:16939:    flen -= name_dplen + 1;
        -:16940:
        -:16941:  /* Allocate enough space for the biggest VPATH entry,
        -:16942:     a slash, the directory prefix that came with *FILE,
        -:16943:     another slash (although this one may not always be
        -:16944:     necessary), the filename, and a null terminator.  */
    #####:16945:  name = (char *) xmalloc (maxvpath + 1 + name_dplen + 1 + flen + 1);
call    0 never executed
        -:16946:
        -:16947:  /* Try each VPATH entry.  */
    #####:16948:  for (i = 0; vpath[i] != 0; ++i)
branch  0 never executed
branch  1 never executed
        -:16949:    {
    #####:16950:      int exists_in_cache = 0;
        -:16951:
    #####:16952:      n = name;
        -:16953:
        -:16954:      /* Put the next VPATH entry into NAME at N and increment N past it.  */
    #####:16955:      vlen = strlen (vpath[i]);
    #####:16956:      bcopy (vpath[i], n, vlen);
    #####:16957:      n += vlen;
        -:16958:
        -:16959:      /* Add the directory prefix already in *FILE.  */
    #####:16960:      if (name_dplen > 0)
branch  0 never executed
branch  1 never executed
        -:16961:	{
        -:16962:#ifndef VMS
    #####:16963:	  *n++ = '/';
        -:16964:#endif
    #####:16965:	  bcopy (*file, n, name_dplen);
    #####:16966:	  n += name_dplen;
        -:16967:	}
        -:16968:
        -:16969:#if defined (WINDOWS32) || defined (__MSDOS__)
        -:16970:      /* Cause the next if to treat backslash and slash alike.  */
        -:16971:      if (n != name && n[-1] == '\\' )
        -:16972:	n[-1] = '/';
        -:16973:#endif
        -:16974:      /* Now add the name-within-directory at the end of NAME.  */
        -:16975:#ifndef VMS
    #####:16976:      if (n != name && n[-1] != '/')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:16977:	{
    #####:16978:	  *n = '/';
    #####:16979:	  bcopy (filename, n + 1, flen + 1);
        -:16980:	}
        -:16981:      else
        -:16982:#endif
    #####:16983:	bcopy (filename, n, flen + 1);
        -:16984:
        -:16985:      /* Check if the file is mentioned in a makefile.  If *FILE is not
        -:16986:	 a target, that is enough for us to decide this file exists.
        -:16987:	 If *FILE is a target, then the file must be mentioned in the
        -:16988:	 makefile also as a target to be chosen.
        -:16989:
        -:16990:	 The restriction that *FILE must not be a target for a
        -:16991:	 makefile-mentioned file to be chosen was added by an
        -:16992:	 inadequately commented change in July 1990; I am not sure off
        -:16993:	 hand what problem it fixes.
        -:16994:
        -:16995:	 In December 1993 I loosened this restriction to allow a file
        -:16996:	 to be chosen if it is mentioned as a target in a makefile.  This
        -:16997:	 seem logical.  */
        -:16998:      {
    #####:16999:	struct file *f = lookup_file (name);
call    0 never executed
    #####:17000:	if (f != 0)
branch  0 never executed
branch  1 never executed
    #####:17001:	  exists = not_target || f->is_target;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:17002:      }
        -:17003:
    #####:17004:      if (!exists)
branch  0 never executed
branch  1 never executed
        -:17005:	{
        -:17006:	  /* That file wasn't mentioned in the makefile.
        -:17007:	     See if it actually exists.  */
        -:17008:
        -:17009:#ifdef VMS
        -:17010:	  exists_in_cache = exists = dir_file_exists_p (vpath[i], filename);
        -:17011:#else
        -:17012:	  /* Clobber a null into the name at the last slash.
        -:17013:	     Now NAME is the name of the directory to look in.  */
    #####:17014:	  *n = '\0';
        -:17015:
        -:17016:	  /* We know the directory is in the hash table now because either
        -:17017:	     construct_vpath_list or the code just above put it there.
        -:17018:	     Does the file we seek exist in it?  */
    #####:17019:	  exists_in_cache = exists = dir_file_exists_p (name, filename);
call    0 never executed
        -:17020:#endif
        -:17021:	}
        -:17022:
    #####:17023:      if (exists)
branch  0 never executed
branch  1 never executed
        -:17024:	{
        -:17025:	  /* The file is in the directory cache.
        -:17026:	     Now check that it actually exists in the filesystem.
        -:17027:	     The cache may be out of date.  When vpath thinks a file
        -:17028:	     exists, but stat fails for it, confusion results in the
        -:17029:	     higher levels.  */
        -:17030:
        -:17031:	  struct stat st;
        -:17032:
        -:17033:#ifndef VMS
        -:17034:	  /* Put the slash back in NAME.  */
    #####:17035:	  *n = '/';
        -:17036:#endif
        -:17037:
    #####:17038:	  if (!exists_in_cache	/* Makefile-mentioned file need not exist.  */
branch  0 never executed
branch  1 never executed
    #####:17039:	      || stat (name, &st) == 0) /* Does it really exist?  */
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:17040:	    {
        -:17041:	      /* We have found a file.
        -:17042:		 Store the name we found into *FILE for the caller.  */
        -:17043:
    #####:17044:	      *file = savestring (name, (n + 1 - name) + flen);
call    0 never executed
        -:17045:
    #####:17046:	      if (mtime_ptr != 0)
branch  0 never executed
branch  1 never executed
        -:17047:		/* Store the modtime into *MTIME_PTR for the caller.
        -:17048:		   If we have had no need to stat the file here,
        -:17049:		   we record a zero modtime to indicate this.  */
    #####:17050:		*mtime_ptr = exists_in_cache ? st.st_mtime : (time_t) 0;
branch  0 never executed
branch  1 never executed
        -:17051:
    #####:17052:	      free (name);
    #####:17053:	      return 1;
        -:17054:	    }
        -:17055:	  else
    #####:17056:	    exists = 0;
        -:17057:	}
        -:17058:    }
        -:17059:
    #####:17060:  free (name);
    #####:17061:  return 0;
        -:17062:}
        -:17063:
        -:17064:/* Print the data base of VPATH search paths.  */
        -:17065:
        -:17066:void
function print_vpath_data_base called 385 returned 100% blocks executed 31%
      385:17067:print_vpath_data_base ()
        -:17068:{
        -:17069:  register unsigned int nvpaths;
        -:17070:  register struct vpath *v;
        -:17071:
      385:17072:  puts ("\n# VPATH Search Paths\n");
call    0 returned 385
        -:17073:
      385:17074:  nvpaths = 0;
     385*:17075:  for (v = vpaths; v != 0; v = v->next)
branch  0 taken 0
branch  1 taken 385 (fallthrough)
        -:17076:    {
        -:17077:      register unsigned int i;
        -:17078:
    #####:17079:      ++nvpaths;
        -:17080:
    #####:17081:      printf ("vpath %s ", v->pattern);
call    0 never executed
        -:17082:
    #####:17083:      for (i = 0; v->searchpath[i] != 0; ++i)
branch  0 never executed
branch  1 never executed
    #####:17084:	printf ("%s%c", v->searchpath[i],
call    0 never executed
    #####:17085:		v->searchpath[i + 1] == 0 ? '\n' : PATH_SEPARATOR_CHAR);
branch  0 never executed
branch  1 never executed
        -:17086:    }
        -:17087:
      385:17088:  if (vpaths == 0)
branch  0 taken 385 (fallthrough)
branch  1 taken 0
      385:17089:    puts ("# No `vpath' search paths.");
call    0 returned 385
        -:17090:  else
    #####:17091:    printf ("\n# %u `vpath' search paths.\n", nvpaths);
call    0 never executed
        -:17092:
      385:17093:  if (general_vpath == 0)
branch  0 taken 385 (fallthrough)
branch  1 taken 0
      385:17094:    puts ("\n# No general (`VPATH' variable) search path.");
call    0 returned 385
        -:17095:  else
        -:17096:    {
    #####:17097:      register char **path = general_vpath->searchpath;
        -:17098:      register unsigned int i;
        -:17099:
    #####:17100:      fputs ("\n# General (`VPATH' variable) search path:\n# ", stdout);
call    0 never executed
        -:17101:
    #####:17102:      for (i = 0; path[i] != 0; ++i)
branch  0 never executed
branch  1 never executed
    #####:17103:	printf ("%s%c", path[i],
call    0 never executed
    #####:17104:		path[i + 1] == 0 ? '\n' : PATH_SEPARATOR_CHAR);
branch  0 never executed
branch  1 never executed
        -:17105:    }
      385:17106:}
        -:17107:
        -:17108:
        -:17109:
        -:17110:/*************************************************************
        -:17111:  ============================================================
        -:17112:  ************************************************************
        -:17113:  ============================================================
        -:17114:  ************************************************************
        -:17115:                         version.c
        -:17116:  ************************************************************
        -:17117:  ============================================================
        -:17118:  ************************************************************
        -:17119:  ============================================================
        -:17120:  *************************************************************/
        -:17121:
        -:17122:/* We use <config.h> instead of "config.h" so that a compilation
        -:17123:   using -I. -I$srcdir will use ./config.h rather than $srcdir/config.h
        -:17124:   (which it would do because make.h was found in $srcdir).  */
        -:17125:#include <config.h>
        -:17126:#undef stderr
        -:17127:#define stderr stdout
        -:17128:
        -:17129:char *version_string = VERSION;
        -:17130:
        -:17131:/*
        -:17132:  Local variables:
        -:17133:  version-control: never
        -:17134:  End:
        -:17135: */
        -:17136:
        -:17137:
        -:17138:
        -:17139:/*************************************************************
        -:17140:  ============================================================
        -:17141:  ************************************************************
        -:17142:  ============================================================
        -:17143:  ************************************************************
        -:17144:                         ar.c
        -:17145:  ************************************************************
        -:17146:  ============================================================
        -:17147:  ************************************************************
        -:17148:  ============================================================
        -:17149:  *************************************************************/
        -:17150:
        -:17151:/* Interface to `ar' archives for GNU Make.
        -:17152:Copyright (C) 1988,89,90,91,92,93,97 Free Software Foundation, Inc.
        -:17153:This file is part of GNU Make.
        -:17154:
        -:17155:GNU Make is free software; you can redistribute it and/or modify
        -:17156:it under the terms of the GNU General Public License as published by
        -:17157:the Free Software Foundation; either version 2, or (at your option)
        -:17158:any later version.
        -:17159:
        -:17160:GNU Make is distributed in the hope that it will be useful,
        -:17161:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:17162:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:17163:GNU General Public License for more details.
        -:17164:
        -:17165:You should have received a copy of the GNU General Public License
        -:17166:along with GNU Make; see the file COPYING.  If not, write to
        -:17167:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:17168:
        -:17169:#include "make.h"
        -:17170:#undef stderr
        -:17171:#define stderr stdout
        -:17172:
        -:17173:#ifndef	NO_ARCHIVES
        -:17174:
        -:17175:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -:17176:/* #include "dep.h"  <- modification by J.Ruthruff, 7/27 */
        -:17177:#include <fnmatch.h>
        -:17178:#undef stderr
        -:17179:#define stderr stdout
        -:17180:
        -:17181:/* Defined in arscan.c.  */
        -:17182:extern long int ar_scan PARAMS ((char *archive, long int (*function) (), long int arg));
        -:17183:extern int ar_name_equal PARAMS ((char *name, char *mem, int truncated));
        -:17184:#ifndef VMS
        -:17185:extern int ar_member_touch PARAMS ((char *arname, char *memname));
        -:17186:#endif
        -:17187:
        -:17188:/* Return nonzero if NAME is an archive-member reference, zero if not.
        -:17189:   An archive-member reference is a name like `lib(member)'.
        -:17190:   If a name like `lib((entry))' is used, a fatal error is signaled at
        -:17191:   the attempt to use this unsupported feature.  */
        -:17192:
        -:17193:int
function ar_name called 141991 returned 100% blocks executed 33%
   141991:17194:ar_name (name)
        -:17195:     char *name;
        -:17196:{
   141991:17197:  char *p = index (name, '('), *end = name + strlen (name) - 1;
        -:17198:
  141991*:17199:  if (p == 0 || p == name || *end != ')')
branch  0 taken 0 (fallthrough)
branch  1 taken 141991
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
   141991:17200:    return 0;
        -:17201:
    #####:17202:  if (p[1] == '(' && end[-1] == ')')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:17203:    fatal ("attempt to use unsupported feature: `%s'", name);
call    0 never executed
        -:17204:
    #####:17205:  return 1;
        -:17206:}
        -:17207:
        -:17208:
        -:17209:/* Parse the archive-member reference NAME into the archive and member names.
        -:17210:   Put the malloc'd archive name in *ARNAME_P if ARNAME_P is non-nil;
        -:17211:   put the malloc'd member name in *MEMNAME_P if MEMNAME_P is non-nil.  */
        -:17212:
        -:17213:void
function ar_parse_name called 0 returned 0% blocks executed 0%
    #####:17214:ar_parse_name (name, arname_p, memname_p)
        -:17215:     char *name, **arname_p, **memname_p;
        -:17216:{
    #####:17217:  char *p = index (name, '('), *end = name + strlen (name) - 1;
        -:17218:
    #####:17219:  if (arname_p != 0)
branch  0 never executed
branch  1 never executed
    #####:17220:    *arname_p = savestring (name, p - name);
call    0 never executed
        -:17221:
    #####:17222:  if (memname_p != 0)
branch  0 never executed
branch  1 never executed
    #####:17223:    *memname_p = savestring (p + 1, end - (p + 1));
call    0 never executed
    #####:17224:}
        -:17225:
        -:17226:static long int ar_member_date_1 PARAMS ((int desc, char *mem, int truncated, long int hdrpos,
        -:17227:	long int datapos, long int size, long int date, int uid, int gid, int mode, char *name));
        -:17228:
        -:17229:/* Return the modtime of NAME.  */
        -:17230:
        -:17231:time_t
function ar_member_date called 0 returned 0% blocks executed 0%
    #####:17232:ar_member_date (name)
        -:17233:     char *name;
        -:17234:{
        -:17235:  char *arname;
    #####:17236:  int arname_used = 0;
        -:17237:  char *memname;
        -:17238:  long int val;
        -:17239:
    #####:17240:  ar_parse_name (name, &arname, &memname);
call    0 never executed
        -:17241:
        -:17242:  /* Make sure we know the modtime of the archive itself because we are
        -:17243:     likely to be called just before commands to remake a member are run,
        -:17244:     and they will change the archive itself.
        -:17245:
        -:17246:     But we must be careful not to enter_file the archive itself if it does
        -:17247:     not exist, because pattern_search assumes that files found in the data
        -:17248:     base exist or can be made.  */
        -:17249:  {
        -:17250:    struct file *arfile;
    #####:17251:    arfile = lookup_file (arname);
call    0 never executed
    #####:17252:    if (arfile == 0 && file_exists_p (arname))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:17253:      {
    #####:17254:	arfile = enter_file (arname);
call    0 never executed
    #####:17255:	arname_used = 1;
        -:17256:      }
        -:17257:
    #####:17258:    if (arfile != 0)
branch  0 never executed
branch  1 never executed
    #####:17259:      (void) f_mtime (arfile, 0);
call    0 never executed
        -:17260:  }
        -:17261:
    #####:17262:  val = ar_scan (arname, ar_member_date_1, (long int) memname);
call    0 never executed
        -:17263:
    #####:17264:  if (!arname_used)
branch  0 never executed
branch  1 never executed
    #####:17265:    free (arname);
    #####:17266:  free (memname);
        -:17267:
    #####:17268:  return (val <= 0 ? (time_t) -1 : (time_t) val);
branch  0 never executed
branch  1 never executed
        -:17269:}
        -:17270:
        -:17271:/* This function is called by `ar_scan' to find which member to look at.  */
        -:17272:
        -:17273:/* ARGSUSED */
        -:17274:static long int
function ar_member_date_1 called 0 returned 0% blocks executed 0%
    #####:17275:ar_member_date_1 (desc, mem, truncated,
        -:17276:		  hdrpos, datapos, size, date, uid, gid, mode, name)
        -:17277:     int desc;
        -:17278:     char *mem;
        -:17279:     int truncated;
        -:17280:     long int hdrpos, datapos, size, date;
        -:17281:     int uid, gid, mode;
        -:17282:     char *name;
        -:17283:{
    #####:17284:  return ar_name_equal (name, mem, truncated) ? date : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:17285:}
        -:17286:
        -:17287:/* Set the archive-member NAME's modtime to now.  */
        -:17288:
        -:17289:#ifdef VMS
        -:17290:int
        -:17291:ar_touch (name)
        -:17292:     char *name;
        -:17293:{
        -:17294:  error ("touch archive member is not available on VMS");
        -:17295:  return -1;
        -:17296:}
        -:17297:#else
        -:17298:int
function ar_touch called 0 returned 0% blocks executed 0%
    #####:17299:ar_touch (name)
        -:17300:     char *name;
        -:17301:{
        -:17302:  char *arname, *memname;
    #####:17303:  int arname_used = 0;
        -:17304:  register int val;
        -:17305:
    #####:17306:  ar_parse_name (name, &arname, &memname);
call    0 never executed
        -:17307:
        -:17308:  /* Make sure we know the modtime of the archive itself before we
        -:17309:     touch the member, since this will change the archive itself.  */
        -:17310:  {
        -:17311:    struct file *arfile;
    #####:17312:    arfile = lookup_file (arname);
call    0 never executed
    #####:17313:    if (arfile == 0)
branch  0 never executed
branch  1 never executed
        -:17314:      {
    #####:17315:	arfile = enter_file (arname);
call    0 never executed
    #####:17316:	arname_used = 1;
        -:17317:      }
        -:17318:
    #####:17319:    (void) f_mtime (arfile, 0);
call    0 never executed
        -:17320:  }
        -:17321:
    #####:17322:  val = 1;
    #####:17323:  switch (ar_member_touch (arname, memname))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:17324:    {
    #####:17325:    case -1:
    #####:17326:      error ("touch: Archive `%s' does not exist", arname);
call    0 never executed
    #####:17327:      break;
    #####:17328:    case -2:
    #####:17329:      error ("touch: `%s' is not a valid archive", arname);
call    0 never executed
    #####:17330:      break;
    #####:17331:    case -3:
    #####:17332:      perror_with_name ("touch: ", arname);
call    0 never executed
    #####:17333:      break;
    #####:17334:    case 1:
    #####:17335:      error ("touch: Member `%s' does not exist in `%s'", memname, arname);
call    0 never executed
    #####:17336:      break;
    #####:17337:    case 0:
    #####:17338:      val = 0;
    #####:17339:      break;
    #####:17340:    default:
    #####:17341:      error ("touch: Bad return code from ar_member_touch on `%s'", name);
call    0 never executed
        -:17342:    }
        -:17343:
    #####:17344:  if (!arname_used)
branch  0 never executed
branch  1 never executed
    #####:17345:    free (arname);
    #####:17346:  free (memname);
        -:17347:
    #####:17348:  return val;
        -:17349:}
        -:17350:#endif /* !VMS */
        -:17351:
        -:17352:/* State of an `ar_glob' run, passed to `ar_glob_match'.  */
        -:17353:
        -:17354:struct ar_glob_state
        -:17355:  {
        -:17356:    char *arname;
        -:17357:    char *pattern;
        -:17358:    unsigned int size;
        -:17359:    struct nameseq *chain;
        -:17360:    unsigned int n;
        -:17361:  };
        -:17362:
        -:17363:/* This function is called by `ar_scan' to match one archive
        -:17364:   element against the pattern in STATE.  */
        -:17365:
        -:17366:static long int
function ar_glob_match called 0 returned 0% blocks executed 0%
    #####:17367:ar_glob_match (desc, mem, truncated,
        -:17368:	       hdrpos, datapos, size, date, uid, gid, mode,
        -:17369:	       state)
        -:17370:     int desc;
        -:17371:     char *mem;
        -:17372:     int truncated;
        -:17373:     long int hdrpos, datapos, size, date;
        -:17374:     int uid, gid, mode;
        -:17375:     struct ar_glob_state *state;
        -:17376:{
    #####:17377:  if (fnmatch (state->pattern, mem, FNM_PATHNAME|FNM_PERIOD) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:17378:    {
        -:17379:      /* We have a match.  Add it to the chain.  */
    #####:17380:      struct nameseq *new = (struct nameseq *) xmalloc (state->size);
call    0 never executed
    #####:17381:      new->name = concat (state->arname, mem, ")");
call    0 never executed
    #####:17382:      new->next = state->chain;
    #####:17383:      state->chain = new;
    #####:17384:      ++state->n;
        -:17385:    }
        -:17386:
    #####:17387:  return 0L;
        -:17388:}
        -:17389:
        -:17390:/* Alphabetic sorting function for `qsort'.  */
        -:17391:
        -:17392:static int
function ar_glob_alphacompare called 0 returned 0% blocks executed 0%
    #####:17393:ar_glob_alphacompare (a, b)
        -:17394:     char **a, **b;
        -:17395:{
    #####:17396:  return strcmp (*a, *b);
        -:17397:}
        -:17398:
        -:17399:/* Return nonzero if PATTERN contains any metacharacters.
        -:17400:   Metacharacters can be quoted with backslashes if QUOTE is nonzero.  */
        -:17401:int
function glob_pattern_p called 0 returned 0% blocks executed 0%
    #####:17402:glob_pattern_p (pattern, quote)
        -:17403:     const char *pattern;
        -:17404:     const int quote;
        -:17405:{
        -:17406:  register const char *p;
    #####:17407:  int open = 0;
        -:17408:
    #####:17409:  for (p = pattern; *p != '\0'; ++p)
branch  0 never executed
branch  1 never executed
    #####:17410:    switch (*p)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:17411:      {
    #####:17412:      case '?':
        -:17413:      case '*':
    #####:17414:	return 1;
        -:17415:
    #####:17416:      case '\\':
    #####:17417:	if (quote)
branch  0 never executed
branch  1 never executed
    #####:17418:	  ++p;
    #####:17419:	break;
        -:17420:
    #####:17421:      case '[':
    #####:17422:	open = 1;
    #####:17423:	break;
        -:17424:
    #####:17425:      case ']':
    #####:17426:	if (open)
branch  0 never executed
branch  1 never executed
    #####:17427:	  return 1;
    #####:17428:	break;
        -:17429:      }
        -:17430:
    #####:17431:  return 0;
        -:17432:}
        -:17433:
        -:17434:/* Glob for MEMBER_PATTERN in archive ARNAME.
        -:17435:   Return a malloc'd chain of matching elements (or nil if none).  */
        -:17436:
        -:17437:struct nameseq *
function ar_glob called 0 returned 0% blocks executed 0%
    #####:17438:ar_glob (arname, member_pattern, size)
        -:17439:     char *arname, *member_pattern;
        -:17440:     unsigned int size;
        -:17441:{
        -:17442:  struct ar_glob_state state;
        -:17443:  char **names;
        -:17444:  struct nameseq *n;
        -:17445:  unsigned int i;
        -:17446:
    #####:17447:  if (! glob_pattern_p (member_pattern, 1))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:17448:    return 0;
        -:17449:
        -:17450:  /* Scan the archive for matches.
        -:17451:     ar_glob_match will accumulate them in STATE.chain.  */
    #####:17452:  i = strlen (arname);
    #####:17453:  state.arname = (char *) alloca (i + 2);
    #####:17454:  bcopy (arname, state.arname, i);
    #####:17455:  state.arname[i] = '(';
    #####:17456:  state.arname[i + 1] = '\0';
    #####:17457:  state.pattern = member_pattern;
    #####:17458:  state.size = size;
    #####:17459:  state.chain = 0;
    #####:17460:  state.n = 0;
    #####:17461:  (void) ar_scan (arname, ar_glob_match, (long int) &state);
call    0 never executed
        -:17462:
    #####:17463:  if (state.chain == 0)
branch  0 never executed
branch  1 never executed
    #####:17464:    return 0;
        -:17465:
        -:17466:  /* Now put the names into a vector for sorting.  */
    #####:17467:  names = (char **) alloca (state.n * sizeof (char *));
    #####:17468:  i = 0;
    #####:17469:  for (n = state.chain; n != 0; n = n->next)
branch  0 never executed
branch  1 never executed
    #####:17470:    names[i++] = n->name;
        -:17471:
        -:17472:  /* Sort them alphabetically.  */
    #####:17473:  qsort ((char *) names, i, sizeof (*names), ar_glob_alphacompare);
call    0 never executed
        -:17474:
        -:17475:  /* Put them back into the chain in the sorted order.  */
    #####:17476:  i = 0;
    #####:17477:  for (n = state.chain; n != 0; n = n->next)
branch  0 never executed
branch  1 never executed
    #####:17478:    n->name = names[i++];
        -:17479:
    #####:17480:  return state.chain;
        -:17481:}
        -:17482:
        -:17483:#endif	/* Not NO_ARCHIVES.  */
        -:17484:
        -:17485:
        -:17486:
        -:17487:/*************************************************************
        -:17488:  ============================================================
        -:17489:  ************************************************************
        -:17490:  ============================================================
        -:17491:  ************************************************************
        -:17492:                         arscan.c
        -:17493:  ************************************************************
        -:17494:  ============================================================
        -:17495:  ************************************************************
        -:17496:  ============================================================
        -:17497:  *************************************************************/
        -:17498:
        -:17499:/* Library function for scanning an archive file.
        -:17500:Copyright (C) 1987,89,91,92,93,94,95,97 Free Software Foundation, Inc.
        -:17501:
        -:17502:This program is free software; you can redistribute it and/or modify
        -:17503:it under the terms of the GNU General Public License as published by
        -:17504:the Free Software Foundation; either version 2, or (at your option)
        -:17505:any later version.
        -:17506:
        -:17507:This program is distributed in the hope that it will be useful,
        -:17508:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:17509:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:17510:GNU General Public License for more details.
        -:17511:
        -:17512:You should have received a copy of the GNU General Public License
        -:17513:along with this program; if not, write to the Free Software
        -:17514:Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:17515:
        -:17516:#include "make.h"
        -:17517:#undef stderr
        -:17518:#define stderr stdout
        -:17519:
        -:17520:#ifdef HAVE_FCNTL_H
        -:17521:#include <fcntl.h>
        -:17522:#undef stderr
        -:17523:#define stderr stdout
        -:17524:#else
        -:17525:#include <sys/file.h>
        -:17526:#undef stderr
        -:17527:#define stderr stdout
        -:17528:#endif
        -:17529:
        -:17530:#ifndef	NO_ARCHIVES
        -:17531:
        -:17532:#ifdef VMS
        -:17533:#include <lbrdef.h>
        -:17534:#include <mhddef.h>
        -:17535:#include <credef.h>
        -:17536:#include <descrip.h>
        -:17537:#include <ctype.h>
        -:17538:#undef stderr
        -:17539:#define stderr stdout
        -:17540:#if __DECC
        -:17541:#include <unixlib.h>
        -:17542:#include <lbr$routines.h>
        -:17543:#undef stderr
        -:17544:#define stderr stdout
        -:17545:#endif
        -:17546:
        -:17547:#define uppercasify(str) {char *str1; for (str1 = str; *str1; str1++) *str1 = _toupper(*str1);}
        -:17548:
        -:17549:static void *VMS_lib_idx;
        -:17550:
        -:17551:static char *VMS_saved_memname;
        -:17552:
        -:17553:static time_t VMS_member_date;
        -:17554:
        -:17555:static long int (*VMS_function) ();
        -:17556:
        -:17557:static int
        -:17558:VMS_get_member_info (module, rfa)
        -:17559:     struct dsc$descriptor_s *module;
        -:17560:     unsigned long *rfa;
        -:17561:{
        -:17562:  int status, i;
        -:17563:  long int fnval;
        -:17564:
        -:17565:  time_t val;
        -:17566:
        -:17567:  static struct dsc$descriptor_s bufdesc =
        -:17568:    { 0, DSC$K_DTYPE_T, DSC$K_CLASS_S, NULL };
        -:17569:
        -:17570:  struct mhddef *mhd;
        -:17571:  char filename[128];
        -:17572:
        -:17573:  bufdesc.dsc$a_pointer = filename;
        -:17574:  bufdesc.dsc$w_length = sizeof (filename);
        -:17575:
        -:17576:  status = lbr$set_module (&VMS_lib_idx, rfa, &bufdesc,
        -:17577:			   &bufdesc.dsc$w_length, 0);
        -:17578:  if (! status)
        -:17579:    {
        -:17580:      error ("lbr$set_module failed to extract module info, status = %d",
        -:17581:	     status);
        -:17582:
        -:17583:      lbr$close (&VMS_lib_idx);
        -:17584:
        -:17585:      return 0;
        -:17586:    }
        -:17587:
        -:17588:  mhd = (struct mhddef *) filename;
        -:17589:
        -:17590:  val = decc$fix_time (&mhd->mhd$l_datim);
        -:17591:
        -:17592:  for (i = 0; i < module->dsc$w_length; i++)
        -:17593:    filename[i] = _tolower (module->dsc$a_pointer[i]);
        -:17594:
        -:17595:  filename[i] = '\0';
        -:17596:
        -:17597:  VMS_member_date = (time_t) -1;
        -:17598:
        -:17599:  fnval =
        -:17600:    (*VMS_function) (-1, filename, 0, 0, 0, 0, val, 0, 0, 0,
        -:17601:		     VMS_saved_memname);
        -:17602:
        -:17603:  if (fnval)
        -:17604:    {
        -:17605:      VMS_member_date = fnval;
        -:17606:      return 0;
        -:17607:    }
        -:17608:  else
        -:17609:    return 1;
        -:17610:}
        -:17611:
        -:17612:/* Takes three arguments ARCHIVE, FUNCTION and ARG.
        -:17613:
        -:17614:   Open the archive named ARCHIVE, find its members one by one,
        -:17615:   and for each one call FUNCTION with the following arguments:
        -:17616:     archive file descriptor for reading the data,
        -:17617:     member name,
        -:17618:     member name might be truncated flag,
        -:17619:     member header position in file,
        -:17620:     member data position in file,
        -:17621:     member data size,
        -:17622:     member date,
        -:17623:     member uid,
        -:17624:     member gid,
        -:17625:     member protection mode,
        -:17626:     ARG.
        -:17627:
        -:17628:   NOTE: on VMS systems, only name, date, and arg are meaningful!
        -:17629:
        -:17630:   The descriptor is poised to read the data of the member
        -:17631:   when FUNCTION is called.  It does not matter how much
        -:17632:   data FUNCTION reads.
        -:17633:
        -:17634:   If FUNCTION returns nonzero, we immediately return
        -:17635:   what FUNCTION returned.
        -:17636:
        -:17637:   Returns -1 if archive does not exist,
        -:17638:   Returns -2 if archive has invalid format.
        -:17639:   Returns 0 if have scanned successfully.  */
        -:17640:
        -:17641:long int
        -:17642:ar_scan (archive, function, arg)
        -:17643:     char *archive;
        -:17644:     long int (*function) ();
        -:17645:     long int arg;
        -:17646:{
        -:17647:  char *p;
        -:17648:
        -:17649:  static struct dsc$descriptor_s libdesc =
        -:17650:    { 0, DSC$K_DTYPE_T, DSC$K_CLASS_S, NULL };
        -:17651:
        -:17652:  unsigned long func = LBR$C_READ;
        -:17653:  unsigned long type = LBR$C_TYP_UNK;
        -:17654:  unsigned long index = 1;
        -:17655:
        -:17656:  int status;
        -:17657:
        -:17658:  status = lbr$ini_control (&VMS_lib_idx, &func, &type, 0);
        -:17659:
        -:17660:  if (! status)
        -:17661:    {
        -:17662:      error ("lbr$ini_control failed with status = %d",status);
        -:17663:      return -2;
        -:17664:    }
        -:17665:
        -:17666:  libdesc.dsc$a_pointer = archive;
        -:17667:  libdesc.dsc$w_length = strlen (archive);
        -:17668:
        -:17669:  status = lbr$open (&VMS_lib_idx, &libdesc, 0, 0, 0, 0, 0);
        -:17670:
        -:17671:  if (! status)
        -:17672:    {
        -:17673:      error ("unable to open library `%s' to lookup member `%s'",
        -:17674:	     archive, (char *)arg);
        -:17675:      return -1;
        -:17676:    }
        -:17677:
        -:17678:  VMS_saved_memname = (char *)arg;
        -:17679:
        -:17680:  /* For comparison, delete .obj from arg name.  */
        -:17681:
        -:17682:  p = rindex (VMS_saved_memname, '.');
        -:17683:  if (p)
        -:17684:    *p = '\0';
        -:17685:
        -:17686:  VMS_function = function;
        -:17687:
        -:17688:  lbr$get_index (&VMS_lib_idx, &index, VMS_get_member_info, 0);
        -:17689:
        -:17690:  /* Undo the damage.  */
        -:17691:  if (p)
        -:17692:    *p = '.';
        -:17693:
        -:17694:  lbr$close (&VMS_lib_idx);
        -:17695:
        -:17696:  return VMS_member_date > 0 ? VMS_member_date : 0;
        -:17697:}
        -:17698:
        -:17699:#else /* !VMS */
        -:17700:
        -:17701:/* SCO Unix's compiler defines both of these.  */
        -:17702:#ifdef	M_UNIX
        -:17703:#undef	M_XENIX
        -:17704:#endif
        -:17705:
        -:17706:/* On the sun386i and in System V rel 3, ar.h defines two different archive
        -:17707:   formats depending upon whether you have defined PORTAR (normal) or PORT5AR
        -:17708:   (System V Release 1).  There is no default, one or the other must be defined
        -:17709:   to have a nonzero value.  */
        -:17710:
        -:17711:#if (!defined (PORTAR) || PORTAR == 0) && (!defined (PORT5AR) || PORT5AR == 0)
        -:17712:#undef	PORTAR
        -:17713:#ifdef M_XENIX
        -:17714:/* According to Jim Sievert <jas1@rsvl.unisys.com>, for SCO XENIX defining
        -:17715:   PORTAR to 1 gets the wrong archive format, and defining it to 0 gets the
        -:17716:   right one.  */
        -:17717:#define PORTAR 0
        -:17718:#else
        -:17719:#define PORTAR 1
        -:17720:#endif
        -:17721:#endif
        -:17722:
        -:17723:#include <ar.h>
        -:17724:#undef stderr
        -:17725:#define stderr stdout
        -:17726:
        -:17727:/* Cray's <ar.h> apparently defines this.  */
        -:17728:#ifndef	AR_HDR_SIZE
        -:17729:#define	AR_HDR_SIZE	(sizeof (struct ar_hdr))
        -:17730:#endif
        -:17731:
        -:17732:/* Takes three arguments ARCHIVE, FUNCTION and ARG.
        -:17733:
        -:17734:   Open the archive named ARCHIVE, find its members one by one,
        -:17735:   and for each one call FUNCTION with the following arguments:
        -:17736:     archive file descriptor for reading the data,
        -:17737:     member name,
        -:17738:     member name might be truncated flag,
        -:17739:     member header position in file,
        -:17740:     member data position in file,
        -:17741:     member data size,
        -:17742:     member date,
        -:17743:     member uid,
        -:17744:     member gid,
        -:17745:     member protection mode,
        -:17746:     ARG.
        -:17747:
        -:17748:   The descriptor is poised to read the data of the member
        -:17749:   when FUNCTION is called.  It does not matter how much
        -:17750:   data FUNCTION reads.
        -:17751:
        -:17752:   If FUNCTION returns nonzero, we immediately return
        -:17753:   what FUNCTION returned.
        -:17754:
        -:17755:   Returns -1 if archive does not exist,
        -:17756:   Returns -2 if archive has invalid format.
        -:17757:   Returns 0 if have scanned successfully.  */
        -:17758:
        -:17759:long int
function ar_scan called 0 returned 0% blocks executed 0%
    #####:17760:ar_scan (archive, function, arg)
        -:17761:     char *archive;
        -:17762:     long int (*function) ();
        -:17763:     long int arg;
        -:17764:{
        -:17765:#ifdef AIAMAG
        -:17766:  FL_HDR fl_header;
        -:17767:#else
    #####:17768:  int long_name = 0;
        -:17769:#endif
    #####:17770:  char *namemap = 0;
    #####:17771:  register int desc = open (archive, O_RDONLY, 0);
call    0 never executed
    #####:17772:  if (desc < 0)
branch  0 never executed
branch  1 never executed
    #####:17773:    return -1;
        -:17774:#ifdef SARMAG
        -:17775:  {
        -:17776:    char buf[SARMAG];
    #####:17777:    register int nread = read (desc, buf, SARMAG);
call    0 never executed
    #####:17778:    if (nread != SARMAG || bcmp (buf, ARMAG, SARMAG))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:17779:      {
    #####:17780:	(void) close (desc);
call    0 never executed
    #####:17781:	return -2;
        -:17782:      }
        -:17783:  }
        -:17784:#else
        -:17785:#ifdef AIAMAG
        -:17786:  {
        -:17787:    register int nread = read (desc, (char *) &fl_header, FL_HSZ);
        -:17788:    if (nread != FL_HSZ || bcmp (fl_header.fl_magic, AIAMAG, SAIAMAG))
        -:17789:      {
        -:17790:	(void) close (desc);
        -:17791:	return -2;
        -:17792:      }
        -:17793:  }
        -:17794:#else
        -:17795:  {
        -:17796:#ifndef M_XENIX
        -:17797:    int buf;
        -:17798:#else
        -:17799:    unsigned short int buf;
        -:17800:#endif
        -:17801:    register int nread = read(desc, &buf, sizeof (buf));
        -:17802:    if (nread != sizeof (buf) || buf != ARMAG)
        -:17803:      {
        -:17804:	(void) close (desc);
        -:17805:	return -2;
        -:17806:      }
        -:17807:  }
        -:17808:#endif
        -:17809:#endif
        -:17810:
        -:17811:  /* Now find the members one by one.  */
        -:17812:  {
        -:17813:#ifdef SARMAG
    #####:17814:    register long int member_offset = SARMAG;
        -:17815:#else
        -:17816:#ifdef AIAMAG
        -:17817:    long int member_offset;
        -:17818:    long int last_member_offset;
        -:17819:
        -:17820:    sscanf (fl_header.fl_fstmoff, "%12ld", &member_offset);
        -:17821:    sscanf (fl_header.fl_lstmoff, "%12ld", &last_member_offset);
        -:17822:
        -:17823:    if (member_offset == 0)
        -:17824:      {
        -:17825:	/* Empty archive.  */
        -:17826:	close (desc);
        -:17827:	return 0;
        -:17828:      }
        -:17829:#else
        -:17830:#ifndef	M_XENIX
        -:17831:    register long int member_offset = sizeof (int);
        -:17832:#else	/* Xenix.  */
        -:17833:    register long int member_offset = sizeof (unsigned short int);
        -:17834:#endif	/* Not Xenix.  */
        -:17835:#endif
        -:17836:#endif
        -:17837:
        -:17838:    while (1)
    #####:17839:      {
        -:17840:	register int nread;
        -:17841:	struct ar_hdr member_header;
        -:17842:#ifdef AIAMAG
        -:17843:	char name[256];
        -:17844:	int name_len;
        -:17845:	long int dateval;
        -:17846:	int uidval, gidval;
        -:17847:	long int data_offset;
        -:17848:#else
        -:17849:	char namebuf[sizeof member_header.ar_name + 1];
        -:17850:	char *name;
        -:17851:	int is_namemap;		/* Nonzero if this entry maps long names.  */
        -:17852:#endif
        -:17853:	long int eltsize;
        -:17854:	int eltmode;
        -:17855:	long int fnval;
        -:17856:
    #####:17857:	if (lseek (desc, member_offset, 0) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:17858:	  {
    #####:17859:	    (void) close (desc);
call    0 never executed
    #####:17860:	    return -2;
        -:17861:	  }
        -:17862:
        -:17863:#ifdef AIAMAG
        -:17864:#define	AR_MEMHDR	(AR_HDR_SIZE - sizeof (member_header._ar_name))
        -:17865:	nread = read (desc, (char *) &member_header, AR_MEMHDR);
        -:17866:
        -:17867:	if (nread != AR_MEMHDR)
        -:17868:	  {
        -:17869:	    (void) close (desc);
        -:17870:	    return -2;
        -:17871:	  }
        -:17872:
        -:17873:	sscanf (member_header.ar_namlen, "%4d", &name_len);
        -:17874:	nread = read (desc, name, name_len);
        -:17875:
        -:17876:	if (nread != name_len)
        -:17877:	  {
        -:17878:	    (void) close (desc);
        -:17879:	    return -2;
        -:17880:	  }
        -:17881:
        -:17882:	name[name_len] = 0;
        -:17883:
        -:17884:	sscanf (member_header.ar_date, "%12ld", &dateval);
        -:17885:	sscanf (member_header.ar_uid, "%12d", &uidval);
        -:17886:	sscanf (member_header.ar_gid, "%12d", &gidval);
        -:17887:	sscanf (member_header.ar_mode, "%12o", &eltmode);
        -:17888:	sscanf (member_header.ar_size, "%12ld", &eltsize);
        -:17889:
        -:17890:	if ((data_offset = member_offset + AR_MEMHDR + name_len + 2) % 2)
        -:17891:	    ++data_offset;
        -:17892:
        -:17893:	fnval =
        -:17894:	  (*function) (desc, name, 0,
        -:17895:		       member_offset, data_offset, eltsize,
        -:17896:		       dateval, uidval, gidval,
        -:17897:		       eltmode, arg);
        -:17898:
        -:17899:#else	/* Not AIAMAG.  */
    #####:17900:	nread = read (desc, (char *) &member_header, AR_HDR_SIZE);
call    0 never executed
    #####:17901:	if (nread == 0)
branch  0 never executed
branch  1 never executed
        -:17902:	  /* No data left means end of file; that is OK.  */
    #####:17903:	  break;
        -:17904:
    #####:17905:	if (nread != AR_HDR_SIZE
branch  0 never executed
branch  1 never executed
        -:17906:#ifdef ARFMAG
    #####:17907:	    || bcmp (member_header.ar_fmag, ARFMAG, 2)
branch  0 never executed
branch  1 never executed
        -:17908:#endif
        -:17909:	    )
        -:17910:	  {
    #####:17911:	    (void) close (desc);
call    0 never executed
    #####:17912:	    return -2;
        -:17913:	  }
        -:17914:
    #####:17915:	name = namebuf;
    #####:17916:	bcopy (member_header.ar_name, name, sizeof member_header.ar_name);
        -:17917:	{
    #####:17918:	  register char *p = name + sizeof member_header.ar_name;
        -:17919:	  do
    #####:17920:	    *p = '\0';
    #####:17921:	  while (p > name && *--p == ' ');
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:17922:
        -:17923:#ifndef AIAMAG
        -:17924:	  /* If the member name is "//" or "ARFILENAMES/" this may be
        -:17925:	     a list of file name mappings.  The maximum file name
        -:17926: 	     length supported by the standard archive format is 14
        -:17927: 	     characters.  This member will actually always be the
        -:17928: 	     first or second entry in the archive, but we don't check
        -:17929: 	     that.  */
    #####:17930: 	  is_namemap = (!strcmp (name, "//")
    #####:17931:			|| !strcmp (name, "ARFILENAMES/"));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:17932:#endif	/* Not AIAMAG. */
        -:17933:	  /* On some systems, there is a slash after each member name.  */
    #####:17934:	  if (*p == '/')
branch  0 never executed
branch  1 never executed
    #####:17935:	    *p = '\0';
        -:17936:
        -:17937:#ifndef AIAMAG
        -:17938: 	  /* If the member name starts with a space or a slash, this
        -:17939: 	     is an index into the file name mappings (used by GNU ar).
        -:17940: 	     Otherwise if the member name looks like #1/NUMBER the
        -:17941: 	     real member name appears in the element data (used by
        -:17942: 	     4.4BSD).  */
    #####:17943: 	  if (! is_namemap
branch  0 never executed
branch  1 never executed
    #####:17944: 	      && (name[0] == ' ' || name[0] == '/')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:17945: 	      && namemap != 0)
branch  0 never executed
branch  1 never executed
        -:17946:	    {
    #####:17947:	      name = namemap + atoi (name + 1);
    #####:17948:	      long_name = 1;
        -:17949:	    }
    #####:17950: 	  else if (name[0] == '#'
branch  0 never executed
branch  1 never executed
    #####:17951: 		   && name[1] == '1'
branch  0 never executed
branch  1 never executed
    #####:17952: 		   && name[2] == '/')
branch  0 never executed
branch  1 never executed
        -:17953: 	    {
    #####:17954: 	      int namesize = atoi (name + 3);
        -:17955:
    #####:17956: 	      name = (char *) alloca (namesize + 1);
    #####:17957: 	      nread = read (desc, name, namesize);
call    0 never executed
    #####:17958: 	      if (nread != namesize)
branch  0 never executed
branch  1 never executed
        -:17959: 		{
    #####:17960: 		  close (desc);
call    0 never executed
    #####:17961: 		  return -2;
        -:17962: 		}
    #####:17963: 	      name[namesize] = '\0';
        -:17964:
    #####:17965:	      long_name = 1;
        -:17966: 	    }
        -:17967:#endif /* Not AIAMAG. */
        -:17968:	}
        -:17969:
        -:17970:#ifndef	M_XENIX
    #####:17971:	sscanf (member_header.ar_mode, "%o", &eltmode);
    #####:17972:	eltsize = atol (member_header.ar_size);
        -:17973:#else	/* Xenix.  */
        -:17974:	eltmode = (unsigned short int) member_header.ar_mode;
        -:17975:	eltsize = member_header.ar_size;
        -:17976:#endif	/* Not Xenix.  */
        -:17977:
        -:17978:	fnval =
    #####:17979:	  (*function) (desc, name, ! long_name, member_offset,
call    0 never executed
        -:17980:		       member_offset + AR_HDR_SIZE, eltsize,
        -:17981:#ifndef	M_XENIX
        -:17982:		       atol (member_header.ar_date),
        -:17983:		       atoi (member_header.ar_uid),
        -:17984:		       atoi (member_header.ar_gid),
        -:17985:#else	/* Xenix.  */
        -:17986:		       member_header.ar_date,
        -:17987:		       member_header.ar_uid,
        -:17988:		       member_header.ar_gid,
        -:17989:#endif	/* Not Xenix.  */
        -:17990:		       eltmode, arg);
        -:17991:
        -:17992:#endif  /* AIAMAG.  */
        -:17993:
    #####:17994:	if (fnval)
branch  0 never executed
branch  1 never executed
        -:17995:	  {
    #####:17996:	    (void) close (desc);
call    0 never executed
    #####:17997:	    return fnval;
        -:17998:	  }
        -:17999:
        -:18000:#ifdef AIAMAG
        -:18001:	if (member_offset == last_member_offset)
        -:18002:	  /* End of the chain.  */
        -:18003:	  break;
        -:18004:
        -:18005:	sscanf (member_header.ar_nxtmem, "%12ld", &member_offset);
        -:18006:
        -:18007:	if (lseek (desc, member_offset, 0) != member_offset)
        -:18008:	  {
        -:18009:	    (void) close (desc);
        -:18010:	    return -2;
        -:18011:	  }
        -:18012:#else
        -:18013:
        -:18014: 	/* If this member maps archive names, we must read it in.  The
        -:18015: 	   name map will always precede any members whose names must
        -:18016: 	   be mapped.  */
    #####:18017:	if (is_namemap)
branch  0 never executed
branch  1 never executed
        -:18018: 	  {
        -:18019: 	    char *clear;
        -:18020: 	    char *limit;
        -:18021:
    #####:18022: 	    namemap = (char *) alloca (eltsize);
    #####:18023: 	    nread = read (desc, namemap, eltsize);
call    0 never executed
    #####:18024: 	    if (nread != eltsize)
branch  0 never executed
branch  1 never executed
        -:18025: 	      {
    #####:18026: 		(void) close (desc);
call    0 never executed
    #####:18027: 		return -2;
        -:18028: 	      }
        -:18029:
        -:18030: 	    /* The names are separated by newlines.  Some formats have
        -:18031: 	       a trailing slash.  Null terminate the strings for
        -:18032: 	       convenience.  */
    #####:18033: 	    limit = namemap + eltsize;
    #####:18034: 	    for (clear = namemap; clear < limit; clear++)
branch  0 never executed
branch  1 never executed
        -:18035: 	      {
    #####:18036: 		if (*clear == '\n')
branch  0 never executed
branch  1 never executed
        -:18037: 		  {
    #####:18038: 		    *clear = '\0';
    #####:18039: 		    if (clear[-1] == '/')
branch  0 never executed
branch  1 never executed
    #####:18040: 		      clear[-1] = '\0';
        -:18041: 		  }
        -:18042: 	      }
        -:18043:
    #####:18044:	    is_namemap = 0;
        -:18045: 	  }
        -:18046:
    #####:18047:	member_offset += AR_HDR_SIZE + eltsize;
    #####:18048:	if (member_offset % 2 != 0)
branch  0 never executed
branch  1 never executed
    #####:18049:	  member_offset++;
        -:18050:#endif
        -:18051:      }
        -:18052:  }
        -:18053:
    #####:18054:  close (desc);
call    0 never executed
    #####:18055:  return 0;
        -:18056:}
        -:18057:#endif /* !VMS */
        -:18058:
        -:18059:/* Return nonzero iff NAME matches MEM.
        -:18060:   If TRUNCATED is nonzero, MEM may be truncated to
        -:18061:   sizeof (struct ar_hdr.ar_name) - 1.  */
        -:18062:
        -:18063:int
function ar_name_equal called 0 returned 0% blocks executed 0%
    #####:18064:ar_name_equal (name, mem, truncated)
        -:18065:     char *name, *mem;
        -:18066:     int truncated;
        -:18067:{
        -:18068:  char *p;
        -:18069:
    #####:18070:  p = rindex (name, '/');
    #####:18071:  if (p != 0)
branch  0 never executed
branch  1 never executed
    #####:18072:    name = p + 1;
        -:18073:
        -:18074:  /* We no longer use this kludge, since we
        -:18075:     now support long archive member names.  */
        -:18076:
        -:18077:#if 0 && !defined (AIAMAG) && !defined (APOLLO)
        -:18078:
        -:18079:  {
        -:18080:    /* `reallylongname.o' matches `reallylongnam.o'.
        -:18081:       If member names have a trailing slash, that's `reallylongna.o'.  */
        -:18082:
        -:18083:    struct ar_hdr h;
        -:18084:    unsigned int max = sizeof (h.ar_name);
        -:18085:    unsigned int namelen, memlen;
        -:18086:
        -:18087:    if (strncmp (name, mem, max - 3))
        -:18088:      return 0;
        -:18089:
        -:18090:    namelen = strlen (name);
        -:18091:    memlen = strlen (mem);
        -:18092:
        -:18093:    if (namelen > memlen && memlen >= max - 1
        -:18094:	&& name[namelen - 2] == '.' && name[namelen - 1] == 'o'
        -:18095:	&& mem[memlen - 2] == '.' && mem[memlen - 1] == 'o')
        -:18096:      return 1;
        -:18097:
        -:18098:    if (namelen != memlen)
        -:18099:      return 0;
        -:18100:
        -:18101:    return (namelen < max - 3 || !strcmp (name + max - 3, mem + max - 3));
        -:18102:  }
        -:18103:
        -:18104:#else	/* AIX or APOLLO.  */
        -:18105:#ifndef VMS
    #####:18106:  if (truncated)
branch  0 never executed
branch  1 never executed
        -:18107:    {
        -:18108:#ifdef AIAMAG
        -:18109:      /* TRUNCATED should never be set on this system.  */
        -:18110:      abort ();
        -:18111:#else
        -:18112:      struct ar_hdr hdr;
    #####:18113:      return !strncmp (name, mem,
        -:18114:		       sizeof (hdr.ar_name) -
        -:18115:#if !defined (__hpux) && !defined (cray)
        -:18116:		       1
        -:18117:#else
        -:18118:		       2
        -:18119:#endif /* !__hpux && !cray */
        -:18120:		       );
        -:18121:#endif
        -:18122:    }
        -:18123:#endif /* !VMS */
        -:18124:
    #####:18125:  return !strcmp (name, mem);
        -:18126:
        -:18127:#endif
        -:18128:}
        -:18129:
        -:18130:#ifndef VMS
        -:18131:/* ARGSUSED */
        -:18132:static long int
function ar_member_pos called 0 returned 0% blocks executed 0%
    #####:18133:ar_member_pos (desc, mem, truncated,
        -:18134:	       hdrpos, datapos, size, date, uid, gid, mode, name)
        -:18135:     int desc;
        -:18136:     char *mem;
        -:18137:     int truncated;
        -:18138:     long int hdrpos, datapos, size, date;
        -:18139:     int uid, gid, mode;
        -:18140:     char *name;
        -:18141:{
    #####:18142:  if (!ar_name_equal (name, mem, truncated))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:18143:    return 0;
    #####:18144:  return hdrpos;
        -:18145:}
        -:18146:
        -:18147:/* Set date of member MEMNAME in archive ARNAME to current time.
        -:18148:   Returns 0 if successful,
        -:18149:   -1 if file ARNAME does not exist,
        -:18150:   -2 if not a valid archive,
        -:18151:   -3 if other random system call error (including file read-only),
        -:18152:   1 if valid but member MEMNAME does not exist.  */
        -:18153:
        -:18154:int
function ar_member_touch called 0 returned 0% blocks executed 0%
    #####:18155:ar_member_touch (arname, memname)
        -:18156:     char *arname, *memname;
        -:18157:{
    #####:18158:  register long int pos = ar_scan (arname, ar_member_pos, (long int) memname);
call    0 never executed
        -:18159:  register int fd;
        -:18160:  struct ar_hdr ar_hdr;
        -:18161:  register int i;
        -:18162:  struct stat statbuf;
        -:18163:
    #####:18164:  if (pos < 0)
branch  0 never executed
branch  1 never executed
    #####:18165:    return (int) pos;
    #####:18166:  if (!pos)
branch  0 never executed
branch  1 never executed
    #####:18167:    return 1;
        -:18168:
    #####:18169:  fd = open (arname, O_RDWR, 0666);
call    0 never executed
    #####:18170:  if (fd < 0)
branch  0 never executed
branch  1 never executed
    #####:18171:    return -3;
        -:18172:  /* Read in this member's header */
    #####:18173:  if (lseek (fd, pos, 0) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:18174:    goto lose;
    #####:18175:  if (AR_HDR_SIZE != read (fd, (char *) &ar_hdr, AR_HDR_SIZE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:18176:    goto lose;
        -:18177:  /* Write back the header, thus touching the archive file.  */
    #####:18178:  if (lseek (fd, pos, 0) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:18179:    goto lose;
    #####:18180:  if (AR_HDR_SIZE != write (fd, (char *) &ar_hdr, AR_HDR_SIZE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:18181:    goto lose;
        -:18182:  /* The file's mtime is the time we we want.  */
        -:18183:#ifdef EINTR
    #####:18184:  while (fstat (fd, &statbuf) < 0 && errno == EINTR);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:18185:#else
        -:18186:  fstat (fd, &statbuf);
        -:18187:#endif
        -:18188:#if defined(ARFMAG) || defined(AIAMAG)
        -:18189:  /* Advance member's time to that time */
    #####:18190:  for (i = 0; i < sizeof ar_hdr.ar_date; i++)
branch  0 never executed
branch  1 never executed
    #####:18191:    ar_hdr.ar_date[i] = ' ';
    #####:18192:  sprintf (ar_hdr.ar_date, "%ld", (long int) statbuf.st_mtime);
        -:18193:#ifdef AIAMAG
        -:18194:  ar_hdr.ar_date[strlen(ar_hdr.ar_date)] = ' ';
        -:18195:#endif
        -:18196:#else
        -:18197:  ar_hdr.ar_date = statbuf.st_mtime;
        -:18198:#endif
        -:18199:  /* Write back this member's header */
    #####:18200:  if (lseek (fd, pos, 0) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:18201:    goto lose;
    #####:18202:  if (AR_HDR_SIZE != write (fd, (char *) &ar_hdr, AR_HDR_SIZE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:18203:    goto lose;
    #####:18204:  close (fd);
call    0 never executed
    #####:18205:  return 0;
        -:18206:
    #####:18207: lose:
    #####:18208:  i = errno;
    #####:18209:  close (fd);
call    0 never executed
    #####:18210:  errno = i;
    #####:18211:  return -3;
        -:18212:}
        -:18213:#endif
        -:18214:
        -:18215:#ifdef TEST
        -:18216:
        -:18217:long int
        -:18218:describe_member (desc, name, truncated,
        -:18219:		 hdrpos, datapos, size, date, uid, gid, mode)
        -:18220:     int desc;
        -:18221:     char *name;
        -:18222:     int truncated;
        -:18223:     long int hdrpos, datapos, size, date;
        -:18224:     int uid, gid, mode;
        -:18225:{
        -:18226:  extern char *ctime ();
        -:18227:
        -:18228:  printf ("Member `%s'%s: %ld bytes at %ld (%ld).\n",
        -:18229:	  name, truncated ? " (name might be truncated)" : "",
        -:18230:	  size, hdrpos, datapos);
        -:18231:  printf ("  Date %s", ctime (&date));
        -:18232:  printf ("  uid = %d, gid = %d, mode = 0%o.\n", uid, gid, mode);
        -:18233:
        -:18234:  return 0;
        -:18235:}
        -:18236:
        -:18237:main (argc, argv)
        -:18238:     int argc;
        -:18239:     char **argv;
        -:18240:{
        -:18241:  ar_scan (argv[1], describe_member);
        -:18242:  return 0;
        -:18243:}
        -:18244:
        -:18245:#endif	/* TEST.  */
        -:18246:
        -:18247:#endif	/* NO_ARCHIVES.  */
        -:18248:
        -:18249:
        -:18250:
        -:18251:/*************************************************************
        -:18252:  ============================================================
        -:18253:  ************************************************************
        -:18254:  ============================================================
        -:18255:  ************************************************************
        -:18256:                         remote-stub.c
        -:18257:  ************************************************************
        -:18258:  ============================================================
        -:18259:  ************************************************************
        -:18260:  ============================================================
        -:18261:  *************************************************************/
        -:18262:
        -:18263:/* Template for the remote job exportation interface to GNU Make.
        -:18264:Copyright (C) 1988, 1989, 1992, 1993, 1996 Free Software Foundation, Inc.
        -:18265:This file is part of GNU Make.
        -:18266:
        -:18267:GNU Make is free software; you can redistribute it and/or modify
        -:18268:it under the terms of the GNU General Public License as published by
        -:18269:the Free Software Foundation; either version 2, or (at your option)
        -:18270:any later version.
        -:18271:
        -:18272:GNU Make is distributed in the hope that it will be useful,
        -:18273:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:18274:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:18275:GNU General Public License for more details.
        -:18276:
        -:18277:You should have received a copy of the GNU General Public License
        -:18278:along with GNU Make; see the file COPYING.  If not, write to
        -:18279:the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:18280:
        -:18281:#include "make.h"
        -:18282:/* #include "filedef.h"  <- modification by J.Ruthruff, 7/27 */
        -:18283:#include "job.h"
        -:18284:/* #include "commands.h"  <- modification by J.Ruthruff, 7/27 */
        -:18285:#undef stderr
        -:18286:#define stderr stdout
        -:18287:
        -:18288:
        -:18289:char *remote_description = 0;
        -:18290:
        -:18291:/* Call once at startup even if no commands are run.  */
        -:18292:
        -:18293:void
function remote_setup called 790 returned 100% blocks executed 100%
      790:18294:remote_setup ()
        -:18295:{
      790:18296:}
        -:18297:
        -:18298:/* Called before exit.  */
        -:18299:
        -:18300:void
function remote_cleanup called 793 returned 100% blocks executed 100%
      793:18301:remote_cleanup ()
        -:18302:{
      793:18303:}
        -:18304:
        -:18305:/* Return nonzero if the next job should be done remotely.  */
        -:18306:
        -:18307:int
function start_remote_job_p called 4 returned 100% blocks executed 100%
        4:18308:start_remote_job_p ()
        -:18309:{
        4:18310:  return 0;
        -:18311:}
        -:18312:
        -:18313:/* Start a remote job running the command in ARGV,
        -:18314:   with environment from ENVP.  It gets standard input from STDIN_FD.  On
        -:18315:   failure, return nonzero.  On success, return zero, and set *USED_STDIN
        -:18316:   to nonzero if it will actually use STDIN_FD, zero if not, set *ID_PTR to
        -:18317:   a unique identification, and set *IS_REMOTE to zero if the job is local,
        -:18318:   nonzero if it is remote (meaning *ID_PTR is a process ID).  */
        -:18319:
        -:18320:int
function start_remote_job called 0 returned 0% blocks executed 0%
    #####:18321:start_remote_job (argv, envp, stdin_fd, is_remote, id_ptr, used_stdin)
        -:18322:     char **argv, **envp;
        -:18323:     int stdin_fd;
        -:18324:     int *is_remote;
        -:18325:     int *id_ptr;
        -:18326:     int *used_stdin;
        -:18327:{
    #####:18328:  return -1;
        -:18329:}
        -:18330:
        -:18331:/* Get the status of a dead remote child.  Block waiting for one to die
        -:18332:   if BLOCK is nonzero.  Set *EXIT_CODE_PTR to the exit status, *SIGNAL_PTR
        -:18333:   to the termination signal or zero if it exited normally, and *COREDUMP_PTR
        -:18334:   nonzero if it dumped core.  Return the ID of the child that died,
        -:18335:   0 if we would have to block and !BLOCK, or < 0 if there were none.  */
        -:18336:
        -:18337:int
function remote_status called 0 returned 0% blocks executed 0%
    #####:18338:remote_status (exit_code_ptr, signal_ptr, coredump_ptr, block)
        -:18339:     int *exit_code_ptr, *signal_ptr, *coredump_ptr;
        -:18340:     int block;
        -:18341:{
    #####:18342:  errno = ECHILD;
    #####:18343:  return -1;
        -:18344:}
        -:18345:
        -:18346:/* Block asynchronous notification of remote child death.
        -:18347:   If this notification is done by raising the child termination
        -:18348:   signal, do not block that signal.  */
        -:18349:void
function block_remote_children called 0 returned 0% blocks executed 0%
    #####:18350:block_remote_children ()
        -:18351:{
    #####:18352:  return;
        -:18353:}
        -:18354:
        -:18355:/* Restore asynchronous notification of remote child death.
        -:18356:   If this is done by raising the child termination signal,
        -:18357:   do not unblock that signal.  */
        -:18358:void
function unblock_remote_children called 0 returned 0% blocks executed 0%
    #####:18359:unblock_remote_children ()
        -:18360:{
    #####:18361:  return;
        -:18362:}
        -:18363:
        -:18364:/* Send signal SIG to child ID.  Return 0 if successful, -1 if not.  */
        -:18365:int
function remote_kill called 0 returned 0% blocks executed 0%
    #####:18366:remote_kill (id, sig)
        -:18367:     int id;
        -:18368:     int sig;
        -:18369:{
    #####:18370:  return -1;
        -:18371:}
        -:18372:
        -:18373:
        -:18374:
        -:18375:/*************************************************************
        -:18376:  ============================================================
        -:18377:  ************************************************************
        -:18378:  ============================================================
        -:18379:  ************************************************************
        -:18380:                         signame.c
        -:18381:  ************************************************************
        -:18382:  ============================================================
        -:18383:  ************************************************************
        -:18384:  ============================================================
        -:18385:  *************************************************************/
        -:18386:
        -:18387:/* Convert between signal names and numbers.
        -:18388:   Copyright (C) 1990, 1992, 1993, 1995, 1996 Free Software Foundation, Inc.
        -:18389:   This file is part of the GNU C Library.
        -:18390:
        -:18391:   The GNU C Library is free software; you can redistribute it and/or
        -:18392:   modify it under the terms of the GNU Library General Public License as
        -:18393:   published by the Free Software Foundation; either version 2 of the
        -:18394:   License, or (at your option) any later version.
        -:18395:
        -:18396:   The GNU C Library is distributed in the hope that it will be useful,
        -:18397:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:18398:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:18399:   Library General Public License for more details.
        -:18400:
        -:18401:   You should have received a copy of the GNU Library General Public
        -:18402:   License along with the GNU C Library; see the file COPYING.LIB.  If not,
        -:18403:   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
        -:18404:   Boston, MA 02111-1307, USA.  */
        -:18405:
        -:18406:#ifdef HAVE_CONFIG_H
        -:18407:#include <config.h>
        -:18408:#undef stderr
        -:18409:#define stderr stdout
        -:18410:#endif
        -:18411:
        -:18412:#include <stdio.h>
        -:18413:#include <sys/types.h>		/* Some systems need this for <signal.h>.  */
        -:18414:#include <signal.h>
        -:18415:#undef stderr
        -:18416:#define stderr stdout
        -:18417:
        -:18418:#ifdef HAVE_STRING_H
        -:18419:#include <string.h>
        -:18420:#undef stderr
        -:18421:#define stderr stdout
        -:18422:#endif
        -:18423:
        -:18424:/* Some systems declare `sys_siglist in <unistd.h>; if
        -:18425:   configure defined SYS_SIGLIST_DECLARED, it may expect
        -:18426:   to find the declaration there.  */
        -:18427:#ifdef HAVE_UNISTD_H
        -:18428:#include <unistd.h>
        -:18429:#undef stderr
        -:18430:#define stderr stdout
        -:18431:#endif
        -:18432:
        -:18433:
        -:18434:/* Some systems do not define NSIG in <signal.h>.  */
        -:18435:#ifndef	NSIG
        -:18436:#ifdef	_NSIG
        -:18437:#define	NSIG	_NSIG
        -:18438:#else
        -:18439:#define	NSIG	32
        -:18440:#endif
        -:18441:#endif
        -:18442:
        -:18443:#if !__STDC__
        -:18444:#define const
        -:18445:#endif
        -:18446:
        -:18447:#include "signame.h"
        -:18448:#undef stderr
        -:18449:#define stderr stdout
        -:18450:
        -:18451:#ifndef HAVE_SYS_SIGLIST
        -:18452:/* There is too much variation in Sys V signal numbers and names, so
        -:18453:   we must initialize them at runtime.  */
        -:18454:
        -:18455:static const char undoc[] = "unknown signal";
        -:18456:
        -:18457:const char *sys_siglist[NSIG];
        -:18458:
        -:18459:#else	/* HAVE_SYS_SIGLIST.  */
        -:18460:
        -:18461:#ifndef SYS_SIGLIST_DECLARED
        -:18462:extern char *sys_siglist[];
        -:18463:#endif	/* Not SYS_SIGLIST_DECLARED.  */
        -:18464:
        -:18465:#endif	/* Not HAVE_SYS_SIGLIST.  */
        -:18466:
        -:18467:/* Table of abbreviations for signals.  Note:  A given number can
        -:18468:   appear more than once with different abbreviations.  */
        -:18469:typedef struct
        -:18470:  {
        -:18471:    int number;
        -:18472:    const char *abbrev;
        -:18473:  } num_abbrev;
        -:18474:static num_abbrev sig_table[NSIG*2];
        -:18475:/* Number of elements of sig_table used.  */
        -:18476:static int sig_table_nelts = 0;
        -:18477:
        -:18478:/* Enter signal number NUMBER into the tables with ABBREV and NAME.  */
        -:18479:
        -:18480:static void
function init_sig called 0 returned 0% blocks executed 0%
    #####:18481:init_sig (number, abbrev, name)
        -:18482:     int number;
        -:18483:     const char *abbrev;
        -:18484:     const char *name;
        -:18485:{
        -:18486:#ifndef HAVE_SYS_SIGLIST
    #####:18487:  sys_siglist[number] = name;
        -:18488:#endif
    #####:18489:  sig_table[sig_table_nelts].number = number;
    #####:18490:  sig_table[sig_table_nelts++].abbrev = abbrev;
    #####:18491:}
        -:18492:
        -:18493:void
function signame_init called 0 returned 0% blocks executed 0%
    #####:18494:signame_init ()
        -:18495:{
        -:18496:#ifndef HAVE_SYS_SIGLIST
        -:18497:  int i;
        -:18498:  /* Initialize signal names.  */
    #####:18499:  for (i = 0; i < NSIG; i++)
branch  0 never executed
branch  1 never executed
    #####:18500:    sys_siglist[i] = undoc;
        -:18501:#endif /* !HAVE_SYS_SIGLIST */
        -:18502:
        -:18503:  /* Initialize signal names.  */
        -:18504:#if defined (SIGHUP)
    #####:18505:  init_sig (SIGHUP, "HUP", "Hangup");
call    0 never executed
        -:18506:#endif
        -:18507:#if defined (SIGINT)
    #####:18508:  init_sig (SIGINT, "INT", "Interrupt");
call    0 never executed
        -:18509:#endif
        -:18510:#if defined (SIGQUIT)
    #####:18511:  init_sig (SIGQUIT, "QUIT", "Quit");
call    0 never executed
        -:18512:#endif
        -:18513:#if defined (SIGILL)
    #####:18514:  init_sig (SIGILL, "ILL", "Illegal Instruction");
call    0 never executed
        -:18515:#endif
        -:18516:#if defined (SIGTRAP)
    #####:18517:  init_sig (SIGTRAP, "TRAP", "Trace/breakpoint trap");
call    0 never executed
        -:18518:#endif
        -:18519:  /* If SIGIOT == SIGABRT, we want to print it as SIGABRT because
        -:18520:     SIGABRT is in ANSI and POSIX.1 and SIGIOT isn't.  */
        -:18521:#if defined (SIGABRT)
    #####:18522:  init_sig (SIGABRT, "ABRT", "Aborted");
call    0 never executed
        -:18523:#endif
        -:18524:#if defined (SIGIOT)
    #####:18525:  init_sig (SIGIOT, "IOT", "IOT trap");
call    0 never executed
        -:18526:#endif
        -:18527:#if defined (SIGEMT)
        -:18528:  init_sig (SIGEMT, "EMT", "EMT trap");
        -:18529:#endif
        -:18530:#if defined (SIGFPE)
    #####:18531:  init_sig (SIGFPE, "FPE", "Floating point exception");
call    0 never executed
        -:18532:#endif
        -:18533:#if defined (SIGKILL)
    #####:18534:  init_sig (SIGKILL, "KILL", "Killed");
call    0 never executed
        -:18535:#endif
        -:18536:#if defined (SIGBUS)
    #####:18537:  init_sig (SIGBUS, "BUS", "Bus error");
call    0 never executed
        -:18538:#endif
        -:18539:#if defined (SIGSEGV)
    #####:18540:  init_sig (SIGSEGV, "SEGV", "Segmentation fault");
call    0 never executed
        -:18541:#endif
        -:18542:#if defined (SIGSYS)
    #####:18543:  init_sig (SIGSYS, "SYS", "Bad system call");
call    0 never executed
        -:18544:#endif
        -:18545:#if defined (SIGPIPE)
    #####:18546:  init_sig (SIGPIPE, "PIPE", "Broken pipe");
call    0 never executed
        -:18547:#endif
        -:18548:#if defined (SIGALRM)
    #####:18549:  init_sig (SIGALRM, "ALRM", "Alarm clock");
call    0 never executed
        -:18550:#endif
        -:18551:#if defined (SIGTERM)
    #####:18552:  init_sig (SIGTERM, "TERM", "Terminated");
call    0 never executed
        -:18553:#endif
        -:18554:#if defined (SIGUSR1)
    #####:18555:  init_sig (SIGUSR1, "USR1", "User defined signal 1");
call    0 never executed
        -:18556:#endif
        -:18557:#if defined (SIGUSR2)
    #####:18558:  init_sig (SIGUSR2, "USR2", "User defined signal 2");
call    0 never executed
        -:18559:#endif
        -:18560:  /* If SIGCLD == SIGCHLD, we want to print it as SIGCHLD because that
        -:18561:     is what is in POSIX.1.  */
        -:18562:#if defined (SIGCHLD)
    #####:18563:  init_sig (SIGCHLD, "CHLD", "Child exited");
call    0 never executed
        -:18564:#endif
        -:18565:#if defined (SIGCLD)
    #####:18566:  init_sig (SIGCLD, "CLD", "Child exited");
call    0 never executed
        -:18567:#endif
        -:18568:#if defined (SIGPWR)
    #####:18569:  init_sig (SIGPWR, "PWR", "Power failure");
call    0 never executed
        -:18570:#endif
        -:18571:#if defined (SIGTSTP)
    #####:18572:  init_sig (SIGTSTP, "TSTP", "Stopped");
call    0 never executed
        -:18573:#endif
        -:18574:#if defined (SIGTTIN)
    #####:18575:  init_sig (SIGTTIN, "TTIN", "Stopped (tty input)");
call    0 never executed
        -:18576:#endif
        -:18577:#if defined (SIGTTOU)
    #####:18578:  init_sig (SIGTTOU, "TTOU", "Stopped (tty output)");
call    0 never executed
        -:18579:#endif
        -:18580:#if defined (SIGSTOP)
    #####:18581:  init_sig (SIGSTOP, "STOP", "Stopped (signal)");
call    0 never executed
        -:18582:#endif
        -:18583:#if defined (SIGXCPU)
    #####:18584:  init_sig (SIGXCPU, "XCPU", "CPU time limit exceeded");
call    0 never executed
        -:18585:#endif
        -:18586:#if defined (SIGXFSZ)
    #####:18587:  init_sig (SIGXFSZ, "XFSZ", "File size limit exceeded");
call    0 never executed
        -:18588:#endif
        -:18589:#if defined (SIGVTALRM)
    #####:18590:  init_sig (SIGVTALRM, "VTALRM", "Virtual timer expired");
call    0 never executed
        -:18591:#endif
        -:18592:#if defined (SIGPROF)
    #####:18593:  init_sig (SIGPROF, "PROF", "Profiling timer expired");
call    0 never executed
        -:18594:#endif
        -:18595:#if defined (SIGWINCH)
        -:18596:  /* "Window size changed" might be more accurate, but even if that
        -:18597:     is all that it means now, perhaps in the future it will be
        -:18598:     extended to cover other kinds of window changes.  */
    #####:18599:  init_sig (SIGWINCH, "WINCH", "Window changed");
call    0 never executed
        -:18600:#endif
        -:18601:#if defined (SIGCONT)
    #####:18602:  init_sig (SIGCONT, "CONT", "Continued");
call    0 never executed
        -:18603:#endif
        -:18604:#if defined (SIGURG)
    #####:18605:  init_sig (SIGURG, "URG", "Urgent I/O condition");
call    0 never executed
        -:18606:#endif
        -:18607:#if defined (SIGIO)
        -:18608:  /* "I/O pending" has also been suggested.  A disadvantage is
        -:18609:     that signal only happens when the process has
        -:18610:     asked for it, not everytime I/O is pending.  Another disadvantage
        -:18611:     is the confusion from giving it a different name than under Unix.  */
    #####:18612:  init_sig (SIGIO, "IO", "I/O possible");
call    0 never executed
        -:18613:#endif
        -:18614:#if defined (SIGWIND)
        -:18615:  init_sig (SIGWIND, "WIND", "SIGWIND");
        -:18616:#endif
        -:18617:#if defined (SIGPHONE)
        -:18618:  init_sig (SIGPHONE, "PHONE", "SIGPHONE");
        -:18619:#endif
        -:18620:#if defined (SIGPOLL)
    #####:18621:  init_sig (SIGPOLL, "POLL", "I/O possible");
call    0 never executed
        -:18622:#endif
        -:18623:#if defined (SIGLOST)
        -:18624:  init_sig (SIGLOST, "LOST", "Resource lost");
        -:18625:#endif
        -:18626:#if defined (SIGDANGER)
        -:18627:  init_sig (SIGDANGER, "DANGER", "Danger signal");
        -:18628:#endif
        -:18629:#if defined (SIGINFO)
        -:18630:  init_sig (SIGINFO, "INFO", "Information request");
        -:18631:#endif
        -:18632:#if defined (SIGNOFP)
        -:18633:  init_sig (SIGNOFP, "NOFP", "Floating point co-processor not available");
        -:18634:#endif
    #####:18635:}
        -:18636:
        -:18637:/* Return the abbreviation for signal NUMBER.  */
        -:18638:
        -:18639:char *
function sig_abbrev called 0 returned 0% blocks executed 0%
    #####:18640:sig_abbrev (number)
        -:18641:     int number;
        -:18642:{
        -:18643:  int i;
        -:18644:
    #####:18645:  if (sig_table_nelts == 0)
branch  0 never executed
branch  1 never executed
    #####:18646:    signame_init ();
call    0 never executed
        -:18647:
    #####:18648:  for (i = 0; i < sig_table_nelts; i++)
branch  0 never executed
branch  1 never executed
    #####:18649:    if (sig_table[i].number == number)
branch  0 never executed
branch  1 never executed
    #####:18650:      return (char *)sig_table[i].abbrev;
    #####:18651:  return NULL;
        -:18652:}
        -:18653:
        -:18654:/* Return the signal number for an ABBREV, or -1 if there is no
        -:18655:   signal by that name.  */
        -:18656:
        -:18657:int
function sig_number called 0 returned 0% blocks executed 0%
    #####:18658:sig_number (abbrev)
        -:18659:     const char *abbrev;
        -:18660:{
        -:18661:  int i;
        -:18662:
    #####:18663:  if (sig_table_nelts == 0)
branch  0 never executed
branch  1 never executed
    #####:18664:    signame_init ();
call    0 never executed
        -:18665:
        -:18666:  /* Skip over "SIG" if present.  */
    #####:18667:  if (abbrev[0] == 'S' && abbrev[1] == 'I' && abbrev[2] == 'G')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:18668:    abbrev += 3;
        -:18669:
    #####:18670:  for (i = 0; i < sig_table_nelts; i++)
branch  0 never executed
branch  1 never executed
    #####:18671:    if (abbrev[0] == sig_table[i].abbrev[0]
branch  0 never executed
branch  1 never executed
    #####:18672:	&& strcmp (abbrev, sig_table[i].abbrev) == 0)
branch  0 never executed
branch  1 never executed
    #####:18673:      return sig_table[i].number;
    #####:18674:  return -1;
        -:18675:}
        -:18676:
        -:18677:#ifndef HAVE_PSIGNAL
        -:18678:/* Print to standard error the name of SIGNAL, preceded by MESSAGE and
        -:18679:   a colon, and followed by a newline.  */
        -:18680:
        -:18681:void
        -:18682:psignal (signal, message)
        -:18683:     int signal;
        -:18684:     const char *message;
        -:18685:{
        -:18686:  if (signal <= 0 || signal >= NSIG)
        -:18687:    fprintf (stderr, "%s: unknown signal", message);
        -:18688:  else
        -:18689:    fprintf (stderr, "%s: %s\n", message, sys_siglist[signal]);
        -:18690:}
        -:18691:#endif
        -:18692:
        -:18693:#ifndef HAVE_STRSIGNAL
        -:18694:/* Return the string associated with the signal number.  */
        -:18695:
        -:18696:char *
        -:18697:strsignal (signal)
        -:18698:     int signal;
        -:18699:{
        -:18700:  static char buf[] = "Signal 12345678901234567890";
        -:18701:
        -:18702:  if (signal > 0 || signal < NSIG)
        -:18703:    return (char *) sys_siglist[signal];
        -:18704:
        -:18705:  sprintf (buf, "Signal %d", signal);
        -:18706:  return buf;
        -:18707:}
        -:18708:#endif
        -:18709:
        -:18710:
        -:18711:
        -:18712:/*************************************************************
        -:18713:  ============================================================
        -:18714:  ************************************************************
        -:18715:  ============================================================
        -:18716:  ************************************************************
        -:18717:                         getopt.c
        -:18718:  ************************************************************
        -:18719:  ============================================================
        -:18720:  ************************************************************
        -:18721:  ============================================================
        -:18722:  *************************************************************/
        -:18723:
        -:18724:/* Getopt for GNU.
        -:18725:   NOTE: getopt is now part of the C library, so if you don't know what
        -:18726:   "Keep this file name-space clean" means, talk to roland@gnu.ai.mit.edu
        -:18727:   before changing it!
        -:18728:
        -:18729:   Copyright (C) 1987, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97
        -:18730:   	Free Software Foundation, Inc.
        -:18731:
        -:18732:NOTE: The canonical source of this file is maintained with the GNU C Library.
        -:18733:Bugs can be reported to bug-glibc@prep.ai.mit.edu.
        -:18734:
        -:18735:This program is free software; you can redistribute it and/or modify it
        -:18736:under the terms of the GNU General Public License as published by the
        -:18737:Free Software Foundation; either version 2, or (at your option) any
        -:18738:later version.
        -:18739:
        -:18740:This program is distributed in the hope that it will be useful,
        -:18741:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:18742:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:18743:GNU General Public License for more details.
        -:18744:
        -:18745:You should have received a copy of the GNU General Public License
        -:18746:along with this program; if not, write to the Free Software
        -:18747:Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
        -:18748:USA.  */
        -:18749:
        -:18750:/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.
        -:18751:   Ditto for AIX 3.2 and <stdlib.h>.  */
        -:18752:#ifndef _NO_PROTO
        -:18753:#define _NO_PROTO
        -:18754:#endif
        -:18755:
        -:18756:#ifdef HAVE_CONFIG_H
        -:18757:#include <config.h>
        -:18758:#undef stderr
        -:18759:#define stderr stdout
        -:18760:#endif
        -:18761:
        -:18762:#if !defined (__STDC__) || !__STDC__
        -:18763:/* This is a separate conditional since some stdc systems
        -:18764:   reject `defined (const)'.  */
        -:18765:#ifndef const
        -:18766:#define const
        -:18767:#endif
        -:18768:#endif
        -:18769:
        -:18770:#include <stdio.h>
        -:18771:#undef stderr
        -:18772:#define stderr stdout
        -:18773:
        -:18774:/* Comment out all this code if we are using the GNU C Library, and are not
        -:18775:   actually compiling the library itself.  This code is part of the GNU C
        -:18776:   Library, but also included in many other GNU distributions.  Compiling
        -:18777:   and linking in this code is a waste when using the GNU C library
        -:18778:   (especially if it is a shared library).  Rather than having every GNU
        -:18779:   program understand `configure --with-gnu-libc' and omit the object files,
        -:18780:   it is simpler to just do this in the source for each such file.  */
        -:18781:
        -:18782:#define GETOPT_INTERFACE_VERSION 2
        -:18783:#if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= 2
        -:18784:#include <gnu-versions.h>
        -:18785:#undef stderr
        -:18786:#define stderr stdout
        -:18787:#if _GNU_GETOPT_INTERFACE_VERSION == GETOPT_INTERFACE_VERSION
        -:18788:#define ELIDE_CODE
        -:18789:#endif
        -:18790:#endif
        -:18791:
        -:18792:#ifndef ELIDE_CODE
        -:18793:
        -:18794:
        -:18795:/* This needs to come after some library #include
        -:18796:   to get __GNU_LIBRARY__ defined.  */
        -:18797:#ifdef	__GNU_LIBRARY__
        -:18798:/* Don't include stdlib.h for non-GNU C libraries because some of them
        -:18799:   contain conflicting prototypes for getopt.  */
        -:18800:#include <stdlib.h>
        -:18801:#include <unistd.h>
        -:18802:#undef stderr
        -:18803:#define stderr stdout
        -:18804:#endif	/* GNU C library.  */
        -:18805:
        -:18806:#ifdef VMS
        -:18807:#include <unixlib.h>
        -:18808:#undef stderr
        -:18809:#define stderr stdout
        -:18810:#if HAVE_STRING_H - 0
        -:18811:#include <string.h>
        -:18812:#undef stderr
        -:18813:#define stderr stdout
        -:18814:#endif
        -:18815:#endif
        -:18816:
        -:18817:#if defined (WINDOWS32) && !defined (__CYGWIN32__)
        -:18818:/* It's not Unix, really.  See?  Capital letters.  */
        -:18819:#include <windows.h>
        -:18820:#undef stderr
        -:18821:#define stderr stdout
        -:18822:#define getpid() GetCurrentProcessId()
        -:18823:#endif
        -:18824:
        -:18825:#ifndef _
        -:18826:/* This is for other GNU distributions with internationalized messages.
        -:18827:   When compiling libc, the _ macro is predefined.  */
        -:18828:#ifdef HAVE_LIBINTL_H
        -:18829:# include <libintl.h>
        -:18830:#undef stderr
        -:18831:#define stderr stdout
        -:18832:# define _(msgid)	gettext (msgid)
        -:18833:#else
        -:18834:# define _(msgid)	(msgid)
        -:18835:#endif
        -:18836:#endif
        -:18837:
        -:18838:/* This version of `getopt' appears to the caller like standard Unix `getopt'
        -:18839:   but it behaves differently for the user, since it allows the user
        -:18840:   to intersperse the options with the other arguments.
        -:18841:
        -:18842:   As `getopt' works, it permutes the elements of ARGV so that,
        -:18843:   when it is done, all the options precede everything else.  Thus
        -:18844:   all application programs are extended to handle flexible argument order.
        -:18845:
        -:18846:   Setting the environment variable POSIXLY_CORRECT disables permutation.
        -:18847:   Then the behavior is completely standard.
        -:18848:
        -:18849:   GNU application programs can use a third alternative mode in which
        -:18850:   they can distinguish the relative order of options and other arguments.  */
        -:18851:
        -:18852:#include "getopt.h"
        -:18853:#undef stderr
        -:18854:#define stderr stdout
        -:18855:
        -:18856:/* For communication from `getopt' to the caller.
        -:18857:   When `getopt' finds an option that takes an argument,
        -:18858:   the argument value is returned here.
        -:18859:   Also, when `ordering' is RETURN_IN_ORDER,
        -:18860:   each non-option ARGV-element is returned here.  */
        -:18861:
        -:18862:char *optarg = NULL;
        -:18863:
        -:18864:/* Index in ARGV of the next element to be scanned.
        -:18865:   This is used for communication to and from the caller
        -:18866:   and for communication between successive calls to `getopt'.
        -:18867:
        -:18868:   On entry to `getopt', zero means this is the first call; initialize.
        -:18869:
        -:18870:   When `getopt' returns -1, this is the index of the first of the
        -:18871:   non-option elements that the caller should itself scan.
        -:18872:
        -:18873:   Otherwise, `optind' communicates from one call to the next
        -:18874:   how much of ARGV has been scanned so far.  */
        -:18875:
        -:18876:/* 1003.2 says this must be 1 before any call.  */
        -:18877:int optind = 1;
        -:18878:
        -:18879:/* Formerly, initialization of getopt depended on optind==0, which
        -:18880:   causes problems with re-calling getopt as programs generally don't
        -:18881:   know that. */
        -:18882:
        -:18883:int __getopt_initialized = 0;
        -:18884:
        -:18885:/* The next char to be scanned in the option-element
        -:18886:   in which the last option character we returned was found.
        -:18887:   This allows us to pick up the scan where we left off.
        -:18888:
        -:18889:   If this is zero, or a null string, it means resume the scan
        -:18890:   by advancing to the next ARGV-element.  */
        -:18891:
        -:18892:static char *nextchar;
        -:18893:
        -:18894:/* Callers store zero here to inhibit the error message
        -:18895:   for unrecognized options.  */
        -:18896:
        -:18897:int opterr = 1;
        -:18898:
        -:18899:/* Set to an option character which was unrecognized.
        -:18900:   This must be initialized on some systems to avoid linking in the
        -:18901:   system's own getopt implementation.  */
        -:18902:
        -:18903:int optopt = '?';
        -:18904:
        -:18905:/* Describe how to deal with options that follow non-option ARGV-elements.
        -:18906:
        -:18907:   If the caller did not specify anything,
        -:18908:   the default is REQUIRE_ORDER if the environment variable
        -:18909:   POSIXLY_CORRECT is defined, PERMUTE otherwise.
        -:18910:
        -:18911:   REQUIRE_ORDER means don't recognize them as options;
        -:18912:   stop option processing when the first non-option is seen.
        -:18913:   This is what Unix does.
        -:18914:   This mode of operation is selected by either setting the environment
        -:18915:   variable POSIXLY_CORRECT, or using `+' as the first character
        -:18916:   of the list of option characters.
        -:18917:
        -:18918:   PERMUTE is the default.  We permute the contents of ARGV as we scan,
        -:18919:   so that eventually all the non-options are at the end.  This allows options
        -:18920:   to be given in any order, even with programs that were not written to
        -:18921:   expect this.
        -:18922:
        -:18923:   RETURN_IN_ORDER is an option available to programs that were written
        -:18924:   to expect options and other ARGV-elements in any order and that care about
        -:18925:   the ordering of the two.  We describe each non-option ARGV-element
        -:18926:   as if it were the argument of an option with character code 1.
        -:18927:   Using `-' as the first character of the list of option characters
        -:18928:   selects this mode of operation.
        -:18929:
        -:18930:   The special argument `--' forces an end of option-scanning regardless
        -:18931:   of the value of `ordering'.  In the case of RETURN_IN_ORDER, only
        -:18932:   `--' can cause `getopt' to return -1 with `optind' != ARGC.  */
        -:18933:
        -:18934:static enum
        -:18935:{
        -:18936:  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER
        -:18937:} ordering;
        -:18938:
        -:18939:/* Value of POSIXLY_CORRECT environment variable.  */
        -:18940:static char *posixly_correct;
        -:18941:
        -:18942:#ifdef	__GNU_LIBRARY__
        -:18943:/* We want to avoid inclusion of string.h with non-GNU libraries
        -:18944:   because there are many ways it can cause trouble.
        -:18945:   On some systems, it contains special magic macros that don't work
        -:18946:   in GCC.  */
        -:18947:#include <string.h>
        -:18948:#undef stderr
        -:18949:#define stderr stdout
        -:18950:#define	my_index	strchr
        -:18951:#else
        -:18952:
        -:18953:/* Avoid depending on library functions or files
        -:18954:   whose names are inconsistent.  */
        -:18955:
        -:18956:char *getenv ();
        -:18957:
        -:18958:static char *
        -:18959:my_index (str, chr)
        -:18960:     const char *str;
        -:18961:     int chr;
        -:18962:{
        -:18963:  while (*str)
        -:18964:    {
        -:18965:      if (*str == chr)
        -:18966:	return (char *) str;
        -:18967:      str++;
        -:18968:    }
        -:18969:  return 0;
        -:18970:}
        -:18971:
        -:18972:/* If using GCC, we can safely declare strlen this way.
        -:18973:   If not using GCC, it is ok not to declare it.  */
        -:18974:#ifdef __GNUC__
        -:18975:/* Note that Motorola Delta 68k R3V7 comes with GCC but not stddef.h.
        -:18976:   That was relevant to code that was here before.  */
        -:18977:#if !defined (__STDC__) || !__STDC__
        -:18978:/* gcc with -traditional declares the built-in strlen to return int,
        -:18979:   and has done so at least since version 2.4.5. -- rms.  */
        -:18980:extern int strlen (const char *);
        -:18981:#endif /* not __STDC__ */
        -:18982:#endif /* __GNUC__ */
        -:18983:
        -:18984:#endif /* not __GNU_LIBRARY__ */
        -:18985:
        -:18986:/* Handle permutation of arguments.  */
        -:18987:
        -:18988:/* Describe the part of ARGV that contains non-options that have
        -:18989:   been skipped.  `first_nonopt' is the index in ARGV of the first of them;
        -:18990:   `last_nonopt' is the index after the last of them.  */
        -:18991:
        -:18992:static int first_nonopt;
        -:18993:static int last_nonopt;
        -:18994:
        -:18995:#ifdef _LIBC
        -:18996:/* Bash 2.0 gives us an environment variable containing flags
        -:18997:   indicating ARGV elements that should not be considered arguments.  */
        -:18998:
        -:18999:/* Defined in getopt_init.c  */
        -:19000:extern char *__getopt_nonoption_flags;
        -:19001:
        -:19002:static int nonoption_flags_max_len;
        -:19003:static int nonoption_flags_len;
        -:19004:
        -:19005:static int original_argc;
        -:19006:static char *const *original_argv;
        -:19007:
        -:19008:extern pid_t __libc_pid;
        -:19009:
        -:19010:/* Make sure the environment variable bash 2.0 puts in the environment
        -:19011:   is valid for the getopt call we must make sure that the ARGV passed
        -:19012:   to getopt is that one passed to the process.  */
        -:19013:static void
        -:19014:__attribute__ ((unused))
        -:19015:store_args_and_env (int argc, char *const *argv)
        -:19016:{
        -:19017:  /* XXX This is no good solution.  We should rather copy the args so
        -:19018:     that we can compare them later.  But we must not use malloc(3).  */
        -:19019:  original_argc = argc;
        -:19020:  original_argv = argv;
        -:19021:}
        -:19022:text_set_element (__libc_subinit, store_args_and_env);
        -:19023:
        -:19024:# define SWAP_FLAGS(ch1, ch2) \
        -:19025:  if (nonoption_flags_len > 0)						      \
        -:19026:    {									      \
        -:19027:      char __tmp = __getopt_nonoption_flags[ch1];			      \
        -:19028:      __getopt_nonoption_flags[ch1] = __getopt_nonoption_flags[ch2];	      \
        -:19029:      __getopt_nonoption_flags[ch2] = __tmp;				      \
        -:19030:    }
        -:19031:#else	/* !_LIBC */
        -:19032:# define SWAP_FLAGS(ch1, ch2)
        -:19033:#endif	/* _LIBC */
        -:19034:
        -:19035:/* Exchange two adjacent subsequences of ARGV.
        -:19036:   One subsequence is elements [first_nonopt,last_nonopt)
        -:19037:   which contains all the non-options that have been skipped so far.
        -:19038:   The other is elements [last_nonopt,optind), which contains all
        -:19039:   the options processed since those non-options were skipped.
        -:19040:
        -:19041:   `first_nonopt' and `last_nonopt' are relocated so that they describe
        -:19042:   the new indices of the non-options in ARGV after they are moved.  */
        -:19043:
        -:19044:#if defined (__STDC__) && __STDC__
        -:19045:static void exchange (char **);
        -:19046:#endif
        -:19047:
        -:19048:static void
        -:19049:exchange (argv)
        -:19050:     char **argv;
        -:19051:{
        -:19052:  int bottom = first_nonopt;
        -:19053:  int middle = last_nonopt;
        -:19054:  int top = optind;
        -:19055:  char *tem;
        -:19056:
        -:19057:  /* Exchange the shorter segment with the far end of the longer segment.
        -:19058:     That puts the shorter segment into the right place.
        -:19059:     It leaves the longer segment in the right place overall,
        -:19060:     but it consists of two parts that need to be swapped next.  */
        -:19061:
        -:19062:#ifdef _LIBC
        -:19063:  /* First make sure the handling of the `__getopt_nonoption_flags'
        -:19064:     string can work normally.  Our top argument must be in the range
        -:19065:     of the string.  */
        -:19066:  if (nonoption_flags_len > 0 && top >= nonoption_flags_max_len)
        -:19067:    {
        -:19068:      /* We must extend the array.  The user plays games with us and
        -:19069:	 presents new arguments.  */
        -:19070:      char *new_str = malloc (top + 1);
        -:19071:      if (new_str == NULL)
        -:19072:	nonoption_flags_len = nonoption_flags_max_len = 0;
        -:19073:      else
        -:19074:	{
        -:19075:	  memcpy (new_str, __getopt_nonoption_flags, nonoption_flags_max_len);
        -:19076:	  memset (&new_str[nonoption_flags_max_len], '\0',
        -:19077:		  top + 1 - nonoption_flags_max_len);
        -:19078:	  nonoption_flags_max_len = top + 1;
        -:19079:	  __getopt_nonoption_flags = new_str;
        -:19080:	}
        -:19081:    }
        -:19082:#endif
        -:19083:
        -:19084:  while (top > middle && middle > bottom)
        -:19085:    {
        -:19086:      if (top - middle > middle - bottom)
        -:19087:	{
        -:19088:	  /* Bottom segment is the short one.  */
        -:19089:	  int len = middle - bottom;
        -:19090:	  register int i;
        -:19091:
        -:19092:	  /* Swap it with the top part of the top segment.  */
        -:19093:	  for (i = 0; i < len; i++)
        -:19094:	    {
        -:19095:	      tem = argv[bottom + i];
        -:19096:	      argv[bottom + i] = argv[top - (middle - bottom) + i];
        -:19097:	      argv[top - (middle - bottom) + i] = tem;
        -:19098:	      SWAP_FLAGS (bottom + i, top - (middle - bottom) + i);
        -:19099:	    }
        -:19100:	  /* Exclude the moved bottom segment from further swapping.  */
        -:19101:	  top -= len;
        -:19102:	}
        -:19103:      else
        -:19104:	{
        -:19105:	  /* Top segment is the short one.  */
        -:19106:	  int len = top - middle;
        -:19107:	  register int i;
        -:19108:
        -:19109:	  /* Swap it with the bottom part of the bottom segment.  */
        -:19110:	  for (i = 0; i < len; i++)
        -:19111:	    {
        -:19112:	      tem = argv[bottom + i];
        -:19113:	      argv[bottom + i] = argv[middle + i];
        -:19114:	      argv[middle + i] = tem;
        -:19115:	      SWAP_FLAGS (bottom + i, middle + i);
        -:19116:	    }
        -:19117:	  /* Exclude the moved top segment from further swapping.  */
        -:19118:	  bottom += len;
        -:19119:	}
        -:19120:    }
        -:19121:
        -:19122:  /* Update records for the slots the non-options now occupy.  */
        -:19123:
        -:19124:  first_nonopt += (optind - last_nonopt);
        -:19125:  last_nonopt = optind;
        -:19126:}
        -:19127:
        -:19128:/* Initialize the internal data when the first call is made.  */
        -:19129:
        -:19130:#if defined (__STDC__) && __STDC__
        -:19131:static const char *_getopt_initialize (int, char *const *, const char *);
        -:19132:#endif
        -:19133:static const char *
        -:19134:_getopt_initialize (argc, argv, optstring)
        -:19135:     int argc;
        -:19136:     char *const *argv;
        -:19137:     const char *optstring;
        -:19138:{
        -:19139:  /* Start processing options with ARGV-element 1 (since ARGV-element 0
        -:19140:     is the program name); the sequence of previously skipped
        -:19141:     non-option ARGV-elements is empty.  */
        -:19142:
        -:19143:  first_nonopt = last_nonopt = optind;
        -:19144:
        -:19145:  nextchar = NULL;
        -:19146:
        -:19147:  posixly_correct = getenv ("POSIXLY_CORRECT");
        -:19148:
        -:19149:  /* Determine how to handle the ordering of options and nonoptions.  */
        -:19150:
        -:19151:  if (optstring[0] == '-')
        -:19152:    {
        -:19153:      ordering = RETURN_IN_ORDER;
        -:19154:      ++optstring;
        -:19155:    }
        -:19156:  else if (optstring[0] == '+')
        -:19157:    {
        -:19158:      ordering = REQUIRE_ORDER;
        -:19159:      ++optstring;
        -:19160:    }
        -:19161:  else if (posixly_correct != NULL)
        -:19162:    ordering = REQUIRE_ORDER;
        -:19163:  else
        -:19164:    ordering = PERMUTE;
        -:19165:
        -:19166:#ifdef _LIBC
        -:19167:  if (posixly_correct == NULL
        -:19168:      && argc == original_argc && argv == original_argv)
        -:19169:    {
        -:19170:      if (nonoption_flags_max_len == 0)
        -:19171:	{
        -:19172:	  if (__getopt_nonoption_flags == NULL
        -:19173:	      || __getopt_nonoption_flags[0] == '\0')
        -:19174:	    nonoption_flags_max_len = -1;
        -:19175:	  else
        -:19176:	    {
        -:19177:	      const char *orig_str = __getopt_nonoption_flags;
        -:19178:	      int len = nonoption_flags_max_len = strlen (orig_str);
        -:19179:	      if (nonoption_flags_max_len < argc)
        -:19180:		nonoption_flags_max_len = argc;
        -:19181:	      __getopt_nonoption_flags =
        -:19182:		(char *) malloc (nonoption_flags_max_len);
        -:19183:	      if (__getopt_nonoption_flags == NULL)
        -:19184:		nonoption_flags_max_len = -1;
        -:19185:	      else
        -:19186:		{
        -:19187:		  memcpy (__getopt_nonoption_flags, orig_str, len);
        -:19188:		  memset (&__getopt_nonoption_flags[len], '\0',
        -:19189:			  nonoption_flags_max_len - len);
        -:19190:		}
        -:19191:	    }
        -:19192:	}
        -:19193:      nonoption_flags_len = nonoption_flags_max_len;
        -:19194:    }
        -:19195:  else
        -:19196:    nonoption_flags_len = 0;
        -:19197:#endif
        -:19198:
        -:19199:  return optstring;
        -:19200:}
        -:19201:
        -:19202:/* Scan elements of ARGV (whose length is ARGC) for option characters
        -:19203:   given in OPTSTRING.
        -:19204:
        -:19205:   If an element of ARGV starts with '-', and is not exactly "-" or "--",
        -:19206:   then it is an option element.  The characters of this element
        -:19207:   (aside from the initial '-') are option characters.  If `getopt'
        -:19208:   is called repeatedly, it returns successively each of the option characters
        -:19209:   from each of the option elements.
        -:19210:
        -:19211:   If `getopt' finds another option character, it returns that character,
        -:19212:   updating `optind' and `nextchar' so that the next call to `getopt' can
        -:19213:   resume the scan with the following option character or ARGV-element.
        -:19214:
        -:19215:   If there are no more option characters, `getopt' returns -1.
        -:19216:   Then `optind' is the index in ARGV of the first ARGV-element
        -:19217:   that is not an option.  (The ARGV-elements have been permuted
        -:19218:   so that those that are not options now come last.)
        -:19219:
        -:19220:   OPTSTRING is a string containing the legitimate option characters.
        -:19221:   If an option character is seen that is not listed in OPTSTRING,
        -:19222:   return '?' after printing an error message.  If you set `opterr' to
        -:19223:   zero, the error message is suppressed but we still return '?'.
        -:19224:
        -:19225:   If a char in OPTSTRING is followed by a colon, that means it wants an arg,
        -:19226:   so the following text in the same ARGV-element, or the text of the following
        -:19227:   ARGV-element, is returned in `optarg'.  Two colons mean an option that
        -:19228:   wants an optional arg; if there is text in the current ARGV-element,
        -:19229:   it is returned in `optarg', otherwise `optarg' is set to zero.
        -:19230:
        -:19231:   If OPTSTRING starts with `-' or `+', it requests different methods of
        -:19232:   handling the non-option ARGV-elements.
        -:19233:   See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.
        -:19234:
        -:19235:   Long-named options begin with `--' instead of `-'.
        -:19236:   Their names may be abbreviated as long as the abbreviation is unique
        -:19237:   or is an exact match for some defined option.  If they have an
        -:19238:   argument, it follows the option name in the same ARGV-element, separated
        -:19239:   from the option name by a `=', or else the in next ARGV-element.
        -:19240:   When `getopt' finds a long-named option, it returns 0 if that option's
        -:19241:   `flag' field is nonzero, the value of the option's `val' field
        -:19242:   if the `flag' field is zero.
        -:19243:
        -:19244:   The elements of ARGV aren't really const, because we permute them.
        -:19245:   But we pretend they're const in the prototype to be compatible
        -:19246:   with other systems.
        -:19247:
        -:19248:   LONGOPTS is a vector of `struct option' terminated by an
        -:19249:   element containing a name which is zero.
        -:19250:
        -:19251:   LONGIND returns the index in LONGOPT of the long-named option found.
        -:19252:   It is only valid when a long-named option has been found by the most
        -:19253:   recent call.
        -:19254:
        -:19255:   If LONG_ONLY is nonzero, '-' as well as '--' can introduce
        -:19256:   long-named options.  */
        -:19257:
        -:19258:int
        -:19259:_getopt_internal (argc, argv, optstring, longopts, longind, long_only)
        -:19260:     int argc;
        -:19261:     char *const *argv;
        -:19262:     const char *optstring;
        -:19263:     const struct option *longopts;
        -:19264:     int *longind;
        -:19265:     int long_only;
        -:19266:{
        -:19267:  optarg = NULL;
        -:19268:
        -:19269:  if (optind == 0 || !__getopt_initialized)
        -:19270:    {
        -:19271:      if (optind == 0)
        -:19272:	optind = 1;	/* Don't scan ARGV[0], the program name.  */
        -:19273:      optstring = _getopt_initialize (argc, argv, optstring);
        -:19274:      __getopt_initialized = 1;
        -:19275:    }
        -:19276:
        -:19277:  /* Test whether ARGV[optind] points to a non-option argument.
        -:19278:     Either it does not have option syntax, or there is an environment flag
        -:19279:     from the shell indicating it is not an option.  The later information
        -:19280:     is only used when the used in the GNU libc.  */
        -:19281:#ifdef _LIBC
        -:19282:#define NONOPTION_P (argv[optind][0] != '-' || argv[optind][1] == '\0'	      \
        -:19283:		     || (optind < nonoption_flags_len			      \
        -:19284:			 && __getopt_nonoption_flags[optind] == '1'))
        -:19285:#else
        -:19286:#define NONOPTION_P (argv[optind][0] != '-' || argv[optind][1] == '\0')
        -:19287:#endif
        -:19288:
        -:19289:  if (nextchar == NULL || *nextchar == '\0')
        -:19290:    {
        -:19291:      /* Advance to the next ARGV-element.  */
        -:19292:
        -:19293:      /* Give FIRST_NONOPT & LAST_NONOPT rational values if OPTIND has been
        -:19294:	 moved back by the user (who may also have changed the arguments).  */
        -:19295:      if (last_nonopt > optind)
        -:19296:	last_nonopt = optind;
        -:19297:      if (first_nonopt > optind)
        -:19298:	first_nonopt = optind;
        -:19299:
        -:19300:      if (ordering == PERMUTE)
        -:19301:	{
        -:19302:	  /* If we have just processed some options following some non-options,
        -:19303:	     exchange them so that the options come first.  */
        -:19304:
        -:19305:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
        -:19306:	    exchange ((char **) argv);
        -:19307:	  else if (last_nonopt != optind)
        -:19308:	    first_nonopt = optind;
        -:19309:
        -:19310:	  /* Skip any additional non-options
        -:19311:	     and extend the range of non-options previously skipped.  */
        -:19312:
        -:19313:	  while (optind < argc && NONOPTION_P)
        -:19314:	    optind++;
        -:19315:	  last_nonopt = optind;
        -:19316:	}
        -:19317:
        -:19318:      /* The special ARGV-element `--' means premature end of options.
        -:19319:	 Skip it like a null option,
        -:19320:	 then exchange with previous non-options as if it were an option,
        -:19321:	 then skip everything else like a non-option.  */
        -:19322:
        -:19323:      if (optind != argc && !strcmp (argv[optind], "--"))
        -:19324:	{
        -:19325:	  optind++;
        -:19326:
        -:19327:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
        -:19328:	    exchange ((char **) argv);
        -:19329:	  else if (first_nonopt == last_nonopt)
        -:19330:	    first_nonopt = optind;
        -:19331:	  last_nonopt = argc;
        -:19332:
        -:19333:	  optind = argc;
        -:19334:	}
        -:19335:
        -:19336:      /* If we have done all the ARGV-elements, stop the scan
        -:19337:	 and back over any non-options that we skipped and permuted.  */
        -:19338:
        -:19339:      if (optind == argc)
        -:19340:	{
        -:19341:	  /* Set the next-arg-index to point at the non-options
        -:19342:	     that we previously skipped, so the caller will digest them.  */
        -:19343:	  if (first_nonopt != last_nonopt)
        -:19344:	    optind = first_nonopt;
        -:19345:	  return -1;
        -:19346:	}
        -:19347:
        -:19348:      /* If we have come to a non-option and did not permute it,
        -:19349:	 either stop the scan or describe it to the caller and pass it by.  */
        -:19350:
        -:19351:      if (NONOPTION_P)
        -:19352:	{
        -:19353:	  if (ordering == REQUIRE_ORDER)
        -:19354:	    return -1;
        -:19355:	  optarg = argv[optind++];
        -:19356:	  return 1;
        -:19357:	}
        -:19358:
        -:19359:      /* We have found another option-ARGV-element.
        -:19360:	 Skip the initial punctuation.  */
        -:19361:
        -:19362:      nextchar = (argv[optind] + 1
        -:19363:		  + (longopts != NULL && argv[optind][1] == '-'));
        -:19364:    }
        -:19365:
        -:19366:  /* Decode the current option-ARGV-element.  */
        -:19367:
        -:19368:  /* Check whether the ARGV-element is a long option.
        -:19369:
        -:19370:     If long_only and the ARGV-element has the form "-f", where f is
        -:19371:     a valid short option, don't consider it an abbreviated form of
        -:19372:     a long option that starts with f.  Otherwise there would be no
        -:19373:     way to give the -f short option.
        -:19374:
        -:19375:     On the other hand, if there's a long option "fubar" and
        -:19376:     the ARGV-element is "-fu", do consider that an abbreviation of
        -:19377:     the long option, just like "--fu", and not "-f" with arg "u".
        -:19378:
        -:19379:     This distinction seems to be the most useful approach.  */
        -:19380:
        -:19381:  if (longopts != NULL
        -:19382:      && (argv[optind][1] == '-'
        -:19383:	  || (long_only && (argv[optind][2] || !my_index (optstring, argv[optind][1])))))
        -:19384:    {
        -:19385:      char *nameend;
        -:19386:      const struct option *p;
        -:19387:      const struct option *pfound = NULL;
        -:19388:      int exact = 0;
        -:19389:      int ambig = 0;
        -:19390:      int indfound = -1;
        -:19391:      int option_index;
        -:19392:
        -:19393:      for (nameend = nextchar; *nameend && *nameend != '='; nameend++)
        -:19394:	/* Do nothing.  */ ;
        -:19395:
        -:19396:      /* Test all long options for either exact match
        -:19397:	 or abbreviated matches.  */
        -:19398:      for (p = longopts, option_index = 0; p->name; p++, option_index++)
        -:19399:	if (!strncmp (p->name, nextchar, nameend - nextchar))
        -:19400:	  {
        -:19401:	    if ((unsigned int) (nameend - nextchar)
        -:19402:		== (unsigned int) strlen (p->name))
        -:19403:	      {
        -:19404:		/* Exact match found.  */
        -:19405:		pfound = p;
        -:19406:		indfound = option_index;
        -:19407:		exact = 1;
        -:19408:		break;
        -:19409:	      }
        -:19410:	    else if (pfound == NULL)
        -:19411:	      {
        -:19412:		/* First nonexact match found.  */
        -:19413:		pfound = p;
        -:19414:		indfound = option_index;
        -:19415:	      }
        -:19416:	    else
        -:19417:	      /* Second or later nonexact match found.  */
        -:19418:	      ambig = 1;
        -:19419:	  }
        -:19420:
        -:19421:      if (ambig && !exact)
        -:19422:	{
        -:19423:	  if (opterr)
        -:19424:	    fprintf (stderr, _("%s: option `%s' is ambiguous\n"),
        -:19425:		     argv[0], argv[optind]);
        -:19426:	  nextchar += strlen (nextchar);
        -:19427:	  optind++;
        -:19428:	  optopt = 0;
        -:19429:	  return '?';
        -:19430:	}
        -:19431:
        -:19432:      if (pfound != NULL)
        -:19433:	{
        -:19434:	  option_index = indfound;
        -:19435:	  optind++;
        -:19436:	  if (*nameend)
        -:19437:	    {
        -:19438:	      /* Don't test has_arg with >, because some C compilers don't
        -:19439:		 allow it to be used on enums.  */
        -:19440:	      if (pfound->has_arg)
        -:19441:		optarg = nameend + 1;
        -:19442:	      else
        -:19443:		{
        -:19444:		  if (opterr)
        -:19445:		   if (argv[optind - 1][1] == '-')
        -:19446:		    /* --option */
        -:19447:		    fprintf (stderr,
        -:19448:		     _("%s: option `--%s' doesn't allow an argument\n"),
        -:19449:		     argv[0], pfound->name);
        -:19450:		   else
        -:19451:		    /* +option or -option */
        -:19452:		    fprintf (stderr,
        -:19453:		     _("%s: option `%c%s' doesn't allow an argument\n"),
        -:19454:		     argv[0], argv[optind - 1][0], pfound->name);
        -:19455:
        -:19456:		  nextchar += strlen (nextchar);
        -:19457:
        -:19458:		  optopt = pfound->val;
        -:19459:		  return '?';
        -:19460:		}
        -:19461:	    }
        -:19462:	  else if (pfound->has_arg == 1)
        -:19463:	    {
        -:19464:	      if (optind < argc)
        -:19465:		optarg = argv[optind++];
        -:19466:	      else
        -:19467:		{
        -:19468:		  if (opterr)
        -:19469:		    fprintf (stderr,
        -:19470:			   _("%s: option `%s' requires an argument\n"),
        -:19471:			   argv[0], argv[optind - 1]);
        -:19472:		  nextchar += strlen (nextchar);
        -:19473:		  optopt = pfound->val;
        -:19474:		  return optstring[0] == ':' ? ':' : '?';
        -:19475:		}
        -:19476:	    }
        -:19477:	  nextchar += strlen (nextchar);
        -:19478:	  if (longind != NULL)
        -:19479:	    *longind = option_index;
        -:19480:	  if (pfound->flag)
        -:19481:	    {
        -:19482:	      *(pfound->flag) = pfound->val;
        -:19483:	      return 0;
        -:19484:	    }
        -:19485:	  return pfound->val;
        -:19486:	}
        -:19487:
        -:19488:      /* Can't find it as a long option.  If this is not getopt_long_only,
        -:19489:	 or the option starts with '--' or is not a valid short
        -:19490:	 option, then it's an error.
        -:19491:	 Otherwise interpret it as a short option.  */
        -:19492:      if (!long_only || argv[optind][1] == '-'
        -:19493:	  || my_index (optstring, *nextchar) == NULL)
        -:19494:	{
        -:19495:	  if (opterr)
        -:19496:	    {
        -:19497:	      if (argv[optind][1] == '-')
        -:19498:		/* --option */
        -:19499:		fprintf (stderr, _("%s: unrecognized option `--%s'\n"),
        -:19500:			 argv[0], nextchar);
        -:19501:	      else
        -:19502:		/* +option or -option */
        -:19503:		fprintf (stderr, _("%s: unrecognized option `%c%s'\n"),
        -:19504:			 argv[0], argv[optind][0], nextchar);
        -:19505:	    }
        -:19506:	  nextchar = (char *) "";
        -:19507:	  optind++;
        -:19508:	  optopt = 0;
        -:19509:	  return '?';
        -:19510:	}
        -:19511:    }
        -:19512:
        -:19513:  /* Look at and handle the next short option-character.  */
        -:19514:
        -:19515:  {
        -:19516:    char c = *nextchar++;
        -:19517:    char *temp = my_index (optstring, c);
        -:19518:
        -:19519:    /* Increment `optind' when we start to process its last character.  */
        -:19520:    if (*nextchar == '\0')
        -:19521:      ++optind;
        -:19522:
        -:19523:    if (temp == NULL || c == ':')
        -:19524:      {
        -:19525:	if (opterr)
        -:19526:	  {
        -:19527:	    if (posixly_correct)
        -:19528:	      /* 1003.2 specifies the format of this message.  */
        -:19529:	      fprintf (stderr, _("%s: illegal option -- %c\n"),
        -:19530:		       argv[0], c);
        -:19531:	    else
        -:19532:	      fprintf (stderr, _("%s: invalid option -- %c\n"),
        -:19533:		       argv[0], c);
        -:19534:	  }
        -:19535:	optopt = c;
        -:19536:	return '?';
        -:19537:      }
        -:19538:    /* Convenience. Treat POSIX -W foo same as long option --foo */
        -:19539:    if (temp[0] == 'W' && temp[1] == ';')
        -:19540:      {
        -:19541:	char *nameend;
        -:19542:	const struct option *p;
        -:19543:	const struct option *pfound = NULL;
        -:19544:	int exact = 0;
        -:19545:	int ambig = 0;
        -:19546:	int indfound = 0;
        -:19547:	int option_index;
        -:19548:
        -:19549:	/* This is an option that requires an argument.  */
        -:19550:	if (*nextchar != '\0')
        -:19551:	  {
        -:19552:	    optarg = nextchar;
        -:19553:	    /* If we end this ARGV-element by taking the rest as an arg,
        -:19554:	       we must advance to the next element now.  */
        -:19555:	    optind++;
        -:19556:	  }
        -:19557:	else if (optind == argc)
        -:19558:	  {
        -:19559:	    if (opterr)
        -:19560:	      {
        -:19561:		/* 1003.2 specifies the format of this message.  */
        -:19562:		fprintf (stderr, _("%s: option requires an argument -- %c\n"),
        -:19563:			 argv[0], c);
        -:19564:	      }
        -:19565:	    optopt = c;
        -:19566:	    if (optstring[0] == ':')
        -:19567:	      c = ':';
        -:19568:	    else
        -:19569:	      c = '?';
        -:19570:	    return c;
        -:19571:	  }
        -:19572:	else
        -:19573:	  /* We already incremented `optind' once;
        -:19574:	     increment it again when taking next ARGV-elt as argument.  */
        -:19575:	  optarg = argv[optind++];
        -:19576:
        -:19577:	/* optarg is now the argument, see if it's in the
        -:19578:	   table of longopts.  */
        -:19579:
        -:19580:	for (nextchar = nameend = optarg; *nameend && *nameend != '='; nameend++)
        -:19581:	  /* Do nothing.  */ ;
        -:19582:
        -:19583:	/* Test all long options for either exact match
        -:19584:	   or abbreviated matches.  */
        -:19585:	for (p = longopts, option_index = 0; p->name; p++, option_index++)
        -:19586:	  if (!strncmp (p->name, nextchar, nameend - nextchar))
        -:19587:	    {
        -:19588:	      if ((unsigned int) (nameend - nextchar) == strlen (p->name))
        -:19589:		{
        -:19590:		  /* Exact match found.  */
        -:19591:		  pfound = p;
        -:19592:		  indfound = option_index;
        -:19593:		  exact = 1;
        -:19594:		  break;
        -:19595:		}
        -:19596:	      else if (pfound == NULL)
        -:19597:		{
        -:19598:		  /* First nonexact match found.  */
        -:19599:		  pfound = p;
        -:19600:		  indfound = option_index;
        -:19601:		}
        -:19602:	      else
        -:19603:		/* Second or later nonexact match found.  */
        -:19604:		ambig = 1;
        -:19605:	    }
        -:19606:	if (ambig && !exact)
        -:19607:	  {
        -:19608:	    if (opterr)
        -:19609:	      fprintf (stderr, _("%s: option `-W %s' is ambiguous\n"),
        -:19610:		       argv[0], argv[optind]);
        -:19611:	    nextchar += strlen (nextchar);
        -:19612:	    optind++;
        -:19613:	    return '?';
        -:19614:	  }
        -:19615:	if (pfound != NULL)
        -:19616:	  {
        -:19617:	    option_index = indfound;
        -:19618:	    if (*nameend)
        -:19619:	      {
        -:19620:		/* Don't test has_arg with >, because some C compilers don't
        -:19621:		   allow it to be used on enums.  */
        -:19622:		if (pfound->has_arg)
        -:19623:		  optarg = nameend + 1;
        -:19624:		else
        -:19625:		  {
        -:19626:		    if (opterr)
        -:19627:		      fprintf (stderr, _("\
        -:19628:%s: option `-W %s' doesn't allow an argument\n"),
        -:19629:			       argv[0], pfound->name);
        -:19630:
        -:19631:		    nextchar += strlen (nextchar);
        -:19632:		    return '?';
        -:19633:		  }
        -:19634:	      }
        -:19635:	    else if (pfound->has_arg == 1)
        -:19636:	      {
        -:19637:		if (optind < argc)
        -:19638:		  optarg = argv[optind++];
        -:19639:		else
        -:19640:		  {
        -:19641:		    if (opterr)
        -:19642:		      fprintf (stderr,
        -:19643:			       _("%s: option `%s' requires an argument\n"),
        -:19644:			       argv[0], argv[optind - 1]);
        -:19645:		    nextchar += strlen (nextchar);
        -:19646:		    return optstring[0] == ':' ? ':' : '?';
        -:19647:		  }
        -:19648:	      }
        -:19649:	    nextchar += strlen (nextchar);
        -:19650:	    if (longind != NULL)
        -:19651:	      *longind = option_index;
        -:19652:	    if (pfound->flag)
        -:19653:	      {
        -:19654:		*(pfound->flag) = pfound->val;
        -:19655:		return 0;
        -:19656:	      }
        -:19657:	    return pfound->val;
        -:19658:	  }
        -:19659:	  nextchar = NULL;
        -:19660:	  return 'W';	/* Let the application handle it.   */
        -:19661:      }
        -:19662:    if (temp[1] == ':')
        -:19663:      {
        -:19664:	if (temp[2] == ':')
        -:19665:	  {
        -:19666:	    /* This is an option that accepts an argument optionally.  */
        -:19667:	    if (*nextchar != '\0')
        -:19668:	      {
        -:19669:		optarg = nextchar;
        -:19670:		optind++;
        -:19671:	      }
        -:19672:	    else
        -:19673:	      optarg = NULL;
        -:19674:	    nextchar = NULL;
        -:19675:	  }
        -:19676:	else
        -:19677:	  {
        -:19678:	    /* This is an option that requires an argument.  */
        -:19679:	    if (*nextchar != '\0')
        -:19680:	      {
        -:19681:		optarg = nextchar;
        -:19682:		/* If we end this ARGV-element by taking the rest as an arg,
        -:19683:		   we must advance to the next element now.  */
        -:19684:		optind++;
        -:19685:	      }
        -:19686:	    else if (optind == argc)
        -:19687:	      {
        -:19688:		if (opterr)
        -:19689:		  {
        -:19690:		    /* 1003.2 specifies the format of this message.  */
        -:19691:		    fprintf (stderr,
        -:19692:			   _("%s: option requires an argument -- %c\n"),
        -:19693:			   argv[0], c);
        -:19694:		  }
        -:19695:		optopt = c;
        -:19696:		if (optstring[0] == ':')
        -:19697:		  c = ':';
        -:19698:		else
        -:19699:		  c = '?';
        -:19700:	      }
        -:19701:	    else
        -:19702:	      /* We already incremented `optind' once;
        -:19703:		 increment it again when taking next ARGV-elt as argument.  */
        -:19704:	      optarg = argv[optind++];
        -:19705:	    nextchar = NULL;
        -:19706:	  }
        -:19707:      }
        -:19708:    return c;
        -:19709:  }
        -:19710:}
        -:19711:
        -:19712:int
        -:19713:getopt (argc, argv, optstring)
        -:19714:     int argc;
        -:19715:     char *const *argv;
        -:19716:     const char *optstring;
        -:19717:{
        -:19718:  return _getopt_internal (argc, argv, optstring,
        -:19719:			   (const struct option *) 0,
        -:19720:			   (int *) 0,
        -:19721:			   0);
        -:19722:}
        -:19723:
        -:19724:#endif	/* Not ELIDE_CODE.  */
        -:19725:
        -:19726:#ifdef TEST
        -:19727:
        -:19728:/* Compile with -DTEST to make an executable for use in testing
        -:19729:   the above definition of `getopt'.  */
        -:19730:
        -:19731:int
        -:19732:main (argc, argv)
        -:19733:     int argc;
        -:19734:     char **argv;
        -:19735:{
        -:19736:  int c;
        -:19737:  int digit_optind = 0;
        -:19738:
        -:19739:  while (1)
        -:19740:    {
        -:19741:      int this_option_optind = optind ? optind : 1;
        -:19742:
        -:19743:      c = getopt (argc, argv, "abc:d:0123456789");
        -:19744:      if (c == -1)
        -:19745:	break;
        -:19746:
        -:19747:      switch (c)
        -:19748:	{
        -:19749:	case '0':
        -:19750:	case '1':
        -:19751:	case '2':
        -:19752:	case '3':
        -:19753:	case '4':
        -:19754:	case '5':
        -:19755:	case '6':
        -:19756:	case '7':
        -:19757:	case '8':
        -:19758:	case '9':
        -:19759:	  if (digit_optind != 0 && digit_optind != this_option_optind)
        -:19760:	    printf ("digits occur in two different argv-elements.\n");
        -:19761:	  digit_optind = this_option_optind;
        -:19762:	  printf ("option %c\n", c);
        -:19763:	  break;
        -:19764:
        -:19765:	case 'a':
        -:19766:	  printf ("option a\n");
        -:19767:	  break;
        -:19768:
        -:19769:	case 'b':
        -:19770:	  printf ("option b\n");
        -:19771:	  break;
        -:19772:
        -:19773:	case 'c':
        -:19774:	  printf ("option c with value `%s'\n", optarg);
        -:19775:	  break;
        -:19776:
        -:19777:	case '?':
        -:19778:	  break;
        -:19779:
        -:19780:	default:
        -:19781:	  printf ("?? getopt returned character code 0%o ??\n", c);
        -:19782:	}
        -:19783:    }
        -:19784:
        -:19785:  if (optind < argc)
        -:19786:    {
        -:19787:      printf ("non-option ARGV-elements: ");
        -:19788:      while (optind < argc)
        -:19789:	printf ("%s ", argv[optind++]);
        -:19790:      printf ("\n");
        -:19791:    }
        -:19792:
        -:19793:  exit (0);
        -:19794:}
        -:19795:
        -:19796:#endif /* TEST */
        -:19797:
        -:19798:
        -:19799:
        -:19800:/*************************************************************
        -:19801:  ============================================================
        -:19802:  ************************************************************
        -:19803:  ============================================================
        -:19804:  ************************************************************
        -:19805:                         getopt1.c
        -:19806:  ************************************************************
        -:19807:  ============================================================
        -:19808:  ************************************************************
        -:19809:  ============================================================
        -:19810:  *************************************************************/
        -:19811:
        -:19812:/* getopt_long and getopt_long_only entry points for GNU getopt.
        -:19813:   Copyright (C) 1987,88,89,90,91,92,93,94,96,97 Free Software Foundation, Inc.
        -:19814:
        -:19815:NOTE: The canonical source of this file is maintained with the GNU C Library.
        -:19816:Bugs can be reported to bug-glibc@prep.ai.mit.edu.
        -:19817:
        -:19818:This program is free software; you can redistribute it and/or modify it
        -:19819:under the terms of the GNU General Public License as published by the
        -:19820:Free Software Foundation; either version 2, or (at your option) any
        -:19821:later version.
        -:19822:
        -:19823:This program is distributed in the hope that it will be useful,
        -:19824:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:19825:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:19826:GNU General Public License for more details.
        -:19827:
        -:19828:You should have received a copy of the GNU General Public License
        -:19829:along with this program; if not, write to the Free Software
        -:19830:Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
        -:19831:USA.  */
        -:19832:
        -:19833:#ifdef HAVE_CONFIG_H
        -:19834:#include <config.h>
        -:19835:#undef stderr
        -:19836:#define stderr stdout
        -:19837:#endif
        -:19838:
        -:19839:#include "getopt.h"
        -:19840:#undef stderr
        -:19841:#define stderr stdout
        -:19842:
        -:19843:#if !defined (__STDC__) || !__STDC__
        -:19844:/* This is a separate conditional since some stdc systems
        -:19845:   reject `defined (const)'.  */
        -:19846:#ifndef const
        -:19847:#define const
        -:19848:#endif
        -:19849:#endif
        -:19850:
        -:19851:#include <stdio.h>
        -:19852:#undef stderr
        -:19853:#define stderr stdout
        -:19854:
        -:19855:/* Comment out all this code if we are using the GNU C Library, and are not
        -:19856:   actually compiling the library itself.  This code is part of the GNU C
        -:19857:   Library, but also included in many other GNU distributions.  Compiling
        -:19858:   and linking in this code is a waste when using the GNU C library
        -:19859:   (especially if it is a shared library).  Rather than having every GNU
        -:19860:   program understand `configure --with-gnu-libc' and omit the object files,
        -:19861:   it is simpler to just do this in the source for each such file.  */
        -:19862:
        -:19863:#define GETOPT_INTERFACE_VERSION 2
        -:19864:#if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= 2
        -:19865:#include <gnu-versions.h>
        -:19866:#undef stderr
        -:19867:#define stderr stdout
        -:19868:#if _GNU_GETOPT_INTERFACE_VERSION == GETOPT_INTERFACE_VERSION
        -:19869:#define ELIDE_CODE
        -:19870:#endif
        -:19871:#endif
        -:19872:
        -:19873:#ifndef ELIDE_CODE
        -:19874:
        -:19875:
        -:19876:/* This needs to come after some library #include
        -:19877:   to get __GNU_LIBRARY__ defined.  */
        -:19878:#ifdef __GNU_LIBRARY__
        -:19879:#include <stdlib.h>
        -:19880:#undef stderr
        -:19881:#define stderr stdout
        -:19882:#endif
        -:19883:
        -:19884:#ifndef	NULL
        -:19885:#define NULL 0
        -:19886:#endif
        -:19887:
        -:19888:int
        -:19889:getopt_long (argc, argv, options, long_options, opt_index)
        -:19890:     int argc;
        -:19891:     char *const *argv;
        -:19892:     const char *options;
        -:19893:     const struct option *long_options;
        -:19894:     int *opt_index;
        -:19895:{
        -:19896:  return _getopt_internal (argc, argv, options, long_options, opt_index, 0);
        -:19897:}
        -:19898:
        -:19899:/* Like getopt_long, but '-' as well as '--' can indicate a long option.
        -:19900:   If an option that starts with '-' (not '--') doesn't match a long option,
        -:19901:   but does match a short option, it is parsed as a short option
        -:19902:   instead.  */
        -:19903:
        -:19904:int
        -:19905:getopt_long_only (argc, argv, options, long_options, opt_index)
        -:19906:     int argc;
        -:19907:     char *const *argv;
        -:19908:     const char *options;
        -:19909:     const struct option *long_options;
        -:19910:     int *opt_index;
        -:19911:{
        -:19912:  return _getopt_internal (argc, argv, options, long_options, opt_index, 1);
        -:19913:}
        -:19914:
        -:19915:
        -:19916:#endif	/* Not ELIDE_CODE.  */
        -:19917:
        -:19918:#ifdef TEST
        -:19919:
        -:19920:#include <stdio.h>
        -:19921:#undef stderr
        -:19922:#define stderr stdout
        -:19923:
        -:19924:int
        -:19925:main (argc, argv)
        -:19926:     int argc;
        -:19927:     char **argv;
        -:19928:{
        -:19929:  int c;
        -:19930:  int digit_optind = 0;
        -:19931:
        -:19932:  while (1)
        -:19933:    {
        -:19934:      int this_option_optind = optind ? optind : 1;
        -:19935:      int option_index = 0;
        -:19936:      static struct option long_options[] =
        -:19937:      {
        -:19938:	{"add", 1, 0, 0},
        -:19939:	{"append", 0, 0, 0},
        -:19940:	{"delete", 1, 0, 0},
        -:19941:	{"verbose", 0, 0, 0},
        -:19942:	{"create", 0, 0, 0},
        -:19943:	{"file", 1, 0, 0},
        -:19944:	{0, 0, 0, 0}
        -:19945:      };
        -:19946:
        -:19947:      c = getopt_long (argc, argv, "abc:d:0123456789",
        -:19948:		       long_options, &option_index);
        -:19949:      if (c == -1)
        -:19950:	break;
        -:19951:
        -:19952:      switch (c)
        -:19953:	{
        -:19954:	case 0:
        -:19955:	  printf ("option %s", long_options[option_index].name);
        -:19956:	  if (optarg)
        -:19957:	    printf (" with arg %s", optarg);
        -:19958:	  printf ("\n");
        -:19959:	  break;
        -:19960:
        -:19961:	case '0':
        -:19962:	case '1':
        -:19963:	case '2':
        -:19964:	case '3':
        -:19965:	case '4':
        -:19966:	case '5':
        -:19967:	case '6':
        -:19968:	case '7':
        -:19969:	case '8':
        -:19970:	case '9':
        -:19971:	  if (digit_optind != 0 && digit_optind != this_option_optind)
        -:19972:	    printf ("digits occur in two different argv-elements.\n");
        -:19973:	  digit_optind = this_option_optind;
        -:19974:	  printf ("option %c\n", c);
        -:19975:	  break;
        -:19976:
        -:19977:	case 'a':
        -:19978:	  printf ("option a\n");
        -:19979:	  break;
        -:19980:
        -:19981:	case 'b':
        -:19982:	  printf ("option b\n");
        -:19983:	  break;
        -:19984:
        -:19985:	case 'c':
        -:19986:	  printf ("option c with value `%s'\n", optarg);
        -:19987:	  break;
        -:19988:
        -:19989:	case 'd':
        -:19990:	  printf ("option d with value `%s'\n", optarg);
        -:19991:	  break;
        -:19992:
        -:19993:	case '?':
        -:19994:	  break;
        -:19995:
        -:19996:	default:
        -:19997:	  printf ("?? getopt returned character code 0%o ??\n", c);
        -:19998:	}
        -:19999:    }
        -:20000:
        -:20001:  if (optind < argc)
        -:20002:    {
        -:20003:      printf ("non-option ARGV-elements: ");
        -:20004:      while (optind < argc)
        -:20005:	printf ("%s ", argv[optind++]);
        -:20006:      printf ("\n");
        -:20007:    }
        -:20008:
        -:20009:  exit (0);
        -:20010:}
        -:20011:
        -:20012:#endif /* TEST */
        -:20013:
        -:20014:
